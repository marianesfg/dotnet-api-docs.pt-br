<Type Name="TimeZoneInfo" FullName="System.TimeZoneInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9bf169f066a8b7ff359372b5ab4b62607f600cf4" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55310665" /></Metadata><TypeSignature Language="C#" Value="public sealed class TimeZoneInfo : IEquatable&lt;TimeZoneInfo&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TimeZoneInfo extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.TimeZoneInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TimeZoneInfo&#xA;Implements IDeserializationCallback, IEquatable(Of TimeZoneInfo), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZoneInfo sealed : IEquatable&lt;TimeZoneInfo ^&gt;, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type TimeZoneInfo = class&#xA;    interface IEquatable&lt;TimeZoneInfo&gt;&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeZoneInfo&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa qualquer fuso horário do mundo.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um fuso horário é uma região geográfica na qual o mesmo horário é usado.  
  
 O <xref:System.TimeZoneInfo> classe oferece melhorias significativas em relação a <xref:System.TimeZone> classe, que fornece apenas uma funcionalidade limitada.  
  
 O <xref:System.TimeZone> classe reconhece somente o fuso horário local e pode converter horários entre o tempo Universal Coordenado (UTC) e a hora local. Um <xref:System.TimeZoneInfo> objeto pode representar qualquer fuso horário e métodos do <xref:System.TimeZoneInfo> classe pode ser usada para converter a hora em um fuso horário para a hora correspondente em outro fuso horário. Os membros do <xref:System.TimeZoneInfo> classe compatíveis com as seguintes operações:  
  
-   Recuperando um fuso horário que já está definido pelo sistema operacional.  
  
-   Enumerar os fusos horários que estão disponíveis em um sistema.  
  
-   Convertendo horários entre fusos horários diferentes.  
  
-   Criar uma nova zona de tempo que ainda não foi definida pelo sistema operacional.  
  
-   Serialização de um fuso horário para recuperação posterior.  
  
> [!NOTE]
>  Uma instância da <xref:System.TimeZoneInfo> classe é imutável. Depois que um objeto foi instanciado, seus valores não podem ser modificados.  
  
 Você não pode instanciar uma <xref:System.TimeZoneInfo> do objeto usando o `new` palavra-chave. Em vez disso, você deve chamar um dos membros estáticos do <xref:System.TimeZoneInfo> classe mostrada na tabela a seguir.  
  
|Nome de membro estático|Descrição|  
|------------------------|-----------------|  
|Método <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>|Cria um fuso horário personalizado de dados fornecido pelo aplicativo.|  
|Método <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>|Cria uma instância de um fuso horário com base em seu identificador.|  
|Método <xref:System.TimeZoneInfo.FromSerializedString%2A>|Desserializa um valor de cadeia de caracteres para recriar serializado anteriormente <xref:System.TimeZoneInfo> objeto.|  
|Método <xref:System.TimeZoneInfo.GetSystemTimeZones%2A>|Retorna um enumerável <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> de <xref:System.TimeZoneInfo> objetos que representa todos os fusos horários disponíveis no sistema local.|  
|Propriedade <xref:System.TimeZoneInfo.Local%2A>|Cria uma instância de um <xref:System.TimeZoneInfo> objeto que representa o fuso horário local.|  
|Propriedade <xref:System.TimeZoneInfo.Utc%2A>|Cria uma instância de um <xref:System.TimeZoneInfo> objeto que representa a zona UTC.|  
  
 Você pode usar o <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> método para criar um fuso horário que não está definido no registro do sistema local em sistemas Windows ou pelas classes de fuso horário a [biblioteca ICU](http://userguide.icu-project.org/datetime/timezone) no Linux ou macOS. Você pode usar o <xref:System.TimeZoneInfo.ToSerializedString%2A> propriedade salvar informações de fuso horário do objeto como uma cadeia de caracteres, que pode ser armazenada em alguma forma que seja acessível para o aplicativo. Você pode usar o <xref:System.TimeZoneInfo.FromSerializedString%2A> método para converter uma cadeia de caracteres serializada de volta para um <xref:System.TimeZoneInfo> objeto.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BaseUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan BaseUtcOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BaseUtcOffset" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.BaseUtcOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseUtcOffset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BaseUtcOffset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseUtcOffset : TimeSpan" Usage="System.TimeZoneInfo.BaseUtcOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a diferença de tempo entre o tempo padrão e o UTC (Tempo Universal Coordenado) do fuso horário atual.</summary>
        <value>Um objeto que indica a diferença de tempo entre o tempo padrão e o UTC (Tempo Universal Coordenado) do fuso horário atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O período de tempo retornado pelo <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propriedade pode variar de 14 horas (para um fuso horário é 14 horas à frente do tempo Universal Coordenado (UTC))-14 horas (para um fuso horário é 14 horas atrás do UTC). Fusos horários que estão à frente do UTC têm um deslocamento positivo; fusos horários que estão atrás do UTC têm um deslocamento negativo.  
  
 O <xref:System.TimeZoneInfo.BaseUtcOffset%2A> valor é representado como um número inteiro de minutos. Ele não pode incluir um número fracionário de minutos.  
  
> [!NOTE]
>  Porque <xref:System.TimeZoneInfo.BaseUtcOffset%2A> é uma propriedade do <xref:System.TimeZoneInfo> objeto em vez de <xref:System.TimeZoneInfo.AdjustmentRule> objeto, o <xref:System.TimeZoneInfo> classe aplica-se um único deslocamento do UTC para todos os ajustes de um fuso horário. Para refletir um fuso horário que tenha modificado seu deslocamento do UTC, você deve criar um novo fuso horário usando a <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> método.  
  
 O <xref:System.TimeZoneInfo.BaseUtcOffset%2A> difere de propriedade a <xref:System.TimeZoneInfo.GetUtcOffset%2A> método das seguintes maneiras:  
  
-   O <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propriedade retorna a diferença entre o UTC e a hora de padrão do fuso horário; o <xref:System.TimeZoneInfo.GetUtcOffset%2A> método retorna a diferença entre UTC e a hora do fuso horário em um ponto específico no tempo.  
  
-   O <xref:System.TimeZoneInfo.GetUtcOffset%2A> método reflete a aplicação de quaisquer regras de ajuste para o fuso horário; o <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propriedade não faz isso.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propriedade para exibir a diferença entre a hora local e o tempo Universal Coordenado (UTC).  
  
 [!code-csharp[System.TimeZone2.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#1)]
 [!code-vb[System.TimeZone2.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.GetUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public static void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearCachedData();" />
      <MemberSignature Language="F#" Value="static member ClearCachedData : unit -&gt; unit" Usage="System.TimeZoneInfo.ClearCachedData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Limpa dados de fuso horário armazenados em cache.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zona de tempo em cache dados incluem dados sobre o fuso horário local e o fuso horário Universal Coordenado (UTC).  
  
 Você pode chamar o `ClearCachedData` método para reduzir a memória dedicada ao cache do aplicativo das informações de fuso horário ou para refletir o fato de que o fuso horário do sistema local foi alterado.  
  
 Não é recomendável armazenar referências ao fuso horário de UTC e local. Após a chamada para o `ClearCachedData` método, essas variáveis de objeto serão indefinidos <xref:System.TimeZoneInfo> objetos que não estão mais referências aos <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> ou <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. Por exemplo, no código a seguir, a segunda chamada para o <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> método lança um <xref:System.ArgumentException> porque o `local` variável não é mais considerada igual a <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.TimeZone2.BestPractices#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/cs/System.TimeZone2.BestPractices.cs#1)]
 [!code-vb[System.TimeZone2.BestPractices#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/vb/System.TimeZone2.BestPractices.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converte uma hora na hora em um determinado fuso horário.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Convertendo horários entre fusos horários</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">A data e hora a ser convertida.</param>
        <param name="destinationTimeZone">O fuso horário no qual <paramref name="dateTime" /> deve ser convertido.</param>
        <summary>Converte uma hora na hora em um determinado fuso horário.</summary>
        <returns>A data e hora no fuso horário de destino.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ao executar a conversão, o <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> o método se aplica a quaisquer regras de ajuste em vigor no `destinationTimeZone` fuso horário.  
  
 Essa sobrecarga da <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> método determina o fuso horário de origem do valor da `dateTime` do parâmetro <xref:System.DateTime.Kind%2A> propriedade, como mostra a tabela a seguir.  
  
|Valor da propriedade do tipo|Fuso horário de origem|Comportamento do método|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Converte a hora local na hora em `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Converte a hora em tempo Universal Coordenado (UTC) `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Supõe-se para ser <xref:System.TimeZoneInfo.Local%2A>.|Converte a hora local na hora em `destinationTimeZone`.|  
  
 O <xref:System.DateTime.Kind%2A> propriedade retornada <xref:System.DateTime> valor é definido como mostrado na tabela a seguir.  
  
|Condição|Retornou o valor do tipo de propriedade|  
|---------------|----------------------------------|  
|O `destinationTimeZone` é <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|O `destinationTimeZone` é <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|Todos os outros valores de data e hora e fuso horário de destino.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Se o valor da `dateTime` parâmetro é um horário local ambíguo, ele será interpretado como horário padrão. Se o `dateTime` parâmetro é uma hora local inválida, esse método gerará uma <xref:System.ArgumentException>.  
  
 Caso a conversão de `dateTime` resulte em uma data e um valor de hora anterior a <xref:System.DateTime.MinValue?displayProperty=nameWithType> ou posterior a <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, este método retorna <xref:System.DateTime.MinValue?displayProperty=nameWithType> ou <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, respectivamente.  
  
 Você também pode converter de ou para UTC chamando o <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> e <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> métodos.  
  
   
  
## Examples  
 O exemplo a seguir converte uma matriz de valores de data e hora em horas no fuso horário do Leste dos EUA e Canadá. Ele mostra que o fuso horário de origem depende de <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> propriedade da fonte de <xref:System.DateTime> valor. Ele também ilustra que o <xref:System.TimeZoneInfo.ConvertTime%2A> método usa ajustes de fuso horário em consideração, porque um ajuste de fuso horário ocorre em fusos horários de origem e de destino às 2 horas. no dia 7 de novembro de 2010.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime1.cs#1)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O valor do parâmetro <paramref name="dateTime" /> representa um período inválido.</exception>
        <exception cref="T:System.ArgumentNullException">O valor do parâmetro <paramref name="destinationTimeZone" /> é <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Convertendo horários entre fusos horários</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTime (DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTime(valuetype System.DateTimeOffset dateTimeOffset, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTime(DateTimeOffset dateTimeOffset, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTimeOffset * TimeZoneInfo -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTime (dateTimeOffset, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">A data e hora a ser convertida.</param>
        <param name="destinationTimeZone">O fuso horário no qual <paramref name="dateTime" /> deve ser convertido.</param>
        <summary>Converte uma hora na hora em um determinado fuso horário.</summary>
        <returns>A data e hora no fuso horário de destino.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ao executar a conversão, o <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> o método se aplica a quaisquer regras de ajuste em vigor no `destinationTimeZone` fuso horário.  
  
 Essa sobrecarga é diferente de outras sobrecargas do <xref:System.TimeZoneInfo.ConvertTime%2A> método aceitando uma <xref:System.DateTimeOffset> valor como seu primeiro parâmetro. Isso identifica a data e hora como um deslocamento do tempo Universal Coordenado (UTC) em vez de como a data e hora em um determinado fuso horário. Como resultado, o `dateTimeOffset` parâmetro não pode representar um horário ambíguo ou uma hora inválida.  
  
 Converter o `dateTimeOffset` valor com a hora no fuso horário de destino, esse método leva em consideração quaisquer regras de ajuste em vigor no fuso horário de destino.  
  
 Caso a conversão de `dateTimeOffset` resulte em uma data e um valor de hora anterior a <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> ou posterior a <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, este método retorna <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> ou <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, respectivamente.  
  
   
  
## Examples  
 O exemplo a seguir converte uma matriz de <xref:System.DateTimeOffset> valores para horários no fuso horário do Leste dos EUA e Canadá. Ele ilustra que o <xref:System.TimeZoneInfo.ConvertTime%2A> método usa ajustes de fuso horário em consideração, porque um ajuste de fuso horário ocorre em fusos horários de origem e de destino às 2 horas. no dia 7 de novembro de 2010.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime2.cs#2)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O valor do parâmetro <paramref name="destinationTimeZone" /> é <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Convertendo horários entre fusos horários</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, sourceTimeZone, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">A data e hora a ser convertida.</param>
        <param name="sourceTimeZone">O fuso horário de <paramref name="dateTime" />.</param>
        <param name="destinationTimeZone">O fuso horário no qual <paramref name="dateTime" /> deve ser convertido.</param>
        <summary>Converte um horário de um fuso horário para outro.</summary>
        <returns>A data e hora no fuso horário de destino que corresponde ao parâmetro <paramref name="dateTime" /> no fuso horário de origem.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ao executar a conversão, o <xref:System.TimeZoneInfo.ConvertTime%2A> o método se aplica a quaisquer regras de ajuste em vigor no `destinationTimeZone` fuso horário.  
  
 O valor da <xref:System.DateTime.Kind%2A> propriedade do `dateTime` parâmetro deve corresponder ao `sourceTimeZone` parâmetro, como mostra a tabela a seguir.  
  
|Valor de DateTime. Kind|valor de sourceTimeZone|Comportamento do método|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|É igual a <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|Converte `dateTime` na hora do fuso horário de destino.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Não é igual a <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|Lança um <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|É igual a <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|Converte `dateTime` na hora do fuso horário de destino.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Não é igual a <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|Lança um <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Qualquer.|Converte `dateTime` na hora do fuso horário de destino.|  
  
 Você também pode converter para ou do tempo Universal Coordenado (UTC) chamando o <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> e <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> métodos.  
  
 O <xref:System.DateTime.Kind%2A> propriedade retornada <xref:System.DateTime> valor é definido como mostrado na tabela a seguir.  
  
|Condição|Retornou o valor do tipo de propriedade|  
|---------------|----------------------------------|  
|O argumento `destinationTimeZone` é <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|O argumento `destinationTimeZone` é <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|Todos os outros data e valores de hora, fuso horário de origem e destino fusos horários.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Se o valor da `dateTime` parâmetro é um horário ambíguo no fuso horário de origem, ele será interpretado como horário padrão. Se o `dateTime` parâmetro é uma hora inválida no fuso horário de origem, esse método gerará uma <xref:System.ArgumentException>.  
  
 Caso a conversão de `dateTime` resulte em uma data e um valor de hora anterior a <xref:System.DateTime.MinValue?displayProperty=nameWithType> ou posterior a <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, este método retorna <xref:System.DateTime.MinValue?displayProperty=nameWithType> ou <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, respectivamente.  
  
 O <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> método lança um <xref:System.ArgumentException> exceção se o <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> propriedade do `dateTime` argumento for <xref:System.DateTimeKind.Local?displayProperty=nameWithType> , mas o `sourceTimeZone` argumento não é <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Para determinar se o fuso horário de origem é o fuso horário local ou o fuso horário universal, o método testa a igualdade de referência em vez de testar a igualdade de valor com o <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> método. Observe que <xref:System.TimeZoneInfo> objetos que representam o fuso horário local e que são recuperadas chamando o <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> método não têm igualdade referencial com <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Além disso, <xref:System.TimeZoneInfo> objetos que representam o local ou do fuso horário universal e que são recuperados pela iteração da coleção retornada pela <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> método não têm igualdade referencial com <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> ou <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. Como alternativa, você pode chamar o <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29> método.  
  
   
  
## Examples  
 O exemplo a seguir ilustra o uso do <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> método para converter a hora oficial do Havaí para a hora local.  
  
 [!code-csharp[System.TimeZone2.Concepts#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#9)]
 [!code-vb[System.TimeZone2.Concepts#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">A propriedade <see cref="P:System.DateTime.Kind" /> do parâmetro <paramref name="dateTime" /> é <see cref="F:System.DateTimeKind.Local" />, mas o parâmetro <paramref name="sourceTimeZone" /> não é igual a <see cref="F:System.DateTimeKind.Local" />.  
  
- ou - 
A propriedade <see cref="P:System.DateTime.Kind" /> do parâmetro <paramref name="dateTime" /> é <see cref="F:System.DateTimeKind.Utc" />, mas o parâmetro <paramref name="sourceTimeZone" /> não é igual a <see cref="P:System.TimeZoneInfo.Utc" />.  
  
- ou - 
O parâmetro <paramref name="dateTime" /> é uma hora inválida (ou seja, ele representa uma hora que não existe devido a regras de ajuste de um fuso horário).</exception>
        <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="sourceTimeZone" /> é <see langword="null" />.  
  
- ou - 
O parâmetro <paramref name="destinationTimeZone" /> é <see langword="null" />.</exception>
        <altmember cref="Overload:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId" />
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Convertendo horários entre fusos horários</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeBySystemTimeZoneId">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converte um horário para o horário em outro fuso horário com base em um identificador de fuso horário.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Convertendo horários entre fusos horários</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTime">A data e hora a ser convertida.</param>
        <param name="destinationTimeZoneId">O identificador do fuso horário de destino.</param>
        <summary>Converte um horário para o horário em outro fuso horário com base no identificador do fuso horário.</summary>
        <returns>A data e hora no fuso horário de destino.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ao executar a conversão, o <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> o método se aplica a quaisquer regras de ajuste em vigor no `destinationTimeZoneId` fuso horário.  
  
 Essa sobrecarga é basicamente idêntica ao chamar o <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> método, exceto que ele permite que você especifique o fuso horário de destino por seu identificador em vez de uma referência de objeto. Esse método é mais útil quando você deve converter um tempo sem recuperar o objeto de fuso horário que corresponde a ele e você não precisa saber se o horário convertido é standard ou o horário de verão.  
  
 O <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%29> método determina o fuso horário de origem do valor da `dateTime` do parâmetro <xref:System.DateTime.Kind%2A> propriedade, como mostra a tabela a seguir.  
  
|Valor da propriedade do tipo|Fuso horário de origem|Comportamento do método|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Converte a hora local na hora em `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Converte a hora em tempo Universal Coordenado (UTC) `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Supõe-se para ser <xref:System.TimeZoneInfo.Local%2A>.|Converte a hora local na hora em `destinationTimeZone`.|  
  
 O <xref:System.DateTime.Kind%2A> propriedade retornada <xref:System.DateTime> valor é definido como mostrado na tabela a seguir.  
  
|Condição|Retornou o valor do tipo de propriedade|  
|---------------|----------------------------------|  
|O `destinationTimeZone` é `TimeZoneInfo.Utc.Id`.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|Qualquer outro `destinationTimeZone` valor.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Se o valor da `dateTime` parâmetro é um horário local ambíguo, ele será interpretado como horário padrão. Se o `dateTime` parâmetro é uma hora local inválida, esse método gerará uma <xref:System.ArgumentException>.  
  
 Caso a conversão de `dateTime` resulte em uma data e um valor de hora anterior a <xref:System.DateTime.MinValue?displayProperty=nameWithType> ou posterior a <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, este método retorna <xref:System.DateTime.MinValue?displayProperty=nameWithType> ou <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, respectivamente.  
  
 Esse método recupera informações sobre o fuso horário cujo identificador é especificado pelo `destinationTimeZoneId` parâmetro do registro em sistemas Windows e a partir de [biblioteca ICU](http://userguide.icu-project.org/datetime/timezone) no Linux e macOS. Ele não é possível recuperar um objeto de fuso horário é criado usando o <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> método. O `destinationTimeZoneId` parâmetro deve corresponder exatamente ao identificador do fuso horário de comprimento, mas não no caso, uma correspondência com êxito ocorrer; ou seja, a comparação de `destinationTimeZoneId` com fuso horário identificadores diferencia maiusculas de minúsculas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZoneId" /> é <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">O identificador de fuso horário foi encontrado, mas os dados do Registro estão corrompidos.</exception>
        <exception cref="T:System.Security.SecurityException">O processo não tem as permissões necessárias para ler a partir da chave do Registro que contém as informações de fuso horário.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">O identificador <paramref name="destinationTimeZoneId" /> não foi encontrado no sistema local.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Convertendo horários entre fusos horários</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTimeBySystemTimeZoneId (DateTimeOffset dateTimeOffset, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTimeBySystemTimeZoneId(valuetype System.DateTimeOffset dateTimeOffset, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTimeBySystemTimeZoneId(DateTimeOffset dateTimeOffset, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTimeOffset * string -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTimeOffset, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">A data e hora a ser convertida.</param>
        <param name="destinationTimeZoneId">O identificador do fuso horário de destino.</param>
        <summary>Converte um horário para o horário em outro fuso horário com base no identificador do fuso horário.</summary>
        <returns>A data e hora no fuso horário de destino.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ao executar a conversão, o <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> o método se aplica a quaisquer regras de ajuste em vigor no `destinationTimeZoneId` fuso horário.  
  
 Essa sobrecarga é idêntica ao chamar o <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> método, exceto que ele permite que você especifique o fuso horário de destino por seu identificador em vez de uma referência de objeto. Esse método é mais útil quando você deve converter um tempo sem recuperar o objeto de fuso horário que corresponde a ele e você não precisa saber se o horário convertido é standard ou o horário de verão.  
  
 Porque o `dateTimeOffset` parâmetro representa uma data e hora junto com o tempo de deslocamento do tempo Universal Coordenado (UTC), ele não pode representar um horário ambíguo ou uma hora inválida.  
  
 Esse método recupera o fuso horário cujo identificador é especificado pelo `destinationTimeZoneId` parâmetro do registro em sistemas Windows e a partir de [biblioteca ICU](http://userguide.icu-project.org/datetime/timezone) no Linux e macOS. Ele não é possível recuperar um objeto de fuso horário é criado usando o <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> método. O `destinationTimeZoneId` parâmetro deve corresponder exatamente ao identificador do fuso horário de comprimento, mas não no caso, uma correspondência com êxito ocorrer; ou seja, a comparação de `destinationTimeZoneId` com fuso horário identificadores diferencia maiusculas de minúsculas.  
  
 Converter o `dateTimeOffset` valor com a hora no fuso horário de destino, o método leva em consideração quaisquer regras de ajuste em vigor no fuso horário de destino.  
  
 Caso a conversão de `dateTimeOffset` resulte em uma data e um valor de hora anterior a <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> ou posterior a <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, este método retorna <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> ou <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, respectivamente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZoneId" /> é <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">O identificador de fuso horário foi encontrado, mas os dados do Registro estão corrompidos.</exception>
        <exception cref="T:System.Security.SecurityException">O processo não tem as permissões necessárias para ler a partir da chave do Registro que contém as informações de fuso horário.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">O identificador <paramref name="destinationTimeZoneId" /> não foi encontrado no sistema local.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Convertendo horários entre fusos horários</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ sourceTimeZoneId, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, sourceTimeZoneId, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZoneId" Type="System.String" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTime">A data e hora a ser convertida.</param>
        <param name="sourceTimeZoneId">O identificador do fuso horário de origem.</param>
        <param name="destinationTimeZoneId">O identificador do fuso horário de destino.</param>
        <summary>Converte uma hora de um fuso horário para outro com base em identificadores de fuso horário.</summary>
        <returns>A data e hora no fuso horário de destino que corresponde ao parâmetro <paramref name="dateTime" /> no fuso horário de origem.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ao executar a conversão, o <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> o método se aplica a quaisquer regras de ajuste em vigor no `destinationTimeZoneId` fuso horário.  
  
 Embora seja semelhante do <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> método, você pode usar <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> para especificar as origem e destino fusos horários usando seus identificadores em vez de suas <xref:System.TimeZoneInfo> objetos. Esse método é mais útil quando você deve converter um tempo sem recuperar o objeto de fuso horário que corresponde a ele e você não precisa saber se o horário convertido é standard ou o horário de verão.  
  
 Esse método recupera os fusos horários cujos identificadores estão a `sourceTimeZoneId` e `destinationTimeZoneId` parâmetros do registro em sistemas Windows e a partir de [biblioteca ICU](http://userguide.icu-project.org/datetime/timezone) no Linux e macOS. Ele não é possível recuperar objetos de fuso horário que são criados usando o <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> método.  
  
 O valor da <xref:System.DateTime.Kind%2A> propriedade do `dateTime` parâmetro deve corresponder ao `sourceTimeZoneId` parâmetro, como mostra a tabela a seguir.  
  
|Valor de DateTime. Kind|valor de sourceTimeZone|Comportamento do método|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|É igual a `TimeZoneInfo.Utc.Id`.|Converte `dateTime` na hora do fuso horário de destino.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Não é igual a `TimeZoneInfo.Utc.Id`.|Lança um <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|É igual a `TimeZoneInfo.Local.Id`.|Converte `dateTime` na hora do fuso horário de destino.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Não é igual a `TimeZoneInfo.Local.Id`.|Lança um <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Qualquer.|Converte `dateTime` na hora do fuso horário de destino.|  
  
 Porque ele se baseia em chamadas para o <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> método, o <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> executa uma pesquisa diferencia maiusculas de minúsculas para localizar os fusos horários que correspondem aos `sourceTimeZoneId` e `destinationTimeZoneId`.  
  
 Se o valor da `dateTime` parâmetro é um horário ambíguo no fuso horário de origem, ele será interpretado como horário padrão. Se o `dateTime` parâmetro é uma hora inválida no fuso horário de origem, esse método gerará uma <xref:System.ArgumentException>.  
  
 O <xref:System.DateTime.Kind%2A> propriedade retornada <xref:System.DateTime> valor é definido como <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> , a menos que o fuso horário de destino é o tempo Universal Coordenado (UTC), caso em que ele é definido como <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> método para exibir a hora que corresponde à hora do sistema local em oito cidades do mundo.  
  
 [!code-csharp[System.TimeZone2.Conversions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#3)]
 [!code-vb[System.TimeZone2.Conversions#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">A propriedade <see cref="P:System.DateTime.Kind" /> do parâmetro <paramref name="dateTime" /> não corresponde ao fuso horário de origem.  
  
- ou - 
 <paramref name="dateTime" /> é uma hora inválida no fuso horário de origem.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZoneId" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="destinationTimeZoneId" /> é <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Os identificadores de fuso horário foram encontrados, mas os dados do Registro estão corrompidos.</exception>
        <exception cref="T:System.Security.SecurityException">O usuário não tem as permissões necessárias para ler as chaves do Registro que armazenam dados de fuso horário.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">O identificador <paramref name="sourceTimeZoneId" /> não foi encontrado no sistema local.  
  
- ou - 
O identificador <paramref name="destinationTimeZoneId" /> não foi encontrado no sistema local.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Convertendo horários entre fusos horários</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeFromUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeFromUtc (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeFromUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeFromUtc(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeFromUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeFromUtc (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">UTC (Tempo Universal Coordenado).</param>
        <param name="destinationTimeZone">O fuso horário no qual <paramref name="dateTime" /> deve ser convertido.</param>
        <summary>Converte um UTC (Tempo Universal Coordenado) no horário em um fuso horário especificado.</summary>
        <returns>A data e hora no fuso horário de destino. A propriedade <see cref="P:System.DateTime.Kind" /> será <see cref="F:System.DateTimeKind.Utc" /> se <paramref name="destinationTimeZone" /> for <see cref="P:System.TimeZoneInfo.Utc" />; caso contrário, a propriedade <see cref="P:System.DateTime.Kind" /> será <see cref="F:System.DateTimeKind.Unspecified" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ao executar a conversão, o <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> o método se aplica a quaisquer regras de ajuste em vigor no `destinationTimeZone` fuso horário.  
  
 O comportamento preciso desse método depende do valor da <xref:System.DateTime.Kind%2A> propriedade do `dateTime` parâmetro, como mostra a tabela a seguir.  
  
|Propriedade DateTime. Kind|Conversão|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Lança um <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> ou <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Converte de hora Universal coordenada (UTC).|  
  
 Caso a conversão de `dateTime` resulte em uma data e um valor de hora anterior a <xref:System.DateTime.MinValue?displayProperty=nameWithType> ou posterior a <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, este método retorna <xref:System.DateTime.MinValue?displayProperty=nameWithType> ou <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, respectivamente.  
  
   
  
## Examples  
 O exemplo a seguir converte o tempo Universal Coordenado (UTC) em horário Central.  
  
 [!code-csharp[System.TimeZone2.Concepts#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#8)]
 [!code-vb[System.TimeZone2.Concepts#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">A propriedade <see cref="P:System.DateTime.Kind" /> de <paramref name="dateTime" /> é <see cref="F:System.DateTimeKind.Local" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZone" /> é <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Convertendo horários entre fusos horários</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeToUtc">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converte uma data e hora no UTC (Tempo Universal Coordenado).</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Convertendo horários entre fusos horários</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">A data e hora a ser convertida.</param>
        <summary>Converte a data e hora especificadas em UTC (Tempo Universal Coordenado).</summary>
        <returns>O UTC (Tempo Universal Coordenado) que corresponde ao parâmetro <paramref name="dateTime" />. A propriedade <see cref="P:System.DateTime.Kind" /> do valor <see cref="T:System.DateTime" /> é sempre definida como <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A conversão exata executada depende do valor da <xref:System.DateTime.Kind%2A> propriedade do `dateTime` parâmetro, como mostra a tabela a seguir.  
  
|Propriedade DateTime. Kind|Conversão|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Converte de hora local para o tempo Universal Coordenado (UTC).|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Pressupõe `dateTime` for hora local e converte da hora local em UTC.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Retorna `dateTime` inalterado.|  
  
 Se `dateTime` corresponde a uma hora local ambígua, este método presume que é hora de local padrão. Se `dateTime` corresponde a uma hora local inválida, o método lança um <xref:System.ArgumentException>.  
  
> [!NOTE]
>  Se o computador atual local do fuso horário inclui várias regras de ajuste, essa sobrecarga da <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> método pode retornar resultados diferentes de <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> e <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> métodos. <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> sempre se aplica a regra de ajuste atual para a conversão de fuso horário, ou não `dateTime` está dentro de seu intervalo de datas. E ao executar em [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)], <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> também se aplica a regra de ajuste atual para a conversão de fuso horário, ou não `dateTime` está dentro de seu intervalo de datas.  
  
 Se o UTC equivalente da `dateTime` for anterior ao <xref:System.DateTime.MinValue?displayProperty=nameWithType> ou posterior que <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, esse método retornará <xref:System.DateTime.MinValue> ou <xref:System.DateTime.MaxValue>, respectivamente.  
  
   
  
## Examples  
 O exemplo a seguir ilustra a conversão de valores de tempo cuja <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, e <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, respectivamente. Ele também ilustra a conversão de horários ambíguos e inválidos.  
  
 [!code-csharp[System.TimeZone2.Conversions#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#1)]
 [!code-vb[System.TimeZone2.Conversions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see langword="TimeZoneInfo.Local.IsInvalidDateTime(" />
          <paramref name="dateTime" />
          <see langword=")" /> retorna <see langword="true" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Convertendo horários entre fusos horários</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime, TimeZoneInfo sourceTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc (dateTime, sourceTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">A data e hora a ser convertida.</param>
        <param name="sourceTimeZone">O fuso horário de <paramref name="dateTime" />.</param>
        <summary>Converte o horário em um fuso horário especificado no UTC (Tempo Universal Coordenado).</summary>
        <returns>O UTC (Tempo Universal Coordenado) que corresponde ao parâmetro <paramref name="dateTime" />. A propriedade <see cref="P:System.DateTime.Kind" /> do objeto <see cref="T:System.DateTime" /> é sempre definida como <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o <xref:System.DateTime.Kind%2A> propriedade do `dateTime` for igual ao parâmetro <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> e o `sourceTimeZone` é igual ao parâmetro <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>, esse método retorna `dateTime` sem executar nenhuma conversão.  
  
 Se `dateTime` corresponde a um horário ambíguo, este método presume que é o horário padrão do fuso horário de origem. Se `dateTime` corresponde a uma hora inválida, esse método lança um <xref:System.ArgumentException>.  
  
 Se o equivalente de tempo Universal Coordenado (UTC) do `dateTime` for anterior ao <xref:System.DateTime.MinValue?displayProperty=nameWithType> ou posterior que <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, esse método retornará <xref:System.DateTime.MinValue> ou <xref:System.DateTime.MaxValue>, respectivamente.  
  
   
  
## Examples  
 O exemplo a seguir recupera a data atual do sistema local e converte-o ao tempo Universal Coordenado (UTC), e em seguida, converte a hora oficial de Tóquio e, finalmente, converte de hora oficial de Tóquio novamente para UTC. Observe que as duas horas UTC são idênticas.  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" />.<see langword="Kind" /> é <see cref="F:System.DateTimeKind.Utc" /> e <paramref name="sourceTimeZone" /> não é igual a <see cref="P:System.TimeZoneInfo.Utc" />.  
  
- ou - 
 <paramref name="dateTime" />.<see langword="Kind" /> é <see cref="F:System.DateTimeKind.Local" /> e <paramref name="sourceTimeZone" /> não é igual a <see cref="P:System.TimeZoneInfo.Local" />.  
  
- ou - 
 <paramref name="sourceTimeZone" /><see langword=".IsInvalidDateTime(" /><paramref name="dateTime" /><see langword=")" /> retorna <see langword="true" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZone" /> é <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Convertendo horários entre fusos horários</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateCustomTimeZone">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Define um fuso horário que não foi encontrado no computador local.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">O identificador do fuso horário.</param>
        <param name="baseUtcOffset">Um objeto que representa a diferença de horas entre esse fuso horário e o UTC (Horário Universal Coordenado).</param>
        <param name="displayName">O nome de exibição do novo fuso horário.</param>
        <param name="standardDisplayName">O nome do horário padrão do novo fuso horário.</param>
        <summary>Cria um fuso horário personalizado com um identificador especificado, um desvio de UTC (Tempo Universal Coordenado), um nome de exibição e um nome de exibição do horário padrão.</summary>
        <returns>O novo fuso horário.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa sobrecarga da <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29> método é adequado para a criação de um fuso horário que tem sem ajustes (ou seja, um fuso horário não oferece suporte para horário de verão). Para definir um fuso horário que inclui ajustes de horário de verão, use o <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> ou o <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> método.  
  
 A tabela a seguir mostra a relação entre os parâmetros que são fornecidos para o <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> método e as propriedades do <xref:System.TimeZoneInfo> objeto retornadas pela chamada de método.  
  
|Parâmetro CreateCustomTimeZone|Propriedade TimeZoneInfo|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
  
 Normalmente, nome do horário padrão do fuso horário e seu identificador são os mesmos. No entanto, o comprimento do identificador do fuso horário não deve exceder 32 caracteres. A cadeia de caracteres passada para o `displayName` parâmetro segue um formato padrão. A primeira parte do nome de exibição é o deslocamento base do fuso horário do Tempo Universal Coordenado, que é indicado pelo acrônimo GMT (Hora de Greenwich), entre parênteses. Isso é seguido por uma cadeia de caracteres que identifica o fuso horário em si, ou um ou mais cidades, regiões ou países no fuso horário, ou ambos. Por exemplo:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 O exemplo a seguir cria um fuso horário personalizado para as regiões Mawson e Baía Holme da Antártida. Em seguida, ele exibe o resultado da conversão da hora local para o horário em que o novo fuso horário.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#1)]
 [!code-vb[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="id" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">O parâmetro <paramref name="id" /> é uma cadeia de caracteres vazia ("").  
  
- ou - 
O parâmetro <paramref name="baseUtcOffset" /> não representa um número inteiro de minutos.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="baseUtcOffset" /> é maior que 14 horas ou menor que -14 horas.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a6af8647-7893-4f29-95a9-d94c65a6e8dd">Como criar fusos horários sem regras de ajuste</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule()) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
        <Parameter Name="daylightDisplayName" Type="System.String" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" />
      </Parameters>
      <Docs>
        <param name="id">O identificador do fuso horário.</param>
        <param name="baseUtcOffset">Um objeto que representa a diferença de horas entre esse fuso horário e o UTC (Horário Universal Coordenado).</param>
        <param name="displayName">O nome de exibição do novo fuso horário.</param>
        <param name="standardDisplayName">O nome da hora padrão do novo fuso horário.</param>
        <param name="daylightDisplayName">O nome do horário de versão do novo fuso horário.</param>
        <param name="adjustmentRules">Uma matriz que aumenta a diferença UTC de base para um período específico.</param>
        <summary>Cria um fuso horário personalizado com um identificador especificado, um deslocamento do UTC (Tempo Universal Coordenado), um nome de exibição, um nome de hora padrão e um nome e regras do horário de verão.</summary>
        <returns>Um objeto <see cref="T:System.TimeZoneInfo" /> que representa o novo fuso horário.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa sobrecarga da <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> método é adequado para a criação de um fuso horário que dá suporte ao horário de verão. Para definir um fuso horário que não oferece suporte para horário de verão, use o <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> ou o <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> método.  
  
 A tabela a seguir mostra a relação entre os parâmetros que são fornecidos para o <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> método e membros do <xref:System.TimeZoneInfo> objeto retornadas pela chamada de método.  
  
|Parâmetro CreateCustomTimeZone|Membro de TimeZoneInfo|  
|------------------------------------|-------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A>|  
|`adjustmentRules`|Uma matriz de <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> objetos retornados pelo <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> método.|  
  
 Normalmente, nome do horário padrão do fuso horário e seu identificador são os mesmos. No entanto, o comprimento do identificador do fuso horário não deve exceder 32 caracteres. A cadeia de caracteres passada para o `displayName` parâmetro segue um formato padrão. A primeira parte do nome de exibição é o deslocamento base do fuso horário do Tempo Universal Coordenado, que é indicado pelo acrônimo GMT (Hora de Greenwich), entre parênteses. Isso é seguido por uma cadeia de caracteres que identifica o fuso horário em si, ou um ou mais cidades, regiões ou países no fuso horário, ou ambos. Por exemplo:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 O `baseUtcOffset` parâmetro define o deslocamento do fuso horário personalizado do tempo Universal Coordenado (UTC) para todas as regras de ajuste do fuso horário. Em outras palavras, o <xref:System.TimeZoneInfo> modelo de objeto presume que o deslocamento do fuso horário do UTC é constante durante toda a vida útil do fuso horário e existe independente de regras de ajuste específica. Para refletir um fuso horário que mudou seu deslocamento do UTC, você deve criar um novo objeto de fuso horário.  
  
 Regras de ajuste de um fuso horário são definidas da seguinte maneira:  
  
1.  Chamar o <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> ou o <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> método para definir os inicial e final do tempo de transição para cada regra de ajuste.  
  
2.  Chamar o <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> método para cada regra de ajuste.  
  
3.  Atribuindo as regras de ajuste para uma matriz que pode ser passado como o `adjustmentRules` parâmetro.  
  
   
  
## Examples  
 O exemplo a seguir cria um fuso horário personalizado para a Estação Palmer e Ilha Anvers na Antártida. Em seguida, ele converte a hora local para o horário em que o novo fuso horário e exibe o resultado.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#2)]
 [!code-vb[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="id" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">O parâmetro <paramref name="id" /> é uma cadeia de caracteres vazia ("").  
  
- ou - 
O parâmetro <paramref name="baseUtcOffset" /> não representa um número inteiro de minutos.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="baseUtcOffset" /> é maior que 14 horas ou menor que -14 horas.</exception>
        <exception cref="T:System.InvalidTimeZoneException">As regras de ajuste especificadas no parâmetro <paramref name="adjustmentRules" /> se sobrepõem.  
  
- ou - 
As regras de ajuste especificadas no parâmetro <paramref name="adjustmentRules" /> não estão em ordem cronológica.  
  
- ou - 
Um ou mais elementos em <paramref name="adjustmentRules" /> são <see langword="null" />.  
  
- ou - 
Uma data pode ter várias regras de ajuste aplicadas a ela.  
  
- ou - 
A soma do parâmetro <paramref name="baseUtcOffset" /> e do valor <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> de um ou mais objetos na matriz <paramref name="adjustmentRules" /> é maior que 14 horas ou menor que -14 horas.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c52ef192-13a9-435f-8015-3b12eae8c47c">Como criar fusos horários com regras de ajuste</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule(), disableDaylightSavingTime As Boolean) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] * bool -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules, disableDaylightSavingTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
        <Parameter Name="daylightDisplayName" Type="System.String" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" />
        <Parameter Name="disableDaylightSavingTime" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="id">O identificador do fuso horário.</param>
        <param name="baseUtcOffset">Um objeto <see cref="T:System.TimeSpan" /> que representa a diferença de tempo entre esse fuso horário e o UTC (Tempo Universal Coordenado).</param>
        <param name="displayName">O nome de exibição do novo fuso horário.</param>
        <param name="standardDisplayName">O nome da hora padrão do novo fuso horário.</param>
        <param name="daylightDisplayName">O nome do horário de versão do novo fuso horário.</param>
        <param name="adjustmentRules">Uma matriz de objetos <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> que aumenta o deslocamento base do UTC para um período específico.</param>
        <param name="disableDaylightSavingTime"><see langword="true" /> para descartar informações relacionadas ao horário de verão presentes no <paramref name="adjustmentRules" /> com o novo objeto; caso contrário, <see langword="false" />.</param>
        <summary>Cria um fuso horário personalizado com um identificador especificado, um deslocamento do UTC (Tempo Universal Coordenado), um nome de exibição, um nome de hora padrão, um nome de horário de verão, regras de horário de verão e um valor que indica se o objeto retornado reflete as informações sobre horário de verão.</summary>
        <returns>O novo fuso horário. Se o parâmetro <paramref name="disableDaylightSavingTime" /> é <see langword="true" />, o objeto retornado não tem nenhum dado de horário de verão.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode usar essa sobrecarga da <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> método para criar um fuso horário personalizado com o suporte para horário de verão pode ser determinado por condições de tempo de execução.  
  
 A tabela a seguir mostra a relação entre os parâmetros que são fornecidos para o <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> método e membros do <xref:System.TimeZoneInfo> objeto retornadas pela chamada de método.  
  
|Parâmetro CreateCustomTimeZone|Propriedade TimeZoneInfo|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A> Se `disableDaylightSavingTime` é `false`; <xref:System.String.Empty?displayProperty=nameWithType> se `disableDaylightSavingTime` é `true`.|  
|`adjustmentRules`|Uma matriz de <xref:System.TimeZoneInfo.AdjustmentRule> objetos retornados pela <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> método se `disableDaylightSavingTime` é `false`; uma matriz vazia, retornada pelo <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> método se `disableDaylightSavingTime` é `true`.|  
|`disableDaylightSavingTime`|Não <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>.|  
  
 Normalmente, nome do horário padrão do fuso horário e seu identificador são os mesmos. No entanto, o comprimento do identificador do fuso horário não deve exceder 32 caracteres. A cadeia de caracteres passada para o `displayName` parâmetro segue um formato padrão. A primeira parte do nome de exibição é o deslocamento base do fuso horário do Tempo Universal Coordenado, que é indicado pelo acrônimo GMT (Hora de Greenwich), entre parênteses. Isso é seguido por uma cadeia de caracteres que identifica o fuso horário em si, ou um ou mais cidades, regiões ou países no fuso horário, ou ambos. Por exemplo:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 Regras de ajuste de um fuso horário são definidas da seguinte maneira:  
  
1.  Chamar o <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> ou o <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> método para definir os inicial e final de regras de transição para cada regra de ajuste.  
  
2.  Chamar o <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> método para cada regra de ajuste.  
  
3.  Atribuindo as regras de ajuste para uma matriz que pode ser passado como o `adjustmentRules` parâmetro.  
  
 Se `disableDaylightSavingTime` parâmetro é `false`, a operação desse método é idêntica de <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> de sobrecarga. Se `disableDaylightSavingTime` está `true`, o objeto retornado não inclui nenhuma regra de ajuste e um <xref:System.TimeZoneInfo.DaylightName%2A> propriedade cujo valor é uma cadeia de caracteres vazia.  
  
   
  
## Examples  
 O exemplo a seguir cria um fuso horário personalizado para a Estação Palmer e Ilha Anvers na Antártida. Ele define a `disableDaylightSavingTime` parâmetro na chamada para o <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> método `true`. Ele, em seguida, exibe o nome do horário de verão do novo fuso horário, se um estiver presente e o número de regras de ajuste para confirmar que o novo fuso horário não tem nenhuma informação de horário de verão.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#3)]
 [!code-vb[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="id" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">O parâmetro <paramref name="id" /> é uma cadeia de caracteres vazia ("").  
  
- ou - 
O parâmetro <paramref name="baseUtcOffset" /> não representa um número inteiro de minutos.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="baseUtcOffset" /> é maior que 14 horas ou menor que -14 horas.</exception>
        <exception cref="T:System.InvalidTimeZoneException">As regras de ajuste especificadas no parâmetro <paramref name="adjustmentRules" /> se sobrepõem.  
  
- ou - 
As regras de ajuste especificadas no parâmetro <paramref name="adjustmentRules" /> não estão em ordem cronológica.  
  
- ou - 
Um ou mais elementos em <paramref name="adjustmentRules" /> são <see langword="null" />.  
  
- ou - 
Uma data pode ter várias regras de ajuste aplicadas a ela.  
  
- ou - 
A soma do parâmetro <paramref name="baseUtcOffset" /> e do valor <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> de um ou mais objetos na matriz <paramref name="adjustmentRules" /> é maior que 14 horas ou menor que -14 horas.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a6af8647-7893-4f29-95a9-d94c65a6e8dd">Como criar fusos horários sem regras de ajuste</related>
        <related type="Article" href="https://msdn.microsoft.com/library/c52ef192-13a9-435f-8015-3b12eae8c47c">Como criar fusos horários com regras de ajuste</related>
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightName : string" Usage="System.TimeZoneInfo.DaylightName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o nome de exibição para o horário de verão do fuso horário atual.</summary>
        <value>O nome de exibição para o horário de verão do fuso horário atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O nome de exibição é localizado de acordo com a cultura instalada com o sistema operacional Windows.  
  
 Um <xref:System.TimeZoneInfo.DaylightName%2A> propriedade cujo valor não é <xref:System.String.Empty?displayProperty=nameWithType> ou `null` não indica necessariamente que o fuso horário dá suporte ao horário de verão. Para determinar se o fuso horário dá suporte a horário de verão, verifique o valor da sua <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> propriedade.  
  
 Na maioria dos casos, o `DaylightName` não é de propriedade dos fusos horários definidos pelo sistema <xref:System.String.Empty?displayProperty=nameWithType> ou `null`. No entanto, o <xref:System.TimeZoneInfo.DaylightName%2A> propriedade de fusos horários personalizados que pode ser definida como <xref:System.String.Empty?displayProperty=nameWithType>. Isso ocorre quando os fusos horários personalizados são criados pela <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> ou o <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%2CSystem.Boolean%29?displayProperty=nameWithType> sobrecarga e a `disableDaylightSavingTime` parâmetro é `true`. Portanto, seu código nunca deve assumir que o valor da <xref:System.TimeZoneInfo.DaylightName%2A> propriedade não é `null` ou está vazio.  
  
 O <xref:System.TimeZoneInfo.DaylightName%2A> propriedade é equivalente de <xref:System.TimeZone.DaylightName%2A> propriedade do <xref:System.TimeZone> classe.  
  
   
  
## Examples  
 O exemplo a seguir define um método chamado `DisplayDateWithTimeZoneName` que usa o <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> método para determinar se deve exibir um fuso horário padrão de nome ou nome do horário de verão.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.TimeZoneInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o nome de exibição geral que representa o fuso horário.</summary>
        <value>Nome de exibição geral do fuso horário.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O nome de exibição é localizado de acordo com a cultura instalada com o sistema operacional Windows.  
  
 Nomes de exibição do fuso horário para fusos de sistema do Windows seguem um formato padrão. A primeira parte do nome de exibição é o deslocamento base do fuso horário do Tempo Universal Coordenado, que é indicado pelo acrônimo GMT (Hora de Greenwich), entre parênteses. Para o tempo Universal Coordenado, o acrônimo GMT com deslocamento não é colocado entre parênteses.  Isso é seguido por uma cadeia de caracteres que identifica o fuso horário ou um ou mais das cidades, regiões ou países no fuso horário. Por exemplo:  
  
```  
(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 O exemplo a seguir recupera um <xref:System.TimeZoneInfo> objeto que representa o fuso horário local e gera seu nome de exibição, o nome de hora padrão e o nome do horário de verão. A saída é exibida para um sistema nos EUA Fuso horário padrão do Pacífico.  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determina se dois objetos <see cref="T:System.TimeZoneInfo" /> são iguais.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="timeZoneInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Um segundo objeto a ser comparado ao objeto atual.</param>
        <summary>Determina se o objeto <see cref="T:System.TimeZoneInfo" /> atual e outro objeto são iguais.</summary>
        <returns><see langword="true" /> se <paramref name="obj" /> for um objeto <see cref="T:System.TimeZoneInfo" /> que é igual à instância atual; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método converte ou projeta `obj` para um <xref:System.TimeZoneInfo> do objeto e o compara com a instância atual. O teste de igualdade é baseado em uma comparação dos valores. O atual <xref:System.TimeZoneInfo> instância e `obj` são considerados iguais nas seguintes condições:  
  
-   O tipo de tempo de execução de `obj` é <xref:System.TimeZoneInfo>.  
  
-   Os dois objetos têm o mesmo <xref:System.TimeZoneInfo.Id%2A> valor da propriedade.  
  
-   Os dois objetos têm as mesmas regras de ajuste.  
  
 Se `obj` for `null`, esse método retornará `false`.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.TimeZoneInfo.Equals%28System.Object%29> método para determinar se o fuso horário local é a hora do Pacífico ou hora do Leste.  
  
 [!code-csharp[System.TimeZoneInfo.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.equals/cs/equals1.cs#1)]
 [!code-vb[System.TimeZoneInfo.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="other">Um segundo objeto a ser comparado ao objeto atual.</param>
        <summary>Determina se o objeto <see cref="T:System.TimeZoneInfo" /> atual e outro objeto <see cref="T:System.TimeZoneInfo" /> são iguais.</summary>
        <returns><see langword="true" /> se os dois objetos <see cref="T:System.TimeZoneInfo" /> forem iguais; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Igualdade baseia-se em uma comparação dos valores. Dois <xref:System.TimeZoneInfo> objetos são considerados iguais nas seguintes condições:  
  
-   O valor de suas <xref:System.TimeZoneInfo.Id%2A> propriedade é a mesma.  
  
-   Eles têm as mesmas regras de ajuste.  
  
 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> Retorna o valor booliano que é o resultado da avaliação da expressão a seguir:  
  
 ```csharp 
 other.Id == this.Id && HasSameRules(other);  
 ```
  
 ```vb
 other.Id = me.Id AndAlso HasSameRules(other)  
 ```

 Se o `other` parâmetro é não inicializado <xref:System.TimeZoneInfo> do objeto, este método retorna `false`.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> método para determinar se o fuso horário local é a hora do Pacífico ou hora do Leste.  
  
 [!code-csharp[System.TimeZone2.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#7)]
 [!code-vb[System.TimeZone2.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindSystemTimeZoneById">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FindSystemTimeZoneById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FindSystemTimeZoneById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindSystemTimeZoneById (id As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FindSystemTimeZoneById(System::String ^ id);" />
      <MemberSignature Language="F#" Value="static member FindSystemTimeZoneById : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FindSystemTimeZoneById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">O identificador do fuso horário, que corresponde à propriedade <see cref="P:System.TimeZoneInfo.Id" />.</param>
        <summary>Cria uma instância de um novo objeto <see cref="T:System.TimeZoneInfo" />, com base em seu identificador.</summary>
        <returns>Um objeto cujo identificador é o valor do parâmetro <paramref name="id" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `id` parâmetro deve corresponder exatamente ao identificador do fuso horário de comprimento, mas não no caso, uma correspondência com êxito ocorrer; ou seja, a comparação de `id` com fuso horário identificadores diferencia maiusculas de minúsculas. Se você quiser recuperar objetos de fuso horário com base em correspondências parciais, você pode escrever procedimentos personalizados que funcionam com a coleção de somente leitura <xref:System.TimeZoneInfo> objetos retornados pelo <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> método.  
  
 Em sistemas Windows, `FindSystemTimeZoneById` tenta corresponder `id` para os nomes da subchave da ramificação do registro HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zones. No Linux e macOS, ele usa as informações de fuso horário disponíveis na [biblioteca ICU](http://userguide.icu-project.org/datetime/timezone). Se o registro ou a biblioteca não tem as informações de fuso horário desejado, você pode criar um fuso horário específico chamando uma das sobrecargas do <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> método ou chamando <xref:System.TimeZoneInfo.FromSerializedString%2A> desserializar um <xref:System.TimeZoneInfo> do objeto representa a zona de tempo necessária. No entanto, os fusos horários criados por essas chamadas de método não são definidas pelo sistema de tempo e não pode ser recuperados usando o <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> método. Esses fusos horários personalizados que podem ser acessados apenas pela referência de objeto retornada pela <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> ou <xref:System.TimeZoneInfo.FromSerializedString%2A> chamada de método.  
  
Esse método retorna um novo <xref:System.TimeZoneInfo> instância para cada chamada de método; ele não retorna objetos armazenados em cache. Isso pode afetar o desempenho em aplicativos que chamam o `FindSystemTimeZoneById` método repetidamente com o mesmo identificador.   
  
## Examples  
 O exemplo a seguir usa o <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> método para recuperar o fuso horário padrão de Tóquio. Isso <xref:System.TimeZoneInfo> objeto é usado para converter a hora local para a hora em Tóquio e para determinar se é hora oficial de Tóquio ou horário de verão de Tóquio.  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">O sistema não tem memória suficiente para manter informações sobre o fuso horário.</exception>
        <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="id" /> é <see langword="null" />.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">O identificador de fuso horário especificado por <paramref name="id" /> não foi encontrado. Isso significa que um identificador de fuso horário cujo nome corresponde ao <paramref name="id" /> não existe ou que o identificador existe, mas não contém nenhum dado de fuso horário.</exception>
        <exception cref="T:System.Security.SecurityException">O processo não tem as permissões necessárias para ler a partir da chave do Registro que contém as informações de fuso horário.</exception>
        <exception cref="T:System.InvalidTimeZoneException">O identificador de fuso horário foi encontrado, mas os dados do Registro estão corrompidos.</exception>
        <altmember cref="P:System.TimeZoneInfo.Id" />
        <related type="Article" href="https://msdn.microsoft.com/library/8cb620e5-c6a6-4267-a52e-beeb73cd1a34">Como criar uma instância de um objeto TimeZoneInfo</related>
      </Docs>
    </Member>
    <Member MemberName="FromSerializedString">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FromSerializedString (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FromSerializedString(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromSerializedString (source As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FromSerializedString(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member FromSerializedString : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FromSerializedString source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">A representação da cadeia de caracteres do objeto <see cref="T:System.TimeZoneInfo" /> serializado.</param>
        <summary>Desserializa uma cadeia de caracteres para recriar um objeto original <see cref="T:System.TimeZoneInfo" /> desserializado.</summary>
        <returns>O objeto serializado original.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Há uma alternativa ao fornecimento de todo o código necessário para criar um fuso horário que não for encontrado no registro no Windows ou nos [biblioteca ICU](http://userguide.icu-project.org/datetime/timezone) no Linux e macOS. Você pode definir um fuso horário personalizado e a usar o <xref:System.TimeZoneInfo.ToSerializedString%2A> método em um executável autônomo ou o programa de instalação do aplicativo para salvar o fuso horário como uma cadeia de caracteres de uso. O aplicativo pode, em seguida, recuperar essa cadeia de caracteres de seu local de armazenamento e instanciá-la usando o <xref:System.TimeZoneInfo.FromSerializedString%2A> método.  
  
   
  
## Examples  
 O exemplo a seguir tenta recuperar o polo Sul/Antártica fuso horário do sistema local. Se ele falhar, o código tenta recuperar informações sobre o fuso horário de um arquivo de texto no diretório do aplicativo. Se essa tentativa falhar, o código cria o fuso horário e grava informações sobre o fuso horário para o arquivo de texto.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O parâmetro <paramref name="source" /> é <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="source" /> é uma cadeia de caracteres vazia.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">A desserialização do parâmetro de origem não pode ser revertida em um objeto <see cref="T:System.TimeZoneInfo" />.</exception>
        <altmember cref="M:System.TimeZoneInfo.ToSerializedString" />
        <related type="Article" href="https://msdn.microsoft.com/library/6b7b4de9-da07-47e3-8f4c-823f81798ee7">Como restaurar fusos horários de um recurso inserido</related>
      </Docs>
    </Member>
    <Member MemberName="GetAdjustmentRules">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.TimeZoneInfo/AdjustmentRule[] GetAdjustmentRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAdjustmentRules" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAdjustmentRules () As TimeZoneInfo.AdjustmentRule()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ GetAdjustmentRules();" />
      <MemberSignature Language="F#" Value="member this.GetAdjustmentRules : unit -&gt; TimeZoneInfo.AdjustmentRule[]" Usage="timeZoneInfo.GetAdjustmentRules " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+AdjustmentRule[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera uma matriz de objetos <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> que se aplicam ao objeto <see cref="T:System.TimeZoneInfo" /> atual.</summary>
        <returns>Uma matriz de objetos para esse fuso horário.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> método recupera uma matriz de <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> objetos. Cada objeto na matriz define a data de início e de término efetiva desse ajuste de fuso horário, bem como o delta (o valor exato pelo qual o ajuste faz com que o tempo para alterar). Além disso, duas propriedades retornam <xref:System.TimeZoneInfo.TransitionTime?displayProperty=nameWithType> que definem quando ocorre a cada transição anual do horário padrão de objetos.  
  
 Se um fuso horário tiver várias regras de ajuste, eles geralmente são ordenados do mais antigo (no índice 0) para a versão mais recente (no índice <xref:System.Array.Length%2A> - 1).  
  
 Se um fuso horário não tem nenhuma regra de ajuste, o <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> método retorna uma matriz vazia (uma matriz cujo <xref:System.Array.Length%2A> é zero).  
  
 Quaisquer modificações aos elementos da matriz retornada pelo <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> método não são refletidas nas regras de ajuste que pertencem a um determinado fuso horário. Para modificar as regras de ajuste de uma zona de tempo (por exemplo, para refletir sua transição de histórica de e para o horário de verão) você deve criar um novo fuso horário com as regras de ajuste apropriado, em vez de modificar o já existente.  
  
   
  
## Examples  
 O exemplo a seguir recupera todos os fusos horários que são definidos nas local system e exibe completas informações sobre suas regras de ajuste para o console.  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">O sistema não tem memória suficiente para fazer uma cópia na memória das regras de ajuste.</exception>
        <altmember cref="T:System.TimeZoneInfo.AdjustmentRule" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAmbiguousTimeOffsets">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retorna informações sobre as datas e as horas possíveis para as quais uma data e hora ambíguas podem ser mapeadas.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTime -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Uma data e hora.</param>
        <summary>Retorna informações sobre as datas e as horas possíveis para as quais uma data e hora ambíguas podem ser mapeadas.</summary>
        <returns>Uma matriz de objetos que representa as possíveis Compensações de UTC (Horário Universal Coordenado) para as quais determinadas datas e horas podem ser mapeadas.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O comportamento preciso desse método depende a relação entre o <xref:System.DateTime.Kind%2A> propriedade e o <xref:System.TimeZoneInfo> objeto, como mostra a tabela a seguir.  
  
|Tipo de objeto TimeZoneInfo|Valor da propriedade do tipo|Comportamento|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> ou <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Deslocamentos de horário ambíguo de retorna para `dateTime`.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Converte `dateTime` para a hora local e, em seguida, retorna os deslocamentos de horário ambíguo para esse período.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|Qualquer valor.|Lança um <xref:System.ArgumentException>.|  
|Outro fuso horário.|<xref:System.DateTimeKind.Local> ou <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Converte `dateTime` para o fuso horário especificado e, em seguida, determina se esse horário é ambíguo.|  
|Outro fuso horário.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Determina se `dateTime` é ambíguo no fuso horário especificado.|  
  
 A ordem dos <xref:System.TimeSpan> objetos na matriz retornada por esse método é indefinido. No entanto, você pode determinar qual elemento representa um deslocamento da hora de padrão do fuso horário, comparando seu valor com do fuso horário <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propriedade. Para mapear um horário ambíguo para o horário padrão de um fuso horário, consulte [como: Resolver horários ambíguos](~/docs/standard/datetime/resolve-ambiguous-times.md).  
  
   
  
## Examples  
 O exemplo a seguir define um método chamado `ShowPossibleUtcTimes` que usa o <xref:System.TimeZoneInfo.GetAmbiguousTimeOffsets%28System.DateTime%29> método para mapear um horário ambíguo é possível atingir o tempo Tempo Universal Coordenado (UTC) correspondente.  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#1)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#1)]  
  
 O método pode ser chamado usando um código como o seguinte:  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#2)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> não é um horário ambíguo.</exception>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
        <related type="Article" href="https://msdn.microsoft.com/library/2cf5fb25-492c-4875-9245-98cac8348e97">Como resolver horários ambíguos</related>
        <related type="Article" href="https://msdn.microsoft.com/library/bca874ee-5b68-4654-8bbd-3711220ef332">Como permitir que os usuários resolvam horários ambíguos</related>
      </Docs>
    </Member>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTimeOffset -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Uma data e hora.</param>
        <summary>Retorna informações sobre as datas e as horas possíveis para as quais uma data e hora ambíguas podem ser mapeadas.</summary>
        <returns>Uma matriz de objetos que representa as possíveis Compensações de UTC (Horário Universal Coordenado) para as quais determinadas datas e horas podem ser mapeadas.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O comportamento preciso desse método depende a relação entre o <xref:System.DateTimeOffset.Offset%2A> propriedade do `dateTimeOffset` parâmetro e o <xref:System.TimeZoneInfo> objeto. Se o valor da <xref:System.DateTimeOffset.Offset%2A> propriedade corresponde à possíveis deslocamentos do fuso horário atual do tempo Universal Coordenado (UTC) para data e hora, o método retorna os possíveis deslocamentos. Caso contrário, ele converte `dateTimeOffset` para a hora no fuso horário atual e, em seguida, retorna os possíveis deslocamentos de que data e hora.  
  
 A ordem dos <xref:System.TimeSpan> objetos na matriz retornada por esse método é indefinido. No entanto, você pode determinar qual elemento representa um deslocamento da hora de padrão do fuso horário, comparando seu valor com do fuso horário <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propriedade. Para mapear um horário ambíguo para o horário padrão de um fuso horário, consulte [como: Resolver horários ambíguos](~/docs/standard/datetime/resolve-ambiguous-times.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTimeOffset" /> não é um horário ambíguo.</exception>
        <altmember cref="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
        <related type="Article" href="https://msdn.microsoft.com/library/2cf5fb25-492c-4875-9245-98cac8348e97">Como resolver horários ambíguos</related>
        <related type="Article" href="https://msdn.microsoft.com/library/bca874ee-5b68-4654-8bbd-3711220ef332">Como permitir que os usuários resolvam horários ambíguos</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="timeZoneInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Funciona como uma função de hash para algoritmos de hash atuais e estruturas de dados como tabelas de hash.</summary>
        <returns>Um inteiro com sinal de 32 bits que serve como o código hash para este objeto <see cref="T:System.TimeZoneInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais detalhes sobre o <xref:System.TimeZoneInfo.GetHashCode%2A> método, consulte <xref:System.Object.GetHashCode%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSystemTimeZones">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt; GetSystemTimeZones ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.TimeZoneInfo&gt; GetSystemTimeZones() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetSystemTimeZones" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSystemTimeZones () As ReadOnlyCollection(Of TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;TimeZoneInfo ^&gt; ^ GetSystemTimeZones();" />
      <MemberSignature Language="F#" Value="static member GetSystemTimeZones : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt;" Usage="System.TimeZoneInfo.GetSystemTimeZones " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.TimeZoneInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna uma coleção classificada de todos os fuso horários sobre os quais há informações disponíveis no sistema local.</summary>
        <returns>Uma coleção de objetos <see cref="T:System.TimeZoneInfo" /> somente leitura.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> método recupera todas as informações de zona de tempo disponíveis de subchaves da chave de HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zones do registro em sistemas Windows e a partir de [biblioteca ICU](http://userguide.icu-project.org/datetime/timezone) no Linux e macOS. Se não for possível recuperar com êxito e analisar os valores para propriedades de cadeia de caracteres específica do indivíduo <xref:System.TimeZoneInfo> objetos, esse método define seu valor como uma cadeia de caracteres vazia ("").  
  
> [!IMPORTANT]
>  O <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> método retorna uma coleção de <xref:System.TimeZoneInfo> objetos somente para fusos horários definidos na ou biblioteca ICU. Ele não inclui fusos horários criados usando as sobrecargas do <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> método. Eles são acessíveis somente pela referência de objeto retornada pelo método de criação de fuso horário.  
  
 A coleção retornada por esse método é classificada pelo deslocamento UTC e, para fusos horários que têm o mesmo deslocamento do UTC, pelo nome de exibição usando a cultura atual. Para obter informações sobre o nome de exibição, consulte <xref:System.TimeZoneInfo.DisplayName%2A>.  
  
 O <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> objeto retornado por esse método é compatível com o <xref:System.Collections.Generic.IEnumerable%601> interface, o que significa que ele pode ser iterado usando o `foreach` (em c#) ou `For Each…Next` (no Visual Basic) instruções. Cada iteração do loop fornece o próximo <xref:System.TimeZoneInfo> objeto na coleção.  
  
 A coleção de <xref:System.TimeZoneInfo> objetos representa fusos horários definidos no computador local, ele não necessariamente fornece informações completas para todos os fusos horários durante todos os períodos de tempo. Se seu aplicativo exigir fusos horários não são encontrados no computador local, você pode criar fusos horários personalizados usando as sobrecargas de <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> método. Para obter mais informações, confira [Como: Criar fusos horários sem regras de ajuste](~/docs/standard/datetime/create-time-zones-without-adjustment-rules.md) e [como: Criar fusos horários com regras de ajuste](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md).  
  
 Você também pode determinar se uma zona de tempo individual é definida no computador local chamando o <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> método e fornecendo o identificador do fuso horário que você deseja recuperar como um parâmetro.  
  
   
  
## Examples  
 O exemplo a seguir recupera uma coleção de objetos de fuso horário que representam os fusos horários definidos em um computador e grava informações sobre eles em um arquivo de texto.  
  
 [!code-csharp[System.TimeZone2.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/getsystemtimezones1.cs#6)]
 [!code-vb[System.TimeZone2.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/getsystemtimezones1.vb#6)]
  [!code-powershell[System.TimeZone2.Class#6](~/samples/snippets/powershell/VS_Snippets_CLR_System/System.TimeZone2.Class/PS/Timezone2_Examples.ps1)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">A memória é insuficiente para armazenar todas as informações de fuso horário.</exception>
        <exception cref="T:System.Security.SecurityException">O usuário não tem permissão para ler as chaves do Registro que contêm informações de fuso horário.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUtcOffset">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Calcula o deslocamento ou a diferença entre o momento neste fuso horário e o Tempo Universal Coordenado (UTC) para uma determinada data e hora.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTime -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">A data e hora para determinar o deslocamento.</param>
        <summary>Calcula o deslocamento ou a diferença entre o momento neste fuso horário e o Tempo Universal Coordenado (UTC) para uma determinada data e hora.</summary>
        <returns>Um objeto que indica a diferença de tempo entre os dois fusos horários.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O período de tempo retornada inclui quaisquer diferenças devido ao aplicativo de regras de ajuste para o fuso horário atual. Ele difere do <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propriedade, que retorna a diferença entre o tempo Universal Coordenado (UTC) e o horário de padrão do fuso horário e, portanto, não consideram as regras de ajuste.  
  
 Se o `dateTime` do parâmetro <xref:System.DateTime.Kind%2A> propriedade não corresponde ao objeto de fuso horário, esse método realiza a conversão necessária antes de retornar um resultado. Por exemplo, isso pode ocorrer se o <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Local?displayProperty=nameWithType> , mas o objeto de fuso horário não é o fuso horário local. Se `dateTime` é ambíguo, ou se o horário convertido for ambíguo, esse método interpreta o horário ambíguo como horário padrão. Se `dateTime` for inválido, esse método retornará um <xref:System.TimeSpan> objeto que reflete a diferença entre o UTC e a hora de padrão do fuso horário.  
  
 O <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29?displayProperty=nameWithType> método é semelhante em operação para o <xref:System.TimeZone.GetUtcOffset%2A> método o <xref:System.TimeZone> classe.  
  
   
  
## Examples  
 O exemplo a seguir ilustra o uso do <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29> método com fusos horários diferentes e com valores de datas que têm diferentes <xref:System.DateTime.Kind%2A> valores de propriedade.  
  
 [!code-csharp[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/cs/System.TimeZone2.GetUtcOffset.cs#1)]
 [!code-vb[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/vb/System.TimeZone2.GetUtcOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.BaseUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTimeOffset -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">A data e hora para determinar o deslocamento.</param>
        <summary>Calcula o deslocamento ou a diferença entre o momento neste fuso horário e o Tempo Universal Coordenado (UTC) para uma determinada data e hora.</summary>
        <returns>Um objeto que indica a diferença de tempo entre o UTC (Tempo Universal Coordenado) e o fuso horário atual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O período de tempo retornada inclui quaisquer diferenças devido ao aplicativo de regras de ajuste para o fuso horário atual. Ele difere do <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propriedade, que retorna a diferença entre o tempo Universal Coordenado (UTC) e o horário de padrão do fuso horário e, portanto, não consideram as regras de ajuste.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSameRules">
      <MemberSignature Language="C#" Value="public bool HasSameRules (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasSameRules(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasSameRules (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasSameRules(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="member this.HasSameRules : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.HasSameRules other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="other">Um segundo objeto a ser comparado ao objeto <see cref="T:System.TimeZoneInfo" /> atual.</param>
        <summary>Indica se o objeto atual e outro objeto <see cref="T:System.TimeZoneInfo" /> têm as mesmas regras de ajuste.</summary>
        <returns><see langword="true" /> se os dois fusos horários tiverem regras de ajuste idênticas e um deslocamento de base idêntico; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Como o <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> método, o <xref:System.TimeZoneInfo.HasSameRules%2A> método indica se os dois fusos horários têm o mesmo deslocamento de base (conforme definido pelo <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propriedade) e as mesmas regras de ajuste. Ao contrário do <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> método, <xref:System.TimeZoneInfo.HasSameRules%2A> não compara os identificadores de fuso horário (conforme definido pelo <xref:System.TimeZoneInfo.Id%2A> propriedade).  
  
   
  
## Examples  
 Normalmente, um número de fusos horários definidos no registro no Windows e o [biblioteca ICU](http://userguide.icu-project.org/datetime/timezone) no Linux e macOS têm o mesmo deslocamento de tempo Universal Coordenado (UTC) e as mesmas regras de ajuste. O exemplo a seguir exibe uma lista dessas zonas de tempo para o console.  
  
 [!code-csharp[System.TimeZone2.HasSameRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/cs/HasSameRules.cs#1)]
 [!code-vb[System.TimeZone2.HasSameRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/vb/HasSameRules.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="other" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="System.TimeZoneInfo.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o identificador de fuso horário.</summary>
        <value>O identificador de fuso horário.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O identificador de fuso horário é uma cadeia de caracteres chave que identifica exclusivamente um determinado fuso horário. Em sistemas Windows, ele corresponde às subchaves da ramificação HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time zona do registro nos sistemas Windows e dos [biblioteca ICU](http://userguide.icu-project.org/datetime/timezone) no Linux e macOS. Ele pode ser passado como um parâmetro para o <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> método para instanciar um <xref:System.TimeZoneInfo> objeto que representa um fuso horário específico.  
  
> [!IMPORTANT]
>  Embora um nome de chave no registro do Windows pode ter um máximo de 255 caracteres, é recomendável que um identificador que você atribui a um fuso horário personalizado ser 32 caracteres ou menos. Quanto maior o identificador, maior a probabilidade de que um nome incorreto de chave será fornecido ao recuperá-los.  
  
 O valor da <xref:System.TimeZoneInfo.Id%2A> propriedade normalmente é, mas não sempre, idêntica do <xref:System.TimeZoneInfo.StandardName%2A> propriedade. O identificador do fuso horário coordenado Universal é UTC.  
  
   
  
## Examples  
 O exemplo a seguir lista o identificador de cada um dos fusos horários definidos no computador local.  
  
 [!code-csharp[System.TimeZone2.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#5)]
 [!code-vb[System.TimeZone2.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAmbiguousTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determina se uma determinada data e hora em um fuso horário específico é ambígua e pode ser mapeada para duas ou mais horas do Tempo Universal Coordenado (UTC).</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Um valor de data e hora.</param>
        <summary>Determina se uma determinada data e hora em um fuso horário específico é ambígua e pode ser mapeada para duas ou mais horas do Tempo Universal Coordenado (UTC).</summary>
        <returns><see langword="true" /> se o parâmetro <paramref name="dateTime" /> for ambíguo; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um horário ambíguo se enquadra dentro de um intervalo de horas para o fuso horário atual. Isso significa que ele pode ser um horário padrão ou uma hora que resulta da aplicação de uma regra de ajuste. Normalmente, os horários ambíguos resultam quando o relógio está definido para retornar para o horário padrão do horário de verão. Consulte a seção de exemplo para obter uma ilustração.  
  
 Tempo Universal Coordenado (UTC) não tem nenhum horários ambíguos; nenhum tempo zonas que não dão suporte ao horário de verão. Portanto, esses fusos horários não tem regras de ajuste e chamadas para o <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> método de retorno sempre `false`.  
  
 Para fusos horários que cumprem o horário de verão, o comportamento preciso desse método depende da relação entre o <xref:System.DateTime.Kind%2A> propriedade e o <xref:System.TimeZoneInfo> objeto, como mostra a tabela a seguir.  
  
|Tipo de objeto TimeZoneInfo|Valor da propriedade do tipo|Comportamento|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> ou <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Determina se o `dateTime` parâmetro é ambíguo.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Converte `dateTime` para a hora local e, em seguida, determina se esse horário é ambíguo.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType> ou <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Retorna `false`.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Se `dateTime` é ambíguo, pressupõe que ele é um horário padrão, o converterá em UTC e retorna `false`.|  
|Outro fuso horário.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> ou <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Converte `dateTime` para a hora no fuso horário especificado e, em seguida, determina se esse horário é ambíguo.|  
|Outro fuso horário.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Determina se `dateTime` é ambíguo.|  
  
   
  
## Examples  
 No fuso horário do Pacífico, horário de verão termina às 2 horas. em 4 de novembro de 2007. O exemplo a seguir passa o tempo em intervalos de um minuto de 12 3:59. em 4 de novembro de 2007 para 2 0:01. em 4 de novembro de 2007 para o <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> método de um <xref:System.TimeZoneInfo> objeto que representa o fuso horário do Pacífico. A saída do console indica que todos os momentos de 1:00 em 4 de novembro de 2007 a 1:59. em 4 de novembro de 2007, são ambíguas.  
  
 [!code-csharp[System.TimeZone2.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#8)]
 [!code-vb[System.TimeZone2.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">A propriedade <see cref="P:System.DateTime.Kind" /> do valor <paramref name="dateTime" /> é <see cref="F:System.DateTimeKind.Local" /> e <paramref name="dateTime" /> é uma hora inválida.</exception>
        <altmember cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Uma data e hora.</param>
        <summary>Determina se uma determinada data e hora em um fuso horário específico é ambígua e pode ser mapeada para duas ou mais horas do Tempo Universal Coordenado (UTC).</summary>
        <returns><see langword="true" /> se o parâmetro <paramref name="dateTimeOffset" /> for ambíguo no fuso horário atual; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um horário ambíguo se enquadra dentro de um intervalo de horas para o fuso horário atual. Isso significa que pode ser um horário padrão ou uma hora que resulta da aplicação de uma regra de ajuste. Normalmente, os horários ambíguos resultam quando o relógio está definido para retornar para o horário padrão do horário de verão. Tempo Universal Coordenado (UTC) não tem nenhum horários ambíguos; nenhum tempo zonas que não dão suporte ao horário de verão.  
  
 O comportamento exato do método depende da relação entre o <xref:System.DateTimeOffset.Offset%2A> propriedade do `dateTimeOffset` parâmetro e o fuso horário atual. Se o valor da <xref:System.DateTimeOffset.Offset%2A> propriedade é uma possível de deslocamento do UTC do fuso horário atual, o método determina se que a data e hora é ambíguo. Caso contrário, ele converte `dateTimeOffset` para a hora no fuso horário atual e, em seguida, determina se que a data e hora é ambíguo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Indica se uma data e hora especificadas estão no intervalo de horário de verão do fuso horário do objeto <see cref="T:System.TimeZoneInfo" /> atual.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Um valor de data e hora.</param>
        <summary>Indica se uma data e hora especificada estão no intervalo de horário de verão do fuso horário do atual objeto <see cref="T:System.TimeZoneInfo" />.</summary>
        <returns><see langword="true" /> se o parâmetro <paramref name="dateTime" /> for um horário de verão; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor de retorno <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> é afetado pela relação entre o fuso horário representado pelo <xref:System.TimeZoneInfo> objeto e o <xref:System.DateTime.Kind%2A> propriedade do `dateTime` parâmetro, como mostra a tabela a seguir.  
  
|Objeto TimeZoneInfo|Propriedade DateTime. Kind|Resultado|  
|-------------------------|----------------------------|------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Local`|Determina se `dateTime` é o horário de verão.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Utc`|Converte `dateTime` do tempo Universal Coordenado (UTC) para a hora local e determina se o horário de verão.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Unspecified`|Pressupõe que `dateTime` representa a hora local e determina se ele é o horário de verão.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|`DateTimeKind.Local`, `DateTimeKind.Unspecified` ou `DateTimeKind.Utc`|Retorna `false` (UTC não tem suporte para horário de verão).|  
|Qualquer outro <xref:System.TimeZoneInfo> objeto.|`DateTimeKind.Local`|Converte a hora local para o horário equivalente do <xref:System.TimeZoneInfo> do objeto e, em seguida, determina se o último horário de verão.|  
|Qualquer outro <xref:System.TimeZoneInfo> objeto.|`DateTimeKind.Utc`|Converte o UTC para o horário equivalente do <xref:System.TimeZoneInfo> do objeto e, em seguida, determina se o último horário de verão.|  
|Qualquer outro <xref:System.TimeZoneInfo> objeto.|`DateTimeKind.Unspecified`|Determina se `dateTime` é o horário de verão.|  
  
 Se o fuso horário é representado pela <xref:System.TimeZoneInfo> objeto não oferece suporte para horário de verão, o método sempre retorna `false`. Um número de fusos horários, incluindo <xref:System.TimeZoneInfo.Utc%2A>, não estão sujeitas a horário de verão.  Para determinar se um fuso horário dá suporte a horário de verão, recuperar o valor de seu <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> propriedade.  
  
 Se o `dateTime` parâmetro especifica um horário ambíguo no fuso horário do objeto atual, o <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> método interpreta `dateTime` como horário padrão e retorna `false` se seu <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ou <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Se o <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, esse método será selecionar o horário ambíguo correto e indicar se ele é um horário de verão.  
  
 Porque o <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29?displayProperty=nameWithType> método pode retornar `false` para uma data e hora que é ambígua (ou seja, uma data e hora que pode representar o horário padrão ou um horário de verão em um determinado fuso horário), o <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29?displayProperty=nameWithType> método pode ser emparelhado com o <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> método para determinar se um tempo pode ser um horário de verão. Porque um horário ambíguo é aquele que pode ser um horário de verão e o horário padrão, o <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> método pode ser chamado primeiro para determinar se uma data e hora podem estar em um horário de verão. Se o método retornar `false`, o <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> método pode ser chamado para determinar se o <xref:System.DateTime> valor é um horário de verão. O exemplo a seguir ilustra essa técnica.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#2)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#2)]  
  
 Se o `dateTime` parâmetro especifica uma hora inválida, a chamada de método lança um <xref:System.ArgumentException> se o valor da `dateTime` do parâmetro <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Local?displayProperty=nameWithType>; caso contrário, o método retorna `false`.  
  
 Chame o <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> método para determinar se deve usar um fuso horário <xref:System.TimeZoneInfo.StandardName%2A> valor ou seu <xref:System.TimeZoneInfo.DaylightName%2A> valor ao exibir o nome do fuso horário. Consulte a seção de exemplo para obter uma ilustração.  
  
   
  
## Examples  
 O exemplo a seguir define um método chamado `DisplayDateWithTimeZoneName` que usa o <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> método para determinar se deve exibir um fuso horário padrão de nome ou nome do horário de verão.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">A propriedade <see cref="P:System.DateTime.Kind" /> do valor <paramref name="dateTime" /> é <see cref="F:System.DateTimeKind.Local" /> e <paramref name="dateTime" /> é uma hora inválida.</exception>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Um valor de data e hora.</param>
        <summary>Indica se uma data e hora especificada estão no intervalo de horário de verão do fuso horário do atual objeto <see cref="T:System.TimeZoneInfo" />.</summary>
        <returns><see langword="true" /> se o parâmetro <paramref name="dateTimeOffset" /> for um horário de verão; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor de retorno <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> é afetado pela relação entre o fuso horário representado pelo <xref:System.TimeZoneInfo> objeto e o <xref:System.DateTimeOffset.Offset%2A> propriedade do `dateTimeOffset` parâmetro. Se `dateTimeOffset` não corresponde ao deslocamento do fuso horário atual do tempo Universal Coordenado (UTC), converte o método que o tempo para a hora no fuso horário atual. Em seguida, determina se que a data e hora é um verão economizando tempo.  
  
 Se o fuso horário é representado pela <xref:System.TimeZoneInfo> objeto não oferece suporte para horário de verão, o método sempre retorna `false`. Para determinar se um fuso horário dá suporte a horário de verão, recuperar o valor de seu <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> propriedade.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsInvalidTime">
      <MemberSignature Language="C#" Value="public bool IsInvalidTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInvalidTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInvalidTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsInvalidTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsInvalidTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Um valor de data e hora.</param>
        <summary>Indica se uma data e hora determinada é inválida.</summary>
        <returns><see langword="true" /> se <paramref name="dateTime" /> for inválida, caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma hora inválida se enquadra dentro de um intervalo de horas para o fuso horário atual que não pode ser mapeado para o tempo Universal Coordenado (UTC), devido ao aplicativo de uma regra de ajuste. Normalmente, os horários inválidos ocorrem quando o tempo avança para o horário de verão. Consulte a seção de exemplo para obter uma ilustração.  
  
 O valor da <xref:System.DateTime.Kind%2A> propriedade do `dateTime` parâmetro afeta se `dateTime` representa uma hora inválida, como mostra a tabela a seguir.  
  
|Propriedade DateTime. Kind|Objeto TimeZoneInfo (se aplicável)|Comportamento|  
|----------------------------|-------------------------------------------|--------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|Determina se a hora é inválida.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> ou um fuso horário não local.|Converte `dateTime` para a hora do <xref:System.TimeZoneInfo> objeto e retorna `false`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Não aplicável.|Pressupõe `dateTime` é a hora do <xref:System.TimeZoneInfo> de objeto e determina se ele é inválido.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Não aplicável.|Retorna `false`.|  
  
   
  
## Examples  
 No fuso horário do Pacífico, o horário de verão começa às 2 horas. em 2 de abril de 2006. O código a seguir passa o tempo em intervalos de um minuto de 1:59. em 2 de abril de 2006 para 3 0:01. em 2 de abril de 2006 para o <xref:System.TimeZoneInfo.IsInvalidTime%2A> método de um <xref:System.TimeZoneInfo> objeto que representa o fuso horário do Pacífico. A saída do console indica que todos os momentos de 2:00 em 2 de abril de 2006 para 2 3:59. em 2 de abril de 2006 são inválidos.  
  
 [!code-csharp[System.TimeZone2.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#9)]
 [!code-vb[System.TimeZone2.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
      </Docs>
    </Member>
    <Member MemberName="Local">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Local { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Local" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Local" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Local As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Local { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Local : TimeZoneInfo" Usage="System.TimeZoneInfo.Local" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um objeto <see cref="T:System.TimeZoneInfo" /> que representa o fuso horário local.</summary>
        <value>Um objeto que representa o fuso horário local.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O fuso horário local é o fuso horário no computador onde o código está sendo executado.  
  
> [!IMPORTANT]
>  Você deve sempre acessar o fuso horário local por meio de <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> propriedade em vez de atribuir a hora local da zona para um <xref:System.TimeZoneInfo> variável de objeto. Isso impede que o <xref:System.TimeZoneInfo> variável de objeto do seja invalidada por uma chamada para o <xref:System.TimeZoneInfo.ClearCachedData%2A> método.  
  
 Em sistemas Windows, o <xref:System.TimeZoneInfo> objeto retornado pela <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> propriedade reflete a configuração do **ajustar automaticamente o relógio para horário de verão** caixa de seleção no painel de controle **data e hora**  aplicativo. Se a caixa de seleção estiver desmarcada, a cópia armazenada em cache do fuso horário local não contém nenhuma informação de horário de verão. Isso significa que:  
  
-   O fuso horário local <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> método retorna uma matriz cujo tamanho é zero.  
  
-   O fuso horário local <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> propriedade retorna `false`.  
  
-   O fuso horário local tem tempos de ambíguos ou inválidos (todas as chamadas para <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> ou <xref:System.TimeZoneInfo.IsInvalidTime%2A> retornar `false`).  
  
-   Todas as chamadas para <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A> com horas de locais individuais retornar false.  
  
 Isso não é verdade, no entanto, se uma referência para o fuso horário local é recuperada usando o <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> método.  
  
 O <xref:System.TimeZoneInfo.Local%2A> propriedade corresponde à <xref:System.TimeZone.CurrentTimeZone%2A> propriedade do <xref:System.TimeZone> classe.  
  
   
  
## Examples  
 O exemplo a seguir recupera um <xref:System.TimeZoneInfo> objeto que representa o fuso horário local e gera seu nome de exibição, o nome de hora padrão e o nome do horário de verão.  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/961fb70b-83f0-4dab-a042-cb5fcd817cf5">Como acessar os objetos de fuso horário predefinidos UTC e Local</related>
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardName : string" Usage="System.TimeZoneInfo.StandardName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o nome de exibição do horário padrão do fuso horário.</summary>
        <value>O nome de exibição do horário padrão do fuso horário.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O nome de exibição é localizado de acordo com a cultura instalada com o sistema operacional Windows.  
  
 O <xref:System.TimeZoneInfo.StandardName%2A> propriedade é idêntica de <xref:System.TimeZone.StandardName%2A> propriedade do <xref:System.TimeZone> classe.  
  
 Se o idioma do sistema operacional for inglês, o valor da <xref:System.TimeZoneInfo.StandardName%2A> propriedade normalmente é, mas não sempre, idêntica do <xref:System.TimeZoneInfo.Id%2A> propriedade.  
  
   
  
## Examples  
 O exemplo a seguir define um método chamado `DisplayDateWithTimeZoneName` que usa o <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> método para determinar se deve exibir um fuso horário padrão de nome ou nome do horário de verão.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool SupportsDaylightSavingTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsDaylightSavingTime" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportsDaylightSavingTime As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsDaylightSavingTime { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsDaylightSavingTime : bool" Usage="System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se o fuso horário tem regras de horário de verão.</summary>
        <value><see langword="true" /> se o fuso horário der suporte ao horário de verão; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor da <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> propriedade para o fuso horário local retornado pela <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> propriedade reflete a configuração do painel de controle **data e hora** caixa de seleção do aplicativo que define se o sistema automaticamente Ajusta o horário de verão. Se for desmarcada, ou se nenhuma caixa de seleção é exibida para um fuso horário, o valor dessa propriedade é `false`.  
  
   
  
## Examples  
 O exemplo a seguir recupera uma coleção de todos os fusos horários que estão disponíveis em um sistema local e exibe os nomes daqueles que não dão suporte a horário de verão.  
  
 [!code-csharp[System.TimeZone2.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#4)]
 [!code-vb[System.TimeZone2.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#4)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">O objeto que iniciou o retorno de chamada. A funcionalidade desse parâmetro não está implementada no momento.</param>
        <summary>Executado quando a desserialização de um objeto foi concluída.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException">O objeto <see cref="T:System.TimeZoneInfo" /> contém dados inválidos ou corrompidos.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">O objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> a ser populado com os dados.</param>
        <param name="context">O destino dessa serialização (veja <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Popula um objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> com os dados necessários para serializar o objeto <see cref="T:System.TimeZoneInfo" /> atual.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="info" /> é <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Requer confiança total para o chamador imediato. Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</permission>
      </Docs>
    </Member>
    <Member MemberName="ToSerializedString">
      <MemberSignature Language="C#" Value="public string ToSerializedString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToSerializedString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToSerializedString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToSerializedString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToSerializedString();" />
      <MemberSignature Language="F#" Value="member this.ToSerializedString : unit -&gt; string" Usage="timeZoneInfo.ToSerializedString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte o objeto <see cref="T:System.TimeZoneInfo" /> atual para uma cadeia de caracteres serializada.</summary>
        <returns>Uma cadeia de caracteres que representa o objeto <see cref="T:System.TimeZoneInfo" /> atual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aplicativos que dependem de fusos horários que não são normalmente definidos no registro de sistemas do Windows ou o [biblioteca ICU](http://userguide.icu-project.org/datetime/timezone) no Linux e macOScan pode usar o <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> método para instanciar os fusos horários necessários como <xref:System.TimeZoneInfo>objetos. O aplicativo pode chamar o <xref:System.TimeZoneInfo.ToSerializedString%2A> método para converter o objeto de fuso horário para uma cadeia de caracteres.  
  
 O <xref:System.TimeZoneInfo> objeto também deve ser armazenado em um local onde o aplicativo pode recuperá-lo quando necessário. Locais possíveis incluem:  
  
-   O registro nos sistemas Windows.  
  
-   Um arquivo de recurso do aplicativo.  
  
-   Um arquivo externo, como um arquivo de texto.  
  
   
  
## Examples  
 O exemplo a seguir tenta recuperar o polo Sul/Antártica fuso horário do sistema local. Se ele falhar, o código tenta recuperar informações sobre o fuso horário de um arquivo de texto no diretório do aplicativo. Se essa tentativa falhar, o código cria o fuso horário e grava informações sobre ele no arquivo de texto.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
        <related type="Article" href="https://msdn.microsoft.com/library/3c96d83a-a057-4496-abb0-8f4b12712558">Como salvar fusos horários em um recurso inserido</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="timeZoneInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna o nome de exibição do objeto <see cref="T:System.TimeZoneInfo" /> atual.</summary>
        <returns>O valor da propriedade <see cref="P:System.TimeZoneInfo.DisplayName" /> do objeto <see cref="T:System.TimeZoneInfo" /> atual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ao atribuir uma coleção que contém <xref:System.TimeZoneInfo> objetos para um controle de lista como o <xref:System.Windows.Forms.ListBox> controle, o controle chama automaticamente o <xref:System.TimeZoneInfo.ToString%2A> método para extrair uma cadeia de caracteres que descreve cada objeto a ser representada na lista. Como resultado, você não precisa armazenar uma descrição significativa do objeto como uma cadeia de caracteres, e o usuário não precisa usar essa cadeia de caracteres para extrair o objeto da coleção. Confira [Como Enumerar os fusos horários presentes em um computador](~/docs/standard/datetime/enumerate-time-zones.md) para obter mais detalhes.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Utc">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Utc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Utc" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Utc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Utc As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Utc { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Utc : TimeZoneInfo" Usage="System.TimeZoneInfo.Utc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um objeto <see cref="T:System.TimeZoneInfo" /> que representa a zona UTC (Tempo Universal Coordenado).</summary>
        <value>Um objeto que representa a zona UTC (Tempo Universal Coordenado).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse é um objeto interno; informações sobre esse <xref:System.TimeZoneInfo> objeto não é recuperado do registro em sistemas Windows e a partir de [biblioteca ICU](http://userguide.icu-project.org/datetime/timezone) no Linux e macOS.  
  
> [!IMPORTANT]
>  Você deve sempre acessar o fuso horário Universal Coordenado (UTC) por meio de <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> propriedade em vez de atribuir o fuso horário UTC para um <xref:System.TimeZoneInfo> variável de objeto. Isso impede que o <xref:System.TimeZoneInfo> variável de objeto do seja invalidada por uma chamada para o <xref:System.TimeZoneInfo.ClearCachedData%2A> método.  
  
 Tempo Universal Coordenado era conhecido como hora de Greenwich (GMT).  
  
   
  
## Examples  
 O exemplo a seguir recupera um <xref:System.TimeZoneInfo> objeto que representa o tempo Universal Coordenado (UTC) e gera seu nome de exibição, o nome de hora padrão e o nome do horário de verão.  
  
 [!code-csharp[System.TimeZone2.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#3)]
 [!code-vb[System.TimeZone2.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/961fb70b-83f0-4dab-a042-cb5fcd817cf5">Como acessar os objetos de fuso horário predefinidos UTC e Local</related>
      </Docs>
    </Member>
  </Members>
</Type>