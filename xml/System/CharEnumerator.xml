<Type Name="CharEnumerator" FullName="System.CharEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="456588b2dbb51a1da2076e0f5cbd651151770d7d" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48616343" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CharEnumerator extends System.Object implements class System.Collections.Generic.IEnumerator`1&lt;char&gt;, class System.Collections.IEnumerator, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.CharEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CharEnumerator&#xA;Implements ICloneable, IEnumerator(Of Char)" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharEnumerator sealed : ICloneable, System::Collections::Generic::IEnumerator&lt;char&gt;" />
  <TypeSignature Language="F#" Value="type CharEnumerator = class&#xA;    interface IEnumerator&#xA;    interface ICloneable&#xA;    interface IEnumerator&lt;char&gt;&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Dá suporte à iteração em um objeto <see cref="T:System.String" /> e leitura de seus caracteres individuais. Essa classe não pode ser herdada.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um <xref:System.CharEnumerator> fornece acesso somente leitura para os caracteres em um referenciado <xref:System.String> objeto. Por exemplo, o `foreach` instrução das linguagens de programação Microsoft Visual Basic e c#, que itera por meio dos elementos de uma coleção, recupera uma <xref:System.CharEnumerator> de um <xref:System.String> objeto para iterar os caracteres em que objeto.  

> [!IMPORTANT]
> O `CharEnumerator` classe enumera 16-bit individual <xref:System.Char> instâncias. Ele não considera graphemes (ou seja, um caractere seguido por um ou mais caracteres combiding) ou substitutos pares (ou seja, os caracteres fora do Unicode Basic Multilingual Plane) como caracteres únicos. Para um enumerador que lida com esses tipos de caracteres como uma única unidade, use o <xref:System.Globalization.StringInfo> classe.

 Não há nenhum construtor público para <xref:System.CharEnumerator>. Em vez disso, chame um <xref:System.String> do objeto <xref:System.String.GetEnumerator%2A> método para obter um <xref:System.CharEnumerator> que é inicializada para a cadeia de caracteres de referência.  
  
 Um <xref:System.CharEnumerator> mantém um índice de interno para os caracteres na cadeia de caracteres a <xref:System.CharEnumerator> referências. O estado do índice é inválido quando ele faz referência a uma posição de caractere logicamente antes do primeiro caractere ou após o último caractere na cadeia de caracteres e é válido quando ele faz referência a um caractere na cadeia de caracteres. O índice é inicializado para uma posição logicamente antes do primeiro caractere e é definido para uma posição após o último caractere quando a iteração é concluída. Uma exceção é lançada se você tentar acessar um caractere, enquanto o índice é inválido.  
  
 O <xref:System.CharEnumerator.MoveNext%2A> método incrementa o índice em um, para que os caracteres do primeiro e as subsequentes são acessados por sua vez. O <xref:System.CharEnumerator.Reset%2A> método define o índice para uma posição logicamente antes do primeiro caractere. O <xref:System.CharEnumerator.Current%2A> propriedade recupera o caractere atualmente referenciado por índice. O <xref:System.CharEnumerator.Clone%2A> método cria uma cópia do <xref:System.CharEnumerator>.  
  
> [!NOTE]
>  Várias instâncias independentes da <xref:System.CharEnumerator> em um ou mais threads pode ter acesso a uma única instância de <xref:System.String>. Essa classe é implementada para dar suporte a <xref:System.Collections.IEnumerator> interface. Para obter mais informações sobre o uso de um enumerador, consulte o <xref:System.Collections.IEnumerator> tópico.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.CharEnumerator> classe para enumerar os caracteres individuais em uma cadeia de caracteres. Ele cria uma instância de um <xref:System.CharEnumerator> objeto chamando o <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> método, move de um caractere para a próxima chamando o <xref:System.CharEnumerator.MoveNext%2A> método e exibe o caractere atual ao recuperar o valor do <xref:System.CharEnumerator.Current%2A> propriedade.  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 No entanto, observe que a mesma operação pode ser executada um pouco mais intuitivamente por meio `foreach` (em c#) ou `For Each` (no Visual Basic), como o exemplo a seguir mostra.  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.ICollection" />
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="charEnumerator.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cria uma cópia do objeto <see cref="T:System.CharEnumerator" /> atual.</summary>
        <returns>Um <see cref="T:System.Object" /> que é uma cópia do objeto <see cref="T:System.CharEnumerator" /> atual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor de retorno é uma cópia desta instância de <xref:System.CharEnumerator> e seu estado atual. Isso é útil para salvar seu estado durante a iteração por meio de um <xref:System.String> objeto.  
  
 Por exemplo, suponha que o aplicativo usa uma instância original do <xref:System.CharEnumerator> para iterar por meio de cada caractere em um <xref:System.String>. Quando for encontrado algum caractere exclusivo, seu aplicativo faz uma pausa de processamento e invoca o <xref:System.CharEnumerator.Clone%2A> método. Na verdade, isso economiza o <xref:System.CharEnumerator> índice do objeto no <xref:System.String>.  
  
 Seu aplicativo usa o clone para navegar para outra parte do `String` executar algum processamento auxiliar. O efeito colateral dessa navegação é que o clone perde o controle da posição em que o processamento é interrompido. No entanto, quando o processamento auxiliar for concluído, seu aplicativo descarta o clone e usa o original <xref:System.CharEnumerator> instância para continuar a trabalhar no <xref:System.String> onde parou o processamento original.  
  
> [!NOTE]
>  Esse método é implementado para dar suporte a <xref:System.ICloneable> interface.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public char Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Current { char get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : char" Usage="System.CharEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o caractere atualmente referenciado na cadeia de caracteres enumerada por este objeto <see cref="T:System.CharEnumerator" />.</summary>
        <value>O caractere Unicode atualmente referenciado por este <see cref="T:System.CharEnumerator" /> objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.CharEnumerator> classe mantém um índice de interno para a cadeia de caracteres enumerada e o <xref:System.CharEnumerator.Current%2A> propriedade retorna o caractere que está sendo referenciado pelo índice. Essa propriedade deve ser invocada somente quando o índice é válido. Caso contrário, uma exceção é lançada.  
  
 O índice sempre é inválido para uma cadeia de caracteres vazia (""). O índice também é inválido após o <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> ou <xref:System.CharEnumerator.Reset%2A> método é chamado. Depois de qualquer um desses métodos é chamado, chamar o <xref:System.CharEnumerator.MoveNext%2A> método para ajustar o índice para o primeiro caractere na cadeia de caracteres enumerada. O índice é válido sempre que o <xref:System.CharEnumerator.MoveNext%2A> retorno do método `true`.  
  
 <xref:System.CharEnumerator.Current%2A> não move o índice e chamadas consecutivas para <xref:System.CharEnumerator.Current%2A> retornam o mesmo caractere até <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, ou <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> é chamado.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.CharEnumerator> classe para enumerar os caracteres individuais em uma cadeia de caracteres. Ele cria uma instância de um <xref:System.CharEnumerator> objeto chamando o <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> método, move de um caractere para a próxima chamando o <xref:System.CharEnumerator.MoveNext%2A> método e exibe o caractere atual ao recuperar o valor do <xref:System.CharEnumerator.Current%2A> propriedade.  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 No entanto, observe que a mesma operação pode ser executada um pouco mais intuitivamente por meio `foreach` (em c#) ou `For Each` (no Visual Basic), como o exemplo a seguir mostra.  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">O índice é inválido; ou seja, ele está antes do primeiro ou após o último caractere da cadeia de caracteres enumerada.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="charEnumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera todos os recursos usados pela instância atual da classe <see cref="T:System.CharEnumerator" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chame <xref:System.CharEnumerator.Dispose%2A> quando tiver terminado de usar o <xref:System.CharEnumerator>. O <xref:System.CharEnumerator.Dispose%2A> método deixa o <xref:System.CharEnumerator> em um estado inutilizável. Depois de chamar <xref:System.CharEnumerator.Dispose%2A>, você deve liberar todas as referências para o <xref:System.CharEnumerator> para que o coletor de lixo possa recuperar a memória que o <xref:System.CharEnumerator> estava ocupando.  
  
 Para obter mais informações, consulte [limpeza de recursos não gerenciados](~/docs/standard/garbage-collection/unmanaged.md) e [implementando um método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Sempre chamar <xref:System.CharEnumerator.Dispose%2A> antes de liberar sua última referência para o <xref:System.CharEnumerator>. Caso contrário, os recursos que ele está usando não serão liberados até que o coletor de lixo chame o <xref:System.CharEnumerator> do objeto `Finalize` método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="charEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Incrementa o índice interno do objeto <see cref="T:System.CharEnumerator" /> atual para o próximo caractere da cadeia de caracteres enumerada.</summary>
        <returns>
          <see langword="true" /> se o índice é incrementado com êxito e dentro de uma cadeia de caracteres enumerada; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.CharEnumerator> classe mantém um índice de interno para a cadeia de caracteres enumerada e o <xref:System.CharEnumerator.MoveNext%2A> método incrementa o índice em um. Chame <xref:System.CharEnumerator.MoveNext%2A> depois de chamar <xref:System.String.GetEnumerator%2A> ou <xref:System.CharEnumerator.Reset%2A> para incrementar a posição do caractere atual para o primeiro caractere na cadeia de caracteres enumerada. Verifique se o valor retornado é `true` para determinar se a posição do caractere atual é válida.  
  
 Se o índice já está além do último caractere da cadeia de caracteres enumerada, o índice não é alterado e `false` é retornado.  
  
 Observe que, se a cadeia de caracteres enumerada está vazia (""), o estado do <xref:System.CharEnumerator> sempre é inválido. Isso ocorre porque o índice de interno para o <xref:System.CharEnumerator> é inicialmente antes do primeiro caractere da cadeia de caracteres enumerada e, portanto, é inválido. <xref:System.CharEnumerator.MoveNext%2A> logicamente, define o índice depois do último caractere da cadeia de caracteres enumerada que também é inválido (inexistente).  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.CharEnumerator> classe para enumerar os caracteres individuais em uma cadeia de caracteres. Ele cria uma instância de um <xref:System.CharEnumerator> objeto chamando o <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> método, move de um caractere para a próxima chamando o <xref:System.CharEnumerator.MoveNext%2A> método e exibe o caractere atual ao recuperar o valor do <xref:System.CharEnumerator.Current%2A> propriedade.  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 No entanto, observe que a mesma operação pode ser executada um pouco mais intuitivamente por meio `foreach` (em c#) ou `For Each` (no Visual Basic), como o exemplo a seguir mostra.  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="charEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicializa o índice para uma posição logicamente antes do primeiro caractere da cadeia de caracteres enumerada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.CharEnumerator> classe mantém um índice de interno para a cadeia de caracteres enumerada e o <xref:System.CharEnumerator.Reset%2A> método define o índice para o estado inválido.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o caractere atualmente referenciado na cadeia de caracteres enumerada por este objeto <see cref="T:System.CharEnumerator" />. Para obter uma descrição desse membro, consulte <see cref="P:System.Collections.IEnumerator.Current" />.</summary>
        <value>O caractere Unicode demarcado atualmente referenciado por este <see cref="T:System.CharEnumerator" /> objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este membro é uma implementação do membro de interface explícita. Ele só pode ser usado quando a instância de <xref:System.CharEnumerator> é convertida em uma interface de <xref:System.Collections.IEnumerator>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">A enumeração não começou.  
  
- ou - 
A enumeração terminou.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>