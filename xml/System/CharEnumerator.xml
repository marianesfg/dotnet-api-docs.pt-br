<Type Name="CharEnumerator" FullName="System.CharEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0570f4e2dd53178598e0e6fbf7b325d2cd252378" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728370" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CharEnumerator extends System.Object implements class System.Collections.Generic.IEnumerator`1&lt;char&gt;, class System.Collections.IEnumerator, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.CharEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CharEnumerator&#xA;Implements ICloneable, IEnumerator(Of Char)" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharEnumerator sealed : ICloneable, System::Collections::Generic::IEnumerator&lt;char&gt;" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="fb9af-101">Dá suporte à iteração em um objeto <see cref="T:System.String" /> e leitura de seus caracteres individuais.</span>
      <span class="sxs-lookup">
        <span data-stu-id="fb9af-101">Supports iterating over a <see cref="T:System.String" /> object and reading its individual characters.</span>
      </span>
      <span data-ttu-id="fb9af-102">Essa classe não pode ser herdada.</span>
      <span class="sxs-lookup">
        <span data-stu-id="fb9af-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb9af-103">Um <xref:System.CharEnumerator> fornece acesso somente leitura para os caracteres em uma referência <xref:System.String> objeto.</span><span class="sxs-lookup"><span data-stu-id="fb9af-103">A <xref:System.CharEnumerator> provides read-only access to the characters in a referenced <xref:System.String> object.</span></span> <span data-ttu-id="fb9af-104">Por exemplo, o `foreach` instrução as linguagens de programação do Microsoft Visual Basic e c#, que itera por meio dos elementos de uma coleção, recupera uma <xref:System.CharEnumerator> de um <xref:System.String> objeto para iterar os caracteres nesse objeto.</span><span class="sxs-lookup"><span data-stu-id="fb9af-104">For example, the `foreach` statement of the Microsoft Visual Basic and C# programming languages, which iterates through the elements of a collection, retrieves a <xref:System.CharEnumerator> from a <xref:System.String> object in order to iterate through the characters in that object.</span></span>  
  
 <span data-ttu-id="fb9af-105">Não há nenhum construtor público para <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="fb9af-105">There is no public constructor for <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="fb9af-106">Em vez disso, chame um <xref:System.String> do objeto <xref:System.String.GetEnumerator%2A> método para obter um <xref:System.CharEnumerator> que é inicializado para fazer referência a cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="fb9af-106">Instead, call a <xref:System.String> object's <xref:System.String.GetEnumerator%2A> method to obtain a <xref:System.CharEnumerator> that is initialized to reference the string.</span></span>  
  
 <span data-ttu-id="fb9af-107">Um <xref:System.CharEnumerator> mantém um índice interno para os caracteres na cadeia de caracteres de <xref:System.CharEnumerator> referências.</span><span class="sxs-lookup"><span data-stu-id="fb9af-107">A <xref:System.CharEnumerator> maintains an internal index to the characters in the string the <xref:System.CharEnumerator> references.</span></span> <span data-ttu-id="fb9af-108">O estado do índice é válidos e inválidos quando ela faz referência a uma posição de caractere logicamente antes do primeiro caractere ou depois do último caractere na cadeia de caracteres quando ela faz referência a um caractere na cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="fb9af-108">The state of the index is invalid when it references a character position logically before the first character or after the last character in the string, and valid when it references a character within the string.</span></span> <span data-ttu-id="fb9af-109">O índice é inicializado para uma posição logicamente antes do primeiro caractere e é definido para uma posição após o último caractere quando a iteração é concluída.</span><span class="sxs-lookup"><span data-stu-id="fb9af-109">The index is initialized to a position logically before the first character, and is set to a position after the last character when the iteration is complete.</span></span> <span data-ttu-id="fb9af-110">Uma exceção é gerada se você tentar acessar um caractere enquanto o índice é inválido.</span><span class="sxs-lookup"><span data-stu-id="fb9af-110">An exception is thrown if you attempt to access a character while the index is invalid.</span></span>  
  
 <span data-ttu-id="fb9af-111">O <xref:System.CharEnumerator.MoveNext%2A> método incrementa o índice em um, para o primeiro e subsequente caracteres é acessado por sua vez.</span><span class="sxs-lookup"><span data-stu-id="fb9af-111">The <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one, so the first and subsequent characters are accessed in turn.</span></span> <span data-ttu-id="fb9af-112">O <xref:System.CharEnumerator.Reset%2A> método define o índice para uma posição logicamente antes do primeiro caractere.</span><span class="sxs-lookup"><span data-stu-id="fb9af-112">The <xref:System.CharEnumerator.Reset%2A> method sets the index to a position logically before the first character.</span></span> <span data-ttu-id="fb9af-113">O <xref:System.CharEnumerator.Current%2A> propriedade recupera o caractere atualmente referenciado por índice.</span><span class="sxs-lookup"><span data-stu-id="fb9af-113">The <xref:System.CharEnumerator.Current%2A> property retrieves the character currently referenced by index.</span></span> <span data-ttu-id="fb9af-114">O <xref:System.CharEnumerator.Clone%2A> método cria uma cópia do <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="fb9af-114">The <xref:System.CharEnumerator.Clone%2A> method creates a copy of the <xref:System.CharEnumerator>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fb9af-115">Várias instâncias independentes do <xref:System.CharEnumerator> em um ou mais threads pode ter acesso a uma única instância de <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="fb9af-115">Several independent instances of <xref:System.CharEnumerator> across one or more threads can have access to a single instance of <xref:System.String>.</span></span> <span data-ttu-id="fb9af-116">Essa classe é implementada para dar suporte a <xref:System.Collections.IEnumerator> interface.</span><span class="sxs-lookup"><span data-stu-id="fb9af-116">This class is implemented to support the <xref:System.Collections.IEnumerator> interface.</span></span> <span data-ttu-id="fb9af-117">Para obter mais informações sobre o uso de um enumerador, consulte o <xref:System.Collections.IEnumerator> tópico.</span><span class="sxs-lookup"><span data-stu-id="fb9af-117">For more information regarding the use of an enumerator, see the <xref:System.Collections.IEnumerator> topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb9af-118">O exemplo a seguir usa a <xref:System.CharEnumerator> classe para enumerar os caracteres individuais em uma cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="fb9af-118">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="fb9af-119">Ele cria um <xref:System.CharEnumerator> objeto chamando o <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> método, move de um caractere para a próxima chamando o <xref:System.CharEnumerator.MoveNext%2A> método e exibe o caractere atual por recuperar o valor da <xref:System.CharEnumerator.Current%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="fb9af-119">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="fb9af-120">No entanto, observe que a mesma operação pode ser executada de maneira um pouco mais intuitiva usando `foreach` (em c#) ou `For Each` (no Visual Basic), como o exemplo a seguir mostra.</span><span class="sxs-lookup"><span data-stu-id="fb9af-120">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.ICollection" />
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fb9af-121">Cria uma cópia do objeto <see cref="T:System.CharEnumerator" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb9af-121">Creates a copy of the current <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fb9af-122">Um <see cref="T:System.Object" /> que é uma cópia do objeto <see cref="T:System.CharEnumerator" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb9af-122">An <see cref="T:System.Object" /> that is a copy of the current <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb9af-123">O valor de retorno é uma cópia desta instância do <xref:System.CharEnumerator> e seu estado atual.</span><span class="sxs-lookup"><span data-stu-id="fb9af-123">The return value is a copy of this instance of <xref:System.CharEnumerator> and its current state.</span></span> <span data-ttu-id="fb9af-124">Isso é útil para salvar seu estado durante a iteração por meio de um <xref:System.String> objeto.</span><span class="sxs-lookup"><span data-stu-id="fb9af-124">This is useful for saving your state while iterating through a <xref:System.String> object.</span></span>  
  
 <span data-ttu-id="fb9af-125">Por exemplo, suponha que o aplicativo usa uma instância original do <xref:System.CharEnumerator> para iterar por meio de cada caractere em um <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="fb9af-125">For example, suppose your application uses an original instance of <xref:System.CharEnumerator> to iterate through each character in a <xref:System.String>.</span></span> <span data-ttu-id="fb9af-126">Quando for encontrado algum caractere exclusivo, seu aplicativo faz uma pausa de processamento e invoca o <xref:System.CharEnumerator.Clone%2A> método.</span><span class="sxs-lookup"><span data-stu-id="fb9af-126">When some unique character is encountered, your application pauses processing and invokes the <xref:System.CharEnumerator.Clone%2A> method.</span></span> <span data-ttu-id="fb9af-127">Na verdade, isso salva a <xref:System.CharEnumerator> índice do objeto no <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="fb9af-127">In effect, this saves the <xref:System.CharEnumerator> object's index in the <xref:System.String>.</span></span>  
  
 <span data-ttu-id="fb9af-128">Seu aplicativo usa o clone para navegar para outra parte do `String` executar algum processamento auxiliar.</span><span class="sxs-lookup"><span data-stu-id="fb9af-128">Your application uses the clone to navigate to another part of the `String` to perform some auxiliary processing.</span></span> <span data-ttu-id="fb9af-129">O efeito colateral dessa navegação é que o clone perde o controle da posição em que o processamento é interrompido.</span><span class="sxs-lookup"><span data-stu-id="fb9af-129">The side-effect of this navigation is the clone loses track of the position where processing stopped.</span></span> <span data-ttu-id="fb9af-130">No entanto, quando o processamento auxiliar estiver concluído, seu aplicativo descarta o clone e usa o original <xref:System.CharEnumerator> instância para continuar a trabalhar no <xref:System.String> onde o processamento original é interrompida.</span><span class="sxs-lookup"><span data-stu-id="fb9af-130">However, when the auxiliary processing is complete, your application discards the clone and uses the original <xref:System.CharEnumerator> instance to resume working on the <xref:System.String> where the original processing stopped.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fb9af-131">Esse método é implementado para dar suporte a <xref:System.ICloneable> interface.</span><span class="sxs-lookup"><span data-stu-id="fb9af-131">This method is implemented to support the <xref:System.ICloneable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public char Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Current { char get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fb9af-132">Obtém o caractere atualmente referenciado na cadeia de caracteres enumerada por este objeto <see cref="T:System.CharEnumerator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb9af-132">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fb9af-133">O caractere Unicode atualmente referenciado por este <see cref="T:System.CharEnumerator" /> objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb9af-133">The Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb9af-134">O <xref:System.CharEnumerator> classe mantém um índice interno para a cadeia de caracteres enumerada e o <xref:System.CharEnumerator.Current%2A> propriedade retorna o caractere que está sendo referenciado por índice.</span><span class="sxs-lookup"><span data-stu-id="fb9af-134">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Current%2A> property returns the character that is currently referenced by the index.</span></span> <span data-ttu-id="fb9af-135">Essa propriedade deve ser invocada somente quando o índice é válido. Caso contrário, uma exceção será lançada.</span><span class="sxs-lookup"><span data-stu-id="fb9af-135">This property should be invoked only when the index is valid; otherwise, an exception is thrown.</span></span>  
  
 <span data-ttu-id="fb9af-136">O índice sempre é inválido para uma cadeia de caracteres vazia ("").</span><span class="sxs-lookup"><span data-stu-id="fb9af-136">The index is always invalid for an empty string ("").</span></span> <span data-ttu-id="fb9af-137">O índice também é inválido após o <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> ou <xref:System.CharEnumerator.Reset%2A> método é chamado.</span><span class="sxs-lookup"><span data-stu-id="fb9af-137">The index is also invalid after the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> or <xref:System.CharEnumerator.Reset%2A> method is called.</span></span> <span data-ttu-id="fb9af-138">Depois de qualquer um desses métodos é chamado, chamar o <xref:System.CharEnumerator.MoveNext%2A> método para ajustar o índice para o primeiro caractere na cadeia de caracteres enumerada.</span><span class="sxs-lookup"><span data-stu-id="fb9af-138">After either of these methods is called, invoke the <xref:System.CharEnumerator.MoveNext%2A> method to adjust the index to the first character in the enumerated string.</span></span> <span data-ttu-id="fb9af-139">O índice é válido quando o <xref:System.CharEnumerator.MoveNext%2A> método retornará `true`.</span><span class="sxs-lookup"><span data-stu-id="fb9af-139">The index is valid whenever the <xref:System.CharEnumerator.MoveNext%2A> method returns `true`.</span></span>  
  
 <span data-ttu-id="fb9af-140"><xref:System.CharEnumerator.Current%2A> Não mover o índice e chamadas consecutivas para <xref:System.CharEnumerator.Current%2A> retornam o mesmo caractere até <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, ou <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> é chamado.</span><span class="sxs-lookup"><span data-stu-id="fb9af-140"><xref:System.CharEnumerator.Current%2A> does not move the index, and consecutive calls to <xref:System.CharEnumerator.Current%2A> return the same character until <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, or <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb9af-141">O exemplo a seguir usa a <xref:System.CharEnumerator> classe para enumerar os caracteres individuais em uma cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="fb9af-141">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="fb9af-142">Ele cria um <xref:System.CharEnumerator> objeto chamando o <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> método, move de um caractere para a próxima chamando o <xref:System.CharEnumerator.MoveNext%2A> método e exibe o caractere atual por recuperar o valor da <xref:System.CharEnumerator.Current%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="fb9af-142">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="fb9af-143">No entanto, observe que a mesma operação pode ser executada de maneira um pouco mais intuitiva usando `foreach` (em c#) ou `For Each` (no Visual Basic), como o exemplo a seguir mostra.</span><span class="sxs-lookup"><span data-stu-id="fb9af-143">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fb9af-144">O índice é inválido; ou seja, ele está antes do primeiro ou após o último caractere da cadeia de caracteres enumerada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb9af-144">The index is invalid; that is, it is before the first or after the last character of the enumerated string.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fb9af-145">Libera todos os recursos usados pela instância atual da classe <see cref="T:System.CharEnumerator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb9af-145">Releases all resources used by the current instance of the <see cref="T:System.CharEnumerator" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb9af-146">Chamar <xref:System.CharEnumerator.Dispose%2A> quando tiver terminado de usar o <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="fb9af-146">Call <xref:System.CharEnumerator.Dispose%2A> when you are finished using the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="fb9af-147">O <xref:System.CharEnumerator.Dispose%2A> método deixa o <xref:System.CharEnumerator> em um estado inutilizável.</span><span class="sxs-lookup"><span data-stu-id="fb9af-147">The <xref:System.CharEnumerator.Dispose%2A> method leaves the <xref:System.CharEnumerator> in an unusable state.</span></span> <span data-ttu-id="fb9af-148">Depois de chamar <xref:System.CharEnumerator.Dispose%2A>, você deve liberar todas as referências para o <xref:System.CharEnumerator> para o coletor de lixo possa recuperar a memória que o <xref:System.CharEnumerator> estava ocupando.</span><span class="sxs-lookup"><span data-stu-id="fb9af-148">After calling <xref:System.CharEnumerator.Dispose%2A>, you must release all references to the <xref:System.CharEnumerator> so the garbage collector can reclaim the memory that the <xref:System.CharEnumerator> was occupying.</span></span>  
  
 <span data-ttu-id="fb9af-149">Para obter mais informações, consulte [limpeza de recursos não gerenciados](~/docs/standard/garbage-collection/unmanaged.md) e [implementar um método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="fb9af-149">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fb9af-150">Sempre chamar <xref:System.CharEnumerator.Dispose%2A> antes de liberar sua última referência para o <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="fb9af-150">Always call <xref:System.CharEnumerator.Dispose%2A> before you release your last reference to the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="fb9af-151">Caso contrário, os recursos que está usando não serão liberados até que o coletor de lixo chame o <xref:System.CharEnumerator> do objeto `Finalize` método.</span><span class="sxs-lookup"><span data-stu-id="fb9af-151">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.CharEnumerator> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fb9af-152">Incrementa o índice interno do objeto <see cref="T:System.CharEnumerator" /> atual para o próximo caractere da cadeia de caracteres enumerada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb9af-152">Increments the internal index of the current <see cref="T:System.CharEnumerator" /> object to the next character of the enumerated string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fb9af-153">
            <see langword="true" /> se o índice é incrementado com êxito e dentro de uma cadeia de caracteres enumerada; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb9af-153">
              <see langword="true" /> if the index is successfully incremented and within the enumerated string; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb9af-154">O <xref:System.CharEnumerator> classe mantém um índice interno para a cadeia de caracteres enumerada e o <xref:System.CharEnumerator.MoveNext%2A> método incrementa o índice em um.</span><span class="sxs-lookup"><span data-stu-id="fb9af-154">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one.</span></span> <span data-ttu-id="fb9af-155">Chamar <xref:System.CharEnumerator.MoveNext%2A> depois de chamar <xref:System.String.GetEnumerator%2A> ou <xref:System.CharEnumerator.Reset%2A> para incrementar a atual posição do caractere para o primeiro caractere na cadeia de caracteres enumerada.</span><span class="sxs-lookup"><span data-stu-id="fb9af-155">Call <xref:System.CharEnumerator.MoveNext%2A> after calling <xref:System.String.GetEnumerator%2A> or <xref:System.CharEnumerator.Reset%2A> to increment the current character position to the first character in the enumerated string.</span></span> <span data-ttu-id="fb9af-156">Verifique se o valor de retorno é `true` para determinar se a atual posição do caractere é válida.</span><span class="sxs-lookup"><span data-stu-id="fb9af-156">Check that the return value is `true` to determine that the current character position is valid.</span></span>  
  
 <span data-ttu-id="fb9af-157">Se o índice já está além do último caractere da cadeia de caracteres enumerada, o índice não será alterado e `false` é retornado.</span><span class="sxs-lookup"><span data-stu-id="fb9af-157">If the index is already beyond the last character of the enumerated string, the index is not changed and `false` is returned.</span></span>  
  
 <span data-ttu-id="fb9af-158">Observe que, se a cadeia de caracteres enumerada está vazia (""), o estado do <xref:System.CharEnumerator> sempre é inválido.</span><span class="sxs-lookup"><span data-stu-id="fb9af-158">Notice that if the enumerated string is empty (""), the state of the <xref:System.CharEnumerator> is always invalid.</span></span> <span data-ttu-id="fb9af-159">Isso ocorre porque o índice interno para o <xref:System.CharEnumerator> é inicialmente antes do primeiro caractere da cadeia de caracteres enumerada e, portanto, é inválido.</span><span class="sxs-lookup"><span data-stu-id="fb9af-159">This is because the internal index for the <xref:System.CharEnumerator> is initially before the first character of the enumerated string and is therefore invalid.</span></span> <span data-ttu-id="fb9af-160"><xref:System.CharEnumerator.MoveNext%2A> logicamente, define o índice após o último caractere (que não existe) da cadeia de caracteres enumerada que também é inválido.</span><span class="sxs-lookup"><span data-stu-id="fb9af-160"><xref:System.CharEnumerator.MoveNext%2A> logically sets the index after the last (nonexistent) character of the enumerated string which is also invalid.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb9af-161">O exemplo a seguir usa a <xref:System.CharEnumerator> classe para enumerar os caracteres individuais em uma cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="fb9af-161">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="fb9af-162">Ele cria um <xref:System.CharEnumerator> objeto chamando o <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> método, move de um caractere para a próxima chamando o <xref:System.CharEnumerator.MoveNext%2A> método e exibe o caractere atual por recuperar o valor da <xref:System.CharEnumerator.Current%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="fb9af-162">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="fb9af-163">No entanto, observe que a mesma operação pode ser executada de maneira um pouco mais intuitiva usando `foreach` (em c#) ou `For Each` (no Visual Basic), como o exemplo a seguir mostra.</span><span class="sxs-lookup"><span data-stu-id="fb9af-163">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fb9af-164">Inicializa o índice para uma posição logicamente antes do primeiro caractere da cadeia de caracteres enumerada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb9af-164">Initializes the index to a position logically before the first character of the enumerated string.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb9af-165">O <xref:System.CharEnumerator> classe mantém um índice interno para a cadeia de caracteres enumerada e o <xref:System.CharEnumerator.Reset%2A> método define o índice para o estado inválido.</span><span class="sxs-lookup"><span data-stu-id="fb9af-165">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Reset%2A> method sets the index to the invalid state.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fb9af-166">Obtém o caractere atualmente referenciado na cadeia de caracteres enumerada por este objeto <see cref="T:System.CharEnumerator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb9af-166">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
          <span data-ttu-id="fb9af-167">Para obter uma descrição desse membro, consulte <see cref="P:System.Collections.IEnumerator.Current" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb9af-167">For a description of this member, see <see cref="P:System.Collections.IEnumerator.Current" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fb9af-168">O caractere Unicode demarcado atualmente referenciado por este <see cref="T:System.CharEnumerator" /> objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb9af-168">The boxed Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb9af-169">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="fb9af-169">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="fb9af-170">Ele só pode ser usado quando a instância de <xref:System.CharEnumerator> é convertida em uma interface de <xref:System.Collections.IEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="fb9af-170">It can be used only when the <xref:System.CharEnumerator> instance is cast to an <xref:System.Collections.IEnumerator> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fb9af-171">A enumeração não começou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb9af-171">Enumeration has not started.</span>
          </span>
          <span data-ttu-id="fb9af-172">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb9af-172">-or-</span>
          </span>
          <span data-ttu-id="fb9af-173">A enumeração terminou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb9af-173">Enumeration has ended.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>