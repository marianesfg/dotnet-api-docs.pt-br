<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CharEnumerator.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac50570f4e2dd53178598e0e6fbf7b325d2cd252378.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0570f4e2dd53178598e0e6fbf7b325d2cd252378</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.CharEnumerator">
          <source>Supports iterating over a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object and reading its individual characters.</source>
          <target state="translated">Dá suporte à iteração em um objeto <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> e leitura de seus caracteres individuais.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.CharEnumerator">
          <source>This class cannot be inherited.</source>
          <target state="translated">Essa classe não pode ser herdada.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>A <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> provides read-only access to the characters in a referenced <ph id="ph2">&lt;xref:System.String&gt;</ph> object.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> fornece acesso somente leitura para os caracteres em uma referência <ph id="ph2">&lt;xref:System.String&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>For example, the <ph id="ph1">`foreach`</ph> statement of the Microsoft Visual Basic and C# programming languages, which iterates through the elements of a collection, retrieves a <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> from a <ph id="ph3">&lt;xref:System.String&gt;</ph> object in order to iterate through the characters in that object.</source>
          <target state="translated">Por exemplo, o <ph id="ph1">`foreach`</ph> instrução as linguagens de programação do Microsoft Visual Basic e c#, que itera por meio dos elementos de uma coleção, recupera uma <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> de um <ph id="ph3">&lt;xref:System.String&gt;</ph> objeto para iterar os caracteres nesse objeto.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>There is no public constructor for <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph>.</source>
          <target state="translated">Não há nenhum construtor público para <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>Instead, call a <ph id="ph1">&lt;xref:System.String&gt;</ph> object's <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A&gt;</ph> method to obtain a <ph id="ph3">&lt;xref:System.CharEnumerator&gt;</ph> that is initialized to reference the string.</source>
          <target state="translated">Em vez disso, chame um <ph id="ph1">&lt;xref:System.String&gt;</ph> do objeto <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A&gt;</ph> método para obter um <ph id="ph3">&lt;xref:System.CharEnumerator&gt;</ph> que é inicializado para fazer referência a cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>A <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> maintains an internal index to the characters in the string the <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> references.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> mantém um índice interno para os caracteres na cadeia de caracteres de <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> referências.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>The state of the index is invalid when it references a character position logically before the first character or after the last character in the string, and valid when it references a character within the string.</source>
          <target state="translated">O estado do índice é válidos e inválidos quando ela faz referência a uma posição de caractere logicamente antes do primeiro caractere ou depois do último caractere na cadeia de caracteres quando ela faz referência a um caractere na cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>The index is initialized to a position logically before the first character, and is set to a position after the last character when the iteration is complete.</source>
          <target state="translated">O índice é inicializado para uma posição logicamente antes do primeiro caractere e é definido para uma posição após o último caractere quando a iteração é concluída.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>An exception is thrown if you attempt to access a character while the index is invalid.</source>
          <target state="translated">Uma exceção é gerada se você tentar acessar um caractere enquanto o índice é inválido.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> method increments the index by one, so the first and subsequent characters are accessed in turn.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> método incrementa o índice em um, para o primeiro e subsequente caracteres é acessado por sua vez.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> method sets the index to a position logically before the first character.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> método define o índice para uma posição logicamente antes do primeiro caractere.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> property retrieves the character currently referenced by index.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> propriedade recupera o caractere atualmente referenciado por índice.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator.Clone%2A&gt;</ph> method creates a copy of the <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.CharEnumerator.Clone%2A&gt;</ph> método cria uma cópia do <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>Several independent instances of <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> across one or more threads can have access to a single instance of <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Várias instâncias independentes do <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> em um ou mais threads pode ter acesso a uma única instância de <ph id="ph2">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>This class is implemented to support the <ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> interface.</source>
          <target state="translated">Essa classe é implementada para dar suporte a <ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>For more information regarding the use of an enumerator, see the <ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> topic.</source>
          <target state="translated">Para obter mais informações sobre o uso de um enumerador, consulte o <ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> tópico.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> class to enumerate the individual characters in a string.</source>
          <target state="translated">O exemplo a seguir usa a <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> classe para enumerar os caracteres individuais em uma cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>It instantiates a <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> object by calling the <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method, moves from one character to the next by calling the <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> method, and displays the current character by retrieving the value of the <ph id="ph4">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> property.</source>
          <target state="translated">Ele cria um <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> objeto chamando o <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> método, move de um caractere para a próxima chamando o <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> método e exibe o caractere atual por recuperar o valor da <ph id="ph4">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>Note, however, that the same operation can be performed somewhat more intuitively by using <ph id="ph1">`foreach`</ph> (in C#) or <ph id="ph2">`For Each`</ph> (in Visual Basic), as the following example shows.</source>
          <target state="translated">No entanto, observe que a mesma operação pode ser executada de maneira um pouco mais intuitiva usando <ph id="ph1">`foreach`</ph> (em c#) ou <ph id="ph2">`For Each`</ph> (no Visual Basic), como o exemplo a seguir mostra.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.CharEnumerator.Clone">
          <source>Creates a copy of the current <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> object.</source>
          <target state="translated">Cria uma cópia do objeto <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.CharEnumerator.Clone">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that is a copy of the current <ph id="ph2">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> object.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que é uma cópia do objeto <ph id="ph2">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>The return value is a copy of this instance of <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> and its current state.</source>
          <target state="translated">O valor de retorno é uma cópia desta instância do <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> e seu estado atual.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>This is useful for saving your state while iterating through a <ph id="ph1">&lt;xref:System.String&gt;</ph> object.</source>
          <target state="translated">Isso é útil para salvar seu estado durante a iteração por meio de um <ph id="ph1">&lt;xref:System.String&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>For example, suppose your application uses an original instance of <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> to iterate through each character in a <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Por exemplo, suponha que o aplicativo usa uma instância original do <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> para iterar por meio de cada caractere em um <ph id="ph2">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>When some unique character is encountered, your application pauses processing and invokes the <ph id="ph1">&lt;xref:System.CharEnumerator.Clone%2A&gt;</ph> method.</source>
          <target state="translated">Quando for encontrado algum caractere exclusivo, seu aplicativo faz uma pausa de processamento e invoca o <ph id="ph1">&lt;xref:System.CharEnumerator.Clone%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>In effect, this saves the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> object's index in the <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Na verdade, isso salva a <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> índice do objeto no <ph id="ph2">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>Your application uses the clone to navigate to another part of the <ph id="ph1">`String`</ph> to perform some auxiliary processing.</source>
          <target state="translated">Seu aplicativo usa o clone para navegar para outra parte do <ph id="ph1">`String`</ph> executar algum processamento auxiliar.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>The side-effect of this navigation is the clone loses track of the position where processing stopped.</source>
          <target state="translated">O efeito colateral dessa navegação é que o clone perde o controle da posição em que o processamento é interrompido.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>However, when the auxiliary processing is complete, your application discards the clone and uses the original <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> instance to resume working on the <ph id="ph2">&lt;xref:System.String&gt;</ph> where the original processing stopped.</source>
          <target state="translated">No entanto, quando o processamento auxiliar estiver concluído, seu aplicativo descarta o clone e usa o original <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> instância para continuar a trabalhar no <ph id="ph2">&lt;xref:System.String&gt;</ph> onde o processamento original é interrompida.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>This method is implemented to support the <ph id="ph1">&lt;xref:System.ICloneable&gt;</ph> interface.</source>
          <target state="translated">Esse método é implementado para dar suporte a <ph id="ph1">&lt;xref:System.ICloneable&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.CharEnumerator.Current">
          <source>Gets the currently referenced character in the string enumerated by this <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> object.</source>
          <target state="translated">Obtém o caractere atualmente referenciado na cadeia de caracteres enumerada por este objeto <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>The Unicode character currently referenced by this <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> object.</source>
          <target state="translated">O caractere Unicode atualmente referenciado por este <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> class maintains an internal index to the enumerated string, and the <ph id="ph2">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> property returns the character that is currently referenced by the index.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> classe mantém um índice interno para a cadeia de caracteres enumerada e o <ph id="ph2">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> propriedade retorna o caractere que está sendo referenciado por índice.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>This property should be invoked only when the index is valid; otherwise, an exception is thrown.</source>
          <target state="translated">Essa propriedade deve ser invocada somente quando o índice é válido. Caso contrário, uma exceção será lançada.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>The index is always invalid for an empty string ("").</source>
          <target state="translated">O índice sempre é inválido para uma cadeia de caracteres vazia ("").</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>The index is also invalid after the <ph id="ph1">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> method is called.</source>
          <target state="translated">O índice também é inválido após o <ph id="ph1">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> ou <ph id="ph2">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> método é chamado.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>After either of these methods is called, invoke the <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> method to adjust the index to the first character in the enumerated string.</source>
          <target state="translated">Depois de qualquer um desses métodos é chamado, chamar o <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> método para ajustar o índice para o primeiro caractere na cadeia de caracteres enumerada.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>The index is valid whenever the <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> method returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">O índice é válido quando o <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> método retornará <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source><ph id="ph1">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> does not move the index, and consecutive calls to <ph id="ph2">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> return the same character until <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> Não mover o índice e chamadas consecutivas para <ph id="ph2">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> retornam o mesmo caractere até <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph>, ou <ph id="ph5">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> é chamado.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> class to enumerate the individual characters in a string.</source>
          <target state="translated">O exemplo a seguir usa a <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> classe para enumerar os caracteres individuais em uma cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>It instantiates a <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> object by calling the <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method, moves from one character to the next by calling the <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> method, and displays the current character by retrieving the value of the <ph id="ph4">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> property.</source>
          <target state="translated">Ele cria um <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> objeto chamando o <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> método, move de um caractere para a próxima chamando o <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> método e exibe o caractere atual por recuperar o valor da <ph id="ph4">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>Note, however, that the same operation can be performed somewhat more intuitively by using <ph id="ph1">`foreach`</ph> (in C#) or <ph id="ph2">`For Each`</ph> (in Visual Basic), as the following example shows.</source>
          <target state="translated">No entanto, observe que a mesma operação pode ser executada de maneira um pouco mais intuitiva usando <ph id="ph1">`foreach`</ph> (em c#) ou <ph id="ph2">`For Each`</ph> (no Visual Basic), como o exemplo a seguir mostra.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.CharEnumerator.Current">
          <source>The index is invalid; that is, it is before the first or after the last character of the enumerated string.</source>
          <target state="translated">O índice é inválido; ou seja, ele está antes do primeiro ou após o último caractere da cadeia de caracteres enumerada.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.CharEnumerator.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> class.</source>
          <target state="translated">Libera todos os recursos usados pela instância atual da classe <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Dispose">
          <source>Call <ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph> when you are finished using the <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph>.</source>
          <target state="translated">Chamar <ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph> quando tiver terminado de usar o <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Dispose">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph> method leaves the <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> in an unusable state.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph> método deixa o <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> em um estado inutilizável.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Dispose">
          <source>After calling <ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.CharEnumerator&gt;</ph> was occupying.</source>
          <target state="translated">Depois de chamar <ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph>, você deve liberar todas as referências para o <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> para o coletor de lixo possa recuperar a memória que o <ph id="ph3">&lt;xref:System.CharEnumerator&gt;</ph> estava ocupando.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>limpeza de recursos não gerenciados<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> e <bpt id="p2">[</bpt>implementar um método Dispose<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Dispose">
          <source>Always call <ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph>.</source>
          <target state="translated">Sempre chamar <ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph> antes de liberar sua última referência para o <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">Caso contrário, os recursos que está usando não serão liberados até que o coletor de lixo chame o <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> do objeto <ph id="ph2">`Finalize`</ph> método.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.CharEnumerator.MoveNext">
          <source>Increments the internal index of the current <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> object to the next character of the enumerated string.</source>
          <target state="translated">Incrementa o índice interno do objeto <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> atual para o próximo caractere da cadeia de caracteres enumerada.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.CharEnumerator.MoveNext">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the index is successfully incremented and within the enumerated string; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o índice é incrementado com êxito e dentro de uma cadeia de caracteres enumerada; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> class maintains an internal index to the enumerated string, and the <ph id="ph2">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> method increments the index by one.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> classe mantém um índice interno para a cadeia de caracteres enumerada e o <ph id="ph2">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> método incrementa o índice em um.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>Call <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> after calling <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> to increment the current character position to the first character in the enumerated string.</source>
          <target state="translated">Chamar <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> depois de chamar <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A&gt;</ph> ou <ph id="ph3">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> para incrementar a atual posição do caractere para o primeiro caractere na cadeia de caracteres enumerada.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>Check that the return value is <ph id="ph1">`true`</ph> to determine that the current character position is valid.</source>
          <target state="translated">Verifique se o valor de retorno é <ph id="ph1">`true`</ph> para determinar se a atual posição do caractere é válida.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>If the index is already beyond the last character of the enumerated string, the index is not changed and <ph id="ph1">`false`</ph> is returned.</source>
          <target state="translated">Se o índice já está além do último caractere da cadeia de caracteres enumerada, o índice não será alterado e <ph id="ph1">`false`</ph> é retornado.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>Notice that if the enumerated string is empty (""), the state of the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> is always invalid.</source>
          <target state="translated">Observe que, se a cadeia de caracteres enumerada está vazia (""), o estado do <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> sempre é inválido.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>This is because the internal index for the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> is initially before the first character of the enumerated string and is therefore invalid.</source>
          <target state="translated">Isso ocorre porque o índice interno para o <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> é inicialmente antes do primeiro caractere da cadeia de caracteres enumerada e, portanto, é inválido.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source><ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> logically sets the index after the last (nonexistent) character of the enumerated string which is also invalid.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> logicamente, define o índice após o último caractere (que não existe) da cadeia de caracteres enumerada que também é inválido.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> class to enumerate the individual characters in a string.</source>
          <target state="translated">O exemplo a seguir usa a <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> classe para enumerar os caracteres individuais em uma cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>It instantiates a <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> object by calling the <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method, moves from one character to the next by calling the <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> method, and displays the current character by retrieving the value of the <ph id="ph4">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> property.</source>
          <target state="translated">Ele cria um <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> objeto chamando o <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> método, move de um caractere para a próxima chamando o <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> método e exibe o caractere atual por recuperar o valor da <ph id="ph4">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>Note, however, that the same operation can be performed somewhat more intuitively by using <ph id="ph1">`foreach`</ph> (in C#) or <ph id="ph2">`For Each`</ph> (in Visual Basic), as the following example shows.</source>
          <target state="translated">No entanto, observe que a mesma operação pode ser executada de maneira um pouco mais intuitiva usando <ph id="ph1">`foreach`</ph> (em c#) ou <ph id="ph2">`For Each`</ph> (no Visual Basic), como o exemplo a seguir mostra.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.CharEnumerator.Reset">
          <source>Initializes the index to a position logically before the first character of the enumerated string.</source>
          <target state="translated">Inicializa o índice para uma posição logicamente antes do primeiro caractere da cadeia de caracteres enumerada.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Reset">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> class maintains an internal index to the enumerated string, and the <ph id="ph2">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> method sets the index to the invalid state.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> classe mantém um índice interno para a cadeia de caracteres enumerada e o <ph id="ph2">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> método define o índice para o estado inválido.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>Gets the currently referenced character in the string enumerated by this <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> object.</source>
          <target state="translated">Obtém o caractere atualmente referenciado na cadeia de caracteres enumerada por este objeto <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="P:System.Collections.IEnumerator.Current" /&gt;</ph>.</source>
          <target state="translated">Para obter uma descrição desse membro, consulte <ph id="ph1">&lt;see cref="P:System.Collections.IEnumerator.Current" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>The boxed Unicode character currently referenced by this <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> object.</source>
          <target state="translated">O caractere Unicode demarcado atualmente referenciado por este <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Este membro é uma implementação do membro de interface explícita.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> interface.</source>
          <target state="translated">Ele só pode ser usado quando a instância de <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> é convertida em uma interface de <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>Enumeration has not started.</source>
          <target state="translated">A enumeração não começou.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>Enumeration has ended.</source>
          <target state="translated">A enumeração terminou.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>