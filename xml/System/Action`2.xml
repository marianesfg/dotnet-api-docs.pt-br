<Type Name="Action&lt;T1,T2&gt;" FullName="System.Action&lt;T1,T2&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1607901baafefa7a0e12a85ea5a5e94ae01c2651" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37481446" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void Action&lt;in T1,in T2&gt;(T1 arg1, T2 arg2);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`2&lt;- T1, - T2&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T1, In T2)(arg1 As T1, arg2 As T2)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2&gt;&#xA;public delegate void Action(T1 arg1, T2 arg2);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T1, 'T2&gt; = delegate of 'T1 * 'T2 -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">O tipo do primeiro parâmetro do método encapsulado por esse delegado.</typeparam>
    <typeparam name="T2">O tipo do segundo parâmetro do método encapsulado por esse delegado.</typeparam>
    <param name="arg1">O primeiro parâmetro do método encapsulado por esse delegado.</param>
    <param name="arg2">O segundo parâmetro do método encapsulado por esse delegado.</param>
    <summary>Encapsula um método que tem dois parâmetros e não retorna um valor.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode usar o <xref:System.Action%602> delegado para passar um método como um parâmetro sem declarar explicitamente um delegado personalizado. O método encapsulado deve corresponder à assinatura do método que é definida por esse delegado. Isso significa que o método encapsulado deve ter dois parâmetros que são ambos passados a ele por valor, e ele não deve retornar um valor. (No c#, o método deve retornar `void`. No Visual Basic, ele deve ser definido pelo `Sub`...`End Sub` Construa. Ele também pode ser um método que retorna um valor que será ignorado.) Normalmente, esse tipo de método é usado para executar uma operação.  
  
> [!NOTE]
>  Para fazer referência a um método que tem dois parâmetros e retorna um valor, use o genérico <xref:System.Func%603> delegado em vez disso.  
  
 Quando você usa o <xref:System.Action%602> delegado, você não precisa definir explicitamente um delegado que encapsula um método com dois parâmetros. Por exemplo, o código a seguir declara explicitamente um delegado chamado `ConcatStrings`. Ele atribui uma referência a qualquer um dos dois métodos para sua instância do delegado. Um método grava duas cadeias de caracteres no console; o segundo grava duas cadeias de caracteres em um arquivo.  
  
 [!code-csharp[System.Action~2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~2/cs/Delegate.cs#1)]
 [!code-vb[System.Action~2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~2/vb/Delegate.vb#1)]  
  
 O exemplo a seguir simplifica esse código pela instanciação de <xref:System.Action%602> delegado em vez de explicitamente definindo um novo delegado e atribuí-lo um método nomeado.  
  
 [!code-csharp[System.Action~2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~2/cs/Action2.cs#2)]
 [!code-vb[System.Action~2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~2/vb/action2.vb#2)]  
  
 Você também pode usar o <xref:System.Action%602> delegar com métodos anônimos no c#, como mostra o exemplo a seguir. (Para obter uma introdução aos métodos anônimos, consulte [métodos anônimos](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Action~2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~2/cs/Anon.cs#3)]  
  
 Você também pode atribuir uma expressão lambda para uma <xref:System.Action%602> delegar a instância, como mostra o exemplo a seguir. (Para obter uma introdução às expressões lambda, consulte [expressões Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Action~2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~2/cs/Lambda.cs#4)]
 [!code-vb[System.Action~2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~2/vb/lambda.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`3" />
  </Docs>
</Type>