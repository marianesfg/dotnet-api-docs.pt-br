<Type Name="Action&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt;" FullName="System.Action&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a7a08ec7cbb5a0b6ce937dc88bcb939f61a96480" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="36433530" /></Metadata><TypeSignature Language="C#" Value="public delegate void Action&lt;in T1,in T2,in T3,in T4,in T5,in T6,in T7,in T8&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`8&lt;- T1, - T2, - T3, - T4, - T5, - T6, - T7, - T8&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`8" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T1, In T2, In T3, In T4, In T5, In T6, In T7, In T8)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5, arg6 As T6, arg7 As T7, arg8 As T8)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8&gt;&#xA;public delegate void Action(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8&gt; = delegate of 'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7 * 'T8 -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T4">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T5">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T6">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T7">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T8">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
    <Parameter Name="arg4" Type="T4" />
    <Parameter Name="arg5" Type="T5" />
    <Parameter Name="arg6" Type="T6" />
    <Parameter Name="arg7" Type="T7" />
    <Parameter Name="arg8" Type="T8" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">O tipo do primeiro parâmetro do método encapsulado por esse delegado.</typeparam>
    <typeparam name="T2">O tipo do segundo parâmetro do método encapsulado por esse delegado.</typeparam>
    <typeparam name="T3">O tipo do terceiro parâmetro do método encapsulado por esse delegado.</typeparam>
    <typeparam name="T4">O tipo do quarto parâmetro do método encapsulado por esse delegado.</typeparam>
    <typeparam name="T5">O tipo do quinto parâmetro do método encapsulado por esse delegado.</typeparam>
    <typeparam name="T6">O tipo do sexto parâmetro do método encapsulado por esse delegado.</typeparam>
    <typeparam name="T7">O tipo do sétimo parâmetro do método encapsulado por esse delegado.</typeparam>
    <typeparam name="T8">O tipo do oitavo parâmetro do método encapsulado por esse delegado.</typeparam>
    <param name="arg1">O primeiro parâmetro do método encapsulado por esse delegado.</param>
    <param name="arg2">O segundo parâmetro do método encapsulado por esse delegado.</param>
    <param name="arg3">O terceiro parâmetro do método encapsulado por esse delegado.</param>
    <param name="arg4">O quarto parâmetro do método encapsulado por esse delegado.</param>
    <param name="arg5">O quinto parâmetro do método encapsulado por esse delegado.</param>
    <param name="arg6">O sexto parâmetro do método encapsulado por esse delegado.</param>
    <param name="arg7">O sétimo parâmetro do método encapsulado por esse delegado.</param>
    <param name="arg8">O oitavo parâmetro do método encapsulado por esse delegado.</param>
    <summary>Encapsula um método que tem oito parâmetros e não retorna um valor.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode usar o <xref:System.Action%608> delegado para passar um método como um parâmetro sem declarar explicitamente um delegado personalizado. O método encapsulado deve corresponder à assinatura do método que é definida por esse delegado. Isso significa que o método encapsulado deve ter oito parâmetros que são todos passados a ele por valor, e ele não deve retornar um valor. (No c#, o método deve retornar `void`. No Visual Basic, ele deve ser definido pelo `Sub`...`End Sub` Construa. Ele também pode ser um método que retorna um valor que será ignorado.) Normalmente, esse tipo de método é usado para executar uma operação.  
  
> [!NOTE]
>  Para fazer referência a um método que tem oito parâmetros e retorna um valor, use o genérico <xref:System.Func%609> delegado em vez disso.  
  
 Você também pode usar o <xref:System.Action%608> delegar com métodos anônimos e expressões lambda.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`9" />
  </Docs>
</Type>