<Type Name="DateTime" FullName="System.DateTime">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="17335cf7a00859f035135c41af24fcd3718d5ca9" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36434290" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTime extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTime&gt;, class System.IConvertible, class System.IEquatable`1&lt;valuetype System.DateTime&gt;, class System.IFormattable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTime" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTime&#xA;Implements IComparable, IComparable(Of DateTime), IConvertible, IEquatable(Of DateTime), IFormattable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type DateTime = struct&#xA;    interface IFormattable&#xA;    interface IConvertible&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents an instant in time, typically expressed as a date and time of day.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## <a name="quick-links-to-example-code"></a>Links rápidos para código de exemplo

[!INCLUDE[interactive-note](~/includes/csharp-interactive-note.md)]

Este artigo inclui vários exemplos que usam o `DateTime` tipo:

**Exemplos de inicialização**      
 [Chamar um construtor](#initialization-01)     
 [Chamar o construtor padrão implícito](#initialization-02)     
 [Atribuição de valor de retorno](#initialization-03)     
 [Analisar uma cadeia de caracteres que representa uma data e hora](#initialization-04)     
 [Sintaxe do Visual Basic para inicializar uma data e hora](#initialization-05)     

**Formatação `DateTime` objetos como cadeias de caracteres**  
 [Use o formato de hora de data padrão](#formatting-01)     
 [Formatar uma data e hora usando uma cultura específica](#formatting-02)     
 [Formato de data hora usando uma cadeia de caracteres de formato padrão ou personalizadas](#formatting-03)     
 [Especifique uma cadeia de caracteres de formato e uma cultura específica](#formatting-04)     
 [Formato de data hora usando o padrão ISO 8601 para serviços web](#formatting-05)     

**Analisando cadeias de caracteres como `DateTime` objetos**  
 [Use `Parse` ou `TryParse` para converter uma cadeia de caracteres em uma data e hora](#parsing-01)     
 [Use `ParseExact` ou `TryParseExact` para converter uma cadeia de caracteres em um formato conhecido](#parsing-02)     
 [Converter da representação de cadeia de caracteres ISO 8601 para uma data e hora](#parsing-03)     

**`DateTime` Resolução**  
 [Explorar a resolução de valores de data e hora](#resolution-01)     
 [Comparação de igualdade dentro de uma tolerância](#comparison-01)     

**Cultura e calendários**  
 [Exibir valores de data e hora usando calendários específicos de cultura](#calendars-01)     
 [Analisar cadeias de caracteres de acordo com um calendário específico da cultura](#calendars-02)     
 [Inicializar uma data e hora do calendário de uma cultura específica](#calendars-03)     
 [O acesso às propriedades de data e hora usando o calendário de uma cultura específica](#calendars-04)     
 [Recuperando a semana do ano usando calendários específicos de cultura](#calendars-05)     

**Persistência**  
 [Manter valores de data e hora como cadeias de caracteres no fuso horário local](#persistence-01)     
 [Manter valores de data e hora como cadeias de caracteres em um formato invariável de cultura e hora](#persistence-02)     
 [Manter valores de data e hora como números inteiros](#persistence-03)     
 [Persistência de data e hora valores usando o `XmlSerializer`](#persistence-04)     
 [Persistência de data e hora valores usando o `BinaryFormatter`](#persistence-05)     
 [Manter valores de data e hora com dados de fuso horário](#persistence-06)     

## <a name="quick-links-to-remarks-topics"></a>Links rápidos para tópicos de comentários.

Esta seção contém tópicos para muitos usos comuns do `DateTime` struct:
  
 [Inicializando uma `DateTime` objeto](#initializing-a-datetime-object)   
 [Valores de data/hora e suas representações de cadeia de caracteres](#datetime-values-and-their-string-representations)   
 [Análise de valores de data e hora de cadeias de caracteres](#parsing-datetime-values-from-strings)   
 [Valores de data e hora](#datetime-values)   
 [Operações de data e hora](#datetime-operations)   
 [Resolução de data e hora](#datetime-resolution)   
 [Calendários e valores de data e hora](#datetime-values-and-calendars)   
 [Manter valores de data e hora](#persisting-datetime-values)   
 [DateTime vs. TimeSpan](#datetime-vs-timespan)   
 [Comparação de igualdade dentro da tolerância](#comparing-for-equality-within-tolerance) [considerações de interoperabilidade COM](#com-interop-considerations)  
   
O <xref:System.DateTime> tipo de valor representa datas e horas com valores que variam de 00:00:00 (meia-noite), 1 de janeiro, 0001 DC 00h00min00 (era Cristã) por meio de 11:59:59 P.M., 31 de dezembro de 9999 D.C. (C.E.) no calendário gregoriano.  
  
Valores de tempo são medidos em unidades de 100 nanossegundos chamadas tiques. Uma data específica é o número de tiques desde 12:00 meia-noite de 1º de janeiro de 0001. (C.E.) no <xref:System.Globalization.GregorianCalendar> calendário. O número exclui tiques que seriam adicionados por leap segundos. Por exemplo, um valor de tiques de L 31241376000000000 representa a data de sexta-feira, 01 de janeiro de 0100 12:00:00 meia-noite. Um <xref:System.DateTime> valor sempre é expresso no contexto de um valor explícito ou calendário padrão.  
  
> [!NOTE]
>  Se você estiver trabalhando com um valor de tiques que você deseja converter em algum outro intervalo de tempo, como minutos ou segundos, você deve usar o <xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>, ou <xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType> constante para executar a conversão. Por exemplo adicionar o número de segundos representado por um número especificado de tiques para o <xref:System.DateTime.Second%2A> componentes de um <xref:System.DateTime> valor, você pode usar a expressão `dateValue.Second + nTicks/Timespan.TicksPerSecond`.  

Você pode exibir a fonte de todo o conjunto de exemplos deste artigo no [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/) ou [c#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) do repositório de documentos no GitHub.

> [!NOTE]
>  Uma alternativa para o <xref:System.DateTime> estrutura para trabalhar com valores de data e hora fusos horários em particular é o <xref:System.DateTimeOffset> estrutura. O <xref:System.DateTimeOffset> estrutura armazena informações de data e hora em uma particular <xref:System.DateTime> campo e o número de minutos pelo qual que a data e hora é diferente do UTC em uma particular <xref:System.Int16> campo. Isso torna possível para um <xref:System.DateTimeOffset> valor para refletir o tempo em um determinado fuso horário, enquanto um <xref:System.DateTime> valor inequivocamente pode refletir somente UTC e a hora do fuso horário local. Para obter uma discussão sobre quando usar o <xref:System.DateTime> estrutura ou o <xref:System.DateTimeOffset> estrutura ao trabalhar com valores de data e hora, consulte [escolhendo entre DateTime, DateTimeOffset, TimeSpan e TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md).  
  
### <a name="initializing-a-datetime-object"></a>Inicializar um objeto DateTime  

Você pode atribuir um valor inicial para uma nova `DateTime` valor de várias maneiras diferentes:

- Chamando um construtor, um em que você especifica argumentos para valores, ou use o construtor padrão implícito.
- Atribuindo um `DateTime` para o valor de retorno de uma propriedade ou método.
- Analisando uma `DateTime` valor de sua representação de cadeia de caracteres.
- Usando recursos de idioma específico do Visual Basic para criar uma instância de um `DateTime`. 

Os trechos de código a seguir mostram exemplos de cada um:

#### <a name="invoke-constructors"></a>Chamar construtores

Você chamar qualquer uma das sobrecargas do <xref:System.DateTime> construtor que especificam os elementos do valor de data e hora (por exemplo, ano, mês e dia ou o número de tiques). O código a seguir cria uma data específica usando o <xref:System.DateTime> construtor especificando o ano, mês, dia, hora, minuto e segundo.  

<a name="initialization-01"></a> [!code-vb[System.DateTime.Instantiation#1](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#1)]  
[!code-csharp-interactive[System.DateTime.Instantiation#1](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#1)]

Invocar o `DateTime` construtor de padrão implícito da estrutura quando desejar que um `DateTime` inicializada para seu valor padrão. (Para obter detalhes sobre o construtor padrão implícito de um tipo de valor, consulte [tipos de valor](~/docs/csharp/language-reference/keywords/value-types.md).) Alguns compiladores também suporte para declarar um <xref:System.DateTime> valor sem atribuir explicitamente um valor a ele. Criação de um valor sem uma inicialização explícita também resulta no valor padrão. O exemplo a seguir ilustra o <xref:System.DateTime> construtor padrão implícito em c# e Visual Basic, bem como um <xref:System.DateTime> declaração sem atribuição no Visual Basic.  

<a name="initialization-02"></a> [!code-vb[System.DateTime.Instantiation#5](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#5)]  
[!code-csharp-interactive[System.DateTime.Instantiation#5](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#5)]
    
#### <a name="assigning-a-computed-value"></a>Atribuindo um valor calculado

Você pode atribuir o <xref:System.DateTime> um valor de data e hora retornado por uma propriedade ou método do objeto. O exemplo a seguir atribui a data atual e hora, a data atual do tempo Universal Coordenado (UTC) e a hora e a data atual para três novos <xref:System.DateTime> variáveis.  

<a name="initialization-03"></a> [!code-vb[System.DateTime.Instantiation#3](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#3)]  
[!code-csharp[System.DateTime.Instantiation#3](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#3)]

#### <a name="parsing-a-string-that-represents-a-datetime"></a>Analisar uma cadeia de caracteres que representa uma data e hora

O <xref:System.DateTime.Parse%2A>, <xref:System.DateTime.ParseExact%2A>, <xref:System.DateTime.TryParse%2A>, e <xref:System.DateTime.TryParseExact%2A> todos os métodos convertem uma cadeia de caracteres para seu equivalente valor de data e hora. Os exemplos a seguir usam o <xref:System.DateTime.Parse%2A> e <xref:System.DateTime.ParseExact%2A> métodos para analisar uma cadeia de caracteres e convertê-lo para um <xref:System.DateTime> valor. O segundo formato usa um formato com suporte a [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) padrão para uma data e a hora no formato de cadeia de caracteres que representa. Essa representação padrão geralmente é usada para transferir informações de data nos serviços da web.

<a name="initialization-04"></a> [!code-vb[System.DateTime.Instantiation#4](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#4)]  
[!code-csharp[System.DateTime.Instantiation#4](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#4)]

O <xref:System.DateTime.TryParse%2A> e <xref:System.DateTime.TryParseExact%2A> métodos indicam se uma cadeia de caracteres é uma representação válida de um <xref:System.DateTime> valor e, se for, executará a conversão.  

#### <a name="language-specific-syntax-for-visual-basic"></a>Sintaxe específica da linguagem do Visual Basic

A seguinte instrução do Visual Basic inicializa um novo <xref:System.DateTime> valor.  

<a name="initialization-05"></a> [!code-vb[System.DateTime.Instantiation#2](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#2)]  

### <a name="datetime-values-and-their-string-representations"></a>Valores de data/hora e suas representações de cadeia de caracteres  

Internamente, todos os <xref:System.DateTime> valores são representados como o número de tiques (o número de intervalos de 100 nanossegundos) decorridos desde 12:00:00 meia-noite de 1 de janeiro, 0001. O valor real <xref:System.DateTime> valor é independente da maneira em que esse valor aparece quando exibida. A aparência de um <xref:System.DateTime> valor é o resultado de uma operação de formatação que converte um valor em sua representação de cadeia de caracteres.  
  
A aparência dos valores de data e hora é dependente de cultura, padrões internacionais, requisitos do aplicativo e preferência pessoal. O <xref:System.DateTime> estrutura oferece flexibilidade na formatação de valores de data e hora por meio de sobrecargas de <xref:System.DateTime.ToString%2A>. O padrão <xref:System.DateTime.ToString?displayProperty=nameWithType> método retorna a representação de cadeia de caracteres de um valor de data e hora usando Data abreviada da cultura atual e o tempo padrão de hora. O exemplo a seguir usa o padrão <xref:System.DateTime.ToString?displayProperty=nameWithType> método. Ele exibe a data e hora usando a data abreviada e o tempo padrão de tempo para a cultura atual. A cultura en-US é a cultura atual no computador no qual o exemplo foi executado.  
  
<a name="formatting-01"></a> [!code-csharp-interactive[System.DateTime.Formatting#1](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#1)]
[!code-vb[System.DateTime.Formatting#1](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#1)]  

Talvez seja necessário formatar datas em uma cultura específica para oferecer suporte a cenários de web onde o servidor pode estar em uma cultura diferente do cliente. Você especifica a cultura usando a <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> método para criar o data abreviada e representação muito tempo em uma cultura específica. O exemplo a seguir usa o <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> método para exibir a data e hora usando o data abreviada e o tempo padrão de tempo para a cultura fr-FR.  
  
<a name="formatting-02"></a> [!code-csharp-interactive[System.DateTime.Formatting#2](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#2)]
[!code-vb[System.DateTime.Formatting#2](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#2)]  

 Outros aplicativos podem exigir representações de cadeia de caracteres diferentes de uma data. O <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> método retorna a representação de cadeia de caracteres definida por um especificador de formato padrão ou personalizadas usando as convenções de formatação da cultura atual. O exemplo a seguir usa o <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> cultura do método para exibir a data completa e o padrão de tempo para en-US, a cultura atual no computador no qual o exemplo foi executado.  
  
<a name="formatting-03"></a> [!code-csharp-interactive[System.DateTime.Formatting#3](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#3)]
[!code-vb[System.DateTime.Formatting#3](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#3)]  

 Por fim, você pode especificar a cultura e formato usando o <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método. O exemplo a seguir usa o <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método para exibir a data completa e o tempo padrão para a cultura fr-FR.  

<a name="formatting-04"></a> [!code-csharp-interactive[System.DateTime.Formatting#4](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#4)]
[!code-vb[System.DateTime.Formatting#4](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#4)]  

O <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> sobrecarga também pode ser usada com uma cadeia de caracteres de formato personalizado para especificar outros formatos. O exemplo a seguir mostra como formatar uma cadeia de caracteres usando o [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) formato padrão geralmente usado para serviços da web. O formato Iso 8601 não tem uma cadeia de caracteres de formato padrão correspondente.

<a name="formatting05"></a> [!code-csharp-interactive[System.DateTime.Formatting#5](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#5)]
[!code-vb[System.DateTime.Formatting#5](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#5)]  

Para obter mais informações sobre a formatação de <xref:System.DateTime> valores, consulte [padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md) e [Data personalizada e cadeias de caracteres de formato de hora](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  

### <a name="parsing-datetime-values-from-strings"></a>Análise de valores de data e hora de cadeias de caracteres

Análise converte a representação de cadeia de caracteres de uma data e hora para um <xref:System.DateTime> valor. Normalmente, cadeias de caracteres de data e hora têm dois usos diferentes em aplicativos:  
  
-   Uma data e hora usa uma variedade de formatos e reflete as convenções de uma cultura específica ou a cultura atual. Por exemplo, um aplicativo permite que um usuário cuja cultura atual é en-US para inserir um valor de data como "15/12/2013" ou "15 de dezembro de 2013". Ele permite que um usuário cuja cultura atual é en-gb para inserir um valor de data como "15/12/2013" ou "15 de dezembro de 2013."  
  
-   Uma data e hora é representado em um formato predefinido. Por exemplo, um aplicativo serializa uma data como "20130103" independentemente da cultura na qual o aplicativo está em execução. Um aplicativo pode exigir datas será inserido no formato de data abreviada da cultura atual.
  
Você usa o <xref:System.DateTime.Parse%2A> ou <xref:System.DateTime.TryParse%2A> método para converter uma cadeia de caracteres de um dos formatos de data e hora comuns usados por uma cultura para um <xref:System.DateTime> valor. O exemplo a seguir mostra como você pode usar <xref:System.DateTime.TryParse%2A> para converter cadeias de caracteres de data em diferentes formatos específicos de cultura para um <xref:System.DateTime> valor. Ele altera a cultura atual para inglês (Grã-Bretanha) e chama o <xref:System.DateTime.GetDateTimeFormats> método para gerar uma matriz de cadeias de caracteres de data e hora. Ele passa cada elemento na matriz para o <xref:System.DateTime.TryParse%2A> método. A saída do exemplo mostra que o método de análise foi capaz de converter cada uma das cadeias de caracteres de hora e data específicos de cultura com êxito.  
  
<a name="parsing-01"></a> [!code-csharp-interactive[System.DateTime.Parsing#1](~/samples/snippets/csharp/System.DateTime/Parsing.cs#1)]
[!code-vb[System.DateTime.Parsing#1](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#1)]  

Você usa o <xref:System.DateTime.ParseExact%2A> e <xref:System.DateTime.TryParseExact%2A> métodos para converter uma cadeia de caracteres que deve corresponder a um determinado formato ou formatos para um <xref:System.DateTime> valor. Você pode especificar um ou mais cadeias de formato de data e hora como um parâmetro para o método de análise. O exemplo a seguir usa o <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> método para converter cadeias de caracteres que devem estar em um formato de "AAAAMMDD" ou "HHmmss" para <xref:System.DateTime> valores.  
  
<a name="parsing-02"></a> [!code-csharp-interactive[System.DateTime.Parsing#2](~/samples/snippets/csharp/System.DateTime/Parsing.cs#2)]
[!code-vb[System.DateTime.Parsing#2](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#2)]  

Um uso comum para <xref:System.DateTime.ParseExact%2A> é converter uma representação de cadeia de caracteres de um serviço web, normalmente em [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) formato padrão. O código a seguir mostra a cadeia de caracteres de formato correto a ser usado:

<a name="parsing-03"></a> [!code-csharp-interactive[System.DateTime.Parsing#3](~/samples/snippets/csharp/System.DateTime/Parsing.cs#3)]
[!code-vb[System.DateTime.Parsing#3](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#3)]  

Se uma cadeia de caracteres não pode ser analisada, o <xref:System.DateTime.Parse%2A> e <xref:System.DateTime.ParseExact%2A> métodos lançam uma exceção. O <xref:System.DateTime.TryParse%2A> e <xref:System.DateTime.TryParseExact%2A> métodos retornam um <xref:System.Boolean> valor que indica se a conversão teve êxito ou falha. Você deve usar o <xref:System.DateTime.TryParse%2A> ou <xref:System.DateTime.TryParseExact%2A> métodos em cenários em que o desempenho é importante. A operação de análise para cadeias de caracteres de data e hora tende a ter um alto índice de falhas e manipulação de exceção é cara. Use esses métodos se cadeias de caracteres são inseridas por usuários ou provenientes de uma fonte desconhecida. 
  
Para obter mais informações sobre análise de valores de data e hora, consulte [análise Date and Time Strings](~/docs/standard/base-types/parsing-datetime.md).  

### <a name="datetime-values"></a>Valores DateTime

Descrições dos valores de tempo no <xref:System.DateTime> tipo geralmente são expressos usando o padrão de tempo Universal Coordenado (UTC). Hora Universal Coordenada é o nome internacionalmente reconhecido para a hora de Greenwich (GMT). Hora Universal Coordenada é o tempo conforme medido em zero grau de longitude, o ponto de origem do UTC. Horário de verão não é aplicável ao UTC.  
  
Hora local é relativo um determinado fuso horário. Um fuso horário está associado um deslocamento de fuso horário. Um deslocamento de fuso horário é o deslocamento do fuso horário, medido em horas, do ponto de origem de UTC. Além disso, a hora local opcionalmente é afetada pelo horário de verão, que adiciona ou remove um ajuste de intervalo de tempo. Hora local é calculada adicionando o deslocamento de fuso horário UTC e ajustar para horário de verão se necessário. O deslocamento de fuso horário no ponto de origem de UTC é zero.  
  
Hora UTC é adequada para cálculos, comparações e armazenar datas e horas em arquivos. Hora local é adequada para exibição nas interfaces do usuário dos aplicativos de área de trabalho. Aplicativos com reconhecimento de fuso horário (como muitos aplicativos da Web) também precisam trabalhar com um número de outros fusos horários.  
  
Se o <xref:System.DateTime.Kind%2A> propriedade de um <xref:System.DateTime> objeto <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, será especificado se a hora representada será um tempo em algum outro fuso horário, hora UTC ou horário local.  

### <a name="datetime-resolution"></a>Resolução de data e hora
  
> [!NOTE]
>  Como alternativa à execução de data e hora em <xref:System.DateTime> valores para medir o tempo decorrido, você pode usar o <xref:System.Diagnostics.Stopwatch> classe.  
  
O <xref:System.DateTime.Ticks%2A> propriedade expressa valores de data e hora em unidades de um dez milionésimo de segundo. O <xref:System.DateTime.Millisecond%2A> propriedade retorna milésimos de segundo em um valor de data e hora. Usando chamadas repetidas para o <xref:System.DateTime.Now%2A?displayProperty=nameWithType> depende da propriedade para medir o tempo decorrido no relógio do sistema. O relógio do sistema em sistemas Windows 7 e Windows 8 com uma resolução de aproximadamente 15 milissegundos. Essa resolução afeta a intervalos de tempo pequeno inferior a 100 milissegundos. 
  
O exemplo a seguir ilustra a dependência da atual valores de data e hora em que a resolução do relógio do sistema. No exemplo, um loop externo se repete a 20 vezes, e um loop interno serve para atrasar o loop externo. Se o valor do contador de loop externo é 10, uma chamada para o <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> método apresenta um atraso de 5 milissegundos. O exemplo a seguir mostra o número de milissegundos retornado pelo `DateTime.Now.Milliseconds` alterações de propriedade somente após a chamada a <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>.  

<a name="resolution-01"></a> [!code-csharp-interactive[System.DateTime.Resolution#1](~/samples/snippets/csharp/System.DateTime/Resolution.cs#1)]
[!code-vb[System.DateTime.Resolution#1](~/samples/snippets/visualbasic/System.DateTime/Resolution.vb#1)]  

### <a name="datetime-operations"></a>Operações DateTime  

Um cálculo usando um <xref:System.DateTime> estrutura, como <xref:System.DateTime.Add%2A> ou <xref:System.DateTime.Subtract%2A>, não modifique o valor da estrutura. Em vez disso, retorna um novo cálculo <xref:System.DateTime> estrutura cujo valor é o resultado do cálculo.  
  
Operações de conversão entre fusos horários (tais como entre o UTC e a hora local, ou entre um fuso horário e outro) consideram o horário de verão, mas não operações de comparação e aritméticas.  
  
O <xref:System.DateTime> estrutura em si oferece suporte limitado para converter de um fuso horário para outro. Você pode usar o <xref:System.DateTime.ToLocalTime%2A> método para converter UTC para o horário local, ou você pode usar o <xref:System.DateTime.ToUniversalTime%2A> método para converter de hora local para UTC. No entanto, um conjunto completo de métodos de conversão de fuso horário está disponível na <xref:System.TimeZoneInfo> classe. Você pode converter a hora em qualquer um dos fusos horários do mundo para a hora em qualquer outro fuso horário usando esses métodos.  
  
Cálculos e comparações de <xref:System.DateTime> objetos são significativos apenas se os objetos representam vezes no mesmo fuso horário. Você pode usar um <xref:System.TimeZoneInfo> objeto para representar um <xref:System.DateTime> do valor fuso horário, embora os dois são acoplados de forma flexível. Um <xref:System.DateTime> objeto não tem uma propriedade que retorna um objeto que representa o fuso horário do valor data e hora. O <xref:System.DateTime.Kind%2A> propriedade indica se um `DateTime` representa o UTC, horário local, ou não está especificado. Em um aplicativo com reconhecimento de fuso horário, você deve se basear em algum mecanismo externo para determinar o fuso horário no qual um <xref:System.DateTime> objeto foi criado. Você pode usar uma estrutura que encapsula a ambos os <xref:System.DateTime> valor e o <xref:System.TimeZoneInfo> objeto que representa o <xref:System.DateTime> fuso horário do valor. Para obter detalhes sobre como usar UTC cálculos e comparações com <xref:System.DateTime> valores, consulte [executando operações de aritméticas com datas e horas](~/docs/standard/datetime/performing-arithmetic-operations.md).  
  
Cada <xref:System.DateTime> membro usa o calendário gregoriano implicitamente para executar sua operação. As exceções são métodos que especifique implicitamente um calendário. Elas incluem construtores que especificam um calendário, e métodos com um parâmetro derivam de <xref:System.IFormatProvider>, como <xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType>.  
  
Operações por membros do <xref:System.DateTime> tipo levar em detalhes da conta, como anos bissextos e o número de dias em um mês.  

## <a name="datetime-values-and-calendars"></a>Calendários e valores de data e hora  

A biblioteca de classes do .NET Framework inclui um número de classes de calendário, que derivam de <xref:System.Globalization.Calendar> classe.  Elas são:  
  
-   O <xref:System.Globalization.ChineseLunisolarCalendar> classe.  
-   O <xref:System.Globalization.EastAsianLunisolarCalendar> classe.  
-   O <xref:System.Globalization.GregorianCalendar> classe.  
-   O <xref:System.Globalization.HebrewCalendar> classe.  
-   O <xref:System.Globalization.HijriCalendar> classe.  
-   O <xref:System.Globalization.JapaneseCalendar> classe.  
-   O <xref:System.Globalization.JapaneseLunisolarCalendar> classe.  
-   O <xref:System.Globalization.JulianCalendar> classe.  
-   O <xref:System.Globalization.KoreanCalendar> classe.  
-   O <xref:System.Globalization.KoreanLunisolarCalendar> classe.  
-   O <xref:System.Globalization.PersianCalendar> classe.  
-   O <xref:System.Globalization.TaiwanCalendar> classe.  
-   O <xref:System.Globalization.TaiwanLunisolarCalendar> classe.  
-   O <xref:System.Globalization.ThaiBuddhistCalendar> classe.  
-   O <xref:System.Globalization.UmAlQuraCalendar> classe.  
  
Cada cultura usa um calendário padrão definido por seu somente leitura <xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=nameWithType> propriedade. Cada cultura pode oferecer suporte a um ou mais calendários definidos por seu somente leitura <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> propriedade. O calendário usado atualmente por um determinado <xref:System.Globalization.CultureInfo> objeto é definido por seu <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> propriedade. Ele deve ser um dos calendários encontrados na <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> matriz.  
  
Calendário uma cultura atual é usado em todas as operações de formatação para aquela cultura. Por exemplo, o calendário padrão da cultura tailandês budista é o calendário da Era budista tailandês, que é representado pela <xref:System.Globalization.ThaiBuddhistCalendar> classe.  Quando um <xref:System.Globalization.CultureInfo> objeto que representa a cultura tailandês budista é usado em uma data e hora a operação de formatação, o calendário Era de tailandês budista é usado por padrão. O calendário gregoriano é usado somente se a cultura <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> propriedade for alterada, como mostra o exemplo a seguir:  

<a name="calendars-01"></a> [!code-csharp-interactive[System.DateTime.Calendar#1](~/samples/snippets/csharp/System.DateTime/Calendar.cs#1)]
[!code-vb[System.DateTime.Calendar#1](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#1)]  

Calendário atual da cultura também é usado em todas as operações de análise para aquela cultura, como mostra o exemplo a seguir.  
  
<a name="calendars-02"></a> [!code-csharp-interactive[System.DateTime.Calendar#2](~/samples/snippets/csharp/System.DateTime/Calendar.cs#2)]
[!code-vb[System.DateTime.Calendar#2](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#2)]  

Você instancia um <xref:System.DateTime> valor usando os elementos data e hora (número do ano, mês e dia) de um calendário específico chamando um [construtor DateTime](xref:System.DateTime.%23ctor%2A) que inclui um `calendar` parâmetro e passando um <xref:System.Globalization.CultureInfo.Calendar%2A>objeto que representa o calendário. O exemplo a seguir usa os elementos de data e hora do <xref:System.Globalization.ThaiBuddhistCalendar> calendário.  
  
<a name="calendars-03"></a> [!code-csharp-interactive[System.DateTime.Calendar#3](~/samples/snippets/csharp/System.DateTime/Calendar.cs#3)]
[!code-vb[System.DateTime.Calendar#3](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#3)]  

<xref:System.DateTime> construtores que não incluem um `calendar` parâmetro supõem que os elementos de data e hora são expressos como unidades no calendário gregoriano.  
  
Todos os outros <xref:System.DateTime> propriedades e métodos usam o calendário gregoriano. Por exemplo, o <xref:System.DateTime.Year%2A?displayProperty=nameWithType> propriedade retorna o ano do calendário gregoriano e o <xref:System.DateTime.IsLeapYear%28System.Int32%29?displayProperty=nameWithType> método pressupõe que o `year` parâmetro é um ano no calendário gregoriano.  Cada <xref:System.DateTime> membro que usa o calendário gregoriano tem membro correspondente a <xref:System.Globalization.CultureInfo.Calendar%2A> classe que usa um calendário específico. Por exemplo, o <xref:System.Globalization.Calendar.GetYear%2A?displayProperty=nameWithType> método retorna o ano em um calendário específico e o <xref:System.Globalization.Calendar.IsLeapYear%2A?displayProperty=nameWithType> método interpreta o `year` parâmetro como um número de anos em um calendário específico. O exemplo a seguir usa o <xref:System.DateTime> e os membros correspondentes do <xref:System.Globalization.ThaiBuddhistCalendar> classe.  
  
<a name="calendars-04"></a> [!code-csharp-interactive[System.DateTime.Calendar#4](~/samples/snippets/csharp/System.DateTime/Calendar.cs#4)]
[!code-vb[System.DateTime.Calendar#4](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#4)]  

O <xref:System.DateTime> estrutura inclui um <xref:System.DateTime.DayOfWeek%2A> propriedade que retorna o dia da semana do calendário gregoriano. Ele não inclui um membro que permite que você recupere o número da semana do ano. Para recuperar a semana do ano, chame o calendário individual <xref:System.Globalization.Calendar.GetWeekOfYear%2A?displayProperty=nameWithType> método. O exemplo a seguir fornece uma ilustração.  
  
<a name="calendars-05"></a> [!code-csharp-interactive[System.DateTime.Calendar#5](~/samples/snippets/csharp/System.DateTime/Calendar.cs#5)]
[!code-vb[System.DateTime.Calendar#5](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#5)]  

Para obter mais informações sobre datas e calendários, consulte [trabalhando com calendários](~/docs/standard/datetime/working-with-calendars.md).  
  
### <a name="persisting-datetime-values"></a>Manter valores de data e hora  

Você pode persistir <xref:System.DateTime> valores de quatro maneiras:  
  
-   Você [convertê-los em cadeias de caracteres](#persisting-values-as-strings) e manter as cadeias de caracteres.  
-   Você [convertê-los em valores inteiros de 64 bits](#persisting-values-as-integers) (o valor da <xref:System.DateTime.Ticks%2A> propriedade) e manter os inteiros.  
-   Você [serializar os valores DateTime](#serializing-dateTime-values).  
-   Você [serializar os valores DateTime juntamente com informações de fuso horário](#serializing-datetime-and-time-zone-data).  
  
Você deve garantir que a rotina que restaura o <xref:System.DateTime> valores não perder dados ou lançar uma exceção, independentemente de qual técnica que você escolher. <xref:System.DateTime> os valores devem ir e voltar. Ou seja, o valor original e o valor restaurado devem ser o mesmo. E se o original <xref:System.DateTime> valor representa um único instante, ela deve identificar no mesmo momento de tempo quando ele for restaurado.  
  
#### <a name="persisting-values-as-strings"></a>Manter valores como cadeias de caracteres  

Para restaurar com êxito <xref:System.DateTime> valores que são persistidos como cadeias de caracteres, siga estas regras:  
  
-   Verifique as mesmas suposições sobre formatação de cultura específica quando você restaurar a cadeia de caracteres, como quando você persistentes. Para garantir que uma cadeia de caracteres pode ser restaurada em um sistema cuja cultura atual é diferente da cultura do sistema que foi salvo no, chame o <xref:System.DateTime.ToString%2A> sobrecarga para salvar a cadeia de caracteres usando as convenções da cultura invariável. Chamar o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> ou <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> sobrecarga para restaurar a cadeia de caracteres usando as convenções da cultura invariável. Nunca use o <xref:System.DateTime.ToString>, <xref:System.DateTime.Parse%28System.String%29>, ou <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> sobrecargas, que usa as convenções da cultura do thread atual.  
  
-   Se a data representa um único ponto de tempo, certifique-se de que ele representa o momento mesmo quando ele for restaurado, mesmo em um fuso horário diferente. Converter o <xref:System.DateTime> valor para o tempo Universal Coordenado (UTC) antes de salvar. Você também pode serializar o valor junto com informações de fuso horário. Para obter mais informações sobre essa abordagem, consulte [dados de serialização de data e hora e fuso horário](#TimeZone).  
  
 O erro mais comum quando a persistência <xref:System.DateTime> valores como cadeias de caracteres é contar com as convenções de formatação da cultura atual ou padrão. Se a cultura atual é diferente quando salvar e restaurar as cadeias de caracteres, surgem problemas. O exemplo a seguir ilustra esses problemas. Ele salva cinco datas usando as convenções de formatação da cultura atual, que nesse caso é inglês (Estados Unidos). Restaura as datas usando as convenções de formatação de uma cultura diferente, que nesse caso é inglês (Grã-Bretanha). Como as convenções de formatação das duas culturas são diferentes, duas das datas não podem ser restauradas e as datas de três restantes são interpretadas incorretamente. Além disso, se os valores de data e hora originais representam único momentos no tempo, restaurado vezes estão incorretas, como informações de fuso horário são perdidas.  
  
<a name="persistence-01"></a> [!code-csharp[System.DateTime.Persistence#1](~/samples/snippets/csharp/System.DateTime/Persistence.cs#1)]
[!code-vb[System.DateTime.Persistence#1](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#1)]  

A viagem <xref:System.DateTime> valores com êxito, siga estas etapas:  
  
1.  Se os valores representam único minutos de tempo, convertê-los da hora local em UTC chamando o <xref:System.DateTime.ToUniversalTime%2A> método.  
1.  Converter as datas em suas representações de cadeia de caracteres chamando o <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> ou <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> de sobrecarga. Use as convenções de formatação da cultura invariável especificando <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> como o `provider` argumento. Especifique que o valor deve ser ida e volta usando a cadeia de caracteres de formato padrão "O" ou "R".  
  
Para restaurar o persistente <xref:System.DateTime> valores sem perda de dados, siga estas etapas:  
  
1.  Analisar os dados chamando o <xref:System.DateTime.ParseExact%2A> ou <xref:System.DateTime.TryParseExact%2A> de sobrecarga. Especifique <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> como o `provider` argumento e use o formato padrão da mesmo cadeia de caracteres é usada para o `format` argumento durante a conversão. Incluir o <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> valor o `styles` argumento.  
1.  Se o <xref:System.DateTime> valores representam único momentos no tempo, chamada de <xref:System.DateTime.ToLocalTime%2A> método para converter a data analisada do UTC para o horário local.  
  
O exemplo a seguir usa a cultura invariável e a cadeia de caracteres de formato padrão de "O" para garantir que <xref:System.DateTime> valores salvo e restaurado representam o mesmo momento, independentemente do sistema, cultura ou fuso horário dos sistemas de origem e destino.  
  
<a name="persistence-02"></a> [!code-csharp[System.DateTime.Persistence#2](~/samples/snippets/csharp/System.DateTime/Persistence.cs#2)]
[!code-vb[System.DateTime.Persistence#2](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#2)]  

#### <a name="persisting-values-as-integers"></a>Manter valores como números inteiros  

Você pode manter uma data e hora como um <xref:System.Int64> valor que representa o número de tiques. Nesse caso, você não deve considerar a cultura dos sistemas de <xref:System.DateTime> valores são mantidos e restaurados no.  
  
Para manter um <xref:System.DateTime> valor como um inteiro:  
  
-   Se o <xref:System.DateTime> valores representam único momentos no tempo, convertê-los em UTC chamando o <xref:System.DateTime.ToUniversalTime%2A> método.  
-   Recuperar o número de tiques representado pelo <xref:System.DateTime> o valor da sua <xref:System.DateTime.Ticks%2A> propriedade.  
  
Para restaurar um <xref:System.DateTime> valor persistiu como um inteiro:  
  
1.  Criar uma instância de um novo <xref:System.DateTime> objeto passando o <xref:System.Int64> o valor para o <xref:System.DateTime.%23ctor%28System.Int64%29> construtor.  
1.  Se o <xref:System.DateTime> valor representa um único ponto no tempo, converter do UTC para o horário local chamando o <xref:System.DateTime.ToLocalTime%2A> método.  
  
O exemplo a seguir persiste uma matriz de <xref:System.DateTime> valores como inteiros em um sistema nos EUA. Fuso horário do Pacífico. Restaurá-lo em um sistema na zona UTC. O arquivo que contém números inteiros inclui um <xref:System.Int32> valor que indica o número total de <xref:System.Int64> valores que se seguem imediatamente.  
  
<a name="persistence-03"></a> [!code-csharp[System.DateTime.Persistence#3](~/samples/snippets/csharp/System.DateTime/Persistence.cs#3)]
[!code-vb[System.DateTime.Persistence#3](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#3)]  

#### <a name="serializing-datetime-values"></a>Serialização de valores de data e hora  

Você pode persistir <xref:System.DateTime> valores por meio de serialização para um fluxo ou arquivo e, em seguida, restaurá-los por meio de desserialização. <xref:System.DateTime> dados são serializados em algum formato de objeto especificado. Os objetos são restaurados quando desserializados. Um formatador ou um serializador, como <xref:System.Xml.Serialization.XmlSerializer> ou <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>, gerencia o processo de serialização e desserialização. Para obter mais informações sobre serialização e os tipos de serialização do .NET Framework com suporte, consulte [serialização](~/docs/standard/serialization/index.md).
  
O exemplo a seguir usa o <xref:System.Xml.Serialization.XmlSerializer> classe para serializar e desserializar <xref:System.DateTime> valores. Os valores representam todos os dias do ano bissexto no século. A saída representa o resultado se o exemplo for executado em um sistema cuja cultura atual é inglesa (Grã-Bretanha). Porque você desserializado a <xref:System.DateTime> objeto em si, o código não precisa lidar com diferenças culturais em formatos de data e hora.  
  
<a name="persistence-04"></a> [!code-csharp[System.DateTime.Persistence#4](~/samples/snippets/csharp/System.DateTime/Persistence.cs#4)]
[!code-vb[System.DateTime.Persistence#4](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#4)]  

O exemplo anterior não inclui informações de tempo. Se um <xref:System.DateTime> valor representa um ponto no tempo e é expresso como uma hora local, convertê-los da hora local para UTC antes serializá-lo ao chamar o <xref:System.DateTime.ToUniversalTime%2A> método. Depois que você desserializá-la, convertê-lo de UTC para o horário local chamando o <xref:System.DateTime.ToLocalTime%2A> método. O exemplo a seguir usa o <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> classe para serializar <xref:System.DateTime> dados em um sistema nos EUA. Fuso horário padrão do Pacífico e desserializá-la em um sistema nos EUA. Zona padrão Central.  
  
<a name="persistence-05"></a> [!code-csharp[System.DateTime.Persistence#5](~/samples/snippets/csharp/System.DateTime/Persistence.cs#5)]
[!code-vb[System.DateTime.Persistence#5](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#5)]  

#### <a name="serializing-datetime-and-time-zone-data"></a>Serializando dados de data e hora e fuso horário  

Todos os exemplos anteriores assumido que <xref:System.DateTime> valores são expressos como horas locais. O código convertidos os valores entre o UTC e a hora local, portanto, eles refletem o mesmo momento nos sistemas de origem e destino. <xref:System.DateTime> os valores também podem refletir momentos no tempo em um fuso horário diferente de local e o UTC. Porque o <xref:System.DateTime> estrutura não está ciente de fuso horário, você precisa serializar ambos o <xref:System.DateTime> valor e o <xref:System.TimeZoneInfo> objeto que representa seu fuso horário. Criar um tipo cujos campos incluem o <xref:System.DateTime> valor e o seu fuso horário. O exemplo a seguir define um `DateWithTimeZone` estrutura.  
  
<a name="persistence-06"></a> [!code-csharp[System.DateTime.Persistence#6](~/samples/snippets/csharp/System.DateTime/DateWithTimeZone.cs#6)]
[!code-vb[System.DateTime.Persistence#6](~/samples/snippets/visualbasic/System.DateTime/DateWithTimeZone.vb#6)]  

> [!IMPORTANT]
>  O `DateWithTimeZone` estrutura é usada nos próximos dois exemplos, o qual serializar e desserializar uma matriz de `DateWithTimeZone` objetos. Você pode exibir a fonte de todo o conjunto de exemplos deste artigo no [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/) ou [c#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) do repositório de documentos no GitHub.
  
Usando o `DateWithTimeZone` estrutura, você pode, em seguida, persistir data e hora junto com informações de fuso horário. O exemplo a seguir usa o <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> classe para serializar uma matriz de `DateWithTimeZone` objetos.  
  
[!code-csharp[System.DateTime.Persistence#7](~/samples/snippets/csharp/System.DateTime/Persistence.cs#7)]
[!code-vb[System.DateTime.Persistence#7](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#7)]  

O exemplo a seguir, em seguida, chama o <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType> método para desserializar a ele.  
  
[!code-csharp[System.DateTime.Persistence#8](~/samples/snippets/csharp/System.DateTime/Persistence.cs#8)]
[!code-vb[System.DateTime.Persistence#8](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#8)]  

### <a name="datetime-vs-timespan"></a>DateTime vs. TimeSpan  

O <xref:System.DateTime> e <xref:System.TimeSpan> tipos de valor são diferentes em que uma <xref:System.DateTime> representa um momento no tempo, enquanto um <xref:System.TimeSpan> representa um intervalo de tempo. Você pode subtrair uma instância de <xref:System.DateTime> de outro para obter um <xref:System.TimeSpan> objeto que representa o intervalo de tempo entre eles. Você pode adicionar um positivo <xref:System.TimeSpan> ao atual <xref:System.DateTime> para obter um <xref:System.DateTime> valor que representa uma data futura.  
  
Você pode adicionar ou subtrair um intervalo de tempo de um <xref:System.DateTime> objeto. Intervalos de tempo podem ser positivo ou negativo, e eles podem ser expressos em unidades como tiques, segundos, ou como um <xref:System.TimeSpan> objeto.  

### <a name="comparing-for-equality-within-tolerance"></a>Comparação de igualdade dentro da tolerância

Comparações de igualdade para <xref:System.DateTime> valores são exatos. Isso significa que dois valores devem ser expressos como o mesmo número de tiques a serem considerados iguais. Precisão geralmente é desnecessários ou até mesmo incorreto para muitos aplicativos. Geralmente, você deseja testar se <xref:System.DateTime> são objetos **igual a aproximadamente**. 

O exemplo a seguir demonstra como comparar aproximadamente equivalente <xref:System.DateTime> . Aceita uma pequena margem de diferença quando declará-los igual.  
  
<a name="comparison-02"></a> [!code-csharp[System.DateTime.Comparisons#1](~/samples/snippets/csharp/System.DateTime/DateTimeComparisons.cs#1)]
[!code-vb[System.DateTime.Comparisons#1](~/samples/snippets/visualbasic/System.DateTime/DateTimeComparisons.vb#1)]  

### <a name="com-interop-considerations"></a>Considerações de interoperabilidade COM  

Um <xref:System.DateTime> valor que é transferido para um aplicativo COM e, em seguida, será transferida para um aplicativo gerenciado, é chamado de viagem. No entanto, um <xref:System.DateTime> valor que especifica somente uma vez não ida e volta como esperado.  
  
Se você viagem apenas uma hora, como 15: 00, a data final e a hora é de 30 de dezembro de 1899, C.E. às 3:00 P.M., em vez de, 1 de janeiro, 0001 C.E. às 3:00. O .NET Framework e COM assumem uma data padrão quando apenas uma vez é especificado. No entanto, o sistema COM pressupõe uma data base de 30 de dezembro de 1899 C.E., enquanto uma data base, de 1º de janeiro, 0001 C.E. supõe que o .NET Framework  
  
Quando somente uma vez é transmitido do .NET Framework para COM, processamento especial é executado converte a hora para o formato usado pelo COM. Quando somente uma vez é passado de COM para o .NET Framework, não há processamento especial é executado porque que seria corrompido legítimas datas e horas em ou antes de 30 de dezembro de 1899. Se uma data inicia sua viagem de COM, o .NET Framework e COM preservam a data.  
  
O comportamento do .NET Framework e COM significa que, se seus ciclos de aplicativo um <xref:System.DateTime> que especifica apenas uma vez, seu aplicativo deve se lembrar de modificar ou ignorar a data incorreta no final <xref:System.DateTime> objeto.  
     
 ]]></format>
    </remarks>
    <threadsafe>Todos os membros desse tipo são thread-safe. Os membros que aparentam modificar efetivamente o estado retornam uma nova instância inicializada com o novo valor. Assim como acontece com qualquer outro tipo, a leitura e a gravação em uma variável compartilhada que contém uma instância desse tipo devem ser protegidas por um bloqueio para garantir thread-safe.</threadsafe>
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.TimeSpan" />
    <altmember cref="T:System.Globalization.Calendar" />
    <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
    <altmember cref="T:System.TimeZoneInfo" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks);" />
      <MemberSignature Language="F#" Value="new DateTime : int64 -&gt; DateTime" Usage="new System.DateTime ticks" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to a specified number of ticks.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A propriedade <xref:System.DateTime.Kind%2A> é inicializada com <xref:System.DateTimeKind.Unspecified>.  
  
 Para aplicativos nos quais a portabilidade de dados de data e hora ou um grau limitado de reconhecimento do fuso horário seja importante, é possível usar o construtor <xref:System.DateTimeOffset> correspondente.  
  
   
  
## Examples  
 O exemplo a seguir demonstra um do <xref:System.DateTime> construtores.  
  
 [!code-cpp[datetime.ctor_Int64#1](~/samples/snippets/cpp/VS_Snippets_CLR/datetime.ctor_Int64/CPP/ticks.cpp#1)]
 [!code-csharp[datetime.ctor_Int64#1](~/samples/snippets/csharp/VS_Snippets_CLR/datetime.ctor_Int64/CS/ticks.cs#1)]
 [!code-vb[datetime.ctor_Int64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/datetime.ctor_Int64/VB/ticks.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ticks" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int64 * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (ticks, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="ticks">A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar.</param>
        <param name="kind">One of the enumeration values that indicates whether <c>ticks</c> specifies a local time, Coordinated Universal Time (UTC), or neither.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to a specified number of ticks and to Coordinated Universal Time (UTC) or local time.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para aplicativos nos quais a portabilidade de dados de data e hora ou um grau limitado de reconhecimento do fuso horário seja importante, é possível usar o construtor <xref:System.DateTimeOffset> correspondente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ticks" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, and day.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este construtor interpreta `year`, `month` e `day` como um ano, mês e um dia no calendário gregoriano. Para criar uma instância de um <xref:System.DateTime> valor usando o ano, mês e dia no calendário de outra chamada a <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> construtor.  
  
 A hora do dia para resultante <xref:System.DateTime> é meia-noite (00: 00:00). A propriedade <xref:System.DateTime.Kind%2A> é inicializada com <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%29> construtor para instanciar um <xref:System.DateTime> valor. O exemplo também ilustra que essa sobrecarga cria um <xref:System.DateTime> valor cujo componente de hora é igual a meia-noite (ou 0:00).  
  
 [!code-csharp[System.DateTime.Constructor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#1)]
 [!code-vb[System.DateTime.Constructor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than 1 or greater than 9999.  -or-  <paramref name="month" /> is less than 1 or greater than 12.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through the number of years in <c>calendar</c>).</param>
        <param name="month">The month (1 through the number of months in <c>calendar</c>).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="calendar">The calendar that is used to interpret <c>year</c>, <c>month</c>, and <c>day</c>.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, and day for the specified calendar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A hora do dia para resultante <xref:System.DateTime> é meia-noite (00: 00:00). A propriedade <xref:System.DateTime.Kind%2A> é inicializada com <xref:System.DateTimeKind.Unspecified>.  
  
 Os valores permitidos para `year`, `month`, e `day` dependem `calendar`. Uma exceção será lançada se a data e hora especificada não puder ser expressada usando-se `calendar`.  
  
 O namespace <xref:System.Globalization> fornece vários calendários que incluem <xref:System.Globalization.GregorianCalendar> e <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 A exemplo a seguir chama o <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> construtor duas vezes para criar uma instância de dois <xref:System.DateTime> valores. A primeira chamada cria uma instância de um valor <xref:System.DateTime> usando-se um objeto <xref:System.Globalization.PersianCalendar>. Como o calendário persa não pode ser designado como o calendário padrão para uma cultura, a exibição de uma data usando-se o calendário persa requer chamadas individuais para os métodos <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> e <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType>. A segunda chamada para o construtor cria uma instância de um valor <xref:System.DateTime> usando-se um objeto <xref:System.Globalization.HijriCalendar>. O exemplo altera a cultura atual para árabe (Síria) e muda o calendário padrão da cultura atual para o calendário islâmico. Como Hijri é o calendário padrão da cultura atual, o método <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> usa-o para formatar a data. Quando a cultura atual anterior (que é inglês (Estados Unidos) nesse caso) é restaurada, o método <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> usa o calendário gregoriano padrão da cultura atual para formatar a data.  
  
 [!code-csharp[System.DateTime.Constructor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample2.cs#2)]
 [!code-vb[System.DateTime.Constructor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.  -or-  <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, and second.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A propriedade <xref:System.DateTime.Kind%2A> é inicializada com <xref:System.DateTimeKind.Unspecified>.  
  
 Este construtor interpreta`year`, `month`, e `day` como um ano, mês e dia no calendário gregoriano. Para criar uma instância de um <xref:System.DateTime> valor usando o ano, mês e dia no calendário de outra chamada a <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> construtor.  
  
 Para aplicativos nos quais a portabilidade de dados de data e hora ou um grau limitado de reconhecimento do fuso horário seja importante, é possível usar o construtor <xref:System.DateTimeOffset> correspondente.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.%23ctor%2A> construtor para instanciar um <xref:System.DateTime> valor.  
  
 [!code-csharp[System.DateTime.Constructor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#3)]
 [!code-vb[System.DateTime.Constructor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than 1 or greater than 9999.  -or-  <paramref name="month" /> is less than 1 or greater than 12.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than 0 or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="kind">One of the enumeration values that indicates whether <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c> and <c>second</c> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and Coordinated Universal Time (UTC) or local time.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este construtor interpreta`year`, `month`, e `day` como um ano, mês e dia no calendário gregoriano. Para criar uma instância de um <xref:System.DateTime> valor usando o ano, mês e dia no calendário de outra chamada a <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> construtor.  
  
 Para aplicativos nos quais a portabilidade de dados de data e hora ou um grau limitado de reconhecimento do fuso horário seja importante, é possível usar o construtor <xref:System.DateTimeOffset> correspondente.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> construtor para instanciar um <xref:System.DateTime> valor.  
  
 [!code-csharp[System.DateTime.Constructor#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#7)]
 [!code-vb[System.DateTime.Constructor#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than 1 or greater than 9999.  -or-  <paramref name="month" /> is less than 1 or greater than 12.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than 0 or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through the number of years in <c>calendar</c>).</param>
        <param name="month">The month (1 through the number of months in <c>calendar</c>).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="calendar">The calendar that is used to interpret <c>year</c>, <c>month</c>, and <c>day</c>.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, and second for the specified calendar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A propriedade <xref:System.DateTime.Kind%2A> é inicializada com <xref:System.DateTimeKind.Unspecified>.  
  
 Os valores permitidos para `year`, `month`, e `day` dependem `calendar`. Uma exceção será lançada se a data e hora especificada não puder ser expressada usando-se `calendar`.  
  
 O namespace <xref:System.Globalization> fornece vários calendários que incluem <xref:System.Globalization.GregorianCalendar> e <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 A exemplo a seguir chama o <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> construtor duas vezes para criar uma instância de dois <xref:System.DateTime> valores. A primeira chamada cria uma instância de um valor <xref:System.DateTime> usando-se um objeto <xref:System.Globalization.PersianCalendar>. Como o calendário persa não pode ser designado como o calendário padrão para uma cultura, a exibição de uma data usando-se o calendário persa requer chamadas individuais para os métodos <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> e <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType>. A segunda chamada para o construtor cria uma instância de um valor <xref:System.DateTime> usando-se um objeto <xref:System.Globalization.HijriCalendar>. O exemplo altera a cultura atual para árabe (Síria) e muda o calendário padrão da cultura atual para o calendário islâmico. Como Hijri é o calendário padrão da cultura atual, o método <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> usa-o para formatar a data. Quando a cultura atual anterior (que é inglês (Estados Unidos) nesse caso) é restaurada, o método <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> usa o calendário gregoriano padrão da cultura atual para formatar a data.  
  
 [!code-csharp[System.DateTime.Constructor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample4.cs#4)]
 [!code-vb[System.DateTime.Constructor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.  -or-  <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than 0 or greater than 23  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="millisecond">The milliseconds (0 through 999).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and millisecond.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este construtor interpreta`year`, `month`, e `day` como um ano, mês e dia no calendário gregoriano. Para criar uma instância de um <xref:System.DateTime> valor usando o ano, mês e dia no calendário de outra chamada a <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> construtor.  
  
 A propriedade <xref:System.DateTime.Kind%2A> é inicializada com <xref:System.DateTimeKind.Unspecified>.  
  
 Para aplicativos nos quais a portabilidade de dados de data e hora ou um grau limitado de reconhecimento do fuso horário seja importante, é possível usar o construtor <xref:System.DateTimeOffset> correspondente.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29> construtor para instanciar um <xref:System.DateTime> valor.  
  
 [!code-csharp[System.DateTime.Constructor#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#5)]
 [!code-vb[System.DateTime.Constructor#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than 1 or greater than 9999.  -or-  <paramref name="month" /> is less than 1 or greater than 12.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than 0 or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.  -or-  <paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="millisecond">The milliseconds (0 through 999).</param>
        <param name="kind">One of the enumeration values that indicates whether <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c>, <c>second</c>, and <c>millisecond</c> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este construtor interpreta`year`, `month`, e `day` como um ano, mês e dia no calendário gregoriano. Para criar uma instância de um <xref:System.DateTime> valor usando o ano, mês e dia no calendário de outra chamada a <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> construtor.  
  
 Para aplicativos nos quais a portabilidade de dados de data e hora ou um grau limitado de reconhecimento do fuso horário seja importante, é possível usar o construtor <xref:System.DateTimeOffset> correspondente.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> construtor para instanciar um <xref:System.DateTime> valor.  
  
 [!code-csharp[System.DateTime.Constructor#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#8)]
 [!code-vb[System.DateTime.Constructor#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than 1 or greater than 9999.  -or-  <paramref name="month" /> is less than 1 or greater than 12.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than 0 or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.  -or-  <paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through the number of years in <c>calendar</c>).</param>
        <param name="month">The month (1 through the number of months in <c>calendar</c>).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="millisecond">The milliseconds (0 through 999).</param>
        <param name="calendar">The calendar that is used to interpret <c>year</c>, <c>month</c>, and <c>day</c>.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and millisecond for the specified calendar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A propriedade <xref:System.DateTime.Kind%2A> é inicializada com <xref:System.DateTimeKind.Unspecified>.  
  
 Os valores permitidos para `year`, `month`, e `day` dependem `calendar`. Uma exceção será lançada se a data e hora especificada não puder ser expressada usando-se `calendar`.  
  
 Para aplicativos nos quais a portabilidade de dados de data e hora ou um grau limitado de reconhecimento do fuso horário seja importante, é possível usar o construtor <xref:System.DateTimeOffset> correspondente.  
  
 O namespace <xref:System.Globalization> fornece vários calendários que incluem <xref:System.Globalization.GregorianCalendar> e <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 A exemplo a seguir chama o <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> construtor duas vezes para criar uma instância de dois <xref:System.DateTime> valores. A primeira chamada cria uma instância de um valor <xref:System.DateTime> usando-se um objeto <xref:System.Globalization.PersianCalendar>. Como o calendário persa não pode ser designado como o calendário padrão para uma cultura, a exibição de uma data usando-se o calendário persa requer chamadas individuais para os métodos <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> e <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType>. A segunda chamada para o construtor cria uma instância de um valor <xref:System.DateTime> usando-se um objeto <xref:System.Globalization.HijriCalendar>. O exemplo altera a cultura atual para árabe (Síria) e muda o calendário padrão da cultura atual para o calendário islâmico. Como Hijri é o calendário padrão da cultura atual, o método <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> usa-o para formatar a data. Quando a cultura atual anterior (que é inglês (Estados Unidos) nesse caso) é restaurada, o método <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> usa o calendário gregoriano padrão da cultura atual para formatar a data.  
  
 [!code-csharp[System.DateTime.Constructor#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample6.cs#6)]
 [!code-vb[System.DateTime.Constructor#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.  -or-  <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than 0 or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.  -or-  <paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * System.Globalization.Calendar * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, calendar, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through the number of years in <c>calendar</c>).</param>
        <param name="month">The month (1 through the number of months in <c>calendar</c>).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="millisecond">The milliseconds (0 through 999).</param>
        <param name="calendar">The calendar that is used to interpret <c>year</c>, <c>month</c>, and <c>day</c>.</param>
        <param name="kind">One of the enumeration values that indicates whether <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c>, <c>second</c>, and <c>millisecond</c> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time for the specified calendar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os valores permitidos para `year`, `month`, e `day` parâmetros dependem do `calendar` parâmetro. Uma exceção será lançada se a data e hora especificada não puder ser expressada usando-se `calendar`.  
  
 Para aplicativos nos quais a portabilidade de dados de data e hora ou um grau limitado de reconhecimento do fuso horário seja importante, é possível usar o construtor <xref:System.DateTimeOffset> correspondente.  
  
 O namespace <xref:System.Globalization> fornece vários calendários que incluem <xref:System.Globalization.GregorianCalendar> e <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 A exemplo a seguir chama o <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> construtor duas vezes para criar uma instância de dois <xref:System.DateTime> valores. A primeira chamada cria uma instância de um valor <xref:System.DateTime> usando-se um objeto <xref:System.Globalization.PersianCalendar>. Como o calendário persa não pode ser designado como o calendário padrão para uma cultura, a exibição de uma data usando-se o calendário persa requer chamadas individuais para os métodos <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> e <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType>. A segunda chamada para o construtor cria uma instância de um valor <xref:System.DateTime> usando-se um objeto <xref:System.Globalization.HijriCalendar>. O exemplo altera a cultura atual para árabe (Síria) e muda o calendário padrão da cultura atual para o calendário islâmico. Como Hijri é o calendário padrão da cultura atual, o método <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> usa-o para formatar a data. Quando a cultura atual anterior (que é inglês (Estados Unidos) nesse caso) é restaurada, o método <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> usa o calendário gregoriano padrão da cultura atual para formatar a data.  
  
 [!code-csharp[System.DateTime.Constructor#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample9.cs#9)]
 [!code-vb[System.DateTime.Constructor#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample9.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.  -or-  <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than 0 or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.  -or-  <paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTime Add (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Add(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Add(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Add(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; DateTime" Usage="dateTime.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">A positive or negative time interval.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the value of the specified <see cref="T:System.TimeSpan" /> to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the time interval represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode usar o <xref:System.DateTime.Add%2A> para adicionar mais de um tipo de intervalo de tempo (dias, horas, minutos, segundos ou milissegundos) em uma única operação. Comportamento desse método é idêntico ao que o operador de adição. O <xref:System.DateTime> estrutura também oferece suporte a métodos de adição especializado (como <xref:System.DateTime.AddDays%2A>, <xref:System.DateTime.AddHours%2A>, e <xref:System.DateTime.AddMinutes%2A>) para cada intervalo de tempo.  
  
 O <xref:System.DateTime.Add%2A> método leva em conta os anos bissextos e o número de dias em um mês quando realizar aritmética de data.  
  
 Este método não altera o valor desse <xref:System.DateTime>. Em vez disso, ele retorna um novo <xref:System.DateTime> cujo valor é o resultado dessa operação. O <xref:System.DateTime.Kind%2A> propriedade do novo <xref:System.DateTime> instância é a mesma que a instância atual.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.Add%2A> método. Calcula o dia da semana em que é 36 dias (horas 864) de neste momento.  
  
 [!code-cpp[DateTime.Add#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Add/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Add/CS/class1.cs#1)]
 [!code-vb[DateTime.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Add/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="M:System.TimeSpan.Add(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTime AddDays (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddDays(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddDays(double value);" />
      <MemberSignature Language="F#" Value="member this.AddDays : double -&gt; DateTime" Usage="dateTime.AddDays value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of whole and fractional days. The <c>value</c> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of days to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of days represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método não altera o valor desse <xref:System.DateTime>. Em vez disso, ele retorna um novo <xref:System.DateTime> cujo valor é o resultado dessa operação.  
  
 A parte fracionária `value` é a parte fracionária de um dia. Por exemplo, 4.5 é equivalente a 4 dias, 12 horas, 0 minutos, 0 segundos, 0 milissegundo e 0 tiques.  
  
 O parâmetro `value` é arredondado para o milissegundo mais próximo.  
  
 O <xref:System.DateTime.AddDays%2A> método leva em conta os anos bissextos e o número de dias em um mês quando realizar aritmética de data.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.AddDays%2A> método para determinar o dia da semana 36 dias depois da data atual.  
  
 [!code-cpp[DateTime.AddDays#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.AddDays/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.AddDays#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.AddDays/CS/class1.cs#1)]
 [!code-vb[DateTime.AddDays#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.AddDays/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTime AddHours (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddHours(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddHours(double value);" />
      <MemberSignature Language="F#" Value="member this.AddHours : double -&gt; DateTime" Usage="dateTime.AddHours value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of whole and fractional hours. The <c>value</c> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of hours to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of hours represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método não altera o valor desse <xref:System.DateTime>. Em vez disso, ele retorna um novo <xref:System.DateTime> cujo valor é o resultado dessa operação. O <xref:System.DateTime.Kind%2A> propriedade retornado <xref:System.DateTime> objeto é o mesmo de `value`.  
  
 A parte fracionária `value` é a parte fracionária de uma hora. Por exemplo, 4.5 é equivalente a 4 horas, 30 minutos, 0 segundos, 0 milissegundo e 0 tiques.  
  
 O parâmetro `value` é arredondado para o milissegundo mais próximo.  
  
 Converter os intervalos de tempo de menos de uma hora para uma fração pode envolver uma perda de precisão se o resultado for um decimal de repetição não fatal. (Por exemplo, um minuto é 0.016667 de uma hora). Se isso for um problema, você pode usar o <xref:System.DateTime.Add%2A> método, que permite que você especificar mais de um tipo de intervalo de tempo em uma única chamada de método e elimina a necessidade de converter os intervalos de tempo em frações partes de uma hora.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.AddHours%2A> método para adicionar um número de valores inteiros e fracionários em uma data e hora. Ele também ilustra a perda de precisão causado por passar o método um valor que inclui um componente fracionário.  
  
 [!code-csharp[System.DateTime.AddHours#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.AddHours/cs/AddHours1.cs#1)]
 [!code-vb[System.DateTime.AddHours#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.AddHours/vb/AddHours1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTime AddMilliseconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMilliseconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMilliseconds(double value);" />
      <MemberSignature Language="F#" Value="member this.AddMilliseconds : double -&gt; DateTime" Usage="dateTime.AddMilliseconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of whole and fractional milliseconds. The <c>value</c> parameter can be negative or positive. Note that this value is rounded to the nearest integer.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of milliseconds to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of milliseconds represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método não altera o valor desse <xref:System.DateTime>. Em vez disso, ele retorna um novo <xref:System.DateTime> cujo valor é o resultado dessa operação.  
  
 A parte fracionária `value` é a parte fracionária de um milissegundo. Por exemplo, 4.5 é equivalente a 4 milissegundos e 5000 tiques, onde um milissegundo = 10000 tiques.  
  
 O `value` parâmetro será arredondado para o inteiro mais próximo.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.AddMilliseconds%2A> método para adicionar um milissegundo e 1,5 milissegundos para um <xref:System.DateTime> valor. Em seguida, ele exibe cada novo valor e exibe a diferença entre ele e o valor original. A diferença é exibida como um período de tempo e um número de tiques. O exemplo deixa claro que é igual a 10.000 milissegundos. Ele também mostra que milissegundos fracionários são arredondados antes de executar a adição; o <xref:System.DateTime> valor resultante da adição de 1,5 milissegundos à data original é maiores que a data original de 2 milissegundos.  
  
 [!code-csharp[System.DateTime.AddMilliseconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmilliseconds/cs/addmilliseconds2.cs#1)]
 [!code-vb[System.DateTime.AddMilliseconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmilliseconds/vb/addmilliseconds2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTime AddMinutes (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMinutes(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMinutes(double value);" />
      <MemberSignature Language="F#" Value="member this.AddMinutes : double -&gt; DateTime" Usage="dateTime.AddMinutes value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of whole and fractional minutes. The <c>value</c> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of minutes to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of minutes represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método não altera o valor desse <xref:System.DateTime>. Em vez disso, ele retorna um novo <xref:System.DateTime> cujo valor é o resultado dessa operação.  
  
 A parte fracionária `value` é a parte fracionária de um minuto. Por exemplo, 4.5 é equivalente a 4 minutos, 30 segundos, 0 milissegundo e 0 tiques.  
  
 O parâmetro `value` é arredondado para o milissegundo mais próximo.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.AddMinutes%2A> método para adicionar um número de valores inteiros e fracionários em uma data e hora.  
  
 [!code-cpp[System.DateTime.AddMinutes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.addminutes/cpp/addminutes1.cpp#1)]
 [!code-csharp[System.DateTime.AddMinutes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addminutes/cs/addminutes1.cs#1)]
 [!code-vb[System.DateTime.AddMinutes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addminutes/vb/addminutes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTime AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMonths(int months);" />
      <MemberSignature Language="F#" Value="member this.AddMonths : int -&gt; DateTime" Usage="dateTime.AddMonths months" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">A number of months. The <c>months</c> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of months to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and <paramref name="months" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método não altera o valor deste <xref:System.DateTime> objeto. Em vez disso, ele retorna um novo <xref:System.DateTime> objeto cujo valor é o resultado dessa operação.  
  
 O <xref:System.DateTime.AddMonths%2A> método calcula resultante mês e ano, levando em conta os anos bissextos e o número de dias em um mês, em seguida, ajusta a parte do dia de resultante <xref:System.DateTime> objeto. Se o dia resultante não é um dia válido do mês resultante, o último dia válido do mês resultante será usado. Por exemplo, 31 de março + 1 mês = 30 de abril e 31 de março - 1 mês = 28 de fevereiro para um não-ano bissexto e 29 de fevereiro de um ano bissexto.  
  
 A parte de hora do dia de resultante <xref:System.DateTime> objeto permanece o mesmo que essa instância.  
  
   
  
## Examples  
 O exemplo a seguir adiciona entre zero e quinze meses até o último dia de dezembro de 2015. Nesse caso, o método AddMonths retorna a data do último dia de cada mês e manipula com êxito os anos bissextos.  
  
 [!code-csharp[System.DateTime.AddMonths#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmonths/cs/addmonths1.cs#1)]
 [!code-vb[System.DateTime.AddMonths#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmonths/vb/addmonths1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.  -or-  <paramref name="months" /> is less than -120,000 or greater than 120,000.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTime AddSeconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddSeconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddSeconds(double value);" />
      <MemberSignature Language="F#" Value="member this.AddSeconds : double -&gt; DateTime" Usage="dateTime.AddSeconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of whole and fractional seconds. The <c>value</c> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of seconds to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of seconds represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método não altera o valor desse <xref:System.DateTime>. Em vez disso, ele retorna um novo <xref:System.DateTime> cujo valor é o resultado dessa operação.  
  
 A parte fracionária `value` é a parte fracionária de segundos. Por exemplo, 4.5 é equivalente a 4 segundos, 500 milissegundos e 0 tiques.  
  
 O parâmetro `value` é arredondado para o milissegundo mais próximo.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.AddSeconds%2A> método para adicionar 30 segundos e o número de segundos em um dia para um <xref:System.DateTime> valor. Em seguida, ele exibe cada novo valor e exibe a diferença entre ele e o valor original. A diferença é exibida como um período de tempo e um número de tiques.  
  
 [!code-csharp[System.DateTime.AddSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addseconds/cs/addseconds1.cs#1)]
 [!code-vb[System.DateTime.AddSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addseconds/vb/addseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTime AddTicks (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddTicks(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (value As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddTicks(long value);" />
      <MemberSignature Language="F#" Value="member this.AddTicks : int64 -&gt; DateTime" Usage="dateTime.AddTicks value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">A number of 100-nanosecond ticks. The <c>value</c> parameter can be positive or negative.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of ticks to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the time represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método não altera o valor desse <xref:System.DateTime>. Em vez disso, ele retorna um novo <xref:System.DateTime> cujo valor é o resultado dessa operação.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Int64" />
        <altmember cref="P:System.DateTime.Ticks" />
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTime AddYears (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddYears(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (value As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddYears(int value);" />
      <MemberSignature Language="F#" Value="member this.AddYears : int -&gt; DateTime" Usage="dateTime.AddYears value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">A number of years. The <c>value</c> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of years to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of years represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método não altera o valor deste <xref:System.DateTime> objeto. Em vez disso, ele retorna um novo <xref:System.DateTime> objeto cujo valor é o resultado dessa operação.  
  
 O <xref:System.DateTime.AddYears%2A> método calcula o ano resultante levando em conta os anos bissextos. A parte do mês e a hora do dia de resultante <xref:System.DateTime> objeto permanece o mesmo que essa instância.  
  
 Se a instância atual representa o dia bissexto em um ano bissexto, o valor de retorno depende da data de destino:  
  
-   Se `value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType> também é um ano bissexto, o valor de retorno representa o dia bissexto daquele ano. Por exemplo, se quatro anos for adicionado a 29 de fevereiro de 2012, a data retornada é 29 de fevereiro de 2016.  
  
-   Se `value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType> não é um ano bissexto, o valor de retorno representa o dia antes do dia no ano bissexto. Por exemplo, se um ano é adicionado a 29 de fevereiro de 2012, a data retornada é 28 de fevereiro de 2013.  
  
 O exemplo a seguir ilustra o uso de <xref:System.DateTime.AddYears%2A> método com um <xref:System.DateTime> valor que representa um dia do ano bissexto. Ele exibe a data para quinze anos antes e quinze anos após 29 de fevereiro de 2000.  
  
 [!code-csharp[System.DateTime.AddYears#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addyears/cs/addyears1.cs#1)]
 [!code-vb[System.DateTime.AddYears#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addyears/vb/addyears1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> or the resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (t1 As DateTime, t2 As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member Compare : DateTime * DateTime -&gt; int" Usage="System.DateTime.Compare (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Compares two instances of <see cref="T:System.DateTime" /> and returns an integer that indicates whether the first instance is earlier than, the same as, or later than the second instance.</summary>
        <returns>A signed number indicating the relative values of <paramref name="t1" /> and <paramref name="t2" />.  
  
 <list type="table"><listheader><term> Value Type  </term><description> Condition  </description></listheader><item><term> Less than zero  </term><description><paramref name="t1" /> is earlier than <paramref name="t2" />.  </description></item><item><term> Zero  </term><description><paramref name="t1" /> is the same as <paramref name="t2" />.  </description></item><item><term> Greater than zero  </term><description><paramref name="t1" /> is later than <paramref name="t2" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar a relação de `t1` para `t2`, o <xref:System.DateTime.Compare%2A> método compara o <xref:System.DateTime.Ticks%2A> propriedade `t1` e `t2` , mas ignora seus <xref:System.DateTime.Kind%2A> propriedade. Antes de comparar <xref:System.DateTime> objetos, certifique-se de que os objetos representam vezes no mesmo fuso horário.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.Compare%2A> método.  
  
 [!code-csharp[System.DateTime.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.compare/cs/compare1.cs#1)]
 [!code-vb[System.DateTime.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.compare/vb/compare1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Compares the value of this instance to a specified <see cref="T:System.DateTime" /> value and indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As duas sobrecargas do <xref:System.DateTime.CompareTo%2A> método retornar um número assinado que indica o valor relativo desta instância e o `value` argumento, conforme mostrado na tabela a seguir.  
  
|Valor|Descrição|  
|-----------|-----------------|  
|Menor que zero|Essa instância é anterior a `value`.|  
|Zero|Essa instância é igual a `value`.|  
|Maior que zero|Essa instância é posterior a `value`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTime value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : DateTime -&gt; int&#xA;override this.CompareTo : DateTime -&gt; int" Usage="dateTime.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">The object to compare to the current instance.</param>
        <summary>Compares the value of this instance to a specified <see cref="T:System.DateTime" /> value and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.</summary>
        <returns>A signed number indicating the relative values of this instance and the <paramref name="value" /> parameter.  
  
 <list type="table"><listheader><term> Value  </term><description> Description  </description></listheader><item><term> Less than zero  </term><description> This instance is earlier than <paramref name="value" />.  </description></item><item><term> Zero  </term><description> This instance is the same as <paramref name="value" />.  </description></item><item><term> Greater than zero  </term><description> This instance is later than <paramref name="value" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar a relação entre a instância atual para `value`, o <xref:System.DateTime.CompareTo%2A> método compara o <xref:System.DateTime.Ticks%2A> propriedade da instância atual e `value` , mas ignora seus <xref:System.DateTime.Kind%2A> propriedade.  Antes de comparar objetos <xref:System.DateTime>, verifique se os objetos representam horas no mesmo fuso horário. Você pode fazer isso, comparando os valores de suas <xref:System.DateTime.Kind%2A> propriedades.  
  
 Implementa esse método de <xref:System.IComparable%601?displayProperty=nameWithType> interface e executa um pouco melhor do que o <xref:System.DateTime.CompareTo%28System.Object%29?displayProperty=nameWithType> sobrecarga do método porque ele não tem que converter a `value` parâmetro para um objeto.  
  
   
  
## Examples  
 O exemplo a seguir cria três <xref:System.DateTime> objetos, que representa hoje data, outro que representa a data de um ano anteriormente, e um terceiro que representa a data de um ano no futuro. Depois, ele chama o <xref:System.DateTime.CompareTo%28System.DateTime%29> método e exibe o resultado da comparação.  
  
 [!code-csharp[DateTime.CompareTo.2#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo.2/CS/CompareTo_CS1_24564.cs#1)]
 [!code-vb[DateTime.CompareTo.2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo.2/VB/CompareTo_VB1_24564.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="dateTime.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">A boxed object to compare, or <see langword="null" />.</param>
        <summary>Compares the value of this instance to a specified object that contains a specified <see cref="T:System.DateTime" /> value, and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.</summary>
        <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Value  </term><description> Description  </description></listheader><item><term> Less than zero  </term><description> This instance is earlier than <paramref name="value" />.  </description></item><item><term> Zero  </term><description> This instance is the same as <paramref name="value" />.  </description></item><item><term> Greater than zero  </term><description> This instance is later than <paramref name="value" />, or <paramref name="value" /> is <see langword="null" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar a relação entre a instância atual para `value`, o <xref:System.DateTime.CompareTo%2A> método compara o <xref:System.DateTime.Ticks%2A> propriedade da instância atual e `value` , mas ignora seus <xref:System.DateTime.Kind%2A> propriedade. Antes de comparar objetos <xref:System.DateTime>, verifique se os objetos representam horas no mesmo fuso horário. Você pode fazer isso, comparando os valores de suas <xref:System.DateTime.Kind%2A> propriedades.  
  
 Qualquer instância do <xref:System.DateTime>, independentemente de seu valor é considerado maior `null`.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.CompareTo%2A> método.  
  
 [!code-cpp[DateTime.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.CompareTo/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo/CS/class1.cs#1)]
 [!code-vb[DateTime.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> is not a <see cref="T:System.DateTime" />.</exception>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime" Usage="System.DateTime.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the date component of this instance.</summary>
        <value>Um novo objeto com a mesma data que essa instância e o valor temporal definido como meia-noite em 12:00:00 (00:00:00).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor de <xref:System.DateTime.Kind%2A> propriedade retornado <xref:System.DateTime> valor é a mesma que a instância atual.  
  
 Porque o <xref:System.DateTime> tipo representa ambas as datas e horas em um único tipo, é importante evitar má interpretação uma data retornada pelo <xref:System.DateTime.Date%2A> a propriedade como uma data e hora.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.Date%2A> propriedade para extrair o componente de data um <xref:System.DateTime> valor com seu componente de hora definida como zero (ou 0:00:00 ou meia-noite). Ele também ilustra que, dependendo da cadeia de caracteres de formato usada ao exibir o <xref:System.DateTime> valor, o componente de tempo pode continuar a aparecer na saída formatada.  
  
 [!code-cpp[System.DateTime.Date#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Date/cpp/date1.cpp#1)]
 [!code-csharp[System.DateTime.Date#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Date/cs/Date1.cs#1)]
 [!code-vb[System.DateTime.Date#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Date/vb/Date1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Day : int" Usage="System.DateTime.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the day of the month represented by this instance.</summary>
        <value>O componente do dia, expresso como um valor entre 1 e 31.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.Day%2A> propriedade sempre retorna o dia do mês do calendário gregoriano, mesmo que o atual <xref:System.DateTime> valor foi instanciado usando alguns outros calendário ou se o calendário padrão da cultura do thread atual não é o calendário gregoriano. Para recuperar o dia do mês de uma determinada data usando algum outro calendário, chame esse calendário <xref:System.Globalization.Calendar.GetDayOfMonth%2A?displayProperty=nameWithType> método. O exemplo a seguir usa o <xref:System.DateTime.Day%2A> propriedade e o <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> método para recuperar o dia do mês de um <xref:System.DateTime> valor que é instanciado usando o calendário islâmico.  
  
 [!code-csharp[System.DateTime.Day#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day1.cs#1)]
 [!code-vb[System.DateTime.Day#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day1.vb#1)]  
  
 Da mesma forma, o exemplo a seguir usa o <xref:System.DateTime.Day%2A> propriedade e o <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> método para recuperar o dia do mês em que a cultura do thread atual está ar-SA, que usa o calendário islâmico como seu calendário padrão.  
  
 [!code-csharp[System.DateTime.Day#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day2.cs#2)]
 [!code-vb[System.DateTime.Day#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day2.vb#2)]  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.Day%2A> propriedade.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfWeek : DayOfWeek" Usage="System.DateTime.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the day of the week represented by this instance.</summary>
        <value>Uma constante enumerada que indica o dia da semana desse valor <see cref="T:System.DateTime" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor de constantes no <xref:System.DayOfWeek> varia de enumeração de <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType> para <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>. Se convertido em um número inteiro, seu valor varia de zero (que indica <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>) para seis (que indica <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>).  
  
 O <xref:System.DateTime.DayOfWeek%2A> propriedade retorna uma constante enumerada; ele não reflete as configurações regionais e de idioma de um sistema. Para recuperar uma cadeia de caracteres que representa um nome localizado do dia da semana para uma determinada data, chame um das sobrecargas do <xref:System.DateTime.ToString%2A> método inclui um `format` parâmetro e passá-lo tanto o `ddd` ou `dddd` cadeias de caracteres de formato personalizado. Para obter detalhes, consulte [como: extrair o dia da semana de uma data específica](~/docs/standard/base-types/how-to-extract-the-day-of-the-week-from-a-specific-date.md).  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.DayOfWeek%2A> propriedade e o <xref:System.DayOfWeek?displayProperty=nameWithType> enumeração.  
  
 [!code-cpp[DateTime.DayOfWeek#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DayOfWeek/CPP/dow.cpp#1)]
 [!code-csharp[DateTime.DayOfWeek#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DayOfWeek/CS/dow.cs#1)]
 [!code-vb[DateTime.DayOfWeek#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DayOfWeek/VB/dow.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfYear : int" Usage="System.DateTime.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the day of the year represented by this instance.</summary>
        <value>O dia do ano, expresso como um valor entre 1 e 366.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.DayOfYear%2A> propriedade leva em conta os anos bissextos quando ela calcula o dia do ano. O valor da propriedade sempre reflete o dia do ano no calendário gregoriano, independentemente do calendário atual da cultura do thread atual. Para recuperar o dia do ano em um calendário diferente, chame o <xref:System.Globalization.Calendar.GetDayOfYear%2A?displayProperty=nameWithType> método de calendário.  
  
   
  
## Examples  
 O exemplo a seguir exibe o dia do ano de 31 de dezembro de 2010 2020 anos no calendário gregoriano. Observe que o exemplo mostra que a 31 de dezembro é o 366º dia do ano em anos bissextos.  
  
 [!code-csharp[System.DateTime.DayOfYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.dayofyear/cs/dayofyear2.cs#1)]
 [!code-vb[System.DateTime.DayOfYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.dayofyear/vb/dayofyear2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="DaysInMonth">
      <MemberSignature Language="C#" Value="public static int DaysInMonth (int year, int month);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DaysInMonth(int32 year, int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DaysInMonth (year As Integer, month As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int DaysInMonth(int year, int month);" />
      <MemberSignature Language="F#" Value="static member DaysInMonth : int * int -&gt; int" Usage="System.DateTime.DaysInMonth (year, month)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">The year.</param>
        <param name="month">The month (a number ranging from 1 to 12).</param>
        <summary>Returns the number of days in the specified month and year.</summary>
        <returns>The number of days in <paramref name="month" /> for the specified <paramref name="year" />.  For example, if <paramref name="month" /> equals 2 for February, the return value is 28 or 29 depending upon whether <paramref name="year" /> is a leap year.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.DaysInMonth%2A> método sempre interpreta `month` e `year` como o mês e ano do calendário gregoriano de calendário mesmo que o calendário gregoriano não calendário atual da cultura atual. Para obter o número de dias em um mês especificado de um calendário específico, chame esse calendário <xref:System.Globalization.Calendar.GetDaysInMonth%2A> método.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como usar o <xref:System.DateTime.DaysInMonth%2A> método para determinar o número de dias em julho de 2001, fevereiro de 1998 (um não-ano bissexto) e fevereiro de 1996 (um ano bissexto).  
  
 [!code-cpp[DateTime.DaysInMonth#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DaysInMonth/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DaysInMonth/CS/class1.cs#1)]
 [!code-vb[DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DaysInMonth/VB/class1.vb#1)]  
  
 O exemplo a seguir exibe o número de dias em cada mês do ano especificado em uma matriz de inteiros.  
  
 [!code-csharp[System.DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.daysinmonth/cs/daysinmonth3.cs#1)]
 [!code-vb[System.DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.daysinmonth/vb/daysinmonth3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="month" /> is less than 1 or greater than 12.  -or-  <paramref name="year" /> is less than 1 or greater than 9999.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a value indicating whether two <see cref="T:System.DateTime" /> objects, or a <see cref="T:System.DateTime" /> instance and another object or <see cref="T:System.DateTime" />, have the same value.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTime value);" />
      <MemberSignature Language="F#" Value="override this.Equals : DateTime -&gt; bool" Usage="dateTime.Equals value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">The object to compare to this instance.</param>
        <summary>Returns a value indicating whether the value of this instance is equal to the value of the specified <see cref="T:System.DateTime" /> instance.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="value" /> parameter equals the value of this instance; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A instância atual e `value` são iguais se seus <xref:System.DateTime.Ticks%2A> valores de propriedade são iguais. Seus <xref:System.DateTime.Kind%2A> valores de propriedade não são considerados no teste de igualdade.  
  
 Implementa esse método de <xref:System.IEquatable%601?displayProperty=nameWithType> de interface e executa um pouco melhor do que o <xref:System.DateTime.Equals%2A> método porque o `value` parâmetro não precisa ser convertido em um objeto.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.Equals%2A> método.  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dateTime.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The object to compare to this instance.</param>
        <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.DateTime" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A instância atual e `value` são iguais se seus <xref:System.DateTime.Ticks%2A> valores de propriedade são iguais. Seus <xref:System.DateTime.Kind%2A> valores de propriedade não são considerados no teste de igualdade.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.Equals%2A> método.  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member Equals : DateTime * DateTime -&gt; bool" Usage="System.DateTime.Equals (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Returns a value indicating whether two <see cref="T:System.DateTime" /> instances  have the same date and time value.</summary>
        <returns>
          <see langword="true" /> if the two values are equal; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `t1` e `t2` são iguais se seus <xref:System.DateTime.Ticks%2A> valores de propriedade são iguais. Seus <xref:System.DateTime.Kind%2A> valores de propriedade não são considerados no teste de igualdade.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.Equals%2A> método.  
  
 [!code-cpp[DateTime.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Equals/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Equals/CS/class1.cs#1)]
 [!code-vb[DateTime.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Equals/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FromBinary">
      <MemberSignature Language="C#" Value="public static DateTime FromBinary (long dateData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromBinary(int64 dateData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromBinary(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromBinary (dateData As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromBinary(long dateData);" />
      <MemberSignature Language="F#" Value="static member FromBinary : int64 -&gt; DateTime" Usage="System.DateTime.FromBinary dateData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateData" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dateData">A 64-bit signed integer that encodes the <see cref="P:System.DateTime.Kind" /> property in a 2-bit field and the <see cref="P:System.DateTime.Ticks" /> property in a 62-bit field.</param>
        <summary>Deserializes a 64-bit binary value and recreates an original serialized <see cref="T:System.DateTime" /> object.</summary>
        <returns>An object that is equivalent to the <see cref="T:System.DateTime" /> object that was serialized by the <see cref="M:System.DateTime.ToBinary" /> method.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.DateTime.ToBinary%2A> método para converter o valor atual <xref:System.DateTime> objeto para um valor binário. Em seguida, usar o valor binário e o <xref:System.DateTime.FromBinary%2A> método para recriar o original <xref:System.DateTime> objeto.  
  
> [!IMPORTANT]
>  Em alguns casos, o <xref:System.DateTime> valor retornado pelo <xref:System.DateTime.FromBinary%2A> método não é idêntico ao valor original <xref:System.DateTime> valor fornecido para o <xref:System.DateTime.ToBinary%2A> método. Para obter mais informações, consulte a próxima seção, "Ajuste de horário Local".  
  
## <a name="local-time-adjustment"></a>Ajuste de hora local  
 A hora local, que é um Coordinated Universal Time ajustado para o fuso horário local, é representada por um <xref:System.DateTime> estrutura cujo <xref:System.DateTime.Kind%2A> propriedade possui o valor <xref:System.DateTimeKind.Local>. Ao restaurar um local <xref:System.DateTime> valor a partir da representação binária que é produzida pelo <xref:System.DateTime.ToBinary%2A> método, o <xref:System.DateTime.FromBinary%2A> método pode ajustar o valor recriado para que ele não é igual ao valor original. Isso pode ocorrer nas seguintes condições:  
  
-   Se um local <xref:System.DateTime> o objeto é serializado em um fuso horário, o <xref:System.DateTime.ToBinary%2A> método e então desserializado em um fuso horário diferente, o <xref:System.DateTime.FromBinary%2A> método, a hora local representado pela resultante <xref:System.DateTime> objeto é automaticamente ajustado para o segundo fuso horário.  
  
     Por exemplo, considere um <xref:System.DateTime> objeto que representa a hora local de 15. Um aplicativo que está em execução nos EUA. Fuso horário do Pacífico usa o <xref:System.DateTime.ToBinary%2A> método para converter que <xref:System.DateTime> objeto para um valor binário. Outro aplicativo está em execução nos EUA. Fuso horário do Leste dos EUA, em seguida, usa o <xref:System.DateTime.FromBinary%2A> método para converter o valor binário em um novo <xref:System.DateTime> objeto. O valor do novo <xref:System.DateTime> objeto é 18: 00, que representa o mesmo ponto no tempo em que o original 15: 00 valor, mas é ajustado para horário local no fuso horário do Leste dos EUA.  
  
-   Se a representação binária de um local <xref:System.DateTime> valor representa um período inválido no fuso horário local do sistema no qual <xref:System.DateTime.FromBinary%2A> é chamado, o tempo é ajustado para que ele é válido.  
  
     Por exemplo, ocorre a transição do horário padrão do horário de verão no fuso horário do Pacífico dos Estados Unidos na 14 de março de 2010, às 2:00, quando o tempo avança em uma hora para 3:00 Este intervalo de hora é uma hora inválida, ou seja, um intervalo de hora que não existe nesse fuso horário. O exemplo a seguir mostra que, quando uma hora que esteja dentro desse intervalo é convertido em um valor binário, o <xref:System.DateTime.ToBinary%2A> método e então é restaurada o <xref:System.DateTime.FromBinary%2A> método, o valor original é ajustado para se tornar uma hora válida. É possível determinar se um valor de data e hora específico podem estar sujeito à modificação passando-o para o método <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType>, como o exemplo ilustra.  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>Considerações da versão  
 Iniciando com o .NET Framework versão 2.0, um <xref:System.DateTime> estrutura consiste em um campo de tipo particular, o que indica se a hora especificada é hora local, Tempo Universal Coordenado (UTC) ou nenhum dos dois, concatenado a um campo particular de tiques, que contém o número de tiques de 100 nanossegundos que especifique uma data e hora. O número de tiques pode ser acessado com o <xref:System.DateTime.Ticks%2A> campo de propriedade e theKind pode ser acessado com o <xref:System.DateTime.Kind%2A> propriedade.  
  
 Antes do .NET Framework 2.0, se você serializado uma <xref:System.DateTime> objeto manualmente, em vez de usar uma interface de serialização, como <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>, necessários para serializar apenas os dados de tiques no <xref:System.DateTime>. Começando com o .NET Framework 2.0, você também deve serializar os dados do tipo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateData" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.ToBinary" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTime(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTime : int64 -&gt; DateTime" Usage="System.DateTime.FromFileTime fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">A Windows file time expressed in ticks.</param>
        <summary>Converts the specified Windows file time to an equivalent local time.</summary>
        <returns>An object that represents the local time equivalent of the date and time represented by the <paramref name="fileTime" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma hora de arquivo do Windows é um valor de 64 bits que representa o número de intervalos de 100 nanossegundos desde a meia-noite de 12h00, 1º de janeiro de 1601 A.D. (C.E.) Tempo Universal Coordenado (UTC). O Windows usa uma hora de arquivo a ser registrada quando um aplicativo cria, acessa ou grava em um arquivo.  
  
 O `fileTime` parâmetro especifica um horário de arquivo expressado em tiques de 100 nanossegundos.  
  
 Iniciando com o .NET Framework versão 2.0, o valor retornado é um <xref:System.DateTime> cujo <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.FromFileTime%2A> método.  
  
 [!code-cpp[DateTime.FromFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.FromFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.FromFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.FromFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="fileTime" /> is less than 0 or represents a time greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <block subset="none" type="usage">
          <para>Em geral, o <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> método restaurações um <see cref="T:System.DateTime" /> valor que foi salvo pelo <see cref="M:System.DateTime.ToFileTime" /> método. No entanto, os dois valores podem diferir sob as seguintes condições: - se a serialização e desserialização do <see cref="T:System.DateTime" /> ocorrer em fusos horários diferentes. Por exemplo, se um <see cref="T:System.DateTime" /> valor com uma hora de 12:30 PM nos EUA. Fuso horário do Leste dos EUA é serializado e desserializado nos EUA. Fuso horário do Pacífico, o valor original de 12:30 PM é ajustado para 9:30 da manhã para refletir a diferença entre os dois fusos horários.  -Se a <see cref="T:System.DateTime" /> valor é serializado representa um período inválido no fuso horário local. Nesse caso, o <see cref="M:System.DateTime.ToFileTime" /> método ajusta restaurado <see cref="T:System.DateTime" /> valor para que ele representa uma hora válida no fuso horário local.  Por exemplo, a transição do horário padrão para o horário de verão ocorre nos EUA. Fuso horário do Pacífico na 14 de março de 2010, às 2:00, quando o tempo avança em uma hora para 3:00 Este intervalo de hora é uma hora inválida, ou seja, um intervalo de hora que não existe nesse fuso horário. O exemplo a seguir mostra que, quando uma hora que esteja dentro desse intervalo é convertido em um valor inteiro longo com o <see cref="M:System.DateTime.ToFileTime" /> método e então é restaurada o <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> método, o valor original é ajustado para se tornar uma hora válida. Você pode determinar se um determinado valor de data e hora podem estar sujeito a modificação, passando-o para o <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> método, como mostra o exemplo.  [! code-csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)] [! code-vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTimeUtc (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTimeUtc(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTimeUtc(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTimeUtc (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTimeUtc(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTimeUtc : int64 -&gt; DateTime" Usage="System.DateTime.FromFileTimeUtc fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">A Windows file time expressed in ticks.</param>
        <summary>Converts the specified Windows file time to an equivalent UTC time.</summary>
        <returns>An object that represents the UTC time equivalent of the date and time represented by the <paramref name="fileTime" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma hora de arquivo do Windows é um valor de 64 bits que representa o número de intervalos de 100 nanossegundos desde a meia-noite de 12h00, 1º de janeiro de 1601 A.D. (C.E.) Tempo Universal Coordenado (UTC). O Windows usa uma hora de arquivo a ser registrada quando um aplicativo cria, acessa ou grava em um arquivo.  
  
 O `fileTime` parâmetro especifica um horário de arquivo expressado em tiques de 100 nanossegundos.  
  
 Iniciando com o .NET Framework versão 2.0, o valor retornado é um <xref:System.DateTime> cujo <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Utc>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="fileTime" /> is less than 0 or represents a time greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.DateTime.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FromOADate">
      <MemberSignature Language="C#" Value="public static DateTime FromOADate (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromOADate(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromOADate(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromOADate (d As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromOADate(double d);" />
      <MemberSignature Language="F#" Value="static member FromOADate : double -&gt; DateTime" Usage="System.DateTime.FromOADate d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">An OLE Automation Date value.</param>
        <summary>Returns a <see cref="T:System.DateTime" /> equivalent to the specified OLE Automation Date.</summary>
        <returns>An object that represents the same date and time as <paramref name="d" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `d` parâmetro é um número de ponto flutuante de precisão dupla que representa uma data como o número de dias antes ou depois da data de base, meia-noite, 30 de dezembro de 1899. A parte de entrada e integral de `d` codificar a data como um deslocamento de dia positivo ou negativo de 30 de dezembro de 1899 e o valor absoluto da parte fracionária `d` codifica a hora do dia como uma fração de um deslocamento de dia de meia-noite. `d` deve ser um valor entre 657435.0 negativo por meio de 2958465.99999999 positivo.  
  
 Observe que, por causa da forma como as datas são codificadas, há duas maneiras de representar qualquer hora do dia em 30 de dezembro de 1899. Por exemplo, -0,5 e 0,5 significam o meio-dia 30 de dezembro de 1899 porque um deslocamento de dia de mais ou menos zero dias a partir da data base ainda é a data de base e um deslocamento de meio dia de meia-noite é o meio-dia.  
  
 Consulte <xref:System.DateTime.ToOADate%2A> para obter mais informações sobre a automação OLE.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The date is not a valid OLE Automation Date value.</exception>
        <altmember cref="M:System.DateTime.ToOADate" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDateTimeFormats">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the value of this instance to all the string representations supported by the standard date and time format specifiers.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Você não deve presumir que várias chamadas para o <xref:System.DateTime.GetDateTimeFormats%2A> sobrecargas retornará dados idênticos. Dependendo da sobrecarga específica, os dados retornados por este método podem alterar se as alterações de cultura atual, o usuário substitui as configurações culturais individuais, ou se ocorrer uma atualização para os dados do sistema culturais.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats();" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : unit -&gt; string[]" Usage="dateTime.GetDateTimeFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of this instance to all the string representations supported by the standard date and time format specifiers.</summary>
        <returns>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A matriz de cadeia de caracteres retornada pelo <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType> método é equivalente ao combinar as matrizes de cadeia de caracteres retornadas por chamadas separadas para o <xref:System.DateTime.GetDateTimeFormats%28System.Char%29?displayProperty=nameWithType> método com o "d", "D", "f", "F", "g", "G", "m", "o", "r", "s", "t", "T", "u", "U" e "y" cadeias de caracteres de formato padrão. Para obter mais informações sobre especificadores de formato padrão, consulte [padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Cada elemento do valor retornado é formatado usando informações da cultura atual. Para obter mais informações sobre informações de formatação de cultura específica para a cultura atual, consulte <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
> [!IMPORTANT]
>  Como esse método usa dados sensíveis à cultura, você não deve presumir que várias chamadas para o método retornará dados idênticos. Os dados retornados por este método podem alterar se as alterações de cultura atual, o usuário substitui as configurações culturais individuais, ou se ocorrer uma atualização para os dados do sistema culturais.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType> método. Ele exibe a representação de cadeia de caracteres de uma data usando todos os possíveis padrão formatos de data e hora na cultura atual do computador, que nesse caso é en-US.  
  
 [!code-cpp[DateTime.GetDateTimeFormats#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.GetDateTimeFormats#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#1)]
 [!code-vb[DateTime.GetDateTimeFormats#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#1)]  
  
 O exemplo exibe a saída a seguir:  
  
```  
7/28/2009  
7/28/09  
07/28/09  
07/28/2009  
09/07/28  
2009-07-28  
28-Jul-09  
Tuesday, July 28, 2009  
July 28, 2009  
Tuesday, 28 July, 2009  
28 July, 2009  
Tuesday, July 28, 2009 5:23 AM  
Tuesday, July 28, 2009 05:23 AM  
Tuesday, July 28, 2009 5:23  
Tuesday, July 28, 2009 05:23  
July 28, 2009 5:23 AM  
July 28, 2009 05:23 AM  
July 28, 2009 5:23  
July 28, 2009 05:23  
Tuesday, 28 July, 2009 5:23 AM  
Tuesday, 28 July, 2009 05:23 AM  
Tuesday, 28 July, 2009 5:23  
Tuesday, 28 July, 2009 05:23  
28 July, 2009 5:23 AM  
28 July, 2009 05:23 AM  
28 July, 2009 5:23  
28 July, 2009 05:23  
Tuesday, July 28, 2009 5:23:15 AM  
Tuesday, July 28, 2009 05:23:15 AM  
Tuesday, July 28, 2009 5:23:15  
Tuesday, July 28, 2009 05:23:15  
July 28, 2009 5:23:15 AM  
July 28, 2009 05:23:15 AM  
July 28, 2009 5:23:15  
July 28, 2009 05:23:15  
Tuesday, 28 July, 2009 5:23:15 AM  
Tuesday, 28 July, 2009 05:23:15 AM  
Tuesday, 28 July, 2009 5:23:15  
Tuesday, 28 July, 2009 05:23:15  
28 July, 2009 5:23:15 AM  
28 July, 2009 05:23:15 AM  
28 July, 2009 5:23:15  
28 July, 2009 05:23:15  
7/28/2009 5:23 AM  
7/28/2009 05:23 AM  
7/28/2009 5:23  
7/28/2009 05:23  
7/28/09 5:23 AM  
7/28/09 05:23 AM  
7/28/09 5:23  
7/28/09 05:23  
07/28/09 5:23 AM  
07/28/09 05:23 AM  
07/28/09 5:23  
07/28/09 05:23  
07/28/2009 5:23 AM  
07/28/2009 05:23 AM  
07/28/2009 5:23  
07/28/2009 05:23  
09/07/28 5:23 AM  
09/07/28 05:23 AM  
09/07/28 5:23  
09/07/28 05:23  
2009-07-28 5:23 AM  
2009-07-28 05:23 AM  
2009-07-28 5:23  
2009-07-28 05:23  
28-Jul-09 5:23 AM  
28-Jul-09 05:23 AM  
28-Jul-09 5:23  
28-Jul-09 05:23  
7/28/2009 5:23:15 AM  
7/28/2009 05:23:15 AM  
7/28/2009 5:23:15  
7/28/2009 05:23:15  
7/28/09 5:23:15 AM  
7/28/09 05:23:15 AM  
7/28/09 5:23:15  
7/28/09 05:23:15  
07/28/09 5:23:15 AM  
07/28/09 05:23:15 AM  
07/28/09 5:23:15  
07/28/09 05:23:15  
07/28/2009 5:23:15 AM  
07/28/2009 05:23:15 AM  
07/28/2009 5:23:15  
07/28/2009 05:23:15  
09/07/28 5:23:15 AM  
09/07/28 05:23:15 AM  
09/07/28 5:23:15  
09/07/28 05:23:15  
2009-07-28 5:23:15 AM  
2009-07-28 05:23:15 AM  
2009-07-28 5:23:15  
2009-07-28 05:23:15  
28-Jul-09 5:23:15 AM  
28-Jul-09 05:23:15 AM  
28-Jul-09 5:23:15  
28-Jul-09 05:23:15  
July 28  
July 28  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
5:23 AM  
05:23 AM  
5:23  
05:23  
5:23:15 AM  
05:23:15 AM  
5:23:15  
05:23:15  
2009-07-28 05:23:15Z  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15  
Tuesday, July 28, 2009 12:23:15  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15  
July 28, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15  
28 July, 2009 12:23:15  
July, 2009  
July, 2009  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : char -&gt; string[]" Usage="dateTime.GetDateTimeFormats format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="format">A standard date and time format string.</param>
        <summary>Converts the value of this instance to all the string representations supported by the specified standard date and time format specifier.</summary>
        <returns>A string array where each element is the representation of the value of this instance formatted with the <paramref name="format" /> standard date and time format specifier.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `format` parâmetro pode ser qualquer um dos especificadores de formato de hora e data padrão. Isso inclui d, D, f, F, g, G, M (ou m) O (ou o), R (ou r), s, t, T, u, U e Y (ou y). Para obter mais informações, consulte [padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Cada elemento do valor retornado é formatado usando informações da cultura atual. Para obter mais informações sobre informações de formatação de cultura específica para a cultura atual, consulte <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
> [!IMPORTANT]
>  Como esse método usa dados sensíveis à cultura, você não deve presumir que várias chamadas para o método retornará dados idênticos. Os dados retornados por este método podem alterar se as alterações de cultura atual, o usuário substitui as configurações culturais individuais, ou se ocorrer uma atualização para os dados do sistema culturais.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.GetDateTimeFormats%28System.Char%29> método. Ele exibe a representação de cadeia de caracteres de uma data usando o especificador de formato de data por extenso ("D") para a cultura atual.  
  
 [!code-csharp[DateTime.GetDateTimeFormats#3](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#3)]
 [!code-vb[DateTime.GetDateTimeFormats#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is not a valid standard date and time format specifier character.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : IFormatProvider -&gt; string[]" Usage="dateTime.GetDateTimeFormats provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that supplies culture-specific formatting information about this instance.</param>
        <summary>Converts the value of this instance to all the string representations supported by the standard date and time format specifiers and the specified culture-specific formatting information.</summary>
        <returns>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A matriz de cadeia de caracteres retornada pelo <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType> método é equivalente ao combinar as matrizes de cadeia de caracteres retornadas por chamadas separadas para o <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método com o "d", "D", "f", "F", "g", "G", "m", "o", "r", "s", "t", "T", "u", "U" e "y" cadeias de caracteres de formato padrão. Para obter mais informações sobre especificadores de formato padrão, consulte [padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Cada elemento do valor retornado é formatado usando informações específicas de cultura fornecidas pelo `provider`.  
  
> [!IMPORTANT]
>  Como esse método usa dados sensíveis à cultura, você não deve presumir que várias chamadas para o método retornará dados idênticos, a menos que `provider` é um <xref:System.Globalization.CultureInfo> objeto que representa a cultura invariável. Os dados retornados por este método podem alterar se o usuário substitui as configurações culturais individuais de `provider` ou se ocorrer uma atualização para os dados do sistema culturais para `provider`.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType> método. Ele exibe a representação de cadeia de caracteres de uma data usando todos os possíveis padrão formatos de data e hora para a cultura fr-FR.  
  
 [!code-cpp[DateTime.GetDateTimeFormats#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#2)]
 [!code-csharp[DateTime.GetDateTimeFormats#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#2)]
 [!code-vb[DateTime.GetDateTimeFormats#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#2)]  
  
 O exemplo exibe a saída a seguir:  
  
```  
28/07/2009  
28/07/09  
28.07.09  
28-07-09  
2009-07-28  
mardi 28 juillet 2009  
28 juil. 09  
28 juillet 2009  
mardi 28 juillet 2009 05:23  
mardi 28 juillet 2009 5:23  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23  
28 juil. 09 5:23  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23  
28 juillet 2009 5:23  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
mardi 28 juillet 2009 05:23:15  
mardi 28 juillet 2009 5:23:15  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23:15  
28 juil. 09 5:23:15  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23:15  
28 juillet 2009 5:23:15  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
28/07/2009 05:23  
28/07/2009 5:23  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23  
28/07/09 5:23  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23  
28.07.09 5:23  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23  
28-07-09 5:23  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23  
2009-07-28 5:23  
2009-07-28 05.23  
2009-07-28 05 h 23  
28/07/2009 05:23:15  
28/07/2009 5:23:15  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23:15  
28/07/09 5:23:15  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23:15  
28.07.09 5:23:15  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23:15  
28-07-09 5:23:15  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23:15  
2009-07-28 5:23:15  
2009-07-28 05.23  
2009-07-28 05 h 23  
28 juillet  
28 juillet  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
05:23  
5:23  
05.23  
05 h 23  
05:23:15  
5:23:15  
05.23  
05 h 23  
2009-07-28 05:23:15Z  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12.23  
mardi 28 juillet 2009 12 h 23  
28 juil. 09 12:23:15  
28 juil. 09 12:23:15  
28 juil. 09 12.23  
28 juil. 09 12 h 23  
28 juillet 2009 12:23:15  
28 juillet 2009 12:23:15  
28 juillet 2009 12.23  
28 juillet 2009 12 h 23  
juillet 2009  
juillet 2009  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char, provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : char * IFormatProvider -&gt; string[]" Usage="dateTime.GetDateTimeFormats (format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">A date and time format string.</param>
        <param name="provider">An object that supplies culture-specific formatting information about this instance.</param>
        <summary>Converts the value of this instance to all the string representations supported by the specified standard date and time format specifier and culture-specific formatting information.</summary>
        <returns>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O parâmetro de formato pode ser qualquer um dos especificadores de formato de hora e data padrão. Isso inclui d, D, f, F, g, G, M (ou m) O (ou o), R (ou r), s, t, T, u, U e Y (ou y). Para obter mais informações, consulte [padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Cada elemento do valor retornado é formatado usando informações específicas de cultura fornecidas pelo `provider`.  
  
> [!IMPORTANT]
>  Como esse método usa dados sensíveis à cultura, você não deve presumir que várias chamadas para o método retornará dados idênticos, a menos que `provider` é um <xref:System.Globalization.CultureInfo> objeto que representa a cultura invariável. Os dados retornados por este método podem alterar se o usuário substitui as configurações culturais individuais de `provider` ou se ocorrer uma atualização para os dados do sistema culturais para `provider`.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29> método. Ele exibe as representações de cadeia de caracteres de uma data usando o especificador de formato de data abreviada ("d") para a cultura fr-FR.  
  
 [!code-csharp[DateTime.GetDateTimeFormats#4](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#4)]
 [!code-vb[DateTime.GetDateTimeFormats#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is not a valid standard date and time format specifier character.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dateTime.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the hash code for this instance.</summary>
        <returns>A 32-bit signed integer hash code.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="dateTime.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.DateTime" />.</summary>
        <returns>The enumerated constant, <see cref="F:System.TypeCode.DateTime" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hour : int" Usage="System.DateTime.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the hour component of the date represented by this instance.</summary>
        <value>O componente de hora, expresso como um valor entre 0 e 23.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor de <xref:System.DateTime.Hour%2A> propriedade sempre é expressa usando um relógio de 24 horas. Para recuperar uma cadeia de caracteres que representa a hora de uma data e hora usando um relógio de 12 horas, chame o <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> ou <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método com o especificador de formato personalizado "h". Por exemplo:  
  
 [!code-csharp[System.DateTime.Hour#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Hour/cs/Hour1.cs#1)]
 [!code-vb[System.DateTime.Hour#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Hour/vb/Hour1.vb#1)]  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.Hour%2A> propriedade.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDaylightSavingTime () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime();" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : unit -&gt; bool" Usage="dateTime.IsDaylightSavingTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether this instance of <see cref="T:System.DateTime" /> is within the daylight saving time range for the current time zone.</summary>
        <returns>
          <see langword="true" /> if the value of the <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Local" /> or <see cref="F:System.DateTimeKind.Unspecified" /> and the value of this instance of <see cref="T:System.DateTime" /> is within the daylight saving time range for the local time zone; <see langword="false" /> if <see cref="P:System.DateTime.Kind" /> is <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método determina se o atual <xref:System.DateTime> valor fica dentro do intervalo de horário de verão do fuso horário local, que é retornado pelo <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> propriedade. Você pode determinar se um fuso horário dá suporte a horário de verão, recuperando o valor de seu <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A?displayProperty=nameWithType> propriedade. Para fusos horários que observam o horário de verão, você pode determinar que ocorre a transição para e a partir do horário de verão, recuperando o <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> matriz retornada por do fuso horário <xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=nameWithType> propriedade.  
  
 Se o atual <xref:System.DateTime> valor representa um ambíguas ou um horário inválido no fuso horário local, o método retornará `false`.  
  
 Em [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemas, o <xref:System.DateTime.IsDaylightSavingTime%2A> método reconhece somente a regra de ajuste atual ao determinar se a instância atual é um horário de verão. Como resultado, o método pode não relatar com precisão se a instância atual é um horário de verão para períodos antes da regra de ajuste atual foi originada em vigor.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsLeapYear">
      <MemberSignature Language="C#" Value="public static bool IsLeapYear (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLeapYear(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsLeapYear(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLeapYear (year As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLeapYear(int year);" />
      <MemberSignature Language="F#" Value="static member IsLeapYear : int -&gt; bool" Usage="System.DateTime.IsLeapYear year" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">A 4-digit year.</param>
        <summary>Returns an indication whether the specified year is a leap year.</summary>
        <returns>
          <see langword="true" /> if <paramref name="year" /> is a leap year; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year` é especificado como um número 10 base de 4 dígitos; Por exemplo, 1996.  
  
 `year` sempre será interpretado como um ano no calendário gregoriano. Para determinar se um determinado ano foi um ano bissexto em alguns outros calendário, chame esse objeto de calendário `IsLeapYear` método.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.IsLeapYear%2A> método para determinar qual anos entre 1994 e 2014 anos bissextos. O exemplo também ilustra o resultado quando o <xref:System.DateTime.AddYears%2A> método é usado para adicionar um ano em um dia bissexto.  
  
 [!code-csharp[System.DateTime.IsLeapYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/cs/IsLeapYear1.cs#1)]
 [!code-vb[System.DateTime.IsLeapYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/vb/IsLeapYear1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than 1 or greater than 9999.</exception>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public DateTimeKind Kind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeKind Kind" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Kind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Kind As DateTimeKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTimeKind Kind { DateTimeKind get(); };" />
      <MemberSignature Language="F#" Value="member this.Kind : DateTimeKind" Usage="System.DateTime.Kind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the time represented by this instance is based on local time, Coordinated Universal Time (UTC), or neither.</summary>
        <value>Um dos valores de enumeração que indica o que a hora atual representa. O padrão é <see cref="F:System.DateTimeKind.Unspecified" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode definir explicitamente o <xref:System.DateTime.Kind%2A> propriedade de um novo <xref:System.DateTime> valor para um determinado <xref:System.DateTimeKind> valor chamando o <xref:System.DateTime.SpecifyKind%2A> método.  
  
 O <xref:System.DateTime.Kind%2A> propriedade permite que uma <xref:System.DateTime> valor para refletir claramente o tempo Universal Coordenado (UTC) ou a hora local. Em contraste, o <xref:System.DateTimeOffset> estrutura inequivocamente pode refletir qualquer hora em qualquer fuso horário como um único ponto no tempo.  
  
   
  
## Examples  
 O exemplo a seguir usa o método <xref:System.DateTime.SpecifyKind%2A> para demonstrar como a propriedade <xref:System.DateTime.Kind%2A> influencia os métodos de conversão <xref:System.DateTime.ToLocalTime%2A> e <xref:System.DateTime.ToUniversalTime%2A>.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : DateTime" Usage="System.DateTime.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the largest possible value of <see cref="T:System.DateTime" />. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor desta constante é equivalente a 23:59:59.9999999 UTC, 31 de dezembro de 9999 no calendário gregoriano, exatamente uma escala de 100 nanossegundos antes 00:00:00 UTC, 1 de janeiro de 10000.  
  
 Alguns calendários, como o <xref:System.Globalization.ThaiBuddhistCalendar>, dar suporte a um intervalo de datas superior anterior <xref:System.DateTime.MaxValue>. Nesses casos, ao tentar acessar <xref:System.DateTime.MaxValue> em atribuições de variável ou formatação e análise de operações pode lançar um <xref:System.ArgumentOutOfRangeException>. Em vez de recuperar o valor de <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, você pode recuperar o valor do valor de data válida mais recente da cultura especificada do <xref:System.Globalization.Calendar.MaxSupportedDateTime?displayProperty=nameWithType> propriedade.  
  
   
  
## Examples  
 O exemplo a seguir cria um <xref:System.DateTime> objeto passando seu construtor um <xref:System.Int64> valor que representa o número de tiques. Antes de chamar o construtor, o exemplo garante que esse valor é maior que ou igual a `DateTime.MinValue.Ticks` e menor ou igual a `DateTime.MaxValue.Ticks`. Se não, ele lança um <xref:System.ArgumentOutOfRangeException>.  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.DateTime.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Millisecond : int" Usage="System.DateTime.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the milliseconds component of the date represented by this instance.</summary>
        <value>O componente de milissegundos, expresso como um valor entre 0 e 999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode exibir a representação de cadeia de caracteres da <xref:System.DateTime.Millisecond%2A> propriedade usando o especificador de formato "fff". Por exemplo, o código a seguir exibe uma cadeia de caracteres que contém o número de milissegundos em uma data e hora para o console.  
  
 [!code-csharp[System.DateTime.Millisecond#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#1)]
 [!code-vb[System.DateTime.Millisecond#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#1)]  
  
 Você também pode exibir o componente de milissegundo junto com os outros componentes de um valor de data e hora usando o especificador de formato padrão de "o". Por exemplo:  
  
 [!code-csharp[System.DateTime.Millisecond#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#2)]
 [!code-vb[System.DateTime.Millisecond#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#2)]  
  
 No entanto, o especificador de formato "o" destina menor para a exibição de ciclo ou armazenar um <xref:System.DateTime> valor. Também é possível exibir milissegundos junto com outros componentes de data e hora usando uma cadeia de caracteres de formato personalizado, como mostra o exemplo a seguir.  
  
 [!code-csharp[System.DateTime.Millisecond#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#3)]
 [!code-vb[System.DateTime.Millisecond#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#3)]  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.Millisecond%2A> propriedade.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minute : int" Usage="System.DateTime.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the minute component of the date represented by this instance.</summary>
        <value>O componente de minuto, expresso como um valor entre 0 e 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.Minute%2A> propriedade.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : DateTime" Usage="System.DateTime.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the smallest possible value of <see cref="T:System.DateTime" />. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor dessa constante é equivalente a 00:00:00.0000000 UTC, 1 de janeiro, 0001 no calendário gregoriano.  
  
 <xref:System.DateTime.MinValue> Define a data e a hora em que é atribuído a uma não inicializada <xref:System.DateTime> variável. O exemplo a seguir ilustra essa situação.  
  
 [!code-csharp[System.DateTime.MinValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#1)]
 [!code-vb[System.DateTime.MinValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#1)]  
  
 O <xref:System.DateTime.MinValue> e <xref:System.DateTime.MaxValue> propriedades podem ser usadas para garantir que um valor fica dentro do intervalo com suporte antes de passá-lo para um <xref:System.DateTime> construtor. O código na seção de exemplo ilustra esse uso.  
  
   
  
## Examples  
 O exemplo a seguir cria um <xref:System.DateTime> objeto passando seu construtor um <xref:System.Int64> valor que representa o número de tiques. Antes de chamar o construtor, o exemplo garante que esse valor é maior que ou igual a `DateTime.MinValue.Ticks` e menor ou igual a `DateTime.MaxValue.Ticks`. Se não, ele lança um <xref:System.ArgumentOutOfRangeException>.  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Month : int" Usage="System.DateTime.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the month component of the date represented by this instance.</summary>
        <value>O componente de mês, expresso como um valor entre 1 e 12.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.Month%2A> propriedade.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTime" Usage="System.DateTime.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed as the local time.</summary>
        <value>Um objeto cujo valor é a data e hora locais atuais.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.Now%2A> propriedade retorna um <xref:System.DateTime> valor que representa a data e hora atuais no computador local. Observe que há uma diferença entre um <xref:System.DateTime> valor, que representa o número de tiques que passaram desde a meia-noite de 1º de janeiro, 0001, e a representação de cadeia de caracteres do que <xref:System.DateTime> valor, que expressa um valor de data e hora em um formato de específicos de cultura específica. Para obter informações sobre formatação de valores de data e hora, consulte o <xref:System.DateTime.ToString%2A> método. O exemplo a seguir exibe a cadeia de caracteres de hora e data abreviada em vários formatos específicos de cultura.  
  
 [!code-cpp[System.DateTime.Now#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now1.cpp#2)]
 [!code-csharp[System.DateTime.Now#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now1.cs#2)]
 [!code-vb[System.DateTime.Now#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now1.vb#2)]  
  
 A resolução dessa propriedade depende do timer do sistema, que depende do sistema operacional subjacente. Ela costuma ser entre 0,5 e 15 milissegundos. Como resultado, repetidas chamadas para o <xref:System.DateTime.Now%2A> propriedade em um intervalo de tempo curto, como em um loop, pode retornar o mesmo valor.  
  
 O <xref:System.DateTime.Now%2A> propriedade frequentemente é usada para medir o desempenho. No entanto, devido a sua baixa resolução, não é adequado para uso como uma ferramenta de avaliação. Uma alternativa melhor é usar o <xref:System.Diagnostics.Stopwatch> classe.  
  
 Iniciando com o .NET Framework versão 2.0, o valor retornado é um <xref:System.DateTime> cujo <xref:System.DateTime.Kind%2A> propriedade retorna <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Você também pode usar o <xref:System.DateTimeOffset.Now%2A?displayProperty=nameWithType> propriedade para recuperar o local data e hora atuais. Ele permite que a hora local seja inequivocamente expresso como um único ponto no tempo, o que torna esse valor de tempo portáteis entre computadores.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.Now%2A> e <xref:System.DateTime.UtcNow%2A> propriedades para recuperar a data e hora local atual e o atual universal coordenada data e hora (UTC). Ele usa as convenções de formatação de um número de culturas para exibir as cadeias de caracteres, juntamente com os valores da seus <xref:System.DateTime.Kind%2A> propriedades.  
  
 [!code-cpp[System.DateTime.Now#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now2.cpp#3)]
 [!code-csharp[System.DateTime.Now#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now2.cs#3)]
 [!code-vb[System.DateTime.Now#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now2.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
        <altmember cref="P:System.DateTime.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTime operator + (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Addition(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator +(DateTime d, TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTime * TimeSpan -&gt; DateTime" Usage="d + t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">The date and time value to add.</param>
        <param name="t">The time interval to add.</param>
        <summary>Adds a specified time interval to a specified date and time, yielding a new date and time.</summary>
        <returns>An object that is the sum of the values of <paramref name="d" /> and <paramref name="t" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[O método equivalente para esse operador é <xref:System.DateTime.Add%28System.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 O exemplo a seguir demonstra o operador de adição.  
  
 [!code-cpp[DateTime Operators#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#1)]
 [!code-csharp[DateTime Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#1)]
 [!code-vb[DateTime Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.DateTime.Ticks" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : DateTime * DateTime -&gt; bool" Usage="d1 = d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">The first object to compare.</param>
        <param name="d2">The second object to compare.</param>
        <summary>Determines whether two specified instances of <see cref="T:System.DateTime" /> are equal.</summary>
        <returns>
          <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> represent the same date and time; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.op_Equality%2A> operador determina se dois <xref:System.DateTime> valores são iguais comparando o número de tiques. Antes de comparar objetos <xref:System.DateTime>, verifique se os objetos representam horas no mesmo fuso horário. É possível fazer isso comparando-se os valores da propriedade <xref:System.DateTime.Kind%2A>.  
  
 O método equivalente para esse operador é <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>  
  
## Examples  
 O exemplo a seguir demonstra o operador de igualdade.  
  
 [!code-cpp[DateTime Operators#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#2)]
 [!code-csharp[DateTime Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#2)]
 [!code-vb[DateTime Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : DateTime * DateTime -&gt; bool" Usage="t1 &gt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTime" /> is later than another specified <see cref="T:System.DateTime" />.</summary>
        <returns>
          <see langword="true" /> if <paramref name="t1" /> is later than <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.op_GreaterThan%2A> operador determina a relação entre duas <xref:System.DateTime> valores comparando o número de tiques. Antes de comparar objetos <xref:System.DateTime>, verifique se os objetos representam horas no mesmo fuso horário. É possível fazer isso comparando-se os valores da propriedade <xref:System.DateTime.Kind%2A>.  
  
 O método equivalente para esse operador é <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : DateTime * DateTime -&gt; bool" Usage="t1 &gt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTime" /> represents a date and time that is the same as or later than another specified <see cref="T:System.DateTime" />.</summary>
        <returns>
          <see langword="true" /> if <paramref name="t1" /> is the same as or later than <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.op_GreaterThanOrEqual%2A> operador determina a relação entre duas <xref:System.DateTime> valores comparando o número de tiques. Antes de comparar objetos <xref:System.DateTime>, verifique se os objetos representam horas no mesmo fuso horário. É possível fazer isso comparando-se os valores da propriedade <xref:System.DateTime.Kind%2A>.  
  
 O método equivalente para esse operador é <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : DateTime * DateTime -&gt; bool" Usage="System.DateTime.op_Inequality (d1, d2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">The first object to compare.</param>
        <param name="d2">The second object to compare.</param>
        <summary>Determines whether two specified instances of <see cref="T:System.DateTime" /> are not equal.</summary>
        <returns>
          <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> do not represent the same date and time; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.op_Inequality%2A> operador determina se dois <xref:System.DateTime> valores não são iguais comparando o número de tiques. Antes de comparar objetos <xref:System.DateTime>, verifique se os objetos representam horas no mesmo fuso horário. É possível fazer isso comparando-se os valores da propriedade <xref:System.DateTime.Kind%2A>.  
  
 O método equivalente para esse operador é <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : DateTime * DateTime -&gt; bool" Usage="t1 &lt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTime" /> is earlier than another specified <see cref="T:System.DateTime" />.</summary>
        <returns>
          <see langword="true" /> if <paramref name="t1" /> is earlier than <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.op_LessThan%2A> operador determina a relação entre duas <xref:System.DateTime> valores comparando o número de tiques. Antes de comparar objetos <xref:System.DateTime>, verifique se os objetos representam horas no mesmo fuso horário. É possível fazer isso comparando-se os valores da propriedade <xref:System.DateTime.Kind%2A>.  
  
 O método equivalente para esse operador é <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : DateTime * DateTime -&gt; bool" Usage="t1 &lt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTime" /> represents a date and time that is the same as or earlier than another specified <see cref="T:System.DateTime" />.</summary>
        <returns>
          <see langword="true" /> if <paramref name="t1" /> is the same as or earlier than <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.op_LessThanOrEqual%2A> operador determina a relação entre duas <xref:System.DateTime> valores comparando o número de tiques. Antes de comparar objetos <xref:System.DateTime>, verifique se os objetos representam horas no mesmo fuso horário. É possível fazer isso comparando-se os valores da propriedade <xref:System.DateTime.Kind%2A>.  
  
 O método equivalente para esse operador é <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Subtracts a specified <see cref="T:System.DateTime" /> or<see cref="T:System.TimeSpan" /> from a specified <see cref="T:System.DateTime" />.</summary>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d1 As DateTime, d2 As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTime * DateTime -&gt; TimeSpan" Usage="d1 - d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">The date and time value to subtract from (the minuend).</param>
        <param name="d2">The date and time value to subtract (the subtrahend).</param>
        <summary>Subtracts a specified date and time from another specified date and time and returns a time interval.</summary>
        <returns>The time interval between <paramref name="d1" /> and <paramref name="d2" />; that is, <paramref name="d1" /> minus <paramref name="d2" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.op_Subtraction%28System.DateTime%2CSystem.DateTime%29> método não considera o valor da <xref:System.DateTime.Kind%2A> propriedade dos dois <xref:System.DateTime> ao executar a subtração de valores. Antes de subtração <xref:System.DateTime> objetos, certifique-se de que os objetos representam vezes no mesmo fuso horário. Caso contrário, o resultado incluirá a diferença entre fusos horários.  
  
> [!NOTE]
>  O <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> método considerar a diferença entre fusos horários ao executar a subtração.  
  
 O método equivalente para esse operador é <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 O exemplo a seguir demonstra o método <xref:System.DateTime.Subtract%2A> e o operador de subtração.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
        <altmember cref="P:System.DateTime.Ticks" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTime operator - (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Subtraction(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator -(DateTime d, TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTime * TimeSpan -&gt; DateTime" Usage="d - t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">The date and time value to subtract from.</param>
        <param name="t">The time interval to subtract.</param>
        <summary>Subtracts a specified time interval from a specified date and time and returns a new date and time.</summary>
        <returns>An object whose value is the value of <paramref name="d" /> minus the value of <paramref name="t" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método subtrai o valor de tiques de `t` do valor de tiques `d`.  
  
 O método equivalente para esse operador é <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 O exemplo a seguir demonstra o método <xref:System.DateTime.Subtract%2A> e o operador de subtração.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Subtract(System.TimeSpan)" />
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nesta seção:  
  
 [Qual método chamar?](#Tasks)   
 [Para analisar a cadeia de caracteres](#StringToParse)   
 [Convenções culturais e análise](#Culture)   
 [Elementos de análise e estilo](#Styles)   
 [O valor de retorno e Kind](#kind)
 
<a name="Tasks"></a>   
### <a name="which-method-do-i-call"></a>Qual método devo chamar?  
  
|Para|Chamada|  
|--------|----------|  
|Analise uma cadeia de caracteres de data e hora usando as convenções da cultura atual.|sobrecarga de <xref:System.DateTime.Parse%28System.String%29>|  
|Analise uma cadeia de caracteres de data e hora usando as convenções de uma cultura específica.|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> sobrecarga (consulte [convenções culturais e análise](#Culture))|  
|Analise uma cadeia de caracteres de data e hora com elementos de estilo especiais (como o espaço em branco ou nenhum espaço em branco).|sobrecarga de <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|  
|Analise uma cadeia de caracteres de data e hora deve estar em um formato específico.|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> ou <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>|
|Analisar uma cadeia de caracteres de data e hora e executar uma conversão em UTC ou horário local.|sobrecarga de <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|  
|Analise uma cadeia de caracteres de data e hora sem tratamento de exceções.|Método <xref:System.DateTime.TryParse%2A?displayProperty=nameWithType>|  
|Restaure (viagem) um valor de data e hora criado por uma operação de formatação.|Passe a cadeia de formato padrão de "o" ou "r" para o <xref:System.DateTime.ToString%28System.String%29> método e chame o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> sobrecarga com <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>|  
|Analise uma cadeia de caracteres de data e hora em um formato fixo entre limites de máquina (e possivelmente culturais).|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> ou <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType> método|  
  
<a name="StringToParse"></a>   
### <a name="the-string-to-parse"></a>A cadeia de caracteres a ser analisada  
 O <xref:System.DateTime.Parse%2A> método tenta converter a representação de cadeia de caracteres de um valor de data e hora para seu <xref:System.DateTime> equivalente. Ele tenta analisar a cadeia de caracteres de entrada completamente sem gerar uma <xref:System.FormatException> exceção.  
  
> [!IMPORTANT]
>  Se a operação de análise falhar devido a um formato de cadeia de caracteres não reconhecido, o <xref:System.DateTime.Parse%2A> método lança um <xref:System.FormatException>, enquanto o <xref:System.DateTime.TryParse%2A> método retornará `false`. Como o tratamento de exceção pode ser caro, você deve usar <xref:System.DateTime.Parse%2A> quando a operação de análise deve ser bem-sucedida porque a fonte de entrada é confiável. <xref:System.DateTime.TryParse%2A> é preferível quando falhas de análise são provavelmente, principalmente como uma fonte de entrada não é confiável ou ter valores padrão razoáveis para substituir cadeias de caracteres que não são analisados com êxito.   

 A cadeia de caracteres a ser analisado pode usar qualquer uma das seguintes formas:  
  
-   Uma cadeia de caracteres com uma data e um componente de tempo.  
  
-   Uma cadeia de caracteres com uma data, mas nenhum componente do tempo. Se o componente de tempo estiver ausente, o método pressupõe 12:00 meia-noite. Se o componente de data tem um ano de dois dígitos, ele será convertido em um ano com base no <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> do calendário atual da cultura atual ou da cultura especificada atual (se você usar uma sobrecarga com não null `provider` argumento).  
  
- Uma cadeia de caracteres com um componente de data que inclui somente o mês e ano, mas nenhum componente do dia. O método pressupõe que o primeiro dia do mês.

- Uma cadeia de caracteres com um componente de data que inclui somente o mês e dia, mas nenhum componente de ano. O método pressupõe que o ano atual.

-   Uma cadeia de caracteres com uma hora, mas nenhum componente de data. O método pressupõe a data atual, a menos que você chamar o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> de sobrecarga e incluir <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> no `styles` argumento, nesse caso, o método pressupõe uma data de 1º de janeiro, 0001.  

- Uma cadeia de caracteres com um componente de tempo que inclui apenas a hora e um designador de AM/PM, com nenhum componente de data. O método pressupõe que a data atual e uma hora com nenhuma minutos e sem segundos. Você pode alterar esse comportamento, chamando o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> de sobrecarga e incluir <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> no `styles` argumento, nesse caso, o método pressupõe uma data de 1º de janeiro, 0001.

-   Uma cadeia de caracteres que inclui informações de fuso horário e está em conformidade com ISO 8601. Nos exemplos a seguir, a primeira cadeia de caracteres designa o tempo Universal Coordenado (UTC), e o segundo designa o tempo em um fuso horário que é de sete horas anteriores ao UTC:  
  
    "2008-11-01T19:35:00.0000000Z"   
    "2008-11-01T19:35:00.0000000-07:00"  
  
-   Uma cadeia de caracteres que inclui o designador de GMT e está em conformidade com o formato de hora do RFC 1123; Por exemplo:  
  
     "Sáb, 01 de novembro de 2008 19:35:00 GMT"  
  
-   Uma cadeia de caracteres que inclui a data e hora junto com informações de deslocamento de fuso horário; Por exemplo:  
  
     "03/01/2009 05:42:00 -5:00"  

O exemplo a seguir analisa cadeias de caracteres em cada um desses formatos, usando as convenções de formatação da cultura atual, que nesse caso é a cultura en-US:

[!code-csharp-interactive[Default parsing](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse6.cs)]
[!code-vb[Default parsing](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse6.vb)]  
  
 Se a cadeia de caracteres de entrada representa um dia bissexto em um ano bissexto do calendário usado pelo método de análise (consulte [convenções culturais e análise](#Culture)), o <xref:System.DateTime.Parse%2A> método analisa a cadeia de caracteres com êxito. Se a cadeia de caracteres de entrada representa um dia bissexto em um não-ano bissexto, o método gera uma <xref:System.FormatException>.  
  
 Porque o <xref:System.DateTime.Parse%2A> método tenta analisar a representação de cadeia de caracteres de uma data e hora usando as regras de formatação do atual ou de uma cultura específica, tentativa de analisar uma cadeia de caracteres entre culturas diferentes pode falhar. Para analisar um formato de hora e data específica em localidades diferentes, use uma das sobrecargas do <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> método e fornecer um especificador de formato.  
  
<a name="Culture"></a>   
### <a name="parsing-and-cultural-conventions"></a>Convenções de análise e culturais  
 Todas as sobrecargas do <xref:System.DateTime.Parse%2A> método são sensíveis à cultura, a menos que a cadeia de caracteres a ser analisada (que é representado por `s` na tabela a seguir) está em conformidade com o padrão ISO 8601. A operação de análise usa as informações de formatação em um <xref:System.Globalization.DateTimeFormatInfo> objeto que é derivado da seguinte maneira:  
  
|Se você chamar|E `provider` é|Informações de formatação são derivadas de|  
|-----------------|-----------------------|--------------------------------------------|  
|<xref:System.DateTime.Parse%28System.String%29>|-|A cultura do thread atual (propriedade <xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> )|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> ou <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Um <xref:System.Globalization.DateTimeFormatInfo> objeto|Especificado <xref:System.Globalization.DateTimeFormatInfo> objeto|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> ou <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|`null`|A cultura do thread atual (propriedade <xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> )|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> ou <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Um <xref:System.Globalization.CultureInfo> objeto|A propriedade <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> ou <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Personalizar <xref:System.IFormatProvider> implementação|O método <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>|  
  
 Quando as informações de formatação é derivada de uma <xref:System.Globalization.DateTimeFormatInfo> objeto, o <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> propriedade define o calendário usado na operação de análise.  
  
 Se você analisar uma cadeia de caracteres de data e hora usando um <xref:System.Globalization.DateTimeFormatInfo> objeto com as configurações personalizadas que são diferentes de uma cultura padrão, use o <xref:System.DateTime.ParseExact%2A> método em vez do <xref:System.DateTime.Parse%2A> método para melhorar as chances de uma conversão bem-sucedida. Uma data fora do padrão e a cadeia de caracteres de hora podem ser complicado e difícil analisar. O <xref:System.DateTime.Parse%2A> método tenta analisar uma cadeia de caracteres com vários padrões de análise implícitas, que pode falhar. Em contraste, o <xref:System.DateTime.ParseExact%2A> método exige que você designar explicitamente um ou mais padrões de análise exata que têm probabilidade de êxito. Para obter mais informações, consulte a seção "DateTimeFormatInfo e dados dinâmicos" o <xref:System.Globalization.DateTimeFormatInfo> tópico.  
  
> [!IMPORTANT]
>  Observe que as convenções de formatação para uma cultura específica são dinâmicas e podem estar sujeitos a alteração. Isso significa que as operações de análise que dependem das convenções de formatação da cultura padrão (atual) ou que especifique um <xref:System.IFormatProvider> objeto que representa uma cultura diferente a cultura invariável pode falhar inesperadamente se qualquer um dos seguintes ocorrer:  
>   
> -   Os dados específicos de cultura foi alterado entre as versões principais ou secundárias do .NET Framework ou como resultado de uma atualização para a versão existente do .NET Framework.  
> -   Os dados específicos de cultura refletem as preferências do usuário, que podem variar para cada máquina ou a cada sessão.  
> -   Os dados específicos de cultura representam uma cultura de substituição que substitui as configurações de uma cultura padrão ou uma cultura personalizada.  
>   
>  Para evitar dificuldades na análise de dados e a hora cadeias de caracteres que estão associadas com as alterações nos dados culturais, você pode analisar cadeias de caracteres de data e hora usando a cultura invariável, ou você pode chamar o <xref:System.DateTime.ParseExact%2A> ou <xref:System.DateTime.TryParseExact%2A> método e especificar o formato exato da cadeia de caracteres a ser analisada. Se são serializar e desserializar os dados de data e hora, você pode usar as convenções de formatação da cultura invariável, ou você pode serializar e desserializar o <xref:System.DateTime> valor em um formato binário.  
>   
>  Para obter mais informações, consulte a seção "dados de cultura dinâmico" o <xref:System.Globalization.CultureInfo> tópico e os valores de DateTime Persisting"" seção o <xref:System.DateTime> tópico.  
  
<a name="Styles"></a>   
### <a name="parsing-and-style-elements"></a>Elementos de análise e estilo  
 Todos os <xref:System.DateTime.Parse%2A> sobrecargas ignorar caracteres de espaço em branco à esquerda, à direita ou internas na cadeia de entrada (que é representado por `s` na tabela a seguir). A data e hora podem ser agrupados com um par de esquerda e à direita ("#", U + 0023) de caracteres de sinal de número e podem ser seguidas por um ou mais NULL caracteres (U + 0000).  
  
 Além disso, o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> sobrecarga tem um `styles` parâmetro que consiste em um ou mais membros a <xref:System.Globalization.DateTimeStyles> enumeração. Esse parâmetro define como `s` devem ser interpretados e como a operação de análise deve converter `s` para uma data e hora. A tabela a seguir descreve o efeito de cada <xref:System.Globalization.DateTimeStyles> membro na operação de análise.  
  
|Membro DateTimeStyles|Efeito em conversão|  
|---------------------------|--------------------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analisa `s` e, se necessário, converte-o em UTC, da seguinte maneira:<br /><br /> -Se `s` inclui um deslocamento de fuso horário, ou se `s` não contém nenhuma informação de fuso horário, mas `styles` inclui o <xref:System.Globalization.DateTimeStyles.AssumeLocal> sinalizador, o método analisa a cadeia de caracteres, chamadas <xref:System.DateTime.ToUniversalTime%2A> converter retornado <xref:System.DateTime> valor UTC e conjuntos de <xref:System.DateTime.Kind%2A> propriedade <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.<br />-Se `s` indica que ele representa o UTC, ou se `s` não contém informações de fuso horário, mas `styles` inclui o <xref:System.Globalization.DateTimeStyles.AssumeUniversal> sinalizador, o método analisa a cadeia de caracteres, não realiza nenhuma conversão de fuso horário no <xref:System.DateTime> valor e define o <xref:System.DateTime.Kind%2A> propriedade <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.<br />-Em todos os outros casos, o sinalizador não tem efeito.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Este valor é ignorado. Espaço em branco interno é sempre permitido nos elementos de data e hora de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Este valor é ignorado. Espaço em branco à esquerda sempre é permitido nos elementos de data e hora de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Este valor é ignorado. Espaço em branco à direita é sempre permitido nos elementos de data e hora de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Especifica que `s` pode conter, interna, à esquerda e espaços em branco. Este é o comportamento padrão. Ele não pode ser substituído, fornecendo uma mais restritiva <xref:System.Globalization.DateTimeStyles> valor de enumeração como <xref:System.Globalization.DateTimeStyles.None>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Especifica que, se `s` não possui quaisquer informações de fuso horário local serão assumidas. A menos que o sinalizador <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> esteja presente, a propriedade <xref:System.DateTime.Kind%2A> do valor <xref:System.DateTime> retornado é definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Especifica que, se `s` não possui quaisquer informações de fuso horário UTC serão assumidas. A menos que o sinalizador <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> esteja presente, o método converte o valor <xref:System.DateTime> retornado do UTC na hora local e define a propriedade <xref:System.DateTime.Kind%2A> como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.None>|Embora válido, esse valor é ignorado.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Cadeias de caracteres que contêm informações de fuso horário, tenta impedir que a conversão de uma cadeia de caracteres de data e hora para um <xref:System.DateTime> valor que representa a hora local com seu <xref:System.DateTime.Kind%2A> propriedade definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Normalmente, uma cadeia de caracteres é criada chamando o <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> método e usando o especificador de formato padrão de "o", "r" ou "u".|  

<a name="kind"></a>   
### <a name="the-return-value-and-datetimekind"></a>O valor de retorno e Kind

O `DateTime.Parse` sobrecargas retornar um <xref:System.DateTime> valor cuja <xref:System.DateTime.Kind> propriedade inclui informações de fuso horário. Pode indicar que o tempo é:

- Tempo Universal Coordenado (<xref:System.DateTimeKind.Utc?displayProperty=fullName>).
- A hora no fuso horário local (<xref:System.DateTimeKind.Local?displayProperty=fullName>).
- O tempo em um fuso horário desconhecido (xref:System.DateTimeKind.Unspecified?displayProperty=fullName >).
 
 Em geral, o <xref:System.DateTime.Parse%2A> método retorna um <xref:System.DateTime> do objeto cuja <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. No entanto, o <xref:System.DateTime.Parse%2A> método também pode executar conversão de fuso horário e defina o valor da <xref:System.DateTime.Kind%2A> propriedade diferente, dependendo dos valores da `s` e `styles` parâmetros:  
  
|If|Conversão de fuso horário|Tipo de propriedade|  
|--------|--------------------------|-------------------|  
|`s` contém informações de fuso horário.|A data e hora é convertido para a hora no fuso horário local.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|`s` contém informações de fuso horário, e `styles` inclui o <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> sinalizador.|A data e hora é convertido para o tempo Universal Coordenado (UTC).|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`s` contém o designador de fuso horário Z ou GMT e `styles` inclui o <xref:System.Globalization.DateTimeStyles.RoundtripKind> sinalizador.|A data e hora são interpretados como UTC.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
  
 O exemplo a seguir converte cadeias de caracteres de data que contêm informações de fuso horário para a hora no fuso horário local:  
  
 [!code-csharp-interactive[System.DateTime.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse2.cs#2)]
 [!code-vb[System.DateTime.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse2.vb#2)]  

  Você também pode preservar o valor de data e hora <xref:System.DateTime.Kind%2A> propriedade durante uma formatação e análise operação usando o <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> sinalizador. O exemplo a seguir ilustra como o <xref:System.Globalization.DateTimeStyles.RoundtripKind> sinalizador afeta a operação de análise na <xref:System.DateTime> valores são convertidos em cadeias de caracteres usando o especificador de formato "o", "r" ou "u".  
  
 [!code-csharp-interactive[System.DateTime.Parse#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse5.cs#5)]
 [!code-vb[System.DateTime.Parse#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse5.vb#5)]  
  
### Examples

Vários exemplos que chamam o `DateTime.Parse` método intercalados em todo o [comentários](#remarks) seção deste artigo e na documentação do indivíduo `DateTime.Parse` sobrecargas.

[!INCLUDE[interactive-note](~/includes/csharp-interactive-note.md)]

Você também pode baixar um conjunto completo de `DateTime.Parse` exemplos, que são incluídos em um [projeto .NET Core 2.0 para c#](https://github.com/dotnet/docs/raw/master/samples/snippets/csharp/downloads/api/System/DateTime.Parse.zip) e um [projeto .NET Core 2.0 para o Visual Basic](https://github.com/dotnet/docs/raw/master/samples/snippets/visualbasic/downloads/api/System/DateTime.Parse.zip), do [dotnet/docs Repositório GitHub](https://github.com/dotnet/docs).

 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
        <altmember cref="Overload:System.DateTime.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; DateTime" Usage="System.DateTime.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert. See [The string to parse](#StringToParse) for more information.</param>
        <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using the conventions of the current thread culture.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Se `s` contém informações de fuso horário, este método retorna um <xref:System.DateTime> valor cuja <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Local?displayProperty=nameWithType> e converte a data e hora em `s` para a hora local. Caso contrário, ele não realiza nenhuma conversão de fuso horário e retorna um <xref:System.DateTime> valor cuja <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.

Essa sobrecarga tenta analisar `s` usando as convenções de formatação da cultura atual. A cultura atual é indicada pelo <xref:System.Globalization.CultureInfo.CurrentCulture> propriedade. Para analisar uma cadeia de caracteres usando as convenções de formatação de uma cultura específica, chame o <xref:System.DateTime.Parse(System.String,System.IFormatProvider)> ou <xref:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)> sobrecargas.

Essa sobrecarga tenta analisar `s` usando <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> estilo.

## <a name="example"></a>Exemplo

O exemplo a seguir analisa a representação de cadeia de caracteres de vários valores de data e hora por:

- Usando o provedor de formato padrão, que fornece as convenções de formatação da cultura do thread atual do computador usado para produzir a saída de exemplo. A saída deste exemplo reflete as convenções de formatação da cultura en-US.

- Usando o valor de estilo padrão, que é <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWIthType>. 

Ele trata o <xref:System.FormatException> convenções de formatação da exceção que é lançada quando o método tenta analisar a representação de cadeia de caracteres de data e hora usando alguns outros cultura. Ele também mostra como analisar com êxito um valor de data e hora que não usa as convenções de formatação da cultura do thread atual.  
  
 [!code-csharp-interactive[System.DateTime.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse1.cs#1)]
 [!code-vb[System.DateTime.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse1.vb#1)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> does not contain a valid string representation of a date and time.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; DateTime" Usage="System.DateTime.Parse (s, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert. See [The string to parse](#StringToParse) for more information.</param>
        <param name="provider">An object that supplies culture-specific format information about <c>s</c>.  See [Parsing and cultural conventions](#Culture)</param>
        <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using culture-specific format information.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" /> as specified by <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Se `s` contém informações de fuso horário, este método retorna um <xref:System.DateTime> valor cuja <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Local?displayProperty=nameWithType> e converte a data e hora em `s` para a hora local. Caso contrário, ele não realiza nenhuma conversão de fuso horário e retorna um <xref:System.DateTime> valor cuja <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.

Essa sobrecarga tenta analisar `s` usando o <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> estilo.

## <a name="example"></a>Exemplo

O exemplo a seguir analisa uma matriz de cadeias de caracteres de data usando as convenções de culturas de-DE, en-US e fr-FR. Ele demonstra as representações de cadeia de caracteres de uma única data podem ser interpretadas diferentemente em diferentes culturas.  
  
[!code-csharp-interactive[System.DateTime.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse3.cs#3)]
[!code-vb[System.DateTime.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> does not contain a valid string representation of a date and time.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider = null, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional provider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.Parse (s, provider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider, styles As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.Parse (s, provider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert. See [The string to parse](#StringToParse) for more information.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <c>s</c>.  See [Parsing and cultural conventions](#Culture)</param>
        <param name="styles">A bitwise combination of the enumeration values that indicates the style elements that can be present in <c>s</c> for the parse operation to succeed, and that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using culture-specific format information and a formatting style.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="provider" /> and <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Essa sobrecarga de método converte a data e hora em `s` e define o <xref:System.DateTime.Kind%2A> propriedade retornado <xref:System.DateTime> valor da seguinte maneira:

|If |Conversão de fuso horário|Tipo de propriedade|   
|-----|-----|-----|  
|`s` não contém nenhuma informação de fuso horário.|nenhuma.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|
|`s` contém informações de fuso horário.|Para a hora no fuso horário local|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|
|`s` contém informações de fuso horário, e ' Estilos inclui o <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> sinalizador.|A coordenada horário universal (UTC)|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|
|`s` contém o designador de fuso horário Z ou GMT e `styles` inclui o <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>.|nenhuma.|<xref:System.DateTimeKind.Utc>| 

## <a name="example"></a>Exemplo

O exemplo a seguir demonstra o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> método e exibe o valor da <xref:System.DateTime.Kind%2A> propriedade resultante <xref:System.DateTime> valores.  
  
[!code-csharp-interactive[System.DateTime.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse4.cs#4)]
[!code-vb[System.DateTime.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> does not contain a valid string representation of a date and time.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent. The format of the string representation must match a specified format exactly or an exception is thrown.</summary>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert.</param>
        <param name="format">A format specifier that defines the required format of <c>s</c>. For more information, see the Remarks section.</param>
        <param name="provider">An object that supplies culture-specific format information about <c>s</c>.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método analisa a representação de cadeia de caracteres de uma data, que deve estar no formato definido pelo `format` parâmetro. Ele também requer que o \<data > e \<tempo > elementos da representação de cadeia de caracteres de data e hora aparecem na ordem especificada pela `format`e que `s` não ter nenhum espaço em branco que não seja permitido pela `format`. Se `format` define uma data com nenhum elemento de hora e a análise operação for bem-sucedida, o resultante <xref:System.DateTime> valor tem um tempo de meia-noite (00: 00:00). Se `format` define uma hora com nenhum elemento de data e a análise operação for bem-sucedida, o resultante <xref:System.DateTime> valor tem uma data de `DateTime.Now.Date`.  
  
 Se `s` não representa um tempo em um determinado fuso horário e a operação de análise for bem-sucedida, o <xref:System.DateTime.Kind%2A> propriedade retornado <xref:System.DateTime> valor é <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Se `s` representar o tempo em um determinado fuso horário e `format` permite que as informações de fuso horário presente (por exemplo, se `format` é igual a "o", "r" ou especificadores de formato padrão de "u", ou se ele contém o "z", "zz" ou "zzz" especificadores de formato personalizado), o <xref:System.DateTime.Kind%2A> propriedade retornado <xref:System.DateTime> valor é <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
 O parâmetro `format` é uma cadeia de caracteres que contém um único especificador de formato padrão ou um ou mais especificadores de formato que definem o formato exigido de `s`. Para obter detalhes sobre códigos de formatação válidos, consulte [padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md) ou [Data personalizada e cadeias de caracteres de formato de hora](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
> [!NOTE]
>  Se `format` é um padrão de formato personalizado que não incluem os separadores de data ou hora (como "Aaaammddhhmm"), use a cultura invariável para o `provider` especificador de formato do parâmetro e o formulário mais amplo de cada personalizado. Por exemplo, se você quiser especificar horas no padrão de formato, especifique o formulário mais amplo, "HH", em vez de forma mais estreita, "H".  
  
 A data específica e símbolos de hora e cadeias de caracteres (como nomes dos dias da semana em um determinado idioma) usadas em `s` são definidos pelo `provider` parâmetro, que é o formato exato do `s` se `format` é um formato padrão cadeia de caracteres de especificador. O parâmetro `provider` pode ser um dos seguintes:  
  
-   Um objeto <xref:System.Globalization.CultureInfo> que representa a cultura usada para interpretar `s`. O objeto <xref:System.Globalization.DateTimeFormatInfo> retornado pela propriedade <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> define os símbolos e a formatação em `s`.  
  
-   Um objeto <xref:System.Globalization.DateTimeFormatInfo> que define o formato dos dados de data e hora.  
  
-   Uma implementação de <xref:System.IFormatProvider> personalizada cujo método <xref:System.IFormatProvider.GetFormat%2A> retorna o objeto <xref:System.Globalization.CultureInfo> ou o objeto <xref:System.Globalization.DateTimeFormatInfo> que fornece informações de formatação.  
  
 Caso `provider` seja `null`, o objeto <xref:System.Globalization.CultureInfo> que corresponde à cultura atual é usado.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.ParseExact%2A> método.  
  
 [!code-csharp[System.DateTime.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/ParseExact1.cs#1)]
 [!code-vb[System.DateTime.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/ParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> or <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> or <paramref name="format" /> is an empty string.  -or-  <paramref name="s" /> does not contain a date and time that corresponds to the pattern specified in <paramref name="format" />.  -or-  The hour component and the AM/PM designator in <paramref name="s" /> do not agree.</exception>
        <block subset="none" type="usage">
          <para>No [! INCLUDE[net_v40_short](~/Includes/NET-v40-Short-MD.MD)] o <see cref="Overload:System.DateTime.ParseExact" /> método lança um <see cref="T:System.FormatException" /> se a cadeia de caracteres a ser analisada contém um componente de hora e um designador de AM/PM não estão no contrato. No [! INCLUDE[net_v35_short](~/Includes/NET-v35-Short-MD.MD)] e versões anteriores, o designador de AM/PM é ignorado.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, formats, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">A string containing a date and time to convert.</param>
        <param name="format">A format specifier that defines the required format of <c>s</c>. For more information, see the Remarks section.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <c>s</c>.</param>
        <param name="style">A bitwise combination of the enumeration values that provides additional information about <c>s</c>, about style elements that may be present in <c>s</c>, or about the conversion from <c>s</c> to a <see cref="T:System.DateTime" /> value. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly or an exception is thrown.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="format" />, <paramref name="provider" />, and <paramref name="style" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método analisa a representação de cadeia de caracteres de uma data, que deve estar em um formato definido pelo `format` parâmetro. Ele também requer que os elementos de data e hora em `s` aparecem na ordem especificada pela `format`. Se `s` não coincide com o padrão da `format` com qualquer variação definido pelo parâmetro de `style` parâmetro, o método gera um <xref:System.FormatException>. Em contraste, o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método analisa a representação de cadeia de caracteres de uma data em qualquer um dos formatos reconhecidos pelo provedor de formato <xref:System.Globalization.DateTimeFormatInfo> objeto. O <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método também permite que os elementos de data e hora em `s` para aparecer em qualquer ordem.  
  
 Se o `s` parâmetro contém somente uma vez e nenhuma data, a data atual é usada, a menos que o `style` parâmetro inclui o <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> sinalizador, caso em que a data padrão (`DateTime.Date.MinValue`) é usado. Se o `s` parâmetro não contém apenas uma data e nenhuma hora, meia-noite (00: 00:00) é usado. O `style` parâmetro também determina se o `s` parâmetro pode conter caracteres de espaço em branco à esquerda, interna ou à direita.  
  
 Caso `s` não contenha informações de fuso horário, a propriedade <xref:System.DateTime.Kind%2A> do objeto <xref:System.DateTime> retornado é <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Este comportamento pode ser alterado usando-se o sinalizador <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, que retorna um valor <xref:System.DateTime> cuja propriedade <xref:System.DateTime.Kind%2A> é <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ou usando-se os sinalizadores <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> e <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>, que retorna um valor <xref:System.DateTime> cuja propriedade <xref:System.DateTime.Kind%2A> é <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Se `s` contém informações de fuso horário, a hora é convertida para o horário local, se necessário e o <xref:System.DateTime.Kind%2A> propriedade retornado <xref:System.DateTime> objeto é definido como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Esse comportamento pode ser alterado usando o <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> sinalizador não converter o tempo Universal Coordenado (UTC) para a hora local e definir o <xref:System.DateTime.Kind%2A> propriedade <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 O `format` parâmetro define o padrão necessário do `s` parâmetro. Pode consistir em um ou mais especificadores de formato personalizado do [personalizado de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/custom-date-and-time-format-strings.md) tabela ou um especificador de formato único padrão, que identifica um padrão predefinido, do [padrão de data e Cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md) tabela.  
  
 Caso você não use separadores de data ou hora em um padrão de formato personalizado, use a cultura invariável do parâmetro `provider` e a forma mais ampla de cada especificador de formato personalizado. Por exemplo, caso você queira especificar horas no padrão, especifique a forma mais ampla, "HH", em vez da forma mais estreita, "H".  
  
> [!NOTE]
>  Em vez de exigir que `s` está de acordo com um formato único para o êxito da operação de análise, você pode chamar o <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método e especificar vários formatos permitidos. Isso faz com que a operação de análise mais probabilidade de êxito.  
  
 O parâmetro `styles` inclui um ou mais membros da enumeração <xref:System.Globalization.DateTimeStyles> que determinam se e onde o espaço em branco não definido por `format` pode aparecer em `s` e que controlam o comportamento preciso da operação de análise. A tabela a seguir descreve como cada membro do <xref:System.Globalization.DateTimeStyles> enumeração afeta a operação do <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> método.  
  
|Membro DateTimeStyles|Descrição|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analisa `s` e, caso necessário, converte-o em UTC. Caso `s` inclua um deslocamento de fuso horário ou caso `s` não contenha informações de fuso horário, mas `styles` inclua o sinalizador <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, o método analisa a cadeia de caracteres, chama <xref:System.DateTime.ToUniversalTime%2A> para converter o valor <xref:System.DateTime> retornado em UTC e define a propriedade <xref:System.DateTime.Kind%2A> como <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Caso `s` indique que ele representa o UTC ou caso `s` não contenha informações de fuso horário, mas `styles` inclua o sinalizador <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>, o método analisa a cadeia de caracteres, não executa nenhuma conversão de fuso horário no valor <xref:System.DateTime> retornado e define a propriedade <xref:System.DateTime.Kind%2A> a <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Em todos os outros casos, o sinalizador não entra em vigor.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Especifica que o espaço em branco não definido por `format` pode ser exibido entre qualquer elemento de data ou hora individual.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Especifica que o espaço em branco não definido por `format` pode ser exibido no início de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Especifica que o espaço em branco não definido por `format` pode ser exibido no final de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Especifica que `s` pode conter espaços em branco à esquerda, internos, e à direita não definidos por `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Especifica que, caso `s` não tenha informações de fuso horário, pressupõe-se que ele represente uma hora local. A menos que o sinalizador <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> esteja presente, a propriedade <xref:System.DateTime.Kind%2A> do valor <xref:System.DateTime> retornado é definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Especifica que, caso `s` não tenha informações de fuso horário, pressupõe-se que ele represente o UTC. A menos que o sinalizador <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> esteja presente, o método converte o valor <xref:System.DateTime> retornado do UTC na hora local e define a propriedade <xref:System.DateTime.Kind%2A> como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Caso `s` contenha hora sem informações de data, a data do valor de retorno é definida como `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|O parâmetro `s` é analisado usando-se valores padrão. Nenhum espaço em branco senão presente em `format` é permitido. Caso `s` não tenha um componente de data, a data do valor <xref:System.DateTime> retornado é definida como 1/1/0001. Caso `s` não contenha informações de fuso horário, a propriedade <xref:System.DateTime.Kind%2A> do objeto <xref:System.DateTime> retornado é definida como <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Caso informações de fuso horário estejam presentes em `s`, a hora é convertida na hora local e a propriedade <xref:System.DateTime.Kind%2A> do objeto <xref:System.DateTime> retornado é definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Cadeias de caracteres que contêm informações de fuso horário, tenta impedir que a conversão para um <xref:System.DateTime> valor de data e hora com seu <xref:System.DateTime.Kind%2A> propriedade definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Este sinalizador impede principalmente a conversão de horas UTC em horas locais.|  
  
 Os símbolos de data e hora e as cadeias de caracteres específicos (como os nomes dos dias da semana em um idioma específico) usados em `s` são definidos pelo parâmetro `provider`, como o formato preciso de `s` caso `format` seja uma cadeia de caracteres do especificador de formato padrão. O parâmetro `provider` pode ser um dos seguintes:  
  
-   Um objeto <xref:System.Globalization.CultureInfo> que representa a cultura usada para interpretar `s`. O objeto <xref:System.Globalization.DateTimeFormatInfo> retornado pela propriedade <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> define os símbolos e a formatação em `s`.  
  
-   Um objeto <xref:System.Globalization.DateTimeFormatInfo> que define o formato dos dados de data e hora.  
  
-   Uma implementação de <xref:System.IFormatProvider> personalizada cujo método <xref:System.IFormatProvider.GetFormat%2A> retorna o objeto <xref:System.Globalization.CultureInfo> ou o objeto <xref:System.Globalization.DateTimeFormatInfo> que fornece informações de formatação.  
  
 Caso `provider` seja `null`, o objeto <xref:System.Globalization.CultureInfo> que corresponde à cultura atual é usado.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> método. Observe que a cadeia de caracteres "01/5/2009 8:30 AM" não pode ser analisado com êxito quando o `styles` parâmetro for igual a <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> como espaços não são permitidos por `format`. Além disso, a cadeia de caracteres "01/5/2009 09:00" não pode ser analisado com êxito com um `format` de "dd/MM/yyyyhh:mm" porque a cadeia de caracteres de data não precede o número do mês com um zero à esquerda, como `format` requer.  
  
 [!code-csharp[System.DateTime.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact2.cs#2)]
 [!code-vb[System.DateTime.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> or <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> or <paramref name="format" /> is an empty string.  -or-  <paramref name="s" /> does not contain a date and time that corresponds to the pattern specified in <paramref name="format" />.  -or-  The hour component and the AM/PM designator in <paramref name="s" /> do not agree.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <block subset="none" type="usage">
          <para>No [! INCLUDE[net_v40_short](~/Includes/NET-v40-Short-MD.MD)] o <see cref="Overload:System.DateTime.ParseExact" /> método lança um <see cref="T:System.FormatException" /> se a cadeia de caracteres a ser analisada contém um componente de hora e um designador de AM/PM não estão no contrato. No [! INCLUDE[net_v35_short](~/Includes/NET-v35-Short-MD.MD)] e versões anteriores, o designador de AM/PM é ignorado.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, formats, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert.</param>
        <param name="formats">An array of allowable formats of <c>s</c>. For more information, see the Remarks section.</param>
        <param name="provider">An object that supplies culture-specific format information about <c>s</c>.</param>
        <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <c>s</c>. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly or an exception is thrown.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="formats" />, <paramref name="provider" />, and <paramref name="style" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método analisa a representação de cadeia de caracteres de uma data que corresponde a qualquer um dos padrões atribuído para o `formats` parâmetro. Se a cadeia de caracteres `s` não coincide com qualquer um desses padrões com qualquer uma das variações definidas pelo `styles` parâmetro, o método gera uma <xref:System.FormatException>. Além de comparar `s` para vários padrões de formatação, em vez da um único padrão de formatação, essa sobrecarga se comporta de forma idêntica ao <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método.  
  
 O `s` parâmetro contém a data e hora para analisar. Se o `s` parâmetro contém somente uma vez e nenhuma data, a data atual é usada, a menos que o `style` parâmetro inclui o <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> sinalizador, caso em que a data padrão (`DateTime.Date.MinValue`) é usado. Se o `s` parâmetro não contém apenas uma data e nenhuma hora, meia-noite (00: 00:00) é usado. O `style` parâmetro também determina se o `s` parâmetro pode conter à esquerda, caracteres de espaço em branco à direita ou interno diferentes daqueles permitido por uma das cadeias de caracteres de formato em `formats`.  
  
 Caso `s` não contenha informações de fuso horário, a propriedade <xref:System.DateTime.Kind%2A> do objeto <xref:System.DateTime> retornado é <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Este comportamento pode ser alterado usando-se o sinalizador <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, que retorna um valor <xref:System.DateTime> cuja propriedade <xref:System.DateTime.Kind%2A> é <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ou usando-se os sinalizadores <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> e <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>, que retorna um valor <xref:System.DateTime> cuja propriedade <xref:System.DateTime.Kind%2A> é <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Se `s` contém informações de fuso horário, a hora é convertida para o horário local, se necessário e o <xref:System.DateTime.Kind%2A> propriedade retornado <xref:System.DateTime> objeto é definido como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Esse comportamento pode ser alterado usando o <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> sinalizador não converter o tempo Universal Coordenado (UTC) para a hora local e definir o <xref:System.DateTime.Kind%2A> propriedade <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 O `formats` parâmetro contém uma matriz de padrões, um dos quais `s` devem corresponder exatamente se a operação de análise seja bem-sucedida. Os padrões a `formats` parâmetro consiste em um ou mais especificadores de formato personalizado do [personalizado de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/custom-date-and-time-format-strings.md) tabela ou um especificador de formato único padrão, que identifica um padrão predefinido, do [Padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md) tabela.  
  
 Caso você não use separadores de data ou hora em um padrão de formato personalizado, use a cultura invariável do parâmetro `provider` e a forma mais ampla de cada especificador de formato personalizado. Por exemplo, caso você queira especificar horas no padrão, especifique a forma mais ampla, "HH", em vez da forma mais estreita, "H".  
  
 O parâmetro `styles` inclui um ou mais membros da enumeração <xref:System.Globalization.DateTimeStyles> que determinam se e onde o espaço em branco não definido por `format` pode aparecer em `s` e que controlam o comportamento preciso da operação de análise. A tabela a seguir descreve como cada membro do <xref:System.Globalization.DateTimeStyles> enumeração afeta a operação do <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> método.  
  
|Membro DateTimeStyles|Descrição|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analisa `s` e, caso necessário, converte-o em UTC. Caso `s` inclua um deslocamento de fuso horário ou caso `s` não contenha informações de fuso horário, mas `styles` inclua o sinalizador <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, o método analisa a cadeia de caracteres, chama <xref:System.DateTime.ToUniversalTime%2A> para converter o valor <xref:System.DateTime> retornado em UTC e define a propriedade <xref:System.DateTime.Kind%2A> como <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Caso `s` indique que ele representa o UTC ou caso `s` não contenha informações de fuso horário, mas `styles` inclua o sinalizador <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>, o método analisa a cadeia de caracteres, não executa nenhuma conversão de fuso horário no valor <xref:System.DateTime> retornado e define a propriedade <xref:System.DateTime.Kind%2A> a <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Em todos os outros casos, o sinalizador não entra em vigor.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Especifica que o espaço em branco não definido por `format` pode ser exibido entre qualquer elemento de data ou hora individual.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Especifica que o espaço em branco não definido por `format` pode ser exibido no início de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Especifica que o espaço em branco não definido por `format` pode ser exibido no final de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Especifica que `s` pode conter espaços em branco à esquerda, internos, e à direita não definidos por `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Especifica que, caso `s` não tenha informações de fuso horário, pressupõe-se que ele represente uma hora local. A menos que o sinalizador <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> esteja presente, a propriedade <xref:System.DateTime.Kind%2A> do valor <xref:System.DateTime> retornado é definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Especifica que, caso `s` não tenha informações de fuso horário, pressupõe-se que ele represente o UTC. A menos que o sinalizador <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> esteja presente, o método converte o valor <xref:System.DateTime> retornado do UTC na hora local e define a propriedade <xref:System.DateTime.Kind%2A> como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Caso `s` contenha hora sem informações de data, a data do valor de retorno é definida como `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|O parâmetro `s` é analisado usando-se valores padrão. Nenhum espaço em branco senão presente em `format` é permitido. Caso `s` não tenha um componente de data, a data do valor <xref:System.DateTime> retornado é definida como 1/1/0001. Caso `s` não contenha informações de fuso horário, a propriedade <xref:System.DateTime.Kind%2A> do objeto <xref:System.DateTime> retornado é definida como <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Caso informações de fuso horário estejam presentes em `s`, a hora é convertida na hora local e a propriedade <xref:System.DateTime.Kind%2A> do objeto <xref:System.DateTime> retornado é definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Cadeias de caracteres que contêm informações de fuso horário, tenta impedir que a conversão em uma data e hora com seu <xref:System.DateTime.Kind%2A> propriedade definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Este sinalizador impede principalmente a conversão de horas UTC em horas locais.|  
  
 Os símbolos de data e hora e as cadeias de caracteres específicos (como os nomes dos dias da semana em um idioma específico) usados em `s` são definidos pelo parâmetro `provider`, como o formato preciso de `s` caso `format` seja uma cadeia de caracteres do especificador de formato padrão. O parâmetro `provider` pode ser um dos seguintes:  
  
-   Um objeto <xref:System.Globalization.CultureInfo> que representa a cultura usada para interpretar `s`. O objeto <xref:System.Globalization.DateTimeFormatInfo> retornado pela propriedade <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> define os símbolos e a formatação em `s`.  
  
-   Um objeto <xref:System.Globalization.DateTimeFormatInfo> que define o formato dos dados de data e hora.  
  
-   Uma implementação de <xref:System.IFormatProvider> personalizada cujo método <xref:System.IFormatProvider.GetFormat%2A> retorna o objeto <xref:System.Globalization.CultureInfo> ou o objeto <xref:System.Globalization.DateTimeFormatInfo> que fornece informações de formatação.  
  
 Caso `provider` seja `null`, o objeto <xref:System.Globalization.CultureInfo> que corresponde à cultura atual é usado.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método para garantir que uma cadeia de caracteres em um número de possíveis formatos pode ser analisada com êxito.  
  
 [!code-csharp[System.Datetime.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact3.cs#3)]
 [!code-vb[System.Datetime.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> or <paramref name="formats" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is an empty string.  -or-  an element of <paramref name="formats" /> is an empty string.  -or-  <paramref name="s" /> does not contain a date and time that corresponds to any element of <paramref name="formats" />.  -or-  The hour component and the AM/PM designator in <paramref name="s" /> do not agree.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <block subset="none" type="usage">
          <para>No [! INCLUDE[net_v40_short](~/Includes/NET-v40-Short-MD.MD)] o <see cref="Overload:System.DateTime.ParseExact" /> método lança um <see cref="T:System.FormatException" /> se a cadeia de caracteres a ser analisada contém um componente de hora e um designador de AM/PM não estão no contrato. No [! INCLUDE[net_v35_short](~/Includes/NET-v35-Short-MD.MD)] e versões anteriores, o designador de AM/PM é ignorado.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Second : int" Usage="System.DateTime.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the seconds component of the date represented by this instance.</summary>
        <value>O componente de segundos, expresso como um valor entre 0 e 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.Second%2A> propriedade.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecifyKind">
      <MemberSignature Language="C#" Value="public static DateTime SpecifyKind (DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime SpecifyKind(valuetype System.DateTime value, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpecifyKind (value As DateTime, kind As DateTimeKind) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime SpecifyKind(DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="static member SpecifyKind : DateTime * DateTimeKind -&gt; DateTime" Usage="System.DateTime.SpecifyKind (value, kind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="value">A date and time.</param>
        <param name="kind">One of the enumeration values that indicates whether the new object represents local time, UTC, or neither.</param>
        <summary>Creates a new <see cref="T:System.DateTime" /> object that has the same number of ticks as the specified <see cref="T:System.DateTime" />, but is designated as either local time, Coordinated Universal Time (UTC), or neither, as indicated by the specified <see cref="T:System.DateTimeKind" /> value.</summary>
        <returns>A new object that has the same number of ticks as the object represented by the <paramref name="value" /> parameter and the <see cref="T:System.DateTimeKind" /> value specified by the <paramref name="kind" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um <xref:System.DateTime> objeto consiste em um campo de tipo que indica se o valor de tempo baseia-se na hora local, Tempo Universal Coordenado (UTC) ou nenhum deles, e um campo de tiques que contém um valor de tempo medido em tiques de 100 nanossegundos. O <xref:System.DateTime.SpecifyKind%2A> método cria um novo <xref:System.DateTime> usando especificado do objeto `kind` parâmetro e o valor de tempo original.  
  
> [!IMPORTANT]
>  Retornado <xref:System.DateTime> valor não representarem o mesmo instantâneo em tempo, como o `value` parâmetro, e <xref:System.DateTime.SpecifyKind%2A> não é um método de conversão de fuso horário. Em vez disso, ele deixa o tempo especificado pelo `value` parâmetro inalterados e define o <xref:System.DateTime.Kind%2A> propriedade para `kind`. Para obter informações sobre conversões de fuso horário, consulte [convertendo horários entre fusos horários](~/docs/standard/datetime/converting-between-time-zones.md).  
  
 O <xref:System.DateTime.SpecifyKind%2A> método é útil em cenários de interoperabilidade onde você recebe um <xref:System.DateTime> objeto com um campo de tipo não especificado, mas você pode determinar independente significa que o campo de tiques representa o horário local ou UTC.  
  
   
  
## Examples  
 O exemplo a seguir usa o método <xref:System.DateTime.SpecifyKind%2A> para demonstrar como a propriedade <xref:System.DateTime.Kind%2A> influencia os métodos de conversão <xref:System.DateTime.ToLocalTime%2A> e <xref:System.DateTime.ToUniversalTime%2A>.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Subtracts the specified time or duration from this instance.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : DateTime -&gt; TimeSpan" Usage="dateTime.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">The date and time value to subtract.</param>
        <summary>Subtracts the specified date and time from this instance.</summary>
        <returns>A time interval that is equal to the date and time represented by this instance minus the date and time represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.Subtract%28System.DateTime%29> método determina a diferença entre duas datas. Para subtrair um intervalo de tempo da instância atual, chame o <xref:System.DateTime.Subtract%28System.TimeSpan%29> método. Para subtrair um intervalo de tempo específico da instância atual, chame o método que adiciona esse intervalo de tempo para a data atual e fornece um valor negativo como o argumento de método. Por exemplo, para subtrair dois meses a partir da data atual, chamar o <xref:System.DateTime.AddMonths%28System.Int32%29> método com um valor de -2.  
  
 Se a data e hora da instância atual é anterior ao `value`, o método retorna um <xref:System.TimeSpan> objeto que representa um intervalo de tempo negativo. Ou seja, o valor de todas as suas propriedades diferente de zero (como <xref:System.TimeSpan.Days%2A> ou <xref:System.TimeSpan.Ticks%2A>) é negativo.  
  
 O <xref:System.DateTime.Subtract%28System.DateTime%29> método não considera o valor da <xref:System.DateTime.Kind%2A> propriedade dos dois <xref:System.DateTime> ao executar a subtração de valores. Antes de subtração <xref:System.DateTime> objetos, certifique-se de que os objetos representam vezes no mesmo fuso horário. Caso contrário, o resultado incluirá a diferença entre fusos horários.  
  
> [!NOTE]
>  O <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType> método considerar a diferença entre fusos horários ao executar a subtração.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o método <xref:System.DateTime.Subtract%2A> e o operador de subtração.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The result is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTime Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Subtract(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; DateTime" Usage="dateTime.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">The time interval to subtract.</param>
        <summary>Subtracts the specified duration from this instance.</summary>
        <returns>An object that is equal to the date and time represented by this instance minus the time interval represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.Subtract%28System.TimeSpan%29> método retorna a data em que uma diferença de intervalo de tempo especificado da instância atual. Para determinar o intervalo de tempo entre duas datas, chame o <xref:System.DateTime.Subtract%28System.DateTime%29> método. Para subtrair um intervalo de tempo específico da instância atual, chame o método que adiciona esse intervalo de tempo para a data atual e fornece um valor negativo como o argumento de método. Por exemplo, para subtrair dois meses a partir da data atual, chamar o <xref:System.DateTime.AddMonths%28System.Int32%29> método com um valor de -2.  
  
 Este método não altera o valor desse <xref:System.DateTime>. Em vez disso, ele retorna um novo <xref:System.DateTime> cujo valor é o resultado dessa operação.  
  
 Em geral, o <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> método subtrai um <xref:System.TimeSpan> objeto que representa um intervalo de tempo positivo e retorna um <xref:System.DateTime> valor que é anterior à data e hora da instância atual. No entanto, se o <xref:System.TimeSpan> objeto representa um período de tempo negativo, o <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> método retorna um <xref:System.DateTime> valor que é posterior à data e hora da instância atual.  
  
 O <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> método permite que você subtrair um intervalo de tempo que consiste em mais de uma unidade de tempo, como (um determinado número de horas) e um determinado número de minutos. Para subtrair de uma única unidade de tempo (como dias, meses ou anos) da <xref:System.DateTime> instância, você pode passar um valor numérico negativo como um parâmetro para qualquer um dos seguintes métodos:  
  
-   <xref:System.DateTime.AddYears%2A>, para subtrair um número específico de anos a partir da instância atual de data e hora.  
  
-   <xref:System.DateTime.AddMonths%2A>, para subtrair um número específico de meses a partir da instância atual de data e hora.  
  
-   <xref:System.DateTime.AddDays%2A>, para subtrair um número específico de dias a partir da instância atual de data e hora.  
  
-   <xref:System.DateTime.AddHours%2A>, para subtrair um número específico de horas da instância atual de data e hora.  
  
-   <xref:System.DateTime.AddMinutes%2A>, para subtrair um número específico de minutos da instância atual de data e hora.  
  
-   <xref:System.DateTime.AddSeconds%2A>, para subtrair um número específico de segundos da instância atual de data e hora.  
  
-   <xref:System.DateTime.AddMilliseconds%2A>, para subtrair um número específico de milissegundos da instância atual de data e hora.  
  
-   <xref:System.DateTime.AddTicks%2A>, para subtrair um número específico de tiques da instância atual de data e hora.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o método <xref:System.DateTime.Subtract%2A> e o operador de subtração.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The result is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>Returns the current <see cref="T:System.DateTime" /> object.</summary>
        <returns>The current object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type">The desired type.</param>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>Converts the current <see cref="T:System.DateTime" /> object to an object of a specified type.</summary>
        <returns>An object of the type specified by the <paramref name="type" /> parameter, with a value equivalent to the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DateTime" /> type.</exception>
        <altmember cref="T:System.Convert" />
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">The object to populate with data.</param>
        <param name="context">The destination for this serialization. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data needed to serialize the current <see cref="T:System.DateTime" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método preenche o `info` parâmetro com o <xref:System.DateTime.Ticks%2A> e <xref:System.DateTime.Kind%2A> valores de propriedade.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="info" /> is <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requer confiança total para o chamador imediato. Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.DateTime.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of ticks that represent the date and time of this instance.</summary>
        <value>O número de tiques que representam a data e hora dessa instância. O valor está entre <see langword="DateTime.MinValue.Ticks" /> e <see langword="DateTime.MaxValue.Ticks" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um único tique representa 100 nanossegundos ou um dez milionésimo de segundo. Há 10.000 escalas de um milissegundo ou tiques de 10 milhões em um segundo.  
  
 O valor dessa propriedade representa o número de intervalos de 100 nanossegundos decorridos desde 12:00:00 meia-noite de 1 de janeiro, 0001 (0: 00:00 UTC em 1 de janeiro, 0001, no calendário gregoriano), que representa <xref:System.DateTime.MinValue?displayProperty=nameWithType>. Ele não inclui o número de tiques que ser atribuídos a leap segundos.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.Ticks%2A> propriedade para exibir o número de tiques que passaram desde o início do século e instanciar uma <xref:System.TimeSpan> objeto. O <xref:System.TimeSpan> objeto é usado para exibir o tempo decorrido usando vários outros intervalos de tempo.  
  
 [!code-csharp[System.DateTime.Ticks#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Ticks/cs/Ticks.cs#1)]
 [!code-vb[System.DateTime.Ticks#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Ticks/vb/Ticks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : TimeSpan" Usage="System.DateTime.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the time of day for this instance.</summary>
        <value>Um intervalo de tempo que representa a fração do dia transcorrida desde a meia-noite.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ao contrário do <xref:System.DateTime.Date%2A> propriedade. que retorna um <xref:System.DateTime> valor que representa uma data sem o componente de tempo, o <xref:System.DateTime.TimeOfDay%2A> propriedade retorna um <xref:System.TimeSpan> valor que representa um <xref:System.DateTime> o componente de hora do valor.  
  
 Se você deseja exibir a hora do dia ou recuperar a representação de cadeia de caracteres da hora do dia de um <xref:System.DateTime> valor, em vez disso, você pode chamar uma sobrecarga o <xref:System.DateTime.ToString%2A> método que tem um `format` parâmetro ou use o [formatação composta ](~/docs/standard/base-types/composite-formatting.md) recurso com a cadeia de caracteres de formato padrão de "T" ou "t".  
  
   
  
## Examples  
 O exemplo a seguir exibe o valor da <xref:System.DateTime.TimeOfDay%2A> propriedade para uma matriz de <xref:System.DateTime> valores. Ele também compara o valor de retorno com a cadeia de caracteres retornada pela cadeia de caracteres de formato padrão "t" em uma operação de formatação composta.  
  
 [!code-csharp[System.DateTime.TimeOfDay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.timeofday/cs/timeofday1.cs#1)]
 [!code-vb[System.DateTime.TimeOfDay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.timeofday/vb/timeofday1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="ToBinary">
      <MemberSignature Language="C#" Value="public long ToBinary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToBinary() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToBinary" />
      <MemberSignature Language="VB.NET" Value="Public Function ToBinary () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToBinary();" />
      <MemberSignature Language="F#" Value="member this.ToBinary : unit -&gt; int64" Usage="dateTime.ToBinary " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Serializes the current <see cref="T:System.DateTime" /> object to a 64-bit binary value that subsequently can be used to recreate the <see cref="T:System.DateTime" /> object.</summary>
        <returns>A 64-bit signed integer that encodes the <see cref="P:System.DateTime.Kind" /> and <see cref="P:System.DateTime.Ticks" /> properties.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.DateTime.ToBinary%2A> método para converter o valor atual <xref:System.DateTime> objeto para um valor binário. Em seguida, usar o valor binário e o <xref:System.DateTime.FromBinary%2A> método para recriar o original <xref:System.DateTime> objeto.  
  
> [!IMPORTANT]
>  Em alguns casos, o <xref:System.DateTime> valor retornado pelo <xref:System.DateTime.FromBinary%2A> método não é idêntico ao valor original <xref:System.DateTime> valor fornecido para o <xref:System.DateTime.ToBinary%2A> método. Para obter mais informações, consulte a próxima seção, "Ajuste de horário Local".  
  
## <a name="local-time-adjustment"></a>Ajuste de hora local  
 A hora local, que é um Coordinated Universal Time ajustado para o fuso horário local, é representada por um <xref:System.DateTime> estrutura cujo <xref:System.DateTime.Kind%2A> propriedade possui o valor <xref:System.DateTimeKind.Local>. Ao restaurar um local <xref:System.DateTime> valor a partir da representação binária que é produzida pelo <xref:System.DateTime.ToBinary%2A> método, o <xref:System.DateTime.FromBinary%2A> método pode ajustar o valor recriado para que ele não é igual ao valor original. Isso pode ocorrer nas seguintes condições:  
  
-   Se um local <xref:System.DateTime> o objeto é serializado em um fuso horário, o <xref:System.DateTime.ToBinary%2A> método e então desserializado em um fuso horário diferente, o <xref:System.DateTime.FromBinary%2A> método, a hora local representado pela resultante <xref:System.DateTime> objeto é automaticamente ajustado para o segundo fuso horário.  
  
     Por exemplo, considere um <xref:System.DateTime> objeto que representa a hora local de 15. Um aplicativo que está em execução nos EUA. Fuso horário do Pacífico usa o <xref:System.DateTime.ToBinary%2A> método para converter que <xref:System.DateTime> objeto para um valor binário. Outro aplicativo está em execução nos EUA. Fuso horário do Leste usa o <xref:System.DateTime.FromBinary%2A> método para converter o valor binário em um novo <xref:System.DateTime> objeto. O valor do novo <xref:System.DateTime> objeto é 18: 00, que representa o mesmo ponto no tempo em que o original 15: 00 valor, mas é ajustado para horário local no fuso horário do Leste dos EUA.  
  
-   Se a representação binária de um local <xref:System.DateTime> valor representa um período inválido no fuso horário local do sistema no qual <xref:System.DateTime.FromBinary%2A> é chamado, o tempo é ajustado para que ele é válido.  
  
     Por exemplo, a transição do horário padrão para o horário de verão ocorre nos EUA. Fuso horário do Pacífico na 14 de março de 2010, às 2:00, quando o tempo avança em uma hora para 3:00 Este intervalo de hora é uma hora inválida, ou seja, um intervalo de hora que não existe nesse fuso horário. O exemplo a seguir mostra que, quando uma hora que esteja dentro desse intervalo é convertido em um valor binário, o <xref:System.DateTime.ToBinary%2A> método e então é restaurada o <xref:System.DateTime.FromBinary%2A> método, o valor original é ajustado para se tornar uma hora válida. É possível determinar se um valor de data e hora específico podem estar sujeito à modificação passando-o para o método <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType>, como o exemplo ilustra.  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>Considerações da versão  
 Iniciando com o .NET Framework versão 2.0, um <xref:System.DateTime> estrutura consiste em um campo de tipo particular, o que indica se o valor de tempo especificado é baseado em hora local, Tempo Universal Coordenado (UTC) ou nenhum deles e um campo particular de tiques, que contém o número de tiques de 100 nanossegundos que especifique uma data e hora. O campo de tiques pode ser acessado com o <xref:System.DateTime.Ticks%2A> propriedade e o campo de tipo podem ser acessados com o <xref:System.DateTime.Kind%2A> propriedade.  
  
 Antes do .NET Framework 2.0, se você serializado uma <xref:System.DateTime> objeto manualmente, em vez de usar uma interface de serialização, como <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>, é necessário apenas para serializar os dados de tiques no <xref:System.DateTime> estrutura. Começando com a versão 2.0, você também deve serializar os dados do tipo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.FromBinary(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Today : DateTime" Usage="System.DateTime.Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current date.</summary>
        <value>Um objeto definido como data de hoje, com o componente de tempo definido como 00:00:00.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Iniciando com o .NET Framework versão 2.0, o valor retornado é um <xref:System.DateTime> cujo <xref:System.DateTime.Kind%2A> propriedade retorna <xref:System.DateTimeKind.Local>.  
  
 Porque retorna a data atual sem o tempo atual, o <xref:System.DateTime.Today%2A> propriedade é adequada para uso em aplicativos que funcionam apenas com datas. Para obter detalhes, consulte [escolhendo entre DateTime, DateTimeOffset, TimeSpan e TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md). Em contraste, o <xref:System.DateTime.TimeOfDay%2A> propriedade retorna a hora atual sem a data atual e o <xref:System.DateTime.Now%2A> propriedade retorna a data atual e a hora atual.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.Date%2A> propriedade para recuperar a data atual. Ele também ilustra como uma <xref:System.DateTime> valor pode ser formatado usando algumas das cadeias de caracteres de formato de hora e data padrão. Observe que a saída produzida pela terceira chamada para o <xref:System.DateTime.ToString%28System.String%29> método usa o especificador de formato g para incluir o componente de tempo, que é zero.  
  
 [!code-csharp[System.DateTime.Today#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Today/cs/Today1.cs#1)]
 [!code-vb[System.DateTime.Today#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Today/vb/Today1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Now" />
        <altmember cref="P:System.DateTime.TimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberSignature Language="F#" Value="member this.ToFileTime : unit -&gt; int64" Usage="dateTime.ToFileTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to a Windows file time.</summary>
        <returns>The value of the current <see cref="T:System.DateTime" /> object expressed as a Windows file time.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma hora de arquivo do Windows é um valor de 64 bits que representa o número de intervalos de 100 nanossegundos desde a meia-noite de 12h00, 1º de janeiro de 1601 A.D. (C.E.) Tempo Universal Coordenado (UTC). O Windows usa uma hora de arquivo a ser registrada quando um aplicativo cria, acessa ou grava em um arquivo.  
  
 O <xref:System.DateTime.ToFileTime%2A> método usa o <xref:System.DateTime.Kind%2A> propriedade para determinar se o atual <xref:System.DateTime> objeto é a hora local, uma hora UTC ou um tipo não especificado de tempo que é tratado como uma hora local.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.ToFileTime%2A> método.  
  
 [!code-cpp[DateTime.ToFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E. UTC.</exception>
        <block subset="none" type="usage">
          <para>Em geral, o <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> método restaurações um <see cref="T:System.DateTime" /> valor que foi salvo pelo <see cref="M:System.DateTime.ToFileTime" /> método. No entanto, os dois valores podem diferir sob as seguintes condições: - se a serialização e desserialização do <see cref="T:System.DateTime" /> ocorrer em fusos horários diferentes. Por exemplo, se um <see cref="T:System.DateTime" /> valor com uma hora de 12:30 PM nos EUA. Fuso horário do Leste dos EUA é serializado e desserializado nos EUA. Fuso horário do Pacífico, o valor original de 12:30 PM é ajustado para 9:30 da manhã para refletir a diferença entre os dois fusos horários.  -Se a <see cref="T:System.DateTime" /> valor é serializado representa um período inválido no fuso horário local. Nesse caso, o <see cref="M:System.DateTime.ToFileTime" /> método ajusta restaurado <see cref="T:System.DateTime" /> valor para que ele representa uma hora válida no fuso horário local.  Por exemplo, a transição do horário padrão para o horário de verão ocorre nos EUA. Fuso horário do Pacífico na 14 de março de 2010, às 2:00, quando o tempo avança em uma hora para 3:00 Este intervalo de hora é uma hora inválida, ou seja, um intervalo de hora que não existe nesse fuso horário. O exemplo a seguir mostra que, quando uma hora que esteja dentro desse intervalo é convertido em um valor inteiro longo com o <see cref="M:System.DateTime.ToFileTime" /> método e então é restaurada o <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> método, o valor original é ajustado para se tornar uma hora válida. Você pode determinar se um determinado valor de data e hora podem estar sujeito a modificação, passando-o para o <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> método, como mostra o exemplo.  [! code-csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)] [! code-vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToFileTimeUtc" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTimeUtc">
      <MemberSignature Language="C#" Value="public long ToFileTimeUtc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTimeUtc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTimeUtc" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTimeUtc () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTimeUtc();" />
      <MemberSignature Language="F#" Value="member this.ToFileTimeUtc : unit -&gt; int64" Usage="dateTime.ToFileTimeUtc " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to a Windows file time.</summary>
        <returns>The value of the current <see cref="T:System.DateTime" /> object expressed as a Windows file time.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma hora de arquivo do Windows é um valor de 64 bits que representa o número de intervalos de 100 nanossegundos desde a meia-noite de 12h00, 1º de janeiro de 1601 A.D. (C.E.) Tempo Universal Coordenado (UTC). O Windows usa uma hora de arquivo a ser registrada quando um aplicativo cria, acessa ou grava em um arquivo.  
  
 O <xref:System.DateTime.ToFileTimeUtc%2A> método usa o <xref:System.DateTime.Kind%2A> propriedade para determinar se o atual <xref:System.DateTime> objeto é um tipo não especificado de tempo que é tratado como uma hora UTC, uma hora UTC ou a hora local. Se for a hora local, ele converte a hora em UTC antes de executar a conversão em um horário de arquivo do Windows.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E. UTC.</exception>
        <block subset="none" type="usage">
          <para>O <see cref="M:System.DateTime.ToFileTimeUtc" /> método às vezes é usado para converter a hora local em UTC e depois restaurá-lo chamando o <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" /> método seguido de <see cref="M:System.DateTime.ToLocalTime" /> método. No entanto, se a hora original representa um período inválido no fuso horário local, os dois valores de hora local não serão iguais. Para obter informações adicionais, consulte o <see cref="M:System.DateTime.ToLocalTime" /> método.</para>
        </block>
        <altmember cref="M:System.DateTime.ToFileTime" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTime ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToLocalTime();" />
      <MemberSignature Language="F#" Value="member this.ToLocalTime : unit -&gt; DateTime" Usage="dateTime.ToLocalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to local time.</summary>
        <returns>An object whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Local" />, and whose value is the local time equivalent to the value of the current <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MaxValue" /> if the converted value is too large to be represented by a <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MinValue" /> if the converted value is too small to be represented as a <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A hora local é igual para o tempo Universal Coordenado (UTC) mais o deslocamento UTC. Para obter mais informações sobre o deslocamento UTC, consulte <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>. A conversão também leva em conta a regra de horário de verão que se aplica a hora representada pelo atual <xref:System.DateTime> objeto.  
  
> [!IMPORTANT]
>  Em [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemas, o <xref:System.DateTime.ToLocalTime%2A> método reconhece somente a regra de ajuste atual ao converter de UTC para o horário local. Como resultado, conversões para períodos antes da regra de ajuste atual foi originada em vigor podem não refletir com precisão a diferença entre o UTC e a hora local.  
  
 Iniciando com o .NET Framework versão 2.0, o valor retornado pelo <xref:System.DateTime.ToLocalTime%2A> método é determinado pelo <xref:System.DateTime.Kind%2A> propriedade <xref:System.DateTime> objeto. A tabela a seguir descreve os possíveis resultados.  
  
|Tipo|Resultados|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|Esta instância do <xref:System.DateTime> é convertido para a hora local.|  
|<xref:System.DateTimeKind.Local>|Nenhuma conversão é executada.|  
|<xref:System.DateTimeKind.Unspecified>|Esta instância do <xref:System.DateTime> é considerado como uma hora UTC, e a conversão é executada como se <xref:System.DateTime.Kind%2A> foram <xref:System.DateTimeKind.Utc>.|  
  
> [!NOTE]
>  O <xref:System.DateTime.ToLocalTime%2A> método converte um <xref:System.DateTime> valor do UTC para o horário local. Para converter a hora em qualquer fuso horário designado para o horário local, use o <xref:System.TimeZoneInfo.ConvertTime%2A?displayProperty=nameWithType> método.  
  
 O valor retornado pela conversão é um <xref:System.DateTime> cujo <xref:System.DateTime.Kind%2A> propriedade sempre retorna <xref:System.DateTimeKind.Local>. Consequentemente, um resultado válido é retornado mesmo que <xref:System.DateTime.ToLocalTime%2A> é aplicado repetidamente o mesmo <xref:System.DateTime>.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.ToLocalTime%2A> método. Observe que a saída exata depende da cultura atual e o fuso horário local do sistema no qual ele é executado.  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 O exemplo a seguir usa o método <xref:System.DateTime.SpecifyKind%2A> para demonstrar como a propriedade <xref:System.DateTime.Kind%2A> influencia os métodos de conversão <xref:System.DateTime.ToLocalTime%2A> e <xref:System.DateTime.ToUniversalTime%2A>.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Você pode usar o <see cref="M:System.DateTime.ToLocalTime" /> método para restaurar um local valor de data e hora que foi convertida para UTC, o <see cref="M:System.DateTime.ToUniversalTime" /> ou <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" /> método. No entanto, se a hora original representa um período inválido no fuso horário local, não corresponde o valor restaurado. Quando o <see cref="M:System.DateTime.ToLocalTime" /> método converte uma hora do UTC para o fuso horário local, ele também ajusta o tempo de forma que é válido no fuso horário local.  Por exemplo, a transição do horário padrão para o horário de verão ocorre nos EUA. Fuso horário do Pacífico na 14 de março de 2010, às 2:00, quando o tempo avança em uma hora para 3:00 Este intervalo de hora é uma hora inválida, ou seja, um intervalo de hora que não existe nesse fuso horário. O exemplo a seguir mostra que, quando uma hora que esteja dentro desse intervalo é convertido para UTC, o <see cref="M:System.DateTime.ToUniversalTime" /> método e então é restaurada o <see cref="M:System.DateTime.ToLocalTime" /> método, o valor original é ajustado para se tornar uma hora válida. Você pode determinar se um determinado valor de data e hora podem estar sujeito a modificação, passando-o para o <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> método, como mostra o exemplo.  [! code-csharp[System.DateTime.ToLocalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolocaltime/cs/tolocaltime1.cs#1)] [! code-vb[System.DateTime.ToLocalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolocaltime/vb/tolocaltime1.vb#1)]</para>
        </block>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.TimeZone.GetDaylightChanges(System.Int32)" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToLongDateString">
      <MemberSignature Language="C#" Value="public string ToLongDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongDateString();" />
      <MemberSignature Language="F#" Value="member this.ToLongDateString : unit -&gt; string" Usage="dateTime.ToLongDateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent long date string representation.</summary>
        <returns>A string that contains the long date string representation of the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor atual <xref:System.DateTime> objeto é formatado usando o padrão definido pelo <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> propriedade associada a cultura do thread atual. O valor de retorno é idêntico ao valor retornado, especificando "D" [cadeia de caracteres de formato DateTime padrão](~/docs/standard/base-types/standard-date-and-time-format-strings.md) com o <xref:System.DateTime.ToString%28System.String%29> método.  
  
> [!IMPORTANT]
>  A cadeia de caracteres retornada pelo <xref:System.DateTime.ToLongDateString%2A> método é sensíveis à cultura. Ele reflete o padrão definido da cultura atual <xref:System.Globalization.DateTimeFormatInfo> objeto. Por exemplo, para a cultura en-US, o padrão de data por extenso padrão é "dddd, MMMMdd, aaaa"; para a cultura de-DE, é "dddd, d. MMMMyyyy"; para a cultura ja-JP, ele é "aaaa '?' M'? ' d'? ' ". A cadeia de caracteres de formato específico em um determinado computador também pode ser personalizada para que ele difere de cadeia de caracteres de formato de data por extenso padrão.  
  
 Para obter mais informações sobre a cultura do thread atual, consulte o <xref:System.Threading.Thread.CurrentCulture%2A> propriedade. Para obter mais informações sobre caracteres de formato, os padrões de formato e a saída que geram, consulte o [tipos de formatação](~/docs/standard/base-types/formatting-types.md) tópico. Para obter mais informações sobre como alterar o padrão de formato associado a um caractere de formato, consulte a classe <xref:System.Globalization.DateTimeFormatInfo>.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.ToLongDateString%2A> método.  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToLongTimeString">
      <MemberSignature Language="C#" Value="public string ToLongTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongTimeString();" />
      <MemberSignature Language="F#" Value="member this.ToLongTimeString : unit -&gt; string" Usage="dateTime.ToLongTimeString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent long time string representation.</summary>
        <returns>A string that contains the long time string representation of the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor atual <xref:System.DateTime> objeto é formatado usando o padrão definido pelo <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A?displayProperty=nameWithType> propriedade associada a cultura do thread atual. O valor de retorno é idêntico ao valor retornado, especificando "T" [cadeia de caracteres de formato de data e hora padrão](~/docs/standard/base-types/standard-date-and-time-format-strings.md) com o <xref:System.DateTime.ToString%28System.String%29> método.  
  
> [!IMPORTANT]
>  A cadeia de caracteres retornada pelo <xref:System.DateTime.ToLongTimeString%2A> método é sensíveis à cultura. Ele reflete o padrão definido pelo <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> propriedade da cultura atual <xref:System.Globalization.DateTimeFormatInfo> objeto. Por exemplo, para a cultura en-US, o padrão de tempo padrão é "h:mm: ss tt"; para a cultura de-DE, é "Hh"; para a cultura ja-JP, ele é "H:mm: ss". A cadeia de caracteres de formato específico em um determinado computador também pode ser personalizada para que ele é diferente de cadeia de caracteres de formato padrão muito tempo.  
  
 Para obter mais informações sobre a cultura do thread atual, consulte o <xref:System.Threading.Thread.CurrentCulture%2A> propriedade. Para obter mais informações sobre caracteres de formato, os padrões de formato e a saída que geram, consulte o [tipos de formatação](~/docs/standard/base-types/formatting-types.md) tópico. Para obter mais informações sobre como alterar o padrão de formato associado a um caractere de formato, consulte a classe <xref:System.Globalization.DateTimeFormatInfo>.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.ToLongTimeString%2A> método.  
  
 [!code-csharp[System.DateTime.ToLongTimeString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolongtimestring/cs/sls.cs#1)]
 [!code-vb[System.DateTime.ToLongTimeString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolongtimestring/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToOADate">
      <MemberSignature Language="C#" Value="public double ToOADate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 ToOADate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToOADate" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOADate () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ToOADate();" />
      <MemberSignature Language="F#" Value="member this.ToOADate : unit -&gt; double" Usage="dateTime.ToOADate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of this instance to the equivalent OLE Automation date.</summary>
        <returns>A double-precision floating-point number that contains an OLE Automation date equivalent to the value of this instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma data de automação OLE é implementada como um número de ponto flutuante cujo componente integral é o número de dias antes ou depois da meia-noite, 30 de dezembro de 1899, e cujo componente fracionário representa a hora em que dia dividido por 24. Por exemplo, meia-noite de 31 de dezembro de 1899 é representado por 1.0; 6: 00, 1 de janeiro de 1900 é representado por 2,25; meia-noite, 29 de dezembro de 1899 é representado por -1,0; e 6h, 29 de dezembro de 1899 é representado por -1,25.  
  
 O OLE Automation data base é meia-noite, 30 de dezembro de 1899. A data mínima de automação OLE é meia-noite, de 0100 1 de janeiro. A OLE Automation data máxima é o mesmo que <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, o último momento de 31 de dezembro 9999.  
  
 O <xref:System.DateTime.ToOADate%2A> método lança um <xref:System.OverflowException> se a instância atual representa uma data posterior a <xref:System.DateTime.MinValue> e anterior à meia-noite de January1, 0100. No entanto, se o valor da instância atual for <xref:System.DateTime.MinValue>, o método retornará 0.  
  
 Para obter mais informações sobre a automação OLE, consulte o [MSDN Library](http://go.microsoft.com/fwlink/?linkid=37118).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">The value of this instance cannot be represented as an OLE Automation Date.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.DateTime.FromOADate(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="ToShortDateString">
      <MemberSignature Language="C#" Value="public string ToShortDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortDateString();" />
      <MemberSignature Language="F#" Value="member this.ToShortDateString : unit -&gt; string" Usage="dateTime.ToShortDateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent short date string representation.</summary>
        <returns>A string that contains the short date string representation of the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor atual <xref:System.DateTime> objeto é formatado usando o padrão definido pelo <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A?displayProperty=nameWithType> propriedade associada a cultura do thread atual. O valor de retorno é idêntico ao valor retornado, especificando "d" [cadeia de caracteres de formato DateTime padrão](~/docs/standard/base-types/standard-date-and-time-format-strings.md) com o <xref:System.DateTime.ToString%28System.String%29> método.  
  
> [!IMPORTANT]
>  A cadeia de caracteres retornada pelo <xref:System.DateTime.ToShortDateString%2A> método é sensíveis à cultura. Ele reflete o padrão definido da cultura atual <xref:System.Globalization.DateTimeFormatInfo> objeto. Por exemplo, para a cultura en-US, o padrão de data abreviada padrão é "M/aaaa"; para a cultura de-DE, ele é "dd. MM.yyyy"; para a cultura ja-JP, ele é "aaaa/M/d". A cadeia de caracteres de formato específico em um determinado computador também pode ser personalizada para que ele difere de cadeia de caracteres de formato de data abreviada padrão.  
  
 Para obter mais informações sobre a cultura do thread atual, consulte o <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> propriedade. Para obter mais informações sobre caracteres de formato, os padrões de formato e a saída que geram, consulte o [tipos de formatação](~/docs/standard/base-types/formatting-types.md) tópico. Para obter mais informações sobre como alterar o padrão de formato associado a um caractere de formato, consulte a classe <xref:System.Globalization.DateTimeFormatInfo>.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.ToShortDateString%2A> método. Ele também mostra que o resultado da chamada de <xref:System.DateTime.ToShortDateString%2A> método é idêntico a chamar o <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> método com "d" como o parâmetro de formato.  
  
 [!code-csharp[System.DateTime.ToShortDateString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/cs/ToShortDateString.cs#1)]
 [!code-vb[System.DateTime.ToShortDateString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/vb/ToShortDateString.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToShortTimeString">
      <MemberSignature Language="C#" Value="public string ToShortTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortTimeString();" />
      <MemberSignature Language="F#" Value="member this.ToShortTimeString : unit -&gt; string" Usage="dateTime.ToShortTimeString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent short time string representation.</summary>
        <returns>A string that contains the short time string representation of the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor atual <xref:System.DateTime> objeto é formatado usando o padrão definido pelo <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A?displayProperty=nameWithType> propriedade associada a cultura do thread atual. O valor de retorno é idêntico ao valor retornado, especificando "t" [cadeia de caracteres de formato DateTime padrão](~/docs/standard/base-types/standard-date-and-time-format-strings.md) com o <xref:System.DateTime.ToString%28System.String%29> método.  
  
> [!IMPORTANT]
>  A cadeia de caracteres retornada pelo <xref:System.DateTime.ToShortTimeString%2A> método é sensíveis à cultura. Ele reflete o padrão definido da cultura atual <xref:System.Globalization.DateTimeFormatInfo> objeto. Por exemplo, para a cultura en-US, o padrão de curto período de tempo padrão é "h:mm tt"; para a cultura de-DE, é "Hh: mm"; para a cultura ja-JP, ele é "H:mm". A cadeia de caracteres de formato específico em um determinado computador também pode ser personalizada para que ele é diferente de cadeia de caracteres de formato padrão curto período de tempo.  
  
 Para obter mais informações sobre a cultura do thread atual, consulte o <xref:System.Threading.Thread.CurrentCulture%2A> propriedade. Para obter mais informações sobre caracteres de formato, os padrões de formato e a saída que geram, consulte o [tipos de formatação](~/docs/standard/base-types/formatting-types.md) tópico. Para obter mais informações sobre como alterar o padrão de formato associado a um caractere de formato, consulte a classe <xref:System.Globalization.DateTimeFormatInfo>.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.ToShortTimeString%2A> método.  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dateTime.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the formatting conventions of the current culture.</summary>
        <returns>A string representation of the value of the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor atual <xref:System.DateTime> objeto é formatado usando o especificador de formato de hora ('G') e Data geral. Para formatar usando um especificador de formato de hora e data específica, chame o <xref:System.DateTime.ToString%28System.String%29> método. Para formatar usando o especificador de formato de hora ('G') e Data geral para uma cultura específica, chame o <xref:System.DateTime.ToString%28System.IFormatProvider%29> método. Para formatar usando uma data específica e especificador de formato de hora e as convenções de uma cultura específica, chame o <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> método.  
  
 Este método usa informações de formatação derivadas da cultura atual. Em particular, ele combina as cadeias de caracteres de formato personalizado retornadas pelo <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> e <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> propriedades do <xref:System.Globalization.DateTimeFormatInfo> objeto retornado pelo `Thread.CurrentThread.CurrentCulture.DateTimeFormat` propriedade. Para obter mais informações, consulte <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>. Outras sobrecargas do <xref:System.DateTime.ToString%2A> método permitem especificar a cultura cuja formatação para usar e para definir o padrão de saída do <xref:System.DateTime> valor.  
  
   
  
## Examples  
 O exemplo a seguir ilustra como a representação de cadeia de caracteres de um <xref:System.DateTime> valor retornado pelo <xref:System.DateTime.ToString> método depende a cultura do thread atual. Ele altera a cultura do thread atual de en-US para fr-FR ao ja-JP. e, em cada caso, chamadas de <xref:System.DateTime.ToString> método para retornar a representação de cadeia de caracteres de um valor de data e hora usando aquela cultura.  
  
 [!code-csharp[System.DateTime.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.DateTime.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by the current culture.</exception>
        <block subset="none" type="usage">
          <para>O <see cref="M:System.DateTime.ToString" /> método retorna a representação de cadeia de caracteres de data e hora em que o calendário usado pela cultura atual. Caso o valor da instância <see cref="T:System.DateTime" /> atual seja anterior a <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> ou posterior a <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, o método lança um <see cref="T:System.ArgumentOutOfRangeException" />. O exemplo a seguir fornece uma ilustração. Ele tenta formatar uma data que está fora do intervalo da <see cref="T:System.Globalization.HijriCalendar" /> classe quando a cultura atual é árabe (Síria).  [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception2.cs# 2)] [! código-vb [System.DateTime.ToString.ArgumentOutOfRangeException#2] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/ DateTime.ToString.argumentoutofrangeexception2.vb#2])</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="dateTime.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified culture-specific format information.</summary>
        <returns>A string representation of value of the current <see cref="T:System.DateTime" /> object as specified by <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor atual <xref:System.DateTime> objeto é formatado usando o especificador de formato de hora ('G'), que formata a saída usando o padrão de data abreviada e o padrão de tempo e Data geral.  
  
 O formato de data abreviada e tempo padrão de hora é definido pelo `provider` parâmetro. O parâmetro `provider` pode ser um dos seguintes:  
  
-   Um objeto <xref:System.Globalization.CultureInfo> que representa a cultura cujas convenções de formatação devem ser refletidas na cadeia de caracteres retornada. O objeto <xref:System.Globalization.DateTimeFormatInfo> retornado pela propriedade <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> define a formatação da cadeia de caracteres retornada.  
  
-   Um objeto <xref:System.Globalization.DateTimeFormatInfo> que define o formato dos dados de data e hora.  
  
-   Um objeto personalizado que implementa a interface <xref:System.IFormatProvider>. O método <xref:System.IFormatProvider.GetFormat%2A> retorna um objeto <xref:System.Globalization.DateTimeFormatInfo> que fornece informações de formatação.  
  
 Se `provider` é `null`, o <xref:System.Globalization.DateTimeFormatInfo> objeto associado com a cultura atual é usado. Para obter mais informações, consulte <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 O exemplo a seguir exibe a representação de cadeia de caracteres de data e hora usando <xref:System.Globalization.CultureInfo> objetos que representam diferentes cinco culturas.  
  
 [!code-csharp[System.DateTime.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString4.cs#3)]
 [!code-vb[System.DateTime.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString4.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by <paramref name="provider" />.</exception>
        <block subset="none" type="usage">
          <para>O <see cref="M:System.DateTime.ToString(System.IFormatProvider)" /> método retorna a representação de cadeia de caracteres de data e hora no calendário usado pela cultura representada pelo <paramref name="provider" /> parâmetro. O calendário é definido pela propriedade <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />. Caso o valor da instância <see cref="T:System.DateTime" /> atual seja anterior a <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> ou posterior a <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, o método lança um <see cref="T:System.ArgumentOutOfRangeException" />. O exemplo a seguir fornece uma ilustração. Ele tenta formatar uma data que está fora do intervalo da <see cref="T:System.Globalization.JapaneseCalendar" /> classe.  [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception1.cs# 1)] [! código-vb [System.DateTime.ToString.ArgumentOutOfRangeException#1] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/ DateTime.ToString.argumentoutofrangeexception1.vb#1])</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="dateTime.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">A standard or custom date and time format string.</param>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified format and the formatting conventions of the current culture.</summary>
        <returns>A string representation of value of the current <see cref="T:System.DateTime" /> object as specified by <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.ToString%28System.String%29> método retorna a representação de cadeia de caracteres de um valor de data e hora em um formato específico que usa as convenções de formatação da cultura atual; para obter mais informações, consulte <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
 O `format` parâmetro deve conter um caractere de especificador de formato único (consulte [padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) ou um padrão de formato personalizado (consulte [personalizado de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/custom-date-and-time-format-strings.md) ) que define o formato de cadeia de caracteres retornada. Se `format` é `null` ou uma cadeia de caracteres vazia, o especificador de formato geral, 'G', é usada.  
  
 Alguns usos desse método incluem:  
  
-   Obter uma cadeia de caracteres que exibe a data e hora no formato de hora e de data abreviada da cultura atual. Para fazer isso, você deve usar o especificador de formato "G".  
  
-   Obter uma cadeia de caracteres que contém apenas o mês e ano. Para fazer isso, use a cadeia de caracteres de formato "MM/AAAA". A cadeia de caracteres de formato usa o separador de data da cultura atual.  
  
-   Obter uma cadeia de caracteres que contém a data e hora em um formato específico. Por exemplo, o "dd/MM/yyyyHH:mm" cadeia de caracteres de formato exibe a cadeia de caracteres de data e hora em um formato fixo como "19 2013 / / 03 / / 18:06". Usa a cadeia de caracteres de formato "/" como um separador de data fixa, independentemente das configurações de cultura específica.  
  
-   Obter uma data no formato condensado que pode ser usado para serializar uma cadeia de caracteres de data. Por exemplo, a cadeia de caracteres de formato "AAAAMMDD" exibe um ano de quatro dígitos, seguido por um mês de dois dígitos e um dia de dois dígitos, sem nenhum separador de data.  
  
 O exemplo a seguir usa esses três cadeias de caracteres de formato para exibir um valor de data e hora usando as convenções de culturas en-US e fr-FR.  
  
 [!code-csharp[System.DateTime.ToString#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring5.cs#5)]
 [!code-vb[System.DateTime.ToString#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring5.vb#5)]  
  
   
  
## Examples  
 O exemplo a seguir usa cada padrão de data e cadeias de caracteres de formato de hora e uma seleção de data personalizada e cadeias de caracteres de formato de hora para exibir a representação de cadeia de caracteres de uma <xref:System.DateTime> valor. A cultura do thread atual para o exemplo é en-US.  
  
 [!code-csharp[System.DateTime.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString2.cs#2)]
 [!code-vb[System.DateTime.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">The length of <paramref name="format" /> is 1, and it is not one of the format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.  -or-  <paramref name="format" /> does not contain a valid custom format pattern.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by the current culture.</exception>
        <block subset="none" type="usage">
          <para>O <see cref="M:System.DateTime.ToString(System.String)" /> método retorna a representação de cadeia de caracteres de data e hora em que o calendário usado pela cultura atual. Caso o valor da instância <see cref="T:System.DateTime" /> atual seja anterior a <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> ou posterior a <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, o método lança um <see cref="T:System.ArgumentOutOfRangeException" />. O exemplo a seguir fornece uma ilustração. Ele tenta formatar uma data que está fora do intervalo da <see cref="T:System.Globalization.HebrewCalendar" /> classe quando a cultura atual é hebraico (Israel).  [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception3.cs# 3)] [! código-vb [System.DateTime.ToString.ArgumentOutOfRangeException#3] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/ DateTime.ToString.argumentoutofrangeexception3.vb#3])</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="dateTime.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">A standard or custom date and time format string.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified format and culture-specific format information.</summary>
        <returns>A string representation of value of the current <see cref="T:System.DateTime" /> object as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `format` parâmetro pode conter um caractere de especificador de formato único (consulte [padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) ou um padrão de formato personalizado (consulte [personalizado de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/custom-date-and-time-format-strings.md)). Se `format` é `null` ou uma cadeia de caracteres vazia (""), o especificador de formato padrão, "G", é usado.  
  
 O `provider` parâmetro define o padrão que corresponde ao especificadores de formato padrão, bem como os símbolos e nomes de componentes de data e hora. O parâmetro `provider` pode ser um dos seguintes:  
  
-   Um objeto <xref:System.Globalization.CultureInfo> que representa a cultura cujas convenções de formatação devem ser refletidas na cadeia de caracteres retornada. O objeto <xref:System.Globalization.DateTimeFormatInfo> retornado pela propriedade <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> define a formatação da cadeia de caracteres retornada.  
  
-   Um objeto <xref:System.Globalization.DateTimeFormatInfo> que define o formato dos dados de data e hora.  
  
-   Um objeto personalizado que implementa a interface <xref:System.IFormatProvider>. O método <xref:System.IFormatProvider.GetFormat%2A> retorna um objeto <xref:System.Globalization.DateTimeFormatInfo> que fornece informações de formatação.  
  
 Se `provider` é `null`, o <xref:System.Globalization.DateTimeFormatInfo> associado atual cultura é usada. Para obter mais informações, consulte <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 O exemplo a seguir usa a cada uma das cadeias de caracteres de formato de hora padrão de data para exibir a representação de cadeia de caracteres de data e hora para quatro culturas diferentes.  
  
 [!code-csharp[System.DateTime.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring3.cs#4)]
 [!code-vb[System.DateTime.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring3.vb#4)]  
  
 O exemplo a seguir demonstra as diferentes maneiras de formatar um <xref:System.DateTime> valor usando a constante <xref:System.Globalization.DateTimeFormatInfo>.  
  
 [!code-cpp[Classic DateTime.ToString2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DateTime.ToString2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CS/source.cs#1)]
 [!code-vb[Classic DateTime.ToString2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">The length of <paramref name="format" /> is 1, and it is not one of the format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.  -or-  <paramref name="format" /> does not contain a valid custom format pattern.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by <paramref name="provider" />.</exception>
        <block subset="none" type="usage">
          <para>O <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" /> método retorna a representação de cadeia de caracteres de data e hora em que o calendário usado pelo <paramref name="provider" /> parâmetro. O calendário é definido pela propriedade <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />. Caso o valor da instância <see cref="T:System.DateTime" /> atual seja anterior a <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> ou posterior a <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, o método lança um <see cref="T:System.ArgumentOutOfRangeException" />. O exemplo a seguir fornece uma ilustração. Ele tenta formatar uma data que está fora do intervalo da <see cref="T:System.Globalization.UmAlQuraCalendar" /> classe.  [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception4.cs# 4)] [! código-vb [System.DateTime.ToString.ArgumentOutOfRangeException#4] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/ DateTime.ToString.argumentoutofrangeexception4.vb#4])</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTime ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToUniversalTime();" />
      <MemberSignature Language="F#" Value="member this.ToUniversalTime : unit -&gt; DateTime" Usage="dateTime.ToUniversalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to Coordinated Universal Time (UTC).</summary>
        <returns>An object whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Utc" />, and whose value is the UTC equivalent to the value of the current <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MaxValue" /> if the converted value is too large to be represented by a <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MinValue" /> if the converted value is too small to be represented by a <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O tempo Universal Coordenado (UTC) é igual à hora local menos o deslocamento UTC. Para obter mais informações sobre o deslocamento UTC, consulte <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>. A conversão também leva em conta a regra de horário de verão que se aplica a hora representada pelo atual <xref:System.DateTime> objeto.  
  
> [!IMPORTANT]
>  Em [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemas, o <xref:System.DateTime.ToUniversalTime%2A> método reconhece somente a regra de ajuste atual ao converter de hora local em UTC. Como resultado, conversões para períodos antes da regra de ajuste atual foi originada em vigor podem não refletir com precisão a diferença entre a hora local e o UTC.  
  
 Iniciando com o .NET Framework versão 2.0, o valor retornado pelo <xref:System.DateTime.ToUniversalTime%2A> método é determinado pelo <xref:System.DateTime.Kind%2A> propriedade <xref:System.DateTime> objeto. A tabela a seguir descreve os possíveis resultados.  
  
|Tipo|Resultados|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|Nenhuma conversão é executada.|  
|<xref:System.DateTimeKind.Local>|Atual <xref:System.DateTime> objeto é convertido para UTC.|  
|<xref:System.DateTimeKind.Unspecified>|Atual <xref:System.DateTime> objeto será considerado uma hora local e a conversão é executada como se <xref:System.DateTime.Kind%2A> foram <xref:System.DateTimeKind.Local>.|  
  
> [!NOTE]
>  O <xref:System.DateTime.ToUniversalTime%2A> método converte um <xref:System.DateTime> valor de hora local para UTC. Para converter a hora em uma zona de tempo de local para UTC, use o <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> método. Para converter uma hora cujo deslocamento do UTC é conhecido, use o <xref:System.DateTimeOffset.ToUniversalTime%2A> método.  
  
 Se o valor de data e hora da instância é um horário ambíguo, este método assume que é uma hora padrão. (Um horário ambíguo é um que podem ser mapeados para um horário padrão ou um horário de verão no fuso horário local) Se o valor de data e hora da instância é um horário inválido, este método simplesmente subtrai a hora local do UTC do fuso horário local de deslocamento para retornar o UTC. (Um horário inválido é aquele que não existe devido a aplicação de regras de ajuste de horário de verão).  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.ToUniversalTime%2A> método.  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 O exemplo a seguir usa o método <xref:System.DateTime.SpecifyKind%2A> para demonstrar como a propriedade <xref:System.DateTime.Kind%2A> influencia os métodos de conversão <xref:System.DateTime.ToLocalTime%2A> e <xref:System.DateTime.ToUniversalTime%2A>.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>O <see cref="M:System.DateTime.ToUniversalTime" /> método às vezes é usado para converter a hora local em UTC. O <see cref="M:System.DateTime.ToLocalTime" /> método é chamado para restaurar a hora local original. No entanto, se a hora original representa um período inválido no fuso horário local, os dois valores de hora local não serão iguais. Para obter informações adicionais e um exemplo, consulte o <see cref="M:System.DateTime.ToLocalTime" /> método.  Em [! Sistemas de include[WinXP](~/Includes/WinXP-MD.MD)] o <see cref="M:System.DateTime.ToUniversalTime" /> método reconhece somente a regra de ajuste de atual para o fuso horário local, o qual ele se aplica a todas as datas, incluindo datas de nível inferior (ou seja, as datas anteriores a data de início a ajuste regra atual). Aplicativos em execução em [! INCLUDE[WinXP](~/Includes/WinXP-MD.MD)] que exigem historicamente precisa data local e cálculos de tempo devem solucionar esse problema usando o <see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" /> método para recuperar um <see cref="T:System.TimeZoneInfo" /> objeto que corresponde ao fuso horário local e chamar o <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> método.  O exemplo a seguir ilustra a diferença entre o <see cref="M:System.DateTime.ToUniversalTime" /> e <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> métodos em um [! Sistema include[WinXP](~/Includes/WinXP-MD.MD)] nos EUA. Fuso horário do Pacífico. As chamadas de dois método primeiro aplicam a regra de ajuste de fuso horário atual (que entrou em vigor em 2007) em uma data no 2006. A regra de ajuste atual fornece a transição para o horário de verão no segundo domingo de março; a regra anterior, que estava em vigor em 2006, fornecido para a transição para o horário de verão para ocorrer no primeiro domingo de abril. Somente a terceira chamada de método com precisão executa essa data histórica e a conversão de tempo.  [! code-csharp[System.DateTime.ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.touniversaltime/cs/touniversaltime.cs#1)] [! code-vb[System.DateTime.ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.touniversaltime/vb/touniversaltime.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToLocalTime" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="dateTime.TryFormat (destination, charsWritten, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent and returns a value that indicates whether the conversion succeeded.</summary>
        <altmember cref="Overload:System.DateTime.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.DateTime.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.DateTime.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">A string containing a date and time to convert.</param>
        <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <c>s</c>, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if the <c>s</c> parameter is <see langword="null" />, is an empty string (""), or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent and returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> método é semelhante do <xref:System.DateTime.Parse%28System.String%29?displayProperty=nameWithType> método, exceto que o <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> método lançará uma exceção se a conversão falhar.  
  
 A cadeia de caracteres `s` é analisada usando informações de formatação no atual <xref:System.Globalization.DateTimeFormatInfo> objeto, que é fornecido implicitamente pela cultura de segmento atual.  
  
 Esse método tentará ignorar os dados não reconhecido, se possível e preenche faltando informações com a data atual do ano, mês e dia. Se `s` contém apenas uma data e nenhuma hora, esse método pressupõe que o tempo é 12:00 meia-noite. Se `s` inclui um componente de data com um ano de dois dígitos, ele será convertido em um ano calendário atual da cultura atual, com base no valor da <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> propriedade. Qualquer, interna, à direita ou caracteres de espaço em branco em `s` será ignorado. A data e hora podem ser agrupados com um par de esquerda e à direita ('#', U + 0023) de caracteres de sinal de número e podem ser seguidas por um ou mais NULL caracteres (U + 0000).  
  
 Porque o <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> método tenta analisar a representação de cadeia de caracteres de uma data e hora usando as regras de formatação da cultura atual, a tentativa de analisar uma cadeia de caracteres específica em diferentes culturas pode falhar ou retornar resultados diferentes. Se uma data específica e o formato de hora serão analisados em localidades diferentes, use o <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método ou uma das sobrecargas do <xref:System.DateTime.TryParseExact%2A> método e fornecer um especificador de formato.  
  
 Se `s` é a representação de cadeia de caracteres de um dia bissexto em um ano bissexto do calendário atual, analisa o método `s` com êxito. Se `s` é a representação de cadeia de caracteres de um dia bissexto em um não-ano bissexto no calendário atual da cultura atual, a operação de análise falhar e o método retornará `false`.  
  
 Se `s` não contém nenhuma informação de fuso horário, `result` contém um <xref:System.DateTime> valor cuja <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> quando o método retornar. Se a cadeia de caracteres a ser analisada contém informações de fuso horário, `result` contém um <xref:System.DateTime> valor cuja <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Local?displayProperty=nameWithType> quando o método retornar.  
  
   
  
## Examples  
 O exemplo a seguir passa um número de cadeias de caracteres de data e hora para o <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> método.  
  
 [!code-cpp[System.DateTime.TryParse#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.TryParse/cpp/datetime.tryparse1.cpp#1)]
 [!code-csharp[System.DateTime.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/TryParse1.cs#1)]
 [!code-vb[System.DateTime.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/TryParse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>A formatação é influenciada pelas propriedades do atual <see cref="T:System.Globalization.DateTimeFormatInfo" /> objeto, que, por padrão, são derivadas do * * regionais e idioma opções * * item no painel de controle. O <see cref="Overload:System.DateTime.TryParse" /> método inesperadamente pode falhará e retornará <see langword="False" /> se atual <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> e <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> propriedades são definidas com o mesmo valor.</para>
        </block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParse (s, provider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParse (s, provider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">A string containing a date and time to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <c>s</c>.</param>
        <param name="styles">A bitwise combination of enumeration values that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <c>s</c>, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if the <c>s</c> parameter is <see langword="null" />, is an empty string (""), or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified culture-specific format information and formatting style, and returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método analisa uma cadeia de caracteres que pode conter informações de data, hora e fuso horário. É semelhante do <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método, exceto que o <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> método lançará uma exceção se a conversão falhar.  
  
 Esse método tentará ignorar os dados não reconhecida e análise `s` completamente. Se `s` contém um tempo, mas nenhuma data, o método por padrão substitui a data atual ou, se `styles` inclui o <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault> sinalizador, ele substitui `DateTime.Date.MinValue`. Se `s` contém uma data, mas nenhuma hora, 12:00 meia-noite é usada como o tempo padrão. Se uma data presente, mas seu componente de ano consiste apenas dois dígitos, ele será convertido em um ano no `provider` calendário atual do parâmetro com base no valor da <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> propriedade. Qualquer interna, à esquerda ou caracteres de espaço em branco nos `s` são ignorados. A data e hora podem ser agrupados com um par de esquerda e à direita ('#', U + 0023) de caracteres de sinal de número e podem ser seguidas por um ou mais NULL caracteres (U + 0000).  
  
 Os formatos válidos específicos para data elementos de tempo, bem como os nomes e os símbolos utilizados em datas e horas, são definidos pelo `provider` parâmetro, que pode ser qualquer um dos seguintes:  
  
-   Um <xref:System.Globalization.CultureInfo> objeto que representa a cultura cuja formatação é usado no `s` parâmetro. O <xref:System.Globalization.DateTimeFormatInfo> objeto retornado pelo <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriedade define a formatação usada `s`.  
  
-   Um <xref:System.Globalization.DateTimeFormatInfo> objeto que define a formatação usada `s`.  
  
-   Um personalizado <xref:System.IFormatProvider> implementação. Seu <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> método retorna um <xref:System.Globalization.DateTimeFormatInfo> objeto que define a formatação usada `s`.  
  
 Se `provider` for `null`, a cultura atual será usada.  
  
 Se `s` é a representação de cadeia de caracteres de um dia bissexto em um ano bissexto do calendário atual, analisa o método `s` com êxito. Se `s` é a representação de cadeia de caracteres de um dia bissexto em um não-ano bissexto do calendário atual de `provider`, a operação de análise falhar e o método retornará `false`.  
  
 O `styles` parâmetro define a interpretação precisa de cadeia de caracteres analisada e como a operação de análise deve tratá-la. Ele pode ser um ou mais membros a <xref:System.Globalization.DateTimeStyles> enumeração, conforme descrito na tabela a seguir.  
  
|Membro DateTimeStyles|Descrição|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analisa `s` e, caso necessário, converte-o em UTC. Caso `s` inclua um deslocamento de fuso horário ou caso `s` não contenha informações de fuso horário, mas `styles` inclua o sinalizador <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, o método analisa a cadeia de caracteres, chama <xref:System.DateTime.ToUniversalTime%2A> para converter o valor <xref:System.DateTime> retornado em UTC e define a propriedade <xref:System.DateTime.Kind%2A> como <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Caso `s` indique que ele representa o UTC ou caso `s` não contenha informações de fuso horário, mas `styles` inclua o sinalizador <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>, o método analisa a cadeia de caracteres, não executa nenhuma conversão de fuso horário no valor <xref:System.DateTime> retornado e define a propriedade <xref:System.DateTime.Kind%2A> a <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Em todos os outros casos, o sinalizador não entra em vigor.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Embora válido, esse valor é ignorado. Espaço em branco interno é permitido nos elementos de data e hora de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Embora válido, esse valor é ignorado. Espaço em branco é permitido nos elementos de data e hora de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Embora válido, esse valor é ignorado. Espaço em branco à direita é permitido nos elementos de data e hora de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Especifica que `s` pode conter, interna, à esquerda e espaços em branco. Este é o comportamento padrão. Ele não pode ser substituído, fornecendo uma mais restritiva <xref:System.Globalization.DateTimeStyles> valor de enumeração como <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Especifica que, caso `s` não tenha informações de fuso horário, pressupõe-se que ele represente uma hora local. A menos que o sinalizador <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> esteja presente, a propriedade <xref:System.DateTime.Kind%2A> do valor <xref:System.DateTime> retornado é definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Especifica que, caso `s` não tenha informações de fuso horário, pressupõe-se que ele represente o UTC. A menos que o sinalizador <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> esteja presente, o método converte o valor <xref:System.DateTime> retornado do UTC na hora local e define a propriedade <xref:System.DateTime.Kind%2A> como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.None>|Embora válido, esse valor é ignorado.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Cadeias de caracteres que contêm informações de fuso horário, tenta impedir que a conversão de uma cadeia de caracteres de data e hora para um <xref:System.DateTime> valor com seu <xref:System.DateTime.Kind%2A> propriedade definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Normalmente, uma cadeia de caracteres é criada chamando o <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> método usando especificadores de formato padrão de "o", "r" ou "u".|  
  
 Se `s` não contém nenhuma informação de fuso horário, o <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método retorna um <xref:System.DateTime> valor cuja <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> , a menos que um `styles` sinalizador indica o contrário. Se `s` inclui o fuso horário ou informação de deslocamento de fuso horário, o <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método executa qualquer conversão de tempo necessário e retorna um dos seguintes:  
  
-   Um <xref:System.DateTime> valor cuja data e hora reflete a hora local e cujo <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
-   Ou, se `styles` inclui o <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> sinalizador, um <xref:System.DateTime> valor cuja data e hora reflete UTC e cujo <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Esse comportamento pode ser substituído usando o <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> sinalizador.  
  
## <a name="parsing-custom-cultures"></a>Analisando culturas personalizadas  
 Se você analisar uma cadeia de caracteres de data e hora gerada para uma cultura personalizada, use o <xref:System.DateTime.TryParseExact%2A> método em vez do <xref:System.DateTime.TryParse%2A> método para melhorar a probabilidade de que a operação de análise será bem-sucedida. Uma cadeia de caracteres de data e hora de cultura personalizada pode ser complicado e difícil analisar. O <xref:System.DateTime.TryParse%2A> método tenta analisar uma cadeia de caracteres com vários padrões de análise implícitas, que pode falhar. Em contraste, o <xref:System.DateTime.TryParseExact%2A> método exige que você designar explicitamente um ou mais padrões de análise exata que têm probabilidade de êxito.  
  
 Para obter mais informações sobre culturas personalizadas, consulte o <xref:System.Globalization.CultureAndRegionInfoBuilder?displayProperty=nameWithType> classe.  
  
   
  
## Examples  
 O exemplo a seguir ilustra o <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método.  
  
 [!code-csharp[System.DateTime.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/tryparse2.cs#2)]
 [!code-vb[System.DateTime.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.  -or-  <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="provider" /> is a neutral culture and cannot be used in a parsing operation.</exception>
        <block subset="none" type="usage">
          <para>A formatação é influenciada pelas propriedades do atual <see cref="T:System.Globalization.DateTimeFormatInfo" /> objeto, que é fornecido pelo <paramref name="provider" /> parâmetro. O <see cref="Overload:System.DateTime.TryParse" /> método inesperadamente pode falhará e retornará <see langword="False" /> se atual <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> e <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> propriedades são definidas com o mesmo valor.</para>
        </block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent. The format of the string representation must match a specified format exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
        <altmember cref="Overload:System.DateTime.ParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, format, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, formats, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, format, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">A string containing a date and time to convert.</param>
        <param name="format">The required format of <c>s</c>.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <c>s</c>.</param>
        <param name="style">A bitwise combination of one or more enumeration values that indicate the permitted format of <c>s</c>.</param>
        <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <c>s</c>, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if either the <c>s</c> or <c>format</c> parameter is <see langword="null" />, is an empty string, or does not contain a date and time that correspond to the pattern specified in <c>format</c>. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método analisa a representação de cadeia de caracteres de uma data, que deve estar no formato definido pelo `format` parâmetro. É semelhante do <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método, exceto que o <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> método lançará uma exceção se a conversão falhar.  
  
 O `s` parâmetro contém a data e hora para analisar e deve estar em um formato definido pelo `format` parâmetro. Se os elementos de data, hora e fuso horário estão presentes no `s`, eles também devem aparecer na ordem especificada pela `format`. Se `format` define uma data com nenhum elemento de hora e a análise operação for bem-sucedida, o resultante <xref:System.DateTime> valor tem um tempo de meia-noite (00: 00:00). Se `format` define uma hora com nenhum elemento de data e a análise operação for bem-sucedida, o resultante <xref:System.DateTime> valor por padrão com uma data de `DateTime.Now.Date`, ou ele tem uma data de `DateTime.MinValue.Date` se `styles` inclui o <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> sinalizador. O `style` parâmetro determina se o `s` parâmetro pode conter caracteres de espaço em branco à esquerda, interna ou à direita.  
  
 Caso `s` não contenha informações de fuso horário, a propriedade <xref:System.DateTime.Kind%2A> do objeto <xref:System.DateTime> retornado é <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Este comportamento pode ser alterado usando-se o sinalizador <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, que retorna um valor <xref:System.DateTime> cuja propriedade <xref:System.DateTime.Kind%2A> é <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ou usando-se os sinalizadores <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> e <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>, que retorna um valor <xref:System.DateTime> cuja propriedade <xref:System.DateTime.Kind%2A> é <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Se s contém informações de fuso horário, a hora é convertida para o horário local, se necessário e o <xref:System.DateTime.Kind%2A> propriedade retornado <xref:System.DateTime> objeto é definido como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Esse comportamento pode ser alterado usando o <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> sinalizador não converter o tempo Universal Coordenado (UTC) para a hora local e definir o <xref:System.DateTime.Kind%2A> propriedade <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 O `format` parâmetro contém um padrão que corresponde ao formato esperado do `s` parâmetro. O padrão da `format` parâmetro consiste em um ou mais especificadores de formato personalizado do [personalizado de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/custom-date-and-time-format-strings.md) tabela ou um especificador de formato único padrão, que identifica um padrão predefinido, do [Padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md) tabela.  
  
 Caso você não use separadores de data ou hora em um padrão de formato personalizado, use a cultura invariável do parâmetro `provider` e a forma mais ampla de cada especificador de formato personalizado. Por exemplo, caso você queira especificar horas no padrão, especifique a forma mais ampla, "HH", em vez da forma mais estreita, "H".  
  
> [!NOTE]
>  Em vez de exigir que `s` está de acordo com um formato único para o êxito da operação de análise, você pode chamar o <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método e especificar vários formatos permitidos. Isso faz com que a operação de análise mais probabilidade de êxito.  
  
 Os símbolos de data e hora e as cadeias de caracteres específicos (como os nomes dos dias da semana em um idioma específico) usados em `s` são definidos pelo parâmetro `provider`, como o formato preciso de `s` caso `format` seja uma cadeia de caracteres do especificador de formato padrão. O parâmetro `provider` pode ser um dos seguintes:  
  
-   Um objeto <xref:System.Globalization.CultureInfo> que representa a cultura usada para interpretar `s`. O objeto <xref:System.Globalization.DateTimeFormatInfo> retornado pela propriedade <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> define os símbolos e a formatação em `s`.  
  
-   Um objeto <xref:System.Globalization.DateTimeFormatInfo> que define o formato dos dados de data e hora.  
  
-   Uma implementação de <xref:System.IFormatProvider> personalizada cujo método <xref:System.IFormatProvider.GetFormat%2A> retorna o objeto <xref:System.Globalization.CultureInfo> ou o objeto <xref:System.Globalization.DateTimeFormatInfo> que fornece informações de formatação.  
  
 Caso `provider` seja `null`, o objeto <xref:System.Globalization.CultureInfo> que corresponde à cultura atual é usado.  
  
 O parâmetro `styles` inclui um ou mais membros da enumeração <xref:System.Globalization.DateTimeStyles> que determinam se e onde o espaço em branco não definido por `format` pode aparecer em `s` e que controlam o comportamento preciso da operação de análise. A tabela a seguir descreve como cada membro do <xref:System.Globalization.DateTimeStyles> enumeração afeta a operação do <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> método.  
  
|Membro DateTimeStyles|Descrição|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analisa `s` e, caso necessário, converte-o em UTC. Caso `s` inclua um deslocamento de fuso horário ou caso `s` não contenha informações de fuso horário, mas `styles` inclua o sinalizador <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, o método analisa a cadeia de caracteres, chama <xref:System.DateTime.ToUniversalTime%2A> para converter o valor <xref:System.DateTime> retornado em UTC e define a propriedade <xref:System.DateTime.Kind%2A> como <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Caso `s` indique que ele representa o UTC ou caso `s` não contenha informações de fuso horário, mas `styles` inclua o sinalizador <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>, o método analisa a cadeia de caracteres, não executa nenhuma conversão de fuso horário no valor <xref:System.DateTime> retornado e define a propriedade <xref:System.DateTime.Kind%2A> a <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Em todos os outros casos, o sinalizador não entra em vigor.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Especifica que o espaço em branco não definido por `format` pode ser exibido entre qualquer elemento de data ou hora individual.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Especifica que o espaço em branco não definido por `format` pode ser exibido no início de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Especifica que o espaço em branco não definido por `format` pode ser exibido no final de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Especifica que `s` pode conter espaços em branco à esquerda, internos, e à direita não definidos por `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Especifica que, caso `s` não tenha informações de fuso horário, pressupõe-se que ele represente uma hora local. A menos que o sinalizador <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> esteja presente, a propriedade <xref:System.DateTime.Kind%2A> do valor <xref:System.DateTime> retornado é definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Especifica que, caso `s` não tenha informações de fuso horário, pressupõe-se que ele represente o UTC. A menos que o sinalizador <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> esteja presente, o método converte o valor <xref:System.DateTime> retornado do UTC na hora local e define a propriedade <xref:System.DateTime.Kind%2A> como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Caso `s` contenha hora sem informações de data, a data do valor de retorno é definida como `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|O parâmetro `s` é analisado usando-se valores padrão. Nenhum espaço em branco senão presente em `format` é permitido. Caso `s` não tenha um componente de data, a data do valor <xref:System.DateTime> retornado é definida como 1/1/0001. Caso `s` não contenha informações de fuso horário, a propriedade <xref:System.DateTime.Kind%2A> do objeto <xref:System.DateTime> retornado é definida como <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Caso informações de fuso horário estejam presentes em `s`, a hora é convertida na hora local e a propriedade <xref:System.DateTime.Kind%2A> do objeto <xref:System.DateTime> retornado é definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Cadeias de caracteres que contêm informações de fuso horário, tenta impedir que a conversão para um <xref:System.DateTime> valor com seu <xref:System.DateTime.Kind%2A> propriedade definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Este sinalizador impede principalmente a conversão de horas UTC em horas locais.|  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método. Observe que a cadeia de caracteres "01/5/2009 8:30 AM" não pode ser analisado com êxito quando o `styles` parâmetro for igual a <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> como espaços não são permitidos por `format`. Além disso, a cadeia de caracteres "01/5/2009 09:00" não pode ser analisado com êxito com um `format` de "dd/MM/yyyyhh:mm" porque a cadeia de caracteres de data não precede o número do mês com um zero à esquerda, como `format` requer.  
  
 [!code-csharp[System.DateTime.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact1.cs#1)]
 [!code-vb[System.DateTime.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.  -or-  <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <block subset="none" type="usage">
          <para>No [! INCLUDE[net_v40_short](~/Includes/NET-v40-Short-MD.MD)] o <see cref="Overload:System.DateTime.TryParseExact" /> método retorna <see langword="false" /> se a cadeia de caracteres a ser analisada contém um componente de hora e um designador de AM/PM não estão no contrato. No [! INCLUDE[net_v35_short](~/Includes/NET-v35-Short-MD.MD)] e versões anteriores, o designador de AM/PM é ignorado.</para>
        </block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, formats, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert.</param>
        <param name="formats">An array of allowable formats of <c>s</c>.</param>
        <param name="provider">An object that supplies culture-specific format information about <c>s</c>.</param>
        <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <c>s</c>. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <c>s</c>, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if <c>s</c> or <c>formats</c> is <see langword="null" />, <c>s</c> or an element of <c>formats</c> is an empty string, or the format of <c>s</c> is not exactly as specified by at least one of the format patterns in <c>formats</c>. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método analisa a representação de cadeia de caracteres de uma data que corresponde a qualquer um dos padrões atribuído para o `formats` parâmetro. É como o <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método, exceto o <xref:System.DateTime.TryParseExact%2A> método lançará uma exceção se a conversão falhar.  
  
 O `s` parâmetro contém a data e hora para analisar. Se o `s` parâmetro contém somente uma vez e nenhuma data, a data atual é usada, a menos que o `style` parâmetro inclui o <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> sinalizador, caso em que a data padrão (`DateTime.Date.MinValue`) é usado. Se o `s` parâmetro não contém apenas uma data e nenhuma hora, meia-noite (00: 00:00) é usado. O `style` parâmetro também determina se o `s` parâmetro pode conter à esquerda, caracteres de espaço em branco à direita ou interno diferentes daqueles permitido por uma das cadeias de caracteres de formato em `formats`.  
  
 Caso `s` não contenha informações de fuso horário, a propriedade <xref:System.DateTime.Kind%2A> do objeto <xref:System.DateTime> retornado é <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Este comportamento pode ser alterado usando-se o sinalizador <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, que retorna um valor <xref:System.DateTime> cuja propriedade <xref:System.DateTime.Kind%2A> é <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ou usando-se os sinalizadores <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> e <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>, que retorna um valor <xref:System.DateTime> cuja propriedade <xref:System.DateTime.Kind%2A> é <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Se s contém informações de fuso horário, a hora é convertida para o horário local, se necessário e o <xref:System.DateTime.Kind%2A> propriedade retornado <xref:System.DateTime> objeto é definido como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Esse comportamento pode ser alterado usando o <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> sinalizador não converter o tempo Universal Coordenado (UTC) para a hora local e definir o <xref:System.DateTime.Kind%2A> propriedade <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 O `formats` parâmetro contém uma matriz de padrões, um dos quais `s` devem corresponder exatamente se a operação de análise seja bem-sucedida. Os padrões a `formats` parâmetro consistem em um ou mais especificadores de formato personalizado do [personalizado de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/custom-date-and-time-format-strings.md) tabela ou um especificador de formato único padrão, que identifica um padrão predefinido, do [Padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md) tabela.  
  
 Caso você não use separadores de data ou hora em um padrão de formato personalizado, use a cultura invariável do parâmetro `provider` e a forma mais ampla de cada especificador de formato personalizado. Por exemplo, caso você queira especificar horas no padrão, especifique a forma mais ampla, "HH", em vez da forma mais estreita, "H".  
  
 Os símbolos de data e hora e as cadeias de caracteres específicos (como os nomes dos dias da semana em um idioma específico) usados em `s` são definidos pelo parâmetro `provider`, como o formato preciso de `s` caso `format` seja uma cadeia de caracteres do especificador de formato padrão. O parâmetro `provider` pode ser um dos seguintes:  
  
-   Um objeto <xref:System.Globalization.CultureInfo> que representa a cultura usada para interpretar `s`. O objeto <xref:System.Globalization.DateTimeFormatInfo> retornado pela propriedade <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> define os símbolos e a formatação em `s`.  
  
-   Um objeto <xref:System.Globalization.DateTimeFormatInfo> que define o formato dos dados de data e hora.  
  
-   Uma implementação de <xref:System.IFormatProvider> personalizada cujo método <xref:System.IFormatProvider.GetFormat%2A> retorna o objeto <xref:System.Globalization.CultureInfo> ou o objeto <xref:System.Globalization.DateTimeFormatInfo> que fornece informações de formatação.  
  
 Caso `provider` seja `null`, o objeto <xref:System.Globalization.CultureInfo> que corresponde à cultura atual é usado.  
  
 O parâmetro `styles` inclui um ou mais membros da enumeração <xref:System.Globalization.DateTimeStyles> que determinam se e onde o espaço em branco não definido por `format` pode aparecer em `s` e que controlam o comportamento preciso da operação de análise. A tabela a seguir descreve como cada membro do <xref:System.Globalization.DateTimeStyles> enumeração afeta a operação do <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> método.  
  
|Membro DateTimeStyles|Descrição|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analisa `s` e, caso necessário, converte-o em UTC. Caso `s` inclua um deslocamento de fuso horário ou caso `s` não contenha informações de fuso horário, mas `styles` inclua o sinalizador <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, o método analisa a cadeia de caracteres, chama <xref:System.DateTime.ToUniversalTime%2A> para converter o valor <xref:System.DateTime> retornado em UTC e define a propriedade <xref:System.DateTime.Kind%2A> como <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Caso `s` indique que ele representa o UTC ou caso `s` não contenha informações de fuso horário, mas `styles` inclua o sinalizador <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>, o método analisa a cadeia de caracteres, não executa nenhuma conversão de fuso horário no valor <xref:System.DateTime> retornado e define a propriedade <xref:System.DateTime.Kind%2A> a <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Em todos os outros casos, o sinalizador não entra em vigor.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Especifica que o espaço em branco não definido por `format` pode ser exibido entre qualquer elemento de data ou hora individual.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Especifica que o espaço em branco não definido por `format` pode ser exibido no início de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Especifica que o espaço em branco não definido por `format` pode ser exibido no final de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Especifica que `s` pode conter espaços em branco à esquerda, internos, e à direita não definidos por `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Especifica que, caso `s` não tenha informações de fuso horário, pressupõe-se que ele represente uma hora local. A menos que o sinalizador <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> esteja presente, a propriedade <xref:System.DateTime.Kind%2A> do valor <xref:System.DateTime> retornado é definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Especifica que, caso `s` não tenha informações de fuso horário, pressupõe-se que ele represente o UTC. A menos que o sinalizador <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> esteja presente, o método converte o valor <xref:System.DateTime> retornado do UTC na hora local e define a propriedade <xref:System.DateTime.Kind%2A> como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Caso `s` contenha hora sem informações de data, a data do valor de retorno é definida como `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|O parâmetro `s` é analisado usando-se valores padrão. Nenhum espaço em branco senão presente em `format` é permitido. Caso `s` não tenha um componente de data, a data do valor <xref:System.DateTime> retornado é definida como 1/1/0001. Caso `s` não contenha informações de fuso horário, a propriedade <xref:System.DateTime.Kind%2A> do objeto <xref:System.DateTime> retornado é definida como <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Caso informações de fuso horário estejam presentes em `s`, a hora é convertida na hora local e a propriedade <xref:System.DateTime.Kind%2A> do objeto <xref:System.DateTime> retornado é definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Cadeias de caracteres que contêm informações de fuso horário, tenta impedir que a conversão para um <xref:System.DateTime> valor com seu <xref:System.DateTime.Kind%2A> propriedade definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Este sinalizador impede principalmente a conversão de horas UTC em horas locais.|  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método para garantir que uma cadeia de caracteres em um número de possíveis formatos pode ser analisada com êxito.  
  
 [!code-csharp[System.Datetime.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact2.cs#2)]
 [!code-vb[System.Datetime.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.  -or-  <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <block subset="none" type="usage">
          <para>No [! INCLUDE[net_v40_short](~/Includes/NET-v40-Short-MD.MD)] o <see cref="Overload:System.DateTime.TryParseExact" /> método retorna <see langword="false" /> se a cadeia de caracteres a ser analisada contém um componente de hora e um designador de AM/PM não estão no contrato. No [! INCLUDE[net_v35_short](~/Includes/NET-v35-Short-MD.MD)] e versões anteriores, o designador de AM/PM é ignorado.</para>
        </block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTime UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime UnixEpoch;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnixEpoch : DateTime" Usage="System.DateTime.UnixEpoch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTime UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime UtcNow { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcNow : DateTime" Usage="System.DateTime.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC).</summary>
        <value>Um objeto cujo valor é a data e hora UTC atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A resolução dessa propriedade depende do timer do sistema, que depende do sistema operacional subjacente. Ela costuma ser entre 0,5 e 15 milissegundos.

 Iniciando com o .NET Framework versão 2.0, o valor retornado é um <xref:System.DateTime> cujo <xref:System.DateTime.Kind%2A> propriedade retorna <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.

 Uma alternativa ao uso <xref:System.DateTime.UtcNow%2A> é <xref:System.DateTimeOffset.UtcNow%2A?displayProperty=nameWithType>. Enquanto o primeiro indica que um valor de data e hora é o tempo Universal Coordenado (UTC), atribuindo <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> para seus <xref:System.DateTime.Kind%2A> propriedade, o último atribui a data e hora UTC do valor tempo de deslocamento (igual a <xref:System.TimeSpan.Zero?displayProperty=nameWithType>).
  
## Examples  
 O exemplo a seguir usa o método <xref:System.DateTime.SpecifyKind%2A> para demonstrar como a propriedade <xref:System.DateTime.Kind%2A> influencia os métodos de conversão <xref:System.DateTime.ToLocalTime%2A> e <xref:System.DateTime.ToUniversalTime%2A>.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Year : int" Usage="System.DateTime.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the year component of the date represented by this instance.</summary>
        <value>O ano, entre 1 e 9999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.Year%2A> propriedade retorna o ano da instância atual do calendário gregoriano. Não retorna o ano usando o calendário padrão da cultura atual. Para recuperar o ano usando um calendário específico, você pode chamar esse calendário `GetYear` método, como mostra o código a seguir.  
  
 [!code-csharp[System.DateTime.Year#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Year/cs/Year.cs#1)]
 [!code-vb[System.DateTime.Year#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Year/vb/Year.vb#1)]  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.Year%2A> propriedade.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
  </Members>
</Type>