<Type Name="DateTime" FullName="System.DateTime">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f0e4567d33b2e4918bd6fe300146f5305001d4bc" />
    <Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="11/09/2018" />
    <Meta Name="ms.locfileid" Value="51324975" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTime extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTime&gt;, class System.IConvertible, class System.IEquatable`1&lt;valuetype System.DateTime&gt;, class System.IFormattable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTime" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTime&#xA;Implements IComparable, IComparable(Of DateTime), IConvertible, IEquatable(Of DateTime), IFormattable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type DateTime = struct&#xA;    interface IFormattable&#xA;    interface IConvertible&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa um momento no tempo, geralmente expresso como uma data e hora do dia.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## <a name="quick-links-to-example-code"></a>Links rápidos para código de exemplo

[!INCLUDE[interactive-note](~/includes/csharp-interactive-with-utc-note.md)]

Este artigo inclui vários exemplos que usam o `DateTime` tipo:

**Exemplos de inicialização**      
 [Invocar um construtor](#initialization-01)     
 [Invocar o construtor padrão implícito](#initialization-02)     
 [Atribuição do valor de retorno](#initialization-03)     
 [Analisar uma cadeia de caracteres que representa uma data e hora](#initialization-04)     
 [Sintaxe do Visual Basic para inicializar uma data e hora](#initialization-05)     

**Formatação `DateTime` objetos como cadeias de caracteres**  
 [Use o formato de hora de data padrão](#formatting-01)     
 [Formatar uma data e hora usando uma cultura específica](#formatting-02)     
 [Formatar uma data e hora usando uma cadeia de caracteres de formato personalizado ou padrão](#formatting-03)     
 [Especifique uma cadeia de caracteres de formato e uma cultura específica](#formatting-04)     
 [Formatar uma data e hora usando o padrão ISO 8601 para serviços web](#formatting-05)     

**Analisando cadeias de caracteres como `DateTime` objetos**  
 [Use `Parse` ou `TryParse` para converter uma cadeia de caracteres em uma data e hora](#parsing-01)     
 [Use `ParseExact` ou `TryParseExact` para converter uma cadeia de caracteres em um formato conhecido](#parsing-02)     
 [Converter a representação de cadeia de caracteres ISO 8601 para uma data e hora](#parsing-03)     

**`DateTime` Resolução**  
 [Explore a resolução dos valores de data e hora](#resolution-01)     
 [Comparação de igualdade dentro de uma tolerância](#comparison-01)     

**Cultura e calendários**  
 [Exibir valores de data e hora usando calendários específicas da cultura](#calendars-01)     
 [Analisar cadeias de caracteres de acordo com um calendário específico de cultura](#calendars-02)     
 [Inicializar uma data e hora do calendário de uma cultura específica](#calendars-03)     
 [Acessando Propriedades de data e hora usando o calendário de uma cultura específica](#calendars-04)     
 [Recuperando a semana do ano usando calendários específicas da cultura](#calendars-05)     

**Persistência**  
 [Manter valores de data e hora como cadeias de caracteres no fuso horário local](#persistence-01)     
 [Manter valores de data e hora como cadeias de caracteres em um formato invariável da cultura e a hora](#persistence-02)     
 [Manter valores de data e hora como inteiros](#persistence-03)     
 [Valores persistentes de data e hora usando o `XmlSerializer`](#persistence-04)     
 [Valores persistentes de data e hora usando o `BinaryFormatter`](#persistence-05)     
 [Manter valores de data e hora com os dados de fuso horário](#persistence-06)     

## <a name="quick-links-to-remarks-topics"></a>Links rápidos para tópicos de comentários.

Esta seção contém tópicos para muitos usos comuns do `DateTime` struct:
  
 [Inicializando uma `DateTime` objeto](#initializing-a-datetime-object)   
 [Valores de data e hora e suas representações de cadeia de caracteres](#datetime-values-and-their-string-representations)   
 [A análise de valores de data e hora de cadeias de caracteres](#parsing-datetime-values-from-strings)   
 [Valores de data e hora](#datetime-values)   
 [Operações de data e hora](#datetime-operations)   
 [Resolução de data e hora](#datetime-resolution)   
 [Calendários e valores de data e hora](#datetime-values-and-calendars)   
 [Manter valores de data e hora](#persisting-datetime-values)   
 [Data e hora vs. TimeSpan](#datetime-vs-timespan)   
 [Comparação de igualdade dentro da tolerância](#comparing-for-equality-within-tolerance) [considerações de interoperabilidade COM](#com-interop-considerations)  
   
O <xref:System.DateTime> tipo de valor representa datas e horas com valores variando de 00:00:00 (meia-noite), 1 de janeiro de 0001 DC Cristã em (Era comum) por meio de 11:59:59 PM, 31 de dezembro de 9999 D.C. (C.E.) no calendário gregoriano.  
  
Valores de hora são medidos em unidades de 100 nanossegundos chamadas tiques. Uma data específica é o número de tiques desde a meia-noite, 1º de janeiro de 0001 D.C. (C.E.) no <xref:System.Globalization.GregorianCalendar> calendário. O número exclui tiques que seriam adicionados por segundos intercalares. Por exemplo, um valor de tiques de L 31241376000000000 representa a data de sexta-feira, 01 de janeiro de 0100 meia-noite de 12:00:00. Um <xref:System.DateTime> valor é sempre expresso no contexto de um valor explícito ou calendário padrão.  
  
> [!NOTE]
>  Se você estiver trabalhando com um valor de tiques que você deseja converter em algum outro intervalo de tempo, como minutos ou segundos, você deve usar o <xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>, ou <xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType> constante para realizar a conversão. Por exemplo adicionar o número de segundos representado por um número especificado de tiques para o <xref:System.DateTime.Second%2A> componente de um <xref:System.DateTime> valor, você pode usar a expressão `dateValue.Second + nTicks/Timespan.TicksPerSecond`.  

Você pode exibir o código-fonte para todo o conjunto de exemplos deste artigo em uma [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/) ou [c#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) do repositório de documentos do GitHub.

> [!NOTE]
>  Uma alternativa para o <xref:System.DateTime> estrutura para trabalhar com valores de data e hora em fusos horários em particular é o <xref:System.DateTimeOffset> estrutura. O <xref:System.DateTimeOffset> estrutura armazena informações de data e hora em uma particular <xref:System.DateTime> campo e o número de minutos pelo qual que a data e hora difere do UTC em uma privada <xref:System.Int16> campo. Isso torna possível para um <xref:System.DateTimeOffset> valor para refletir a hora em um determinado fuso horário, enquanto um <xref:System.DateTime> valor inequivocamente pode refletir somente o UTC e a hora do fuso horário local. Para ver uma discussão sobre quando usar o <xref:System.DateTime> estrutura ou o <xref:System.DateTimeOffset> estrutura ao trabalhar com valores de data e hora, consulte [escolhendo entre DateTime, DateTimeOffset, TimeSpan e TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md).  
  
### <a name="initializing-a-datetime-object"></a>Inicializando um objeto de data e hora  

Você pode atribuir um valor inicial para um novo `DateTime` valor de várias maneiras diferentes:

- Chamar um construtor, deles, onde você pode especificar argumentos para valores, ou use o construtor padrão implícito.
- Atribuindo um `DateTime` para o valor retornado de uma propriedade ou método.
- Analisando um `DateTime` valor de sua representação de cadeia de caracteres.
- Usando recursos de linguagem específica do Visual Basic para criar uma instância de um `DateTime`. 

Os trechos de código a seguir mostram exemplos de cada um:

#### <a name="invoke-constructors"></a>Invocar construtores

Você chamar qualquer uma das sobrecargas do <xref:System.DateTime> construtor que especificam os elementos do valor de data e hora (por exemplo, o ano, mês e dia ou o número de tiques). O código a seguir cria uma data específica usando o <xref:System.DateTime> construtor especificando o ano, mês, dia, hora, minuto e segundo.  

<a name="initialization-01"></a>  
[!code-vb[System.DateTime.Instantiation#1](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#1)]  
[!code-csharp-interactive[System.DateTime.Instantiation#1](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#1)]

Você invoca o `DateTime` construtor padrão implícito da estrutura quando desejar um `DateTime` inicializado com seu valor padrão. (Para obter detalhes sobre o construtor padrão implícito de um tipo de valor, consulte [tipos de valor](~/docs/csharp/language-reference/keywords/value-types.md).) Alguns compiladores também dão suporte a declarar uma <xref:System.DateTime> valor sem atribuir explicitamente um valor a ela. Criação de um valor sem uma inicialização explícita também resulta no valor padrão. O exemplo a seguir ilustra a <xref:System.DateTime> construtor padrão implícito em c# e Visual Basic, bem como um <xref:System.DateTime> declaração sem atribuição no Visual Basic.  

<a name="initialization-02"></a>  
[!code-vb[System.DateTime.Instantiation#5](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#5)]  
[!code-csharp-interactive[System.DateTime.Instantiation#5](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#5)]
    
#### <a name="assigning-a-computed-value"></a>Atribuindo um valor computado

Você pode atribuir o <xref:System.DateTime> um valor de data e hora retornado por um método ou propriedade do objeto. O exemplo a seguir atribui a data atual e hora, a data atual do tempo Universal Coordenado (UTC) e hora e a data atual para três novos <xref:System.DateTime> variáveis.  

<a name="initialization-03"></a>  
[!code-vb[System.DateTime.Instantiation#3](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#3)]  
[!code-csharp[System.DateTime.Instantiation#3](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#3)]

#### <a name="parsing-a-string-that-represents-a-datetime"></a>Analisar uma cadeia de caracteres que representa uma data e hora

O <xref:System.DateTime.Parse%2A>, <xref:System.DateTime.ParseExact%2A>, <xref:System.DateTime.TryParse%2A>, e <xref:System.DateTime.TryParseExact%2A> todos os métodos convertem uma cadeia de caracteres em seu equivalente valor de data e hora. Os exemplos a seguir usam o <xref:System.DateTime.Parse%2A> e <xref:System.DateTime.ParseExact%2A> métodos para analisar uma cadeia de caracteres e convertê-lo para um <xref:System.DateTime> valor. O segundo formato usa um formulário compatível com o [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) padrão para data e hora no formato de cadeia de caracteres que representa. Essa representação padrão geralmente é usada para transferir informações de data nos serviços da web.

<a name="initialization-04"></a>  
[!code-vb[System.DateTime.Instantiation#4](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#4)]  
[!code-csharp[System.DateTime.Instantiation#4](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#4)]

O <xref:System.DateTime.TryParse%2A> e <xref:System.DateTime.TryParseExact%2A> métodos indicam se uma cadeia de caracteres é uma representação válida de um <xref:System.DateTime> de valor e, se estiver, executa a conversão.  

#### <a name="language-specific-syntax-for-visual-basic"></a>Sintaxe específica da linguagem para o Visual Basic

A instrução de Visual Basic a seguir inicializa uma nova <xref:System.DateTime> valor.  

<a name="initialization-05"></a>  
[!code-vb[System.DateTime.Instantiation#2](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#2)]  

### <a name="datetime-values-and-their-string-representations"></a>Valores de data e hora e suas representações de cadeia de caracteres  

Internamente, todos os <xref:System.DateTime> valores são representados como o número de tiques (o número de intervalos de 100 nanossegundos) que se passaram desde 12:00:00 meia-noite, 1 de janeiro de 0001. O valor real <xref:System.DateTime> valor é independente da maneira em que esse valor aparece quando exibida. A aparência de um <xref:System.DateTime> valor é o resultado de uma operação de formatação que converte um valor em sua representação de cadeia de caracteres.  
  
A aparência dos valores de data e hora depende da cultura, padrões internacionais, requisitos do aplicativo e preferência pessoal. O <xref:System.DateTime> estrutura oferece flexibilidade na formatação de valores de data e hora por meio de sobrecargas de <xref:System.DateTime.ToString%2A>. O padrão <xref:System.DateTime.ToString?displayProperty=nameWithType> método retorna a representação de cadeia de caracteres de um valor de data e hora usando Data abreviada da cultura atual e o padrão de hora completa. O exemplo a seguir usa o padrão <xref:System.DateTime.ToString?displayProperty=nameWithType> método. Ele exibe a data e hora usando o padrão de hora completa e data abreviada para a cultura atual. A cultura en-US é a cultura atual no computador no qual o exemplo foi executado.  
  
<a name="formatting-01"></a>  
[!code-csharp-interactive[System.DateTime.Formatting#1](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#1)]
[!code-vb[System.DateTime.Formatting#1](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#1)]  

Talvez você precise formatar datas em uma cultura específica para dar suporte a cenários de web em que o servidor pode estar em uma cultura diferente do cliente. Você especifica a cultura usando o <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> método para criar o data abreviada e a representação de hora longa em uma cultura específica. O exemplo a seguir usa o <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> método para exibir a data e hora usando o padrão de hora completa e data abreviada para a cultura fr-FR.  
  
<a name="formatting-02"></a>  
[!code-csharp-interactive[System.DateTime.Formatting#2](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#2)]
[!code-vb[System.DateTime.Formatting#2](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#2)]  

 Outros aplicativos podem exigir representações de cadeia de caracteres diferente de uma data. O <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> método retorna a representação de cadeia de caracteres definida por um especificador de formato padrão ou personalizado usando as convenções de formatação da cultura atual. O exemplo a seguir usa o <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> cultura de método para exibir a data completa e o padrão de tempo para en-US, a cultura atual no computador no qual o exemplo foi executado.  
  
<a name="formatting-03"></a>  
[!code-csharp-interactive[System.DateTime.Formatting#3](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#3)]
[!code-vb[System.DateTime.Formatting#3](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#3)]  

 Por fim, você pode especificar a cultura e o formato usando o <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método. O exemplo a seguir usa o <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método para exibir a data completa e o padrão de tempo para a cultura fr-FR.  

<a name="formatting-04"></a>  
[!code-csharp-interactive[System.DateTime.Formatting#4](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#4)]
[!code-vb[System.DateTime.Formatting#4](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#4)]  

O <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> sobrecarga também pode ser usada com uma cadeia de caracteres de formato personalizado para especificar outros formatos. O exemplo a seguir mostra como formatar uma cadeia de caracteres usando o [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) formato padrão geralmente é usado para serviços da web. O formato Iso 8601 não tem uma cadeia de caracteres de formato padrão correspondente.

<a name="formatting-05"></a> [!code-csharp-interactive[System.DateTime.Formatting#5](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#5)]
[!code-vb[System.DateTime.Formatting#5](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#5)]  

Para obter mais informações sobre a formatação <xref:System.DateTime> valores, consulte [padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md) e [Data personalizada e cadeias de caracteres de formato de hora](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  

### <a name="parsing-datetime-values-from-strings"></a>A análise de valores de data e hora de cadeias de caracteres

A análise converte a representação de cadeia de caracteres de uma data e hora para um <xref:System.DateTime> valor. Normalmente, cadeias de caracteres de data e hora têm dois usos diferentes em aplicativos:  
  
-   Uma data e hora leva a uma variedade de formas e reflete as convenções da cultura atual ou de uma cultura específica. Por exemplo, um aplicativo permite que um usuário cuja cultura atual é en-US, insira um valor de data como "12/15/2013" ou "15 de dezembro de 2013". Ele permite que um usuário cuja cultura atual é en-gb, insira um valor de data como "12/15/2013" ou "15 de dezembro de 2013."  
  
-   Uma data e hora é representada em um formato predefinido. Por exemplo, um aplicativo serializa uma data como "20130103", independentemente da cultura na qual o aplicativo está em execução. Um aplicativo pode exigir datas a ser inserido no formato de data abreviada da cultura atual.
  
Você usa o <xref:System.DateTime.Parse%2A> ou <xref:System.DateTime.TryParse%2A> método para converter uma cadeia de caracteres de um dos formatos de data e hora comuns usados por uma cultura para uma <xref:System.DateTime> valor. O exemplo a seguir mostra como você pode usar <xref:System.DateTime.TryParse%2A> para converter cadeias de caracteres de data em diferentes formatos específicos de cultura para uma <xref:System.DateTime> valor. Ele altera a cultura atual para inglês (Grã-Bretanha) e chama o <xref:System.DateTime.GetDateTimeFormats> método para gerar uma matriz de cadeias de caracteres de data e hora. Ele passa cada elemento na matriz para o <xref:System.DateTime.TryParse%2A> método. A saída do exemplo mostra que o método de análise não conseguiu converter cada uma das cadeias de caracteres de hora e data específicas da cultura com êxito.  
  
<a name="parsing-01"></a>  
[!code-csharp-interactive[System.DateTime.Parsing#1](~/samples/snippets/csharp/System.DateTime/Parsing.cs#1)]
[!code-vb[System.DateTime.Parsing#1](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#1)]  

Você usa o <xref:System.DateTime.ParseExact%2A> e <xref:System.DateTime.TryParseExact%2A> métodos para converter uma cadeia de caracteres que deve corresponder a um formato específico ou formatos para um <xref:System.DateTime> valor. Você pode especificar um ou mais cadeias de formato de data e hora como um parâmetro para o método de análise. O exemplo a seguir usa o <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> método para converter cadeias de caracteres que devem estar em um formato de "AAAAMMDD" ou em um formato de "HHmmss" para <xref:System.DateTime> valores.  
  
<a name="parsing-02"></a>  
[!code-csharp-interactive[System.DateTime.Parsing#2](~/samples/snippets/csharp/System.DateTime/Parsing.cs#2)]
[!code-vb[System.DateTime.Parsing#2](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#2)]  

Um uso comum para <xref:System.DateTime.ParseExact%2A> é converter uma representação de cadeia de caracteres de um serviço web, normalmente, na [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) formato padrão. O código a seguir mostra a cadeia de caracteres de formato correto para usar:

<a name="parsing-03"></a>  
[!code-csharp-interactive[System.DateTime.Parsing#3](~/samples/snippets/csharp/System.DateTime/Parsing.cs#3)]
[!code-vb[System.DateTime.Parsing#3](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#3)]  

Se uma cadeia de caracteres não pode ser analisada, o <xref:System.DateTime.Parse%2A> e <xref:System.DateTime.ParseExact%2A> métodos geram uma exceção. O <xref:System.DateTime.TryParse%2A> e <xref:System.DateTime.TryParseExact%2A> métodos retornam um <xref:System.Boolean> valor que indica se a conversão foi bem-sucedida ou falhou. Você deve usar o <xref:System.DateTime.TryParse%2A> ou <xref:System.DateTime.TryParseExact%2A> métodos em cenários em que o desempenho for importante. A operação de análise de cadeias de caracteres de data e hora tende a ter uma taxa alta de falha e tratamento de exceções é caro. Usar esses métodos se cadeias de caracteres são inseridas por usuários ou provenientes de uma fonte desconhecida. 
  
Para obter mais informações sobre a análise de valores de data e hora, consulte [Analisando cadeias de data e hora](~/docs/standard/base-types/parsing-datetime.md).  

### <a name="datetime-values"></a>Valores DateTime

Descrições dos valores de hora no <xref:System.DateTime> tipo normalmente são expressos usando o padrão de tempo Universal Coordenado (UTC). Tempo Universal Coordenado é o nome reconhecido internacionalmente para hora de Greenwich (GMT). Tempo Universal Coordenado é o tempo conforme medido em zero graus de longitude, o ponto de origem do UTC. Horário de verão não é aplicável ao UTC.  
  
Hora local é relativo um determinado fuso horário. Um fuso horário é associado um deslocamento de fuso horário. Um deslocamento de fuso horário é o deslocamento do fuso horário, medido em horas a partir do ponto de origem do UTC. Além disso, a hora local, opcionalmente, é afetada por horário de verão, que adiciona ou remove um ajuste de intervalo de tempo. Hora local é calculada pela adição de deslocamento de fuso horário UTC e ajustando para o horário de verão se necessário. O deslocamento de fuso horário no ponto de origem de UTC é zero.  
  
Hora UTC é adequada para cálculos, comparações, armazenando as datas e hora em arquivos. Hora local é adequada para exibição nas interfaces do usuário de aplicativos da área de trabalho. Aplicativos com reconhecimento de fuso horário (como muitos aplicativos Web) também precisam trabalhar com um número de outros fusos horários.  
  
Se o <xref:System.DateTime.Kind%2A> propriedade de um <xref:System.DateTime> objeto é <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, é não especificado se a hora representada é um tempo em algum outro fuso horário, hora UTC ou hora local.  

### <a name="datetime-resolution"></a>Resolução de data e hora
  
> [!NOTE]
>  Como alternativa à execução de data e hora em <xref:System.DateTime> valores para medir o tempo decorrido, você pode usar o <xref:System.Diagnostics.Stopwatch> classe.  
  
O <xref:System.DateTime.Ticks%2A> propriedade expressa valores de data e hora em unidades de um décimo milionésimo de segundo. O <xref:System.DateTime.Millisecond%2A> propriedade retorna os milésimos de segundo em um valor de data e hora. Usando chamadas repetidas para o <xref:System.DateTime.Now%2A?displayProperty=nameWithType> depende da propriedade para medir o tempo decorrido no relógio do sistema. O relógio do sistema em sistemas Windows 7 e Windows 8 tem uma resolução de aproximadamente 15 milissegundos. Essa resolução afeta a intervalos de tempo de pequenas inferior a 100 milissegundos. 
  
O exemplo a seguir ilustra a dependência da data atual e os valores de tempo na resolução do relógio do sistema. No exemplo, um loop externo se repete a 20 vezes e um loop interno que serve para atrasar o loop externo. Se o valor do contador de loop externo é 10, uma chamada para o <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> método introduz um atraso de cinco milissegundos. O exemplo a seguir mostra o número de milissegundos retornado pela `DateTime.Now.Milliseconds` alterações de propriedade somente após a chamada para <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>.  

<a name="resolution-01"></a>  
[!code-csharp-interactive[System.DateTime.Resolution#1](~/samples/snippets/csharp/System.DateTime/Resolution.cs#1)]
[!code-vb[System.DateTime.Resolution#1](~/samples/snippets/visualbasic/System.DateTime/Resolution.vb#1)]  

### <a name="datetime-operations"></a>Operações DateTime  

Um cálculo usando uma <xref:System.DateTime> estrutura, como <xref:System.DateTime.Add%2A> ou <xref:System.DateTime.Subtract%2A>, não modifica o valor da estrutura. Em vez disso, o cálculo retorna um novo <xref:System.DateTime> estrutura cujo valor é o resultado do cálculo.  
  
Operações de conversão entre fusos horários (tais como entre o UTC e a hora local, ou entre um fuso horário e o outro) horário de verão de levar em conta, mas as operações aritméticas e de comparação não.  
  
O <xref:System.DateTime> estrutura em si oferece suporte limitado para converter de um fuso horário para outro. Você pode usar o <xref:System.DateTime.ToLocalTime%2A> método para converter UTC em hora local, ou você pode usar o <xref:System.DateTime.ToUniversalTime%2A> método para converter da hora local em UTC. No entanto, um conjunto completo de métodos de conversão de fuso horário está disponível na <xref:System.TimeZoneInfo> classe. Você pode converter a hora em qualquer um dos fusos horários do mundo para o horário em outro fuso horário usando esses métodos.  
  
Cálculos e comparações de <xref:System.DateTime> objetos são significativos apenas se os objetos representam horas no mesmo fuso horário. Você pode usar um <xref:System.TimeZoneInfo> objeto para representar um <xref:System.DateTime> do valor fuso horário, embora as duas são flexíveis. Um <xref:System.DateTime> objeto não tem uma propriedade que retorna um objeto que representa o fuso horário desse valor data e hora. O <xref:System.DateTime.Kind%2A> propriedade indica se um `DateTime` representa o horário local, UTC ou não está especificado. Em um aplicativo com reconhecimento de fuso horário, você deve contar com algum mecanismo externo para determinar o fuso horário no qual um <xref:System.DateTime> objeto foi criado. Você pode usar uma estrutura que encapsula ambos os <xref:System.DateTime> valor e o <xref:System.TimeZoneInfo> objeto que representa o <xref:System.DateTime> fuso horário de um valor. Para obter detalhes sobre como usar o UTC em cálculos e comparações com <xref:System.DateTime> valores, consulte [executando operações aritméticas com datas e horas](~/docs/standard/datetime/performing-arithmetic-operations.md).  
  
Cada <xref:System.DateTime> membro usa implicitamente o calendário gregoriano para executar sua operação. As exceções são métodos que especificam implicitamente um calendário. Elas incluem construtores que especificam um calendário, e métodos com um parâmetro derivam <xref:System.IFormatProvider>, tais como <xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType>.  
  
Operações por membros do <xref:System.DateTime> tipo levar em detalhes da conta, como anos bissextos e o número de dias em um mês.  

## <a name="datetime-values-and-calendars"></a>Calendários e valores de data e hora  

A biblioteca de classes do .NET Framework inclui um número de classes de calendário, que são derivados de <xref:System.Globalization.Calendar> classe.  Elas são:  
  
-   O <xref:System.Globalization.ChineseLunisolarCalendar> classe.  
-   O <xref:System.Globalization.EastAsianLunisolarCalendar> classe.  
-   O <xref:System.Globalization.GregorianCalendar> classe.  
-   O <xref:System.Globalization.HebrewCalendar> classe.  
-   O <xref:System.Globalization.HijriCalendar> classe.  
-   O <xref:System.Globalization.JapaneseCalendar> classe.  
-   O <xref:System.Globalization.JapaneseLunisolarCalendar> classe.  
-   O <xref:System.Globalization.JulianCalendar> classe.  
-   O <xref:System.Globalization.KoreanCalendar> classe.  
-   O <xref:System.Globalization.KoreanLunisolarCalendar> classe.  
-   O <xref:System.Globalization.PersianCalendar> classe.  
-   O <xref:System.Globalization.TaiwanCalendar> classe.  
-   O <xref:System.Globalization.TaiwanLunisolarCalendar> classe.  
-   O <xref:System.Globalization.ThaiBuddhistCalendar> classe.  
-   O <xref:System.Globalization.UmAlQuraCalendar> classe.  
  
Cada cultura usa um calendário padrão definido pelo seu somente leitura <xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=nameWithType> propriedade. Cada cultura pode dar suporte a um ou mais calendários definidos por seu somente leitura <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> propriedade. O calendário usado atualmente por um determinado <xref:System.Globalization.CultureInfo> objeto é definido por seu <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> propriedade. Ele deve ser um dos calendários encontrados no <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> matriz.  
  
Calendário atual de uma cultura é usado em todas as operações de formatação para aquela cultura. Por exemplo, o calendário padrão da cultura tailandês budista é o calendário da Era budista tailandês, que é representado pelo <xref:System.Globalization.ThaiBuddhistCalendar> classe.  Quando um <xref:System.Globalization.CultureInfo> objeto que representa a cultura budista tailandês é usado em uma data e hora a operação de formatação, o calendário da Era budista tailandês é usado por padrão. O calendário gregoriano é usado somente se a cultura <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> propriedade for alterada, como mostra o exemplo a seguir:  

<a name="calendars-01"></a>  
[!code-csharp-interactive[System.DateTime.Calendar#1](~/samples/snippets/csharp/System.DateTime/Calendar.cs#1)]
[!code-vb[System.DateTime.Calendar#1](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#1)]  

Calendário atual de uma cultura também é usado em todas as operações de análise para aquela cultura, como mostra o exemplo a seguir.  
  
<a name="calendars-02"></a>  
[!code-csharp-interactive[System.DateTime.Calendar#2](~/samples/snippets/csharp/System.DateTime/Calendar.cs#2)]
[!code-vb[System.DateTime.Calendar#2](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#2)]  

Você criar uma instância de um <xref:System.DateTime> valor usando os elementos data e hora (número do ano, mês e dia) de um calendário específico chamando uma [ao construtor DateTime](xref:System.DateTime.%23ctor%2A) que inclui um `calendar` parâmetro e passá-lo um <xref:System.Globalization.CultureInfo.Calendar%2A>objeto que representa o calendário. O exemplo a seguir usa os elementos de data e hora do <xref:System.Globalization.ThaiBuddhistCalendar> calendário.  
  
<a name="calendars-03"></a>  
[!code-csharp-interactive[System.DateTime.Calendar#3](~/samples/snippets/csharp/System.DateTime/Calendar.cs#3)]
[!code-vb[System.DateTime.Calendar#3](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#3)]  

<xref:System.DateTime> construtores que não incluem um `calendar` parâmetro pressupõem que os elementos de data e hora são expressos como unidades no calendário gregoriano.  
  
Todos os outros <xref:System.DateTime> propriedades e métodos usam o calendário gregoriano. Por exemplo, o <xref:System.DateTime.Year%2A?displayProperty=nameWithType> propriedade retorna o ano no calendário gregoriano e o <xref:System.DateTime.IsLeapYear%28System.Int32%29?displayProperty=nameWithType> método pressupõe que o `year` parâmetro é um ano no calendário gregoriano.  Cada <xref:System.DateTime> membro que usa o calendário gregoriano tem um membro correspondente do <xref:System.Globalization.CultureInfo.Calendar%2A> classe que usa um calendário específico. Por exemplo, o <xref:System.Globalization.Calendar.GetYear%2A?displayProperty=nameWithType> método retorna o ano em um calendário específico e o <xref:System.Globalization.Calendar.IsLeapYear%2A?displayProperty=nameWithType> método interpreta o `year` parâmetro como um número de anos em um calendário específico. O exemplo a seguir usa o <xref:System.DateTime> e os membros correspondentes do <xref:System.Globalization.ThaiBuddhistCalendar> classe.  
  
<a name="calendars-04"></a>  
[!code-csharp-interactive[System.DateTime.Calendar#4](~/samples/snippets/csharp/System.DateTime/Calendar.cs#4)]
[!code-vb[System.DateTime.Calendar#4](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#4)]  

O <xref:System.DateTime> estrutura inclui um <xref:System.DateTime.DayOfWeek%2A> propriedade que retorna o dia da semana no calendário gregoriano. Ele não inclui um membro que permite que você recupere o número da semana do ano. Para recuperar a semana do ano, chame o calendário individual <xref:System.Globalization.Calendar.GetWeekOfYear%2A?displayProperty=nameWithType> método. O exemplo a seguir fornece uma ilustração.  
  
<a name="calendars-05"></a>  
[!code-csharp-interactive[System.DateTime.Calendar#5](~/samples/snippets/csharp/System.DateTime/Calendar.cs#5)]
[!code-vb[System.DateTime.Calendar#5](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#5)]  

Para obter mais informações sobre datas e calendários, consulte [trabalhando com calendários](~/docs/standard/datetime/working-with-calendars.md).  
  
### <a name="persisting-datetime-values"></a>Manter valores de data e hora  

Você pode persistir <xref:System.DateTime> valores de quatro maneiras:  
  
-   Você [convertê-los em cadeias de caracteres](#persisting-values-as-strings) e persistir as cadeias de caracteres.  
-   Você [convertê-los em valores inteiros de 64 bits](#persisting-values-as-integers) (o valor da <xref:System.DateTime.Ticks%2A> propriedade) e persistir os inteiros.  
-   Você [serializar os valores de data e hora](#serializing-dateTime-values).  
-   Você [serializar os valores de data e hora junto com informações de fuso horário](#serializing-datetime-and-time-zone-data).  
  
Você deve garantir que a rotina que restaura o <xref:System.DateTime> valores não perder os dados ou gerar uma exceção, independentemente de qual técnica você escolher. <xref:System.DateTime> valores devem ser de ida e volta. Ou seja, o valor original e o valor restaurado devem ser o mesmo. E se o original <xref:System.DateTime> valor representa um único instante de tempo, ele deve identificar o mesmo ponto de tempo quando ele for restaurado.  
  
#### <a name="persisting-values-as-strings"></a>Manter valores como cadeias de caracteres  

Para restaurar com êxito <xref:System.DateTime> valores mantidos como cadeias de caracteres, siga estas regras:  
  
-   Verifique as mesmas suposições sobre a formatação de cultura específica quando você restaura a cadeia de caracteres, como quando você mantida. Para garantir que uma cadeia de caracteres pode ser restaurada em um sistema cuja cultura atual é diferente da cultura do sistema que foi salvo no, chame o <xref:System.DateTime.ToString%2A> sobrecarga para salvar a cadeia de caracteres usando as convenções da cultura invariável. Chame o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> ou <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> sobrecarga para restaurar a cadeia de caracteres usando as convenções da cultura invariável. Nunca use o <xref:System.DateTime.ToString>, <xref:System.DateTime.Parse%28System.String%29>, ou <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> sobrecargas, que usam as convenções da cultura do thread atual.  
  
-   Se a data representa um único ponto de tempo, certifique-se de que ele representa o mesmo ponto no tempo quando ele for restaurado, mesmo em um fuso horário diferente. Converter o <xref:System.DateTime> valor para o tempo Universal Coordenado (UTC) antes de salvá-lo. Você também pode serializar o valor, juntamente com informações de fuso horário. Para obter mais informações sobre essa abordagem, consulte [dados de serialização de data e hora e fuso horário](#TimeZone).  
  
 O erro mais comuns feito ao persistir <xref:System.DateTime> valores como cadeias de caracteres é contar com as convenções de formatação da cultura atual ou padrão. Haverá problemas se a cultura atual é diferente quando salvar e restaurar as cadeias de caracteres. O exemplo a seguir ilustra esses problemas. Ele salva cinco datas usando as convenções de formatação da cultura atual, que nesse caso, é inglês (Estados Unidos). Ele restaura as datas usando as convenções de formatação de uma cultura diferente, que nesse caso, é inglês (Grã-Bretanha). Como as convenções de formatação das duas culturas são diferentes, duas das datas não podem ser restauradas e as datas de três restantes são interpretadas incorretamente. Além disso, se os valores de data e hora originais representam únicos pontos no tempo, restaurado vezes estão incorretas, como informações de fuso horário serão perdidas.  
  
<a name="persistence-01"></a>  
[!code-csharp[System.DateTime.Persistence#1](~/samples/snippets/csharp/System.DateTime/Persistence.cs#1)]
[!code-vb[System.DateTime.Persistence#1](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#1)]  

A ida e volta <xref:System.DateTime> valores com êxito, siga estas etapas:  
  
1.  Se os valores representam únicos instantes de tempo, convertê-los da hora local em UTC ao chamar o <xref:System.DateTime.ToUniversalTime%2A> método.  
1.  Converter datas em suas representações de cadeia de caracteres chamando o <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> ou <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> de sobrecarga. Usar as convenções de formatação da cultura invariável, especificando <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> como o `provider` argumento. Especifique que o valor deve ser de ida e volta, usando a cadeia de caracteres de formato padrão "O" ou "R".  
  
Para restaurar o persistente <xref:System.DateTime> valores sem perda de dados, siga estas etapas:  
  
1.  Analisar os dados por meio da chamada a <xref:System.DateTime.ParseExact%2A> ou <xref:System.DateTime.TryParseExact%2A> de sobrecarga. Especificar <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> como o `provider` argumento e use o mesmo formato de padrão de cadeia de caracteres é usada para o `format` argumento durante a conversão. Incluir o <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> o valor a `styles` argumento.  
1.  Se o <xref:System.DateTime> valores representam únicos pontos no tempo, chamada de <xref:System.DateTime.ToLocalTime%2A> método para converter a data analisada do UTC em hora local.  
  
O exemplo a seguir usa a cultura invariável e a cadeia de caracteres de formato padrão "O" para garantir que <xref:System.DateTime> valores salvos e restaurados representam o mesmo ponto no tempo, independentemente do sistema, cultura ou o fuso horário dos sistemas de origem e destino.  
  
<a name="persistence-02"></a>  
[!code-csharp[System.DateTime.Persistence#2](~/samples/snippets/csharp/System.DateTime/Persistence.cs#2)]
[!code-vb[System.DateTime.Persistence#2](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#2)]  

#### <a name="persisting-values-as-integers"></a>Manter valores como inteiros  

Você pode manter uma data e hora como um <xref:System.Int64> valor que representa um número de tiques. Nesse caso, você não deve considerar a cultura dos sistemas de <xref:System.DateTime> valores são mantidos e restaurados em.  
  
Para manter um <xref:System.DateTime> valor como um inteiro:  
  
-   Se o <xref:System.DateTime> valores representam únicos pontos no tempo, convertê-los em UTC ao chamar o <xref:System.DateTime.ToUniversalTime%2A> método.  
-   Recuperar o número de tiques representado pela <xref:System.DateTime> o valor da sua <xref:System.DateTime.Ticks%2A> propriedade.  
  
Para restaurar um <xref:System.DateTime> valor tiver sido persistida como um inteiro:  
  
1.  Criar um novo <xref:System.DateTime> objeto, passando a <xref:System.Int64> valor para o <xref:System.DateTime.%23ctor%28System.Int64%29> construtor.  
1.  Se o <xref:System.DateTime> valor representa um único ponto no tempo, converter de UTC para a hora local chamando o <xref:System.DateTime.ToLocalTime%2A> método.  
  
O exemplo a seguir persiste uma matriz de <xref:System.DateTime> valores como inteiros em um sistema nos EUA Fuso horário do Pacífico. Ele restaura-lo em um sistema no fuso UTC. O arquivo que contém os inteiros inclui um <xref:System.Int32> valor que indica o número total de <xref:System.Int64> valores que o seguem imediatamente.  
  
<a name="persistence-03"></a>  
[!code-csharp[System.DateTime.Persistence#3](~/samples/snippets/csharp/System.DateTime/Persistence.cs#3)]
[!code-vb[System.DateTime.Persistence#3](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#3)]  

#### <a name="serializing-datetime-values"></a>Serializar os valores de data e hora  

Você pode persistir <xref:System.DateTime> valores por meio de serialização para um fluxo ou arquivo e, em seguida, a restauração-los por meio de desserialização. <xref:System.DateTime> dados são serializados em algum formato de objeto especificado. Os objetos são restaurados quando eles são desserializados. Um formatador ou o serializador, como <xref:System.Xml.Serialization.XmlSerializer> ou <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>, manipula o processo de serialização e desserialização. Para obter mais informações sobre a serialização e os tipos de serialização com suporte pelo .NET Framework, consulte [serialização](~/docs/standard/serialization/index.md).
  
O exemplo a seguir usa o <xref:System.Xml.Serialization.XmlSerializer> classe para serializar e desserializar <xref:System.DateTime> valores. Os valores representam todos os dias do ano bissexto no século XXI. A saída representa o resultado se o exemplo é executado em um sistema cuja cultura atual seja inglês (Grã-Bretanha). Porque você já desserializado a <xref:System.DateTime> objeto propriamente dito, o código não precisa lidar com diferenças culturais em formatos de data e hora.  
  
<a name="persistence-04"></a>  
[!code-csharp[System.DateTime.Persistence#4](~/samples/snippets/csharp/System.DateTime/Persistence.cs#4)]
[!code-vb[System.DateTime.Persistence#4](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#4)]  

O exemplo anterior não inclui informações de tempo. Se um <xref:System.DateTime> valor representa um momento específico e é expresso como uma hora local, converter da hora local para UTC antes de serializá-lo chamando o <xref:System.DateTime.ToUniversalTime%2A> método. Depois que você desserializá-lo, convertê-lo do UTC em hora local chamando o <xref:System.DateTime.ToLocalTime%2A> método. O exemplo a seguir usa o <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> classe para serializar <xref:System.DateTime> dados em um sistema nos EUA Fuso horário padrão do Pacífico e desserializá-lo em um sistema nos EUA Zona padrão Central.  
  
<a name="persistence-05"></a>  
[!code-csharp[System.DateTime.Persistence#5](~/samples/snippets/csharp/System.DateTime/Persistence.cs#5)]
[!code-vb[System.DateTime.Persistence#5](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#5)]  

#### <a name="serializing-datetime-and-time-zone-data"></a>Serialização de dados de data e hora e fuso horário  

Todos os exemplos anteriores supõe-se que <xref:System.DateTime> valores são expressos como horários locais. O código convertido os valores entre o UTC e a hora local para que eles refletem o mesmo ponto no tempo em sistemas de origem e destino. <xref:System.DateTime> valores também podem refletir momentos no tempo em um fuso horário diferente de local e o UTC. Porque o <xref:System.DateTime> estrutura não é o reconhecimento de fuso horário, você precisa serializar a ambos os <xref:System.DateTime> valor e o <xref:System.TimeZoneInfo> objeto que representa seu fuso horário. Criar um tipo cujos campos incluem ambos o <xref:System.DateTime> valor e seu fuso horário. O exemplo a seguir define uma `DateWithTimeZone` estrutura.  
  
<a name="persistence-06"></a>  
[!code-csharp[System.DateTime.Persistence#6](~/samples/snippets/csharp/System.DateTime/DateWithTimeZone.cs#6)]
[!code-vb[System.DateTime.Persistence#6](~/samples/snippets/visualbasic/System.DateTime/DateWithTimeZone.vb#6)]  

> [!IMPORTANT]
>  O `DateWithTimeZone` estrutura é usada nos próximos dois exemplos, qual serializar e desserializar uma matriz de `DateWithTimeZone` objetos. Você pode exibir o código-fonte para todo o conjunto de exemplos deste artigo em uma [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/) ou [c#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) do repositório de documentos do GitHub.
  
Usando o `DateWithTimeZone` estrutura, você pode persistir data e hora junto com informações de fuso horário. O exemplo a seguir usa o <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> classe para serializar uma matriz de `DateWithTimeZone` objetos.  
  
[!code-csharp[System.DateTime.Persistence#7](~/samples/snippets/csharp/System.DateTime/Persistence.cs#7)]
[!code-vb[System.DateTime.Persistence#7](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#7)]  

O exemplo a seguir, em seguida, chama o <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType> método para desserializá-lo.  
  
[!code-csharp[System.DateTime.Persistence#8](~/samples/snippets/csharp/System.DateTime/Persistence.cs#8)]
[!code-vb[System.DateTime.Persistence#8](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#8)]  

### <a name="datetime-vs-timespan"></a>DateTime x TimeSpan  

O <xref:System.DateTime> e <xref:System.TimeSpan> tipos de valor são diferentes em que um <xref:System.DateTime> representa um momento no tempo, enquanto um <xref:System.TimeSpan> representa um intervalo de tempo. Você pode subtrair uma instância do <xref:System.DateTime> de outro para obter um <xref:System.TimeSpan> objeto que representa o intervalo de tempo entre eles. Ou você poderia adicionar um positivo <xref:System.TimeSpan> atual <xref:System.DateTime> para obter um <xref:System.DateTime> valor que representa uma data futura.  
  
Você pode adicionar ou subtrair um intervalo de tempo de um <xref:System.DateTime> objeto. Intervalos de tempo podem ser positivo ou negativo, e eles podem ser expressos em unidades, como tiques, segundos, ou como um <xref:System.TimeSpan> objeto.  

### <a name="comparing-for-equality-within-tolerance"></a>Comparação de igualdade dentro da tolerância

Comparações de igualdade para <xref:System.DateTime> valores são exatos. Isso significa que dois valores devem ser expresso como o mesmo número de tiques a serem considerados iguais. Precisão geralmente é desnecessários ou até mesmo incorreto para muitos aplicativos. Muitas vezes, você deseja testar se <xref:System.DateTime> objetos estão **aproximadamente igual**. 

O exemplo a seguir demonstra como comparar aproximadamente equivalente <xref:System.DateTime> . Ele aceita uma pequena margem de diferença quando declará-las igual.  
  
<a name="comparison-02"></a>  
[!code-csharp[System.DateTime.Comparisons#1](~/samples/snippets/csharp/System.DateTime/DateTimeComparisons.cs#1)]
[!code-vb[System.DateTime.Comparisons#1](~/samples/snippets/visualbasic/System.DateTime/DateTimeComparisons.vb#1)]  

### <a name="com-interop-considerations"></a>Considerações de interoperabilidade COM  

Um <xref:System.DateTime> valor que é transferido para um aplicativo COM e, em seguida, será transferida para um aplicativo gerenciado, é chamado de ida e volta. No entanto, um <xref:System.DateTime> valor que especifica somente um horário não ida e volta como esperado.  
  
Se a ida e volta é apenas uma hora, como às 3 da tarde, a data final e a hora é de 30 de dezembro de 1899, C.E. às 3:00, em vez de, 1 de janeiro de 0001. C.E. em 15:00. O .NET Framework e COM pressupõem uma data padrão quando apenas uma vez é especificado. No entanto, o sistema COM pressupõe uma data de base de 30 de dezembro de 1899 C.E., enquanto o .NET Framework assume uma data base, de 1º de janeiro, 0001. C.E.  
  
Quando apenas uma vez é passada do .NET Framework para COM, o processamento especial é executado que converte a hora para o formato usado por COM. Quando apenas uma vez é passada do COM ao .NET Framework, nenhum processamento especial é executado porque que corromper legítimos datas e horas em ou antes de 30 de dezembro de 1899. Se uma data começa seu ida e volta de COM, o .NET Framework e COM preservam a data.  
  
O comportamento do .NET Framework e COM significa que, se suas viagens de ida e volta da aplicativo uma <xref:System.DateTime> que especifica apenas uma vez, seu aplicativo deve se lembrar de modificar ou ignorar a data de final de incorreta <xref:System.DateTime> objeto.  
     
 ]]></format>
    </remarks>
    <threadsafe>Todos os membros desse tipo são thread-safe. Os membros que aparentam modificar efetivamente o estado retornam uma nova instância inicializada com o novo valor. Assim como acontece com qualquer outro tipo, a leitura e a gravação em uma variável compartilhada que contém uma instância desse tipo devem ser protegidas por um bloqueio para garantir thread-safe.</threadsafe>
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.TimeSpan" />
    <altmember cref="T:System.Globalization.Calendar" />
    <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
    <altmember cref="T:System.TimeZoneInfo" />
    <related type="Article" href="~/docs/standard/datetime/choosing-between-datetime.md">Escolhendo entre DateTime, DateTimeOffset, TimeSpan e TimeZoneInfo</related>
    <related type="Article" href="~/docs/standard/datetime/working-with-calendars.md">Trabalhando com calendários</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">Exemplo: .NET Framework 4 Formatting Utility&amp;lt;2}&amp;lt;1}</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa uma nova instância da estrutura <see cref="T:System.DateTime" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks);" />
      <MemberSignature Language="F#" Value="new DateTime : int64 -&gt; DateTime" Usage="new System.DateTime ticks" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">Uma data e hora expressada no número de intervalos de 100 nanossegundos decorridos desde 1º de janeiro, 0001 em 00:00:00.000 no calendário gregoriano.</param>
        <summary>Inicializa uma nova instância da estrutura <see cref="T:System.DateTime" /> para um número especificado de tiques.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A propriedade <xref:System.DateTime.Kind%2A> é inicializada com <xref:System.DateTimeKind.Unspecified>.  
  
 Para aplicativos nos quais a portabilidade de dados de data e hora ou um grau limitado de reconhecimento do fuso horário seja importante, é possível usar o construtor <xref:System.DateTimeOffset> correspondente.  
  
   
  
## Examples  
 O exemplo a seguir demonstra um do <xref:System.DateTime> construtores.  
  
 [!code-cpp[datetime.ctor_Int64#1](~/samples/snippets/cpp/VS_Snippets_CLR/datetime.ctor_Int64/CPP/ticks.cpp#1)]
 [!code-csharp[datetime.ctor_Int64#1](~/samples/snippets/csharp/VS_Snippets_CLR/datetime.ctor_Int64/CS/ticks.cs#1)]
 [!code-vb[datetime.ctor_Int64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/datetime.ctor_Int64/VB/ticks.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ticks" /> é menor que <see cref="F:System.DateTime.MinValue" /> ou maior que <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int64 * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (ticks, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="ticks">Uma data e hora expressada no número de intervalos de 100 nanossegundos decorridos desde 1º de janeiro, 0001 em 00:00:00.000 no calendário gregoriano.</param>
        <param name="kind">Um dos valores de enumeração que indica se <c>ticks</c> especificam a hora local, UTC (Tempo Universal Coordenado) ou nenhum dos dois.</param>
        <summary>Inicializa uma nova instância da estrutura <see cref="T:System.DateTime" /> para o número de tiques especificado e para o UTC (Tempo Universal Coordenado) ou para a hora local.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para aplicativos nos quais a portabilidade de dados de data e hora ou um grau limitado de reconhecimento do fuso horário seja importante, é possível usar o construtor <xref:System.DateTimeOffset> correspondente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ticks" /> é menor que <see cref="F:System.DateTime.MinValue" /> ou maior que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> não é um dos valores <see cref="T:System.DateTimeKind" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">O ano (de 1 a 9999).</param>
        <param name="month">O mês (de 1 a 12).</param>
        <param name="day">O dia (de 1 ao número de dias em <c>month</c>).</param>
        <summary>Inicializa uma nova instância da estrutura <see cref="T:System.DateTime" /> para o ano, o mês e o dia especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este construtor interpreta `year`, `month` e `day` como um ano, mês e um dia no calendário gregoriano. Para criar uma instância de um <xref:System.DateTime> valor usando o ano, mês e dia no calendário de outro, chamada de <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> construtor.  
  
 A hora do dia para resultante <xref:System.DateTime> é meia-noite (00: 00:00). A propriedade <xref:System.DateTime.Kind%2A> é inicializada com <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%29> construtor para instanciar um <xref:System.DateTime> valor. O exemplo também ilustra que essa sobrecarga cria um <xref:System.DateTime> valor cujo componente do tempo é igual a meia-noite (ou 0:00).  
  
 [!code-csharp[System.DateTime.Constructor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#1)]
 [!code-vb[System.DateTime.Constructor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> é menor que 1 ou maior que 9999.  
  
- ou - 
 <paramref name="month" /> é menor que 1 ou maior que 12.  
  
- ou - 
 <paramref name="day" /> é menor que 1 ou maior que o número de dias em <paramref name="month" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">O ano (de 1 ao número de anos em <c>calendar</c>).</param>
        <param name="month">O mês (de 1 ao número de meses em <c>calendar</c>).</param>
        <param name="day">O dia (de 1 ao número de dias em <c>month</c>).</param>
        <param name="calendar">O calendário usado para interpretar <c>year</c>, <c>month</c> e <c>day</c>.</param>
        <summary>Inicializa uma nova instância da estrutura <see cref="T:System.DateTime" /> para o ano, o mês e o dia especificados do calendário especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A hora do dia para resultante <xref:System.DateTime> é meia-noite (00: 00:00). A propriedade <xref:System.DateTime.Kind%2A> é inicializada com <xref:System.DateTimeKind.Unspecified>.  
  
 Os valores permitidos para `year`, `month`, e `day` dependem do `calendar`. Uma exceção será lançada se a data e hora especificada não puder ser expressada usando-se `calendar`.  
  
 O namespace <xref:System.Globalization> fornece vários calendários que incluem <xref:System.Globalization.GregorianCalendar> e <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 A exemplo a seguir chama o <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> construtor duas vezes para instanciar dois <xref:System.DateTime> valores. A primeira chamada cria uma instância de um valor <xref:System.DateTime> usando-se um objeto <xref:System.Globalization.PersianCalendar>. Como o calendário persa não pode ser designado como o calendário padrão para uma cultura, a exibição de uma data usando-se o calendário persa requer chamadas individuais para os métodos <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> e <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType>. A segunda chamada para o construtor cria uma instância de um valor <xref:System.DateTime> usando-se um objeto <xref:System.Globalization.HijriCalendar>. O exemplo altera a cultura atual para árabe (Síria) e muda o calendário padrão da cultura atual para o calendário islâmico. Como Hijri é o calendário padrão da cultura atual, o método <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> usa-o para formatar a data. Quando a cultura atual anterior (que é inglês (Estados Unidos) nesse caso) é restaurada, o método <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> usa o calendário gregoriano padrão da cultura atual para formatar a data.  
  
 [!code-csharp[System.DateTime.Constructor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample2.cs#2)]
 [!code-vb[System.DateTime.Constructor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> não está no intervalo suportado por <paramref name="calendar" />.  
  
- ou - 
 <paramref name="month" /> é menor que 1 ou maior que o número de meses em <paramref name="calendar" />.  
  
- ou - 
 <paramref name="day" /> é menor que 1 ou maior que o número de dias em <paramref name="month" />.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">O ano (de 1 a 9999).</param>
        <param name="month">O mês (de 1 a 12).</param>
        <param name="day">O dia (de 1 ao número de dias em <c>month</c>).</param>
        <param name="hour">As horas (de 0 a 23).</param>
        <param name="minute">Os minutos (de 0 a 59).</param>
        <param name="second">Os segundos (de 0 a 59).</param>
        <summary>Inicializa uma nova instância da estrutura <see cref="T:System.DateTime" /> para o ano, mês, dia, hora, minuto e segundo especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A propriedade <xref:System.DateTime.Kind%2A> é inicializada com <xref:System.DateTimeKind.Unspecified>.  
  
 Este construtor interpreta`year`, `month`, e `day` como um ano, mês e dia no calendário gregoriano. Para criar uma instância de um <xref:System.DateTime> valor usando o ano, mês e dia no calendário de outro, chamada de <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> construtor.  
  
 Para aplicativos nos quais a portabilidade de dados de data e hora ou um grau limitado de reconhecimento do fuso horário seja importante, é possível usar o construtor <xref:System.DateTimeOffset> correspondente.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.%23ctor%2A> construtor para instanciar um <xref:System.DateTime> valor.  
  
 [!code-csharp[System.DateTime.Constructor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#3)]
 [!code-vb[System.DateTime.Constructor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> é menor que 1 ou maior que 9999.  
  
- ou - 
 <paramref name="month" /> é menor que 1 ou maior que 12.  
  
- ou - 
 <paramref name="day" /> é menor que 1 ou maior que o número de dias em <paramref name="month" />.  
  
- ou - 
 <paramref name="hour" /> é menor que 0 ou maior que 23.  
  
- ou - 
 <paramref name="minute" /> é menor que 0 ou maior que 59.  
  
- ou - 
 <paramref name="second" /> é menor que 0 ou maior que 59.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">O ano (de 1 a 9999).</param>
        <param name="month">O mês (de 1 a 12).</param>
        <param name="day">O dia (de 1 ao número de dias em <c>month</c>).</param>
        <param name="hour">As horas (de 0 a 23).</param>
        <param name="minute">Os minutos (de 0 a 59).</param>
        <param name="second">Os segundos (de 0 a 59).</param>
        <param name="kind">Um dos valores de enumeração que indica se <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c> e <c>second</c> especificam a hora local, o UTC (Tempo Universal Coordenado) ou nenhum dos dois.</param>
        <summary>Inicializa uma nova instância da estrutura <see cref="T:System.DateTime" /> para o ano, o mês, o dia, a hora, o minuto, o segundo e o UTC (Tempo Universal Coordenado) especificados ou para a hora local.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este construtor interpreta`year`, `month`, e `day` como um ano, mês e dia no calendário gregoriano. Para criar uma instância de um <xref:System.DateTime> valor usando o ano, mês e dia no calendário de outro, chamada de <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> construtor.  
  
 Para aplicativos nos quais a portabilidade de dados de data e hora ou um grau limitado de reconhecimento do fuso horário seja importante, é possível usar o construtor <xref:System.DateTimeOffset> correspondente.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> construtor para instanciar um <xref:System.DateTime> valor.  
  
 [!code-csharp[System.DateTime.Constructor#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#7)]
 [!code-vb[System.DateTime.Constructor#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> é menor que 1 ou maior que 9999.  
  
- ou - 
 <paramref name="month" /> é menor que 1 ou maior que 12.  
  
- ou - 
 <paramref name="day" /> é menor que 1 ou maior que o número de dias em <paramref name="month" />.  
  
- ou - 
 <paramref name="hour" /> é menor que 0 ou maior que 23.  
  
- ou - 
 <paramref name="minute" /> é menor que 0 ou maior que 59.  
  
- ou - 
 <paramref name="second" /> é menor que 0 ou maior que 59.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> não é um dos valores <see cref="T:System.DateTimeKind" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">O ano (de 1 ao número de anos em <c>calendar</c>).</param>
        <param name="month">O mês (de 1 ao número de meses em <c>calendar</c>).</param>
        <param name="day">O dia (de 1 ao número de dias em <c>month</c>).</param>
        <param name="hour">As horas (de 0 a 23).</param>
        <param name="minute">Os minutos (de 0 a 59).</param>
        <param name="second">Os segundos (de 0 a 59).</param>
        <param name="calendar">O calendário usado para interpretar <c>year</c>, <c>month</c> e <c>day</c>.</param>
        <summary>Inicializa uma nova instância da estrutura <see cref="T:System.DateTime" /> para o ano, mês, dia, hora, minuto e segundo especificados para o calendário especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A propriedade <xref:System.DateTime.Kind%2A> é inicializada com <xref:System.DateTimeKind.Unspecified>.  
  
 Os valores permitidos para `year`, `month`, e `day` dependem do `calendar`. Uma exceção será lançada se a data e hora especificada não puder ser expressada usando-se `calendar`.  
  
 O namespace <xref:System.Globalization> fornece vários calendários que incluem <xref:System.Globalization.GregorianCalendar> e <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 A exemplo a seguir chama o <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> construtor duas vezes para instanciar dois <xref:System.DateTime> valores. A primeira chamada cria uma instância de um valor <xref:System.DateTime> usando-se um objeto <xref:System.Globalization.PersianCalendar>. Como o calendário persa não pode ser designado como o calendário padrão para uma cultura, a exibição de uma data usando-se o calendário persa requer chamadas individuais para os métodos <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> e <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType>. A segunda chamada para o construtor cria uma instância de um valor <xref:System.DateTime> usando-se um objeto <xref:System.Globalization.HijriCalendar>. O exemplo altera a cultura atual para árabe (Síria) e muda o calendário padrão da cultura atual para o calendário islâmico. Como Hijri é o calendário padrão da cultura atual, o método <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> usa-o para formatar a data. Quando a cultura atual anterior (que é inglês (Estados Unidos) nesse caso) é restaurada, o método <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> usa o calendário gregoriano padrão da cultura atual para formatar a data.  
  
 [!code-csharp[System.DateTime.Constructor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample4.cs#4)]
 [!code-vb[System.DateTime.Constructor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> não está no intervalo suportado por <paramref name="calendar" />.  
  
- ou - 
 <paramref name="month" /> é menor que 1 ou maior que o número de meses em <paramref name="calendar" />.  
  
- ou - 
 <paramref name="day" /> é menor que 1 ou maior que o número de dias em <paramref name="month" />.  
  
- ou - 
 <paramref name="hour" /> é menor que 0 ou maior que 23 
- ou - 
 <paramref name="minute" /> é menor que 0 ou maior que 59.  
  
- ou - 
 <paramref name="second" /> é menor que 0 ou maior que 59.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">O ano (de 1 a 9999).</param>
        <param name="month">O mês (de 1 a 12).</param>
        <param name="day">O dia (de 1 ao número de dias em <c>month</c>).</param>
        <param name="hour">As horas (de 0 a 23).</param>
        <param name="minute">Os minutos (de 0 a 59).</param>
        <param name="second">Os segundos (de 0 a 59).</param>
        <param name="millisecond">Os milissegundos (de 0 a 999).</param>
        <summary>Inicializa uma nova instância da estrutura <see cref="T:System.DateTime" /> para o ano, mês, dia, hora, minuto, segundo e milissegundo especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este construtor interpreta`year`, `month`, e `day` como um ano, mês e dia no calendário gregoriano. Para criar uma instância de um <xref:System.DateTime> valor usando o ano, mês e dia no calendário de outro, chamada de <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> construtor.  
  
 A propriedade <xref:System.DateTime.Kind%2A> é inicializada com <xref:System.DateTimeKind.Unspecified>.  
  
 Para aplicativos nos quais a portabilidade de dados de data e hora ou um grau limitado de reconhecimento do fuso horário seja importante, é possível usar o construtor <xref:System.DateTimeOffset> correspondente.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29> construtor para instanciar um <xref:System.DateTime> valor.  
  
 [!code-csharp[System.DateTime.Constructor#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#5)]
 [!code-vb[System.DateTime.Constructor#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> é menor que 1 ou maior que 9999.  
  
- ou - 
 <paramref name="month" /> é menor que 1 ou maior que 12.  
  
- ou - 
 <paramref name="day" /> é menor que 1 ou maior que o número de dias em <paramref name="month" />.  
  
- ou - 
 <paramref name="hour" /> é menor que 0 ou maior que 23.  
  
- ou - 
 <paramref name="minute" /> é menor que 0 ou maior que 59.  
  
- ou - 
 <paramref name="second" /> é menor que 0 ou maior que 59.  
  
- ou - 
 <paramref name="millisecond" /> é menor que 0 ou maior que 999.</exception>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">O ano (de 1 a 9999).</param>
        <param name="month">O mês (de 1 a 12).</param>
        <param name="day">O dia (de 1 ao número de dias em <c>month</c>).</param>
        <param name="hour">As horas (de 0 a 23).</param>
        <param name="minute">Os minutos (de 0 a 59).</param>
        <param name="second">Os segundos (de 0 a 59).</param>
        <param name="millisecond">Os milissegundos (de 0 a 999).</param>
        <param name="kind">Um dos valores de enumeração que indica se <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c>, <c>second</c> e <c>millisecond</c> especificam a hora local, o UTC (Tempo Universal Coordenado) ou nenhum dos dois.</param>
        <summary>Inicializa uma nova instância da estrutura <see cref="T:System.DateTime" /> com o ano, mês, dia, hora, minuto, segundo, milissegundo e UTC (Tempo Universal Coordenado) ou hora local especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este construtor interpreta`year`, `month`, e `day` como um ano, mês e dia no calendário gregoriano. Para criar uma instância de um <xref:System.DateTime> valor usando o ano, mês e dia no calendário de outro, chamada de <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> construtor.  
  
 Para aplicativos nos quais a portabilidade de dados de data e hora ou um grau limitado de reconhecimento do fuso horário seja importante, é possível usar o construtor <xref:System.DateTimeOffset> correspondente.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> construtor para instanciar um <xref:System.DateTime> valor.  
  
 [!code-csharp[System.DateTime.Constructor#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#8)]
 [!code-vb[System.DateTime.Constructor#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> é menor que 1 ou maior que 9999.  
  
- ou - 
 <paramref name="month" /> é menor que 1 ou maior que 12.  
  
- ou - 
 <paramref name="day" /> é menor que 1 ou maior que o número de dias em <paramref name="month" />.  
  
- ou - 
 <paramref name="hour" /> é menor que 0 ou maior que 23.  
  
- ou - 
 <paramref name="minute" /> é menor que 0 ou maior que 59.  
  
- ou - 
 <paramref name="second" /> é menor que 0 ou maior que 59.  
  
- ou - 
 <paramref name="millisecond" /> é menor que 0 ou maior que 999.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> não é um dos valores <see cref="T:System.DateTimeKind" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">O ano (de 1 ao número de anos em <c>calendar</c>).</param>
        <param name="month">O mês (de 1 ao número de meses em <c>calendar</c>).</param>
        <param name="day">O dia (de 1 ao número de dias em <c>month</c>).</param>
        <param name="hour">As horas (de 0 a 23).</param>
        <param name="minute">Os minutos (de 0 a 59).</param>
        <param name="second">Os segundos (de 0 a 59).</param>
        <param name="millisecond">Os milissegundos (de 0 a 999).</param>
        <param name="calendar">O calendário usado para interpretar <c>year</c>, <c>month</c> e <c>day</c>.</param>
        <summary>Inicializa uma nova instância da estrutura <see cref="T:System.DateTime" /> para o ano, mês, dia, hora, minuto, segundo e milissegundo especificados para o calendário especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A propriedade <xref:System.DateTime.Kind%2A> é inicializada com <xref:System.DateTimeKind.Unspecified>.  
  
 Os valores permitidos para `year`, `month`, e `day` dependem do `calendar`. Uma exceção será lançada se a data e hora especificada não puder ser expressada usando-se `calendar`.  
  
 Para aplicativos nos quais a portabilidade de dados de data e hora ou um grau limitado de reconhecimento do fuso horário seja importante, é possível usar o construtor <xref:System.DateTimeOffset> correspondente.  
  
 O namespace <xref:System.Globalization> fornece vários calendários que incluem <xref:System.Globalization.GregorianCalendar> e <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 A exemplo a seguir chama o <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> construtor duas vezes para instanciar dois <xref:System.DateTime> valores. A primeira chamada cria uma instância de um valor <xref:System.DateTime> usando-se um objeto <xref:System.Globalization.PersianCalendar>. Como o calendário persa não pode ser designado como o calendário padrão para uma cultura, a exibição de uma data usando-se o calendário persa requer chamadas individuais para os métodos <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> e <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType>. A segunda chamada para o construtor cria uma instância de um valor <xref:System.DateTime> usando-se um objeto <xref:System.Globalization.HijriCalendar>. O exemplo altera a cultura atual para árabe (Síria) e muda o calendário padrão da cultura atual para o calendário islâmico. Como Hijri é o calendário padrão da cultura atual, o método <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> usa-o para formatar a data. Quando a cultura atual anterior (que é inglês (Estados Unidos) nesse caso) é restaurada, o método <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> usa o calendário gregoriano padrão da cultura atual para formatar a data.  
  
 [!code-csharp[System.DateTime.Constructor#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample6.cs#6)]
 [!code-vb[System.DateTime.Constructor#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> não está no intervalo suportado por <paramref name="calendar" />.  
  
- ou - 
 <paramref name="month" /> é menor que 1 ou maior que o número de meses em <paramref name="calendar" />.  
  
- ou - 
 <paramref name="day" /> é menor que 1 ou maior que o número de dias em <paramref name="month" />.  
  
- ou - 
 <paramref name="hour" /> é menor que 0 ou maior que 23.  
  
- ou - 
 <paramref name="minute" /> é menor que 0 ou maior que 59.  
  
- ou - 
 <paramref name="second" /> é menor que 0 ou maior que 59.  
  
- ou - 
 <paramref name="millisecond" /> é menor que 0 ou maior que 999.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * System.Globalization.Calendar * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, calendar, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">O ano (de 1 ao número de anos em <c>calendar</c>).</param>
        <param name="month">O mês (de 1 ao número de meses em <c>calendar</c>).</param>
        <param name="day">O dia (de 1 ao número de dias em <c>month</c>).</param>
        <param name="hour">As horas (de 0 a 23).</param>
        <param name="minute">Os minutos (de 0 a 59).</param>
        <param name="second">Os segundos (de 0 a 59).</param>
        <param name="millisecond">Os milissegundos (de 0 a 999).</param>
        <param name="calendar">O calendário usado para interpretar <c>year</c>, <c>month</c> e <c>day</c>.</param>
        <param name="kind">Um dos valores de enumeração que indica se <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c>, <c>second</c> e <c>millisecond</c> especificam a hora local, o UTC (Tempo Universal Coordenado) ou nenhum dos dois.</param>
        <summary>Inicializa uma nova instância da estrutura <see cref="T:System.DateTime" /> com ano, mês, dia, hora, minuto, segundo, milissegundo e UTC (Tempo Universal Coordenado) ou hora local especificados para o calendário especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os valores permitidos para `year`, `month`, e `day` parâmetros dependem de `calendar` parâmetro. Uma exceção será lançada se a data e hora especificada não puder ser expressada usando-se `calendar`.  
  
 Para aplicativos nos quais a portabilidade de dados de data e hora ou um grau limitado de reconhecimento do fuso horário seja importante, é possível usar o construtor <xref:System.DateTimeOffset> correspondente.  
  
 O namespace <xref:System.Globalization> fornece vários calendários que incluem <xref:System.Globalization.GregorianCalendar> e <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 A exemplo a seguir chama o <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> construtor duas vezes para instanciar dois <xref:System.DateTime> valores. A primeira chamada cria uma instância de um valor <xref:System.DateTime> usando-se um objeto <xref:System.Globalization.PersianCalendar>. Como o calendário persa não pode ser designado como o calendário padrão para uma cultura, a exibição de uma data usando-se o calendário persa requer chamadas individuais para os métodos <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> e <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType>. A segunda chamada para o construtor cria uma instância de um valor <xref:System.DateTime> usando-se um objeto <xref:System.Globalization.HijriCalendar>. O exemplo altera a cultura atual para árabe (Síria) e muda o calendário padrão da cultura atual para o calendário islâmico. Como Hijri é o calendário padrão da cultura atual, o método <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> usa-o para formatar a data. Quando a cultura atual anterior (que é inglês (Estados Unidos) nesse caso) é restaurada, o método <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> usa o calendário gregoriano padrão da cultura atual para formatar a data.  
  
 [!code-csharp[System.DateTime.Constructor#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample9.cs#9)]
 [!code-vb[System.DateTime.Constructor#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample9.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> não está no intervalo suportado por <paramref name="calendar" />.  
  
- ou - 
 <paramref name="month" /> é menor que 1 ou maior que o número de meses em <paramref name="calendar" />.  
  
- ou - 
 <paramref name="day" /> é menor que 1 ou maior que o número de dias em <paramref name="month" />.  
  
- ou - 
 <paramref name="hour" /> é menor que 0 ou maior que 23.  
  
- ou - 
 <paramref name="minute" /> é menor que 0 ou maior que 59.  
  
- ou - 
 <paramref name="second" /> é menor que 0 ou maior que 59.  
  
- ou - 
 <paramref name="millisecond" /> é menor que 0 ou maior que 999.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> não é um dos valores <see cref="T:System.DateTimeKind" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTime Add (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Add(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Add(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Add(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; DateTime" Usage="dateTime.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">Um intervalo de tempo positivo ou negativo.</param>
        <summary>Retorna um novo <see cref="T:System.DateTime" /> que adiciona o valor do <see cref="T:System.TimeSpan" /> especificado ao valor dessa instância.</summary>
        <returns>Um objeto cujo valor é a soma da data e hora representada por essa instância e o intervalo de tempo representado por <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode usar o <xref:System.DateTime.Add%2A> método para adicionar mais de um tipo de intervalo de tempo (dias, horas, minutos, segundos ou milissegundos) em uma única operação. Comportamento desse método é idêntico do operador de adição. O <xref:System.DateTime> estrutura também dá suporte a métodos de adição especializada (tal como <xref:System.DateTime.AddDays%2A>, <xref:System.DateTime.AddHours%2A>, e <xref:System.DateTime.AddMinutes%2A>) para cada intervalo de tempo.  
  
 O <xref:System.DateTime.Add%2A> método leva em conta bissextos e o número de dias em um mês quando realizar aritmética de data.  
  
 Este método não altera o valor desse <xref:System.DateTime>. Em vez disso, ele retorna um novo <xref:System.DateTime> cujo valor é o resultado dessa operação. O <xref:System.DateTime.Kind%2A> propriedade da nova <xref:System.DateTime> instância é igual da instância atual.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.Add%2A> método. Ele calcula o dia da semana em que é de 36 dias (horas 864) de neste momento.  
  
 [!code-cpp[DateTime.Add#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Add/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Add/CS/class1.cs#1)]
 [!code-vb[DateTime.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Add/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O <see cref="T:System.DateTime" /> resultante é menor que <see cref="F:System.DateTime.MinValue" /> ou maior que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="M:System.TimeSpan.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Executando operações aritméticas com datas e horas</related>
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTime AddDays (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddDays(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddDays(double value);" />
      <MemberSignature Language="F#" Value="member this.AddDays : double -&gt; DateTime" Usage="dateTime.AddDays value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Um número de dias inteiros e fracionários. O parâmetro <c>value</c> pode ser negativo ou positivo.</param>
        <summary>Retorna um novo <see cref="T:System.DateTime" /> que adiciona o número especificado de dias ao valor dessa instância.</summary>
        <returns>Um objeto cujo valor é a soma da data e hora representada por essa instância e o número de dias representado por <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método não altera o valor desse <xref:System.DateTime>. Em vez disso, ele retorna um novo <xref:System.DateTime> cujo valor é o resultado dessa operação.  
  
 A parte fracionária `value` é a parte fracionária de um dia. Por exemplo, 4.5 é equivalente a 4 dias, 12 horas, 0 minutos, 0 segundos, milissegundos 0 e 0 tiques.  
  
 O parâmetro `value` é arredondado para o milissegundo mais próximo.  
  
 O <xref:System.DateTime.AddDays%2A> método leva em conta bissextos e o número de dias em um mês quando realizar aritmética de data.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.AddDays%2A> método para determinar o dia da semana 36 dias após a data atual.  
  
 [!code-cpp[DateTime.AddDays#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.AddDays/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.AddDays#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.AddDays/CS/class1.cs#1)]
 [!code-vb[DateTime.AddDays#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.AddDays/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O <see cref="T:System.DateTime" /> resultante é menor que <see cref="F:System.DateTime.MinValue" /> ou maior que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTime AddHours (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddHours(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddHours(double value);" />
      <MemberSignature Language="F#" Value="member this.AddHours : double -&gt; DateTime" Usage="dateTime.AddHours value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Um número de horas inteiras e fracionárias. O parâmetro <c>value</c> pode ser negativo ou positivo.</param>
        <summary>Retorna um novo <see cref="T:System.DateTime" /> que adiciona o número especificado de horas ao valor dessa instância.</summary>
        <returns>Um objeto cujo valor é a soma da data e hora representada por essa instância e o número de horas representado por <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método não altera o valor desse <xref:System.DateTime>. Em vez disso, ele retorna um novo <xref:System.DateTime> cujo valor é o resultado dessa operação. O <xref:System.DateTime.Kind%2A> propriedade retornada <xref:System.DateTime> objeto é o mesmo da `value`.  
  
 A parte fracionária `value` é a parte fracionária de uma hora. Por exemplo, 4.5 é equivalente a 4 horas, 30 minutos, 0 segundos, milissegundos 0 e 0 tiques.  
  
 O parâmetro `value` é arredondado para o milissegundo mais próximo.  
  
 Converter os intervalos de tempo de menos de uma hora para uma fração pode envolver uma perda de precisão se o resultado é um decimal de repetição de finalização. (Por exemplo, um minuto é 0.016667 de uma hora). Se esse for um problema, você pode usar o <xref:System.DateTime.Add%2A> método, que permite que você especificar mais de um tipo de intervalo de tempo em uma única chamada de método e elimina a necessidade de converter os intervalos de tempo em partes fracionárias de uma hora.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.AddHours%2A> para adicionar um número de valores inteiros e fracionários à data e hora. Ele também ilustra a perda de precisão causado passando o método um valor que inclui um componente fracionário.  
  
 [!code-csharp[System.DateTime.AddHours#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.AddHours/cs/AddHours1.cs#1)]
 [!code-vb[System.DateTime.AddHours#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.AddHours/vb/AddHours1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O <see cref="T:System.DateTime" /> resultante é menor que <see cref="F:System.DateTime.MinValue" /> ou maior que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Executando operações aritméticas com datas e horas</related>
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTime AddMilliseconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMilliseconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMilliseconds(double value);" />
      <MemberSignature Language="F#" Value="member this.AddMilliseconds : double -&gt; DateTime" Usage="dateTime.AddMilliseconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Um número de milissegundos inteiros e fracionários. O parâmetro <c>value</c> pode ser negativo ou positivo. Observe que este valor é arredondado para o inteiro mais próximo.</param>
        <summary>Retorna um novo <see cref="T:System.DateTime" /> que adiciona o número especificado de milissegundos ao valor dessa instância.</summary>
        <returns>Um objeto cujo valor é a soma da data e hora representada por essa instância e o número de milissegundos representado por <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método não altera o valor desse <xref:System.DateTime>. Em vez disso, ele retorna um novo <xref:System.DateTime> cujo valor é o resultado dessa operação.  
  
 A parte fracionária `value` é a parte fracionária de um milissegundo. Por exemplo, 4.5 é equivalente a 4 milissegundos e 5000 tiques, onde um milissegundo = 10000 tiques.  
  
 O `value` parâmetro será arredondado para o inteiro mais próximo.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.AddMilliseconds%2A> método para adicionar um milissegundo e 1,5 milissegundos de um <xref:System.DateTime> valor. Em seguida, ele exibe cada novo valor e a diferença entre ele e o valor original. A diferença é exibida como um período de tempo e um número de tiques. O exemplo deixa claro que um milissegundo é igual a 10.000 tiques. Ele também mostra que os milissegundos fracionários são arredondados antes de executar a adição; o <xref:System.DateTime> valor resultante da adição de milissegundos de 1,5 à data original é maiores que a data original de 2 milissegundos.  
  
 [!code-csharp[System.DateTime.AddMilliseconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmilliseconds/cs/addmilliseconds2.cs#1)]
 [!code-vb[System.DateTime.AddMilliseconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmilliseconds/vb/addmilliseconds2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O <see cref="T:System.DateTime" /> resultante é menor que <see cref="F:System.DateTime.MinValue" /> ou maior que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Executando operações aritméticas com datas e horas</related>
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTime AddMinutes (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMinutes(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMinutes(double value);" />
      <MemberSignature Language="F#" Value="member this.AddMinutes : double -&gt; DateTime" Usage="dateTime.AddMinutes value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Um número de minutos inteiros e fracionários. O parâmetro <c>value</c> pode ser negativo ou positivo.</param>
        <summary>Retorna um novo <see cref="T:System.DateTime" /> que adiciona o número especificado de minutos ao valor dessa instância.</summary>
        <returns>Um objeto cujo valor é a soma da data e hora representada por essa instância e o número de minutos representado por <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método não altera o valor desse <xref:System.DateTime>. Em vez disso, ele retorna um novo <xref:System.DateTime> cujo valor é o resultado dessa operação.  
  
 A parte fracionária `value` é a parte fracionária de um minuto. Por exemplo, 4.5 é equivalente a 4 minutos e 30 segundos, milissegundos 0 e 0 tiques.  
  
 O parâmetro `value` é arredondado para o milissegundo mais próximo.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.AddMinutes%2A> para adicionar um número de valores inteiros e fracionários à data e hora.  
  
 [!code-cpp[System.DateTime.AddMinutes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.addminutes/cpp/addminutes1.cpp#1)]
 [!code-csharp[System.DateTime.AddMinutes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addminutes/cs/addminutes1.cs#1)]
 [!code-vb[System.DateTime.AddMinutes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addminutes/vb/addminutes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O <see cref="T:System.DateTime" /> resultante é menor que <see cref="F:System.DateTime.MinValue" /> ou maior que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Executando operações aritméticas com datas e horas</related>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTime AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMonths(int months);" />
      <MemberSignature Language="F#" Value="member this.AddMonths : int -&gt; DateTime" Usage="dateTime.AddMonths months" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">Um número de meses. O parâmetro <c>months</c> pode ser negativo ou positivo.</param>
        <summary>Retorna um novo <see cref="T:System.DateTime" /> que adiciona o número especificado de meses ao valor dessa instância.</summary>
        <returns>Um objeto cujo valor é a soma da data e hora representada por essa instância e <paramref name="months" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não altera o valor deste <xref:System.DateTime> objeto. Em vez disso, ele retorna um novo <xref:System.DateTime> objeto cujo valor é o resultado dessa operação.  
  
 O <xref:System.DateTime.AddMonths%2A> método calcula resultante mês e ano, levando em conta bissextos e o número de dias em um mês, em seguida, ajusta a parte do dia resultantes <xref:System.DateTime> objeto. Se o dia resultante não é um dia válido do mês resultante, o último dia válido do mês resultante será usado. Por exemplo, 31 de março + 1 mês = 30 de abril e 31 de março - 1 mês = 28 de fevereiro para um não-ano bissexto e 29 de fevereiro para um ano bissexto.  
  
 A parte de hora do dia do resultante <xref:System.DateTime> objeto permanece o mesmo que essa instância.  
  
   
  
## Examples  
 O exemplo a seguir adiciona entre zero e quinze meses até o último dia de dezembro de 2015. Nesse caso, o método AddMonths retorna a data do último dia de cada mês e manipula com êxito os anos bissextos.  
  
 [!code-csharp[System.DateTime.AddMonths#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmonths/cs/addmonths1.cs#1)]
 [!code-vb[System.DateTime.AddMonths#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmonths/vb/addmonths1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O <see cref="T:System.DateTime" /> resultante é menor que <see cref="F:System.DateTime.MinValue" /> ou maior que <see cref="F:System.DateTime.MaxValue" />.  
  
- ou - 
 <paramref name="months" /> é menor que -120.000 ou maior que 120.000.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTime AddSeconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddSeconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddSeconds(double value);" />
      <MemberSignature Language="F#" Value="member this.AddSeconds : double -&gt; DateTime" Usage="dateTime.AddSeconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Um número de segundos inteiros e fracionários. O parâmetro <c>value</c> pode ser negativo ou positivo.</param>
        <summary>Retorna um novo <see cref="T:System.DateTime" /> que adiciona o número especificado de segundos ao valor dessa instância.</summary>
        <returns>Um objeto cujo valor é a soma da data e hora representada por essa instância e o número de segundos representado por <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método não altera o valor desse <xref:System.DateTime>. Em vez disso, ele retorna um novo <xref:System.DateTime> cujo valor é o resultado dessa operação.  
  
 A parte fracionária `value` é a parte fracionária de segundos. Por exemplo, 4.5 é equivalente a 4 segundos, 500 milissegundos e 0 tiques.  
  
 O parâmetro `value` é arredondado para o milissegundo mais próximo.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.AddSeconds%2A> método para adicionar 30 segundos e o número de segundos em um dia para um <xref:System.DateTime> valor. Em seguida, ele exibe cada novo valor e a diferença entre ele e o valor original. A diferença é exibida como um período de tempo e um número de tiques.  
  
 [!code-csharp[System.DateTime.AddSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addseconds/cs/addseconds1.cs#1)]
 [!code-vb[System.DateTime.AddSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addseconds/vb/addseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O <see cref="T:System.DateTime" /> resultante é menor que <see cref="F:System.DateTime.MinValue" /> ou maior que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Executando operações aritméticas com datas e horas</related>
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTime AddTicks (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddTicks(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (value As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddTicks(long value);" />
      <MemberSignature Language="F#" Value="member this.AddTicks : int64 -&gt; DateTime" Usage="dateTime.AddTicks value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Um número de tiques de 100 nanossegundos. O parâmetro <c>value</c> pode ser positivo ou negativo.</param>
        <summary>Retorna uma nova <see cref="T:System.DateTime" /> que adiciona o número de tiques especificado no valor dessa instância.</summary>
        <returns>Um objeto cujo valor é a soma da data e hora representadas por essa instância e a hora representada por <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método não altera o valor desse <xref:System.DateTime>. Em vez disso, ele retorna um novo <xref:System.DateTime> cujo valor é o resultado dessa operação.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O <see cref="T:System.DateTime" /> resultante é menor que <see cref="F:System.DateTime.MinValue" /> ou maior que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Int64" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Executando operações aritméticas com datas e horas</related>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTime AddYears (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddYears(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (value As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddYears(int value);" />
      <MemberSignature Language="F#" Value="member this.AddYears : int -&gt; DateTime" Usage="dateTime.AddYears value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Um número de anos. O parâmetro <c>value</c> pode ser negativo ou positivo.</param>
        <summary>Retorna um novo <see cref="T:System.DateTime" /> que adiciona o número especificado de anos ao valor dessa instância.</summary>
        <returns>Um objeto cujo valor é a soma da data e hora representada por essa instância e o número de anos representado por <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não altera o valor deste <xref:System.DateTime> objeto. Em vez disso, ele retorna um novo <xref:System.DateTime> objeto cujo valor é o resultado dessa operação.  
  
 O <xref:System.DateTime.AddYears%2A> método calcula o ano resultante, levando em conta os anos bissextos. A parte do mês e a hora do dia de resultante <xref:System.DateTime> objeto permanece o mesmo que essa instância.  
  
 Se a instância atual representa o dia bissexto em um ano bissexto, o valor de retorno depende da data de destino:  
  
-   Se `value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType> também é um ano bissexto, o valor de retorno representa o dia daquele ano bissexto. Por exemplo, se quatro anos for adicionado a 29 de fevereiro de 2012, a data retornada é 29 de fevereiro de 2016.  
  
-   Se `value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType> não é um ano bissexto, o valor de retorno representa o dia antes do dia daquele ano bissexto. Por exemplo, se um ano é adicionado a 29 de fevereiro de 2012, a data retornada é 28 de fevereiro de 2013.  
  
 O exemplo a seguir ilustra o uso de <xref:System.DateTime.AddYears%2A> método com um <xref:System.DateTime> valor que representa um dia do ano bissexto. Ele exibe a data de quinze anos anteriores ao e os quinze anos que seguem 29 de fevereiro de 2000.  
  
 [!code-csharp[System.DateTime.AddYears#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addyears/cs/addyears1.cs#1)]
 [!code-vb[System.DateTime.AddYears#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addyears/vb/addyears1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> ou o <see cref="T:System.DateTime" /> resultante é menor que <see cref="F:System.DateTime.MinValue" /> ou maior que <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (t1 As DateTime, t2 As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member Compare : DateTime * DateTime -&gt; int" Usage="System.DateTime.Compare (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">O primeiro objeto a ser comparado.</param>
        <param name="t2">O segundo objeto a ser comparado.</param>
        <summary>Compara duas instâncias do <see cref="T:System.DateTime" /> e retorna um inteiro que indica se a primeira instância é anterior, a mesma ou posterior à segunda instância.</summary>
        <returns>Um número assinado que indica os valores relativos de <paramref name="t1" /> e <paramref name="t2" />.  
  
 <list type="table"><listheader><term> Tipo do Valor 
 </term><description> Condição 
 </description></listheader><item><term> Menor que zero 
 </term><description><paramref name="t1" /> é anterior a <paramref name="t2" />.  
  
 </description></item><item><term> Zero 
 </term><description><paramref name="t1" /> é o mesmo que <paramref name="t2" />.  
  
 </description></item><item><term> Maior que zero 
 </term><description><paramref name="t1" /> é posterior a <paramref name="t2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar a relação das `t1` para `t2`, o <xref:System.DateTime.Compare%2A> método compara o <xref:System.DateTime.Ticks%2A> propriedade de `t1` e `t2` , mas ignora seus <xref:System.DateTime.Kind%2A> propriedade. Antes de comparar <xref:System.DateTime> objetos, certifique-se de que os objetos representam horas no mesmo fuso horário.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.Compare%2A> método.  
  
 [!code-csharp[System.DateTime.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.compare/cs/compare1.cs#1)]
 [!code-vb[System.DateTime.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.compare/vb/compare1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Compara o valor dessa instância com um valor <see cref="T:System.DateTime" /> especificado e indica se essa instância é anterior, igual ou posterior ao valor <see cref="T:System.DateTime" /> especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As duas sobrecargas do <xref:System.DateTime.CompareTo%2A> método retornar um número assinado que indica o valor relativo dessa instância e o `value` argumento, como mostrado na tabela a seguir.  
  
|Valor|Descrição|  
|-----------|-----------------|  
|Menor que zero|Essa instância é anterior a `value`.|  
|Zero|Essa instância é igual a `value`.|  
|Maior que zero|Essa instância é posterior a `value`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTime value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : DateTime -&gt; int&#xA;override this.CompareTo : DateTime -&gt; int" Usage="dateTime.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">O objeto a ser comparado com a instância atual.</param>
        <summary>Compara o valor dessa instância com um valor <see cref="T:System.DateTime" /> especificado e retorna um inteiro que indica se essa instância é anterior, igual ou posterior ao valor <see cref="T:System.DateTime" /> especificado.</summary>
        <returns>Um número assinado que indica os valores relativos dessa instância e do parâmetro <paramref name="value" />.  
  
 <list type="table"><listheader><term> Valor 
 </term><description> Descrição 
 </description></listheader><item><term> Menor que zero 
 </term><description> Essa instância é anterior a <paramref name="value" />.  
  
 </description></item><item><term> Zero 
 </term><description> Essa instância é igual a <paramref name="value" />.  
  
 </description></item><item><term> Maior que zero 
 </term><description> Essa instância é posterior a <paramref name="value" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar a relação entre a instância atual seja `value`, o <xref:System.DateTime.CompareTo%2A> método compara os <xref:System.DateTime.Ticks%2A> propriedade da instância atual e `value` , mas ignora seus <xref:System.DateTime.Kind%2A> propriedade.  Antes de comparar objetos <xref:System.DateTime>, verifique se os objetos representam horas no mesmo fuso horário. Você pode fazer isso, comparando os valores de suas <xref:System.DateTime.Kind%2A> propriedades.  
  
 Esse método implementa o <xref:System.IComparable%601?displayProperty=nameWithType> da interface e executa um pouco melhor do que o <xref:System.DateTime.CompareTo%28System.Object%29?displayProperty=nameWithType> sobrecarga do método porque ele não tem que converter o `value` parâmetro para um objeto.  
  
   
  
## Examples  
 O exemplo a seguir cria uma instância de três <xref:System.DateTime> objetos, um que representa hoje data, outro que representa a data anteriormente de um ano e um terceiro que representa a data um ano no futuro. Em seguida, ele chama o <xref:System.DateTime.CompareTo%28System.DateTime%29> método e exibe o resultado da comparação.  
  
 [!code-csharp[DateTime.CompareTo.2#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo.2/CS/CompareTo_CS1_24564.cs#1)]
 [!code-vb[DateTime.CompareTo.2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo.2/VB/CompareTo_VB1_24564.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="dateTime.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Um objeto demarcado a ser comparado ou <see langword="null" />.</param>
        <summary>Compara o valor dessa instância com um objeto especificado que contém um valor <see cref="T:System.DateTime" /> especificado e retorna um inteiro que indica se essa instância é anterior, igual ou posterior ao valor <see cref="T:System.DateTime" /> especificado.</summary>
        <returns>Um número assinado que indica os valores relativos dessa instância e de <paramref name="value" />.  
  
 <list type="table"><listheader><term> Valor 
 </term><description> Descrição 
 </description></listheader><item><term> Menor que zero 
 </term><description> Essa instância é anterior a <paramref name="value" />.  
  
 </description></item><item><term> Zero 
 </term><description> Essa instância é igual a <paramref name="value" />.  
  
 </description></item><item><term> Maior que zero 
 </term><description> Essa instância é posterior a <paramref name="value" />, ou <paramref name="value" /> é <see langword="null" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar a relação entre a instância atual seja `value`, o <xref:System.DateTime.CompareTo%2A> método compara os <xref:System.DateTime.Ticks%2A> propriedade da instância atual e `value` , mas ignora seus <xref:System.DateTime.Kind%2A> propriedade. Antes de comparar objetos <xref:System.DateTime>, verifique se os objetos representam horas no mesmo fuso horário. Você pode fazer isso, comparando os valores de suas <xref:System.DateTime.Kind%2A> propriedades.  
  
 Qualquer instância do <xref:System.DateTime>, independentemente de seu valor é considerado maior do que `null`.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.CompareTo%2A> método.  
  
 [!code-cpp[DateTime.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.CompareTo/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo/CS/class1.cs#1)]
 [!code-vb[DateTime.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> não é um <see cref="T:System.DateTime" />.</exception>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime" Usage="System.DateTime.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o componente de data da instância.</summary>
        <value>Um novo objeto com a mesma data que essa instância e o valor temporal definido como meia-noite em 12:00:00 (00:00:00).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor da <xref:System.DateTime.Kind%2A> propriedade retornada <xref:System.DateTime> valor é igual da instância atual.  
  
 Porque o <xref:System.DateTime> tipo representa as duas datas e horas em um único tipo, é importante evitar a interpretação incorreta de uma data retornada pela <xref:System.DateTime.Date%2A> a propriedade como uma data e hora.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.Date%2A> propriedade para extrair o componente de data um <xref:System.DateTime> valor com seu componente de tempo definido como zero (ou 0:00:00 ou meia-noite). Ele também ilustra que, dependendo da cadeia de caracteres de formato usada ao exibir o <xref:System.DateTime> valor, o componente de tempo pode continuar a aparecer na saída formatada.  
  
 [!code-cpp[System.DateTime.Date#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Date/cpp/date1.cpp#1)]
 [!code-csharp[System.DateTime.Date#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Date/cs/Date1.cs#1)]
 [!code-vb[System.DateTime.Date#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Date/vb/Date1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Day : int" Usage="System.DateTime.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o dia do mês representado por essa instância.</summary>
        <value>O componente do dia, expresso como um valor entre 1 e 31.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.Day%2A> propriedade sempre retorna o dia do mês no calendário gregoriano, mesmo se o atual <xref:System.DateTime> valor tiver sido instanciado usando outro calendário alguns ou se o calendário padrão da cultura do thread atual não é o calendário gregoriano. Para recuperar o dia do mês de uma determinada data usando outro calendário alguns, chame esse calendário <xref:System.Globalization.Calendar.GetDayOfMonth%2A?displayProperty=nameWithType> método. O exemplo a seguir usa o <xref:System.DateTime.Day%2A> propriedade e o <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> método para recuperar o dia do mês de um <xref:System.DateTime> valor que é instanciado usando o calendário islâmico.  
  
 [!code-csharp[System.DateTime.Day#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day1.cs#1)]
 [!code-vb[System.DateTime.Day#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day1.vb#1)]  
  
 Da mesma forma, o exemplo a seguir usa o <xref:System.DateTime.Day%2A> propriedade e o <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> método para recuperar o dia do mês quando a cultura do thread atual é ar-SA, que usa o calendário islâmico como seu calendário padrão.  
  
 [!code-csharp[System.DateTime.Day#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day2.cs#2)]
 [!code-vb[System.DateTime.Day#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day2.vb#2)]  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.Day%2A> propriedade.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfWeek : DayOfWeek" Usage="System.DateTime.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o dia da semana representado por essa instância.</summary>
        <value>Uma constante enumerada que indica o dia da semana desse valor <see cref="T:System.DateTime" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor das constantes na <xref:System.DayOfWeek> varia de enumeração de <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType> para <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>. Se converter em um inteiro, seu valor varia de zero (que indica <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>) a 6 (que indica <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>).  
  
 O <xref:System.DateTime.DayOfWeek%2A> propriedade retorna uma constante enumerada; ele não reflete as configurações regionais e de idioma de um sistema. Para recuperar uma cadeia de caracteres que representa um nome de dia da semana localizado para uma determinada data, chame uma das sobrecargas do <xref:System.DateTime.ToString%2A> método inclui um `format` parâmetro e passá-lo tanto a `ddd` ou `dddd` cadeias de caracteres de formato personalizado. Para obter detalhes, consulte [como: extrair o dia da semana de uma data específica](~/docs/standard/base-types/how-to-extract-the-day-of-the-week-from-a-specific-date.md).  
  
   
  
## Examples  
 O exemplo a seguir demonstra a <xref:System.DateTime.DayOfWeek%2A> propriedade e o <xref:System.DayOfWeek?displayProperty=nameWithType> enumeração.  
  
 [!code-cpp[DateTime.DayOfWeek#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DayOfWeek/CPP/dow.cpp#1)]
 [!code-csharp[DateTime.DayOfWeek#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DayOfWeek/CS/dow.cs#1)]
 [!code-vb[DateTime.DayOfWeek#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DayOfWeek/VB/dow.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfYear : int" Usage="System.DateTime.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o dia do ano representado por essa instância.</summary>
        <value>O dia do ano, expresso como um valor entre 1 e 366.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.DayOfYear%2A> propriedade leva em conta os anos bissextos quando ele calcula o dia do ano. O valor da propriedade sempre reflete o dia do ano no calendário gregoriano, independentemente do calendário atual da cultura do thread atual. Para recuperar o dia do ano em um calendário diferente, chame o <xref:System.Globalization.Calendar.GetDayOfYear%2A?displayProperty=nameWithType> método do calendário.  
  
   
  
## Examples  
 O exemplo a seguir exibe o dia do ano de 31 de dezembro de 2010 2020 anos no calendário gregoriano. Observe que o exemplo mostra que a 31 de dezembro é o 366 º dia do ano em anos bissextos.  
  
 [!code-csharp[System.DateTime.DayOfYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.dayofyear/cs/dayofyear2.cs#1)]
 [!code-vb[System.DateTime.DayOfYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.dayofyear/vb/dayofyear2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="DaysInMonth">
      <MemberSignature Language="C#" Value="public static int DaysInMonth (int year, int month);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DaysInMonth(int32 year, int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DaysInMonth (year As Integer, month As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int DaysInMonth(int year, int month);" />
      <MemberSignature Language="F#" Value="static member DaysInMonth : int * int -&gt; int" Usage="System.DateTime.DaysInMonth (year, month)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">O ano.</param>
        <param name="month">O mês (um número que varia de 1 a 12).</param>
        <summary>Retorna o número de dias no ano e mês especificado.</summary>
        <returns>O número de dias no <paramref name="month" /> para o <paramref name="year" /> especificado.  
  
Por exemplo, se <paramref name="month" /> for igual a 2 para fevereiro, o valor retornado será 28 ou 29 dependendo de <paramref name="year" /> ser um ano bissexto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.DaysInMonth%2A> método sempre interpreta `month` e `year` conforme o mês e ano do calendário gregoriano de calendário, mesmo se o calendário gregoriano não é o calendário atual da cultura atual. Para obter o número de dias em um mês especificado de um calendário específico, chame esse calendário <xref:System.Globalization.Calendar.GetDaysInMonth%2A> método.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como usar o <xref:System.DateTime.DaysInMonth%2A> método para determinar o número de dias em julho de 2001, fevereiro de 1998 (um não-ano bissexto) e fevereiro de 1996 (um ano bissexto).  
  
 [!code-cpp[DateTime.DaysInMonth#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DaysInMonth/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DaysInMonth/CS/class1.cs#1)]
 [!code-vb[DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DaysInMonth/VB/class1.vb#1)]  
  
 O exemplo a seguir exibe o número de dias em cada mês de um ano especificado em uma matriz de inteiros.  
  
 [!code-csharp[System.DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.daysinmonth/cs/daysinmonth3.cs#1)]
 [!code-vb[System.DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.daysinmonth/vb/daysinmonth3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="month" /> é menor que 1 ou maior que 12.  
  
- ou - 
 <paramref name="year" /> é menor que 1 ou maior que 9999.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retorna um valor que indica se dois objetos <see cref="T:System.DateTime" /> ou uma instância <see cref="T:System.DateTime" /> e outro objeto ou <see cref="T:System.DateTime" />, têm o mesmo valor.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTime value);" />
      <MemberSignature Language="F#" Value="override this.Equals : DateTime -&gt; bool" Usage="dateTime.Equals value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">O objeto a ser comparado com essa instância.</param>
        <summary>Retorna um valor que indica se o valor dessa instância é igual ao valor da instância <see cref="T:System.DateTime" /> especificada.</summary>
        <returns>
          <see langword="true" /> se o parâmetro <paramref name="value" /> for igual ao valor dessa instância; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A instância atual e `value` são iguais se suas <xref:System.DateTime.Ticks%2A> valores de propriedade são iguais. Seus <xref:System.DateTime.Kind%2A> valores de propriedade não são considerados no teste de igualdade.  
  
 Esse método implementa o <xref:System.IEquatable%601?displayProperty=nameWithType> da interface e executa um pouco melhor do que o <xref:System.DateTime.Equals%2A> método porque o `value` parâmetro não precisa ser convertido em um objeto.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.Equals%2A> método.  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dateTime.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">O objeto a ser comparado com essa instância.</param>
        <summary>Retorna um valor que indica se essa instância é igual a um objeto especificado.</summary>
        <returns>
          <see langword="true" /> se <paramref name="value" /> é uma instância de <see cref="T:System.DateTime" /> e é igual ao valor dessa instância; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A instância atual e `value` são iguais se suas <xref:System.DateTime.Ticks%2A> valores de propriedade são iguais. Seus <xref:System.DateTime.Kind%2A> valores de propriedade não são considerados no teste de igualdade.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.Equals%2A> método.  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member Equals : DateTime * DateTime -&gt; bool" Usage="System.DateTime.Equals (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">O primeiro objeto a ser comparado.</param>
        <param name="t2">O segundo objeto a ser comparado.</param>
        <summary>Retorna um valor que indica se duas instâncias <see cref="T:System.DateTime" /> tiverem o mesmo valor de data e hora.</summary>
        <returns>
          <see langword="true" /> se os dois valores forem iguais; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `t1` e `t2` são iguais se suas <xref:System.DateTime.Ticks%2A> valores de propriedade são iguais. Seus <xref:System.DateTime.Kind%2A> valores de propriedade não são considerados no teste de igualdade.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.Equals%2A> método.  
  
 [!code-cpp[DateTime.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Equals/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Equals/CS/class1.cs#1)]
 [!code-vb[DateTime.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Equals/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FromBinary">
      <MemberSignature Language="C#" Value="public static DateTime FromBinary (long dateData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromBinary(int64 dateData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromBinary(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromBinary (dateData As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromBinary(long dateData);" />
      <MemberSignature Language="F#" Value="static member FromBinary : int64 -&gt; DateTime" Usage="System.DateTime.FromBinary dateData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateData" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dateData">Um inteiro com sinal de 64 bits que codifica a propriedade de <see cref="P:System.DateTime.Kind" /> em um campo de 2 bits e a propriedade de <see cref="P:System.DateTime.Ticks" /> em um campo de 62 bits.</param>
        <summary>Desserializa um valor binário de 64 bits e recria um objeto de <see cref="T:System.DateTime" /> original serializado.</summary>
        <returns>Um objeto que é equivalente ao objeto de <see cref="T:System.DateTime" />, que foi serializado pelo método <see cref="M:System.DateTime.ToBinary" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.DateTime.ToBinary%2A> método para converter o valor do atual <xref:System.DateTime> objeto para um valor binário. Posteriormente, use o valor binário e o <xref:System.DateTime.FromBinary%2A> método para recriar o original <xref:System.DateTime> objeto.  
  
> [!IMPORTANT]
>  Em alguns casos, o <xref:System.DateTime> valor retornado pela <xref:System.DateTime.FromBinary%2A> método não é idêntico ao original <xref:System.DateTime> valor fornecido para o <xref:System.DateTime.ToBinary%2A> método. Para obter mais informações, consulte a próxima seção, "Ajuste de horário Local".  
  
## <a name="local-time-adjustment"></a>Ajuste de hora local  
 A hora local, que é um Coordinated Universal Time ajustado para o fuso horário local, é representada por um <xref:System.DateTime> estrutura cuja <xref:System.DateTime.Kind%2A> propriedade tem o valor <xref:System.DateTimeKind.Local>. Durante a restauração de um local <xref:System.DateTime> o valor da representação binária que é produzido pelo <xref:System.DateTime.ToBinary%2A> método, o <xref:System.DateTime.FromBinary%2A> método pode ajustar o valor de recriada para que não seja igual ao valor original. Isso pode ocorrer nas seguintes condições:  
  
-   Se um local <xref:System.DateTime> objeto é serializado em um fuso horário pela <xref:System.DateTime.ToBinary%2A> método e, em seguida, desserializado em um fuso horário diferente, o <xref:System.DateTime.FromBinary%2A> método, a hora local representado pelo resultante <xref:System.DateTime> objeto é ajustado automaticamente para o segundo fuso horário.  
  
     Por exemplo, considere um <xref:System.DateTime> objeto que representa a hora local de 15. Um aplicativo que está em execução nos EUA Fuso horário do Pacífico usa o <xref:System.DateTime.ToBinary%2A> método para convertê-lo <xref:System.DateTime> objeto para um valor binário. Outro aplicativo que está em execução nos EUA Fuso horário do Leste dos EUA, em seguida, usa o <xref:System.DateTime.FromBinary%2A> método para converter o valor binário em um novo <xref:System.DateTime> objeto. O valor do novo <xref:System.DateTime> objeto é 6 da tarde, que representa o mesmo ponto no tempo que o original às 3 da tarde valor, mas é ajustado para a hora local no fuso horário do Leste dos EUA.  
  
-   Se a representação binária de um local <xref:System.DateTime> valor representa uma hora inválida no fuso horário local do sistema no qual <xref:System.DateTime.FromBinary%2A> é chamado, o horário é ajustado para que ele seja válido.  
  
     Por exemplo, a transição do horário padrão para o horário de verão ocorre no fuso horário do Pacífico dos Estados Unidos em 14 de março de 2010, às 2 da manhã, quando a hora avança uma hora, para 03h00. Este intervalo de hora é uma hora inválida, ou seja, um intervalo de hora que não existe nesse fuso horário. O exemplo a seguir mostra que, quando um horário que está dentro desse intervalo é convertido como um valor binário, o <xref:System.DateTime.ToBinary%2A> método e, em seguida, é restaurado pelo <xref:System.DateTime.FromBinary%2A> método, o valor original é ajustado para se tornar uma hora válida. É possível determinar se um valor de data e hora específico podem estar sujeito à modificação passando-o para o método <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType>, como o exemplo ilustra.  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>Considerações da versão  
 Começando com o .NET Framework versão 2.0, um <xref:System.DateTime> estrutura consiste em um campo de tipo particular, que indica se o tempo especificado hora local, Tempo Universal Coordenado (UTC) ou nenhum dos dois, concatenado para um campo particular de tiques, que contém o número de tiques de 100 nanossegundos que especifique uma data e hora. O número de tiques que pode ser acessado com o <xref:System.DateTime.Ticks%2A> campo de propriedade e theKind pode ser acessado com o <xref:System.DateTime.Kind%2A> propriedade.  
  
 Antes do .NET Framework 2.0, se você serializado uma <xref:System.DateTime> objeto manualmente, em vez de usar uma interface de serialização, como <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>, necessárias para serializar apenas os dados de tiques no <xref:System.DateTime>. Começando com o .NET Framework 2.0, você também deve serializar os dados de tipo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateData" /> é menor que <see cref="F:System.DateTime.MinValue" /> ou maior que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.ToBinary" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTime(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTime : int64 -&gt; DateTime" Usage="System.DateTime.FromFileTime fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">Uma hora de arquivo Windows expressada em tiques.</param>
        <summary>Converte a hora de arquivo do Windows especificada em uma hora local equivalente.</summary>
        <returns>Um objeto que representa a hora local equivalente da hora e hora representadas pelo parâmetro <paramref name="fileTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma hora de arquivo do Windows é um valor de 64 bits que representa o número de intervalos de 100 nanossegundos desde a meia-noite de 12h00, 1º de janeiro de 1601 A.D. (C.E.) Tempo Universal Coordenado (UTC). O Windows usa uma hora de arquivo a ser registrada quando um aplicativo cria, acessa ou grava em um arquivo.  
  
 O `fileTime` parâmetro especifica uma hora de arquivo expressada em tiques de 100 nanossegundos.  
  
 Começando com o .NET Framework versão 2.0, o valor retornado é um <xref:System.DateTime> cujos <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.FromFileTime%2A> método.  
  
 [!code-cpp[DateTime.FromFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.FromFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.FromFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.FromFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="fileTime" /> é menor que 0 ou representa uma hora maior que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <block subset="none" type="usage">
          <para>Normalmente, o <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> método restaurações uma <see cref="T:System.DateTime" /> valor que foi salva pelo <see cref="M:System.DateTime.ToFileTime" /> método. No entanto, os dois valores podem ser diferentes sob as seguintes condições: 
-Se a serialização e desserialização do <see cref="T:System.DateTime" /> valor ocorrem em fusos horários diferentes. Por exemplo, se um <see cref="T:System.DateTime" /> valor com um tempo de 12:30 horas. nos Estados Unidos Fuso horário do Leste dos EUA é serializado e desserializado, em seguida, nos EUA Fuso horário do Pacífico, o valor original de 12:30 horas. é ajustado para 9h30 para refletir a diferença entre os dois fusos horários.  
  
-Se a <see cref="T:System.DateTime" /> valor que é serializado representa uma hora inválida no fuso horário local. Nesse caso, o <see cref="M:System.DateTime.ToFileTime" /> método ajusta restaurado <see cref="T:System.DateTime" /> valor para que ele represente uma hora válida no fuso horário local.  
  
Por exemplo, a transição da hora padrão para o horário de verão ocorre no fuso horário do Pacífico dos EUA em 14 de março de 2010, às 02h00, quando a hora avança uma hora, para 03h00. Este intervalo de hora é uma hora inválida, ou seja, um intervalo de hora que não existe nesse fuso horário. O exemplo a seguir mostra que, quando um horário que está dentro desse intervalo é convertido em um valor inteiro longo, o <see cref="M:System.DateTime.ToFileTime" /> método e, em seguida, é restaurado pelo <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> método, o valor original é ajustado para se tornar uma hora válida. É possível determinar se um valor de data e hora específico podem estar sujeito à modificação passando-o para o método <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />, como o exemplo ilustra.  
  
[! código csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)] [! código vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTimeUtc (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTimeUtc(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTimeUtc(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTimeUtc (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTimeUtc(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTimeUtc : int64 -&gt; DateTime" Usage="System.DateTime.FromFileTimeUtc fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">Uma hora de arquivo Windows expressada em tiques.</param>
        <summary>Converte a hora de arquivo Windows especificada em uma hora UTC equivalente.</summary>
        <returns>Um objeto que representa a hora UTC equivalente da data e hora representadas pelo parâmetro <paramref name="fileTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma hora de arquivo do Windows é um valor de 64 bits que representa o número de intervalos de 100 nanossegundos desde a meia-noite de 12h00, 1º de janeiro de 1601 A.D. (C.E.) Tempo Universal Coordenado (UTC). O Windows usa uma hora de arquivo a ser registrada quando um aplicativo cria, acessa ou grava em um arquivo.  
  
 O `fileTime` parâmetro especifica uma hora de arquivo expressada em tiques de 100 nanossegundos.  
  
 Começando com o .NET Framework versão 2.0, o valor retornado é um <xref:System.DateTime> cujos <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Utc>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="fileTime" /> é menor que 0 ou representa uma hora maior que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.DateTime.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FromOADate">
      <MemberSignature Language="C#" Value="public static DateTime FromOADate (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromOADate(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromOADate(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromOADate (d As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromOADate(double d);" />
      <MemberSignature Language="F#" Value="static member FromOADate : double -&gt; DateTime" Usage="System.DateTime.FromOADate d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">Um valor de Data de Automação OLE.</param>
        <summary>Retorna um <see cref="T:System.DateTime" /> equivalente à Data de Automação OLE especificada.</summary>
        <returns>Um objeto que representa a mesma data e hora que <paramref name="d" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `d` parâmetro é um número de ponto flutuante de precisão dupla que representa uma data como o número de dias antes ou após a data base, meia-noite, 30 de dezembro de 1899. A parte integral e de logon do `d` codificar a data como um deslocamento de dia de positivo ou negativo de 30 de dezembro de 1899 e o valor absoluto da parte fracionária de `d` codifica a hora do dia como uma fração de um deslocamento de dia de meia-noite. `d` deve ser um valor entre 657435.0 negativo por meio de 2958465.99999999 positivo.  
  
 Observe que, por causa da maneira que as datas são codificadas, há duas maneiras de representar qualquer hora do dia 30 de dezembro de 1899. Por exemplo, -0,5 e 0,5 significa que o meio-dia 30 de dezembro de 1899 porque um deslocamento de dia de mais ou menos zero dias a partir da data base ainda é a data-base e um deslocamento de meio dia de meia-noite é o meio-dia.  
  
 Consulte <xref:System.DateTime.ToOADate%2A> para obter mais informações sobre a automação OLE.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">A data não é um valor válido de Data de Automação OLE.</exception>
        <altmember cref="M:System.DateTime.ToOADate" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDateTimeFormats">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converte o valor dessa instância em todas as representações de cadeia de caracteres com suporte nos especificadores de formato de data e hora padrão.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Você não deve presumir que várias chamadas para o <xref:System.DateTime.GetDateTimeFormats%2A> sobrecargas retornará dados idênticos. Dependendo da sobrecarga específica, os dados retornados por esse método podem alterar se as alterações de cultura atual, o usuário substitui as configurações culturais individuais ou se ocorrer uma atualização para os dados do sistema culturais.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora padrão</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats();" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : unit -&gt; string[]" Usage="dateTime.GetDateTimeFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte o valor dessa instância em todas as representações de cadeia de caracteres com suporte nos especificadores de formato de data e hora padrão.</summary>
        <returns>Uma matriz de cadeia de caracteres em que cada elemento é a representação do valor dessa instância formatada com um dos especificadores de formato de data e hora padrão.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A matriz de cadeia de caracteres retornada pela <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType> método é equivalente ao combinar as matrizes de cadeia de caracteres retornadas por chamadas separadas para o <xref:System.DateTime.GetDateTimeFormats%28System.Char%29?displayProperty=nameWithType> método com o "d", "D", "f", "F", "g", "G", "m", "o", "r", "s", "t", "T", "u", "U" e cadeias de caracteres de formato padrão "y". Para obter mais informações sobre especificadores de formato padrão, consulte [padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Cada elemento do valor retornado é formatado usando as informações de cultura atual. Para obter mais informações sobre informações de formatação específicas da cultura para a cultura atual, consulte <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
> [!IMPORTANT]
>  Como esse método usa dados sensíveis à cultura, você não deve presumir que várias chamadas para o método retornará dados idênticos. Os dados retornados por esse método podem alterar se as alterações de cultura atual, o usuário substitui as configurações culturais individuais ou se ocorrer uma atualização para os dados do sistema culturais.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType> método. Ele exibe a representação de cadeia de caracteres de uma data usando todos os possíveis padrão formatos de data e hora na cultura atual do computador, que nesse caso é en-US.  
  
 [!code-cpp[DateTime.GetDateTimeFormats#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.GetDateTimeFormats#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#1)]
 [!code-vb[DateTime.GetDateTimeFormats#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#1)]  
  
 O exemplo exibe a saída a seguir:  
  
```  
7/28/2009  
7/28/09  
07/28/09  
07/28/2009  
09/07/28  
2009-07-28  
28-Jul-09  
Tuesday, July 28, 2009  
July 28, 2009  
Tuesday, 28 July, 2009  
28 July, 2009  
Tuesday, July 28, 2009 5:23 AM  
Tuesday, July 28, 2009 05:23 AM  
Tuesday, July 28, 2009 5:23  
Tuesday, July 28, 2009 05:23  
July 28, 2009 5:23 AM  
July 28, 2009 05:23 AM  
July 28, 2009 5:23  
July 28, 2009 05:23  
Tuesday, 28 July, 2009 5:23 AM  
Tuesday, 28 July, 2009 05:23 AM  
Tuesday, 28 July, 2009 5:23  
Tuesday, 28 July, 2009 05:23  
28 July, 2009 5:23 AM  
28 July, 2009 05:23 AM  
28 July, 2009 5:23  
28 July, 2009 05:23  
Tuesday, July 28, 2009 5:23:15 AM  
Tuesday, July 28, 2009 05:23:15 AM  
Tuesday, July 28, 2009 5:23:15  
Tuesday, July 28, 2009 05:23:15  
July 28, 2009 5:23:15 AM  
July 28, 2009 05:23:15 AM  
July 28, 2009 5:23:15  
July 28, 2009 05:23:15  
Tuesday, 28 July, 2009 5:23:15 AM  
Tuesday, 28 July, 2009 05:23:15 AM  
Tuesday, 28 July, 2009 5:23:15  
Tuesday, 28 July, 2009 05:23:15  
28 July, 2009 5:23:15 AM  
28 July, 2009 05:23:15 AM  
28 July, 2009 5:23:15  
28 July, 2009 05:23:15  
7/28/2009 5:23 AM  
7/28/2009 05:23 AM  
7/28/2009 5:23  
7/28/2009 05:23  
7/28/09 5:23 AM  
7/28/09 05:23 AM  
7/28/09 5:23  
7/28/09 05:23  
07/28/09 5:23 AM  
07/28/09 05:23 AM  
07/28/09 5:23  
07/28/09 05:23  
07/28/2009 5:23 AM  
07/28/2009 05:23 AM  
07/28/2009 5:23  
07/28/2009 05:23  
09/07/28 5:23 AM  
09/07/28 05:23 AM  
09/07/28 5:23  
09/07/28 05:23  
2009-07-28 5:23 AM  
2009-07-28 05:23 AM  
2009-07-28 5:23  
2009-07-28 05:23  
28-Jul-09 5:23 AM  
28-Jul-09 05:23 AM  
28-Jul-09 5:23  
28-Jul-09 05:23  
7/28/2009 5:23:15 AM  
7/28/2009 05:23:15 AM  
7/28/2009 5:23:15  
7/28/2009 05:23:15  
7/28/09 5:23:15 AM  
7/28/09 05:23:15 AM  
7/28/09 5:23:15  
7/28/09 05:23:15  
07/28/09 5:23:15 AM  
07/28/09 05:23:15 AM  
07/28/09 5:23:15  
07/28/09 05:23:15  
07/28/2009 5:23:15 AM  
07/28/2009 05:23:15 AM  
07/28/2009 5:23:15  
07/28/2009 05:23:15  
09/07/28 5:23:15 AM  
09/07/28 05:23:15 AM  
09/07/28 5:23:15  
09/07/28 05:23:15  
2009-07-28 5:23:15 AM  
2009-07-28 05:23:15 AM  
2009-07-28 5:23:15  
2009-07-28 05:23:15  
28-Jul-09 5:23:15 AM  
28-Jul-09 05:23:15 AM  
28-Jul-09 5:23:15  
28-Jul-09 05:23:15  
July 28  
July 28  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
5:23 AM  
05:23 AM  
5:23  
05:23  
5:23:15 AM  
05:23:15 AM  
5:23:15  
05:23:15  
2009-07-28 05:23:15Z  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15  
Tuesday, July 28, 2009 12:23:15  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15  
July 28, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15  
28 July, 2009 12:23:15  
July, 2009  
July, 2009  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora padrão</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : char -&gt; string[]" Usage="dateTime.GetDateTimeFormats format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="format">Um cadeia de formato de data e hora padrão.</param>
        <summary>Converte o valor dessa instância em todas as representações de cadeia de caracteres com suporte no especificador de formato de data e hora padrão especificado.</summary>
        <returns>Uma matriz de cadeia de caracteres em que cada elemento é a representação do valor dessa instância formatada com o especificador de formato de data e hora padrão <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `format` parâmetro pode ser qualquer um dos especificadores de formato de hora e data padrão. Isso inclui 1!d, D, f, F, g, G, M (ou m) O (ou o), R (ou r), s, t, T, u, U e Y (ou y). Para obter mais informações, consulte [padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Cada elemento do valor retornado é formatado usando as informações de cultura atual. Para obter mais informações sobre informações de formatação específicas da cultura para a cultura atual, consulte <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
> [!IMPORTANT]
>  Como esse método usa dados sensíveis à cultura, você não deve presumir que várias chamadas para o método retornará dados idênticos. Os dados retornados por esse método podem alterar se as alterações de cultura atual, o usuário substitui as configurações culturais individuais ou se ocorrer uma atualização para os dados do sistema culturais.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.GetDateTimeFormats%28System.Char%29> método. Ele exibe a representação de cadeia de caracteres de uma data usando o especificador de formato de data por extenso ("D") para a cultura atual.  
  
 [!code-csharp[DateTime.GetDateTimeFormats#3](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#3)]
 [!code-vb[DateTime.GetDateTimeFormats#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> não é um caractere especificador de formato de data e hora padrão válido.</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora padrão</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : IFormatProvider -&gt; string[]" Usage="dateTime.GetDateTimeFormats provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Um objeto que fornece informações de formatação específicas de cultura sobre essa instância.</param>
        <summary>Converte o valor dessa instância para todas as representações de cadeia de caracteres com suporte pelos especificadores de formato de data e hora padrão e as informações de formatação específicas da cultura especificadas.</summary>
        <returns>Uma matriz de cadeia de caracteres em que cada elemento é a representação do valor dessa instância formatada com um dos especificadores de formato de data e hora padrão.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A matriz de cadeia de caracteres retornada pela <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType> método é equivalente ao combinar as matrizes de cadeia de caracteres retornadas por chamadas separadas para o <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método com o "d", "D", "f", "F", "g", "G", "m", "o", "r", "s", "t", "T", "u", "U" e cadeias de caracteres de formato padrão "y". Para obter mais informações sobre especificadores de formato padrão, consulte [padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Cada elemento do valor retornado é formatado usando informações específicas de cultura fornecidas pelo `provider`.  
  
> [!IMPORTANT]
>  Como esse método usa dados sensíveis à cultura, você não deve presumir que várias chamadas para o método retornará dados idênticos, a menos que `provider` é um <xref:System.Globalization.CultureInfo> objeto que representa a cultura invariável. Os dados retornados por esse método podem alterar se o usuário substitui as configurações culturais individuais dos `provider` ou se ocorrer uma atualização para os dados do sistema culturais para `provider`.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType> método. Ele exibe a representação de cadeia de caracteres de uma data usando todos os possíveis padrão formatos de data e hora para a cultura fr-FR.  
  
 [!code-cpp[DateTime.GetDateTimeFormats#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#2)]
 [!code-csharp[DateTime.GetDateTimeFormats#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#2)]
 [!code-vb[DateTime.GetDateTimeFormats#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#2)]  
  
 O exemplo exibe a saída a seguir:  
  
```  
28/07/2009  
28/07/09  
28.07.09  
28-07-09  
2009-07-28  
mardi 28 juillet 2009  
28 juil. 09  
28 juillet 2009  
mardi 28 juillet 2009 05:23  
mardi 28 juillet 2009 5:23  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23  
28 juil. 09 5:23  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23  
28 juillet 2009 5:23  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
mardi 28 juillet 2009 05:23:15  
mardi 28 juillet 2009 5:23:15  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23:15  
28 juil. 09 5:23:15  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23:15  
28 juillet 2009 5:23:15  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
28/07/2009 05:23  
28/07/2009 5:23  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23  
28/07/09 5:23  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23  
28.07.09 5:23  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23  
28-07-09 5:23  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23  
2009-07-28 5:23  
2009-07-28 05.23  
2009-07-28 05 h 23  
28/07/2009 05:23:15  
28/07/2009 5:23:15  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23:15  
28/07/09 5:23:15  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23:15  
28.07.09 5:23:15  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23:15  
28-07-09 5:23:15  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23:15  
2009-07-28 5:23:15  
2009-07-28 05.23  
2009-07-28 05 h 23  
28 juillet  
28 juillet  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
05:23  
5:23  
05.23  
05 h 23  
05:23:15  
5:23:15  
05.23  
05 h 23  
2009-07-28 05:23:15Z  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12.23  
mardi 28 juillet 2009 12 h 23  
28 juil. 09 12:23:15  
28 juil. 09 12:23:15  
28 juil. 09 12.23  
28 juil. 09 12 h 23  
28 juillet 2009 12:23:15  
28 juillet 2009 12:23:15  
28 juillet 2009 12.23  
28 juillet 2009 12 h 23  
juillet 2009  
juillet 2009  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora padrão</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char, provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : char * IFormatProvider -&gt; string[]" Usage="dateTime.GetDateTimeFormats (format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Uma cadeia de formato de data e hora.</param>
        <param name="provider">Um objeto que fornece informações de formatação específicas de cultura sobre essa instância.</param>
        <summary>Converte o valor dessa instância para todas as representações de cadeia de caracteres com suporte pelos especificadores de formato de data e hora e as informações de formatação específicas da cultura especificadas.</summary>
        <returns>Uma matriz de cadeia de caracteres em que cada elemento é a representação do valor dessa instância formatada com um dos especificadores de formato de data e hora padrão.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O parâmetro de formato pode ser qualquer um dos especificadores de formato de hora e data padrão. Isso inclui 1!d, D, f, F, g, G, M (ou m) O (ou o), R (ou r), s, t, T, u, U e Y (ou y). Para obter mais informações, consulte [padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Cada elemento do valor retornado é formatado usando informações específicas de cultura fornecidas pelo `provider`.  
  
> [!IMPORTANT]
>  Como esse método usa dados sensíveis à cultura, você não deve presumir que várias chamadas para o método retornará dados idênticos, a menos que `provider` é um <xref:System.Globalization.CultureInfo> objeto que representa a cultura invariável. Os dados retornados por esse método podem alterar se o usuário substitui as configurações culturais individuais dos `provider` ou se ocorrer uma atualização para os dados do sistema culturais para `provider`.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29> método. Ele exibe as representações de cadeia de caracteres de uma data usando o especificador de formato de data abreviada ("d") para a cultura fr-FR.  
  
 [!code-csharp[DateTime.GetDateTimeFormats#4](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#4)]
 [!code-vb[DateTime.GetDateTimeFormats#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> não é um caractere especificador de formato de data e hora padrão válido.</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora padrão</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dateTime.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna o código hash para essa instância.</summary>
        <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="dateTime.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna o <see cref="T:System.TypeCode" /> para tipo de valor <see cref="T:System.DateTime" />.</summary>
        <returns>A constante enumerada, <see cref="F:System.TypeCode.DateTime" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hour : int" Usage="System.DateTime.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o componente de hora da data representada por essa instância.</summary>
        <value>O componente de hora, expresso como um valor entre 0 e 23.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor da <xref:System.DateTime.Hour%2A> propriedade é sempre expresso usando um relógio de 24 horas. Para recuperar uma cadeia de caracteres que representa a hora de uma data e hora usando um relógio de 12 horas, chame o <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> ou <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método com o especificador de formato personalizado "h". Por exemplo:  
  
 [!code-csharp[System.DateTime.Hour#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Hour/cs/Hour1.cs#1)]
 [!code-vb[System.DateTime.Hour#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Hour/vb/Hour1.vb#1)]  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.Hour%2A> propriedade.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDaylightSavingTime () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime();" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : unit -&gt; bool" Usage="dateTime.IsDaylightSavingTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indica se esta instância do <see cref="T:System.DateTime" /> está dentro do intervalo de horário de verão para o fuso horário atual.</summary>
        <returns>
          <see langword="true" /> se o valor da propriedade <see cref="P:System.DateTime.Kind" /> for <see cref="F:System.DateTimeKind.Local" /> ou <see cref="F:System.DateTimeKind.Unspecified" /> e o valor dessa instância de <see cref="T:System.DateTime" /> estiver dentro do intervalo de horário de verão para o fuso horário local; <see langword="false" /> se <see cref="P:System.DateTime.Kind" /> for <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método determina se o atual <xref:System.DateTime> valor fica dentro do intervalo de horário de verão do fuso horário local, que é retornado pelo <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> propriedade. Você pode determinar se um fuso horário dá suporte a horário de verão, recuperando o valor do seu <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A?displayProperty=nameWithType> propriedade. Para fusos horários que cumprem o horário de verão, você pode determinar quando a transição do horário de verão ocorre, recuperando os <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> matriz retornada por do fuso horário <xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=nameWithType> propriedade.  
  
 Se o atual <xref:System.DateTime> valor representa uma hora inválida ou um ambíguo no fuso horário local, o método retorna `false`.  
  
 Na [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemas, o <xref:System.DateTime.IsDaylightSavingTime%2A> método reconhece somente a regra de ajuste atual ao determinar se a instância atual é um horário de verão. Como resultado, o método pode não relatar com precisão se a instância atual é um horário de verão para períodos antes da regra de ajuste atual entrar em vigor.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsLeapYear">
      <MemberSignature Language="C#" Value="public static bool IsLeapYear (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLeapYear(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsLeapYear(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLeapYear (year As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLeapYear(int year);" />
      <MemberSignature Language="F#" Value="static member IsLeapYear : int -&gt; bool" Usage="System.DateTime.IsLeapYear year" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Um ano de 4 dígitos.</param>
        <summary>Retorna uma indicação se o ano especificado é um ano bissexto.</summary>
        <returns>
          <see langword="true" /> se <paramref name="year" /> for um ano bissexto; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year` é especificado como um número 10 base de 4 dígitos; Por exemplo, 1996.  
  
 `year` é sempre interpretado como um ano no calendário gregoriano. Para determinar se um ano específico foi um ano bissexto em algum outro calendário, chame esse objeto de calendário `IsLeapYear` método.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.IsLeapYear%2A> método para determinar quais anos entre 1994 e 2014 são bissextos. O exemplo também ilustra o resultado quando o <xref:System.DateTime.AddYears%2A> método é usado para adicionar um ano para um dia bissexto.  
  
 [!code-csharp[System.DateTime.IsLeapYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/cs/IsLeapYear1.cs#1)]
 [!code-vb[System.DateTime.IsLeapYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/vb/IsLeapYear1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> é menor que 1 ou maior que 9999.</exception>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public DateTimeKind Kind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeKind Kind" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Kind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Kind As DateTimeKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTimeKind Kind { DateTimeKind get(); };" />
      <MemberSignature Language="F#" Value="member this.Kind : DateTimeKind" Usage="System.DateTime.Kind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se a hora representada por essa instância é baseada na hora local, no UTC (Tempo Universal Coordenado) ou em nenhum dos dois.</summary>
        <value>Um dos valores de enumeração que indica o que a hora atual representa. O padrão é <see cref="F:System.DateTimeKind.Unspecified" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode definir explicitamente o <xref:System.DateTime.Kind%2A> propriedade de uma nova <xref:System.DateTime> valor para um determinado <xref:System.DateTimeKind> valor chamando o <xref:System.DateTime.SpecifyKind%2A> método.  
  
 O <xref:System.DateTime.Kind%2A> propriedade permite que um <xref:System.DateTime> valor para refletir claramente o tempo Universal Coordenado (UTC) ou a hora local. Em contraste, o <xref:System.DateTimeOffset> estrutura sem ambiguidade pode refletir sempre que qualquer fuso horário como um único ponto no tempo.  
  
   
  
## Examples  
 O exemplo a seguir usa o método <xref:System.DateTime.SpecifyKind%2A> para demonstrar como a propriedade <xref:System.DateTime.Kind%2A> influencia os métodos de conversão <xref:System.DateTime.ToLocalTime%2A> e <xref:System.DateTime.ToUniversalTime%2A>.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : DateTime" Usage="System.DateTime.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa o maior valor possível de <see cref="T:System.DateTime" />. Este campo é somente leitura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor dessa constante é equivalente a 23:59:59.9999999 UTC, 31 de dezembro de 9999 no calendário gregoriano, exatamente uma escala de 100 nanossegundos antes do UTC 00:00:00, 1 de janeiro de 10000.  
  
 Alguns calendários, como o <xref:System.Globalization.ThaiBuddhistCalendar>, dão suporte a um intervalo de datas superior anterior <xref:System.DateTime.MaxValue>. Nesses casos, tentando acessar <xref:System.DateTime.MaxValue> em atribuições de variáveis ou formatação e análise de operações pode lançar um <xref:System.ArgumentOutOfRangeException>. Em vez de recuperar o valor de <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, você pode recuperar o valor do valor de data válido mais recente da cultura especificada do <xref:System.Globalization.Calendar.MaxSupportedDateTime?displayProperty=nameWithType> propriedade.  
  
   
  
## Examples  
 O exemplo a seguir instancia um <xref:System.DateTime> objeto, passando a seu construtor um <xref:System.Int64> valor que representa um número de tiques. Antes de invocar o construtor, o exemplo garante que esse valor é maior que ou igual a `DateTime.MinValue.Ticks` e menor ou igual a `DateTime.MaxValue.Ticks`. Se não, ele gerará um <xref:System.ArgumentOutOfRangeException>.  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.DateTime.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Millisecond : int" Usage="System.DateTime.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o componente de milissegundos da data representada por essa instância.</summary>
        <value>O componente de milissegundos, expresso como um valor entre 0 e 999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode exibir a representação de cadeia de caracteres da <xref:System.DateTime.Millisecond%2A> propriedade usando o especificador de formato "fff". Por exemplo, o código a seguir exibe uma cadeia de caracteres que contém o número de milissegundos em uma data e hora para o console.  
  
 [!code-csharp[System.DateTime.Millisecond#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#1)]
 [!code-vb[System.DateTime.Millisecond#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#1)]  
  
 Você também pode exibir o componente de milissegundo junto com os outros componentes de um valor de data e hora usando o especificador de formato padrão "o". Por exemplo:  
  
 [!code-csharp[System.DateTime.Millisecond#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#2)]
 [!code-vb[System.DateTime.Millisecond#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#2)]  
  
 No entanto, o especificador de formato "o" destina-se menos para a exibição que para o ciclo completo ou armazenando um <xref:System.DateTime> valor. Você também pode exibir os milissegundos em conjunto com outros componentes de data e hora usando uma cadeia de caracteres de formato personalizado, como mostra o exemplo a seguir.  
  
 [!code-csharp[System.DateTime.Millisecond#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#3)]
 [!code-vb[System.DateTime.Millisecond#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#3)]  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.Millisecond%2A> propriedade.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minute : int" Usage="System.DateTime.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o componente de minuto da data representada por essa instância.</summary>
        <value>O componente de minuto, expresso como um valor entre 0 e 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.Minute%2A> propriedade.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : DateTime" Usage="System.DateTime.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa o menor valor possível de <see cref="T:System.DateTime" />. Este campo é somente leitura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor dessa constante é equivalente a 00:00:00.0000000 UTC, 1 de janeiro de 0001 no calendário gregoriano.  
  
 <xref:System.DateTime.MinValue> Define a data e hora que é atribuída a uma não inicializado <xref:System.DateTime> variável. O exemplo a seguir ilustra essa situação.  
  
 [!code-csharp[System.DateTime.MinValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#1)]
 [!code-vb[System.DateTime.MinValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#1)]  
  
 O <xref:System.DateTime.MinValue> e <xref:System.DateTime.MaxValue> propriedades podem ser usadas para garantir que um valor se encontra dentro do intervalo com suporte antes de passá-lo para um <xref:System.DateTime> construtor. O código na seção exemplo ilustra esse uso.  
  
   
  
## Examples  
 O exemplo a seguir instancia um <xref:System.DateTime> objeto, passando a seu construtor um <xref:System.Int64> valor que representa um número de tiques. Antes de invocar o construtor, o exemplo garante que esse valor é maior que ou igual a `DateTime.MinValue.Ticks` e menor ou igual a `DateTime.MaxValue.Ticks`. Se não, ele gerará um <xref:System.ArgumentOutOfRangeException>.  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Month : int" Usage="System.DateTime.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o componente de mês da data representada por essa instância.</summary>
        <value>O componente de mês, expresso como um valor entre 1 e 12.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.Month%2A> propriedade.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTime" Usage="System.DateTime.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um objeto <see cref="T:System.DateTime" /> definido como a data e hora atuais neste computador, expressas como a hora local.</summary>
        <value>Um objeto cujo valor é a data e hora locais atuais.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.Now%2A> propriedade retorna um <xref:System.DateTime> valor que representa a data e hora atuais no computador local. Observe que há uma diferença entre um <xref:System.DateTime> valor, que representa o número de tiques que se passaram desde a meia-noite de 1º de janeiro, 0001, e a representação de cadeia de caracteres do que <xref:System.DateTime> valor, que expressa um valor de data e hora em um formato específicas de cultura específica. Para obter informações sobre formatação de valores de data e hora, consulte o <xref:System.DateTime.ToString%2A> método. O exemplo a seguir exibe a cadeia de caracteres de hora e data abreviada em vários formatos específicos de cultura.  
  
 [!code-cpp[System.DateTime.Now#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now1.cpp#2)]
 [!code-csharp[System.DateTime.Now#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now1.cs#2)]
 [!code-vb[System.DateTime.Now#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now1.vb#2)]  
  
 A resolução dessa propriedade depende do timer do sistema, que depende do sistema operacional subjacente. Ela costuma ser entre 0,5 e 15 milissegundos. Como resultado, chamadas repetidas para o <xref:System.DateTime.Now%2A> propriedade em um intervalo de hora abreviada, como em um loop, pode retornar o mesmo valor.  
  
 O <xref:System.DateTime.Now%2A> propriedade frequentemente é usada para medir o desempenho. No entanto, devido a sua baixa resolução, não é adequado para uso como uma ferramenta de benchmark. Uma alternativa melhor é usar o <xref:System.Diagnostics.Stopwatch> classe.  
  
 Começando com o .NET Framework versão 2.0, o valor retornado é um <xref:System.DateTime> cujos <xref:System.DateTime.Kind%2A> propriedade retorna <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Você também pode usar o <xref:System.DateTimeOffset.Now%2A?displayProperty=nameWithType> propriedade para recuperar o local data e hora atuais. Ele permite que uma hora local ser inequivocamente expresso como um único ponto no tempo, o que por sua vez faz com que esse valor de tempo portátil entre computadores.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.Now%2A> e <xref:System.DateTime.UtcNow%2A> propriedades para recuperar a data e hora local atual e o atual universal coordenada data e hora (UTC). Ele usa as convenções de formatação de um número de culturas para exibir as cadeias de caracteres, juntamente com os valores da seus <xref:System.DateTime.Kind%2A> propriedades.  
  
 [!code-cpp[System.DateTime.Now#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now2.cpp#3)]
 [!code-csharp[System.DateTime.Now#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now2.cs#3)]
 [!code-vb[System.DateTime.Now#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now2.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
        <altmember cref="P:System.DateTime.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTime operator + (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Addition(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator +(DateTime d, TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTime * TimeSpan -&gt; DateTime" Usage="d + t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">O valor de data e hora a ser adicionado.</param>
        <param name="t">O intervalo de tempo a ser adicionado.</param>
        <summary>Subtrai um dado intervalo de tempo de uma data e hora especificada e retorna uma nova data e hora.</summary>
        <returns>Um objeto que é a soma dos valores de <paramref name="d" /> e <paramref name="t" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[É o método equivalente para esse operador <xref:System.DateTime.Add%28System.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 O exemplo a seguir demonstra o operador de adição.  
  
 [!code-cpp[DateTime Operators#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#1)]
 [!code-csharp[DateTime Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#1)]
 [!code-vb[DateTime Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O <see cref="T:System.DateTime" /> resultante é menor que <see cref="F:System.DateTime.MinValue" /> ou maior que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Executando operações aritméticas com datas e horas</related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : DateTime * DateTime -&gt; bool" Usage="d1 = d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">O primeiro objeto a ser comparado.</param>
        <param name="d2">O segundo objeto a ser comparado.</param>
        <summary>Determina se duas instâncias especificadas do <see cref="T:System.DateTime" /> são iguais.</summary>
        <returns>
          <see langword="true" /> se <paramref name="d1" /> e <paramref name="d2" /> representam a mesma data e hora; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.op_Equality%2A> operador determina se dois <xref:System.DateTime> valores são iguais comparando seu número de tiques. Antes de comparar objetos <xref:System.DateTime>, verifique se os objetos representam horas no mesmo fuso horário. É possível fazer isso comparando-se os valores da propriedade <xref:System.DateTime.Kind%2A>.  
  
 É o método equivalente para esse operador <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>  
  
## Examples  
 O exemplo a seguir demonstra o operador de igualdade.  
  
 [!code-cpp[DateTime Operators#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#2)]
 [!code-csharp[DateTime Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#2)]
 [!code-vb[DateTime Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : DateTime * DateTime -&gt; bool" Usage="t1 &gt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">O primeiro objeto a ser comparado.</param>
        <param name="t2">O segundo objeto a ser comparado.</param>
        <summary>Determina se um <see cref="T:System.DateTime" /> especificado é posterior ao outro <see cref="T:System.DateTime" /> especificado.</summary>
        <returns>
          <see langword="true" /> se <paramref name="t1" /> for posterior ao <paramref name="t2" />; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.op_GreaterThan%2A> operador determina a relação entre duas <xref:System.DateTime> valores comparando seu número de tiques. Antes de comparar objetos <xref:System.DateTime>, verifique se os objetos representam horas no mesmo fuso horário. É possível fazer isso comparando-se os valores da propriedade <xref:System.DateTime.Kind%2A>.  
  
 É o método equivalente para esse operador <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : DateTime * DateTime -&gt; bool" Usage="t1 &gt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">O primeiro objeto a ser comparado.</param>
        <param name="t2">O segundo objeto a ser comparado.</param>
        <summary>Determina se um <see cref="T:System.DateTime" /> especificado representa uma data e hora que seja igual ou posterior à outra <see cref="T:System.DateTime" /> especificada.</summary>
        <returns>
          <see langword="true" /> se <paramref name="t1" /> é igual ou posterior a <paramref name="t2" />; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.op_GreaterThanOrEqual%2A> operador determina a relação entre duas <xref:System.DateTime> valores comparando seu número de tiques. Antes de comparar objetos <xref:System.DateTime>, verifique se os objetos representam horas no mesmo fuso horário. É possível fazer isso comparando-se os valores da propriedade <xref:System.DateTime.Kind%2A>.  
  
 É o método equivalente para esse operador <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : DateTime * DateTime -&gt; bool" Usage="System.DateTime.op_Inequality (d1, d2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">O primeiro objeto a ser comparado.</param>
        <param name="d2">O segundo objeto a ser comparado.</param>
        <summary>Determina se duas instâncias especificadas de <see cref="T:System.DateTime" /> não são iguais.</summary>
        <returns>
          <see langword="true" /> se <paramref name="d1" /> e <paramref name="d2" /> não representarem a mesma data e hora; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.op_Inequality%2A> operador determina se dois <xref:System.DateTime> valores não forem iguais, comparando o número de tiques. Antes de comparar objetos <xref:System.DateTime>, verifique se os objetos representam horas no mesmo fuso horário. É possível fazer isso comparando-se os valores da propriedade <xref:System.DateTime.Kind%2A>.  
  
 É o método equivalente para esse operador <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : DateTime * DateTime -&gt; bool" Usage="t1 &lt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">O primeiro objeto a ser comparado.</param>
        <param name="t2">O segundo objeto a ser comparado.</param>
        <summary>Determina se um <see cref="T:System.DateTime" /> especificado é anterior ao outro <see cref="T:System.DateTime" /> especificado.</summary>
        <returns>
          <see langword="true" /> se <paramref name="t1" /> for anterior a <paramref name="t2" />; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.op_LessThan%2A> operador determina a relação entre duas <xref:System.DateTime> valores comparando seu número de tiques. Antes de comparar objetos <xref:System.DateTime>, verifique se os objetos representam horas no mesmo fuso horário. É possível fazer isso comparando-se os valores da propriedade <xref:System.DateTime.Kind%2A>.  
  
 É o método equivalente para esse operador <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : DateTime * DateTime -&gt; bool" Usage="t1 &lt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">O primeiro objeto a ser comparado.</param>
        <param name="t2">O segundo objeto a ser comparado.</param>
        <summary>Determina se um <see cref="T:System.DateTime" /> especificado representa uma data e hora iguais ou anteriores à outra <see cref="T:System.DateTime" /> especificada.</summary>
        <returns>
          <see langword="true" /> se <paramref name="t1" /> for igual ou anterior a <paramref name="t2" />; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.op_LessThanOrEqual%2A> operador determina a relação entre duas <xref:System.DateTime> valores comparando seu número de tiques. Antes de comparar objetos <xref:System.DateTime>, verifique se os objetos representam horas no mesmo fuso horário. É possível fazer isso comparando-se os valores da propriedade <xref:System.DateTime.Kind%2A>.  
  
 É o método equivalente para esse operador <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Subtrai uma <see cref="T:System.DateTime" /> ou <see cref="T:System.TimeSpan" /> especificada de uma <see cref="T:System.DateTime" /> especificada.</summary>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d1 As DateTime, d2 As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTime * DateTime -&gt; TimeSpan" Usage="d1 - d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">O valor de data e hora do qual subtrair (o minuendo).</param>
        <param name="d2">O valor de data e hora a ser subtraído (o subtraendo).</param>
        <summary>Subtrai uma data e hora especificada de outra data e hora especificada e retorna um intervalo de tempo.</summary>
        <returns>O intervalo de tempo entre <paramref name="d1" /> e <paramref name="d2" />; ou seja, <paramref name="d1" /> menos <paramref name="d2" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.op_Subtraction%28System.DateTime%2CSystem.DateTime%29> método não considera o valor da <xref:System.DateTime.Kind%2A> propriedade dos dois <xref:System.DateTime> ao executar a subtração de valores. Antes de subtração <xref:System.DateTime> objetos, certifique-se de que os objetos representam horas no mesmo fuso horário. Caso contrário, o resultado incluirá a diferença entre fusos horários.  
  
> [!NOTE]
>  O <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> método considerar a diferença entre fusos horários ao executar a subtração.  
  
 É o método equivalente para esse operador <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 O exemplo a seguir demonstra o método <xref:System.DateTime.Subtract%2A> e o operador de subtração.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Executando operações aritméticas com datas e horas</related>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTime operator - (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Subtraction(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator -(DateTime d, TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTime * TimeSpan -&gt; DateTime" Usage="d - t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">O valor de data e hora para subtração.</param>
        <param name="t">O intervalo de tempo a ser subtraído.</param>
        <summary>Subtrai um intervalo de tempo especificado de uma data e hora especificada e retorna uma nova data e hora.</summary>
        <returns>Um objeto cujo valor é o valor da subtração de <paramref name="d" /> e <paramref name="t" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método subtrai o valor de tiques de `t` do valor de tiques `d`.  
  
 É o método equivalente para esse operador <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 O exemplo a seguir demonstra o método <xref:System.DateTime.Subtract%2A> e o operador de subtração.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O <see cref="T:System.DateTime" /> resultante é menor que <see cref="F:System.DateTime.MinValue" /> ou maior que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Subtract(System.TimeSpan)" />
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Executando operações aritméticas com datas e horas</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converte a representação da cadeia de caracteres de uma data e hora ao seu equivalente <see cref="T:System.DateTime" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nesta seção:  
  
 [Qual método chamar?](#Tasks)   
 [A cadeia de caracteres para analisar](#StringToParse)   
 [Convenções culturais e análise](#Culture)   
 [Elementos de análise e estilo](#Styles)   
 [O valor de retorno e DateTime. Kind](#kind)
 
<a name="Tasks"></a>   
### <a name="which-method-do-i-call"></a>Qual método devo chamar?  
  
|Para|Call|  
|--------|----------|  
|Analise uma cadeia de caracteres de data e hora usando as convenções da cultura atual.|sobrecarga de <xref:System.DateTime.Parse%28System.String%29>|  
|Analise uma cadeia de caracteres de data e hora usando as convenções de uma cultura específica.|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> sobrecarga (consulte [análise e convenções culturais](#Culture))|  
|Analise uma cadeia de caracteres de data e hora com os elementos de estilo especial (como espaço em branco ou nenhum espaço em branco).|sobrecarga de <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|  
|Analise uma cadeia de caracteres de data e hora que deve estar em um formato específico.|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> ou <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>|
|Analisar uma cadeia de caracteres de data e hora e executar uma conversão em UTC ou hora local.|sobrecarga de <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|  
|Analise uma cadeia de caracteres de data e hora sem tratamento de exceções.|Método <xref:System.DateTime.TryParse%2A?displayProperty=nameWithType>|  
|Restaure (ida e volta) um valor de data e hora criado por uma operação de formatação.|Passar a cadeia de formato padrão "o" ou "r" para o <xref:System.DateTime.ToString%28System.String%29> método e chamar o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> sobrecarga com <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>|  
|Analise uma cadeia de caracteres de data e hora em um formato fixo entre limites de máquina (e possivelmente culturais).|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> ou <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType> método|  
  
<a name="StringToParse"></a>   
### <a name="the-string-to-parse"></a>A cadeia de caracteres a ser analisada  
 O <xref:System.DateTime.Parse%2A> método tenta converter a representação de cadeia de caracteres de um valor de data e hora para seu <xref:System.DateTime> equivalente. Ele tenta analisar a cadeia de caracteres de entrada completamente sem gerar uma <xref:System.FormatException> exceção.  
  
> [!IMPORTANT]
>  Se a operação de análise falhar devido a um formato de cadeia de caracteres não reconhecido, o <xref:System.DateTime.Parse%2A> método lança um <xref:System.FormatException>, enquanto que o <xref:System.DateTime.TryParse%2A> retorno do método `false`. Como a manipulação de exceção pode ser cara, você deve usar <xref:System.DateTime.Parse%2A> quando a operação de análise é esperada para ter êxito, pois a fonte de entrada é confiável. <xref:System.DateTime.TryParse%2A> é preferível quando a análise de falhas têm probabilidade, particularmente porque uma fonte de entrada não é confiável, ou você tem valores padrão razoável para substituir cadeias de caracteres que não são analisados com êxito.   

 A cadeia de caracteres a ser analisado pode assumir qualquer uma das seguintes formas:  
  
-   Uma cadeia de caracteres com uma data e um componente de tempo.  
  
-   Uma cadeia de caracteres com uma data, mas nenhum componente de tempo. Se o componente de tempo estiver ausente, o método pressupõe que a meia-noite. Se o componente de data tem um ano de dois dígitos, ele será convertido em um ano com base nas <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> do calendário atual da cultura atual ou o calendário atual da cultura especificada (se você usar uma sobrecarga não nulo `provider` argumento).  
  
- Uma cadeia de caracteres com um componente de data que inclui somente o mês e ano, mas nenhum componente de dia. O método pressupõe que o primeiro dia do mês.

- Uma cadeia de caracteres com um componente de data que inclui somente o mês e dia, mas nenhum componente de ano. O método pressupõe que o ano atual.

-   Uma cadeia de caracteres com um tempo, mas nenhum componente de data. O método pressupõe que a data atual, a menos que você chame o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> sobrecarga e inclua <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> no `styles` argumento, nesse caso, o método pressupõe que uma data de 1º de janeiro, 0001.  

- Uma cadeia de caracteres com um componente de tempo que inclui apenas a hora e um designador AM/PM, com nenhum componente de data. O método pressupõe que a data atual e uma hora com nenhum minutos e sem segundos. Você pode alterar esse comportamento, chamando o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> sobrecarga e inclua <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> no `styles` argumento, nesse caso, o método pressupõe que uma data de 1º de janeiro, 0001.

-   Uma cadeia de caracteres que inclui informações de fuso horário e está em conformidade com ISO 8601. Nos exemplos a seguir, a primeira cadeia de caracteres designa o tempo Universal Coordenado (UTC), e o segundo designa o tempo em um fuso horário que é de sete horas anteriores ao UTC:  
  
    "2008-11-01T19:35:00.0000000Z"   
    "2008-11-01T19:35:00.0000000-07:00"  
  
-   Uma cadeia de caracteres que inclui o designador de GMT e está em conformidade com o formato de hora RFC 1123; Por exemplo:  
  
     "Sáb, 01 de novembro de 2008 19:35:00 GMT"  
  
-   Uma cadeia de caracteres que inclui a data e hora junto com informações de deslocamento de fuso horário; Por exemplo:  
  
     "03/01/2009 05:42:00 -5:00"  

O exemplo a seguir analisa cadeias de caracteres em cada um desses formatos, usando as convenções de formatação da cultura atual, que nesse caso é a cultura en-US:

[!code-csharp-interactive[Default parsing](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse6.cs)]
[!code-vb[Default parsing](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse6.vb)]  
  
 Se a cadeia de caracteres de entrada representa um dia bissexto em um ano bissexto no calendário usado pelo método de análise (consulte [convenções culturais e análise](#Culture)), o <xref:System.DateTime.Parse%2A> método analisa a cadeia de caracteres com êxito. Se a cadeia de caracteres de entrada representa um dia bissexto em um não-ano bissexto, o método gerará uma <xref:System.FormatException>.  
  
 Porque o <xref:System.DateTime.Parse%2A> método tenta analisar a representação de cadeia de caracteres de uma data e hora, usando as regras de formatação do atual ou uma cultura específica, tentar analisar uma cadeia de caracteres entre culturas diferentes pode falhar. Para analisar uma data específica e o formato de hora entre as localidades diferentes, use uma das sobrecargas do <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> método e fornecer um especificador de formato.  
  
<a name="Culture"></a>   
### <a name="parsing-and-cultural-conventions"></a>Convenções de análise e culturais  
 Todas as sobrecargas do <xref:System.DateTime.Parse%2A> método são sensíveis à cultura, a menos que a cadeia de caracteres a ser analisada (que é representado por `s` na tabela a seguir) está em conformidade com o padrão ISO 8601. A operação de análise usa as informações de formatação em um <xref:System.Globalization.DateTimeFormatInfo> objeto que é derivado da seguinte maneira:  
  
|Se você chamar|E `provider` é|Informações de formatação são derivadas de|  
|-----------------|-----------------------|--------------------------------------------|  
|<xref:System.DateTime.Parse%28System.String%29>|-|A cultura do thread atual (propriedade <xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> )|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> ou <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Um <xref:System.Globalization.DateTimeFormatInfo> objeto|Especificado <xref:System.Globalization.DateTimeFormatInfo> objeto|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> ou <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|`null`|A cultura do thread atual (propriedade <xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> )|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> ou <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Um <xref:System.Globalization.CultureInfo> objeto|A propriedade <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> ou <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Personalizado <xref:System.IFormatProvider> implementação|O método <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>|  
  
 Quando as informações de formatação é derivada de uma <xref:System.Globalization.DateTimeFormatInfo> objeto, o <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> propriedade define o calendário usado na operação de análise.  
  
 Se você analisar uma cadeia de caracteres de data e hora usando um <xref:System.Globalization.DateTimeFormatInfo> objeto com as configurações personalizadas que são diferentes de uma cultura padrão, use o <xref:System.DateTime.ParseExact%2A> método em vez do <xref:System.DateTime.Parse%2A> método para melhorar as chances de uma conversão bem-sucedida. Uma data não padrão e a cadeia de caracteres de hora podem ser complicado e difícil analisar. O <xref:System.DateTime.Parse%2A> método tenta analisar uma cadeia de caracteres com vários padrões de análise implícita, que poderá falhar. Em contraste, o <xref:System.DateTime.ParseExact%2A> método requer que você designe explicitamente um ou mais padrões de análise exata que provavelmente tenha êxito. Para obter mais informações, consulte a seção "DateTimeFormatInfo e dados dinâmicos" o <xref:System.Globalization.DateTimeFormatInfo> tópico.  
  
> [!IMPORTANT]
>  Observe que as convenções de formatação para uma cultura específica são dinâmicas e podem estar sujeitos a alteração. Isso significa que as operações de análise que dependem de convenções de formatação da cultura padrão (atual) ou que especificam um <xref:System.IFormatProvider> objeto que representa uma cultura diferente da cultura invariável pode falhar inesperadamente se qualquer um dos seguintes ocorrer:  
>   
> -   Os dados específicos da cultura foi alterado entre as versões principais ou secundárias do .NET Framework ou como resultado de uma atualização para a versão existente do .NET Framework.  
> -   Os dados específicos da cultura refletem as preferências do usuário, que podem variar de máquina para máquina ou a cada sessão.  
> -   Os dados específicos da cultura representam uma cultura de substituição que substitui as configurações de uma cultura padrão ou uma cultura personalizada.  
>   
>  Para impedir que as dificuldades na análise de dados e a hora em cadeias de caracteres que estão associadas a alterações nos dados culturais, você pode analisar cadeias de caracteres de data e hora usando a cultura invariável, ou você pode chamar o <xref:System.DateTime.ParseExact%2A> ou <xref:System.DateTime.TryParseExact%2A> método e especificar o formato exato da cadeia de caracteres a ser analisada. Se você estiver serializando e desserializando dados de data e hora, você pode usar as convenções de formatação da cultura invariável, ou você pode serializar e desserializar o <xref:System.DateTime> valor em um formato binário.  
>   
>  Para obter mais informações, consulte a seção "dados de cultura dinâmica" a <xref:System.Globalization.CultureInfo> tópico e os "valores de DateTime Persisting" seção o <xref:System.DateTime> tópico.  
  
<a name="Styles"></a>   
### <a name="parsing-and-style-elements"></a>Elementos de análise e estilo  
 Todos os <xref:System.DateTime.Parse%2A> sobrecargas ignoram caracteres de espaço em branco à esquerda, internas ou à direita na cadeia de entrada (que é representado por `s` na tabela a seguir). A data e hora podem ser agrupados com um par de à direita e caracteres de sinal de número ("#", U + 0023) e podem ser seguidas por um ou mais NULL (u+0000) de caracteres.  
  
 Além disso, o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> sobrecarga tem um `styles` parâmetro que consiste em um ou mais membros a <xref:System.Globalization.DateTimeStyles> enumeração. Esse parâmetro define como `s` deve ser interpretado e como a operação de análise deve converter `s` para uma data e hora. A tabela a seguir descreve o efeito de cada <xref:System.Globalization.DateTimeStyles> membro sobre a operação de análise.  
  
|Membro DateTimeStyles|Efeito em conversão|  
|---------------------------|--------------------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analisa `s` e, se necessário, converte-lo para UTC, da seguinte maneira:<br /><br /> -Se `s` inclui um deslocamento de fuso horário, ou se `s` não contém nenhuma informação de fuso horário, mas `styles` inclui o <xref:System.Globalization.DateTimeStyles.AssumeLocal> sinalizador, o método analisa a cadeia de caracteres, chamadas <xref:System.DateTime.ToUniversalTime%2A> converter retornado <xref:System.DateTime> valor UTC e define o <xref:System.DateTime.Kind%2A> propriedade para <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.<br />-Se `s` indica que ele representa o UTC, ou se `s` não contém informações de fuso horário, mas `styles` inclui as <xref:System.Globalization.DateTimeStyles.AssumeUniversal> sinalizador, o método analisa a cadeia de caracteres, não executa nenhuma conversão de fuso horário no retornado <xref:System.DateTime> valor e define o <xref:System.DateTime.Kind%2A> propriedade para <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.<br />-Em todos os outros casos, o sinalizador não tem efeito.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Este valor é ignorado. Espaço em branco interno é sempre permitido nos elementos de data e hora de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Este valor é ignorado. Espaço em branco à esquerda é sempre permitido nos elementos de data e hora de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Este valor é ignorado. Espaço em branco à direita é sempre permitido nos elementos de data e hora de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Especifica que `s` pode conter à esquerda, internos e os espaços em branco à direita. Este é o comportamento padrão. Ele não pode ser substituído por meio do fornecimento mais restritiva <xref:System.Globalization.DateTimeStyles> valor de enumeração como <xref:System.Globalization.DateTimeStyles.None>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Especifica que, se `s` não tem informações de fuso horário, hora local serão assumidas. A menos que o sinalizador <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> esteja presente, a propriedade <xref:System.DateTime.Kind%2A> do valor <xref:System.DateTime> retornado é definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Especifica que, se `s` não tem quaisquer informações de fuso horário UTC serão assumidas. A menos que o sinalizador <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> esteja presente, o método converte o valor <xref:System.DateTime> retornado do UTC na hora local e define a propriedade <xref:System.DateTime.Kind%2A> como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.None>|Embora válido, esse valor é ignorado.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Para cadeias de caracteres que contêm informações de fuso horário, tenta impedir que a conversão de uma cadeia de caracteres de data e hora para um <xref:System.DateTime> valor que representa a hora local com seu <xref:System.DateTime.Kind%2A> propriedade definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Normalmente, uma cadeia de caracteres é criada chamando o <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> método e usando o especificador de formato padrão "u", "r" ou "o".|  

<a name="kind"></a>   
### <a name="the-return-value-and-datetimekind"></a>O valor de retorno e DateTime. Kind

O `DateTime.Parse` sobrecargas retornam uma <xref:System.DateTime> valor cuja <xref:System.DateTime.Kind> propriedade inclui informações de fuso horário. Isso pode indicar que o tempo é:

- Tempo Universal Coordenado (<xref:System.DateTimeKind.Utc?displayProperty=fullName>).
- A hora no fuso horário local (<xref:System.DateTimeKind.Local?displayProperty=fullName>).
- O tempo em um fuso horário desconhecido (xref:System.DateTimeKind.Unspecified?displayProperty=fullName >).
 
 Em geral, o <xref:System.DateTime.Parse%2A> método retorna um <xref:System.DateTime> do objeto cuja <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. No entanto, o <xref:System.DateTime.Parse%2A> método também pode executar a conversão de fuso horário e defina o valor da <xref:System.DateTime.Kind%2A> propriedade diferente, dependendo dos valores da `s` e `styles` parâmetros:  
  
|If|Conversão de fuso horário|Propriedade de tipo|  
|--------|--------------------------|-------------------|  
|`s` contém informações de fuso horário.|A data e hora é convertido para a hora no fuso horário local.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|`s` contém informações de fuso horário, e `styles` inclui o <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> sinalizador.|A data e hora é convertido para o tempo Universal Coordenado (UTC).|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`s` contém o designador de fuso horário Z ou GMT, e `styles` inclui o <xref:System.Globalization.DateTimeStyles.RoundtripKind> sinalizador.|A data e hora são interpretados como UTC.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
  
 O exemplo a seguir converte cadeias de caracteres de data que contêm informações de fuso horário para a hora no fuso horário local:  
  
 [!code-csharp-interactive[System.DateTime.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse2.cs#2)]
 [!code-vb[System.DateTime.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse2.vb#2)]  

  Você também pode preservar o valor de data e hora <xref:System.DateTime.Kind%2A> propriedade durante uma formatação e a operação de análise usando o <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> sinalizador. O exemplo a seguir ilustra como o <xref:System.Globalization.DateTimeStyles.RoundtripKind> sinalizador afeta a operação de análise em <xref:System.DateTime> valores que são convertidos em cadeias de caracteres usando o especificador de formato "o", "r" ou "u".  
  
 [!code-csharp-interactive[System.DateTime.Parse#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse5.cs#5)]
 [!code-vb[System.DateTime.Parse#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse5.vb#5)]  
  
### Examples

Vários exemplos que chamem o `DateTime.Parse` método intercalados em todo o [comentários](#remarks) seção deste artigo e na documentação do indivíduo `DateTime.Parse` sobrecargas.

[!INCLUDE[interactive-note](~/includes/csharp-interactive-with-utc-note.md)]

Você também pode baixar um conjunto completo de `DateTime.Parse` exemplos, que são incluídos em um [projeto .NET Core 2.0 para c#](https://github.com/dotnet/samples/raw/master/snippets/csharp/downloads/api/System/DateTime.Parse.zip) e um [projeto .NET Core 2.0 para o Visual Basic](https://github.com/dotnet/samples/raw/master/snippets/visualbasic/downloads/api/System/DateTime.Parse.zip), da [dotnet / repositório GitHub de exemplos](https://github.com/dotnet/samples).

 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
        <altmember cref="Overload:System.DateTime.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; DateTime" Usage="System.DateTime.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Uma cadeia de caracteres que contém uma data e hora a ser convertida. Confira [a cadeia de caracteres a ser analisada](#StringToParse) para obter mais informações.</param>
        <summary>Converte a representação de cadeia de caracteres de uma data e hora em seu <see cref="T:System.DateTime" /> equivalente usando as convenções da cultura do thread atual.</summary>
        <returns>Um objeto equivalente à data e hora contida no <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Se `s` contém informações de fuso horário, esse método retorna um <xref:System.DateTime> valor cuja <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Local?displayProperty=nameWithType> e converte a data e hora em `s` para a hora local. Caso contrário, ele não executa nenhuma conversão de fuso horário e retorna um <xref:System.DateTime> valor cuja <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.

Essa sobrecarga tenta analisar `s` usando as convenções de formatação da cultura atual. A cultura atual é indicada pelo <xref:System.Globalization.CultureInfo.CurrentCulture> propriedade. Para analisar uma cadeia de caracteres usando as convenções de formatação de uma cultura específica, chame o <xref:System.DateTime.Parse(System.String,System.IFormatProvider)> ou o <xref:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)> sobrecargas.

Essa sobrecarga tenta analisar `s` usando <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> estilo.

## <a name="example"></a>Exemplo

O exemplo a seguir analisa a representação de cadeia de caracteres de vários valores de data e hora por:

- Usando o provedor de formato padrão, que fornece as convenções de formatação da cultura do thread atual do computador usado para produzir a saída de exemplo. A saída deste exemplo reflete as convenções de formatação da cultura en-US.

- Usando o valor de estilo padrão, que é <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWIthType>. 

Ele trata a <xref:System.FormatException> as convenções de formatação da exceção que é lançada quando o método tenta analisar a representação de cadeia de caracteres de data e hora usando alguma outra cultura. Ele também mostra como analisar com êxito um valor de data e hora que não usa as convenções de formatação da cultura do thread atual.  
  
 [!code-csharp-interactive[System.DateTime.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse1.cs#1)]
 [!code-vb[System.DateTime.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse1.vb#1)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> é <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> não contém uma representação da cadeia de caracteres válida de uma data e hora.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analisando cadeias de caracteres de data e hora no .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora padrão</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora personalizado</related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; DateTime" Usage="System.DateTime.Parse (s, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">Uma cadeia de caracteres que contém uma data e hora a ser convertida. Confira [a cadeia de caracteres a ser analisada](#StringToParse) para obter mais informações.</param>
        <param name="provider">Um objeto que fornece informações de formato específicas à cultura sobre <c>s</c>.  Confira [Convenções culturais e análise](#Culture)</param>
        <summary>Converte a representação da cadeia de caracteres de uma data e hora em seu equivalente <see cref="T:System.DateTime" /> usando as informações de formato específicas da cultura.</summary>
        <returns>Um objeto equivalente à data e à hora contidas no <paramref name="s" />, conforme especificado por <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Se `s` contém informações de fuso horário, esse método retorna um <xref:System.DateTime> valor cuja <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Local?displayProperty=nameWithType> e converte a data e hora em `s` para a hora local. Caso contrário, ele não executa nenhuma conversão de fuso horário e retorna um <xref:System.DateTime> valor cuja <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.

Essa sobrecarga tenta analisar `s` usando o <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> estilo.

## <a name="example"></a>Exemplo

O exemplo a seguir analisa uma matriz de cadeias de caracteres de data usando as convenções das culturas de-DE, en-US e fr-FR. Ele demonstra as representações de cadeia de caracteres de uma única data podem ser interpretadas diferentemente em diferentes culturas.  
  
[!code-csharp-interactive[System.DateTime.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse3.cs#3)]
[!code-vb[System.DateTime.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> é <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> não contém uma representação da cadeia de caracteres válida de uma data e hora.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analisando cadeias de caracteres de data e hora no .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora padrão</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora personalizado</related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider = null, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional provider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.Parse (s, provider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider, styles As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.Parse (s, provider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">Uma cadeia de caracteres que contém uma data e hora a ser convertida. Confira [a cadeia de caracteres a ser analisada](#StringToParse) para obter mais informações.</param>
        <param name="provider">Um objeto que fornece informações de formatação específicas à cultura sobre <c>s</c>.  Confira [Convenções culturais e análise](#Culture)</param>
        <param name="styles">Uma combinação bit a bit dos valores de enumeração que indica os elementos de estilo que podem estar presentes em <c>s</c> para que a operação de análise seja bem-sucedida e que define como interpretar a data analisada em relação ao fuso horário atual ou à data atual. Um valor típico a ser especificado é <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Converte a representação de cadeia de caracteres de uma data e hora em seu <see cref="T:System.DateTime" /> equivalente usando as informações de formato e um estilo de formatação específicos da cultura.</summary>
        <returns>Um objeto equivalente à data e hora contida no <paramref name="s" />, conforme especificado por <paramref name="provider" /> e <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Essa sobrecarga de método converte a data e hora em `s` e define o <xref:System.DateTime.Kind%2A> propriedade de retornado <xref:System.DateTime> valor da seguinte maneira:

|If |Conversão de fuso horário|Propriedade de tipo|   
|-----|-----|-----|  
|`s` não contém nenhuma informação de fuso horário.|nenhuma.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|
|`s` contém informações de fuso horário.|A hora no fuso horário local|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|
|`s` contém informações de fuso horário, e ' Estilos inclui o <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> sinalizador.|A coordenada horário universal (UTC)|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|
|`s` contém o designador de fuso horário Z ou GMT, e `styles` inclui o <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>.|nenhuma.|<xref:System.DateTimeKind.Utc>| 

## <a name="example"></a>Exemplo

O exemplo a seguir demonstra a <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> método e exibe o valor da <xref:System.DateTime.Kind%2A> propriedade resultantes <xref:System.DateTime> valores.  
  
[!code-csharp-interactive[System.DateTime.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse4.cs#4)]
[!code-vb[System.DateTime.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> é <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> não contém uma representação da cadeia de caracteres válida de uma data e hora.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> contém uma combinação inválida de valores <see cref="T:System.Globalization.DateTimeStyles" />. Por exemplo, <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> e <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analisando cadeias de caracteres de data e hora no .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora padrão</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora personalizado</related>
        <related type="Article" href="~/docs/standard/base-types/how-to-round-trip-date-and-time-values.md">Como aplicar uma viagem de ida e volta a valores de data e hora</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converte a representação da cadeia de caracteres especificada de uma data e hora no <see cref="T:System.DateTime" /> equivalente. O formato da representação de cadeia de caracteres deverá corresponder exatamente a um formato especificado ou uma exceção será gerada.</summary>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">Uma cadeia de caracteres que contém uma data e hora a ser convertida.</param>
        <param name="format">Um especificador de formato que define o formato obrigatório de <c>s</c>. Para obter mais informações, consulte a seção Comentários.</param>
        <param name="provider">Um objeto que fornece informações de formato específicas à cultura sobre <c>s</c>.</param>
        <summary>Converte a representação de cadeia de caracteres especificada de data e hora em seu equivalente <see cref="T:System.DateTime" /> usando o formato especificado e as informações de formato específicas da cultura. O formato de representação da cadeia de caracteres deve corresponder exatamente ao formato especificado.</summary>
        <returns>Um objeto equivalente à data e hora contida no <paramref name="s" />, conforme especificado por <paramref name="format" /> e <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método analisa a representação de cadeia de caracteres de uma data, que deve estar no formato definido pelo `format` parâmetro. Ele também requer que o \<data > e \<tempo > elementos da representação de cadeia de caracteres de data e hora são exibidos na ordem especificada pela `format`e que `s` não ter nenhum espaço em branco que não seja permitido pelo `format`. Se `format` define uma data com nenhum elemento de hora e a análise operação for bem-sucedida, resultante <xref:System.DateTime> valor tem um tempo de meia-noite (00: 00:00). Se `format` define uma hora com nenhum elemento de data e a análise operação for bem-sucedida, resultante <xref:System.DateTime> valor tem uma data de `DateTime.Now.Date`.  
  
 Se `s` não representar um tempo em um determinado fuso horário e a operação de análise for bem-sucedida, o <xref:System.DateTime.Kind%2A> propriedade de retornado <xref:System.DateTime> valor é <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Se `s` representam a hora em um determinado fuso horário e `format` permite que as informações de fuso horário esteja presente (por exemplo, se `format` é igual a "o", "r" ou especificadores de formato padrão "u", ou se contiver a "z", "zz" ou "zzz" especificadores de formato personalizado), o <xref:System.DateTime.Kind%2A> propriedade retornada <xref:System.DateTime> valor é <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
 O parâmetro `format` é uma cadeia de caracteres que contém um único especificador de formato padrão ou um ou mais especificadores de formato que definem o formato exigido de `s`. Para obter detalhes sobre códigos de formatação válidos, consulte [padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md) ou [Data personalizada e cadeias de caracteres de formato de hora](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
> [!NOTE]
>  Se `format` é um padrão de formato personalizado que não incluem os separadores de data ou hora (por exemplo, "Aaaammddhhmm"), use a cultura invariável para o `provider` especificador de formato de parâmetro e a forma mais ampla de cada personalizado. Por exemplo, se você quiser especificar horas no padrão de formato, especifique a forma mais ampla, "HH", em vez da forma mais estreita, "H".  
  
 A data específica e símbolos de tempo e cadeias de caracteres (como nomes dos dias da semana em uma determinada linguagem) usadas no `s` são definidos pelo `provider` parâmetro, como é o formato preciso de `s` se `format` é um formato padrão cadeia de caracteres do especificador. O parâmetro `provider` pode ser um dos seguintes:  
  
-   Um objeto <xref:System.Globalization.CultureInfo> que representa a cultura usada para interpretar `s`. O objeto <xref:System.Globalization.DateTimeFormatInfo> retornado pela propriedade <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> define os símbolos e a formatação em `s`.  
  
-   Um objeto <xref:System.Globalization.DateTimeFormatInfo> que define o formato dos dados de data e hora.  
  
-   Uma implementação de <xref:System.IFormatProvider> personalizada cujo método <xref:System.IFormatProvider.GetFormat%2A> retorna o objeto <xref:System.Globalization.CultureInfo> ou o objeto <xref:System.Globalization.DateTimeFormatInfo> que fornece informações de formatação.  
  
 Caso `provider` seja `null`, o objeto <xref:System.Globalization.CultureInfo> que corresponde à cultura atual é usado.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.ParseExact%2A> método.  
  
 [!code-csharp[System.DateTime.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/ParseExact1.cs#1)]
 [!code-vb[System.DateTime.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/ParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> ou <paramref name="format" /> é <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> ou <paramref name="format" /> é uma cadeia de caracteres vazia.  
  
- ou - 
 <paramref name="s" /> não contém uma data e hora correspondente ao padrão especificado em <paramref name="format" />.  
  
- ou - 
O componente de hora e o designador AM/PM no <paramref name="s" /> não concordam.</exception>
        <block subset="none" type="usage">
          <para>No [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], o <see cref="Overload:System.DateTime.ParseExact" /> método lança um <see cref="T:System.FormatException" /> se a cadeia de caracteres a ser analisada contém um componente de hora e um designador AM/PM que não estão no contrato. No [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] e versões anteriores, o designador AM/PM é ignorado.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analisando cadeias de caracteres de data e hora no .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora padrão</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora personalizado</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, formats, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">Uma cadeia de caracteres contendo uma data e hora a ser convertida.</param>
        <param name="format">Um especificador de formato que define o formato obrigatório de <c>s</c>. Para obter mais informações, consulte a seção Comentários.</param>
        <param name="provider">Um objeto que fornece informações de formatação específicas à cultura sobre <c>s</c>.</param>
        <param name="style">Uma combinação bit a bit dos valores de enumeração que fornece informações adicionais sobre <c>s</c>, sobre elementos de estilo que podem estar presentes em <c>s</c> ou sobre a conversão de <c>s</c> em um valor <see cref="T:System.DateTime" />. Um valor típico a ser especificado é <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Converte a representação de cadeia de caracteres especificada de data e hora em seu equivalente <see cref="T:System.DateTime" /> usando o formato especificado, as informações de formato específicas da cultura e o estilo. O formato da representação de cadeia de caracteres deverá corresponder exatamente ao formato especificado ou uma exceção será gerada.</summary>
        <returns>Um objeto equivalente à data e hora contida no <paramref name="s" />, conforme especificado por <paramref name="format" />, <paramref name="provider" /> e <paramref name="style" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método analisa a representação de cadeia de caracteres de uma data, que deve estar em um formato definido pelo `format` parâmetro. Ele também requer que os elementos de data e hora em `s` aparecem na ordem especificada pela `format`. Se `s` não coincide com o padrão do `format` parâmetro, com qualquer variação definido pelo `style` parâmetro, o método lança um <xref:System.FormatException>. Em contraste, o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método analisa a representação de cadeia de caracteres de uma data em qualquer um dos formatos reconhecidas pelo provedor de formato <xref:System.Globalization.DateTimeFormatInfo> objeto. O <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método também permite que os elementos de data e hora em `s` para aparecer em qualquer ordem.  
  
 Se o `s` parâmetro contém apenas uma vez e nenhuma data, a data atual é usada, a menos que o `style` parâmetro inclui o <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> sinalizar, caso em que a data padrão (`DateTime.Date.MinValue`) é usado. Se o `s` parâmetro não contém apenas uma data e nenhuma hora, meia-noite (00: 00:00) é usado. O `style` parâmetro também determina se o `s` parâmetro pode conter caracteres de espaço em branco à esquerda, interna ou à direita.  
  
 Caso `s` não contenha informações de fuso horário, a propriedade <xref:System.DateTime.Kind%2A> do objeto <xref:System.DateTime> retornado é <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Este comportamento pode ser alterado usando-se o sinalizador <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, que retorna um valor <xref:System.DateTime> cuja propriedade <xref:System.DateTime.Kind%2A> é <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ou usando-se os sinalizadores <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> e <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>, que retorna um valor <xref:System.DateTime> cuja propriedade <xref:System.DateTime.Kind%2A> é <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Se `s` contém informações de fuso horário, a hora é convertida para a hora local, se necessário e o <xref:System.DateTime.Kind%2A> propriedade de retornado <xref:System.DateTime> objeto é definido como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Esse comportamento pode ser alterado usando o <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> sinalizador não converter o tempo Universal Coordenado (UTC) em uma hora local e definir o <xref:System.DateTime.Kind%2A> propriedade <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 O `format` parâmetro define o padrão necessário do `s` parâmetro. Ele pode consistir em um ou mais especificadores de formato personalizado do [personalizado de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/custom-date-and-time-format-strings.md) tabela ou um especificador de formato único padrão, que identifica um padrão predefinido, da [padrão de data e Cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md) tabela.  
  
 Caso você não use separadores de data ou hora em um padrão de formato personalizado, use a cultura invariável do parâmetro `provider` e a forma mais ampla de cada especificador de formato personalizado. Por exemplo, caso você queira especificar horas no padrão, especifique a forma mais ampla, "HH", em vez da forma mais estreita, "H".  
  
> [!NOTE]
>  Em vez de exigir que `s` estão em conformidade com um único formato para a operação de análise seja bem-sucedida, você pode chamar o <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método e especificar vários formatos permitidos. Isso torna a operação de análise mais probabilidade de êxito.  
  
 O parâmetro `styles` inclui um ou mais membros da enumeração <xref:System.Globalization.DateTimeStyles> que determinam se e onde o espaço em branco não definido por `format` pode aparecer em `s` e que controlam o comportamento preciso da operação de análise. A tabela a seguir descreve como cada membro de <xref:System.Globalization.DateTimeStyles> enumeração afeta a operação do <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> método.  
  
|Membro DateTimeStyles|Descrição|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analisa `s` e, caso necessário, converte-o em UTC. Caso `s` inclua um deslocamento de fuso horário ou caso `s` não contenha informações de fuso horário, mas `styles` inclua o sinalizador <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, o método analisa a cadeia de caracteres, chama <xref:System.DateTime.ToUniversalTime%2A> para converter o valor <xref:System.DateTime> retornado em UTC e define a propriedade <xref:System.DateTime.Kind%2A> como <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Caso `s` indique que ele representa o UTC ou caso `s` não contenha informações de fuso horário, mas `styles` inclua o sinalizador <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>, o método analisa a cadeia de caracteres, não executa nenhuma conversão de fuso horário no valor <xref:System.DateTime> retornado e define a propriedade <xref:System.DateTime.Kind%2A> a <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Em todos os outros casos, o sinalizador não entra em vigor.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Especifica que o espaço em branco não definido por `format` pode ser exibido entre qualquer elemento de data ou hora individual.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Especifica que o espaço em branco não definido por `format` pode ser exibido no início de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Especifica que o espaço em branco não definido por `format` pode ser exibido no final de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Especifica que `s` pode conter espaços em branco à esquerda, internos, e à direita não definidos por `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Especifica que, caso `s` não tenha informações de fuso horário, pressupõe-se que ele represente uma hora local. A menos que o sinalizador <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> esteja presente, a propriedade <xref:System.DateTime.Kind%2A> do valor <xref:System.DateTime> retornado é definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Especifica que, caso `s` não tenha informações de fuso horário, pressupõe-se que ele represente o UTC. A menos que o sinalizador <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> esteja presente, o método converte o valor <xref:System.DateTime> retornado do UTC na hora local e define a propriedade <xref:System.DateTime.Kind%2A> como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Caso `s` contenha hora sem informações de data, a data do valor de retorno é definida como `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|O parâmetro `s` é analisado usando-se valores padrão. Nenhum espaço em branco senão presente em `format` é permitido. Caso `s` não tenha um componente de data, a data do valor <xref:System.DateTime> retornado é definida como 1/1/0001. Caso `s` não contenha informações de fuso horário, a propriedade <xref:System.DateTime.Kind%2A> do objeto <xref:System.DateTime> retornado é definida como <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Caso informações de fuso horário estejam presentes em `s`, a hora é convertida na hora local e a propriedade <xref:System.DateTime.Kind%2A> do objeto <xref:System.DateTime> retornado é definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Para cadeias de caracteres que contêm informações de fuso horário, tenta impedir que a conversão em um <xref:System.DateTime> valor de data e hora com seu <xref:System.DateTime.Kind%2A> propriedade definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Este sinalizador impede principalmente a conversão de horas UTC em horas locais.|  
  
 Os símbolos de data e hora e as cadeias de caracteres específicos (como os nomes dos dias da semana em um idioma específico) usados em `s` são definidos pelo parâmetro `provider`, como o formato preciso de `s` caso `format` seja uma cadeia de caracteres do especificador de formato padrão. O parâmetro `provider` pode ser um dos seguintes:  
  
-   Um objeto <xref:System.Globalization.CultureInfo> que representa a cultura usada para interpretar `s`. O objeto <xref:System.Globalization.DateTimeFormatInfo> retornado pela propriedade <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> define os símbolos e a formatação em `s`.  
  
-   Um objeto <xref:System.Globalization.DateTimeFormatInfo> que define o formato dos dados de data e hora.  
  
-   Uma implementação de <xref:System.IFormatProvider> personalizada cujo método <xref:System.IFormatProvider.GetFormat%2A> retorna o objeto <xref:System.Globalization.CultureInfo> ou o objeto <xref:System.Globalization.DateTimeFormatInfo> que fornece informações de formatação.  
  
 Caso `provider` seja `null`, o objeto <xref:System.Globalization.CultureInfo> que corresponde à cultura atual é usado.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> método. Observe que a cadeia de caracteres "01/5/2009 8H30" não pode ser analisado com êxito quando o `styles` for igual ao parâmetro <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> porque os espaços à esquerda não são permitidos por `format`. Além disso, a cadeia de caracteres "01/5/2009 09:00" não pode ser analisado com êxito com um `format` de "MM/dd/yyyyhh:mm" porque a cadeia de caracteres de data não precede o número do mês com um zero à esquerda, como `format` requer.  
  
 [!code-csharp[System.DateTime.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact2.cs#2)]
 [!code-vb[System.DateTime.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> ou <paramref name="format" /> é <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> ou <paramref name="format" /> é uma cadeia de caracteres vazia.  
  
- ou - 
 <paramref name="s" /> não contém uma data e hora correspondente ao padrão especificado em <paramref name="format" />.  
  
- ou - 
O componente de hora e o designador AM/PM no <paramref name="s" /> não concordam.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> contém uma combinação inválida de valores <see cref="T:System.Globalization.DateTimeStyles" />. Por exemplo, <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> e <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <block subset="none" type="usage">
          <para>No [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], o <see cref="Overload:System.DateTime.ParseExact" /> método lança um <see cref="T:System.FormatException" /> se a cadeia de caracteres a ser analisada contém um componente de hora e um designador AM/PM que não estão no contrato. No [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] e versões anteriores, o designador AM/PM é ignorado.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analisando cadeias de caracteres de data e hora no .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora padrão</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora personalizado</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, formats, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">Uma cadeia de caracteres que contém uma data e hora a ser convertida.</param>
        <param name="formats">Uma matriz de formatos permitidos de <c>s</c>. Para obter mais informações, consulte a seção Comentários.</param>
        <param name="provider">Um objeto que fornece informações de formato específicas à cultura sobre <c>s</c>.</param>
        <param name="style">Uma combinação bit a bit de valores de enumeração que indica o formato permitido de <c>s</c>. Um valor típico a ser especificado é <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Converte a representação de cadeia de caracteres especificada de um data e hora no equivalente de <see cref="T:System.DateTime" /> usando a matriz de formatos, informações de formato específicas da cultura e estilo especificados. O formato da representação de cadeia de caracteres deverá corresponder a, pelo menos, um dos formatos especificados exatamente ou uma exceção será gerada.</summary>
        <returns>Um objeto equivalente à data e hora contida no <paramref name="s" />, conforme especificado por <paramref name="formats" />, <paramref name="provider" /> e <paramref name="style" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método analisa a representação de cadeia de caracteres de uma data que corresponde a qualquer um dos padrões atribuído para o `formats` parâmetro. Se a cadeia de caracteres `s` não corresponder a qualquer um desses padrões com qualquer uma das variações definidas pelo `styles` parâmetro, o método lança um <xref:System.FormatException>. Além de comparando `s` para vários padrões de formatação, em vez de um único padrão de formatação, essa sobrecarga se comporta de forma idêntica ao <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método.  
  
 O `s` parâmetro contém a data e hora para analisar. Se o `s` parâmetro contém apenas uma vez e nenhuma data, a data atual é usada, a menos que o `style` parâmetro inclui o <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> sinalizar, caso em que a data padrão (`DateTime.Date.MinValue`) é usado. Se o `s` parâmetro não contém apenas uma data e nenhuma hora, meia-noite (00: 00:00) é usado. O `style` parâmetro também determina se o `s` parâmetro pode conter líderes, espaço em branco interno ou à direita caracteres diferentes daqueles permitido por uma das cadeias de caracteres de formato no `formats`.  
  
 Caso `s` não contenha informações de fuso horário, a propriedade <xref:System.DateTime.Kind%2A> do objeto <xref:System.DateTime> retornado é <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Este comportamento pode ser alterado usando-se o sinalizador <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, que retorna um valor <xref:System.DateTime> cuja propriedade <xref:System.DateTime.Kind%2A> é <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ou usando-se os sinalizadores <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> e <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>, que retorna um valor <xref:System.DateTime> cuja propriedade <xref:System.DateTime.Kind%2A> é <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Se `s` contém informações de fuso horário, a hora é convertida para a hora local, se necessário e o <xref:System.DateTime.Kind%2A> propriedade de retornado <xref:System.DateTime> objeto é definido como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Esse comportamento pode ser alterado usando o <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> sinalizador não converter o tempo Universal Coordenado (UTC) em uma hora local e definir o <xref:System.DateTime.Kind%2A> propriedade <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 O `formats` parâmetro contém uma matriz de padrões, um dos quais `s` deve corresponder exatamente, se a operação de análise seja bem-sucedida. Os padrões a `formats` parâmetro consiste em um ou mais especificadores de formato personalizado do [personalizado de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/custom-date-and-time-format-strings.md) tabela ou um especificador de formato único padrão, que identifica um padrão predefinido, da [Padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md) tabela.  
  
 Caso você não use separadores de data ou hora em um padrão de formato personalizado, use a cultura invariável do parâmetro `provider` e a forma mais ampla de cada especificador de formato personalizado. Por exemplo, caso você queira especificar horas no padrão, especifique a forma mais ampla, "HH", em vez da forma mais estreita, "H".  
  
 O parâmetro `styles` inclui um ou mais membros da enumeração <xref:System.Globalization.DateTimeStyles> que determinam se e onde o espaço em branco não definido por `format` pode aparecer em `s` e que controlam o comportamento preciso da operação de análise. A tabela a seguir descreve como cada membro de <xref:System.Globalization.DateTimeStyles> enumeração afeta a operação do <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> método.  
  
|Membro DateTimeStyles|Descrição|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analisa `s` e, caso necessário, converte-o em UTC. Caso `s` inclua um deslocamento de fuso horário ou caso `s` não contenha informações de fuso horário, mas `styles` inclua o sinalizador <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, o método analisa a cadeia de caracteres, chama <xref:System.DateTime.ToUniversalTime%2A> para converter o valor <xref:System.DateTime> retornado em UTC e define a propriedade <xref:System.DateTime.Kind%2A> como <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Caso `s` indique que ele representa o UTC ou caso `s` não contenha informações de fuso horário, mas `styles` inclua o sinalizador <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>, o método analisa a cadeia de caracteres, não executa nenhuma conversão de fuso horário no valor <xref:System.DateTime> retornado e define a propriedade <xref:System.DateTime.Kind%2A> a <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Em todos os outros casos, o sinalizador não entra em vigor.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Especifica que o espaço em branco não definido por `format` pode ser exibido entre qualquer elemento de data ou hora individual.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Especifica que o espaço em branco não definido por `format` pode ser exibido no início de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Especifica que o espaço em branco não definido por `format` pode ser exibido no final de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Especifica que `s` pode conter espaços em branco à esquerda, internos, e à direita não definidos por `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Especifica que, caso `s` não tenha informações de fuso horário, pressupõe-se que ele represente uma hora local. A menos que o sinalizador <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> esteja presente, a propriedade <xref:System.DateTime.Kind%2A> do valor <xref:System.DateTime> retornado é definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Especifica que, caso `s` não tenha informações de fuso horário, pressupõe-se que ele represente o UTC. A menos que o sinalizador <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> esteja presente, o método converte o valor <xref:System.DateTime> retornado do UTC na hora local e define a propriedade <xref:System.DateTime.Kind%2A> como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Caso `s` contenha hora sem informações de data, a data do valor de retorno é definida como `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|O parâmetro `s` é analisado usando-se valores padrão. Nenhum espaço em branco senão presente em `format` é permitido. Caso `s` não tenha um componente de data, a data do valor <xref:System.DateTime> retornado é definida como 1/1/0001. Caso `s` não contenha informações de fuso horário, a propriedade <xref:System.DateTime.Kind%2A> do objeto <xref:System.DateTime> retornado é definida como <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Caso informações de fuso horário estejam presentes em `s`, a hora é convertida na hora local e a propriedade <xref:System.DateTime.Kind%2A> do objeto <xref:System.DateTime> retornado é definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Para cadeias de caracteres que contêm informações de fuso horário, tenta impedir que a conversão para uma data e hora com seu <xref:System.DateTime.Kind%2A> propriedade definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Este sinalizador impede principalmente a conversão de horas UTC em horas locais.|  
  
 Os símbolos de data e hora e as cadeias de caracteres específicos (como os nomes dos dias da semana em um idioma específico) usados em `s` são definidos pelo parâmetro `provider`, como o formato preciso de `s` caso `format` seja uma cadeia de caracteres do especificador de formato padrão. O parâmetro `provider` pode ser um dos seguintes:  
  
-   Um objeto <xref:System.Globalization.CultureInfo> que representa a cultura usada para interpretar `s`. O objeto <xref:System.Globalization.DateTimeFormatInfo> retornado pela propriedade <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> define os símbolos e a formatação em `s`.  
  
-   Um objeto <xref:System.Globalization.DateTimeFormatInfo> que define o formato dos dados de data e hora.  
  
-   Uma implementação de <xref:System.IFormatProvider> personalizada cujo método <xref:System.IFormatProvider.GetFormat%2A> retorna o objeto <xref:System.Globalization.CultureInfo> ou o objeto <xref:System.Globalization.DateTimeFormatInfo> que fornece informações de formatação.  
  
 Caso `provider` seja `null`, o objeto <xref:System.Globalization.CultureInfo> que corresponde à cultura atual é usado.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método para garantir que uma cadeia de caracteres em um número de possíveis formatos pode ser analisada com êxito.  
  
 [!code-csharp[System.Datetime.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact3.cs#3)]
 [!code-vb[System.Datetime.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> ou <paramref name="formats" /> é <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> é uma cadeia de caracteres vazia.  
  
- ou - 
um elemento de <paramref name="formats" /> é uma cadeia de caracteres vazia.  
  
- ou - 
 <paramref name="s" /> não contém uma data e hora que corresponde a nenhum elemento de <paramref name="formats" />.  
  
- ou - 
O componente de hora e o designador AM/PM no <paramref name="s" /> não concordam.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> contém uma combinação inválida de valores <see cref="T:System.Globalization.DateTimeStyles" />. Por exemplo, <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> e <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <block subset="none" type="usage">
          <para>No [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], o <see cref="Overload:System.DateTime.ParseExact" /> método lança um <see cref="T:System.FormatException" /> se a cadeia de caracteres a ser analisada contém um componente de hora e um designador AM/PM que não estão no contrato. No [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] e versões anteriores, o designador AM/PM é ignorado.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analisando cadeias de caracteres de data e hora no .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora padrão</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora personalizado</related>
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Second : int" Usage="System.DateTime.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o componente de segundos da data representada por essa instância.</summary>
        <value>O componente de segundos, expresso como um valor entre 0 e 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.Second%2A> propriedade.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecifyKind">
      <MemberSignature Language="C#" Value="public static DateTime SpecifyKind (DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime SpecifyKind(valuetype System.DateTime value, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpecifyKind (value As DateTime, kind As DateTimeKind) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime SpecifyKind(DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="static member SpecifyKind : DateTime * DateTimeKind -&gt; DateTime" Usage="System.DateTime.SpecifyKind (value, kind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="value">Uma data e hora.</param>
        <param name="kind">Um dos valores de enumeração que indica se o novo objeto representa a hora local, UTC ou nenhum dos dois.</param>
        <summary>Cria um novo objeto <see cref="T:System.DateTime" /> que tem o mesmo número de tiques que o <see cref="T:System.DateTime" /> especificado, mas é designado como hora local, UTC (Tempo Universal Coordenado) ou nenhum dos dois, conforme indicado pelo valor <see cref="T:System.DateTimeKind" /> especificado.</summary>
        <returns>Um novo objeto que tem o mesmo número de tiques que o objeto representado pelo parâmetro <paramref name="value" /> e o valor <see cref="T:System.DateTimeKind" /> especificado pelo parâmetro <paramref name="kind" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um <xref:System.DateTime> objeto consiste em um campo de tipo que indica se o valor de tempo se baseia na hora local, Tempo Universal Coordenado (UTC) ou nenhum dos dois, e um campo de tiques que contém um valor de tempo é medido em tiques de 100 nanossegundos. O <xref:System.DateTime.SpecifyKind%2A> método cria um novo <xref:System.DateTime> usando especificado do objeto `kind` parâmetro e o valor original do tempo.  
  
> [!IMPORTANT]
>  Retornado <xref:System.DateTime> valor não representa o mesmo instante no tempo que o `value` parâmetro, e <xref:System.DateTime.SpecifyKind%2A> não é um método de conversão de fuso horário. Em vez disso, ele deixa a hora especificada pelo `value` parâmetro inalterado e define o <xref:System.DateTime.Kind%2A> propriedade `kind`. Para obter informações sobre conversões de fuso horário, consulte [convertendo horários entre fusos](~/docs/standard/datetime/converting-between-time-zones.md).  
  
 O <xref:System.DateTime.SpecifyKind%2A> método é útil em cenários de interoperabilidade, onde você recebe um <xref:System.DateTime> objeto com um campo de tipo não especificado, mas você pode determinar, independente significa que o campo de tiques representa a hora local ou UTC.  
  
   
  
## Examples  
 O exemplo a seguir usa o método <xref:System.DateTime.SpecifyKind%2A> para demonstrar como a propriedade <xref:System.DateTime.Kind%2A> influencia os métodos de conversão <xref:System.DateTime.ToLocalTime%2A> e <xref:System.DateTime.ToUniversalTime%2A>.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md">Interoperabilidade COM em aplicativos .NET Framework (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Subtrai a hora ou duração especificada dessa instância.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : DateTime -&gt; TimeSpan" Usage="dateTime.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">O valor de data e hora a ser subtraído.</param>
        <summary>Subtrai a data e hora especificadas dessa instância.</summary>
        <returns>Um intervalo de tempo igual à data e hora representada por essa instância menos a data e a hora representada por <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.Subtract%28System.DateTime%29> método determina a diferença entre duas datas. Para subtrair um intervalo de tempo da instância atual, chame o <xref:System.DateTime.Subtract%28System.TimeSpan%29> método. Para subtrair um intervalo de tempo específico da instância atual, chame o método que adiciona esse intervalo de tempo até a data atual e fornece um valor negativo como o argumento de método. Por exemplo, para subtrair dois meses a partir da data atual, chamar o <xref:System.DateTime.AddMonths%28System.Int32%29> método com um valor de -2.  
  
 Se a data e hora da instância atual é anterior ao `value`, o método retorna um <xref:System.TimeSpan> objeto que representa um intervalo de tempo negativo. Ou seja, o valor de todas as suas propriedades diferente de zero (como <xref:System.TimeSpan.Days%2A> ou <xref:System.TimeSpan.Ticks%2A>) é negativo.  
  
 O <xref:System.DateTime.Subtract%28System.DateTime%29> método não considera o valor da <xref:System.DateTime.Kind%2A> propriedade dos dois <xref:System.DateTime> ao executar a subtração de valores. Antes de subtração <xref:System.DateTime> objetos, certifique-se de que os objetos representam horas no mesmo fuso horário. Caso contrário, o resultado incluirá a diferença entre fusos horários.  
  
> [!NOTE]
>  O <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType> método considerar a diferença entre fusos horários ao executar a subtração.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o método <xref:System.DateTime.Subtract%2A> e o operador de subtração.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O resultado é menor que <see cref="F:System.DateTime.MinValue" /> ou maior que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Executando operações aritméticas com datas e horas</related>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTime Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Subtract(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; DateTime" Usage="dateTime.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">O intervalo de tempo a ser subtraído.</param>
        <summary>Subtrai a duração especificada dessa instância.</summary>
        <returns>Um objeto igual à data e hora representadas por essa instância menos o intervalo de tempo representado por <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.Subtract%28System.TimeSpan%29> método retorna a data em que uma diferença de intervalo de tempo especificado da instância atual. Para determinar o intervalo de tempo entre duas datas, chame o <xref:System.DateTime.Subtract%28System.DateTime%29> método. Para subtrair um intervalo de tempo específico da instância atual, chame o método que adiciona esse intervalo de tempo até a data atual e fornece um valor negativo como o argumento de método. Por exemplo, para subtrair dois meses a partir da data atual, chamar o <xref:System.DateTime.AddMonths%28System.Int32%29> método com um valor de -2.  
  
 Este método não altera o valor desse <xref:System.DateTime>. Em vez disso, ele retorna um novo <xref:System.DateTime> cujo valor é o resultado dessa operação.  
  
 Normalmente, o <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> método subtrai um <xref:System.TimeSpan> objeto que representa um intervalo de tempo positivo e retorna um <xref:System.DateTime> valor que é anterior à data e hora da instância atual. No entanto, se o <xref:System.TimeSpan> objeto representa um intervalo de tempo negativo, o <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> método retorna um <xref:System.DateTime> valor que é posterior à data e hora da instância atual.  
  
 O <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> método permite que você subtrair um intervalo de tempo que consiste em mais de uma unidade de tempo como (um determinado número de horas) e um determinado número de minutos. Para subtrair de uma única unidade de tempo (como anos, meses ou dias) do <xref:System.DateTime> instância, você pode passar um valor numérico negativo como um parâmetro para qualquer um dos seguintes métodos:  
  
-   <xref:System.DateTime.AddYears%2A>, para subtrair um número específico de anos a partir da instância atual de data e hora.  
  
-   <xref:System.DateTime.AddMonths%2A>, para subtrair um número específico de meses a partir da instância atual de data e hora.  
  
-   <xref:System.DateTime.AddDays%2A>, para subtrair um número específico de dias a partir da instância atual de data e hora.  
  
-   <xref:System.DateTime.AddHours%2A>, para subtrair um número específico de horas da instância atual de data e hora.  
  
-   <xref:System.DateTime.AddMinutes%2A>, para subtrair um número específico de minutos da instância atual de data e hora.  
  
-   <xref:System.DateTime.AddSeconds%2A>, para subtrair um número específico de segundos da instância atual de data e hora.  
  
-   <xref:System.DateTime.AddMilliseconds%2A>, para subtrair um número específico de milissegundos da instância atual de data e hora.  
  
-   <xref:System.DateTime.AddTicks%2A>, para subtrair um número específico de tiques da instância atual de data e hora.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o método <xref:System.DateTime.Subtract%2A> e o operador de subtração.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O resultado é menor que <see cref="F:System.DateTime.MinValue" /> ou maior que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Executando operações aritméticas com datas e horas</related>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Um objeto que implementa a interface do <see cref="T:System.IFormatProvider" />. (Este parâmetro não é usado; especifique <see langword="null" />.)</param>
        <summary>Esta conversão não é suportada. A tentativa de usar esse método lança um <see cref="T:System.InvalidCastException" />.</summary>
        <returns>O valor de retorno desse membro não é usado.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Em todos os casos.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Um objeto que implementa a interface do <see cref="T:System.IFormatProvider" />. (Este parâmetro não é usado; especifique <see langword="null" />.)</param>
        <summary>Esta conversão não é suportada. A tentativa de usar esse método lança um <see cref="T:System.InvalidCastException" />.</summary>
        <returns>O valor de retorno desse membro não é usado.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Em todos os casos.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Um objeto que implementa a interface do <see cref="T:System.IFormatProvider" />. (Este parâmetro não é usado; especifique <see langword="null" />.)</param>
        <summary>Esta conversão não é suportada. A tentativa de usar esse método lança um <see cref="T:System.InvalidCastException" />.</summary>
        <returns>O valor de retorno desse membro não é usado.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Em todos os casos.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Um objeto que implementa a interface do <see cref="T:System.IFormatProvider" />. (Este parâmetro não é usado; especifique <see langword="null" />.)</param>
        <summary>Retorna o objeto <see cref="T:System.DateTime" /> atual.</summary>
        <returns>O objeto atual.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Um objeto que implementa a interface do <see cref="T:System.IFormatProvider" />. (Este parâmetro não é usado; especifique <see langword="null" />.)</param>
        <summary>Esta conversão não é suportada. A tentativa de usar esse método lança um <see cref="T:System.InvalidCastException" />.</summary>
        <returns>O valor de retorno desse membro não é usado.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Em todos os casos.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Um objeto que implementa a interface do <see cref="T:System.IFormatProvider" />. (Este parâmetro não é usado; especifique <see langword="null" />.)</param>
        <summary>Esta conversão não é suportada. A tentativa de usar esse método lança um <see cref="T:System.InvalidCastException" />.</summary>
        <returns>O valor de retorno desse membro não é usado.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Em todos os casos.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Um objeto que implementa a interface do <see cref="T:System.IFormatProvider" />. (Este parâmetro não é usado; especifique <see langword="null" />.)</param>
        <summary>Esta conversão não é suportada. A tentativa de usar esse método lança um <see cref="T:System.InvalidCastException" />.</summary>
        <returns>O valor de retorno desse membro não é usado.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Em todos os casos.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Um objeto que implementa a interface do <see cref="T:System.IFormatProvider" />. (Este parâmetro não é usado; especifique <see langword="null" />.)</param>
        <summary>Esta conversão não é suportada. A tentativa de usar esse método lança um <see cref="T:System.InvalidCastException" />.</summary>
        <returns>O valor de retorno desse membro não é usado.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Em todos os casos.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Um objeto que implementa a interface do <see cref="T:System.IFormatProvider" />. (Este parâmetro não é usado; especifique <see langword="null" />.)</param>
        <summary>Esta conversão não é suportada. A tentativa de usar esse método lança um <see cref="T:System.InvalidCastException" />.</summary>
        <returns>O valor de retorno desse membro não é usado.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Em todos os casos.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Um objeto que implementa a interface do <see cref="T:System.IFormatProvider" />. (Este parâmetro não é usado; especifique <see langword="null" />.)</param>
        <summary>Esta conversão não é suportada. A tentativa de usar esse método lança um <see cref="T:System.InvalidCastException" />.</summary>
        <returns>O valor de retorno desse membro não é usado.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Em todos os casos.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Um objeto que implementa a interface do <see cref="T:System.IFormatProvider" />. (Este parâmetro não é usado; especifique <see langword="null" />.)</param>
        <summary>Esta conversão não é suportada. A tentativa de usar esse método lança um <see cref="T:System.InvalidCastException" />.</summary>
        <returns>O valor de retorno desse membro não é usado.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Em todos os casos.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type">O tipo desejado.</param>
        <param name="provider">Um objeto que implementa a interface do <see cref="T:System.IFormatProvider" />. (Este parâmetro não é usado; especifique <see langword="null" />.)</param>
        <summary>Converte o objeto <see cref="T:System.DateTime" /> atual em um objeto de um tipo especificado.</summary>
        <returns>Um objeto do tipo especificado pelo parâmetro <paramref name="type" />, com um valor equivalente ao objeto <see cref="T:System.DateTime" /> atual.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> é <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">Não há suporte para essa conversão no tipo <see cref="T:System.DateTime" />.</exception>
        <altmember cref="T:System.Convert" />
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Um objeto que implementa a interface do <see cref="T:System.IFormatProvider" />. (Este parâmetro não é usado; especifique <see langword="null" />.)</param>
        <summary>Esta conversão não é suportada. A tentativa de usar esse método lança um <see cref="T:System.InvalidCastException" />.</summary>
        <returns>O valor de retorno desse membro não é usado.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Em todos os casos.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Um objeto que implementa a interface do <see cref="T:System.IFormatProvider" />. (Este parâmetro não é usado; especifique <see langword="null" />.)</param>
        <summary>Esta conversão não é suportada. A tentativa de usar esse método lança um <see cref="T:System.InvalidCastException" />.</summary>
        <returns>O valor de retorno desse membro não é usado.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Em todos os casos.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Um objeto que implementa a interface do <see cref="T:System.IFormatProvider" />. (Este parâmetro não é usado; especifique <see langword="null" />.)</param>
        <summary>Esta conversão não é suportada. A tentativa de usar esse método lança um <see cref="T:System.InvalidCastException" />.</summary>
        <returns>O valor de retorno desse membro não é usado.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Em todos os casos.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">O objeto a ser preenchido com dados.</param>
        <param name="context">O destino dessa serialização. (Este parâmetro não é usado; especifique <see langword="null" />.)</param>
        <summary>Popula um objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> com os dados necessários para serializar o objeto <see cref="T:System.DateTime" /> atual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método popula os `info` parâmetro com o <xref:System.DateTime.Ticks%2A> e <xref:System.DateTime.Kind%2A> valores de propriedade.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="info" /> é <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requer confiança total para o chamador imediato. Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.DateTime.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o número de tiques que representam a data e hora dessa instância.</summary>
        <value>O número de tiques que representam a data e hora dessa instância. O valor está entre <see langword="DateTime.MinValue.Ticks" /> e <see langword="DateTime.MaxValue.Ticks" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um único tique representa 100 nanossegundos ou um décimo milionésimo de segundo. Existem 10.000 escalas em um milissegundo ou 10 milhões de tiques em um segundo.  
  
 O valor dessa propriedade representa o número de intervalos de 100 nanossegundos decorridos desde 12:00:00 meia-noite, 1 de janeiro de 0001 (0: 00:00 UTC em 1º de janeiro, 0001, no calendário gregoriano), que representa <xref:System.DateTime.MinValue?displayProperty=nameWithType>. Ele não inclui o número de tiques que ser atribuídos a leap segundos.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.Ticks%2A> propriedade para exibir o número de tiques que se passaram desde o início do século XXI e instanciar um <xref:System.TimeSpan> objeto. O <xref:System.TimeSpan> objeto, em seguida, é usado para exibir o tempo decorrido usando vários intervalos de tempo.  
  
 [!code-csharp[System.DateTime.Ticks#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Ticks/cs/Ticks.cs#1)]
 [!code-vb[System.DateTime.Ticks#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Ticks/vb/Ticks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : TimeSpan" Usage="System.DateTime.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a hora do dia para esta instância.</summary>
        <value>Um intervalo de tempo que representa a fração do dia transcorrida desde a meia-noite.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ao contrário de <xref:System.DateTime.Date%2A> propriedade. que retorna um <xref:System.DateTime> valor que representa uma data sem o seu componente de tempo, o <xref:System.DateTime.TimeOfDay%2A> propriedade retorna um <xref:System.TimeSpan> valor que representa um <xref:System.DateTime> componente de hora do valor.  
  
 Se você deseja exibir a hora do dia ou recuperar a representação de cadeia de caracteres de hora do dia de um <xref:System.DateTime> valor, em vez disso, você pode chamar uma sobrecarga da <xref:System.DateTime.ToString%2A> método que tem um `format` parâmetro ou use o [formatação de composição ](~/docs/standard/base-types/composite-formatting.md) recurso com a cadeia de caracteres de formato padrão "T" ou "t".  
  
   
  
## Examples  
 O exemplo a seguir exibe o valor da <xref:System.DateTime.TimeOfDay%2A> propriedade para uma matriz de <xref:System.DateTime> valores. Ele também compara o valor de retorno com a cadeia de caracteres retornada pela cadeia de caracteres de formato padrão "t" em uma operação de formatação composta.  
  
 [!code-csharp[System.DateTime.TimeOfDay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.timeofday/cs/timeofday1.cs#1)]
 [!code-vb[System.DateTime.TimeOfDay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.timeofday/vb/timeofday1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="ToBinary">
      <MemberSignature Language="C#" Value="public long ToBinary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToBinary() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToBinary" />
      <MemberSignature Language="VB.NET" Value="Public Function ToBinary () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToBinary();" />
      <MemberSignature Language="F#" Value="member this.ToBinary : unit -&gt; int64" Usage="dateTime.ToBinary " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Serializa o objeto <see cref="T:System.DateTime" /> atual como um valor binário de 64 bits que posteriormente pode ser usado para recriar o objeto <see cref="T:System.DateTime" />.</summary>
        <returns>Um inteiro com sinal de 64 bits que codifica as propriedades <see cref="P:System.DateTime.Kind" /> e <see cref="P:System.DateTime.Ticks" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.DateTime.ToBinary%2A> método para converter o valor do atual <xref:System.DateTime> objeto para um valor binário. Posteriormente, use o valor binário e o <xref:System.DateTime.FromBinary%2A> método para recriar o original <xref:System.DateTime> objeto.  
  
> [!IMPORTANT]
>  Em alguns casos, o <xref:System.DateTime> valor retornado pela <xref:System.DateTime.FromBinary%2A> método não é idêntico ao original <xref:System.DateTime> valor fornecido para o <xref:System.DateTime.ToBinary%2A> método. Para obter mais informações, consulte a próxima seção, "Ajuste de horário Local".  
  
## <a name="local-time-adjustment"></a>Ajuste de hora local  
 A hora local, que é um Coordinated Universal Time ajustado para o fuso horário local, é representada por um <xref:System.DateTime> estrutura cuja <xref:System.DateTime.Kind%2A> propriedade tem o valor <xref:System.DateTimeKind.Local>. Durante a restauração de um local <xref:System.DateTime> o valor da representação binária que é produzido pelo <xref:System.DateTime.ToBinary%2A> método, o <xref:System.DateTime.FromBinary%2A> método pode ajustar o valor de recriada para que não seja igual ao valor original. Isso pode ocorrer nas seguintes condições:  
  
-   Se um local <xref:System.DateTime> objeto é serializado em um fuso horário pela <xref:System.DateTime.ToBinary%2A> método e, em seguida, desserializado em um fuso horário diferente, o <xref:System.DateTime.FromBinary%2A> método, a hora local representado pelo resultante <xref:System.DateTime> objeto é ajustado automaticamente para o segundo fuso horário.  
  
     Por exemplo, considere um <xref:System.DateTime> objeto que representa a hora local de 15. Um aplicativo que está em execução nos EUA Fuso horário do Pacífico usa o <xref:System.DateTime.ToBinary%2A> método para convertê-lo <xref:System.DateTime> objeto para um valor binário. Outro aplicativo que está em execução nos EUA Fuso horário do Leste dos EUA usa o <xref:System.DateTime.FromBinary%2A> método para converter o valor binário em um novo <xref:System.DateTime> objeto. O valor do novo <xref:System.DateTime> objeto é 6 da tarde, que representa o mesmo ponto no tempo que o original às 3 da tarde valor, mas é ajustado para a hora local no fuso horário do Leste dos EUA.  
  
-   Se a representação binária de um local <xref:System.DateTime> valor representa uma hora inválida no fuso horário local do sistema no qual <xref:System.DateTime.FromBinary%2A> é chamado, o horário é ajustado para que ele seja válido.  
  
     Por exemplo, a transição da hora padrão para o horário de verão ocorre no fuso horário do Pacífico dos EUA em 14 de março de 2010, às 02h00, quando a hora avança uma hora, para 03h00. Este intervalo de hora é uma hora inválida, ou seja, um intervalo de hora que não existe nesse fuso horário. O exemplo a seguir mostra que, quando um horário que está dentro desse intervalo é convertido como um valor binário, o <xref:System.DateTime.ToBinary%2A> método e, em seguida, é restaurado pelo <xref:System.DateTime.FromBinary%2A> método, o valor original é ajustado para se tornar uma hora válida. É possível determinar se um valor de data e hora específico podem estar sujeito à modificação passando-o para o método <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType>, como o exemplo ilustra.  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>Considerações da versão  
 Começando com o .NET Framework versão 2.0, um <xref:System.DateTime> estrutura consiste em um campo de tipo particular, que indica se o valor de tempo especificado é baseado em hora local, Tempo Universal Coordenado (UTC) ou nenhum dos dois e um campo particular de tiques, que contém o número de tiques de 100 nanossegundos que especifique uma data e hora. O campo de tiques pode ser acessado com o <xref:System.DateTime.Ticks%2A> propriedade e o campo de tipo podem ser acessados com o <xref:System.DateTime.Kind%2A> propriedade.  
  
 Antes do .NET Framework 2.0, se você serializado uma <xref:System.DateTime> objeto manualmente, em vez de usar uma interface de serialização, como <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>, é necessário apenas para serializar os dados de tiques no <xref:System.DateTime> estrutura. Começando com a versão 2.0, você também deve serializar os dados de tipo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.FromBinary(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Today : DateTime" Usage="System.DateTime.Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a data atual.</summary>
        <value>Um objeto definido como data de hoje, com o componente de tempo definido como 00:00:00.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Começando com o .NET Framework versão 2.0, o valor retornado é um <xref:System.DateTime> cujos <xref:System.DateTime.Kind%2A> propriedade retorna <xref:System.DateTimeKind.Local>.  
  
 Porque ele retorna a data atual sem a hora atual, o <xref:System.DateTime.Today%2A> propriedade é adequada para uso em aplicativos que funcionam apenas com datas. Para obter detalhes, consulte [escolhendo entre DateTime, DateTimeOffset, TimeSpan e TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md). Em contraste, o <xref:System.DateTime.TimeOfDay%2A> propriedade retorna a hora atual sem a data atual e o <xref:System.DateTime.Now%2A> propriedade retorna a data atual e a hora atual.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.Date%2A> propriedade para recuperar a data atual. Ele também ilustra como um <xref:System.DateTime> valor pode ser formatado usando algumas das cadeias de caracteres de formato de hora e data padrão. Observe que a saída produzida pela terceira chamada para o <xref:System.DateTime.ToString%28System.String%29> método usa o especificador de formato g para incluir o componente de tempo, o que é zero.  
  
 [!code-csharp[System.DateTime.Today#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Today/cs/Today1.cs#1)]
 [!code-vb[System.DateTime.Today#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Today/vb/Today1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Now" />
        <altmember cref="P:System.DateTime.TimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberSignature Language="F#" Value="member this.ToFileTime : unit -&gt; int64" Usage="dateTime.ToFileTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte o valor do objeto <see cref="T:System.DateTime" /> atual para uma hora de arquivo do Windows.</summary>
        <returns>O valor do objeto <see cref="T:System.DateTime" /> atual expresso como uma hora de arquivo do Windows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma hora de arquivo do Windows é um valor de 64 bits que representa o número de intervalos de 100 nanossegundos desde a meia-noite de 12h00, 1º de janeiro de 1601 A.D. (C.E.) Tempo Universal Coordenado (UTC). O Windows usa uma hora de arquivo a ser registrada quando um aplicativo cria, acessa ou grava em um arquivo.  
  
 O <xref:System.DateTime.ToFileTime%2A> usa o <xref:System.DateTime.Kind%2A> propriedade para determinar se atual <xref:System.DateTime> objeto é uma hora local, uma hora UTC ou um tipo não especificado de tempo que é tratado como uma hora local.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.ToFileTime%2A> método.  
  
 [!code-cpp[DateTime.ToFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">A hora do arquivo resultante representaria uma data e hora antes da meia-noite, 12:00, de 1º de janeiro de 1601, C.E. UTC.</exception>
        <block subset="none" type="usage">
          <para>Normalmente, o <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> método restaurações uma <see cref="T:System.DateTime" /> valor que foi salva pelo <see cref="M:System.DateTime.ToFileTime" /> método. No entanto, os dois valores podem ser diferentes sob as seguintes condições: 
-Se a serialização e desserialização do <see cref="T:System.DateTime" /> valor ocorrem em fusos horários diferentes. Por exemplo, se um <see cref="T:System.DateTime" /> valor com um tempo de 12:30 horas. nos Estados Unidos Fuso horário do Leste dos EUA é serializado e desserializado, em seguida, nos EUA Fuso horário do Pacífico, o valor original de 12:30 horas. é ajustado para 9h30 para refletir a diferença entre os dois fusos horários.  
  
-Se a <see cref="T:System.DateTime" /> valor que é serializado representa uma hora inválida no fuso horário local. Nesse caso, o <see cref="M:System.DateTime.ToFileTime" /> método ajusta restaurado <see cref="T:System.DateTime" /> valor para que ele represente uma hora válida no fuso horário local.  
  
Por exemplo, a transição da hora padrão para o horário de verão ocorre no fuso horário do Pacífico dos EUA em 14 de março de 2010, às 02h00, quando a hora avança uma hora, para 03h00. Este intervalo de hora é uma hora inválida, ou seja, um intervalo de hora que não existe nesse fuso horário. O exemplo a seguir mostra que, quando um horário que está dentro desse intervalo é convertido em um valor inteiro longo, o <see cref="M:System.DateTime.ToFileTime" /> método e, em seguida, é restaurado pelo <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> método, o valor original é ajustado para se tornar uma hora válida. É possível determinar se um valor de data e hora específico podem estar sujeito à modificação passando-o para o método <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />, como o exemplo ilustra.  
  
[! código csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)] [! código vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToFileTimeUtc" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTimeUtc">
      <MemberSignature Language="C#" Value="public long ToFileTimeUtc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTimeUtc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTimeUtc" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTimeUtc () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTimeUtc();" />
      <MemberSignature Language="F#" Value="member this.ToFileTimeUtc : unit -&gt; int64" Usage="dateTime.ToFileTimeUtc " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte o valor do objeto <see cref="T:System.DateTime" /> atual para uma hora de arquivo do Windows.</summary>
        <returns>O valor do objeto <see cref="T:System.DateTime" /> atual expresso como uma hora de arquivo do Windows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma hora de arquivo do Windows é um valor de 64 bits que representa o número de intervalos de 100 nanossegundos desde a meia-noite de 12h00, 1º de janeiro de 1601 A.D. (C.E.) Tempo Universal Coordenado (UTC). O Windows usa uma hora de arquivo a ser registrada quando um aplicativo cria, acessa ou grava em um arquivo.  
  
 O <xref:System.DateTime.ToFileTimeUtc%2A> usa o <xref:System.DateTime.Kind%2A> propriedade para determinar se atual <xref:System.DateTime> objeto é um tipo não especificado de tempo que é tratado como uma hora UTC, uma hora UTC ou a hora local. Se for uma hora local, ele converte a hora em UTC antes de executar a conversão para uma hora de arquivo do Windows.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">A hora do arquivo resultante representaria uma data e hora antes da meia-noite, 12:00, de 1º de janeiro de 1601, C.E. UTC.</exception>
        <block subset="none" type="usage">
          <para>O <see cref="M:System.DateTime.ToFileTimeUtc" /> método, às vezes, é usado para converter uma hora local para UTC e, subsequentemente, restaurá-lo chamando o <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" /> método seguido o <see cref="M:System.DateTime.ToLocalTime" /> método. No entanto, se a hora original representa uma hora inválida no fuso horário local, os dois valores de hora local não serão iguais. Para obter mais informações, consulte o <see cref="M:System.DateTime.ToLocalTime" /> método.</para>
        </block>
        <altmember cref="M:System.DateTime.ToFileTime" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTime ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToLocalTime();" />
      <MemberSignature Language="F#" Value="member this.ToLocalTime : unit -&gt; DateTime" Usage="dateTime.ToLocalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte o valor do objeto <see cref="T:System.DateTime" /> atual para a hora local.</summary>
        <returns>Um objeto cuja propriedade <see cref="P:System.DateTime.Kind" /> é <see cref="F:System.DateTimeKind.Local" />, e cujo valor é o horário local equivalente ao valor do objeto <see cref="T:System.DateTime" />, ou <see cref="F:System.DateTime.MaxValue" />, se o valor convertido for muito grande para ser representado por um objeto <see cref="T:System.DateTime" />, ou <see cref="F:System.DateTime.MinValue" />, se o valor convertido for muito pequeno para ser representado por um objeto <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A hora local é igual ao tempo o tempo Universal Coordenado (UTC) e o deslocamento do UTC. Para obter mais informações sobre a diferença UTC, consulte <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>. A conversão também leva em consideração a regra de horário de verão que aplica-se a hora representada por atual <xref:System.DateTime> objeto.  
  
> [!IMPORTANT]
>  Na [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemas, o <xref:System.DateTime.ToLocalTime%2A> método reconhece somente a regra de ajuste atual ao converter de UTC em hora local. Como resultado, as conversões para períodos antes da regra de ajuste atual entrar em vigor podem não refletir precisamente a diferença entre UTC e a hora local.  
  
 Começando com o .NET Framework versão 2.0, o valor retornado pela <xref:System.DateTime.ToLocalTime%2A> método é determinado pelo <xref:System.DateTime.Kind%2A> propriedade da atual <xref:System.DateTime> objeto. A tabela a seguir descreve os possíveis resultados.  
  
|Tipo|Resultados|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|Esta instância de <xref:System.DateTime> é convertido em hora local.|  
|<xref:System.DateTimeKind.Local>|Nenhuma conversão é executada.|  
|<xref:System.DateTimeKind.Unspecified>|Esta instância do <xref:System.DateTime> será considerado como uma hora UTC, e a conversão é executada como se <xref:System.DateTime.Kind%2A> foram <xref:System.DateTimeKind.Utc>.|  
  
> [!NOTE]
>  O <xref:System.DateTime.ToLocalTime%2A> método converte um <xref:System.DateTime> valor de UTC para a hora local. Para converter a hora em qualquer fuso horário designado para o horário local, use o <xref:System.TimeZoneInfo.ConvertTime%2A?displayProperty=nameWithType> método.  
  
 O valor retornado pela conversão é um <xref:System.DateTime> cujos <xref:System.DateTime.Kind%2A> propriedade sempre retorna <xref:System.DateTimeKind.Local>. Consequentemente, um resultado válido é retornado, mesmo se <xref:System.DateTime.ToLocalTime%2A> é aplicado repetidamente no mesmo <xref:System.DateTime>.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.ToLocalTime%2A> método. Observe que a saída exata depende da cultura atual e o fuso horário local do sistema no qual ele é executado.  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 O exemplo a seguir usa o método <xref:System.DateTime.SpecifyKind%2A> para demonstrar como a propriedade <xref:System.DateTime.Kind%2A> influencia os métodos de conversão <xref:System.DateTime.ToLocalTime%2A> e <xref:System.DateTime.ToUniversalTime%2A>.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Você pode usar o <see cref="M:System.DateTime.ToLocalTime" /> método para restaurar um data local e o valor de tempo que foi convertida para UTC, o <see cref="M:System.DateTime.ToUniversalTime" /> ou <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" /> método. No entanto, se a hora original representa uma hora inválida no fuso horário local, ele não corresponder o valor restaurado. Quando o <see cref="M:System.DateTime.ToLocalTime" /> método converte um horário de UTC para o fuso horário local, ele também ajusta o tempo de forma que é válido no fuso horário local.  
  
Por exemplo, a transição da hora padrão para o horário de verão ocorre no fuso horário do Pacífico dos EUA em 14 de março de 2010, às 02h00, quando a hora avança uma hora, para 03h00. Este intervalo de hora é uma hora inválida, ou seja, um intervalo de hora que não existe nesse fuso horário. O exemplo a seguir mostra que, quando um horário que está dentro desse intervalo é convertido em UTC pela <see cref="M:System.DateTime.ToUniversalTime" /> método e, em seguida, é restaurado pelo <see cref="M:System.DateTime.ToLocalTime" /> método, o valor original é ajustado para se tornar uma hora válida. É possível determinar se um valor de data e hora específico podem estar sujeito à modificação passando-o para o método <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />, como o exemplo ilustra.  
  
[! código csharp[System.DateTime.ToLocalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolocaltime/cs/tolocaltime1.cs#1)] [! código vb[System.DateTime.ToLocalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolocaltime/vb/tolocaltime1.vb#1)]</para>
        </block>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.TimeZone.GetDaylightChanges(System.Int32)" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToLongDateString">
      <MemberSignature Language="C#" Value="public string ToLongDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongDateString();" />
      <MemberSignature Language="F#" Value="member this.ToLongDateString : unit -&gt; string" Usage="dateTime.ToLongDateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte o valor do atual objeto <see cref="T:System.DateTime" /> na representação de cadeia de caracteres de data completa equivalente.</summary>
        <returns>Uma cadeia de caracteres que contém a representação de cadeia de caracteres de data completa do atual objeto <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor do atual <xref:System.DateTime> objeto é formatado usando o padrão definido pelo <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> propriedade associada a cultura do thread atual. O valor de retorno é idêntico ao valor retornado pela especificação de "D" [cadeia de caracteres de formato DateTime padrão](~/docs/standard/base-types/standard-date-and-time-format-strings.md) com o <xref:System.DateTime.ToString%28System.String%29> método.  
  
> [!IMPORTANT]
>  A cadeia de caracteres retornada pelo <xref:System.DateTime.ToLongDateString%2A> método é sensível à cultura. Ela reflete o padrão definido pela cultura atual <xref:System.Globalization.DateTimeFormatInfo> objeto. Por exemplo, para a cultura en-US, o padrão de data por extenso padrão é "dddd, MMMMdd, yyyy"; para a cultura de-DE, ele é "dddd, d. MMMMyyyy"; para a cultura ja-JP, ele é "aaaa '?' M'? ' 1!d '?'". A cadeia de caracteres de formato específico em um determinado computador também pode ser personalizada para que ele é diferente da cadeia de caracteres de formato de data por extenso padrão.  
  
 Para obter mais informações sobre a cultura do thread atual, consulte o <xref:System.Threading.Thread.CurrentCulture%2A> propriedade. Para obter mais informações sobre caracteres de formato, padrões de formato e a saída que eles produzem, consulte o [tipos de formatação](~/docs/standard/base-types/formatting-types.md) tópico. Para obter mais informações sobre como alterar o padrão de formato associado a um caractere de formato, consulte a classe <xref:System.Globalization.DateTimeFormatInfo>.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.ToLongDateString%2A> método.  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Tipos de formatação no .NET</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora personalizado</related>
      </Docs>
    </Member>
    <Member MemberName="ToLongTimeString">
      <MemberSignature Language="C#" Value="public string ToLongTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongTimeString();" />
      <MemberSignature Language="F#" Value="member this.ToLongTimeString : unit -&gt; string" Usage="dateTime.ToLongTimeString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte o valor do atual objeto <see cref="T:System.DateTime" /> na representação de cadeia de caracteres de hora completa equivalente.</summary>
        <returns>Uma cadeia de caracteres que contém a representação de cadeia de caracteres de hora completa do atual objeto <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor do atual <xref:System.DateTime> objeto é formatado usando o padrão definido pelo <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A?displayProperty=nameWithType> propriedade associada a cultura do thread atual. O valor de retorno é idêntico ao valor retornado, especificando o "T" [cadeia de caracteres de formato de data e hora padrão](~/docs/standard/base-types/standard-date-and-time-format-strings.md) com o <xref:System.DateTime.ToString%28System.String%29> método.  
  
> [!IMPORTANT]
>  A cadeia de caracteres retornada pelo <xref:System.DateTime.ToLongTimeString%2A> método é sensível à cultura. Ela reflete o padrão definido pela <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> propriedade da cultura atual <xref:System.Globalization.DateTimeFormatInfo> objeto. Por exemplo, para a cultura en-US, o padrão de tempo padrão é "h:mm: ss tt"; para a cultura de-DE, é "Hh"; para a cultura ja-JP, ele é "H:mm: ss". A cadeia de caracteres de formato específico em um determinado computador também pode ser personalizada para que ele é diferente de cadeia de caracteres de formato padrão muito tempo.  
  
 Para obter mais informações sobre a cultura do thread atual, consulte o <xref:System.Threading.Thread.CurrentCulture%2A> propriedade. Para obter mais informações sobre caracteres de formato, padrões de formato e a saída que eles produzem, consulte o [tipos de formatação](~/docs/standard/base-types/formatting-types.md) tópico. Para obter mais informações sobre como alterar o padrão de formato associado a um caractere de formato, consulte a classe <xref:System.Globalization.DateTimeFormatInfo>.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.ToLongTimeString%2A> método.  
  
 [!code-csharp[System.DateTime.ToLongTimeString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolongtimestring/cs/sls.cs#1)]
 [!code-vb[System.DateTime.ToLongTimeString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolongtimestring/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Tipos de formatação no .NET</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora personalizado</related>
      </Docs>
    </Member>
    <Member MemberName="ToOADate">
      <MemberSignature Language="C#" Value="public double ToOADate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 ToOADate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToOADate" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOADate () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ToOADate();" />
      <MemberSignature Language="F#" Value="member this.ToOADate : unit -&gt; double" Usage="dateTime.ToOADate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte o valor dessa instância na data de Automação OLE equivalente.</summary>
        <returns>Um número de ponto flutuante de precisão dupla que contém uma data de automação OLE equivalente ao valor dessa instância.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma data de automação OLE é implementada como um número de ponto flutuante cujo componente integral é o número de dias antes ou depois da meia-noite, 30 de dezembro de 1899, e cujo componente fracionário representa a hora em que dia, dividido por 24. Por exemplo, meia-noite de 31 de dezembro de 1899 é representado por 1.0. 6 da manhã, 1 de janeiro de 1900 é representado por 2,25; meia-noite de 29 de dezembro de 1899 é representada por -1,0; e 6 da manhã, 29 de dezembro de 1899 é representada por -1,25.  
  
 A base data de automação OLE é meia-noite, 30 de dezembro de 1899. A data de automação OLE mínima é meia-noite, de 0100 1 de janeiro. O máximo data de automação OLE é o mesmo que <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, o último momento de 31 de dezembro 9999.  
  
 O <xref:System.DateTime.ToOADate%2A> método lança um <xref:System.OverflowException> se a instância atual representa uma data posterior <xref:System.DateTime.MinValue> e anterior à meia-noite no January1, 0100. No entanto, se o valor da instância atual for <xref:System.DateTime.MinValue>, o método retornará 0.  
  
 Para obter mais informações sobre a automação OLE, consulte o [biblioteca MSDN](http://go.microsoft.com/fwlink/?linkid=37118).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">O valor dessa instância não pode ser representado como uma Data de Automação OLE.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.DateTime.FromOADate(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="ToShortDateString">
      <MemberSignature Language="C#" Value="public string ToShortDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortDateString();" />
      <MemberSignature Language="F#" Value="member this.ToShortDateString : unit -&gt; string" Usage="dateTime.ToShortDateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte o valor do atual objeto <see cref="T:System.DateTime" /> na representação de cadeia de caracteres de data abreviada equivalente.</summary>
        <returns>Uma cadeia de caracteres que contém a representação de cadeia de caracteres de data abreviada do atual objeto <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor do atual <xref:System.DateTime> objeto é formatado usando o padrão definido pelo <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A?displayProperty=nameWithType> propriedade associada a cultura do thread atual. O valor de retorno é idêntico ao valor retornado pela especificação de "d" [cadeia de caracteres de formato DateTime padrão](~/docs/standard/base-types/standard-date-and-time-format-strings.md) com o <xref:System.DateTime.ToString%28System.String%29> método.  
  
> [!IMPORTANT]
>  A cadeia de caracteres retornada pelo <xref:System.DateTime.ToShortDateString%2A> método é sensível à cultura. Ela reflete o padrão definido pela cultura atual <xref:System.Globalization.DateTimeFormatInfo> objeto. Por exemplo, para a cultura en-US, o padrão de data abreviada padrão é "M/aaaa"; para a cultura de-DE, é "aaaa. MM.yyyy"; para a cultura ja-JP, ele é "aaaa/M/d". A cadeia de caracteres de formato específico em um determinado computador também pode ser personalizada para que ele é diferente da cadeia de caracteres de formato de data abreviada padrão.  
  
 Para obter mais informações sobre a cultura do thread atual, consulte o <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> propriedade. Para obter mais informações sobre caracteres de formato, padrões de formato e a saída que eles produzem, consulte o [tipos de formatação](~/docs/standard/base-types/formatting-types.md) tópico. Para obter mais informações sobre como alterar o padrão de formato associado a um caractere de formato, consulte a classe <xref:System.Globalization.DateTimeFormatInfo>.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.ToShortDateString%2A> método. Ele também mostra que o resultado da chamada a <xref:System.DateTime.ToShortDateString%2A> método é idêntico ao chamar o <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> método com como o parâmetro de formato "d".  
  
 [!code-csharp[System.DateTime.ToShortDateString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/cs/ToShortDateString.cs#1)]
 [!code-vb[System.DateTime.ToShortDateString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/vb/ToShortDateString.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Tipos de formatação no .NET</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora personalizado</related>
      </Docs>
    </Member>
    <Member MemberName="ToShortTimeString">
      <MemberSignature Language="C#" Value="public string ToShortTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortTimeString();" />
      <MemberSignature Language="F#" Value="member this.ToShortTimeString : unit -&gt; string" Usage="dateTime.ToShortTimeString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte o valor do objeto <see cref="T:System.DateTime" /> atual na representação de cadeia de caracteres de hora abreviada equivalente.</summary>
        <returns>Uma cadeia de caracteres que contém a representação de cadeia de caracteres de hora abreviada do objeto <see cref="T:System.DateTime" /> atual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor do atual <xref:System.DateTime> objeto é formatado usando o padrão definido pelo <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A?displayProperty=nameWithType> propriedade associada a cultura do thread atual. O valor de retorno é idêntico ao valor retornado, especificando o "t" [cadeia de caracteres de formato DateTime padrão](~/docs/standard/base-types/standard-date-and-time-format-strings.md) com o <xref:System.DateTime.ToString%28System.String%29> método.  
  
> [!IMPORTANT]
>  A cadeia de caracteres retornada pelo <xref:System.DateTime.ToShortTimeString%2A> método é sensível à cultura. Ela reflete o padrão definido pela cultura atual <xref:System.Globalization.DateTimeFormatInfo> objeto. Por exemplo, para a cultura en-US, o padrão de curto período de tempo padrão é "h:mm tt"; para a cultura de-DE, é "Hh: mm"; para a cultura ja-JP, ele é "H:mm". A cadeia de caracteres de formato específico em um determinado computador também pode ser personalizada para que ele é diferente de cadeia de caracteres de formato padrão curto período de tempo.  
  
 Para obter mais informações sobre a cultura do thread atual, consulte o <xref:System.Threading.Thread.CurrentCulture%2A> propriedade. Para obter mais informações sobre caracteres de formato, padrões de formato e a saída que eles produzem, consulte o [tipos de formatação](~/docs/standard/base-types/formatting-types.md) tópico. Para obter mais informações sobre como alterar o padrão de formato associado a um caractere de formato, consulte a classe <xref:System.Globalization.DateTimeFormatInfo>.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.ToShortTimeString%2A> método.  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Tipos de formatação no .NET</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora personalizado</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converte o valor do atual objeto <see cref="T:System.DateTime" /> na representação de cadeia de caracteres equivalente.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dateTime.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte o valor do atual objeto <see cref="T:System.DateTime" /> na representação de cadeia de caracteres equivalente usando as convenções de formatação da cultura atual.</summary>
        <returns>Uma representação de cadeia de caracteres do valor do atual objeto <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor do atual <xref:System.DateTime> objeto é formatado usando o Data geral e o especificador de formato de hora ('G'). Para formatá-la usando uma data específica e o especificador de formato de hora, chame o <xref:System.DateTime.ToString%28System.String%29> método. Para formatá-la usando o Data geral e o especificador de formato de hora ('G') para uma cultura específica, chame o <xref:System.DateTime.ToString%28System.IFormatProvider%29> método. Para formatá-la usando uma data específica e o especificador de formato de hora e as convenções de uma cultura específica, chame o <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> método.  
  
 Este método usa informações de formatação derivadas da cultura atual. Em particular, ele combina as cadeias de caracteres de formato personalizado retornadas pela <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> e <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> propriedades da <xref:System.Globalization.DateTimeFormatInfo> objeto retornado pelo `Thread.CurrentThread.CurrentCulture.DateTimeFormat` propriedade. Para obter mais informações, consulte <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>. Outras sobrecargas do <xref:System.DateTime.ToString%2A> método permitem que você especifique a cultura cuja formatação para usar e para definir o padrão de saída do <xref:System.DateTime> valor.  
  
   
  
## Examples  
 O exemplo a seguir ilustra como a representação de cadeia de caracteres de um <xref:System.DateTime> valor retornado pelo <xref:System.DateTime.ToString> método depende a cultura do thread atual. Ele muda a cultura do thread atual de en-US para fr-FR ao ja-JP. e, em cada caso, chamadas a <xref:System.DateTime.ToString> método para retornar a representação de cadeia de caracteres de um valor de data e hora usando aquela cultura.  
  
 [!code-csharp[System.DateTime.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.DateTime.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">A data e hora está fora do intervalo de datas suportadas pelo calendário usado pela cultura atual.</exception>
        <block subset="none" type="usage">
          <para>O <see cref="M:System.DateTime.ToString" /> método retorna a representação de cadeia de caracteres de data e hora no calendário usado pela cultura atual. Caso o valor da instância <see cref="T:System.DateTime" /> atual seja anterior a <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> ou posterior a <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, o método lança um <see cref="T:System.ArgumentOutOfRangeException" />. O exemplo a seguir fornece uma ilustração. Ele tenta formatar uma data que está fora do intervalo da <see cref="T:System.Globalization.HijriCalendar" /> classe quando a cultura atual é árabe (Síria).  
  
[! código csharp[System.DateTime.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception2.cs#2)] [! código vb[System.DateTime.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception2.vb#2)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="dateTime.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Um objeto que fornece informações de formatação específicas de cultura.</param>
        <summary>Converte o valor do objeto <see cref="T:System.DateTime" /> atual para sua representação de cadeia de caracteres equivalente usando as informações de formato específicas da cultura especificada.</summary>
        <returns>Uma representação de cadeia de caracteres do valor do objeto <see cref="T:System.DateTime" /> atual, conforme especificado por <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor do atual <xref:System.DateTime> objeto é formatado usando o Data geral e o especificador de formato de hora ('G'), que formata a saída usando o padrão de data abreviada e o padrão de muito tempo.  
  
 O formato de data abreviada e padrão de hora completa é definido pelo `provider` parâmetro. O parâmetro `provider` pode ser um dos seguintes:  
  
-   Um objeto <xref:System.Globalization.CultureInfo> que representa a cultura cujas convenções de formatação devem ser refletidas na cadeia de caracteres retornada. O objeto <xref:System.Globalization.DateTimeFormatInfo> retornado pela propriedade <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> define a formatação da cadeia de caracteres retornada.  
  
-   Um objeto <xref:System.Globalization.DateTimeFormatInfo> que define o formato dos dados de data e hora.  
  
-   Um objeto personalizado que implementa a interface <xref:System.IFormatProvider>. O método <xref:System.IFormatProvider.GetFormat%2A> retorna um objeto <xref:System.Globalization.DateTimeFormatInfo> que fornece informações de formatação.  
  
 Se `provider` está `null`, o <xref:System.Globalization.DateTimeFormatInfo> objeto associado com a cultura atual é usado. Para obter mais informações, consulte <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 O exemplo a seguir exibe a representação de cadeia de caracteres de data e hora usando <xref:System.Globalization.CultureInfo> objetos que representam diferentes cinco culturas.  
  
 [!code-csharp[System.DateTime.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString4.cs#3)]
 [!code-vb[System.DateTime.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString4.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">A data e hora estão fora do intervalo de datas com suporte no calendário usado por <paramref name="provider" />.</exception>
        <block subset="none" type="usage">
          <para>O <see cref="M:System.DateTime.ToString(System.IFormatProvider)" /> método retorna a representação de cadeia de caracteres de data e hora no calendário usado pela cultura representada pelo <paramref name="provider" /> parâmetro. O calendário é definido pela propriedade <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />. Caso o valor da instância <see cref="T:System.DateTime" /> atual seja anterior a <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> ou posterior a <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, o método lança um <see cref="T:System.ArgumentOutOfRangeException" />. O exemplo a seguir fornece uma ilustração. Ele tenta formatar uma data que está fora do intervalo da <see cref="T:System.Globalization.JapaneseCalendar" /> classe.  
  
[! código csharp[System.DateTime.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception1.cs#1)] [! código vb[System.DateTime.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception1.vb#1)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="dateTime.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Uma cadeia de caracteres de formato de data e hora padrão ou personalizada.</param>
        <summary>Converte o valor do atual objeto <see cref="T:System.DateTime" /> na representação de cadeia de caracteres equivalente usando o formato especificado e as convenções de formatação da cultura atual.</summary>
        <returns>Uma representação de cadeia de caracteres do valor do objeto <see cref="T:System.DateTime" /> atual, conforme especificado por <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.ToString%28System.String%29> método retorna a representação de cadeia de caracteres de um valor de data e hora em um formato específico que usa as convenções de formatação da cultura atual; para obter mais informações, consulte <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
 O `format` o parâmetro deve conter um caractere de especificador de formato único (consulte [padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) ou um padrão de formato personalizado (consulte [personalizado de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/custom-date-and-time-format-strings.md) ) que define o formato de cadeia de caracteres retornada. Se `format` é `null` ou uma cadeia de caracteres vazia, o especificador de formato geral, 'G' é usada.  
  
 Alguns usos desse método incluem:  
  
-   Obtendo uma cadeia de caracteres que exibe a data e hora em formato de hora e data abreviada da cultura atual. Para fazer isso, você deve usar o especificador de formato "G".  
  
-   Obtendo uma cadeia de caracteres que contém apenas o mês e ano. Para fazer isso, você deve usar a cadeia de caracteres de formato "MM/AAAA". A cadeia de caracteres de formato usa o separador de data da cultura atual.  
  
-   Obtendo uma cadeia de caracteres que contém a data e hora em um formato específico. Por exemplo, o "MM/dd/yyyyHH:mm" cadeia de caracteres de formato exibe a cadeia de caracteres de data e hora em um formato fixo como "19 2013 / / 03 / / 18:06". Usa a cadeia de caracteres de formato "/" como um separador de data fixa, independentemente das configurações específicas da cultura.  
  
-   Obtendo uma data em um formato condensado que pode ser usado para serializar uma cadeia de caracteres de data. Por exemplo, a cadeia de caracteres de formato "AAAAMMDD" exibe um ano de quatro dígitos seguido por um mês de dois dígitos e um dia de dois dígitos com Nenhum separador de data.  
  
 O exemplo a seguir usa esses três cadeias de caracteres de formato para exibir um valor de data e hora usando as convenções das culturas en-US e fr-FR.  
  
 [!code-csharp[System.DateTime.ToString#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring5.cs#5)]
 [!code-vb[System.DateTime.ToString#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring5.vb#5)]  
  
   
  
## Examples  
 O exemplo a seguir usa cada padrão de data e cadeias de caracteres de formato de hora e uma seleção de data personalizada e cadeias de caracteres de formato de hora para exibir a representação de cadeia de caracteres de um <xref:System.DateTime> valor. A cultura do thread atual para o exemplo é en-US.  
  
 [!code-csharp[System.DateTime.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString2.cs#2)]
 [!code-vb[System.DateTime.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">O tamanho de <paramref name="format" /> é 1, e ele não é um dos caracteres especificadores de formato definidos para <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
- ou - 
 <paramref name="format" /> não contém um padrão de formato personalizado válido.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">A data e hora está fora do intervalo de datas suportadas pelo calendário usado pela cultura atual.</exception>
        <block subset="none" type="usage">
          <para>O <see cref="M:System.DateTime.ToString(System.String)" /> método retorna a representação de cadeia de caracteres de data e hora no calendário usado pela cultura atual. Caso o valor da instância <see cref="T:System.DateTime" /> atual seja anterior a <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> ou posterior a <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, o método lança um <see cref="T:System.ArgumentOutOfRangeException" />. O exemplo a seguir fornece uma ilustração. Ele tenta formatar uma data que está fora do intervalo da <see cref="T:System.Globalization.HebrewCalendar" /> classe quando a cultura atual é hebraico (Israel).  
  
[! código csharp[System.DateTime.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception3.cs#3)] [! código vb[System.DateTime.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception3.vb#3)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Tipos de formatação no .NET</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora padrão</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora personalizado</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="dateTime.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Uma cadeia de caracteres de formato de data e hora padrão ou personalizada.</param>
        <param name="provider">Um objeto que fornece informações de formatação específicas de cultura.</param>
        <summary>Converte o valor do atual objeto <see cref="T:System.DateTime" /> na representação de cadeia de caracteres equivalente usando o formato especificado e as informações de formato específicas da cultura.</summary>
        <returns>Uma representação de cadeia de caracteres do valor do atual objeto <see cref="T:System.DateTime" />, conforme especificado por <paramref name="format" /> e <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `format` parâmetro pode conter um caractere de especificador de formato único (consulte [padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) ou um padrão de formato personalizado (consulte [personalizado de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/custom-date-and-time-format-strings.md)). Se `format` é `null` ou uma cadeia de caracteres vazia (""), o especificador de formato padrão "G", é usado.  
  
 O `provider` parâmetro define o padrão que corresponde aos especificadores de formato padrão, bem como os símbolos e os nomes dos componentes de data e hora. O parâmetro `provider` pode ser um dos seguintes:  
  
-   Um objeto <xref:System.Globalization.CultureInfo> que representa a cultura cujas convenções de formatação devem ser refletidas na cadeia de caracteres retornada. O objeto <xref:System.Globalization.DateTimeFormatInfo> retornado pela propriedade <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> define a formatação da cadeia de caracteres retornada.  
  
-   Um objeto <xref:System.Globalization.DateTimeFormatInfo> que define o formato dos dados de data e hora.  
  
-   Um objeto personalizado que implementa a interface <xref:System.IFormatProvider>. O método <xref:System.IFormatProvider.GetFormat%2A> retorna um objeto <xref:System.Globalization.DateTimeFormatInfo> que fornece informações de formatação.  
  
 Se `provider` está `null`, o <xref:System.Globalization.DateTimeFormatInfo> associados ao atual cultura é usada. Para obter mais informações, consulte <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 O exemplo a seguir usa cada uma das cadeias de caracteres de formato de hora padrão de data para exibir a representação de cadeia de caracteres de data e hora para quatro culturas diferentes.  
  
 [!code-csharp[System.DateTime.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring3.cs#4)]
 [!code-vb[System.DateTime.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring3.vb#4)]  
  
 O exemplo a seguir demonstra maneiras diferentes de formatação de um <xref:System.DateTime> usando a constante de valor <xref:System.Globalization.DateTimeFormatInfo>.  
  
 [!code-cpp[Classic DateTime.ToString2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DateTime.ToString2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CS/source.cs#1)]
 [!code-vb[Classic DateTime.ToString2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">O tamanho de <paramref name="format" /> é 1, e ele não é um dos caracteres especificadores de formato definidos para <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
- ou - 
 <paramref name="format" /> não contém um padrão de formato personalizado válido.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">A data e hora estão fora do intervalo de datas com suporte no calendário usado por <paramref name="provider" />.</exception>
        <block subset="none" type="usage">
          <para>O <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" /> método retorna a representação de cadeia de caracteres de data e hora no calendário usado pelo <paramref name="provider" /> parâmetro. O calendário é definido pela propriedade <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />. Caso o valor da instância <see cref="T:System.DateTime" /> atual seja anterior a <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> ou posterior a <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, o método lança um <see cref="T:System.ArgumentOutOfRangeException" />. O exemplo a seguir fornece uma ilustração. Ele tenta formatar uma data que está fora do intervalo da <see cref="T:System.Globalization.UmAlQuraCalendar" /> classe.  
  
[! código csharp[System.DateTime.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception4.cs#4)] [! código vb[System.DateTime.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception4.vb#4)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Tipos de formatação no .NET</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora padrão</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora personalizado</related>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">Exemplo: .NET Framework 4 Formatting Utility&amp;lt;2}&amp;lt;1}</related>
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTime ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToUniversalTime();" />
      <MemberSignature Language="F#" Value="member this.ToUniversalTime : unit -&gt; DateTime" Usage="dateTime.ToUniversalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte o valor do atual objeto <see cref="T:System.DateTime" /> em UTC (Tempo Universal Coordenado).</summary>
        <returns>Um objeto cuja propriedade <see cref="P:System.DateTime.Kind" /> é <see cref="F:System.DateTimeKind.Utc" />, e cujo valor é o UTC equivalente ao valor do atual objeto <see cref="T:System.DateTime" />, ou <see cref="F:System.DateTime.MaxValue" /> se o valor convertido for muito grande para ser representado por um objeto <see cref="T:System.DateTime" />, ou <see cref="F:System.DateTime.MinValue" /> se o valor convertido for muito pequeno para ser representado por um objeto <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O tempo Universal Coordenado (UTC) é igual à hora local, menos o deslocamento do UTC. Para obter mais informações sobre a diferença UTC, consulte <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>. A conversão também leva em consideração a regra de horário de verão que aplica-se a hora representada por atual <xref:System.DateTime> objeto.  
  
> [!IMPORTANT]
>  Na [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemas, o <xref:System.DateTime.ToUniversalTime%2A> método reconhece somente a regra de ajuste atual ao converter da hora local em UTC. Como resultado, as conversões para períodos antes da regra de ajuste atual entrar em vigor podem não refletir precisamente a diferença entre a hora local e o UTC.  
  
 Começando com o .NET Framework versão 2.0, o valor retornado pela <xref:System.DateTime.ToUniversalTime%2A> método é determinado pelo <xref:System.DateTime.Kind%2A> propriedade da atual <xref:System.DateTime> objeto. A tabela a seguir descreve os possíveis resultados.  
  
|Tipo|Resultados|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|Nenhuma conversão é executada.|  
|<xref:System.DateTimeKind.Local>|Atual <xref:System.DateTime> objeto é convertido em UTC.|  
|<xref:System.DateTimeKind.Unspecified>|O atual <xref:System.DateTime> objeto é considerado como uma hora local e a conversão é executada como se <xref:System.DateTime.Kind%2A> foram <xref:System.DateTimeKind.Local>.|  
  
> [!NOTE]
>  O <xref:System.DateTime.ToUniversalTime%2A> método converte um <xref:System.DateTime> valor de hora local para UTC. Para converter a hora em um fuso horário não local para UTC, use o <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> método. Para converter uma hora cujo deslocamento do UTC é conhecido, use o <xref:System.DateTimeOffset.ToUniversalTime%2A> método.  
  
 Se o valor de data e hora da instância for um horário ambíguo, este método assume que é um horário padrão. (Um horário ambíguo é um que pode mapear para um horário padrão ou para um horário de verão no fuso horário local) Se o valor de data e hora da instância é uma hora inválida, esse método simplesmente subtrai a hora local do UTC do fuso horário local de deslocamento para retornar o UTC. (Uma hora inválida é que não existe devido à aplicação de regras de ajuste de horário de verão).  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.ToUniversalTime%2A> método.  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 O exemplo a seguir usa o método <xref:System.DateTime.SpecifyKind%2A> para demonstrar como a propriedade <xref:System.DateTime.Kind%2A> influencia os métodos de conversão <xref:System.DateTime.ToLocalTime%2A> e <xref:System.DateTime.ToUniversalTime%2A>.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>O <see cref="M:System.DateTime.ToUniversalTime" /> método às vezes é usado para converter uma hora local em UTC. O <see cref="M:System.DateTime.ToLocalTime" /> método é chamado para restaurar a hora local original. No entanto, se a hora original representa uma hora inválida no fuso horário local, os dois valores de hora local não serão iguais. Para obter mais informações e um exemplo, consulte o <see cref="M:System.DateTime.ToLocalTime" /> método.  
  
Na [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemas, o <see cref="M:System.DateTime.ToUniversalTime" /> método reconhece somente a regra ajuste atual para o fuso horário local, o qual ele se aplica a todas as datas, incluindo datas de nível inferior (ou seja, as datas anteriores a data inicial de ajuste atual regra). Aplicativos em execução no [!INCLUDE[winxp](~/includes/winxp-md.md)] que requer historicamente precisa data local e cálculos de tempo devem contornar esse comportamento usando o <see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" /> método para recuperar um <see cref="T:System.TimeZoneInfo" /> que corresponde ao fuso horário local do objeto e chamando seu <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> método.  
  
O exemplo a seguir ilustra a diferença entre o <see cref="M:System.DateTime.ToUniversalTime" /> e <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> métodos em um [!INCLUDE[winxp](~/includes/winxp-md.md)] sistema nos EUA Fuso horário do Pacífico. As primeira duas chamadas de método se aplica a regra de ajuste de fuso horário atual (que entrou em vigor em 2007) para uma data em 2006. A regra de ajuste atual fornece a transição para o horário de verão no segundo domingo de março; a regra anterior, que estava em vigor em 2006, fornecido para a transição para o horário de verão para ocorrer no domingo primeiro de abril. Somente a terceira chamada de método com precisão executa essa data histórica e o tempo de conversão.  
  
[! código csharp[System.DateTime.ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.touniversaltime/cs/touniversaltime.cs#1)] [! código vb[System.DateTime.ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.touniversaltime/vb/touniversaltime.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToLocalTime" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="dateTime.TryFormat (destination, charsWritten, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converte a representação de cadeia de caracteres especificada de uma data e hora no equivalente de <see cref="T:System.DateTime" /> e retorna um valor que indica se a conversão foi bem-sucedida.</summary>
        <altmember cref="Overload:System.DateTime.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.DateTime.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.DateTime.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Uma cadeia de caracteres contendo uma data e hora a ser convertida.</param>
        <param name="result">Quando esse método é retornado, ele contém o valor <see cref="T:System.DateTime" /> equivalente à data e à hora contidas em <c>s</c>, caso a conversão tenha sido bem-sucedida ou <see cref="F:System.DateTime.MinValue" />, caso a conversão tenha falhado. A conversão falhará se o parâmetro <c>s</c> for <see langword="null" />, for uma cadeia de caracteres vazia ("") ou não contiver uma representação de cadeia de caracteres válida de uma data e hora. Este parâmetro é passado não inicializado.</param>
        <summary>Converte a representação de cadeia de caracteres especificada de uma data e hora no equivalente de <see cref="T:System.DateTime" /> e retorna um valor que indica se a conversão foi bem-sucedida.</summary>
        <returns>
          <see langword="true" /> caso o parâmetro <paramref name="s" /> tenha sido convertido com êxito; do contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> método é semelhante de <xref:System.DateTime.Parse%28System.String%29?displayProperty=nameWithType> método, exceto que o <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> método não lançará uma exceção se a conversão falhar.  
  
 A cadeia de caracteres `s` é analisado usando informações de formatação atual <xref:System.Globalization.DateTimeFormatInfo> objeto, que é fornecido implicitamente pela cultura do thread atual.  
  
 Esse método tentará ignorar os dados não reconhecidos, se possível e preenche na ausência de informações com a data atual do ano, mês e dia. Se `s` contém apenas uma data e a hora em nenhum, este método assume a hora é meia-noite. Se `s` inclui um componente de data com um ano de dois dígitos, ele será convertido em um ano no calendário atual da cultura atual, com base no valor da <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> propriedade. Qualquer à esquerda, internos, à direita ou caractere de espaço em branco no `s` será ignorado. A data e hora podem ser agrupados com um par de à direita e caracteres de sinal de número ('#', U + 0023) e podem ser seguidas por um ou mais NULL (u+0000) de caracteres.  
  
 Porque o <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> método tenta analisar a representação de cadeia de caracteres de uma data e hora usando as regras de formatação da cultura atual, a tentativa de analisar uma cadeia de caracteres específica por diferentes culturas pode falhar ou retornar resultados diferentes. Se uma data específica e o formato de hora serão analisados em localidades diferentes, use o <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método ou uma das sobrecargas do <xref:System.DateTime.TryParseExact%2A> método e fornecer um especificador de formato.  
  
 Se `s` é a representação de cadeia de caracteres de um dia bissexto em um ano bissexto no calendário atual, o método analisa `s` com êxito. Se `s` é a representação de cadeia de caracteres de um dia bissexto em um não-ano bissexto no calendário atual da cultura atual, a operação de análise falha e o método retornará `false`.  
  
 Se `s` não contém nenhuma informação de fuso horário, `result` contém uma <xref:System.DateTime> valor cuja <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> quando o método retornar. Se a cadeia de caracteres a ser analisada contiver informações de fuso horário `result` contém uma <xref:System.DateTime> valor cuja <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Local?displayProperty=nameWithType> quando o método retornar.  
  
   
  
## Examples  
 O exemplo a seguir passa um número de cadeias de caracteres de data e hora para o <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> método.  
  
 [!code-cpp[System.DateTime.TryParse#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.TryParse/cpp/datetime.tryparse1.cpp#1)]
 [!code-csharp[System.DateTime.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/TryParse1.cs#1)]
 [!code-vb[System.DateTime.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/TryParse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Formatação é influenciada pelas propriedades do atual <see cref="T:System.Globalization.DateTimeFormatInfo" /> objeto, que, por padrão, são derivados de **opções regionais e idiomas** item no painel de controle. O <see cref="Overload:System.DateTime.TryParse" /> método inesperadamente pode falhará e retornará <see langword="False" /> se atual <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> e <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> são definidas com o mesmo valor.</para>
        </block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analisando cadeias de caracteres de data e hora no .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora padrão</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora personalizado</related>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">Exemplo: .NET Framework 4 Formatting Utility&amp;lt;2}&amp;lt;1}</related>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParse (s, provider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParse (s, provider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Uma cadeia de caracteres contendo uma data e hora a ser convertida.</param>
        <param name="provider">Um objeto que fornece informações de formatação específicas à cultura sobre <c>s</c>.</param>
        <param name="styles">Uma combinação bit a bit dos valores de enumeração que define como interpretar a data analisada em relação ao fuso horário atual ou à data atual. Um valor típico a ser especificado é <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <param name="result">Quando esse método é retornado, ele contém o valor <see cref="T:System.DateTime" /> equivalente à data e à hora contidas em <c>s</c>, caso a conversão tenha sido bem-sucedida ou <see cref="F:System.DateTime.MinValue" />, caso a conversão tenha falhado. A conversão falhará se o parâmetro <c>s</c> for <see langword="null" />, for uma cadeia de caracteres vazia ("") ou não contiver uma representação de cadeia de caracteres válida de uma data e hora. Este parâmetro é passado não inicializado.</param>
        <summary>Converte a representação de cadeia de caracteres especificada de uma data e hora no equivalente de <see cref="T:System.DateTime" /> usando as informações de formato específicas da cultura e estilo de formatação especificados e retorna um valor que indica se a conversão foi bem-sucedida.</summary>
        <returns>
          <see langword="true" /> caso o parâmetro <paramref name="s" /> tenha sido convertido com êxito; do contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método analisa uma cadeia de caracteres que pode conter informações de data, hora e fuso horário. É semelhante para o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método, exceto que o <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> método não lançará uma exceção se a conversão falhar.  
  
 Esse método tenta ignorar dados não reconhecidos e análise `s` completamente. Se `s` contém uma hora, mas nenhuma data, o método por padrão substitui a data atual ou, se `styles` inclui as <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault> sinalizador, ele substitui `DateTime.Date.MinValue`. Se `s` contém uma data, mas nenhuma hora, 12:00 meia-noite é usada como a hora padrão. Se uma data presente, mas seu componente de ano consiste em apenas dois dígitos, ele será convertido em um ano na `provider` calendário atual do parâmetro com base no valor da <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> propriedade. Qualquer à esquerda, internos, à direita ou caracteres de espaço em branco em `s` são ignorados. A data e hora podem ser agrupados com um par de à direita e caracteres de sinal de número ('#', U + 0023) e podem ser seguidas por um ou mais NULL (u+0000) de caracteres.  
  
 Formatos específicos de válido para a data e elementos de tempo, bem como os nomes e os símbolos usados em datas e horas, são definidos pelo `provider` parâmetro, que pode ser qualquer um dos seguintes:  
  
-   Um <xref:System.Globalization.CultureInfo> objeto que representa a cultura cuja formatação será usada no `s` parâmetro. O <xref:System.Globalization.DateTimeFormatInfo> objeto retornado pela <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriedade define a formatação usada `s`.  
  
-   Um <xref:System.Globalization.DateTimeFormatInfo> objeto que define a formatação usada `s`.  
  
-   Um personalizado <xref:System.IFormatProvider> implementação. Sua <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> método retorna um <xref:System.Globalization.DateTimeFormatInfo> objeto que define a formatação usada `s`.  
  
 Se `provider` for `null`, a cultura atual será usada.  
  
 Se `s` é a representação de cadeia de caracteres de um dia bissexto em um ano bissexto no calendário atual, o método analisa `s` com êxito. Se `s` é a representação de cadeia de caracteres de um dia bissexto em um não-ano bissexto no calendário atual de `provider`, a operação de análise falha e o método retornará `false`.  
  
 O `styles` parâmetro define a interpretação precisa da cadeia de caracteres analisada e como a operação de análise deve tratá-la. Ele pode ser um ou mais membros do <xref:System.Globalization.DateTimeStyles> enumeração, conforme descrito na tabela a seguir.  
  
|Membro DateTimeStyles|Descrição|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analisa `s` e, caso necessário, converte-o em UTC. Caso `s` inclua um deslocamento de fuso horário ou caso `s` não contenha informações de fuso horário, mas `styles` inclua o sinalizador <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, o método analisa a cadeia de caracteres, chama <xref:System.DateTime.ToUniversalTime%2A> para converter o valor <xref:System.DateTime> retornado em UTC e define a propriedade <xref:System.DateTime.Kind%2A> como <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Caso `s` indique que ele representa o UTC ou caso `s` não contenha informações de fuso horário, mas `styles` inclua o sinalizador <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>, o método analisa a cadeia de caracteres, não executa nenhuma conversão de fuso horário no valor <xref:System.DateTime> retornado e define a propriedade <xref:System.DateTime.Kind%2A> a <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Em todos os outros casos, o sinalizador não entra em vigor.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Embora válido, esse valor é ignorado. Espaço em branco interno é permitido nos elementos de data e hora de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Embora válido, esse valor é ignorado. Espaço em branco é permitido nos elementos de data e hora de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Embora válido, esse valor é ignorado. Espaço em branco à direita é permitido nos elementos de data e hora de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Especifica que `s` pode conter à esquerda, internos e os espaços em branco à direita. Este é o comportamento padrão. Ele não pode ser substituído por meio do fornecimento mais restritiva <xref:System.Globalization.DateTimeStyles> valor de enumeração como <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Especifica que, caso `s` não tenha informações de fuso horário, pressupõe-se que ele represente uma hora local. A menos que o sinalizador <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> esteja presente, a propriedade <xref:System.DateTime.Kind%2A> do valor <xref:System.DateTime> retornado é definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Especifica que, caso `s` não tenha informações de fuso horário, pressupõe-se que ele represente o UTC. A menos que o sinalizador <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> esteja presente, o método converte o valor <xref:System.DateTime> retornado do UTC na hora local e define a propriedade <xref:System.DateTime.Kind%2A> como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.None>|Embora válido, esse valor é ignorado.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Para cadeias de caracteres que contêm informações de fuso horário, tenta impedir que a conversão de uma cadeia de caracteres de data e hora para um <xref:System.DateTime> valor com seu <xref:System.DateTime.Kind%2A> propriedade definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Normalmente, uma cadeia de caracteres é criada chamando o <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> método usando especificadores de formato padrão "o", "r" ou "u".|  
  
 Se `s` não contém nenhuma informação de fuso horário, o <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método retorna um <xref:System.DateTime> valor cuja <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> , a menos que um `styles` sinalizador indica o contrário. Se `s` inclui o fuso horário ou informação de deslocamento de fuso horário, o <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método executa qualquer conversão de tempo necessárias e retorna um dos seguintes:  
  
-   Um <xref:System.DateTime> valor cuja data e hora reflete a hora local e cujo <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
-   Ou, se `styles` inclui o <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> sinalizador, uma <xref:System.DateTime> valor cuja data e hora reflete UTC e cujo <xref:System.DateTime.Kind%2A> é de propriedade <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Esse comportamento pode ser substituído usando o <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> sinalizador.  
  
## <a name="parsing-custom-cultures"></a>Analisando culturas personalizadas  
 Se você analisar uma cadeia de caracteres de data e hora gerada para uma cultura personalizada, use o <xref:System.DateTime.TryParseExact%2A> método em vez do <xref:System.DateTime.TryParse%2A> método para melhorar a probabilidade de que a operação de análise seja bem-sucedida. Uma cadeia de caracteres de data e hora de cultura personalizada pode ser complicado e difícil analisar. O <xref:System.DateTime.TryParse%2A> método tenta analisar uma cadeia de caracteres com vários padrões de análise implícita, que poderá falhar. Em contraste, o <xref:System.DateTime.TryParseExact%2A> método requer que você designe explicitamente um ou mais padrões de análise exata que provavelmente tenha êxito.  
  
 Para obter mais informações sobre culturas personalizadas, consulte o <xref:System.Globalization.CultureAndRegionInfoBuilder?displayProperty=nameWithType> classe.  
  
   
  
## Examples  
 O exemplo a seguir ilustra o <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método.  
  
 [!code-csharp[System.DateTime.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/tryparse2.cs#2)]
 [!code-vb[System.DateTime.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> não é um valor <see cref="T:System.Globalization.DateTimeStyles" /> válido.  
  
- ou - 
 <paramref name="styles" /> contém uma combinação inválida de valores <see cref="T:System.Globalization.DateTimeStyles" /> (por exemplo, <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> e <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="provider" /> é uma cultura neutra e não pode ser usado em uma operação de análise.</exception>
        <block subset="none" type="usage">
          <para>Formatação é influenciada pelas propriedades do atual <see cref="T:System.Globalization.DateTimeFormatInfo" /> objeto, que é fornecido pelo <paramref name="provider" /> parâmetro. O <see cref="Overload:System.DateTime.TryParse" /> método inesperadamente pode falhará e retornará <see langword="False" /> se atual <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> e <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> são definidas com o mesmo valor.</para>
        </block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analisando cadeias de caracteres de data e hora no .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora padrão</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora personalizado</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converte a representação da cadeia de caracteres especificada de uma data e hora no <see cref="T:System.DateTime" /> equivalente. O formato da representação da cadeia de caracteres deve corresponder exatamente a um formato especificado. O método retorna um valor que indica se a conversão foi bem-sucedida.</summary>
        <altmember cref="Overload:System.DateTime.ParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, format, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, formats, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, format, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Uma cadeia de caracteres contendo uma data e hora a ser convertida.</param>
        <param name="format">O formato obrigatório de <c>s</c>.</param>
        <param name="provider">Um objeto que fornece informações de formatação específicas à cultura sobre <c>s</c>.</param>
        <param name="style">Uma combinação bit a bit de um ou mais valores de enumeração que indica o formato permitido de <c>s</c>.</param>
        <param name="result">Quando esse método é retornado, ele contém o valor <see cref="T:System.DateTime" /> equivalente à data e à hora contidas em <c>s</c>, caso a conversão tenha sido bem-sucedida ou <see cref="F:System.DateTime.MinValue" />, caso a conversão tenha falhado. A conversão falhará se o parâmetro <c>s</c> ou <c>format</c> for <see langword="null" />, uma cadeia de caracteres vazia ou não contiver uma data e hora que correspondem ao padrão especificado em <c>format</c>. Este parâmetro é passado não inicializado.</param>
        <summary>Converte a representação de cadeia de caracteres especificada de data e hora em seu equivalente <see cref="T:System.DateTime" /> usando o formato especificado, as informações de formato específicas da cultura e o estilo. O formato de representação da cadeia de caracteres deve corresponder exatamente ao formato especificado. O método retorna um valor que indica se a conversão foi bem-sucedida.</summary>
        <returns>
          <see langword="true" /> caso <paramref name="s" /> tenha sido convertido com êxito; do contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método analisa a representação de cadeia de caracteres de uma data, que deve estar no formato definido pelo `format` parâmetro. É semelhante para o <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método, exceto que o <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> método não lançará uma exceção se a conversão falhar.  
  
 O `s` parâmetro contém a data e hora para analisar e deve estar em um formato definido pelo `format` parâmetro. Se os elementos de data, hora e fuso horário estão presentes em `s`, eles também devem aparecer na ordem especificada pela `format`. Se `format` define uma data com nenhum elemento de hora e a análise operação for bem-sucedida, resultante <xref:System.DateTime> valor tem um tempo de meia-noite (00: 00:00). Se `format` define uma hora com nenhum elemento de data e a análise operação for bem-sucedida, resultante <xref:System.DateTime> valor por padrão tem uma data de `DateTime.Now.Date`, ou ele tem uma data de `DateTime.MinValue.Date` se `styles` inclui o <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> sinalizador. O `style` parâmetro determina se o `s` parâmetro pode conter caracteres de espaço em branco à esquerda, interna ou à direita.  
  
 Caso `s` não contenha informações de fuso horário, a propriedade <xref:System.DateTime.Kind%2A> do objeto <xref:System.DateTime> retornado é <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Este comportamento pode ser alterado usando-se o sinalizador <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, que retorna um valor <xref:System.DateTime> cuja propriedade <xref:System.DateTime.Kind%2A> é <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ou usando-se os sinalizadores <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> e <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>, que retorna um valor <xref:System.DateTime> cuja propriedade <xref:System.DateTime.Kind%2A> é <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Se s contém informações de fuso horário, a hora é convertida para a hora local, se necessário e o <xref:System.DateTime.Kind%2A> propriedade retornada <xref:System.DateTime> objeto é definido como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Esse comportamento pode ser alterado usando o <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> sinalizador não converter o tempo Universal Coordenado (UTC) em uma hora local e definir o <xref:System.DateTime.Kind%2A> propriedade <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 O `format` parâmetro contém um padrão que corresponde ao formato esperado do `s` parâmetro. O padrão no `format` parâmetro consiste em um ou mais especificadores de formato personalizado do [personalizado de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/custom-date-and-time-format-strings.md) tabela ou um especificador de formato único padrão, que identifica um padrão predefinido, da [Padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md) tabela.  
  
 Caso você não use separadores de data ou hora em um padrão de formato personalizado, use a cultura invariável do parâmetro `provider` e a forma mais ampla de cada especificador de formato personalizado. Por exemplo, caso você queira especificar horas no padrão, especifique a forma mais ampla, "HH", em vez da forma mais estreita, "H".  
  
> [!NOTE]
>  Em vez de exigir que `s` estão em conformidade com um único formato para a operação de análise seja bem-sucedida, você pode chamar o <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método e especificar vários formatos permitidos. Isso torna a operação de análise mais probabilidade de êxito.  
  
 Os símbolos de data e hora e as cadeias de caracteres específicos (como os nomes dos dias da semana em um idioma específico) usados em `s` são definidos pelo parâmetro `provider`, como o formato preciso de `s` caso `format` seja uma cadeia de caracteres do especificador de formato padrão. O parâmetro `provider` pode ser um dos seguintes:  
  
-   Um objeto <xref:System.Globalization.CultureInfo> que representa a cultura usada para interpretar `s`. O objeto <xref:System.Globalization.DateTimeFormatInfo> retornado pela propriedade <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> define os símbolos e a formatação em `s`.  
  
-   Um objeto <xref:System.Globalization.DateTimeFormatInfo> que define o formato dos dados de data e hora.  
  
-   Uma implementação de <xref:System.IFormatProvider> personalizada cujo método <xref:System.IFormatProvider.GetFormat%2A> retorna o objeto <xref:System.Globalization.CultureInfo> ou o objeto <xref:System.Globalization.DateTimeFormatInfo> que fornece informações de formatação.  
  
 Caso `provider` seja `null`, o objeto <xref:System.Globalization.CultureInfo> que corresponde à cultura atual é usado.  
  
 O parâmetro `styles` inclui um ou mais membros da enumeração <xref:System.Globalization.DateTimeStyles> que determinam se e onde o espaço em branco não definido por `format` pode aparecer em `s` e que controlam o comportamento preciso da operação de análise. A tabela a seguir descreve como cada membro de <xref:System.Globalization.DateTimeStyles> enumeração afeta a operação do <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> método.  
  
|Membro DateTimeStyles|Descrição|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analisa `s` e, caso necessário, converte-o em UTC. Caso `s` inclua um deslocamento de fuso horário ou caso `s` não contenha informações de fuso horário, mas `styles` inclua o sinalizador <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, o método analisa a cadeia de caracteres, chama <xref:System.DateTime.ToUniversalTime%2A> para converter o valor <xref:System.DateTime> retornado em UTC e define a propriedade <xref:System.DateTime.Kind%2A> como <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Caso `s` indique que ele representa o UTC ou caso `s` não contenha informações de fuso horário, mas `styles` inclua o sinalizador <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>, o método analisa a cadeia de caracteres, não executa nenhuma conversão de fuso horário no valor <xref:System.DateTime> retornado e define a propriedade <xref:System.DateTime.Kind%2A> a <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Em todos os outros casos, o sinalizador não entra em vigor.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Especifica que o espaço em branco não definido por `format` pode ser exibido entre qualquer elemento de data ou hora individual.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Especifica que o espaço em branco não definido por `format` pode ser exibido no início de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Especifica que o espaço em branco não definido por `format` pode ser exibido no final de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Especifica que `s` pode conter espaços em branco à esquerda, internos, e à direita não definidos por `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Especifica que, caso `s` não tenha informações de fuso horário, pressupõe-se que ele represente uma hora local. A menos que o sinalizador <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> esteja presente, a propriedade <xref:System.DateTime.Kind%2A> do valor <xref:System.DateTime> retornado é definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Especifica que, caso `s` não tenha informações de fuso horário, pressupõe-se que ele represente o UTC. A menos que o sinalizador <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> esteja presente, o método converte o valor <xref:System.DateTime> retornado do UTC na hora local e define a propriedade <xref:System.DateTime.Kind%2A> como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Caso `s` contenha hora sem informações de data, a data do valor de retorno é definida como `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|O parâmetro `s` é analisado usando-se valores padrão. Nenhum espaço em branco senão presente em `format` é permitido. Caso `s` não tenha um componente de data, a data do valor <xref:System.DateTime> retornado é definida como 1/1/0001. Caso `s` não contenha informações de fuso horário, a propriedade <xref:System.DateTime.Kind%2A> do objeto <xref:System.DateTime> retornado é definida como <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Caso informações de fuso horário estejam presentes em `s`, a hora é convertida na hora local e a propriedade <xref:System.DateTime.Kind%2A> do objeto <xref:System.DateTime> retornado é definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Para cadeias de caracteres que contêm informações de fuso horário, tenta impedir que a conversão em um <xref:System.DateTime> valor com seu <xref:System.DateTime.Kind%2A> propriedade definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Este sinalizador impede principalmente a conversão de horas UTC em horas locais.|  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método. Observe que a cadeia de caracteres "01/5/2009 8H30" não pode ser analisado com êxito quando o `styles` for igual ao parâmetro <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> porque os espaços à esquerda não são permitidos por `format`. Além disso, a cadeia de caracteres "01/5/2009 09:00" não pode ser analisado com êxito com um `format` de "MM/dd/yyyyhh:mm" porque a cadeia de caracteres de data não precede o número do mês com um zero à esquerda, como `format` requer.  
  
 [!code-csharp[System.DateTime.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact1.cs#1)]
 [!code-vb[System.DateTime.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> não é um valor <see cref="T:System.Globalization.DateTimeStyles" /> válido.  
  
- ou - 
 <paramref name="styles" /> contém uma combinação inválida de valores <see cref="T:System.Globalization.DateTimeStyles" /> (por exemplo, <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> e <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <block subset="none" type="usage">
          <para>No [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], o <see cref="Overload:System.DateTime.TryParseExact" /> retorno do método <see langword="false" /> se a cadeia de caracteres a ser analisada contém um componente de hora e um designador AM/PM que não estão no contrato. No [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] e versões anteriores, o designador AM/PM é ignorado.</para>
        </block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analisando cadeias de caracteres de data e hora no .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora padrão</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora personalizado</related>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, formats, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Uma cadeia de caracteres que contém uma data e hora a ser convertida.</param>
        <param name="formats">Uma matriz de formatos permitidos de <c>s</c>.</param>
        <param name="provider">Um objeto que fornece informações de formato específicas à cultura sobre <c>s</c>.</param>
        <param name="style">Uma combinação bit a bit de valores de enumeração que indica o formato permitido de <c>s</c>. Um valor típico a ser especificado é <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <param name="result">Quando esse método é retornado, ele contém o valor <see cref="T:System.DateTime" /> equivalente à data e à hora contidas em <c>s</c>, caso a conversão tenha sido bem-sucedida ou <see cref="F:System.DateTime.MinValue" />, caso a conversão tenha falhado. A conversão falhará se <c>s</c> ou <c>formats</c> for <see langword="null" />, <c>s</c> ou um elemento de <c>formats</c> for uma cadeia de caracteres vazia ou se o formato de <c>s</c> não for exatamente conforme especificado por pelo menos um dos padrões de formato em <c>formats</c>. Este parâmetro é passado não inicializado.</param>
        <summary>Converte a representação de cadeia de caracteres especificada de um data e hora no equivalente de <see cref="T:System.DateTime" /> usando a matriz de formatos, informações de formato específicas da cultura e estilo especificados. O formato da representação da cadeia de caracteres deve corresponder exatamente a um dos formatos especificados pelo menos. O método retorna um valor que indica se a conversão foi bem-sucedida.</summary>
        <returns>
          <see langword="true" /> caso o parâmetro <paramref name="s" /> tenha sido convertido com êxito; do contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método analisa a representação de cadeia de caracteres de uma data que corresponde a qualquer um dos padrões atribuído para o `formats` parâmetro. É como o <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método, exceto o <xref:System.DateTime.TryParseExact%2A> método não lançará uma exceção se a conversão falhar.  
  
 O `s` parâmetro contém a data e hora para analisar. Se o `s` parâmetro contém apenas uma vez e nenhuma data, a data atual é usada, a menos que o `style` parâmetro inclui o <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> sinalizar, caso em que a data padrão (`DateTime.Date.MinValue`) é usado. Se o `s` parâmetro não contém apenas uma data e nenhuma hora, meia-noite (00: 00:00) é usado. O `style` parâmetro também determina se o `s` parâmetro pode conter líderes, espaço em branco interno ou à direita caracteres diferentes daqueles permitido por uma das cadeias de caracteres de formato no `formats`.  
  
 Caso `s` não contenha informações de fuso horário, a propriedade <xref:System.DateTime.Kind%2A> do objeto <xref:System.DateTime> retornado é <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Este comportamento pode ser alterado usando-se o sinalizador <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, que retorna um valor <xref:System.DateTime> cuja propriedade <xref:System.DateTime.Kind%2A> é <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ou usando-se os sinalizadores <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> e <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>, que retorna um valor <xref:System.DateTime> cuja propriedade <xref:System.DateTime.Kind%2A> é <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Se s contém informações de fuso horário, a hora é convertida para a hora local, se necessário e o <xref:System.DateTime.Kind%2A> propriedade retornada <xref:System.DateTime> objeto é definido como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Esse comportamento pode ser alterado usando o <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> sinalizador não converter o tempo Universal Coordenado (UTC) em uma hora local e definir o <xref:System.DateTime.Kind%2A> propriedade <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 O `formats` parâmetro contém uma matriz de padrões, um dos quais `s` deve corresponder exatamente, se a operação de análise seja bem-sucedida. Os padrões a `formats` parâmetro consistem em um ou mais especificadores de formato personalizado do [personalizado de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/custom-date-and-time-format-strings.md) tabela ou um especificador de formato único padrão, que identifica um padrão predefinido, da [Padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md) tabela.  
  
 Caso você não use separadores de data ou hora em um padrão de formato personalizado, use a cultura invariável do parâmetro `provider` e a forma mais ampla de cada especificador de formato personalizado. Por exemplo, caso você queira especificar horas no padrão, especifique a forma mais ampla, "HH", em vez da forma mais estreita, "H".  
  
 Os símbolos de data e hora e as cadeias de caracteres específicos (como os nomes dos dias da semana em um idioma específico) usados em `s` são definidos pelo parâmetro `provider`, como o formato preciso de `s` caso `format` seja uma cadeia de caracteres do especificador de formato padrão. O parâmetro `provider` pode ser um dos seguintes:  
  
-   Um objeto <xref:System.Globalization.CultureInfo> que representa a cultura usada para interpretar `s`. O objeto <xref:System.Globalization.DateTimeFormatInfo> retornado pela propriedade <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> define os símbolos e a formatação em `s`.  
  
-   Um objeto <xref:System.Globalization.DateTimeFormatInfo> que define o formato dos dados de data e hora.  
  
-   Uma implementação de <xref:System.IFormatProvider> personalizada cujo método <xref:System.IFormatProvider.GetFormat%2A> retorna o objeto <xref:System.Globalization.CultureInfo> ou o objeto <xref:System.Globalization.DateTimeFormatInfo> que fornece informações de formatação.  
  
 Caso `provider` seja `null`, o objeto <xref:System.Globalization.CultureInfo> que corresponde à cultura atual é usado.  
  
 O parâmetro `styles` inclui um ou mais membros da enumeração <xref:System.Globalization.DateTimeStyles> que determinam se e onde o espaço em branco não definido por `format` pode aparecer em `s` e que controlam o comportamento preciso da operação de análise. A tabela a seguir descreve como cada membro de <xref:System.Globalization.DateTimeStyles> enumeração afeta a operação do <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> método.  
  
|Membro DateTimeStyles|Descrição|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analisa `s` e, caso necessário, converte-o em UTC. Caso `s` inclua um deslocamento de fuso horário ou caso `s` não contenha informações de fuso horário, mas `styles` inclua o sinalizador <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, o método analisa a cadeia de caracteres, chama <xref:System.DateTime.ToUniversalTime%2A> para converter o valor <xref:System.DateTime> retornado em UTC e define a propriedade <xref:System.DateTime.Kind%2A> como <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Caso `s` indique que ele representa o UTC ou caso `s` não contenha informações de fuso horário, mas `styles` inclua o sinalizador <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>, o método analisa a cadeia de caracteres, não executa nenhuma conversão de fuso horário no valor <xref:System.DateTime> retornado e define a propriedade <xref:System.DateTime.Kind%2A> a <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Em todos os outros casos, o sinalizador não entra em vigor.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Especifica que o espaço em branco não definido por `format` pode ser exibido entre qualquer elemento de data ou hora individual.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Especifica que o espaço em branco não definido por `format` pode ser exibido no início de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Especifica que o espaço em branco não definido por `format` pode ser exibido no final de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Especifica que `s` pode conter espaços em branco à esquerda, internos, e à direita não definidos por `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Especifica que, caso `s` não tenha informações de fuso horário, pressupõe-se que ele represente uma hora local. A menos que o sinalizador <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> esteja presente, a propriedade <xref:System.DateTime.Kind%2A> do valor <xref:System.DateTime> retornado é definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Especifica que, caso `s` não tenha informações de fuso horário, pressupõe-se que ele represente o UTC. A menos que o sinalizador <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> esteja presente, o método converte o valor <xref:System.DateTime> retornado do UTC na hora local e define a propriedade <xref:System.DateTime.Kind%2A> como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Caso `s` contenha hora sem informações de data, a data do valor de retorno é definida como `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|O parâmetro `s` é analisado usando-se valores padrão. Nenhum espaço em branco senão presente em `format` é permitido. Caso `s` não tenha um componente de data, a data do valor <xref:System.DateTime> retornado é definida como 1/1/0001. Caso `s` não contenha informações de fuso horário, a propriedade <xref:System.DateTime.Kind%2A> do objeto <xref:System.DateTime> retornado é definida como <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Caso informações de fuso horário estejam presentes em `s`, a hora é convertida na hora local e a propriedade <xref:System.DateTime.Kind%2A> do objeto <xref:System.DateTime> retornado é definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Para cadeias de caracteres que contêm informações de fuso horário, tenta impedir que a conversão em um <xref:System.DateTime> valor com seu <xref:System.DateTime.Kind%2A> propriedade definida como <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Este sinalizador impede principalmente a conversão de horas UTC em horas locais.|  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método para garantir que uma cadeia de caracteres em um número de possíveis formatos pode ser analisada com êxito.  
  
 [!code-csharp[System.Datetime.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact2.cs#2)]
 [!code-vb[System.Datetime.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> não é um valor <see cref="T:System.Globalization.DateTimeStyles" /> válido.  
  
- ou - 
 <paramref name="styles" /> contém uma combinação inválida de valores <see cref="T:System.Globalization.DateTimeStyles" /> (por exemplo, <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> e <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <block subset="none" type="usage">
          <para>No [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], o <see cref="Overload:System.DateTime.TryParseExact" /> retorno do método <see langword="false" /> se a cadeia de caracteres a ser analisada contém um componente de hora e um designador AM/PM que não estão no contrato. No [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] e versões anteriores, o designador AM/PM é ignorado.</para>
        </block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analisando cadeias de caracteres de data e hora no .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora padrão</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora personalizado</related>
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTime UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime UnixEpoch;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnixEpoch : DateTime" Usage="System.DateTime.UnixEpoch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTime UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime UtcNow { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcNow : DateTime" Usage="System.DateTime.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um objeto <see cref="T:System.DateTime" /> definido como a data e hora atual neste computador, expressas como o UTC (Tempo Universal Coordenado).</summary>
        <value>Um objeto cujo valor é a data e hora UTC atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A resolução dessa propriedade depende do timer do sistema, que depende do sistema operacional subjacente. Ela costuma ser entre 0,5 e 15 milissegundos.

 Começando com o .NET Framework versão 2.0, o valor retornado é um <xref:System.DateTime> cujos <xref:System.DateTime.Kind%2A> propriedade retorna <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.

 Uma alternativa ao uso <xref:System.DateTime.UtcNow%2A> é <xref:System.DateTimeOffset.UtcNow%2A?displayProperty=nameWithType>. Enquanto a primeira opção indica que um valor de data e hora é o tempo Universal Coordenado (UTC) atribuindo <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> para seus <xref:System.DateTime.Kind%2A> propriedade, o último atribui a data e hora a hora de UTC do valor de deslocamento (igual a <xref:System.TimeSpan.Zero?displayProperty=nameWithType>).
  
## Examples  
 O exemplo a seguir usa o método <xref:System.DateTime.SpecifyKind%2A> para demonstrar como a propriedade <xref:System.DateTime.Kind%2A> influencia os métodos de conversão <xref:System.DateTime.ToLocalTime%2A> e <xref:System.DateTime.ToUniversalTime%2A>.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Year : int" Usage="System.DateTime.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o componente de ano da data representada por essa instância.</summary>
        <value>O ano, entre 1 e 9999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTime.Year%2A> propriedade retorna o ano da instância atual no calendário gregoriano. Ele não retorna o ano usando o calendário padrão da cultura atual. Para recuperar o ano usando um calendário específico, você pode chamar esse calendário `GetYear` método, como mostra o código a seguir.  
  
 [!code-csharp[System.DateTime.Year#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Year/cs/Year.cs#1)]
 [!code-vb[System.DateTime.Year#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Year/vb/Year.vb#1)]  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.DateTime.Year%2A> propriedade.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
  </Members>
</Type>