<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Tuple`6.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac51086b6148570cf7862fdada5a080c05c90a2ac0e.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1086b6148570cf7862fdada5a080c05c90a2ac0e</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>The type of the tuple's first component.</source>
          <target state="translated">O tipo do primeiro componente da tupla.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>The type of the tuple's second component.</source>
          <target state="translated">O tipo do segundo componente da tupla.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>The type of the tuple's third component.</source>
          <target state="translated">O tipo do terceiro componente da tupla.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>The type of the tuple's fourth component.</source>
          <target state="translated">O tipo do quarto componente da tupla.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>The type of the tuple's fifth component.</source>
          <target state="translated">O tipo do quinto componente da tupla.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>The type of the tuple's sixth component.</source>
          <target state="translated">O tipo do sexto componente da tupla.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="T:System.Tuple`6">
          <source>Represents a 6-tuple, or sextuple.</source>
          <target state="translated">Representa uma tupla de 6 ou sêxtupla.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>A tuple is a data structure that has a specific number and sequence of values.</source>
          <target state="translated">Tupla é uma estrutura de dados que possui um número específico e uma sequência de valores.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> class represents a 6-tuple, or sextuple, which is a tuple that has six components.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> classe representa uma tupla de 6 ou sextuple, que é uma tupla que tem seis componentes.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>You can instantiate a <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> object by calling either the <ph id="ph2">&lt;xref:System.Tuple%606.%23ctor%2A&gt;</ph> or the static  <ph id="ph3">&lt;xref:System.Tuple.Create%60%606%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Você pode instanciar uma <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objeto chamando o <ph id="ph2">&lt;xref:System.Tuple%606.%23ctor%2A&gt;</ph> ou estático <ph id="ph3">&lt;xref:System.Tuple.Create%60%606%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>You can retrieve the value of the tuple's components by using the read-only <ph id="ph1">&lt;xref:System.Tuple%606.Item1%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Tuple%606.Item2%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%606.Item3%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%606.Item4%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%606.Item5%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.Tuple%606.Item6%2A&gt;</ph> instance properties.</source>
          <target state="translated">Você pode recuperar o valor dos componentes da tupla usando somente leitura <ph id="ph1">&lt;xref:System.Tuple%606.Item1%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Tuple%606.Item2%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%606.Item3%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%606.Item4%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%606.Item5%2A&gt;</ph>, e <ph id="ph6">&lt;xref:System.Tuple%606.Item6%2A&gt;</ph> propriedades da instância.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>Tuples are commonly used in four different ways:</source>
          <target state="translated">As tuplas costumam ser usadas de quatro maneiras diferentes:</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>To represent a single set of data.</source>
          <target state="translated">Para representar um único conjunto de dados.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>For example, a tuple can represent a database record, and its components can represent individual fields of the record.</source>
          <target state="translated">Por exemplo, uma tupla pode representar um registro de banco de dados, e seus componentes podem representar campos individuais do registro.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>To provide easy access to, and manipulation of, a data set.</source>
          <target state="translated">Para fornecer acesso fácil a, e a manipulação de um conjunto de dados.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>The following example defines a <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> object that contains population data for New York City for each census from 1960 through 2000.</source>
          <target state="translated">O exemplo a seguir define uma <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objeto que contém dados de população cidade de Nova York, para cada censo de 1960 por meio de 2000.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>The sextuple is passed to the <ph id="ph1">`ComputePopulationChange`</ph> method, which calculates the annual rate of change between censuses, as well as the annual rate of change for the entire 50 year period.</source>
          <target state="translated">A sêxtupla é passada para o <ph id="ph1">`ComputePopulationChange`</ph> método, que calcula a taxa de alteração entre censuses, bem como a taxa de alteração para o período de todo ano 50 anual anual.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>To return multiple values from a method without the use of <ph id="ph1">`out`</ph> parameters (in C#) or <ph id="ph2">`ByRef`</ph> parameters (in Visual Basic).</source>
          <target state="translated">Para retornar vários valores de um método sem o uso de parâmetros <ph id="ph1">`out`</ph> (no C#) ou de parâmetros <ph id="ph2">`ByRef`</ph> (no Visual Basic).</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>For example, the previous example returns its computed statistics, along with the city name, in a <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> object.</source>
          <target state="translated">Por exemplo, o exemplo anterior retorna suas estatísticas computadas, juntamente com o nome da cidade, em um <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>To pass multiple values to a method through a single parameter.</source>
          <target state="translated">Para passar vários valores para um método por meio de um parâmetro único.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>For example, the <ph id="ph1">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph> method has a single parameter that lets you supply one value to the method that the thread executes at startup.</source>
          <target state="translated">Por exemplo, o método <ph id="ph1">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph> tem um único parâmetro que permite fornecer um valor ao método que o thread executa na inicialização.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>If you supply a <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> object as the method argument, you can supply the thread’s startup routine with six items of data.</source>
          <target state="translated">Se você fornecer uma <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objeto como o argumento de método, você pode fornecer a rotina de inicialização do thread com seis itens de dados.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
          <source>The value of the tuple's first component.</source>
          <target state="translated">O valor do primeiro componente da tupla.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
          <source>The value of the tuple's second component.</source>
          <target state="translated">O valor do segundo componente da tupla.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
          <source>The value of the tuple's third component.</source>
          <target state="translated">O valor do terceiro componente da tupla.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
          <source>The value of the tuple's fourth component</source>
          <target state="translated">O valor do quarto componente da tupla</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
          <source>The value of the tuple's fifth component.</source>
          <target state="translated">O valor do quinto componente da tupla.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
          <source>The value of the tuple's sixth component.</source>
          <target state="translated">O valor do sexto componente da tupla.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
          <source>You can also use the static <ph id="ph1">&lt;xref:System.Tuple.Create%60%606%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%29?displayProperty=nameWithType&gt;</ph> method to instantiate a 6-tuple object without having to explicitly specify the types of its components.</source>
          <target state="translated">Você também pode usar o static <ph id="ph1">&lt;xref:System.Tuple.Create%60%606%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%29?displayProperty=nameWithType&gt;</ph> método para instanciar um objeto de tupla de 6 sem ter que especificar explicitamente os tipos de seus componentes.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Tuple.Create%60%606%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%29?displayProperty=nameWithType&gt;</ph> method to instantiate a 6-tuple whose first component is of type <ph id="ph2">&lt;xref:System.String&gt;</ph> and whose remaining components are of type <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">&lt;xref:System.Tuple.Create%60%606%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%29?displayProperty=nameWithType&gt;</ph> método para instanciar uma tupla de 6 cujo primeiro componente é do tipo <ph id="ph2">&lt;xref:System.String&gt;</ph> e cujos componentes restantes são do tipo <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
          <source>This is equivalent to the following call to the <ph id="ph1">&lt;xref:System.Tuple%606.%23ctor%2A&gt;</ph> class constructor.</source>
          <target state="translated">Isso é equivalente à seguinte chamada para o <ph id="ph1">&lt;xref:System.Tuple%606.%23ctor%2A&gt;</ph> construtor de classe.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.Equals(System.Object)">
          <source>The object to compare with this instance.</source>
          <target state="translated">O objeto a ser comparado com essa instância.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.Equals(System.Object)">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object is equal to a specified object.</source>
          <target state="translated">Retorna um valor que indica se o objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> atual é igual a um objeto especificado.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance is equal to the specified object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> caso a instância atual seja igual ao objeto especificado; do contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.Equals(System.Object)">
          <source>The <ph id="ph1">`obj`</ph> parameter is considered to be equal to the current instance under the following conditions:</source>
          <target state="translated">O parâmetro <ph id="ph1">`obj`</ph> deve ser considerado igual à instância atual nas seguintes circunstâncias:</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.Equals(System.Object)">
          <source>It is a <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> object.</source>
          <target state="translated">É um <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.Equals(System.Object)">
          <source>Its six components are of the same types as the current instance.</source>
          <target state="translated">Seus seis componentes são dos mesmos tipos da instância atual.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.Equals(System.Object)">
          <source>Its six components are equal to those of the current instance.</source>
          <target state="translated">Seus seis componentes são iguais da instância atual.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.Equals(System.Object)">
          <source>Equality is determined by the default object equality comparer for each component.</source>
          <target state="translated">A igualdade é determinada pela comparação de igualdade do objeto padrão para cada componente.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.Equals(System.Object)">
          <source>The following example defines an array of sextuples that contain population data for Los Angeles and New York from 1960 to 2000.</source>
          <target state="translated">O exemplo a seguir define uma matriz de sextuples que contêm dados de população para Los Angeles e Nova York de 1960 a 2000.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.Equals(System.Object)">
          <source>The first component of each sextuple identifies the city.</source>
          <target state="translated">O primeiro componente de cada sêxtupla identifica a cidade.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.Equals(System.Object)">
          <source>The first, third, and fourth sextuples contain data for New York.</source>
          <target state="translated">O primeiro, terceiro e quarto sextuples contêm dados de Nova York.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.Equals(System.Object)">
          <source>The first sextuple is a duplicate of the fourth sextuple.</source>
          <target state="translated">A primeira sêxtupla é uma duplicata da quarta sêxtupla.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.Equals(System.Object)">
          <source>The third sextuple identifies the city as "New York City" instead of "New York".</source>
          <target state="translated">A terceira sêxtupla identifica a cidade como "New York City" em vez de "Nova Iorque".</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.Equals(System.Object)">
          <source>As the example shows, only the fourth sextuple is equal to the first sextuple.</source>
          <target state="translated">Como mostra o exemplo, apenas a quarta sêxtupla é igual a sêxtupla a primeiro.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.GetHashCode">
          <source>Returns the hash code for the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object.</source>
          <target state="translated">Retorna o código hash para o objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">Um código de hash do inteiro assinado de 32 bits.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="P:System.Tuple`6.Item1">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object's first component.</source>
          <target state="translated">Obtém o valor do primeiro componente do objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item1">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object's first component.</source>
          <target state="translated">O valor do primeiro componente do objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item1">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%606.Item1%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">É possível determinar dinamicamente o tipo do componente <ph id="ph1">&lt;xref:System.Tuple%606.Item1%2A&gt;</ph> de duas maneiras:</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item1">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%606.Item1%2A&gt;</ph> property.</source>
          <target state="translated">Chamando o método <ph id="ph1">`GetType`</ph> no valor retornado pela propriedade <ph id="ph2">&lt;xref:System.Tuple%606.Item1%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item1">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> object, and retrieving the first element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Recuperando o objeto <ph id="ph1">&lt;xref:System.Type&gt;</ph> que representa o objeto <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> e recuperando o primeiro elemento da matriz que é retornada pelo método <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item1">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1960 through 2000.</source>
          <target state="translated">O exemplo a seguir define uma matriz de objetos <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> cujos componentes contêm dados de preenchimento para três cidades dos EUA (Nova York, Chicago e Los Angeles) de 1960 até 2000.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item1">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">Em seguida, ele exibe em uma tabela que lista os dados.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item1">
          <source>To display the city name, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%606.Item1%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> object.</source>
          <target state="translated">Para exibir o nome da cidade, ele recupera o valor de <ph id="ph1">&lt;xref:System.Tuple%606.Item1%2A&gt;</ph> propriedade para cada <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="P:System.Tuple`6.Item2">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object's second component.</source>
          <target state="translated">Obtém o valor do segundo componente do objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item2">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object's second component.</source>
          <target state="translated">O valor atual <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> segundo de componente do objeto.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item2">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%606.Item2%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">É possível determinar dinamicamente o tipo do componente <ph id="ph1">&lt;xref:System.Tuple%606.Item2%2A&gt;</ph> de duas maneiras:</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item2">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%606.Item2%2A&gt;</ph> property.</source>
          <target state="translated">Chamando o método <ph id="ph1">`GetType`</ph> no valor retornado pela propriedade <ph id="ph2">&lt;xref:System.Tuple%606.Item2%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item2">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> object, and retrieving the first element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Recuperando o objeto <ph id="ph1">&lt;xref:System.Type&gt;</ph> que representa o objeto <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> e recuperando o primeiro elemento da matriz que é retornada pelo método <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item2">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1960 through 2000.</source>
          <target state="translated">O exemplo a seguir define uma matriz de objetos <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> cujos componentes contêm dados de preenchimento para três cidades dos EUA (Nova York, Chicago e Los Angeles) de 1960 até 2000.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item2">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">Em seguida, ele exibe em uma tabela que lista os dados.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item2">
          <source>To display the population in 1960, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%606.Item2%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> object.</source>
          <target state="translated">Para exibir a população em 1960, ele recupera o valor da <ph id="ph1">&lt;xref:System.Tuple%606.Item2%2A&gt;</ph> propriedade para cada <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="P:System.Tuple`6.Item3">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object's third component.</source>
          <target state="translated">Obtém o valor do terceiro componente do objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item3">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object's third component.</source>
          <target state="translated">O valor atual <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> terceiro de componente do objeto.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item3">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%606.Item3%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">É possível determinar dinamicamente o tipo do componente <ph id="ph1">&lt;xref:System.Tuple%606.Item3%2A&gt;</ph> de duas maneiras:</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item3">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%606.Item3%2A&gt;</ph> property.</source>
          <target state="translated">Chamando o método <ph id="ph1">`GetType`</ph> no valor retornado pela propriedade <ph id="ph2">&lt;xref:System.Tuple%606.Item3%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item3">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> object, and retrieving the first element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Recuperando o objeto <ph id="ph1">&lt;xref:System.Type&gt;</ph> que representa o objeto <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> e recuperando o primeiro elemento da matriz que é retornada pelo método <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item3">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1960 through 2000.</source>
          <target state="translated">O exemplo a seguir define uma matriz de objetos <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> cujos componentes contêm dados de preenchimento para três cidades dos EUA (Nova York, Chicago e Los Angeles) de 1960 até 2000.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item3">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">Em seguida, ele exibe em uma tabela que lista os dados.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item3">
          <source>To display the population in 1970, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%606.Item3%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> object.</source>
          <target state="translated">Para exibir a população em 1970, ele recupera o valor da <ph id="ph1">&lt;xref:System.Tuple%606.Item3%2A&gt;</ph> propriedade para cada <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="P:System.Tuple`6.Item4">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object's fourth component.</source>
          <target state="translated">Obtém o valor do quarto componente do objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item4">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object's fourth component.</source>
          <target state="translated">O valor atual <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> quarto de componente do objeto.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item4">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%606.Item4%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">É possível determinar dinamicamente o tipo do componente <ph id="ph1">&lt;xref:System.Tuple%606.Item4%2A&gt;</ph> de duas maneiras:</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item4">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%606.Item4%2A&gt;</ph> property.</source>
          <target state="translated">Chamando o método <ph id="ph1">`GetType`</ph> no valor retornado pela propriedade <ph id="ph2">&lt;xref:System.Tuple%606.Item4%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item4">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> object, and retrieving the first element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Recuperando o objeto <ph id="ph1">&lt;xref:System.Type&gt;</ph> que representa o objeto <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> e recuperando o primeiro elemento da matriz que é retornada pelo método <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item4">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1960 through 2000.</source>
          <target state="translated">O exemplo a seguir define uma matriz de objetos <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> cujos componentes contêm dados de preenchimento para três cidades dos EUA (Nova York, Chicago e Los Angeles) de 1960 até 2000.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item4">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">Em seguida, ele exibe em uma tabela que lista os dados.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item4">
          <source>To display the population in 1980, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%606.Item4%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> object.</source>
          <target state="translated">Para exibir a população em 1980, ele recupera o valor da <ph id="ph1">&lt;xref:System.Tuple%606.Item4%2A&gt;</ph> propriedade para cada <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="P:System.Tuple`6.Item5">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object's fifth component.</source>
          <target state="translated">Obtém o valor do quinto componente do objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item5">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object's fifth  component.</source>
          <target state="translated">O valor atual <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> quinto de componente do objeto.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item5">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%606.Item5%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">É possível determinar dinamicamente o tipo do componente <ph id="ph1">&lt;xref:System.Tuple%606.Item5%2A&gt;</ph> de duas maneiras:</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item5">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%606.Item5%2A&gt;</ph> property.</source>
          <target state="translated">Chamando o método <ph id="ph1">`GetType`</ph> no valor retornado pela propriedade <ph id="ph2">&lt;xref:System.Tuple%606.Item5%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item5">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> object, and retrieving the first element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Recuperando o objeto <ph id="ph1">&lt;xref:System.Type&gt;</ph> que representa o objeto <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> e recuperando o primeiro elemento da matriz que é retornada pelo método <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item5">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1960 through 2000.</source>
          <target state="translated">O exemplo a seguir define uma matriz de objetos <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> cujos componentes contêm dados de preenchimento para três cidades dos EUA (Nova York, Chicago e Los Angeles) de 1960 até 2000.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item5">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">Em seguida, ele exibe em uma tabela que lista os dados.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item5">
          <source>To display the population in 1990, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%606.Item5%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> object.</source>
          <target state="translated">Para exibir a população em 1990, ele recupera o valor da <ph id="ph1">&lt;xref:System.Tuple%606.Item5%2A&gt;</ph> propriedade para cada <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="P:System.Tuple`6.Item6">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object's sixth component.</source>
          <target state="translated">Obtém o valor do sexto componente do objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item6">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object's sixth component.</source>
          <target state="translated">O valor atual <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> componente sexto do objeto.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item6">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%606.Item6%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">É possível determinar dinamicamente o tipo do componente <ph id="ph1">&lt;xref:System.Tuple%606.Item6%2A&gt;</ph> de duas maneiras:</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item6">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%606.Item6%2A&gt;</ph> property.</source>
          <target state="translated">Chamando o método <ph id="ph1">`GetType`</ph> no valor retornado pela propriedade <ph id="ph2">&lt;xref:System.Tuple%606.Item6%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item6">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> object, and retrieving the first element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Recuperando o objeto <ph id="ph1">&lt;xref:System.Type&gt;</ph> que representa o objeto <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> e recuperando o primeiro elemento da matriz que é retornada pelo método <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item6">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1960 through 2000.</source>
          <target state="translated">O exemplo a seguir define uma matriz de objetos <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> cujos componentes contêm dados de preenchimento para três cidades dos EUA (Nova York, Chicago e Los Angeles) de 1960 até 2000.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item6">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">Em seguida, ele exibe em uma tabela que lista os dados.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item6">
          <source>To display the population in 2000, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%606.Item6%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> object.</source>
          <target state="translated">Para exibir a população em 2000, ele recupera o valor da <ph id="ph1">&lt;xref:System.Tuple%606.Item6%2A&gt;</ph> propriedade para cada <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>An object to compare with the current instance.</source>
          <target state="translated">Um objeto a ser comparado com a instância atual.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>An object that provides custom rules for comparison.</source>
          <target state="translated">Um objeto que fornece regras personalizadas para comparação.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Compares the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</source>
          <target state="translated">Compara o objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> atual com um objeto especificado usando um comparador especificado e retorna um inteiro que indica se o objeto atual está antes, depois ou na mesma posição do objeto especificado na ordem de classificação.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>A signed integer that indicates the relative position of this instance and <ph id="ph1">&lt;paramref name="other" /&gt;</ph> in the sort order, as shown in the following table.</source>
          <target state="translated">Um inteiro assinado que indica a posição relativa dessa instância e <ph id="ph1">&lt;paramref name="other" /&gt;</ph> na ordem de classificação, conforme mostrado na tabela a seguir.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Valor</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Description</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Descrição</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A negative integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Um inteiro negativo</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Esta instância precede <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance and <ph id="ph3">&lt;paramref name="other" /&gt;</ph> have the same position in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Esta instância e <ph id="ph3">&lt;paramref name="other" /&gt;</ph> têm a mesma posição na ordem de classificação.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A positive integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Um inteiro positivo</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Esta instância segue <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Este membro é uma implementação do membro de interface explícita.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralComparable&gt;</ph> interface.</source>
          <target state="translated">Ele só pode ser usado quando a instância de <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> é convertida em uma interface de <ph id="ph2">&lt;xref:System.Collections.IStructuralComparable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>This method lets you define customized comparisons of <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objects.</source>
          <target state="translated">Esse método permite que você defina as comparações personalizadas de <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objetos.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>For example, you can use this method to order <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objects based on the value of a specific component.</source>
          <target state="translated">Por exemplo, você pode usar esse método para ordem <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objetos com base no valor de um componente específico.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Although this method can be called directly, it is most commonly called by collection-sorting methods that include <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> parameters to order the members of a collection.</source>
          <target state="translated">Embora possa ser chamado diretamente, esse método é mais comumente chamado pelos métodos de classificação de coleção que incluem parâmetros <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> para classificar os membros de uma coleção.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>For example, it is called by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph> method of a <ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph> object that is instantiated by using the <ph id="ph4">&lt;xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> constructor.</source>
          <target state="translated">Por exemplo, ele é chamado pelo método <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> e pelo método <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph> de um objeto <ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph> que é instanciado usando-se o construtor <ph id="ph4">&lt;xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%606.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph> method is intended for use in sorting operations.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Tuple%606.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph> método destina-se ao uso em operações de classificação.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</source>
          <target state="translated">Ele não deve ser usado quando a finalidade principal de uma comparação é determinar se dois objetos são iguais.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>To determine whether two objects are equal, call the <ph id="ph1">&lt;xref:System.Tuple%606.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29&gt;</ph> method.</source>
          <target state="translated">Para determinar se dois objetos são iguais, chame o <ph id="ph1">&lt;xref:System.Tuple%606.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The following example creates an array of <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objects that contains population data for three U.S. cities from 1960 to 2000.</source>
          <target state="translated">O exemplo a seguir cria uma matriz de <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objetos que contém dados de população para três cidades EUA 1960 a 2000.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The sextuple's first component is the city name.</source>
          <target state="translated">Componente de primeiro do sêxtupla é o nome da cidade.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The remaining five components represent the population at 10-year intervals from 1960 to 2000.</source>
          <target state="translated">Os cinco componentes restantes representam a população em intervalos de 10 anos de 1960 a 2000.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The <ph id="ph1">`PopulationComparer`</ph> class provides an <ph id="ph2">&lt;xref:System.Collections.IComparer&gt;</ph> implementation that allows the array of sextuples to be sorted by any one of its components.</source>
          <target state="translated">O <ph id="ph1">`PopulationComparer`</ph> classe fornece um <ph id="ph2">&lt;xref:System.Collections.IComparer&gt;</ph> implementação que permite que a matriz de sextuples a ser classificada por qualquer um de seus componentes.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Two values are provided to the <ph id="ph1">`PopulationComparer`</ph> class in its constructor: The position of the component that defines the sort order, and a <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the tuple objects should be sorted in ascending or descending order.</source>
          <target state="translated">Dois valores são fornecidos para o <ph id="ph1">`PopulationComparer`</ph> classe em seu construtor: A posição do componente que define a ordem de classificação, e um <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> valor que indica se os objetos de tupla devem ser classificados em ordem crescente ou decrescente.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The example then displays the elements in the array in unsorted order, sorts them by the third component (the population in 1970) and displays them, and then sorts them by the sixth component (the population in 2000) and displays them.</source>
          <target state="translated">O exemplo, em seguida, exibe os elementos na matriz na ordem não classificado, classifica pelo terceiro componente (a população em 1970) e exibi-los, classifica pelo componente sexto (a população em 2000) e exibe-os.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;paramref name="other" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="other" /&gt;</ph> não é um objeto <ph id="ph2">&lt;see cref="T:System.Tuple`6" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The object to compare with this instance.</source>
          <target state="translated">O objeto a ser comparado com essa instância.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>An object that defines the method to use to evaluate whether the two objects are equal.</source>
          <target state="translated">Um objeto que define o método a ser usado para avaliar se dois objetos são iguais.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object is equal to a specified object based on a specified comparison method.</source>
          <target state="translated">Retorna um valor que indica se o objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> atual é igual ao objeto especificado com base em um determinado método de comparação.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance is equal to the specified object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> caso a instância atual seja igual ao objeto especificado; do contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Este membro é uma implementação do membro de interface explícita.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.</source>
          <target state="translated">Ele só pode ser usado quando a instância de <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> é convertida em uma interface de <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementation is called only if <ph id="ph2">`other`</ph> is not <ph id="ph3">`null`</ph>, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <ph id="ph4">&lt;xref:System.Tuple%606&gt;</ph> object whose components are of the same types as the current instance.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementação é chamada somente se <ph id="ph2">`other`</ph> não é <ph id="ph3">`null`</ph>, e se ele pode ser com êxito cast (em c#) ou convertido (no Visual Basic) em um <ph id="ph4">&lt;xref:System.Tuple%606&gt;</ph> cujos componentes são dos mesmos tipos da instância atual do objeto.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%606.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29&gt;</ph> method first passes the <ph id="ph2">&lt;xref:System.Tuple%606.Item1%2A&gt;</ph> values of the <ph id="ph3">&lt;xref:System.Tuple%606&gt;</ph> objects to be compared to the <ph id="ph4">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Tuple%606.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29&gt;</ph> passa primeiro método de <ph id="ph2">&lt;xref:System.Tuple%606.Item1%2A&gt;</ph> valores da <ph id="ph3">&lt;xref:System.Tuple%606&gt;</ph> objetos a ser comparado com o <ph id="ph4">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementação.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>If this method call returns <ph id="ph1">`true`</ph>, the method is called again and passed the <ph id="ph2">&lt;xref:System.Tuple%606.Item2%2A&gt;</ph> values of the two <ph id="ph3">&lt;xref:System.Tuple%606&gt;</ph> objects.</source>
          <target state="translated">Se essa chamada de método retorna <ph id="ph1">`true`</ph>, o método é chamado novamente e passado a <ph id="ph2">&lt;xref:System.Tuple%606.Item2%2A&gt;</ph> valores dos dois <ph id="ph3">&lt;xref:System.Tuple%606&gt;</ph> objetos.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>This continues until the method call returns <ph id="ph1">`false`</ph> when it compares a specific pair of <ph id="ph2">`Item`</ph> values, or the two <ph id="ph3">&lt;xref:System.Tuple%606.Item6%2A&gt;</ph> values are passed to the method.</source>
          <target state="translated">Isso continua até que a chamada do método retorna <ph id="ph1">`false`</ph> quando ele se compara um par específico de <ph id="ph2">`Item`</ph> valores ou os dois <ph id="ph3">&lt;xref:System.Tuple%606.Item6%2A&gt;</ph> valores são passados para o método.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The following example defines a <ph id="ph1">`RateComparer`</ph> class that performs a custom test for equality.</source>
          <target state="translated">O exemplo a seguir define um <ph id="ph1">`RateComparer`</ph> classe que executa um teste personalizado para fins de igualdade.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>If the values that are passed to its <ph id="ph1">&lt;xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=nameWithType&gt;</ph> method are of type <ph id="ph2">&lt;xref:System.Single&gt;</ph> or <ph id="ph3">&lt;xref:System.Double&gt;</ph>, the method tests for equality by using only up to three fractional digits.</source>
          <target state="translated">Se os valores que são passados para o <ph id="ph1">&lt;xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=nameWithType&gt;</ph> método são do tipo <ph id="ph2">&lt;xref:System.Single&gt;</ph> ou <ph id="ph3">&lt;xref:System.Double&gt;</ph>, o método testa a igualdade usando até três dígitos fracionários.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>Otherwise, it simply calls the <ph id="ph1">`x`</ph> parameter's <ph id="ph2">`Equals`</ph> method.</source>
          <target state="translated">Caso contrário, ele simplesmente chama o <ph id="ph1">`x`</ph> do parâmetro <ph id="ph2">`Equals`</ph> método.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The example uses this <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer&gt;</ph> implementation to determine whether four <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> objects that contain data on the rate of population change between 1960 and 2000 are equal.</source>
          <target state="translated">O exemplo usa esse <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer&gt;</ph> implementação para determinar se quatro <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> objetos que contêm dados sobre a taxa de alteração de população entre 1960 e 2000 são iguais.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>An object whose <ph id="ph1">&lt;see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /&gt;</ph> method calculates the hash code of the current <ph id="ph2">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object.</source>
          <target state="translated">Um objeto cujo método <ph id="ph1">&lt;see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /&gt;</ph> calcula o código hash do objeto <ph id="ph2">&lt;see cref="T:System.Tuple`6" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>Calculates the hash code for the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object by using a specified computation method.</source>
          <target state="translated">Calcula o código hash para o objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> atual usando um método de computação especificado.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">Um código de hash do inteiro assinado de 32 bits.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Este membro é uma implementação do membro de interface explícita.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.</source>
          <target state="translated">Ele só pode ser usado quando a instância de <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> é convertida em uma interface de <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>The method simply wraps a call to the <ph id="ph1">`comparer`</ph> object's <ph id="ph2">&lt;xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">O método simplesmente encapsula uma chamada para o objeto <ph id="ph1">`comparer`</ph> na implementação <ph id="ph2">&lt;xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>The algorithm used to compute the hash code should return the same hash code for two <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objects that are considered to be equal.</source>
          <target state="translated">O algoritmo usado para calcular o código hash deve retornar o mesmo código hash para duas <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objetos que são considerados iguais.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>An object to compare with the current instance.</source>
          <target state="translated">Um objeto a ser comparado com a instância atual.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>Compares the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</source>
          <target state="translated">Compara o objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> atual a um objeto especificado e retorna um inteiro que indica se o objeto atual está antes, depois ou na mesma posição que o objeto especificado na ordem de classificação.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>A signed integer that indicates the relative position of this instance and <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> in the sort order, as shown in the following table.</source>
          <target state="translated">Um inteiro assinado que indica a posição relativa dessa instância e <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> na ordem de classificação, conforme mostrado na tabela a seguir.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Valor</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Description</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Descrição</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A negative integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Um inteiro negativo</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Esta instância precede <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance and <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> have the same position in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Esta instância e <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> têm a mesma posição na ordem de classificação.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A positive integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Um inteiro positivo</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Esta instância segue <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Este membro é uma implementação do membro de interface explícita.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">Ele só pode ser usado quando a instância de <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> é convertida em uma interface de <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>This method provides the <ph id="ph1">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType&gt;</ph> implementation for the <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> class.</source>
          <target state="translated">Esse método fornece o <ph id="ph1">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType&gt;</ph> implementação para o <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>Although the method can be called directly, it is most commonly called by the default overloads of collection-sorting methods, such as <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType&gt;</ph>, to order the members of a collection.</source>
          <target state="translated">Embora possa ser chamado diretamente, o método é mais comumente chamado pelas sobrecargas padrão de métodos de classificação da coleção, como <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph> e <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType&gt;</ph>, para classificar os membros de uma coleção.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%606.System%23IComparable%23CompareTo%2A&gt;</ph> method is intended for use in sorting operations.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Tuple%606.System%23IComparable%23CompareTo%2A&gt;</ph> método destina-se ao uso em operações de classificação.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</source>
          <target state="translated">Ele não deve ser usado quando a finalidade principal de uma comparação é determinar se dois objetos são iguais.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>To determine whether two objects are equal, call the <ph id="ph1">&lt;xref:System.Tuple%606.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Para determinar se dois objetos são iguais, chame o <ph id="ph1">&lt;xref:System.Tuple%606.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%606.System%23IComparable%23CompareTo%28System.Object%29&gt;</ph> method uses the default object comparer to compare each component.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Tuple%606.System%23IComparable%23CompareTo%28System.Object%29&gt;</ph> método usa o comparador de objeto padrão para comparar cada componente.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>The following example creates an array of <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objects that contain population data for three cities in the United States from 1960 to 2000.</source>
          <target state="translated">O exemplo a seguir cria uma matriz de <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objetos que contêm dados de população para três cidades nos Estados Unidos de 1960 a 2000.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>The six components consist of the city name followed by the city's population at 10-year intervals from 1960 to 2000.</source>
          <target state="translated">Os componentes de seis consistem no nome da cidade seguido por população da cidade em intervalos de 10 anos de 1960 a 2000.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>The example displays the components of each tuple in the array in unsorted order, sorts the array, and then calls the <ph id="ph1">&lt;xref:System.Tuple%606.ToString%2A&gt;</ph> method to display each tuple in sorted order.</source>
          <target state="translated">O exemplo exibe os componentes de cada tupla no conjunto em ordem não classificado, classifica a matriz e, em seguida, chama o <ph id="ph1">&lt;xref:System.Tuple%606.ToString%2A&gt;</ph> método para exibir cada tupla na ordem de classificação.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>The output shows that the array has been sorted by name, which is the first component.</source>
          <target state="translated">A saída mostra que a matriz foi classificada por nome, que é o primeiro componente.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>Note that the example does not directly call the <ph id="ph1">&lt;xref:System.Tuple%606.System%23IComparable%23CompareTo%28System.Object%29&gt;</ph> method.</source>
          <target state="translated">Observe que o exemplo não chama diretamente o <ph id="ph1">&lt;xref:System.Tuple%606.System%23IComparable%23CompareTo%28System.Object%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>This method is called implicitly by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29&gt;</ph> method for each element in the array.</source>
          <target state="translated">Este método é chamado implicitamente pelo método <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29&gt;</ph> para cada elemento na matriz.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> não é um objeto <ph id="ph2">&lt;see cref="T:System.Tuple`6" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The index of the specified <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element.</source>
          <target state="translated">O índice do elemento <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> can range from 0 to 5.</source>
          <target state="translated">O <bpt id="p1">&lt;c&gt;</bpt>índice<ept id="p1">&lt;/c&gt;</ept> pode variar de 0 a 5.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>Gets the value of the specified <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element.</source>
          <target state="translated">Obtém o valor do elemento <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The value of the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element at the specified position.</source>
          <target state="translated">O valor do elemento <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> na posição especificada.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%606.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType&gt;</ph> property is an explicit interface implementation.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Tuple%606.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType&gt;</ph> propriedade é uma implementação de interface explícita.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>To call it, you must cast or convert the <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> object to an <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> interface object.</source>
          <target state="translated">Para chamá-lo, você deve lançar ou converter o <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> o objeto para um <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> objeto de interface.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0 or greater than 5.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é menor que 0 ou maior que 5.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Length">
          <source>Gets the number of elements in the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</source>
          <target state="translated">Obtém o número de elementos no <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Length">
          <source>6, the number of elements in a <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object.</source>
          <target state="translated">6, o número de elementos em um objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Length">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%606.System%23Runtime%23CompilerServices%23ITuple%23Length%2A&gt;</ph> property is an explicit interface implementation.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Tuple%606.System%23Runtime%23CompilerServices%23ITuple%23Length%2A&gt;</ph> propriedade é uma implementação de interface explícita.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Length">
          <source>To call it, you must cast or convert the <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> object to an <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> interface object.</source>
          <target state="translated">Para chamá-lo, você deve lançar ou converter o <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> o objeto para um <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> objeto de interface.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.ToString">
          <source>Returns a string that represents the value of this <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> instance.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor desta instância <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.ToString">
          <source>The string representation of this <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object.</source>
          <target state="translated">A representação de cadeia de caracteres desse objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.ToString">
          <source>The string returned by this method takes the form (<bpt id="p1">*</bpt>Item1<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Item2<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Item3<ept id="p3">*</ept>, <bpt id="p4">*</bpt>Item4<ept id="p4">*</ept>, <ph id="ph1">`Item5, Item6`</ph>), where <bpt id="p5">*</bpt>Item1<ept id="p5">*</ept>, <bpt id="p6">*</bpt>Item2<ept id="p6">*</ept>, <bpt id="p7">*</bpt>Item3<ept id="p7">*</ept>, <bpt id="p8">*</bpt>Item4<ept id="p8">*</ept>, <bpt id="p9">*</bpt>Item5<ept id="p9">*</ept>, and <bpt id="p10">*</bpt>Item6<ept id="p10">*</ept> represent the values of the <ph id="ph2">&lt;xref:System.Tuple%606.Item1%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%606.Item2%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%606.Item3%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%606.Item4%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%606.Item5%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Tuple%606.Item6%2A&gt;</ph> properties, respectively.</source>
          <target state="translated">A cadeia de caracteres retornada por este método assume a forma (<bpt id="p1">*</bpt>Item1<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Item2<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Item3<ept id="p3">*</ept>, <bpt id="p4">*</bpt>Item4<ept id="p4">*</ept>, <ph id="ph1">`Item5, Item6`</ph>), onde <bpt id="p5">*</bpt>Item1<ept id="p5">*</ept>, <bpt id="p6">*</bpt>Item2<ept id="p6">*</ept>, <bpt id="p7">*</bpt>Item3<ept id="p7">*</ept>, <bpt id="p8">*</bpt>Item4<ept id="p8">*</ept>, <bpt id="p9">*</bpt>Item5<ept id="p9">*</ept>, e <bpt id="p10">*</bpt>Item6<ept id="p10">*</ept> representam os valores da <ph id="ph2">&lt;xref:System.Tuple%606.Item1%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%606.Item2%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%606.Item3%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%606.Item4%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%606.Item5%2A&gt;</ph>, e <ph id="ph7">&lt;xref:System.Tuple%606.Item6%2A&gt;</ph> propriedades, respectivamente.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.ToString">
          <source>If any of the property values is <ph id="ph1">`null`</ph>, it is represented as <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Caso seja <ph id="ph1">`null`</ph>, qualquer um dos valores de propriedade é representado como <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.ToString">
          <source>The following example defines a <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> object that contains population data for New York City for each census from 1960 through 2000.</source>
          <target state="translated">O exemplo a seguir define uma <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objeto que contém dados de população cidade de Nova York, para cada censo de 1960 por meio de 2000.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.ToString">
          <source>The components of the sextuple are then displayed by a call to the <ph id="ph1">&lt;xref:System.Tuple%606.ToString%2A&gt;</ph> method.</source>
          <target state="translated">Os componentes do sêxtupla são exibidos por uma chamada para o <ph id="ph1">&lt;xref:System.Tuple%606.ToString%2A&gt;</ph> método.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>