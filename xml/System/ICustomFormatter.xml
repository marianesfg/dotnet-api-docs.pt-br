<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="440e566843bd8a6f7aa2849b29bdd2300c580fd1" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39853291" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <TypeSignature Language="F#" Value="type ICustomFormatter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="810dd-101">Define um método que dá suporte à formatação personalizada do valor de um objeto.</span>
      <span class="sxs-lookup">
        <span data-stu-id="810dd-101">Defines a method that supports custom formatting of the value of an object.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="810dd-102">O <xref:System.ICustomFormatter> interface inclui um único método, <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="810dd-102">The <xref:System.ICustomFormatter> interface includes a single method, <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="810dd-103">Quando essa interface é implementada por um tipo de valor ou referência, o <xref:System.ICustomFormatter.Format%2A> método retorna uma representação de cadeia de caracteres formatada personalizada do valor de um objeto.</span><span class="sxs-lookup"><span data-stu-id="810dd-103">When this interface is implemented by a reference or value type, the <xref:System.ICustomFormatter.Format%2A> method returns a custom-formatted string representation of an object's value.</span></span>  
  
 <span data-ttu-id="810dd-104">Normalmente, o <xref:System.ICustomFormatter> interface é implementada com o <xref:System.IFormatProvider> interface para personalizar o comportamento de dois métodos do .NET Framework cadeia de caracteres composta formatação que incluem um <xref:System.IFormatProvider> parâmetro.</span><span class="sxs-lookup"><span data-stu-id="810dd-104">Typically, the <xref:System.ICustomFormatter> interface is implemented with the <xref:System.IFormatProvider> interface to customize the behavior of two .NET Framework composite string formatting methods that include an <xref:System.IFormatProvider> parameter.</span></span> <span data-ttu-id="810dd-105">Especificamente, o <xref:System.ICustomFormatter> interface pode fornecer a formatação personalizada do valor de um objeto passado para o <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> e <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> métodos.</span><span class="sxs-lookup"><span data-stu-id="810dd-105">Specifically, the <xref:System.ICustomFormatter> interface can provide custom formatting of the value of an object passed to the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> and <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="810dd-106">Fornecer uma representação personalizada do valor de um objeto requer que você faça o seguinte:</span><span class="sxs-lookup"><span data-stu-id="810dd-106">Providing a custom representation of an object's value requires that you do the following:</span></span>  
  
1.  <span data-ttu-id="810dd-107">Definir uma classe que implementa o <xref:System.ICustomFormatter> interface e seu único membro, o <xref:System.ICustomFormatter.Format%2A> método.</span><span class="sxs-lookup"><span data-stu-id="810dd-107">Define a class that implements the <xref:System.ICustomFormatter> interface and its single member, the <xref:System.ICustomFormatter.Format%2A> method.</span></span>  
  
2.  <span data-ttu-id="810dd-108">Definir uma classe que implementa o <xref:System.IFormatProvider> interface e seu único membro, o <xref:System.IFormatProvider.GetFormat%2A> método.</span><span class="sxs-lookup"><span data-stu-id="810dd-108">Define a class that implements the <xref:System.IFormatProvider> interface and its single member, the <xref:System.IFormatProvider.GetFormat%2A> method.</span></span> <span data-ttu-id="810dd-109">O <xref:System.IFormatProvider.GetFormat%2A> método retorna uma instância do seu <xref:System.ICustomFormatter> implementação.</span><span class="sxs-lookup"><span data-stu-id="810dd-109">The <xref:System.IFormatProvider.GetFormat%2A> method returns an instance of your <xref:System.ICustomFormatter> implementation.</span></span> <span data-ttu-id="810dd-110">Muitas vezes, uma única classe implementa ambos <xref:System.ICustomFormatter> e <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="810dd-110">Often, a single class implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="810dd-111">Nesse caso, a classe `GetFormat` implementação simplesmente retorna uma instância de si mesmo.</span><span class="sxs-lookup"><span data-stu-id="810dd-111">In that case, the class's `GetFormat` implementation just returns an instance of itself.</span></span>  
  
3.  <span data-ttu-id="810dd-112">Passe o <xref:System.IFormatProvider> implementação como o `provider` argumento do <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> método ou um método comparável.</span><span class="sxs-lookup"><span data-stu-id="810dd-112">Pass the <xref:System.IFormatProvider> implementation as the `provider` argument of the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method or a comparable method.</span></span>  
  
 <span data-ttu-id="810dd-113">O método do .NET Framework, em seguida, usará sua formatação personalizada em vez de seu próprio.</span><span class="sxs-lookup"><span data-stu-id="810dd-113">The .NET Framework method will then use your custom formatting instead of its own.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="810dd-114">O exemplo a seguir implementa <xref:System.ICustomFormatter> para permitir que o binário, octais e hexadecimais de formatação de valores integrais.</span><span class="sxs-lookup"><span data-stu-id="810dd-114">The following example implements <xref:System.ICustomFormatter> to allow binary, octal, and hexadecimal formatting of integral values.</span></span> <span data-ttu-id="810dd-115">Neste exemplo, uma única classe, `IBinaryFormatter`, implementa ambos <xref:System.ICustomFormatter> e <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="810dd-115">In this example, a single class, `IBinaryFormatter`, implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="810dd-116">Sua <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> método determina se o `formatType` parâmetro representa um <xref:System.ICustomFormatter> tipo.</span><span class="sxs-lookup"><span data-stu-id="810dd-116">Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method determines whether the `formatType` parameter represents an <xref:System.ICustomFormatter> type.</span></span> <span data-ttu-id="810dd-117">Se isso acontecer, `BinaryFormatter` retorna uma instância do próprio; caso contrário, retornará `null`.</span><span class="sxs-lookup"><span data-stu-id="810dd-117">If it does, `BinaryFormatter` returns an instance of itself; otherwise, it returns `null`.</span></span> <span data-ttu-id="810dd-118">Sua <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementação determina se o parâmetro de formato é uma das três cadeias de caracteres de formato com suporte ("B" para binário, "O" para octal e "H" para hexadecimal) e formata o `arg` parâmetro adequadamente.</span><span class="sxs-lookup"><span data-stu-id="810dd-118">Its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the `arg` parameter appropriately.</span></span> <span data-ttu-id="810dd-119">Caso contrário, se `arg` não é `null`, ele chama o `arg` do parâmetro <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementação, se houver, ou sem seus parâmetros `ToString` método, se não.</span><span class="sxs-lookup"><span data-stu-id="810dd-119">Otherwise, if `arg` is not `null`, it calls the `arg` parameter's <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation, if one exists, or its parameterless `ToString` method, if one does not.</span></span> <span data-ttu-id="810dd-120">Se `arg` for `null`, o método retornará <xref:System.String.Empty?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="810dd-120">If `arg` is `null`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 <span data-ttu-id="810dd-121">`BinaryFormatter` em seguida, pode ser usado para fornecer formatação personalizada, passando um `BinaryFormatter` objeto como o `provider` parâmetro do <xref:System.String.Format%2A> método, como mostra o exemplo a seguir.</span><span class="sxs-lookup"><span data-stu-id="810dd-121">`BinaryFormatter` can then be used to provide custom formatting by passing a `BinaryFormatter` object as the `provider` parameter of the <xref:System.String.Format%2A> method, as the following example shows.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="810dd-122">
        <para>O common language runtime tenta usar seu <see cref="T:System.ICustomFormatter" /> implementação para cada item de formato em uma cadeia de caracteres de formato composto. Como resultado, você deve esperar que seu <see cref="T:System.ICustomFormatter" /> implementação será chamada para fornecer serviços de formatação para objetos ou valores que ele não foi projetado para lidar com. Nesses casos, seu <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> método deve chamar o método de formatação apropriado para esse objeto ou valor.  Há dois tipos de <see cref="T:System.ICustomFormatter" /> implementações: intrínseco e a extensão.  Implementações de intrínsecos são implementações que fornecem formatação personalizada para um objeto definido pelo aplicativo. Nesse caso, sua implementação deve incluir o seguinte:-uma definição de cadeias de caracteres de formato que definem a formatação do objeto. Cadeias de caracteres de formato são opcionais. Normalmente, uma cadeia de caracteres de formato "G" ou "g" define o formato geral (ou mais comumente usado). No entanto, você é livre para definir qualquer cadeia de caracteres de formato que você escolher. Você também tem liberdade decidir se eles são maiusculas e minúsculas ou maiusculas de minúsculas.  -Um teste para garantir que o tipo do objeto passado para sua <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> método é seu tipo definido pelo aplicativo. Se não for, você deve chamar o objeto <see cref="T:System.IFormattable" /> implementação, caso exista, ou seu <see cref="M:System.Object.ToString" /> método, se não existir. Você deve estar preparado para lidar com essas chamadas de método podem lançar exceções.  -Código para lidar com uma cadeia de caracteres de formato nulo, se sua implementação dá suporte a cadeias de caracteres de formato. A abordagem mais comum é substituir uma cadeia de caracteres de formato null com o especificador de formato geral.  -Código para lidar com qualquer cadeia de caracteres de formato que dá suporte a sua implementação.  -Código para manipular cadeias de caracteres de formato que não têm suporte. A abordagem mais comum é lançar um <see cref="T:System.FormatException" />, embora você possa fornecer a formatação padrão.  As implementações de extensão são implementações que fornecem formatação personalizada para um tipo que já tem o suporte a formatação. Por exemplo, você pode definir um <c>CustomerNumberFormatter</c> que formata um tipo integral com hifens entre dígitos específicos. Nesse caso, sua implementação deve incluir o seguinte:-uma definição de cadeias de caracteres de formato que estendem a formatação do objeto. Essas cadeias de caracteres de formato são necessárias, mas eles não devem entrar em conflito com cadeias de caracteres de formato existente do tipo. Por exemplo, se você estiver estendendo formatação para o <see cref="T:System.Int32" /> tipo, você não deve implementar os especificadores de formato "C", "D", "E", "F" e "G", entre outros.  -Um teste que o tipo do objeto passado para sua <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> método é um tipo cuja formatação sua extensão dá suporte. Se não estiver, chame o objeto <see cref="T:System.IFormattable" /> implementação, se houver, ou o objeto sem parâmetros <see cref="M:System.Object.ToString" /> método, se não existir. Você deve estar preparado para lidar com essas chamadas de método podem lançar exceções.  -Código para lidar com qualquer cadeia de caracteres de formato que dá suporte a sua extensão.  -Código para lidar com qualquer cadeia de caracteres de formato que não dão suporte a sua extensão. Elas devem ser transmitidas para o tipo <see cref="T:System.IFormattable" /> implementação. Você deve estar preparado para lidar com essas chamadas de método podem lançar exceções.</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="810dd-122">
          <para>The common language runtime attempts to use your <see cref="T:System.ICustomFormatter" /> implementation for every format item in a composite format string. As a result, you should expect that your <see cref="T:System.ICustomFormatter" /> implementation will be called to provide formatting services to objects or values that it is not designed to handle. In these cases, your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method must call the appropriate formatting method for that object or value.  There are two kinds of <see cref="T:System.ICustomFormatter" /> implementations: intrinsic and extension.  Intrinsic implementations are implementations that provide custom formatting for an application-defined object. In this case, your implementation should include the following:  -   A definition of format strings that define the formatting of the object. Format strings are optional. Typically, a "G" or "g" format string defines the general (or most commonly used) format. However, you are free to define any format strings that you choose. You are also free to decide whether they are case-sensitive or case-insensitive.  -   A test to ensure that the type of the object passed to your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method is your application-defined type. If it is not, you should call the object's <see cref="T:System.IFormattable" /> implementation, if one exists, or its <see cref="M:System.Object.ToString" /> method, if it does not. You should be prepared to handle any exceptions these method calls might throw.  -   Code to handle a null format string, if your implementation supports format strings. The most common approach is to replace a null format string with the general format specifier.  -   Code to handle any format strings that your implementation supports.  -   Code to handle format strings that you do not support. The most common approach is to throw a <see cref="T:System.FormatException" />, although you can provide default formatting.  Extension implementations are implementations that provide custom formatting for a type that already has formatting support. For example, you could define a <c>CustomerNumberFormatter</c> that formats an integral type with hyphens between specific digits. In this case, your implementation should include the following:  -   A definition of format strings that extend the formatting of the object. These format strings are required, but they must not conflict with the type's existing format strings. For example, if you are extending formatting for the <see cref="T:System.Int32" /> type, you should not implement the "C", "D", "E", "F", and "G" format specifiers, among others.  -   A test that the type of the object passed to your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method is a type whose formatting your extension supports. If it is not, call the object's <see cref="T:System.IFormattable" /> implementation, if one exists, or the object's parameterless <see cref="M:System.Object.ToString" /> method, if it does not. You should be prepared to handle any exceptions these method calls might throw.  -   Code to handle any format strings that your extension supports.  -   Code to handle any format strings that your extension does not support. These should be passed on to the type's <see cref="T:System.IFormattable" /> implementation. You should be prepared to handle any exceptions these method calls might throw.</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member Format : string * obj * IFormatProvider -&gt; string" Usage="iCustomFormatter.Format (format, arg, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="810dd-123">Uma cadeia de caracteres de formato que contém especificações de formatação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="810dd-123">A format string containing formatting specifications.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="810dd-124">Um objeto a ser formatado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="810dd-124">An object to format.</span>
          </span>
        </param>
        <param name="formatProvider">
          <span data-ttu-id="810dd-125">Um objeto que fornece informações de formato sobre a instância atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="810dd-125">An object that supplies format information about the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="810dd-126">Converte o valor de um objeto especificado em uma representação de cadeia de caracteres equivalente usando as informações de formatação específicas da cultura especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="810dd-126">Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="810dd-127">A representação da cadeia de caracteres do valor de <paramref name="arg" />, formatada conforme especificado por <paramref name="format" /> e <paramref name="formatProvider" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="810dd-127">The string representation of the value of <paramref name="arg" />, formatted as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="810dd-128"><xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> é um método de retorno de chamada.</span><span class="sxs-lookup"><span data-stu-id="810dd-128"><xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> is a callback method.</span></span> <span data-ttu-id="810dd-129">Ele é chamado por um método que dá suporte à formatação personalizada, como <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> ou <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="810dd-129">It is called by a method that supports custom formatting, such as <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> or <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="810dd-130">A implementação é chamada uma vez para cada item de formato em uma [cadeia de caracteres de formato composto](~/docs/standard/base-types/composite-formatting.md).</span><span class="sxs-lookup"><span data-stu-id="810dd-130">The implementation is called once for each format item in a [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span> <span data-ttu-id="810dd-131">Por exemplo, na instrução a seguir, o <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> método é chamado de três vezes.</span><span class="sxs-lookup"><span data-stu-id="810dd-131">For example, in the following statement, the <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> method is called three times.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 <span data-ttu-id="810dd-132">O `arg` parâmetro é o objeto na lista de objetos cuja posição baseada em zero corresponde ao índice de um item de formato específico.</span><span class="sxs-lookup"><span data-stu-id="810dd-132">The `arg` parameter is the object in the object list whose zero-based position corresponds to the index of a particular format item.</span></span>  
  
 <span data-ttu-id="810dd-133">O `format` parâmetro contém uma cadeia de caracteres de formato, que é o `formatString` componente de um item de formato.</span><span class="sxs-lookup"><span data-stu-id="810dd-133">The `format` parameter contains a format string, which is the `formatString` component of a format item.</span></span> <span data-ttu-id="810dd-134">Se o item de formato não tiver nenhuma `formatString` componente, o valor da `format` é `null`.</span><span class="sxs-lookup"><span data-stu-id="810dd-134">If the format item has no `formatString` component, the value of `format` is `null`.</span></span> <span data-ttu-id="810dd-135">Se `format` está `null`, dependendo do tipo de `arg`, você poderá usar a especificação de formato padrão de sua escolha.</span><span class="sxs-lookup"><span data-stu-id="810dd-135">If `format` is `null`, depending on the type of `arg`, you may be able to use the default format specification of your choice.</span></span>  
  
 <span data-ttu-id="810dd-136">O `formatProvider` parâmetro é o <xref:System.IFormatProvider> implementação que fornece a formatação para `arg`.</span><span class="sxs-lookup"><span data-stu-id="810dd-136">The `formatProvider` parameter is the <xref:System.IFormatProvider> implementation that provides formatting for `arg`.</span></span> <span data-ttu-id="810dd-137">Normalmente, é uma instância do seu <xref:System.ICustomFormatter> implementação.</span><span class="sxs-lookup"><span data-stu-id="810dd-137">Typically, it is an instance of your <xref:System.ICustomFormatter> implementation.</span></span> <span data-ttu-id="810dd-138">Se `formatProvider` é `null`, ignorem o parâmetro.</span><span class="sxs-lookup"><span data-stu-id="810dd-138">If `formatProvider` is `null`, ignore that parameter.</span></span>  
  
 <span data-ttu-id="810dd-139">Sua implementação do <xref:System.ICustomFormatter.Format%2A> método deve incluir a seguinte funcionalidade para o .NET Framework possa fornecer a formatação que você não dão suporte.</span><span class="sxs-lookup"><span data-stu-id="810dd-139">Your implementation of the <xref:System.ICustomFormatter.Format%2A> method must include the following functionality so the .NET Framework can provide formatting you do not support.</span></span> <span data-ttu-id="810dd-140">Se seu método de formatação não oferece suporte a um formato, determinar se o objeto que está sendo formatada implementa o <xref:System.IFormattable> interface.</span><span class="sxs-lookup"><span data-stu-id="810dd-140">If your format method does not support a format, determine whether the object being formatted implements the <xref:System.IFormattable> interface.</span></span> <span data-ttu-id="810dd-141">Se ele, invocar o <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> método dessa interface.</span><span class="sxs-lookup"><span data-stu-id="810dd-141">If it does, invoke the <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> method of that interface.</span></span> <span data-ttu-id="810dd-142">Caso contrário, invocar o padrão <xref:System.Object.ToString%2A?displayProperty=nameWithType> método do objeto subjacente.</span><span class="sxs-lookup"><span data-stu-id="810dd-142">Otherwise, invoke the default <xref:System.Object.ToString%2A?displayProperty=nameWithType> method of the underlying object.</span></span> <span data-ttu-id="810dd-143">O código a seguir ilustra esse padrão.</span><span class="sxs-lookup"><span data-stu-id="810dd-143">The following code illustrates this pattern.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="810dd-144">O exemplo a seguir implementa <xref:System.ICustomFormatter> para permitir que o binário, octais e hexadecimais de formatação de valores integrais.</span><span class="sxs-lookup"><span data-stu-id="810dd-144">The following example implements <xref:System.ICustomFormatter> to allow binary, octal, and hexadecimal formatting of integral values.</span></span> <span data-ttu-id="810dd-145">Sua <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementação determina se o parâmetro de formato é uma das três cadeias de caracteres de formato com suporte ("B" para binário, "O" para octal e "H" para hexadecimal) e formata o `arg` parâmetro adequadamente.</span><span class="sxs-lookup"><span data-stu-id="810dd-145">Its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the `arg` parameter appropriately.</span></span> <span data-ttu-id="810dd-146">Caso contrário, se `arg` não é `null`, ele chama o `arg` do parâmetro <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementação, se houver, ou sem seus parâmetros `ToString` método, se não.</span><span class="sxs-lookup"><span data-stu-id="810dd-146">Otherwise, if `arg` is not `null`, it calls the `arg` parameter's <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation, if one exists, or its parameterless `ToString` method, if one does not.</span></span> <span data-ttu-id="810dd-147">Se `arg` for `null`, o método retornará <xref:System.String.Empty?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="810dd-147">If `arg` is `null`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 <span data-ttu-id="810dd-148">`BinaryFormatter` em seguida, pode ser usado para fornecer formatação personalizada, passando um `BinaryFormatter` objeto como o `provider` parâmetro do <xref:System.String.Format%2A> método, como mostra o exemplo a seguir.</span><span class="sxs-lookup"><span data-stu-id="810dd-148">`BinaryFormatter` can then be used to provide custom formatting by passing a `BinaryFormatter` object as the `provider` parameter of the <xref:System.String.Format%2A> method, as the following example shows.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
      </Docs>
    </Member>
  </Members>
</Type>