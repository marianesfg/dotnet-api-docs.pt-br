<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Buffer.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac55e1d29e63ded4bec7a4b24dc14f7a73639dec8d5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e1d29e63ded4bec7a4b24dc14f7a73639dec8d5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Buffer">
          <source>Manipulates arrays of primitive types.</source>
          <target state="translated">Manipula as matrizes de tipos primitivos.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Buffer">
          <source><ph id="ph1">&lt;xref:System.Buffer&gt;</ph> only affects arrays of primitive types; this class does not apply to objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Buffer&gt;</ph> afeta somente a matrizes de tipos primitivos; Essa classe não se aplica a objetos.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Buffer">
          <source>Each primitive type is treated as a series of bytes without regard to any behavior or limitation associated with the primitive type.</source>
          <target state="translated">Cada tipo primitivo é tratado como uma série de bytes independentemente de qualquer comportamento ou limitação associado com o tipo primitivo.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Buffer">
          <source><ph id="ph1">&lt;xref:System.Buffer&gt;</ph> provides methods to copy bytes from one array of primitive types to another array of primitive types, get a byte from an array, set a byte in an array, and obtain the length of an array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Buffer&gt;</ph> fornece métodos para copiar bytes de uma matriz de tipos primitivos a outra matriz de tipos primitivos, obter um byte de uma matriz, defina um byte em uma matriz e obter o comprimento de uma matriz.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Buffer">
          <source>This class provides better performance for manipulating primitive types than similar methods in the <ph id="ph1">&lt;xref:System.Array?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Essa classe fornece um melhor desempenho para a manipulação de tipos primitivos de métodos semelhantes no <ph id="ph1">&lt;xref:System.Array?displayProperty=nameWithType&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Buffer">
          <source><ph id="ph1">&lt;xref:System.Buffer&gt;</ph> is applicable to the following primitive types: <ph id="ph2">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph3">&lt;xref:System.Char&gt;</ph>, <ph id="ph4">&lt;xref:System.SByte&gt;</ph>, <ph id="ph5">&lt;xref:System.Byte&gt;</ph>, <ph id="ph6">&lt;xref:System.Int16&gt;</ph>, <ph id="ph7">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph8">&lt;xref:System.Int32&gt;</ph>, <ph id="ph9">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph10">&lt;xref:System.Int64&gt;</ph>, <ph id="ph11">&lt;xref:System.UInt64&gt;</ph>, <ph id="ph12">&lt;xref:System.IntPtr&gt;</ph>, <ph id="ph13">&lt;xref:System.UIntPtr&gt;</ph>, <ph id="ph14">&lt;xref:System.Single&gt;</ph>, and <ph id="ph15">&lt;xref:System.Double&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Buffer&gt;</ph> é aplicável aos seguintes tipos primitivos: <ph id="ph2">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph3">&lt;xref:System.Char&gt;</ph>, <ph id="ph4">&lt;xref:System.SByte&gt;</ph>, <ph id="ph5">&lt;xref:System.Byte&gt;</ph>, <ph id="ph6">&lt;xref:System.Int16&gt;</ph>, <ph id="ph7">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph8">&lt;xref:System.Int32&gt;</ph>, <ph id="ph9">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph10">&lt;xref:System.Int64&gt;</ph>, <ph id="ph11">&lt;xref:System.UInt64&gt;</ph>, <ph id="ph12">&lt;xref:System.IntPtr&gt;</ph>, <ph id="ph13">&lt;xref:System.UIntPtr&gt;</ph>, <ph id="ph14">&lt;xref:System.Single&gt;</ph>, e <ph id="ph15">&lt;xref:System.Double&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Buffer">
          <source>The following code example illustrates the use of several <ph id="ph1">`Buffer`</ph> class methods.</source>
          <target state="translated">O exemplo de código a seguir ilustra o uso de várias <ph id="ph1">`Buffer`</ph> métodos de classe.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The source buffer.</source>
          <target state="translated">O buffer de origem.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The zero-based byte offset into <bpt id="p1">&lt;c&gt;</bpt>src<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O deslocamento de bytes baseado em zero em <bpt id="p1">&lt;c&gt;</bpt>src<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The destination buffer.</source>
          <target state="translated">O buffer de destino.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The zero-based byte offset into <bpt id="p1">&lt;c&gt;</bpt>dst<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O deslocamento de bytes baseado em zero em <bpt id="p1">&lt;c&gt;</bpt>dst<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The number of bytes to copy.</source>
          <target state="translated">O número de bytes a serem copiados.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>Copies a specified number of bytes from a source array starting at a particular offset to a destination array starting at a particular offset.</source>
          <target state="translated">Copia um número especificado de bytes de uma matriz de origem a partir de um deslocamento específico em uma matriz de destino a partir de um deslocamento específico.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>This method copies <ph id="ph1">`count`</ph> bytes from <ph id="ph2">`src`</ph>, beginning at <ph id="ph3">`srcOffset`</ph>, to <ph id="ph4">`dst`</ph>, beginning at <ph id="ph5">`dstOffset`</ph>.</source>
          <target state="translated">Esse método copia <ph id="ph1">`count`</ph> bytes do <ph id="ph2">`src`</ph>, começando em <ph id="ph3">`srcOffset`</ph>, <ph id="ph4">`dst`</ph>, começando em <ph id="ph5">`dstOffset`</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>Both <ph id="ph1">`srcOffset`</ph> and <ph id="ph2">`dstOffset`</ph> are zero-based; that is, the first byte in each buffer is at position 0, not position 1.</source>
          <target state="translated">Ambos <ph id="ph1">`srcOffset`</ph> e <ph id="ph2">`dstOffset`</ph> são baseadas em zero; isto é, o primeiro byte em cada buffer está na posição 0, não posição 1.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> method accesses the bytes in the <ph id="ph2">`src`</ph> parameter array using offsets into memory, not programming constructs such as indexes or upper and lower array bounds.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> método acessa os bytes a <ph id="ph2">`src`</ph> matriz de parâmetro usando deslocamentos na memória, não programação construções, como índices ou limites superior e inferior de matriz.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>For example, if in the programming language of your application you declare an <ph id="ph1">&lt;xref:System.Int32&gt;</ph> array with a zero-based lower bound of -50, and then pass the array and an offset of 5 to the <ph id="ph2">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> method, the first array element the method will access is the second element of the array, which is at index -49.</source>
          <target state="translated">Por exemplo, se na linguagem de programação do aplicativo que você declarar um <ph id="ph1">&lt;xref:System.Int32&gt;</ph> de matriz com um limite inferior com base em zero do -50 e, em seguida, passa a matriz e um deslocamento de 5 para o <ph id="ph2">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> , o primeiro elemento da matriz acessará o método é o segundo elemento da matriz, que está no índice-49.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>Furthermore, which byte of array element -49 is accessed first depends on the endianness of the computer that is executing your application.</source>
          <target state="translated">Além disso, os bytes do elemento de matriz-49 é acessada pela primeira vez depende endian do computador que está executando o aplicativo.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>As its name suggests, the <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> method copies a block of bytes as a whole, rather than copying one byte at a time.</source>
          <target state="translated">Como o nome sugere, o <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> método copia um bloco de bytes como um todo, em vez de copiar um byte por vez.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>Therefore, if <ph id="ph1">`src`</ph> and <ph id="ph2">`dst`</ph> reference the same array, and the range from <ph id="ph3">`srcOffset`</ph><ph id="ph4"> + </ph><ph id="ph5">`count`</ph> -1 overlaps the range from <ph id="ph6">`dstOffset`</ph><ph id="ph7"> + </ph><ph id="ph8">`count`</ph> - 1, the values of the overlapping bytes are not overwritten before they are copied to the destination.</source>
          <target state="translated">Portanto, se <ph id="ph1">`src`</ph> e <ph id="ph2">`dst`</ph> referenciar a mesma matriz e o intervalo de <ph id="ph3">`srcOffset`</ph> <ph id="ph4"> + </ph> <ph id="ph5">`count`</ph> -1 se sobrepõe o intervalo de <ph id="ph6">`dstOffset`</ph> <ph id="ph7"> + </ph> <ph id="ph8">`count`</ph> - 1, os valores dos bytes sobrepostos não são substituídos antes de serem copiadas para o destino.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>In the following example, the values of bytes 0-16 in an array named <ph id="ph1">`arr`</ph> are copied to bytes 12-28.</source>
          <target state="translated">No exemplo a seguir, os valores de 0-16 de bytes em uma matriz chamada <ph id="ph1">`arr`</ph> são copiados para bytes 12-28.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>Despite the overlapping range, the values of the source bytes are successfully copied.</source>
          <target state="translated">Apesar do intervalo de sobreposição, os valores dos bytes de origem são copiados com êxito.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>In the following example, the values of bytes 12-28 in an array named <ph id="ph1">`arr`</ph> are copied to bytes 0-16.</source>
          <target state="translated">No exemplo a seguir, os valores de 12-28 de bytes em uma matriz chamada <ph id="ph1">`arr`</ph> são copiados para bytes 0-16.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>Again, despite the overlapping range, the values of the source bytes are successfully copied.</source>
          <target state="translated">Novamente, apesar do intervalo de sobreposição, os valores dos bytes de origem são copiados com êxito.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The following example copies regions of arrays by using the <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir copia regiões de matrizes usando o <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>For each <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> operation, it lists the source and destination arrays as both an array of values and as a sequence of bytes.</source>
          <target state="translated">Para cada <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> operação, ele lista a origem e destino matrizes como uma matriz de valores e como uma sequência de bytes.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The example illustrates the importance of considering a system's endianness when working with the <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> method: Because Windows systems are little-endian, the lower-order bytes of a primitive data type's value precede the higher-order bytes.</source>
          <target state="translated">O exemplo ilustra a importância de se considerar endian do sistema ao trabalhar com o <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> método: sistemas Windows porque são little endian, os bytes de ordem inferior do valor de um tipo de dados primitivo precedem os bytes de ordem superior.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="src" /&gt;</ph> or <ph id="ph2">&lt;paramref name="dst" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="src" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="dst" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="src" /&gt;</ph> or <ph id="ph2">&lt;paramref name="dst" /&gt;</ph> is not an array of primitives.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="src" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="dst" /&gt;</ph> não é uma matriz de primitivos.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The number of bytes in <ph id="ph1">&lt;paramref name="src" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="srcOffset" /&gt;</ph> plus <ph id="ph3">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">O número de bytes em <ph id="ph1">&lt;paramref name="src" /&gt;</ph> é menor que a soma de <ph id="ph2">&lt;paramref name="srcOffset" /&gt;</ph> e <ph id="ph3">&lt;paramref name="count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The number of bytes in <ph id="ph1">&lt;paramref name="dst" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="dstOffset" /&gt;</ph> plus <ph id="ph3">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">O número de bytes em <ph id="ph1">&lt;paramref name="dst" /&gt;</ph> é menor que a soma de <ph id="ph2">&lt;paramref name="dstOffset" /&gt;</ph> e <ph id="ph3">&lt;paramref name="count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="srcOffset" /&gt;</ph>, <ph id="ph2">&lt;paramref name="dstOffset" /&gt;</ph>, or <ph id="ph3">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="srcOffset" /&gt;</ph>, <ph id="ph2">&lt;paramref name="dstOffset" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="count" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Buffer.ByteLength(System.Array)">
          <source>An array.</source>
          <target state="translated">Uma matriz.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Buffer.ByteLength(System.Array)">
          <source>Returns the number of bytes in the specified array.</source>
          <target state="translated">Retorna o número de bytes na matriz especificada.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Buffer.ByteLength(System.Array)">
          <source>The number of bytes in the array.</source>
          <target state="translated">O número de bytes na matriz.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.ByteLength(System.Array)">
          <source>The following code example illustrates the use of the <ph id="ph1">`ByteLength`</ph> method to return the number of bytes in an array.</source>
          <target state="translated">O exemplo de código a seguir ilustra o uso do <ph id="ph1">`ByteLength`</ph> método para retornar o número de bytes em uma matriz.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Buffer.ByteLength(System.Array)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Buffer.ByteLength(System.Array)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is not a primitive.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> não é um primitivo.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Buffer.ByteLength(System.Array)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is larger than 2 gigabytes (GB).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> é maior que 2 gigabytes (GB).</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source>An array.</source>
          <target state="translated">Uma matriz.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source>A location in the array.</source>
          <target state="translated">Um local na matriz.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source>Retrieves the byte at a specified location in a specified array.</source>
          <target state="translated">Recupera o byte em um local especificado em uma matriz especificada.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source>Returns the <ph id="ph1">&lt;paramref name="index" /&gt;</ph> byte in the array.</source>
          <target state="translated">Retorna o byte <ph id="ph1">&lt;paramref name="index" /&gt;</ph> na matriz.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source>The <ph id="ph1">`GetByte`</ph> method gets a particular byte out of the array.</source>
          <target state="translated">O <ph id="ph1">`GetByte`</ph> método obtém um byte específico fora da matriz.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source>The array must be an array of primitives.</source>
          <target state="translated">A matriz deve ser uma matriz de primitivos.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source>The following code example displays the byte values at specified locations within arrays using the <ph id="ph1">`GetByte`</ph> method.</source>
          <target state="translated">O exemplo de código a seguir exibe os valores de byte em locais especificados em matrizes usando o <ph id="ph1">`GetByte`</ph> método.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is not a primitive.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> não é um primitivo.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is negative or greater than the length of <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é negativo ou maior que o comprimento de <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is larger than 2 gigabytes (GB).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> é maior que 2 gigabytes (GB).</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="T:System.Buffer">
          <source>Copies a block of memory.</source>
          <target state="translated">Copia um bloco de memória.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
          <source>The address of the bytes to copy.</source>
          <target state="translated">O endereço dos bytes a serem copiados.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
          <source>The target address.</source>
          <target state="translated">O endereço de destino.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
          <source>The number of bytes available in the destination memory block.</source>
          <target state="translated">O número de bytes disponíveis no bloco de memória de destino.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
          <source>The number of bytes to copy.</source>
          <target state="translated">O número de bytes a serem copiados.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
          <source>Copies a number of bytes specified as a long integer value from one address in memory to another.</source>
          <target state="translated">Copia um número de bytes especificado como um valor inteiro longo de um endereço na memória para outro.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
          <source>This API is not CLS-compliant.</source>
          <target state="translated">Esta API não compatível com CLS.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
          <source>This method copies <ph id="ph1">`sourceBytesToCopy`</ph> bytes from the address specified by <ph id="ph2">`source`</ph> to the address specified by <ph id="ph3">`destination`</ph>.</source>
          <target state="translated">Esse método copia <ph id="ph1">`sourceBytesToCopy`</ph> bytes do endereço especificado pelo <ph id="ph2">`source`</ph> para o endereço especificado pelo <ph id="ph3">`destination`</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
          <source>If the buffers overlap and the difference between <ph id="ph1">`destination`</ph> minus <ph id="ph2">`source`</ph> is less than <ph id="ph3">`sourceBytesToCopy`</ph>, the source block is copied to the destination block in reverse order.</source>
          <target state="translated">Se os buffers se sobrepõem e a diferença entre <ph id="ph1">`destination`</ph> menos <ph id="ph2">`source`</ph> é menor que <ph id="ph3">`sourceBytesToCopy`</ph>, o bloco de origem é copiado para o bloco de destino na ordem inversa.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
          <source><ph id="ph1">&lt;paramref name="sourceBytesToCopy" /&gt;</ph> is greater than <ph id="ph2">&lt;paramref name="destinationSizeInBytes" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="sourceBytesToCopy" /&gt;</ph> é maior que <ph id="ph2">&lt;paramref name="destinationSizeInBytes" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
          <source>The address of the bytes to copy.</source>
          <target state="translated">O endereço dos bytes a serem copiados.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
          <source>The target address.</source>
          <target state="translated">O endereço de destino.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
          <source>The number of bytes available in the destination memory block.</source>
          <target state="translated">O número de bytes disponíveis no bloco de memória de destino.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
          <source>The number of bytes to copy.</source>
          <target state="translated">O número de bytes a serem copiados.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
          <source>Copies a number of bytes specified as an unsigned long integer value from one address in memory to another.</source>
          <target state="translated">Copia um número de bytes especificado como um valor inteiro longo sem sinal de um endereço na memória para outro.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
          <source>This API is not CLS-compliant.</source>
          <target state="translated">Esta API não compatível com CLS.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
          <source>This method copies <ph id="ph1">`sourceBytesToCopy`</ph> bytes from the address specified by <ph id="ph2">`source`</ph> to the address specified by <ph id="ph3">`destination`</ph>.</source>
          <target state="translated">Esse método copia <ph id="ph1">`sourceBytesToCopy`</ph> bytes do endereço especificado pelo <ph id="ph2">`source`</ph> para o endereço especificado pelo <ph id="ph3">`destination`</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
          <source>If the buffers overlap and the difference between <ph id="ph1">`destination`</ph> minus <ph id="ph2">`source`</ph> is less than <ph id="ph3">`sourceBytesToCopy`</ph>, the source block is copied to the destination block in reverse order.</source>
          <target state="translated">Se os buffers se sobrepõem e a diferença entre <ph id="ph1">`destination`</ph> menos <ph id="ph2">`source`</ph> é menor que <ph id="ph3">`sourceBytesToCopy`</ph>, o bloco de origem é copiado para o bloco de destino na ordem inversa.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="sourceBytesToCopy" /&gt;</ph> is greater than <ph id="ph2">&lt;paramref name="destinationSizeInBytes" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="sourceBytesToCopy" /&gt;</ph> é maior que <ph id="ph2">&lt;paramref name="destinationSizeInBytes" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source>An array.</source>
          <target state="translated">Uma matriz.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source>A location in the array.</source>
          <target state="translated">Um local na matriz.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source>A value to assign.</source>
          <target state="translated">O valor para atribuir.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source>Assigns a specified value to a byte at a particular location in a specified array.</source>
          <target state="translated">Atribui um valor especificado para um byte em um local específico em uma matriz especificada.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source><ph id="ph1">`array`</ph> must be an array of primitives.</source>
          <target state="translated"><ph id="ph1">`array`</ph> deve ser uma matriz de primitivos.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source>The following code example assigns values to bytes at particular locations within arrays using the <ph id="ph1">`SetByte`</ph> method.</source>
          <target state="translated">O exemplo de código a seguir atribui valores a bytes em locais específicos dentro de matrizes usando o <ph id="ph1">`SetByte`</ph> método.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is not a primitive.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> não é um primitivo.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is negative or greater than the length of <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é negativo ou maior que o comprimento de <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is larger than 2 gigabytes (GB).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> é maior que 2 gigabytes (GB).</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>