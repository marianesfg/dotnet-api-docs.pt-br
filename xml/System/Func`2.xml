<Type Name="Func&lt;T,TResult&gt;" FullName="System.Func&lt;T,TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="376675baf8e14d5ae81bf0b102d6017fb220e31b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36431593" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T,out TResult&gt;(T arg);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`2&lt;- T, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T, Out TResult)(arg As T) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T, typename TResult&gt;&#xA;public delegate TResult Func(T arg);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T, 'Result&gt; = delegate of 'T -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">O tipo do parâmetro do método encapsulado por esse delegado.</typeparam>
    <typeparam name="TResult">O tipo do valor retornado do método encapsulado por esse delegado.</typeparam>
    <param name="arg">O parâmetro do método encapsulado por esse delegado.</param>
    <summary>Encapsula um método que tem um parâmetro e retorna um valor do tipo especificado pelo parâmetro <typeparamref name="TResult" />.</summary>
    <returns>O valor retornado do método encapsulado por esse delegado.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode usar este delegado para representar um método que pode ser passado como um parâmetro sem declarar explicitamente um delegado personalizado. O método encapsulado deve corresponder à assinatura do método que é definida por este delegado. Isso significa que o método encapsulado deve ter um parâmetro que é passado por valor e que ele deve retornar um valor.  
  
> [!NOTE]
>  Para fazer referência a um método que tem um parâmetro e retorna `void` (ou no Visual Basic, que é declarado como um `Sub` em vez de como um `Function`), use o genérico <xref:System.Action%601> delegado em vez disso.  
  
 Quando você usa o <xref:System.Func%602> delegado, você não precisa definir explicitamente um delegado que encapsula um método com um único parâmetro. Por exemplo, o código a seguir declara explicitamente um delegado chamado `ConvertMethod` e atribui uma referência para o `UppercaseString` método para sua instância de delegado.  
  
 [!code-csharp[System.Func~2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Delegate.cs#1)]
 [!code-vb[System.Func~2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Delegate.vb#1)]  
  
 O exemplo a seguir simplifica esse código instanciando a <xref:System.Func%602> delegado em vez de definir um novo delegado explicitamente e atribuí-lo um método nomeado.  
  
 [!code-csharp[System.Func~2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Func2_1.cs#2)]
 [!code-vb[System.Func~2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Func2_1.vb#2)]  
  
 Você também pode usar o <xref:System.Func%602> delegar com métodos anônimos em c#, como mostra o exemplo a seguir. (Para obter uma introdução aos métodos anônimos, consulte [métodos anônimos](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Func~2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Anon.cs#3)]  
  
 Você também pode atribuir uma expressão lambda para uma <xref:System.Func%602> delegado, como mostra o exemplo a seguir. (Para obter uma introdução a expressões lambda, consulte [expressões Lambda](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) e [expressões Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Func~2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Lambda.cs#4)]
 [!code-vb[System.Func~2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Lambda.vb#4)]  
  
 O tipo subjacente de uma expressão lambda é um dos genérica `Func` delegados. Isso torna possível passar uma expressão lambda como um parâmetro sem explicitamente atribuí-lo a um delegado. Em particular, porque muitos métodos de tipos no <xref:System.Linq> namespace ter <xref:System.Func%602> parâmetros, você pode passar esses métodos de uma expressão lambda sem instanciar explicitamente um <xref:System.Func%602> delegar.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como declarar e usar um <xref:System.Func%602> delegate. Este exemplo declara um <xref:System.Func%602> variável e atribui uma expressão lambda que converte os caracteres em uma cadeia de caracteres em maiusculas. Subsequentemente, o delegado que encapsula esse método é passado para o <xref:System.Linq.Enumerable.Select%2A?displayProperty=nameWithType> método para alterar as cadeias de caracteres em uma matriz de cadeias de caracteres em maiusculas.  
  
 [!code-csharp[System.Func~2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Example.cs#5)]
 [!code-vb[System.Func~2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>