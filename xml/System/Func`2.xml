<Type Name="Func&lt;T,TResult&gt;" FullName="System.Func&lt;T,TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d48cebaf8bbea7d298b28ddcbd21a72d50046fb8" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57909977" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T,out TResult&gt;(T arg);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`2&lt;- T, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T, Out TResult)(arg As T) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T, typename TResult&gt;&#xA;public delegate TResult Func(T arg);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T, 'Result&gt; = delegate of 'T -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg" Type="T" Index="0" FrameworkAlternate="xamarinmac-3.0" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T"><span data-ttu-id="67386-101">O tipo do parâmetro do método encapsulado por esse delegado.</span><span class="sxs-lookup"><span data-stu-id="67386-101">The type of the parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="TResult"><span data-ttu-id="67386-102">O tipo do valor retornado do método encapsulado por esse delegado.</span><span class="sxs-lookup"><span data-stu-id="67386-102">The type of the return value of the method that this delegate encapsulates.</span></span></typeparam>
    <param name="arg"><span data-ttu-id="67386-103">O parâmetro do método encapsulado por esse delegado.</span><span class="sxs-lookup"><span data-stu-id="67386-103">The parameter of the method that this delegate encapsulates.</span></span></param>
    <summary><span data-ttu-id="67386-104">Encapsula um método que tem um parâmetro e retorna um valor do tipo especificado pelo parâmetro <typeparamref name="TResult" />.</span><span class="sxs-lookup"><span data-stu-id="67386-104">Encapsulates a method that has one parameter and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span></span></summary>
    <returns><span data-ttu-id="67386-105">O valor retornado do método encapsulado por esse delegado.</span><span class="sxs-lookup"><span data-stu-id="67386-105">The return value of the method that this delegate encapsulates.</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67386-106">Você pode usar esse delegado para representar um método que pode ser passado como um parâmetro sem declarar explicitamente um delegado personalizado.</span><span class="sxs-lookup"><span data-stu-id="67386-106">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="67386-107">O método encapsulado deve corresponder à assinatura do método que é definida por esse delegado.</span><span class="sxs-lookup"><span data-stu-id="67386-107">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="67386-108">Isso significa que o método encapsulado deve ter um parâmetro que é passado a ele por valor e que ele deve retornar um valor.</span><span class="sxs-lookup"><span data-stu-id="67386-108">This means that the encapsulated method must have one parameter that is passed to it by value, and that it must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67386-109">Para fazer referência a um método que tem um parâmetro e retorna `void` (ou no Visual Basic, que é declarado como um `Sub` em vez de como um `Function`), usar o genérico <xref:System.Action%601> delegado em vez disso.</span><span class="sxs-lookup"><span data-stu-id="67386-109">To reference a method that has one parameter and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%601> delegate instead.</span></span>  
  
 <span data-ttu-id="67386-110">Quando você usa o <xref:System.Func%602> delegado, você não precisa definir explicitamente um delegado que encapsula um método com um único parâmetro.</span><span class="sxs-lookup"><span data-stu-id="67386-110">When you use the <xref:System.Func%602> delegate, you do not have to explicitly define a delegate that encapsulates a method with a single parameter.</span></span> <span data-ttu-id="67386-111">Por exemplo, o código a seguir declara explicitamente um delegado chamado `ConvertMethod` e atribui uma referência para o `UppercaseString` método para sua instância do delegado.</span><span class="sxs-lookup"><span data-stu-id="67386-111">For example, the following code explicitly declares a delegate named `ConvertMethod` and assigns a reference to the `UppercaseString` method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Delegate.cs#1)]
 [!code-vb[System.Func~2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="67386-112">O exemplo a seguir simplifica esse código pela instanciação de <xref:System.Func%602> delegado em vez de explicitamente definindo um novo delegado e atribuí-lo um método nomeado.</span><span class="sxs-lookup"><span data-stu-id="67386-112">The following example simplifies this code by instantiating the <xref:System.Func%602> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Func2_1.cs#2)]
 [!code-vb[System.Func~2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Func2_1.vb#2)]  
  
 <span data-ttu-id="67386-113">Você também pode usar o <xref:System.Func%602> delegar com métodos anônimos no c#, como mostra o exemplo a seguir.</span><span class="sxs-lookup"><span data-stu-id="67386-113">You can also use the <xref:System.Func%602> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="67386-114">(Para obter uma introdução aos métodos anônimos, consulte [métodos anônimos](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span><span class="sxs-lookup"><span data-stu-id="67386-114">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Anon.cs#3)]  
  
 <span data-ttu-id="67386-115">Você também pode atribuir uma expressão lambda para uma <xref:System.Func%602> delegar, como mostra o exemplo a seguir.</span><span class="sxs-lookup"><span data-stu-id="67386-115">You can also assign a lambda expression to a <xref:System.Func%602> delegate, as the following example illustrates.</span></span> <span data-ttu-id="67386-116">(Para obter uma introdução às expressões lambda, consulte [expressões Lambda](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) e [expressões Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span><span class="sxs-lookup"><span data-stu-id="67386-116">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Lambda.cs#4)]
 [!code-vb[System.Func~2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Lambda.vb#4)]  
  
 <span data-ttu-id="67386-117">O tipo subjacente de uma expressão lambda é um dos genéricos `Func` delegados.</span><span class="sxs-lookup"><span data-stu-id="67386-117">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="67386-118">Isso torna possível passar uma expressão lambda como um parâmetro sem explicitamente atribuí-lo a um delegado.</span><span class="sxs-lookup"><span data-stu-id="67386-118">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="67386-119">Em particular, porque muitos métodos de tipos na <xref:System.Linq> namespace tiver <xref:System.Func%602> parâmetros, você pode passar esses métodos de uma expressão lambda sem instanciar explicitamente um <xref:System.Func%602> delegar.</span><span class="sxs-lookup"><span data-stu-id="67386-119">In particular, because many methods of types in the <xref:System.Linq> namespace have <xref:System.Func%602> parameters, you can pass these methods a lambda expression without explicitly instantiating a <xref:System.Func%602> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67386-120">O exemplo a seguir demonstra como declarar e usar um <xref:System.Func%602> delegar.</span><span class="sxs-lookup"><span data-stu-id="67386-120">The following example demonstrates how to declare and use a <xref:System.Func%602> delegate.</span></span> <span data-ttu-id="67386-121">Este exemplo declara um <xref:System.Func%602> variável e atribui a ele uma expressão lambda que converte os caracteres em uma cadeia de caracteres em maiusculas.</span><span class="sxs-lookup"><span data-stu-id="67386-121">This example declares a <xref:System.Func%602> variable and assigns it a lambda expression that converts the characters in a string to uppercase.</span></span> <span data-ttu-id="67386-122">Subsequentemente, o delegado que encapsula esse método é passado para o <xref:System.Linq.Enumerable.Select%2A?displayProperty=nameWithType> método para alterar as cadeias de caracteres em uma matriz de cadeias de caracteres em maiusculas.</span><span class="sxs-lookup"><span data-stu-id="67386-122">The delegate that encapsulates this method is subsequently passed to the <xref:System.Linq.Enumerable.Select%2A?displayProperty=nameWithType> method to change the strings in an array of strings to uppercase.</span></span>  
  
 [!code-csharp[System.Func~2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Example.cs#5)]
 [!code-vb[System.Func~2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md"><span data-ttu-id="67386-123">Expressões lambda (Guia de Programação em C#)</span><span class="sxs-lookup"><span data-stu-id="67386-123">Lambda Expressions (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md"><span data-ttu-id="67386-124">Expressões lambda (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="67386-124">Lambda Expressions (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md"><span data-ttu-id="67386-125">Delegados (Guia de Programação em C#)</span><span class="sxs-lookup"><span data-stu-id="67386-125">Delegates (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md"><span data-ttu-id="67386-126">Delegados (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="67386-126">Delegates (Visual Basic)</span></span></related>
  </Docs>
</Type>