<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TypeInitializationException.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac54e010e0c78c65b529ed1ad5c97ca2f1013dd01bc.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4e010e0c78c65b529ed1ad5c97ca2f1013dd01bc</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.TypeInitializationException">
          <source>The exception that is thrown as a wrapper around the exception thrown by the class initializer.</source>
          <target state="translated">A exceção que é gerada como um wrapper em torno da exceção lançada pelo inicializador de classe.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.TypeInitializationException">
          <source>This class cannot be inherited.</source>
          <target state="translated">Essa classe não pode ser herdada.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>When a class initializer fails to initialize a type, a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> is created and passed a reference to the exception thrown by the type's class initializer.</source>
          <target state="translated">Quando um inicializador da classe não inicializa um tipo, uma <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> é criada e é passada uma referência à exceção gerada pelo inicializador da classe do tipo.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.TypeInitializationException&gt;</ph> holds the underlying exception.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> propriedade <ph id="ph2">&lt;xref:System.TypeInitializationException&gt;</ph> contém a exceção subjacente.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Typically, the <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception reflects a catastrophic condition (the runtime is unable to instantiate a type) that prevents an application from continuing.</source>
          <target state="translated">Normalmente, o <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exceção reflete uma condição catastrófica (o tempo de execução é impossível criar uma instância de um tipo) que impede que um aplicativo de continuar.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Most commonly, the <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> is thrown in response to some change in the executing environment of the application.</source>
          <target state="translated">Normalmente, o <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> é gerada em resposta a uma alteração no ambiente de execução do aplicativo.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Consequently, other than possibly for troubleshooting debug code, the exception should not be handled in a <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`catch`</ph> block.</source>
          <target state="translated">Consequentemente, que possivelmente para solucionar problemas de depuração de código, a exceção não deve ser tratada em um <ph id="ph1">`try`</ph> <ph id="ph2">/</ph> <ph id="ph3">`catch`</ph> bloco.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Instead, the cause of the exception should be investigated and eliminated.</source>
          <target state="translated">Em vez disso, a causa da exceção deve ser investigada e eliminada.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source><ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> uses the HRESULT COR_E_TYPEINITIALIZATION, which has the value 0x80131534.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> usa o HRESULT COR_E_TYPEINITIALIZATION, que tem o valor 0x80131534.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>For a list of initial property values for an instance of <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph>, see the <ph id="ph2">&lt;xref:System.TypeInitializationException.%23ctor%2A&gt;</ph> constructors.</source>
          <target state="translated">Para obter uma lista de valores de propriedade inicial para uma instância do <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph>, consulte o <ph id="ph2">&lt;xref:System.TypeInitializationException.%23ctor%2A&gt;</ph> construtores.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The following sections describe some of the situations in which a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception is thrown.</source>
          <target state="translated">As seções a seguir descrevem algumas das situações nas quais um <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exceção será lançada.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source><bpt id="p1">[</bpt>Static constructors and the TypeInitializationException exception<ept id="p1">](#Static)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Construtores estáticos e a exceção TypeInitializationException<ept id="p1">](#Static)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source><bpt id="p1">[</bpt>Regular expression match timeout values<ept id="p1">](#Timeout)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Valores de tempo limite de correspondência de expressão regular<ept id="p1">](#Timeout)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source><bpt id="p1">[</bpt>Calendars and cultural data<ept id="p1">](#Calendars)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Calendários e dados culturais<ept id="p1">](#Calendars)</ept></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Static constructors and the TypeInitializationException exception</source>
          <target state="translated">Construtores estáticos e a exceção TypeInitializationException</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>A static constructor, if one exists, is called automatically by the runtime before creating a new instance of a type.</source>
          <target state="translated">Um construtor estático, se houver, é chamado automaticamente pelo tempo de execução antes de criar uma nova instância de um tipo.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Static constructors can be explicitly defined by a developer.</source>
          <target state="translated">Construtores estáticos podem ser definidos explicitamente por um desenvolvedor.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>If a static  constructor is not explicitly defined, compilers automatically create one to initialize any <ph id="ph1">`static`</ph> (in C#) or <ph id="ph2">`Shared`</ph> (in Visual Basic) members of the type.</source>
          <target state="translated">Se um construtor estático não é definido explicitamente, compiladores criar automaticamente uma para inicializar qualquer <ph id="ph1">`static`</ph> (em c#) ou <ph id="ph2">`Shared`</ph> (no Visual Basic) membros do tipo.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>For more information on static constructors, see <bpt id="p1">[</bpt>Static Constructors<ept id="p1">](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre os construtores estáticos, consulte <bpt id="p1">[</bpt>construtores estáticos<ept id="p1">](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md)</ept>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Most commonly, a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception is thrown when a static constructor is unable to instantiate a type.</source>
          <target state="translated">Normalmente, um <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exceção é lançada quando um construtor estático não pode criar uma instância de um tipo.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property indicates why the static constructor was unable to instantiate the type.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> propriedade indica por que o construtor estático não pôde criar uma instância de tipo.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Some of the more common causes of a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception are:</source>
          <target state="translated">Algumas das causas mais comuns de um <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exceção são:</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>An unhandled exception in a static constructor</source>
          <target state="translated">Uma exceção sem tratamento em um construtor estático</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>If an exception is thrown in a static constructor, that exception is wrapped in a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception, and the type cannot be instantiated.</source>
          <target state="translated">Se uma exceção for lançada em um construtor estático, essa exceção é encapsulada em um <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exceção e o tipo não podem ser instanciado.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>What often makes this exception difficult to troubleshoot is that static constructors are not always explicitly defined in source code.</source>
          <target state="translated">O que torna essa exceção difíceis de solucionar é que os construtores estáticos não são definidos sempre explicitamente no código-fonte.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>A static constructor exists in a type if:</source>
          <target state="translated">Um construtor estático existe em um tipo se:</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>It has been explicitly defined as a member of a type.</source>
          <target state="translated">Foi explicitamente definido como um membro de um tipo.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The type has  <ph id="ph1">`static`</ph> (in C#) or <ph id="ph2">`Shared`</ph> (in Visual Basic) variables that are declared and initialized in a single statement.</source>
          <target state="translated">O tipo tem <ph id="ph1">`static`</ph> (em c#) ou <ph id="ph2">`Shared`</ph> (no Visual Basic) variáveis que são declarados e inicializadas em uma única instrução.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>In this case, the language compiler generates a static constructor for the type.</source>
          <target state="translated">Nesse caso, o compilador de linguagem gera um construtor estático para o tipo.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>You can inspect it by using a utility such as <bpt id="p1">[</bpt>IL Disassembler<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>.</source>
          <target state="translated">Você pode verificar isso usando um utilitário como <bpt id="p1">[</bpt>desmontador de IL<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>For instance, when the C# and VB compilers compile the following example, they generate the IL for a static constructor that is similar to this:</source>
          <target state="translated">Por exemplo, quando o c# e VB compiladores compilar o exemplo a seguir, elas geram o IL para um construtor estático que é semelhante a este:</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The following example shows a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception thrown by a compiler-generated static constructor.</source>
          <target state="translated">A exemplo a seguir mostra um <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exceção lançada por um construtor estático gerado pelo compilador.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The <ph id="ph1">`Example`</ph> class includes a <ph id="ph2">`static`</ph> (in C#) or <ph id="ph3">`Shared`</ph> (in Visual Basic) field of type <ph id="ph4">`TestClass`</ph> that is instantiated by passing a value of 3 to its class constructor.</source>
          <target state="translated">O <ph id="ph1">`Example`</ph> classe inclui um <ph id="ph2">`static`</ph> (em c#) ou <ph id="ph3">`Shared`</ph> (no Visual Basic) campo do tipo <ph id="ph4">`TestClass`</ph> instanciado, passando um valor de 3 para o construtor de classe.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>That value, however, is illegal; only values of 0 or 1 are permitted.</source>
          <target state="translated">No entanto, esse valor é inválido; são permitidos somente valores de 0 ou 1.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>As a result, the <ph id="ph1">`TestClass`</ph> class constructor throws an <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>.</source>
          <target state="translated">Como resultado, o <ph id="ph1">`TestClass`</ph> classe construtor lança um <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Since this exception is not handled, it is wrapped in a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception.</source>
          <target state="translated">Desde que essa exceção não é tratada, ele é encapsulado em um <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exceção.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Note that the exception message displays information about the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.</source>
          <target state="translated">Observe que a mensagem de exceção exibe informações sobre o <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>A missing assembly or data file</source>
          <target state="translated">Um arquivo de dados ou de assembly ausente</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>A common cause of a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception is that an assembly or data file that was present in an application's development and test environments is missing from its runtime environment.</source>
          <target state="translated">Uma causa comum de um <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exceção é que um assembly ou arquivo de dados que estava presente em ambientes de desenvolvimento e teste do aplicativo está ausente do seu ambiente de tempo de execução.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>For example, you can compile the following example to an assembly named Missing1a.dll by using the this command-line syntax:</source>
          <target state="translated">Por exemplo, você pode compilar o exemplo a seguir para um assembly chamado Missing1a.dll usando a sintaxe de linha de comando:</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>You can then compile the following example to an executable named Missing1.exe by including a reference to Missing1a.dll:</source>
          <target state="translated">Em seguida, você pode compilar o exemplo a seguir para um executável chamado Missing1.exe, incluindo uma referência a Missing1a.dll:</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>However, if you rename, move, or delete Missing1a.dll and run the example, it throws a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception and displays the output shown in the example.</source>
          <target state="translated">No entanto, se você renomear, move, ou excluir Missing1a.dll e executa o exemplo, ele gerará uma <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exceção e exibe a saída mostrada o exemplo.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Note that the exception message includes information about the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.</source>
          <target state="translated">Observe que a mensagem de exceção inclui informações sobre o <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>In this case,  the inner exception is a <ph id="ph1">&lt;xref:System.IO.FileNotFoundException&gt;</ph> that is thrown because the runtime cannot find the dependent assembly.</source>
          <target state="translated">Nesse caso, a exceção interna é um <ph id="ph1">&lt;xref:System.IO.FileNotFoundException&gt;</ph> que foi lançado porque o tempo de execução não é possível localizar o assembly dependente.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>In this example, a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception was thrown because an assembly could not be loaded.</source>
          <target state="translated">Neste exemplo, um <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exceção foi lançada porque não foi possível carregar um assembly.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The exception can also be thrown if a static constructor attempts to open a data file, such as a configuration file, an XML file, or a file containing serialized data, that it cannot find.</source>
          <target state="translated">A exceção também pode ser gerada se um construtor estático tenta abrir um arquivo de dados, como um arquivo de configuração, um arquivo XML ou um arquivo que contém dados, que não é possível localizar de serializado.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Regular expression match timeout values</source>
          <target state="translated">Valores de tempo limite de correspondência de expressão regular</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>You can set the default timeout value for a regular expression pattern matching operation on a per-application domain basis.</source>
          <target state="translated">Você pode definir o valor de tempo limite padrão para um padrão de expressão regular a operação em uma base por aplicativo domínio correspondente.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The timeout is defined by a specifying a <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> value for the "REGEX_DEFAULT_MATCH_TIMEOUT" property to the  <ph id="ph2">&lt;xref:System.AppDomain.SetData%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">O tempo limite é definido por uma especificação de um <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> valor para a propriedade "REGEX_DEFAULT_MATCH_TIMEOUT" para o <ph id="ph2">&lt;xref:System.AppDomain.SetData%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The time interval must be a valid <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> object that is greater than zero and less than approximately 24 days.</source>
          <target state="translated">O intervalo de tempo deve ser um válido <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> objeto for maior que zero e menor que aproximadamente 24 dias.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>If these requirements are not met, the attempt to set the default timeout value throws an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>, which in turn is wrapped in a <ph id="ph2">&lt;xref:System.TypeInitializationException&gt;</ph> exception.</source>
          <target state="translated">Se esses requisitos não forem atendidos, a tentativa de definir o valor de tempo limite padrão gera um <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>, que por sua vez é encapsulado em um <ph id="ph2">&lt;xref:System.TypeInitializationException&gt;</ph> exceção.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The following example shows the <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> that is thrown when the value assigned to the "REGEX_DEFAULT_MATCH_TIMEOUT" property is invalid.</source>
          <target state="translated">A exemplo a seguir mostra a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> que é gerada quando o valor atribuído à propriedade "REGEX_DEFAULT_MATCH_TIMEOUT" é inválido.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>To eliminate the exception, set the"REGEX_DEFAULT_MATCH_TIMEOUT" property to a  <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> value that is greater than zero and less than approximately 24 days.</source>
          <target state="translated">Para eliminar a exceção, defina a propriedade "REGEX_DEFAULT_MATCH_TIMEOUT" como um <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> valor maior que zero e menor que aproximadamente 24 dias.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Calendars and cultural data</source>
          <target state="translated">Calendários e dados culturais</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>If you attempt to instantiate a calendar but the runtime is unable to instantiate  the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that corresponds to that calendar, it throws a <ph id="ph2">&lt;xref:System.TypeInitializationException&gt;</ph> exception.</source>
          <target state="translated">Se você tentar criar uma instância de um calendário, mas o tempo de execução é não é possível instanciar o <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> objeto que corresponde ao calendário, ele lança uma <ph id="ph2">&lt;xref:System.TypeInitializationException&gt;</ph> exceção.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>This exception can be thrown by the following calendar class constructors:</source>
          <target state="translated">Essa exceção pode ser acionada por construtores de classe de calendário a seguir:</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The default constructor of the <ph id="ph1">&lt;xref:System.Globalization.JapaneseCalendar&gt;</ph> class.</source>
          <target state="translated">O construtor padrão da <ph id="ph1">&lt;xref:System.Globalization.JapaneseCalendar&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The default constructor of the <ph id="ph1">&lt;xref:System.Globalization.KoreanCalendar&gt;</ph> class.</source>
          <target state="translated">O construtor padrão da <ph id="ph1">&lt;xref:System.Globalization.KoreanCalendar&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The default constructor of the <ph id="ph1">&lt;xref:System.Globalization.TaiwanCalendar&gt;</ph> class.</source>
          <target state="translated">O construtor padrão da <ph id="ph1">&lt;xref:System.Globalization.TaiwanCalendar&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Since cultural data for these cultures should be available on all systems, you should rarely, if ever, encounter this exception.</source>
          <target state="translated">Como dados culturais para essas culturas devem estar disponíveis em todos os sistemas, você deve raramente, ou nunca, encontrar esta exceção.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>The fully qualified name of the type that fails to initialize.</source>
          <target state="translated">Obtém o nome totalmente qualificado do tipo cuja inicialização falha.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>The exception that is the cause of the current exception.</source>
          <target state="translated">A exceção que é a causa da exceção atual.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>innerException<ept id="p1">&lt;/c&gt;</ept> parameter is not a null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic), the current exception is raised in a <ph id="ph2">&lt;see langword="catch" /&gt;</ph> block that handles the inner exception.</source>
          <target state="translated">Se o parâmetro <bpt id="p1">&lt;c&gt;</bpt>innerException<ept id="p1">&lt;/c&gt;</ept> não é uma referência nula (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> no Visual Basic), a exceção atual é gerada em um bloco <ph id="ph2">&lt;see langword="catch" /&gt;</ph> que trata a exceção interna.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.TypeInitializationException" /&gt;</ph> class with the default error message, the specified type name, and a reference to the inner exception that is the root cause of this exception.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.TypeInitializationException" /&gt;</ph> com a mensagem de erro padrão, o nome de tipo especificado e uma referência à exceção interna que é a causa raiz dessa exceção.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>An exception that is thrown as a direct result of a previous exception can include a reference to the previous exception in the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.</source>
          <target state="translated">Uma exceção que é lançada como um resultado direto de uma exceção anterior pode incluir uma referência para a exceção anterior na propriedade <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor, or a null reference (<ph id="ph2">`Nothing`</ph> in Visual Basic) if the <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property does not supply the inner exception value to the constructor.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> retorna o mesmo valor que é passado para o construtor ou uma referência nula (<ph id="ph2">`Nothing`</ph> no Visual Basic) caso a propriedade <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> não forneça o valor de exceção interna para o construtor.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph>.</source>
          <target state="translated">A tabela a seguir mostra os valores de propriedade iniciais para uma instância de <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>Property</source>
          <target state="translated">Propriedade</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>Value</source>
          <target state="translated">Valor</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>The inner exception reference.</source>
          <target state="translated">A referência de exceção interna.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>The localized error message string.</source>
          <target state="translated">A cadeia de caracteres da mensagem de erro localizada.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>The name of the type.</source>
          <target state="translated">O nome do tipo.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> that holds the serialized object data about the exception being thrown.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> que mantém os dados de objeto serializados sobre a exceção que está sendo lançada.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> that contains contextual information about the source or destination.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> que contém informações contextuais sobre a fonte ou o destino.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Sets the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object with the type name and additional exception information.</source>
          <target state="translated">Define o objeto <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> com o nome de tipo e informações adicionais de exceção.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">Requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="P:System.TypeInitializationException.TypeName">
          <source>Gets the fully qualified name of the type that fails to initialize.</source>
          <target state="translated">Obtém o nome totalmente qualificado do tipo cuja inicialização falha.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.TypeInitializationException.TypeName">
          <source>The fully qualified name of the type that fails to initialize.</source>
          <target state="translated">Obtém o nome totalmente qualificado do tipo cuja inicialização falha.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>