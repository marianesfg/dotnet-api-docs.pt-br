<Type Name="Func&lt;T1,T2,TResult&gt;" FullName="System.Func&lt;T1,T2,TResult&gt;">
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,out TResult&gt;(T1 arg1, T2 arg2);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`3&lt;- T1, - T2, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`3" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T1, In T2, Out TResult)(arg1 As T1, arg2 As T2) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename TResult&gt;&#xA;public delegate TResult Func(T1 arg1, T2 arg2);" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1"><span data-ttu-id="9b9a0-101">O tipo do primeiro parâmetro do método encapsulado por esse delegado.</span><span class="sxs-lookup"><span data-stu-id="9b9a0-101">The type of the first parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T2"><span data-ttu-id="9b9a0-102">O tipo do segundo parâmetro do método encapsulado por esse delegado.</span><span class="sxs-lookup"><span data-stu-id="9b9a0-102">The type of the second parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="TResult"><span data-ttu-id="9b9a0-103">O tipo do valor retornado do método encapsulado por esse delegado.</span><span class="sxs-lookup"><span data-stu-id="9b9a0-103">The type of the return value of the method that this delegate encapsulates.</span></span></typeparam>
    <param name="arg1"><span data-ttu-id="9b9a0-104">O primeiro parâmetro do método encapsulado por esse delegado.</span><span class="sxs-lookup"><span data-stu-id="9b9a0-104">The first parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg2"><span data-ttu-id="9b9a0-105">O segundo parâmetro do método encapsulado por esse delegado.</span><span class="sxs-lookup"><span data-stu-id="9b9a0-105">The second parameter of the method that this delegate encapsulates.</span></span></param>
    <summary><span data-ttu-id="9b9a0-106">Encapsula um método que tem dois parâmetros e retorna um valor do tipo especificado pelo parâmetro <typeparamref name="TResult" />.</span><span class="sxs-lookup"><span data-stu-id="9b9a0-106">Encapsulates a method that has two parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span></span></summary>
    <returns><span data-ttu-id="9b9a0-107">O valor retornado do método encapsulado por esse delegado.</span><span class="sxs-lookup"><span data-stu-id="9b9a0-107">The return value of the method that this delegate encapsulates.</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b9a0-108">Você pode usar este delegado para representar um método que pode ser passado como um parâmetro sem declarar explicitamente um delegado personalizado.</span><span class="sxs-lookup"><span data-stu-id="9b9a0-108">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="9b9a0-109">O método encapsulado deve corresponder à assinatura do método que é definida por este delegado.</span><span class="sxs-lookup"><span data-stu-id="9b9a0-109">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="9b9a0-110">Isso significa que o método encapsulado deve ter dois parâmetros, cada um deles é passada a ele por valor, e que ele deve retornar um valor.</span><span class="sxs-lookup"><span data-stu-id="9b9a0-110">This means that the encapsulated method must have two parameters, each of which is passed to it by value, and that it must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9b9a0-111">Para fazer referência a um método que tem dois parâmetros e retorna `void` (ou no Visual Basic, que é declarado como um `Sub` em vez de como um `Function`), use o genérico <xref:System.Action%602> delegado em vez disso.</span><span class="sxs-lookup"><span data-stu-id="9b9a0-111">To reference a method that has two parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%602> delegate instead.</span></span>  
  
 <span data-ttu-id="9b9a0-112">Quando você usa o <xref:System.Func%603> delegado, você não precisa definir explicitamente um delegado que encapsula um método com dois parâmetros.</span><span class="sxs-lookup"><span data-stu-id="9b9a0-112">When you use the <xref:System.Func%603> delegate you do not have to explicitly define a delegate that encapsulates a method with two parameters.</span></span> <span data-ttu-id="9b9a0-113">Por exemplo, o código a seguir declara explicitamente um delegado chamado `ExtractMethod` e atribui uma referência para o `ExtractWords` método para sua instância de delegado.</span><span class="sxs-lookup"><span data-stu-id="9b9a0-113">For example, the following code explicitly declares a delegate named `ExtractMethod` and assigns a reference to the `ExtractWords` method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Delegate.cs#1)]
 [!code-vb[System.Func~3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="9b9a0-114">O exemplo a seguir simplifica esse código, criando um <xref:System.Func%603> delegado em vez de definir um novo delegado explicitamente e atribuí-lo um método nomeado.</span><span class="sxs-lookup"><span data-stu-id="9b9a0-114">The following example simplifies this code by instantiating a <xref:System.Func%603> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~3#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Func3.cs#2)]
 [!code-vb[System.Func~3#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Func3.vb#2)]  
  
 <span data-ttu-id="9b9a0-115">Você pode usar o <xref:System.Func%603> delegar com métodos anônimos em c#, como mostra o exemplo a seguir.</span><span class="sxs-lookup"><span data-stu-id="9b9a0-115">You can use the <xref:System.Func%603> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="9b9a0-116">(Para obter uma introdução aos métodos anônimos, consulte [métodos anônimos](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span><span class="sxs-lookup"><span data-stu-id="9b9a0-116">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~3#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Anon.cs#3)]  
  
 <span data-ttu-id="9b9a0-117">Você também pode atribuir uma expressão lambda para uma <xref:System.Func%603> delegado, como mostra o exemplo a seguir.</span><span class="sxs-lookup"><span data-stu-id="9b9a0-117">You can also assign a lambda expression to a <xref:System.Func%603> delegate, as the following example illustrates.</span></span> <span data-ttu-id="9b9a0-118">(Para obter uma introdução a expressões lambda, consulte [expressões Lambda](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) e [expressões Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span><span class="sxs-lookup"><span data-stu-id="9b9a0-118">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~3#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Lambda.cs#4)]
 [!code-vb[System.Func~3#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/lambda.vb#4)]  
  
 <span data-ttu-id="9b9a0-119">O tipo subjacente de uma expressão lambda é um dos genérica `Func` delegados.</span><span class="sxs-lookup"><span data-stu-id="9b9a0-119">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="9b9a0-120">Isso torna possível passar uma expressão lambda como um parâmetro sem explicitamente atribuí-lo a um delegado.</span><span class="sxs-lookup"><span data-stu-id="9b9a0-120">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="9b9a0-121">Em particular, porque muitos métodos de tipos no <xref:System.Linq> namespace ter <xref:System.Func%603> parâmetros, você pode passar esses métodos de uma expressão lambda sem instanciar explicitamente um <xref:System.Func%603> delegar.</span><span class="sxs-lookup"><span data-stu-id="9b9a0-121">In particular, because many methods of types in the <xref:System.Linq> namespace have <xref:System.Func%603> parameters, you can pass these methods a lambda expression without explicitly instantiating a <xref:System.Func%603> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9b9a0-122">O exemplo a seguir demonstra como declarar e usar um <xref:System.Func%603> delegate.</span><span class="sxs-lookup"><span data-stu-id="9b9a0-122">The following example demonstrates how to declare and use a <xref:System.Func%603> delegate.</span></span> <span data-ttu-id="9b9a0-123">Este exemplo declara um <xref:System.Func%603> variável e atribui uma expressão lambda que leva um <xref:System.String> valor e um <xref:System.Int32> valor como parâmetros.</span><span class="sxs-lookup"><span data-stu-id="9b9a0-123">This example declares a <xref:System.Func%603> variable and assigns it a lambda expression that takes a <xref:System.String> value and an <xref:System.Int32> value as parameters.</span></span> <span data-ttu-id="9b9a0-124">Retorna a expressão lambda `true` se o comprimento do <xref:System.String> parâmetro for igual ao valor da <xref:System.Int32> parâmetro.</span><span class="sxs-lookup"><span data-stu-id="9b9a0-124">The lambda expression returns `true` if the length of the <xref:System.String> parameter is equal to the value of the <xref:System.Int32> parameter.</span></span> <span data-ttu-id="9b9a0-125">O delegado que encapsula esse método é usado posteriormente em uma consulta em cadeias de caracteres de filtro em uma matriz de cadeias de caracteres.</span><span class="sxs-lookup"><span data-stu-id="9b9a0-125">The delegate that encapsulates this method is subsequently used in a query to filter strings in an array of strings.</span></span>  
  
 [!code-csharp[System.Func~3#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Example.cs#5)]
 [!code-vb[System.Func~3#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>