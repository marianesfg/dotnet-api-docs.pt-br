<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ThreadStaticAttribute.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac507d61cca1964f76b932d1ee8a032f6d54ae50db7.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">07d61cca1964f76b932d1ee8a032f6d54ae50db7</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ThreadStaticAttribute">
          <source>Indicates that the value of a static field is unique for each thread.</source>
          <target state="translated">Indica se o valor de um campo estático é exclusivo para cada thread.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>A <ph id="ph1">`static`</ph> field marked with <ph id="ph2">&lt;xref:System.ThreadStaticAttribute&gt;</ph> is not shared between threads.</source>
          <target state="translated">Um <ph id="ph1">`static`</ph> campo marcado com <ph id="ph2">&lt;xref:System.ThreadStaticAttribute&gt;</ph> não é compartilhado entre threads.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>Each executing thread has a separate instance of the field, and independently sets and gets values for that field.</source>
          <target state="translated">Cada thread em execução tem uma instância separada do campo e independentemente define e obtém os valores desse campo.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>If the field is accessed on a different thread, it will contain a different value.</source>
          <target state="translated">Se o campo for acessado em um thread diferente, ele conterá um valor diferente.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>Note that in addition to applying the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute to a field, you must also define it as a <ph id="ph2">`static`</ph> field (in C#) or a <ph id="ph3">`Shared`</ph> field (in Visual Basic).</source>
          <target state="translated">Observe que, além de aplicar o <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> atributo a um campo, você também deve definir como uma <ph id="ph2">`static`</ph> campo (c#) ou um <ph id="ph3">`Shared`</ph> campo (no Visual Basic).</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>Do not specify initial values for fields marked with <ph id="ph1">`ThreadStaticAttribute`</ph>, because such initialization occurs only once, when the class constructor executes, and therefore affects only one thread.</source>
          <target state="translated">Não especifique valores iniciais para os campos marcados com <ph id="ph1">`ThreadStaticAttribute`</ph>, pois tal inicialização ocorre apenas uma vez, quando o construtor da classe executa e, portanto, afeta apenas um thread.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>If you do not specify an initial value, you can rely on the field being initialized to its default value if it is a value type, or to <ph id="ph1">`null`</ph> if it is a reference type.</source>
          <target state="translated">Se você não especificar um valor inicial, você pode contar com o campo que está sendo inicializado para seu valor padrão se ele é um tipo de valor, ou para <ph id="ph1">`null`</ph> se ele é um tipo de referência.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>Use this attribute as it is, and do not derive from it.</source>
          <target state="translated">Use esse atributo como está e não derivado dele.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>For more information about using attributes, see <bpt id="p1">[</bpt>Attributes<ept id="p1">](~/docs/standard/attributes/index.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre o uso de atributos, consulte <bpt id="p1">[</bpt>atributos<ept id="p1">](~/docs/standard/attributes/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>The following example instantiates a random number generator, creates ten threads in addition to the main thread, and then generates two million random numbers in each thread.</source>
          <target state="translated">O exemplo a seguir instancia um gerador de número aleatório, cria dez threads além do thread principal e, em seguida, gera números aleatórios de dois milhões em cada thread.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>It uses the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute to calculate the sum and the count of random numbers per thread.</source>
          <target state="translated">Ele usa o <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> atributo para calcular a soma e a contagem de números aleatórios por thread.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>It also defines two additional per-thread fields, <ph id="ph1">`previous`</ph> and <ph id="ph2">`abnormal`</ph>, that allows it to detect corruption of the random number generator.</source>
          <target state="translated">Ele também define dois campos adicionais por thread, <ph id="ph1">`previous`</ph> e <ph id="ph2">`abnormal`</ph>, que permite que ele detectar a corrupção do gerador de número aleatório.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>The example uses the <ph id="ph1">`lock`</ph> statement in C# and the <ph id="ph2">`SyncLock`</ph> construct in Visual Basic to synchronize access to the random number generator.</source>
          <target state="translated">O exemplo usa o <ph id="ph1">`lock`</ph> instrução em c# e o <ph id="ph2">`SyncLock`</ph> construir no Visual Basic para sincronizar o acesso para o gerador de número aleatório.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>This prevents corruption of the random number generator, which typically results in its returning a value of zero for all subsequent calls.</source>
          <target state="translated">Isso impede a corrupção do gerador de número aleatório, que normalmente resulta em seu retornando um valor de zero para todas as chamadas subsequentes.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>The example also uses the <ph id="ph1">&lt;xref:System.Threading.CountdownEvent&gt;</ph> class to ensure that each thread has finished generating random numbers before it displays the total number of calls.</source>
          <target state="translated">O exemplo também usa o <ph id="ph1">&lt;xref:System.Threading.CountdownEvent&gt;</ph> classe para garantir que cada thread terminar de gerar números aleatórios antes de exibir o número total de chamadas.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>Otherwise, if the main thread completes execution before the additional threads that it spawns, it displays an inaccurate value for the total number of method calls.</source>
          <target state="translated">Caso contrário, se o thread principal conclui a execução antes dos threads adicionais que ele gera, ele exibe um valor para o número total de chamadas de método.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ThreadStaticAttribute.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ThreadStaticAttribute" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.ThreadStaticAttribute" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>