<Type Name="Math" FullName="System.Math">
  <TypeSignature Language="C#" Value="public static class Math" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Math extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Math" />
  <TypeSignature Language="VB.NET" Value="Public Class Math" />
  <TypeSignature Language="C++ CLI" Value="public ref class Math abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="dc3c0-101">Fornece constantes e métodos estáticos para trigonométricas, logarítmicas e outras funções matemáticas comuns.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-101">Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-102">O exemplo a seguir usa várias funções matemáticas e trigonométricas do <xref:System.Math> classe para calcular os ângulos internos de um polígono trapezoidal.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-102">The following example uses several mathematical and trigonometric functions from the <xref:System.Math> class to calculate the inner angles of a trapezoid.</span></span>  
  
 [!code-cpp[MathSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MathSample/CPP/mathsample.cpp#1)]
 [!code-csharp[MathSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MathSample/CS/mathsample.cs#1)]
 [!code-vb[MathSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MathSample/VB/mathsample.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Abs">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="dc3c0-103">Retorna o valor absoluto de um número especificado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-103">Returns the absolute value of a specified number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static decimal Abs (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Abs(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Abs(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc3c0-104">Um número maior ou igual a <see cref="F:System.Decimal.MinValue" />, mas menor ou igual a <see cref="F:System.Decimal.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-104">A number that is greater than or equal to <see cref="F:System.Decimal.MinValue" />, but less than or equal to <see cref="F:System.Decimal.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="dc3c0-105">Retorna o valor absoluto de um número <see cref="T:System.Decimal" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-105">Returns the absolute value of a <see cref="T:System.Decimal" /> number.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-106">Um número decimal, x, tal que 0 ≤ x ≤ <see cref="F:System.Decimal.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-106">A decimal number, x, such that 0 ≤ x ≤<see cref="F:System.Decimal.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-107">O valor absoluto de um <xref:System.Decimal> é o valor numérico sem sinal.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-107">The absolute value of a <xref:System.Decimal> is its numeric value without its sign.</span></span> <span data-ttu-id="dc3c0-108">Por exemplo, o valor absoluto de 1.2 e -1,2 em direção é 1.2.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-108">For example, the absolute value of both 1.2 and -1.2 is 1.2.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-109">O exemplo a seguir usa o <xref:System.Math.Abs%28System.Decimal%29> método para obter o valor absoluto de um número de <xref:System.Decimal> valores.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-109">The following example uses the <xref:System.Math.Abs%28System.Decimal%29> method to get the absolute value of a number of <xref:System.Decimal> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/Abs1.cs#1)]
 [!code-vb[System.Math.Abs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/Abs1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static double Abs (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Abs(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Abs(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc3c0-110">Um número maior ou igual a <see cref="F:System.Double.MinValue" />, mas menor ou igual a <see cref="F:System.Double.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-110">A number that is greater than or equal to <see cref="F:System.Double.MinValue" />, but less than or equal to <see cref="F:System.Double.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="dc3c0-111">Retorna o valor absoluto de um número de ponto flutuante de precisão dupla.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-111">Returns the absolute value of a double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-112">Um número de ponto flutuante de precisão dupla, x, tal que 0 ≤ x ≤ <see cref="F:System.Double.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-112">A double-precision floating-point number, x, such that 0 ≤ x ≤<see cref="F:System.Double.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-113">O valor absoluto de um <xref:System.Double> é o valor numérico sem sinal.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-113">The absolute value of a <xref:System.Double> is its numeric value without its sign.</span></span> <span data-ttu-id="dc3c0-114">Por exemplo, o valor absoluto de 1.2e03 e - 1.2e03 é 1.2e03.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-114">For example, the absolute value of both 1.2e03 and -1.2e03 is 1.2e03.</span></span>  
  
 <span data-ttu-id="dc3c0-115">Se `value` é igual a <xref:System.Double.NegativeInfinity> ou <xref:System.Double.PositiveInfinity>, o valor de retorno é <xref:System.Double.PositiveInfinity>.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-115">If `value` is equal to <xref:System.Double.NegativeInfinity> or <xref:System.Double.PositiveInfinity>, the return value is <xref:System.Double.PositiveInfinity>.</span></span> <span data-ttu-id="dc3c0-116">Se `value` é igual a <xref:System.Double.NaN>, o valor de retorno é <xref:System.Double.NaN>.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-116">If `value` is equal to <xref:System.Double.NaN>, the return value is <xref:System.Double.NaN>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-117">O exemplo a seguir usa o <xref:System.Math.Abs%28System.Double%29> método para obter o valor absoluto de um número de <xref:System.Double> valores.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-117">The following example uses the <xref:System.Math.Abs%28System.Double%29> method to get the absolute value of a number of <xref:System.Double> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs2.cs#2)]
 [!code-vb[System.Math.Abs#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static short Abs (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Abs(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Abs(short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc3c0-118">Um número maior que <see cref="F:System.Int16.MinValue" />, mas menor ou igual a <see cref="F:System.Int16.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-118">A number that is greater than <see cref="F:System.Int16.MinValue" />, but less than or equal to <see cref="F:System.Int16.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="dc3c0-119">Retorna o valor absoluto de um inteiro com sinal de 16 bits.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-119">Returns the absolute value of a 16-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-120">Um inteiro com sinal de 16 bits, x, tal que 0 ≤ x ≤ <see cref="F:System.Int16.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-120">A 16-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.Int16.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-121">O valor absoluto de um <xref:System.Int16> é o valor numérico sem sinal.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-121">The absolute value of an <xref:System.Int16> is its numeric value without its sign.</span></span> <span data-ttu-id="dc3c0-122">Por exemplo, o valor absoluto de 123 e-123 estiver 123.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-122">For example, the absolute value of both 123 and -123 is 123.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-123">O exemplo a seguir usa o <xref:System.Math.Abs%28System.Int16%29> método para obter o valor absoluto de um número de <xref:System.Int16> valores.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-123">The following example uses the <xref:System.Math.Abs%28System.Int16%29> method to get the absolute value of a number of <xref:System.Int16> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs3.cs#3)]
 [!code-vb[System.Math.Abs#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="dc3c0-124"><paramref name="value" /> é igual a <see cref="F:System.Int16.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-124"><paramref name="value" /> equals <see cref="F:System.Int16.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static int Abs (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Abs(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Abs(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc3c0-125">Um número maior que <see cref="F:System.Int32.MinValue" />, mas menor ou igual a <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-125">A number that is greater than <see cref="F:System.Int32.MinValue" />, but less than or equal to <see cref="F:System.Int32.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="dc3c0-126">Retorna o valor absoluto de um inteiro com sinal de 32 bits.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-126">Returns the absolute value of a 32-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-127">Um inteiro com sinal de 32 bits, x, tal que 0 ≤ x ≤ <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-127">A 32-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.Int32.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-128">O valor absoluto de um <xref:System.Int32> é o valor numérico sem sinal.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-128">The absolute value of an <xref:System.Int32> is its numeric value without its sign.</span></span> <span data-ttu-id="dc3c0-129">Por exemplo, o valor absoluto de 123 e-123 estiver 123.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-129">For example, the absolute value of both 123 and -123 is 123.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-130">O exemplo a seguir usa o <xref:System.Math.Abs%28System.Int32%29> método para obter o valor absoluto de um número de <xref:System.Int32> valores.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-130">The following example uses the <xref:System.Math.Abs%28System.Int32%29> method to get the absolute value of a number of <xref:System.Int32> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs4.cs#4)]
 [!code-vb[System.Math.Abs#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="dc3c0-131"><paramref name="value" /> é igual a <see cref="F:System.Int32.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-131"><paramref name="value" /> equals <see cref="F:System.Int32.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static long Abs (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Abs(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Abs(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc3c0-132">Um número maior que <see cref="F:System.Int64.MinValue" />, mas menor ou igual a <see cref="F:System.Int64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-132">A number that is greater than <see cref="F:System.Int64.MinValue" />, but less than or equal to <see cref="F:System.Int64.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="dc3c0-133">Retorna o valor absoluto de um inteiro com sinal de 64 bits.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-133">Returns the absolute value of a 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-134">Um inteiro com sinal de 64 bits, x, tal que 0 ≤ x ≤ <see cref="F:System.Int64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-134">A 64-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.Int64.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-135">O valor absoluto de um <xref:System.Int64> é o valor numérico sem sinal.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-135">The absolute value of an <xref:System.Int64> is its numeric value without its sign.</span></span> <span data-ttu-id="dc3c0-136">Por exemplo, o valor absoluto de 123 e-123 estiver 123.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-136">For example, the absolute value of both 123 and -123 is 123.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-137">O exemplo a seguir usa o <xref:System.Math.Abs%28System.Int64%29> método para obter o valor absoluto de um número de <xref:System.Int64> valores.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-137">The following example uses the <xref:System.Math.Abs%28System.Int64%29> method to get the absolute value of a number of <xref:System.Int64> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs5.cs#5)]
 [!code-vb[System.Math.Abs#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs5.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="dc3c0-138"><paramref name="value" /> é igual a <see cref="F:System.Int64.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-138"><paramref name="value" /> equals <see cref="F:System.Int64.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static sbyte Abs (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Abs(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Abs(System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc3c0-139">Um número maior que <see cref="F:System.SByte.MinValue" />, mas menor ou igual a <see cref="F:System.SByte.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-139">A number that is greater than <see cref="F:System.SByte.MinValue" />, but less than or equal to <see cref="F:System.SByte.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="dc3c0-140">Retorna o valor absoluto de um inteiro com sinal de 8 bits.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-140">Returns the absolute value of an 8-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-141">Um inteiro com sinal de 8 bits, x, tal que 0 ≤ x ≤ <see cref="F:System.SByte.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-141">An 8-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.SByte.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-142">O valor absoluto de um byte assinado é seu valor numérico sem sinal.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-142">The absolute value of a signed byte is its numeric value without its sign.</span></span> <span data-ttu-id="dc3c0-143">Por exemplo, o valor absoluto de 12 e -12 é 12.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-143">For example, the absolute value of both 12 and -12 is 12.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-144">O exemplo a seguir usa o <xref:System.Math.Abs%28System.SByte%29> método para obter o valor absoluto de um número de <xref:System.SByte> valores.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-144">The following example uses the <xref:System.Math.Abs%28System.SByte%29> method to get the absolute value of a number of <xref:System.SByte> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs6.cs#6)]
 [!code-vb[System.Math.Abs#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="dc3c0-145"><paramref name="value" /> é igual a <see cref="F:System.SByte.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-145"><paramref name="value" /> equals <see cref="F:System.SByte.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static float Abs (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Abs(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Abs(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc3c0-146">Um número maior ou igual a <see cref="F:System.Single.MinValue" />, mas menor ou igual a <see cref="F:System.Single.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-146">A number that is greater than or equal to <see cref="F:System.Single.MinValue" />, but less than or equal to <see cref="F:System.Single.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="dc3c0-147">Retorna o valor absoluto de um número de ponto flutuante de precisão simples.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-147">Returns the absolute value of a single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-148">Um número de ponto flutuante de precisão simples, x, tal que 0 ≤ x ≤ <see cref="F:System.Single.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-148">A single-precision floating-point number, x, such that 0 ≤ x ≤<see cref="F:System.Single.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-149">O valor absoluto de um <xref:System.Single> é o valor numérico sem sinal.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-149">The absolute value of a <xref:System.Single> is its numeric value without its sign.</span></span> <span data-ttu-id="dc3c0-150">Por exemplo, o valor absoluto de ambos os 1.2e-03 e - 1.2e03 é 1.2e03.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-150">For example, the absolute value of both 1.2e-03 and -1.2e03 is 1.2e03.</span></span>  
  
 <span data-ttu-id="dc3c0-151">Se `value` é igual a <xref:System.Single.NegativeInfinity> ou <xref:System.Single.PositiveInfinity>, o valor de retorno é <xref:System.Single.PositiveInfinity>.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-151">If `value` is equal to <xref:System.Single.NegativeInfinity> or <xref:System.Single.PositiveInfinity>, the return value is <xref:System.Single.PositiveInfinity>.</span></span> <span data-ttu-id="dc3c0-152">Se `value` é igual a <xref:System.Single.NaN>, o valor de retorno é <xref:System.Single.NaN>.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-152">If `value` is equal to <xref:System.Single.NaN>, the return value is <xref:System.Single.NaN>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-153">O exemplo a seguir usa o <xref:System.Math.Abs%28System.Single%29> método para obter o valor absoluto de um número de <xref:System.Single> valores.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-153">The following example uses the <xref:System.Math.Abs%28System.Single%29> method to get the absolute value of a number of <xref:System.Single> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs7.cs#7)]
 [!code-vb[System.Math.Abs#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs7.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public static double Acos (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Acos(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Acos(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Acos (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Acos(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="dc3c0-154">Um número que representa um cosseno, em que <c>d</c> deve ser maior ou igual a -1, mas menor ou igual a 1.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-154">A number representing a cosine, where <c>d</c> must be greater than or equal to -1, but less than or equal to 1.</span></span></param>
        <summary><span data-ttu-id="dc3c0-155">Retorna o ângulo cujo cosseno é o número especificado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-155">Returns the angle whose cosine is the specified number.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-156">Um ângulo, θ, medido em radianos, tal que 0 ≤ θ ≤ π</span><span class="sxs-lookup"><span data-stu-id="dc3c0-156">An angle, θ, measured in radians, such that 0 ≤θ≤π</span></span>  
  
 <span data-ttu-id="dc3c0-157">- ou -</span><span class="sxs-lookup"><span data-stu-id="dc3c0-157">-or-</span></span>  
  
 <span data-ttu-id="dc3c0-158"><see cref="F:System.Double.NaN" /> se <paramref name="d" /> &lt; -1 ou <paramref name="d" /> &gt; 1 ou <paramref name="d" /> for igual a <see cref="F:System.Double.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-158"><see cref="F:System.Double.NaN" /> if <paramref name="d" /> &lt; -1 or <paramref name="d" /> &gt; 1 or <paramref name="d" /> equals <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-159">Multiplique o valor de retorno por 180 /<xref:System.Math.PI?displayProperty=nameWithType> para converter de radianos em graus.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-159">Multiply the return value by 180/<xref:System.Math.PI?displayProperty=nameWithType> to convert from radians to degrees.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-160">O exemplo a seguir usa o <xref:System.Math.Acos%2A> método para ajudar o cálculo dos ângulos internos de um determinado Trapézio.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-160">The following example uses the <xref:System.Math.Acos%2A> method to assist in the computation of the inner angles of a given trapezoid.</span></span>  
  
 [!code-cpp[MathSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MathSample/CPP/mathsample.cpp#1)]
 [!code-csharp[MathSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MathSample/CS/mathsample.cs#1)]
 [!code-vb[MathSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MathSample/VB/mathsample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acosh">
      <MemberSignature Language="C#" Value="public static double Acosh (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Acosh(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Acosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Acosh (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Acosh(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public static double Asin (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Asin(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Asin(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Asin (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Asin(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="dc3c0-161">Um número que representa um seno, em que <c>d</c> deve ser maior ou igual a -1, mas menor ou igual a 1.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-161">A number representing a sine, where <c>d</c> must be greater than or equal to -1, but less than or equal to 1.</span></span></param>
        <summary><span data-ttu-id="dc3c0-162">Retorna o ângulo cujo seno é o número especificado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-162">Returns the angle whose sine is the specified number.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-163">Um ângulo, θ, medido em radianos, tal que -π/2 ≤ θ ≤ π/2</span><span class="sxs-lookup"><span data-stu-id="dc3c0-163">An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2</span></span>  
  
 <span data-ttu-id="dc3c0-164">- ou -</span><span class="sxs-lookup"><span data-stu-id="dc3c0-164">-or-</span></span>  
  
 <span data-ttu-id="dc3c0-165"><see cref="F:System.Double.NaN" /> se <paramref name="d" /> &lt; -1 ou <paramref name="d" /> &gt; 1 ou <paramref name="d" /> for igual a <see cref="F:System.Double.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-165"><see cref="F:System.Double.NaN" /> if <paramref name="d" /> &lt; -1 or <paramref name="d" /> &gt; 1 or <paramref name="d" /> equals <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-166">Um valor de retorno positivo representa um ângulo no sentido anti-horário do eixo x; um valor de retorno negativo representa um ângulo no sentido horário.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-166">A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.</span></span>  
  
 <span data-ttu-id="dc3c0-167">Multiplique o valor de retorno por 180 /<xref:System.Math.PI?displayProperty=nameWithType> para converter de radianos em graus.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-167">Multiply the return value by 180/<xref:System.Math.PI?displayProperty=nameWithType> to convert from radians to degrees.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-168">O exemplo a seguir usa <xref:System.Math.Asin%2A> para auxiliar na computação dos ângulos internas de um determinado Trapézio.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-168">The following example uses <xref:System.Math.Asin%2A> to assist in the computation of the inner angles of a given trapezoid.</span></span>  
  
 [!code-cpp[MathSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MathSample/CPP/mathsample.cpp#1)]
 [!code-csharp[MathSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MathSample/CS/mathsample.cs#1)]
 [!code-vb[MathSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MathSample/VB/mathsample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Asinh">
      <MemberSignature Language="C#" Value="public static double Asinh (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Asinh(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Asinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Asinh (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Asinh(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan">
      <MemberSignature Language="C#" Value="public static double Atan (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Atan(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Atan(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Atan(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="dc3c0-169">Um número que representa uma tangente.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-169">A number representing a tangent.</span></span></param>
        <summary><span data-ttu-id="dc3c0-170">Retorna o ângulo cuja tangente é o número especificado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-170">Returns the angle whose tangent is the specified number.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-171">Um ângulo, θ, medido em radianos, tal que π/2 ≤ θ ≤ π/2.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-171">An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2.</span></span>  
  
 <span data-ttu-id="dc3c0-172">- ou -</span><span class="sxs-lookup"><span data-stu-id="dc3c0-172">-or-</span></span>  
  
 <span data-ttu-id="dc3c0-173"><see cref="F:System.Double.NaN" /> se <paramref name="d" /> for igual a <see cref="F:System.Double.NaN" />, -π/2 arrendondado para precisão dupla (-1,5707963267949) se <paramref name="d" /> for igual a <see cref="F:System.Double.NegativeInfinity" /> ou π/2 arrendondado para precisão dupla (1,5707963267949) se <paramref name="d" /> for igual a <see cref="F:System.Double.PositiveInfinity" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-173"><see cref="F:System.Double.NaN" /> if <paramref name="d" /> equals <see cref="F:System.Double.NaN" />, -π/2 rounded to double precision (-1.5707963267949) if <paramref name="d" /> equals <see cref="F:System.Double.NegativeInfinity" />, or π/2 rounded to double precision (1.5707963267949) if <paramref name="d" /> equals <see cref="F:System.Double.PositiveInfinity" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-174">Um valor de retorno positivo representa um ângulo no sentido anti-horário do eixo x; um valor de retorno negativo representa um ângulo no sentido horário.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-174">A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.</span></span>  
  
 <span data-ttu-id="dc3c0-175">Multiplique o valor de retorno por 180 /<xref:System.Math.PI?displayProperty=nameWithType> para converter de radianos em graus.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-175">Multiply the return value by 180/<xref:System.Math.PI?displayProperty=nameWithType> to convert from radians to degrees.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-176">O exemplo a seguir demonstra como calcular o arco tangente de um valor e exibi-lo no console.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-176">The following example demonstrates how to calculate the arctangent of a value and display it to the console.</span></span>  
  
 [!code-cpp[math.atanx#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.atanx/CPP/atan.cpp#1)]
 [!code-csharp[math.atanx#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.atanx/CS/atan.cs#1)]
 [!code-vb[math.atanx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.atanx/VB/atan.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="C#" Value="public static double Atan2 (double y, double x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Atan2(float64 y, float64 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Atan2(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan2 (y As Double, x As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Atan2(double y, double x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y" Type="System.Double" />
        <Parameter Name="x" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="y"><span data-ttu-id="dc3c0-177">A coordenada y de um ponto.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-177">The y coordinate of a point.</span></span></param>
        <param name="x"><span data-ttu-id="dc3c0-178">A coordenada x de um ponto.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-178">The x coordinate of a point.</span></span></param>
        <summary><span data-ttu-id="dc3c0-179">Retorna o ângulo cuja tangente é o quociente de dois números especificados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-179">Returns the angle whose tangent is the quotient of two specified numbers.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-180">Um ângulo, θ, medido em radianos, tal que -π ≤ θ ≤ π e tan(θ) = <paramref name="y" /> / <paramref name="x" />, em que (<paramref name="x" />, <paramref name="y" />) é um ponto no plano cartesiano.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-180">An angle, θ, measured in radians, such that -π≤θ≤π, and tan(θ) = <paramref name="y" /> / <paramref name="x" />, where (<paramref name="x" />, <paramref name="y" />) is a point in the Cartesian plane.</span></span> <span data-ttu-id="dc3c0-181">Observe o seguinte:</span><span class="sxs-lookup"><span data-stu-id="dc3c0-181">Observe the following:</span></span>  
  
-   <span data-ttu-id="dc3c0-182">Para (<paramref name="x" />, <paramref name="y" />) no quadrante 1, 0 &lt; θ &lt; π/2.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-182">For (<paramref name="x" />, <paramref name="y" />) in quadrant 1, 0 &lt; θ &lt; π/2.</span></span>  
  
-   <span data-ttu-id="dc3c0-183">Para (<paramref name="x" />, <paramref name="y" />) no quadrante 2, π/2 &lt; θ ≤ π.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-183">For (<paramref name="x" />, <paramref name="y" />) in quadrant 2, π/2 &lt; θ≤π.</span></span>  
  
-   <span data-ttu-id="dc3c0-184">Para (<paramref name="x" />, <paramref name="y" />) no quadrante 3, -π &lt; θ &lt; -π/2.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-184">For (<paramref name="x" />, <paramref name="y" />) in quadrant 3, -π &lt; θ &lt; -π/2.</span></span>  
  
-   <span data-ttu-id="dc3c0-185">Para (<paramref name="x" />, <paramref name="y" />) no quadrante 4, -π/2 &lt; θ &lt; 0.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-185">For (<paramref name="x" />, <paramref name="y" />) in quadrant 4, -π/2 &lt; θ &lt; 0.</span></span>  
  
 <span data-ttu-id="dc3c0-186">Para pontos em limites dos quadrantes, o valor retornado é o seguinte:</span><span class="sxs-lookup"><span data-stu-id="dc3c0-186">For points on the boundaries of the quadrants, the return value is the following:</span></span>  
  
-   <span data-ttu-id="dc3c0-187">Se y for 0 e x não for negativo, θ = 0.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-187">If y is 0 and x is not negative, θ = 0.</span></span>  
  
-   <span data-ttu-id="dc3c0-188">Se y for 0 e x for negativo, θ = π.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-188">If y is 0 and x is negative, θ = π.</span></span>  
  
-   <span data-ttu-id="dc3c0-189">Se y for positivo e x for 0, θ = π/2.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-189">If y is positive and x is 0, θ = π/2.</span></span>  
  
-   <span data-ttu-id="dc3c0-190">Se y for negativo e x for 0, θ = - π/2.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-190">If y is negative and x is 0, θ = -π/2.</span></span>  
  
-   <span data-ttu-id="dc3c0-191">Se y for 0 e x for 0, θ = 0.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-191">If y is 0 and x is 0, θ = 0.</span></span>  
  
 <span data-ttu-id="dc3c0-192">Se <paramref name="x" /> ou <paramref name="y" /> for <see cref="F:System.Double.NaN" />, ou se <paramref name="x" /> e <paramref name="y" /> forem <see cref="F:System.Double.PositiveInfinity" /> ou <see cref="F:System.Double.NegativeInfinity" />, o método retornará <see cref="F:System.Double.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-192">If <paramref name="x" /> or <paramref name="y" /> is <see cref="F:System.Double.NaN" />, or if <paramref name="x" /> and <paramref name="y" /> are either <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" />, the method returns <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-193">O valor de retorno é o ângulo no plano cartesiano formado pelo eixo x e um vetor a partir da origem, (0,0) e terminando em pontos, (x, y).</span><span class="sxs-lookup"><span data-stu-id="dc3c0-193">The return value is the angle in the Cartesian plane formed by the x-axis, and a vector starting from the origin, (0,0), and terminating at the point, (x,y).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-194">O exemplo a seguir demonstra como calcular o arco tangente de um ângulo e um vetor.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-194">The following example demonstrates how to calculate the arctangent of an angle and a vector.</span></span> <span data-ttu-id="dc3c0-195">O valor resultante é exibido no console do.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-195">The resulting value is displayed in the console.</span></span>  
  
 [!code-cpp[math.atanx#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.atanx/CPP/atan.cpp#1)]
 [!code-csharp[math.atanx#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.atanx/CS/atan.cs#1)]
 [!code-vb[math.atanx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.atanx/VB/atan.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Atanh">
      <MemberSignature Language="C#" Value="public static double Atanh (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Atanh(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Atanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atanh (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Atanh(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BigMul">
      <MemberSignature Language="C#" Value="public static long BigMul (int a, int b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 BigMul(int32 a, int32 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.BigMul(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BigMul (a As Integer, b As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long BigMul(int a, int b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="dc3c0-196">O primeiro número a multiplicar.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-196">The first number to multiply.</span></span></param>
        <param name="b"><span data-ttu-id="dc3c0-197">O segundo número a multiplicar.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-197">The second number to multiply.</span></span></param>
        <summary><span data-ttu-id="dc3c0-198">Produz o produto completo de dois números de 32 bits.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-198">Produces the full product of two 32-bit numbers.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-199">O número que contém o produto dos números especificados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-199">The number containing the product of the specified numbers.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-200">O exemplo a seguir demonstra o uso do <xref:System.Math.BigMul%2A> método para calcular o produto de dois valores inteiros.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-200">The following example demonstrates the use of the <xref:System.Math.BigMul%2A> method to calculate the product of two integer values.</span></span>  
  
 [!code-cpp[math.bigmul#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.bigmul/CPP/bigmul.cpp#1)]
 [!code-csharp[math.bigmul#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.bigmul/CS/bigmul.cs#1)]
 [!code-vb[math.bigmul#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.bigmul/VB/bigmul.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cbrt">
      <MemberSignature Language="C#" Value="public static double Cbrt (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Cbrt(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Cbrt(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cbrt (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Cbrt(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Ceiling">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="dc3c0-201">Retorna o menor valor inteiro maior ou igual ao número especificado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-201">Returns the smallest integral value greater than or equal to the specified number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-202">O comportamento deste método segue o padrão IEEE 754, seção 4.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-202">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="dc3c0-203">Este tipo de arredondamento às vezes é chamado de arredondamento para positivo infinito.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-203">This kind of rounding is sometimes called rounding toward positive infinity.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public static decimal Ceiling (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Ceiling(valuetype System.Decimal d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Ceiling(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Ceiling (d As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Ceiling(System::Decimal d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="dc3c0-204">Um número decimal.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-204">A decimal number.</span></span></param>
        <summary><span data-ttu-id="dc3c0-205">Retorna o menor valor integral maior ou igual ao número decimal especificado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-205">Returns the smallest integral value that is greater than or equal to the specified decimal number.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-206">O menor valor integral maior ou igual a <paramref name="d" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-206">The smallest integral value that is greater than or equal to <paramref name="d" />.</span></span> <span data-ttu-id="dc3c0-207">Observe que esse método retorna um <see cref="T:System.Decimal" /> em vez de um tipo integral.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-207">Note that this method returns a <see cref="T:System.Decimal" /> instead of an integral type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-208">O comportamento deste método segue o padrão IEEE 754, seção 4.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-208">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="dc3c0-209">Este tipo de arredondamento às vezes é chamado de arredondamento para positivo infinito.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-209">This kind of rounding is sometimes called rounding toward positive infinity.</span></span> <span data-ttu-id="dc3c0-210">Em outras palavras, se `d` for positivo, a presença de qualquer componente fracionários causa `d` a ser arredondado para o inteiro mais próximo.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-210">In other words, if `d` is positive, the presence of any fractional component causes `d` to be rounded to the next highest integer.</span></span> <span data-ttu-id="dc3c0-211">Se `d` é negativo, a operação de arredondamento faz com que qualquer componente frações de `d` sejam descartadas.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-211">If `d` is negative, the rounding operation causes any fractional component of `d` to be discarded.</span></span> <span data-ttu-id="dc3c0-212">A operação desse método difere de <xref:System.Math.Floor%28System.Decimal%29> método, que oferece suporte para o infinito negativo de arredondamento.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-212">The operation of this method differs from the <xref:System.Math.Floor%28System.Decimal%29> method, which supports rounding toward negative infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-213">O exemplo a seguir ilustra o <xref:System.Math.Ceiling%28System.Decimal%29?displayProperty=nameWithType> método e contrasta com o <xref:System.Math.Floor%28System.Decimal%29> método.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-213">The following example illustrates the <xref:System.Math.Ceiling%28System.Decimal%29?displayProperty=nameWithType> method and contrasts it with the <xref:System.Math.Floor%28System.Decimal%29> method.</span></span>  
  
 [!code-csharp[System.Math.Ceiling#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Ceiling/cs/Ceiling1.cs#1)]
 [!code-vb[System.Math.Ceiling#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Ceiling/vb/Ceiling1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Floor(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public static double Ceiling (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Ceiling(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Ceiling(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Ceiling (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Ceiling(double a);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="dc3c0-214">Um número de ponto flutuante de precisão dupla.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-214">A double-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="dc3c0-215">Retorna o menor valor integral maior ou igual ao número de ponto flutuante de precisão dupla especificado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-215">Returns the smallest integral value that is greater than or equal to the specified double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-216">O menor valor integral maior ou igual a <paramref name="a" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-216">The smallest integral value that is greater than or equal to <paramref name="a" />.</span></span> <span data-ttu-id="dc3c0-217">Se <paramref name="a" /> for igual a <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> ou <see cref="F:System.Double.PositiveInfinity" />, esse valor será retornado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-217">If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</span></span> <span data-ttu-id="dc3c0-218">Observe que esse método retorna um <see cref="T:System.Double" /> em vez de um tipo integral.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-218">Note that this method returns a <see cref="T:System.Double" /> instead of an integral type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-219">O comportamento deste método segue o padrão IEEE 754, seção 4.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-219">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="dc3c0-220">Este tipo de arredondamento às vezes é chamado de arredondamento para positivo infinito.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-220">This kind of rounding is sometimes called rounding toward positive infinity.</span></span> <span data-ttu-id="dc3c0-221">Em outras palavras, se `a` for positivo, a presença de qualquer componente fracionários causa `a` a ser arredondado para o inteiro mais próximo.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-221">In other words, if `a` is positive, the presence of any fractional component causes `a` to be rounded to the next highest integer.</span></span> <span data-ttu-id="dc3c0-222">Se `a` é negativo, a operação de arredondamento faz com que qualquer componente frações de `a` sejam descartadas.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-222">If `a` is negative, the rounding operation causes any fractional component of `a` to be discarded.</span></span> <span data-ttu-id="dc3c0-223">A operação desse método difere de <xref:System.Math.Floor%28System.Double%29> método, que oferece suporte para o infinito negativo de arredondamento.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-223">The operation of this method differs from the <xref:System.Math.Floor%28System.Double%29> method, which supports rounding toward negative infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-224">O exemplo a seguir ilustra o <xref:System.Math.Ceiling%28System.Double%29?displayProperty=nameWithType> método e contrasta com o <xref:System.Math.Floor%28System.Double%29> método.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-224">The following example illustrates the <xref:System.Math.Ceiling%28System.Double%29?displayProperty=nameWithType> method and contrasts it with the <xref:System.Math.Floor%28System.Double%29> method.</span></span>  
  
 [!code-csharp[System.Math.Ceiling#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Ceiling/cs/Ceiling1.cs#2)]
 [!code-vb[System.Math.Ceiling#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Ceiling/vb/Ceiling1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static byte Clamp (byte value, byte min, byte max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 Clamp(unsigned int8 value, unsigned int8 min, unsigned int8 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Byte,System.Byte,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Byte, min As Byte, max As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte Clamp(System::Byte value, System::Byte min, System::Byte max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="min" Type="System.Byte" />
        <Parameter Name="max" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static decimal Clamp (decimal value, decimal min, decimal max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Clamp(valuetype System.Decimal value, valuetype System.Decimal min, valuetype System.Decimal max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Decimal,System.Decimal,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Decimal, min As Decimal, max As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Clamp(System::Decimal value, System::Decimal min, System::Decimal max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="min" Type="System.Decimal" />
        <Parameter Name="max" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static double Clamp (double value, double min, double max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Clamp(float64 value, float64 min, float64 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Double, min As Double, max As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Clamp(double value, double min, double max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="min" Type="System.Double" />
        <Parameter Name="max" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static short Clamp (short value, short min, short max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Clamp(int16 value, int16 min, int16 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Int16,System.Int16,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Short, min As Short, max As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Clamp(short value, short min, short max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
        <Parameter Name="min" Type="System.Int16" />
        <Parameter Name="max" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static int Clamp (int value, int min, int max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Clamp(int32 value, int32 min, int32 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Integer, min As Integer, max As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Clamp(int value, int min, int max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="min" Type="System.Int32" />
        <Parameter Name="max" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static long Clamp (long value, long min, long max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Clamp(int64 value, int64 min, int64 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Int64,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Long, min As Long, max As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Clamp(long value, long min, long max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="min" Type="System.Int64" />
        <Parameter Name="max" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static sbyte Clamp (sbyte value, sbyte min, sbyte max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Clamp(int8 value, int8 min, int8 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.SByte,System.SByte,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As SByte, min As SByte, max As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Clamp(System::SByte value, System::SByte min, System::SByte max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
        <Parameter Name="min" Type="System.SByte" />
        <Parameter Name="max" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static float Clamp (float value, float min, float max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Clamp(float32 value, float32 min, float32 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Single,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Single, min As Single, max As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Clamp(float value, float min, float max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="min" Type="System.Single" />
        <Parameter Name="max" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static ushort Clamp (ushort value, ushort min, ushort max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 Clamp(unsigned int16 value, unsigned int16 min, unsigned int16 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.UInt16,System.UInt16,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As UShort, min As UShort, max As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 Clamp(System::UInt16 value, System::UInt16 min, System::UInt16 max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
        <Parameter Name="min" Type="System.UInt16" />
        <Parameter Name="max" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static uint Clamp (uint value, uint min, uint max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Clamp(unsigned int32 value, unsigned int32 min, unsigned int32 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.UInt32,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As UInteger, min As UInteger, max As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 Clamp(System::UInt32 value, System::UInt32 min, System::UInt32 max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="min" Type="System.UInt32" />
        <Parameter Name="max" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static ulong Clamp (ulong value, ulong min, ulong max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Clamp(unsigned int64 value, unsigned int64 min, unsigned int64 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.UInt64,System.UInt64,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As ULong, min As ULong, max As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 Clamp(System::UInt64 value, System::UInt64 min, System::UInt64 max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="min" Type="System.UInt64" />
        <Parameter Name="max" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cos">
      <MemberSignature Language="C#" Value="public static double Cos (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Cos(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Cos(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cos (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Cos(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="dc3c0-225">Um ângulo, medido em radianos.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-225">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="dc3c0-226">Retorna o cosseno do ângulo especificado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-226">Returns the cosine of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-227">O cosseno de <paramref name="d" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-227">The cosine of <paramref name="d" />.</span></span> <span data-ttu-id="dc3c0-228">Se <paramref name="d" /> for igual a <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> ou <see cref="F:System.Double.PositiveInfinity" />, esse método retornará <see cref="F:System.Double.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-228">If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-229">O ângulo, `d`, devem ser em radianos.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-229">The angle, `d`, must be in radians.</span></span> <span data-ttu-id="dc3c0-230">Multiplique por <xref:System.Math.PI?displayProperty=nameWithType>/180 para converter graus em radianos.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-230">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
 <span data-ttu-id="dc3c0-231">Os valores aceitáveis de `d` variam de aproximadamente-9223372036854775295 a aproximadamente 9223372036854775295.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-231">Acceptable values of `d` range from approximately -9223372036854775295 to approximately 9223372036854775295.</span></span> <span data-ttu-id="dc3c0-232">Para valores fora desse intervalo, o <xref:System.Math.Cos%2A> método retorna `d` inalterado em vez de gerar uma exceção.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-232">For values outside this range, the <xref:System.Math.Cos%2A> method returns `d` unchanged rather than throwing an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-233">O exemplo a seguir usa <xref:System.Math.Cos%2A> para avaliar determinadas identidades trigonométricas para ângulos selecionadas.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-233">The following example uses <xref:System.Math.Cos%2A> to evaluate certain trigonometric identities for selected angles.</span></span>  
  
 [!code-cpp[System.Math.SinCos#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.SinCos/CPP/sincos.cpp#1)]
 [!code-csharp[System.Math.SinCos#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.SinCos/CS/sincos.cs#1)]
 [!code-vb[System.Math.SinCos#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.SinCos/VB/sincos.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public static double Cosh (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Cosh(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Cosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cosh (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Cosh(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc3c0-234">Um ângulo, medido em radianos.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-234">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="dc3c0-235">Retorna o cosseno hiperbólico do ângulo especificado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-235">Returns the hyperbolic cosine of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-236">O cosseno hiperbólico de <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-236">The hyperbolic cosine of <paramref name="value" />.</span></span> <span data-ttu-id="dc3c0-237">Se <paramref name="value" /> for igual a <see cref="F:System.Double.NegativeInfinity" /> ou <see cref="F:System.Double.PositiveInfinity" />, <see cref="F:System.Double.PositiveInfinity" /> será retornado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-237">If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" /> or <see cref="F:System.Double.PositiveInfinity" />, <see cref="F:System.Double.PositiveInfinity" /> is returned.</span></span> <span data-ttu-id="dc3c0-238">Se <paramref name="value" /> for igual a <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> será retornado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-238">If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-239">O ângulo, `value`, devem ser em radianos.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-239">The angle, `value`, must be in radians.</span></span> <span data-ttu-id="dc3c0-240">Multiplique por <xref:System.Math.PI?displayProperty=nameWithType>/180 para converter graus em radianos.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-240">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-241">O exemplo a seguir usa <xref:System.Math.Cosh%2A> para avaliar determinadas identidades hiperbólica para valores selecionados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-241">The following example uses <xref:System.Math.Cosh%2A> to evaluate certain hyperbolic identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.SinhCosh#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.SinhCosh/CPP/sinhcosh.cpp#1)]
 [!code-csharp[System.Math.SinhCosh#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.SinhCosh/CS/sinhcosh.cs#1)]
 [!code-vb[System.Math.SinhCosh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.SinhCosh/VB/sinhcosh.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DivRem">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="dc3c0-242">Calcula o quociente de dois números e também retorna o restante em um parâmetro de saída.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-242">Calculates the quotient of two numbers and also returns the remainder in an output parameter.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DivRem">
      <MemberSignature Language="C#" Value="public static int DivRem (int a, int b, out int result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DivRem(int32 a, int32 b, [out] int32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.DivRem(System.Int32,System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivRem (a As Integer, b As Integer, ByRef result As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int DivRem(int a, int b, [Runtime::InteropServices::Out] int % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int32" />
        <Parameter Name="result" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="dc3c0-243">O dividendo.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-243">The dividend.</span></span></param>
        <param name="b"><span data-ttu-id="dc3c0-244">O divisor.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-244">The divisor.</span></span></param>
        <param name="result"><span data-ttu-id="dc3c0-245">O restante.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-245">The remainder.</span></span></param>
        <summary><span data-ttu-id="dc3c0-246">Calcula o quociente de dois inteiros de 32 bits com sinal e também retorna o resto em um parâmetro de saída.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-246">Calculates the quotient of two 32-bit signed integers and also returns the remainder in an output parameter.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-247">O quociente dos números especificados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-247">The quotient of the specified numbers.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-248">O restante é calculado usando a operação de módulo.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-248">The remainder is calculated by using the modulus operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-249">O exemplo a seguir demonstra o <xref:System.Math.DivRem%28System.Int32%2CSystem.Int32%2CSystem.Int32%40%29> método.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-249">The following example demonstrates the <xref:System.Math.DivRem%28System.Int32%2CSystem.Int32%2CSystem.Int32%40%29> method.</span></span>  
  
 [!code-csharp[System.Math.DivRem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.divrem/cs/divrem1.cs#1)]
 [!code-vb[System.Math.DivRem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.divrem/vb/divrem1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <span data-ttu-id="dc3c0-250"><paramref name="b" /> é zero.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-250"><paramref name="b" /> is zero.</span></span></exception>
        <altmember cref="M:System.Math.IEEERemainder(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="DivRem">
      <MemberSignature Language="C#" Value="public static long DivRem (long a, long b, out long result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 DivRem(int64 a, int64 b, [out] int64&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.DivRem(System.Int64,System.Int64,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivRem (a As Long, b As Long, ByRef result As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long DivRem(long a, long b, [Runtime::InteropServices::Out] long % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int64" />
        <Parameter Name="b" Type="System.Int64" />
        <Parameter Name="result" Type="System.Int64&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="dc3c0-251">O dividendo.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-251">The dividend.</span></span></param>
        <param name="b"><span data-ttu-id="dc3c0-252">O divisor.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-252">The divisor.</span></span></param>
        <param name="result"><span data-ttu-id="dc3c0-253">O restante.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-253">The remainder.</span></span></param>
        <summary><span data-ttu-id="dc3c0-254">Calcula o quociente de dois inteiros com sinal de 64 bits e também retorna o restante em um parâmetro de saída.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-254">Calculates the quotient of two 64-bit signed integers and also returns the remainder in an output parameter.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-255">O quociente dos números especificados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-255">The quotient of the specified numbers.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-256">O restante é calculado usando a operação de módulo.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-256">The remainder is calculated by using the modulus operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-257">O exemplo a seguir demonstra o <xref:System.Math.DivRem%28System.Int64%2CSystem.Int64%2CSystem.Int64%40%29> método.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-257">The following example demonstrates the <xref:System.Math.DivRem%28System.Int64%2CSystem.Int64%2CSystem.Int64%40%29> method.</span></span>  
  
 [!code-csharp[System.Math.DivRem#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.divrem/cs/divrem2.cs#2)]
 [!code-vb[System.Math.DivRem#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.divrem/vb/divrem2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <span data-ttu-id="dc3c0-258"><paramref name="b" /> é zero.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-258"><paramref name="b" /> is zero.</span></span></exception>
        <altmember cref="M:System.Math.IEEERemainder(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="E">
      <MemberSignature Language="C#" Value="public const double E = 2.71828182845905;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 E = (2.71828182845905)" />
      <MemberSignature Language="DocId" Value="F:System.Math.E" />
      <MemberSignature Language="VB.NET" Value="Public Const E As Double  = 2.71828182845905" />
      <MemberSignature Language="C++ CLI" Value="public: double E = 2.71828182845905;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>2.71828182845905</MemberValue>
      <Docs>
        <summary><span data-ttu-id="dc3c0-259">Representa a base logarítmica natural, especificada pela constante <see langword="e" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-259">Represents the natural logarithmic base, specified by the constant, <see langword="e" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-260">O valor desse campo é 2.7182818284590452354.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-260">The value of this field is 2.7182818284590452354.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-261">O exemplo a seguir compara <xref:System.Math.E> com o valor calculado de uma série de energia.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-261">The following example compares <xref:System.Math.E> with the value calculated from a power series.</span></span>  
  
 [!code-cpp[System.Math.E#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.E/CPP/efield.cpp#1)]
 [!code-csharp[System.Math.E#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.E/CS/efield.cs#1)]
 [!code-vb[System.Math.E#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.E/VB/efield.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exp">
      <MemberSignature Language="C#" Value="public static double Exp (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Exp(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Exp(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exp (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Exp(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="dc3c0-262">Um número que especifica uma potência.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-262">A number specifying a power.</span></span></param>
        <summary><span data-ttu-id="dc3c0-263">Retorna <see langword="e" /> elevado à potência especificada.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-263">Returns <see langword="e" /> raised to the specified power.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-264">O número <see langword="e" /> elevado à potência <paramref name="d" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-264">The number <see langword="e" /> raised to the power <paramref name="d" />.</span></span> <span data-ttu-id="dc3c0-265">Se <paramref name="d" /> for igual a <see cref="F:System.Double.NaN" /> ou <see cref="F:System.Double.PositiveInfinity" />, esse valor será retornado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-265">If <paramref name="d" /> equals <see cref="F:System.Double.NaN" /> or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</span></span> <span data-ttu-id="dc3c0-266">Se <paramref name="d" /> for igual a <see cref="F:System.Double.NegativeInfinity" />, 0 será retornado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-266">If <paramref name="d" /> equals <see cref="F:System.Double.NegativeInfinity" />, 0 is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-267">`e` é uma constante matemática cujo valor é aproximadamente 2,71828.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-267">`e` is a mathematical constant whose value is approximately 2.71828.</span></span>  
  
 <span data-ttu-id="dc3c0-268">Use o <xref:System.Math.Pow%2A> método para calcular potências de outras bases de dados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-268">Use the <xref:System.Math.Pow%2A> method to calculate powers of other bases.</span></span>  
  
 <span data-ttu-id="dc3c0-269"><xref:System.Math.Exp%2A> é o inverso de <xref:System.Math.Log%2A>.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-269"><xref:System.Math.Exp%2A> is the inverse of <xref:System.Math.Log%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-270">O exemplo a seguir usa <xref:System.Math.Exp%2A> para avaliar determinadas identidades exponenciais e logarítmicas para valores selecionados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-270">The following example uses <xref:System.Math.Exp%2A> to evaluate certain exponential and logarithmic identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.Exp#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.Exp/CPP/exp.cpp#1)]
 [!code-csharp[System.Math.Exp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Exp/CS/exp.cs#1)]
 [!code-vb[System.Math.Exp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Exp/VB/exp.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Math.E" />
        <altmember cref="M:System.Math.Pow(System.Double,System.Double)" />
        <altmember cref="M:System.Math.Log(System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Floor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="dc3c0-271">Retorna o maior valor integral menor ou igual ao número especificado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-271">Returns the largest integral value less than or equal to the specified number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-272">O comportamento deste método segue o padrão IEEE 754, seção 4.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-272">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="dc3c0-273">Este tipo de arredondamento às vezes é chamado de arredondamento para negativo infinito.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-273">This kind of rounding is sometimes called rounding toward negative infinity.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public static decimal Floor (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Floor(valuetype System.Decimal d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Floor(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Floor (d As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Floor(System::Decimal d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="dc3c0-274">Um número decimal.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-274">A decimal number.</span></span></param>
        <summary><span data-ttu-id="dc3c0-275">Retorna o maior valor integral menor ou igual ao número decimal especificado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-275">Returns the largest integral value less than or equal to the specified decimal number.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-276">O maior valor integral menor ou igual a <paramref name="d" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-276">The largest integral value less than or equal to <paramref name="d" />.</span></span>  <span data-ttu-id="dc3c0-277">Observe que o método retorna um valor integral do tipo <see cref="T:System.Decimal" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-277">Note that the method returns an integral value of type <see cref="T:System.Decimal" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-278">O comportamento deste método segue o padrão IEEE 754, seção 4.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-278">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="dc3c0-279">Este tipo de arredondamento às vezes é chamado de arredondamento para negativo infinito.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-279">This kind of rounding is sometimes called rounding toward negative infinity.</span></span> <span data-ttu-id="dc3c0-280">Em outras palavras, se `d` for positivo, qualquer componente fracionário é truncado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-280">In other words, if `d` is positive, any fractional component is truncated.</span></span> <span data-ttu-id="dc3c0-281">Se `d` for negativo, a presença de qualquer componente fracionário faz com que ele deve ser arredondada para o menor inteiro.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-281">If `d` is negative, the presence of any fractional component causes it to be rounded to the smaller integer.</span></span> <span data-ttu-id="dc3c0-282">A operação desse método difere de <xref:System.Math.Ceiling%2A> método, que oferece suporte para o infinito positivo de arredondamento.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-282">The operation of this method differs from the <xref:System.Math.Ceiling%2A> method, which supports rounding toward positive infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-283">O exemplo a seguir ilustra o <xref:System.Math.Floor%28System.Decimal%29?displayProperty=nameWithType> método e contrasta com o <xref:System.Math.Ceiling%28System.Decimal%29> método.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-283">The following example illustrates the <xref:System.Math.Floor%28System.Decimal%29?displayProperty=nameWithType> method and contrasts it with the <xref:System.Math.Ceiling%28System.Decimal%29> method.</span></span>  
  
 [!code-csharp[System.Math.Ceiling#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Ceiling/cs/Ceiling1.cs#1)]
 [!code-vb[System.Math.Ceiling#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Ceiling/vb/Ceiling1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Ceiling(System.Decimal)" />
        <altmember cref="M:System.Decimal.Floor(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public static double Floor (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Floor(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Floor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Floor (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Floor(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="dc3c0-284">Um número de ponto flutuante de precisão dupla.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-284">A double-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="dc3c0-285">Retorna o maior valor integral menor ou igual ao número de ponto flutuante de precisão dupla especificado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-285">Returns the largest integral value less than or equal to the specified double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-286">O maior valor integral menor ou igual a <paramref name="d" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-286">The largest integral value less than or equal to <paramref name="d" />.</span></span> <span data-ttu-id="dc3c0-287">Se <paramref name="d" /> for igual a <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> ou <see cref="F:System.Double.PositiveInfinity" />, esse valor será retornado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-287">If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-288">O comportamento deste método segue o padrão IEEE 754, seção 4.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-288">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="dc3c0-289">Este tipo de arredondamento às vezes é chamado de arredondamento para negativo infinito.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-289">This kind of rounding is sometimes called rounding toward negative infinity.</span></span> <span data-ttu-id="dc3c0-290">Em outras palavras, se `d` for positivo, qualquer componente fracionário é truncado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-290">In other words, if `d` is positive, any fractional component is truncated.</span></span> <span data-ttu-id="dc3c0-291">Se `d` for negativo, a presença de qualquer componente fracionário faz com que ele deve ser arredondada para o menor inteiro.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-291">If `d` is negative, the presence of any fractional component causes it to be rounded to the smaller integer.</span></span> <span data-ttu-id="dc3c0-292">A operação desse método difere de <xref:System.Math.Ceiling%2A> método, que oferece suporte para o infinito positivo de arredondamento.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-292">The operation of this method differs from the <xref:System.Math.Ceiling%2A> method, which supports rounding toward positive infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-293">O exemplo a seguir ilustra o <xref:System.Math.Floor%28System.Double%29?displayProperty=nameWithType> método e contrasta com o <xref:System.Math.Ceiling%28System.Double%29> método.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-293">The following example illustrates the <xref:System.Math.Floor%28System.Double%29?displayProperty=nameWithType> method and contrasts it with the <xref:System.Math.Ceiling%28System.Double%29> method.</span></span>  
  
 [!code-csharp[System.Math.Ceiling#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Ceiling/cs/Ceiling1.cs#2)]
 [!code-vb[System.Math.Ceiling#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Ceiling/vb/Ceiling1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="IEEERemainder">
      <MemberSignature Language="C#" Value="public static double IEEERemainder (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 IEEERemainder(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.IEEERemainder(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IEEERemainder (x As Double, y As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double IEEERemainder(double x, double y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="dc3c0-294">Um dividendo.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-294">A dividend.</span></span></param>
        <param name="y"><span data-ttu-id="dc3c0-295">Um divisor.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-295">A divisor.</span></span></param>
        <summary><span data-ttu-id="dc3c0-296">Retorna o resultado restante da divisão de um número especificado por outro número especificado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-296">Returns the remainder resulting from the division of a specified number by another specified number.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-297">Um número igual a <paramref name="x" /> - (<paramref name="y" /> Q), em que Q é o quociente de <paramref name="x" /> / <paramref name="y" /> arredondado para o inteiro mais próximo (se <paramref name="x" /> / <paramref name="y" /> ficar entre dois inteiros, o inteiro par será retornado).</span><span class="sxs-lookup"><span data-stu-id="dc3c0-297">A number equal to <paramref name="x" /> - (<paramref name="y" /> Q), where Q is the quotient of <paramref name="x" /> / <paramref name="y" /> rounded to the nearest integer (if <paramref name="x" /> / <paramref name="y" /> falls halfway between two integers, the even integer is returned).</span></span>  
  
 <span data-ttu-id="dc3c0-298">Se <paramref name="x" /> – (<paramref name="y" /> Q) for igual a zero, o valor +0 será retornado se <paramref name="x" /> for positivo ou -0 se <paramref name="x" /> for negativo.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-298">If <paramref name="x" /> - (<paramref name="y" /> Q) is zero, the value +0 is returned if <paramref name="x" /> is positive, or -0 if <paramref name="x" /> is negative.</span></span>  
  
 <span data-ttu-id="dc3c0-299">Se <paramref name="y" /> = 0, <see cref="F:System.Double.NaN" /> é retornado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-299">If <paramref name="y" /> = 0, <see cref="F:System.Double.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-300">Esta operação está em conformidade com a operação do remainder definida na seção 5.1 do ANSI/IEEE Std 754-1985; Padrão IEEE para aritmética de ponto flutuante binário; Institute of Electrical e Electronics Engineers, Inc; 1985.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-300">This operation complies with the remainder operation defined in Section 5.1 of ANSI/IEEE Std 754-1985; IEEE Standard for Binary Floating-Point Arithmetic; Institute of Electrical and Electronics Engineers, Inc; 1985.</span></span>  
  
 <span data-ttu-id="dc3c0-301">O <xref:System.Math.IEEERemainder%2A> método não é o mesmo que o operador de módulo.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-301">The <xref:System.Math.IEEERemainder%2A> method is not the same as the modulus operator.</span></span> <span data-ttu-id="dc3c0-302">Embora ambos retornam o resto após a divisão, as fórmulas que usam são diferentes.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-302">Although both return the remainder after division, the formulas they use are different.</span></span> <span data-ttu-id="dc3c0-303">A fórmula para o <xref:System.Math.IEEERemainder%2A> método é:</span><span class="sxs-lookup"><span data-stu-id="dc3c0-303">The formula for the <xref:System.Math.IEEERemainder%2A> method is:</span></span>  
  
```  
IEEERemainder = dividend - (divisor * Math.Round(dividend / divisor))  
```  
  
 <span data-ttu-id="dc3c0-304">Por outro lado, a fórmula para o operador de módulo é:</span><span class="sxs-lookup"><span data-stu-id="dc3c0-304">In contrast, the formula for the modulus operator is:</span></span>  
  
```  
Modulus = (Math.Abs(dividend) - (Math.Abs(divisor) *   
          (Math.Floor(Math.Abs(dividend) / Math.Abs(divisor))))) *   
          Math.Sign(dividend)  
```  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-305">O exemplo a seguir compara o restante retornado pelo <xref:System.Math.IEEERemainder%2A> método com o restante retornado pelo operador de divisão de módulo.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-305">The following example contrasts the remainder returned by the <xref:System.Math.IEEERemainder%2A> method with the remainder returned by the modulus division operator.</span></span>  
  
 [!code-csharp[System.Math.IEEERemainder#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.ieeeremainder/cs/ieeeremainder1.cs#1)]
 [!code-vb[System.Math.IEEERemainder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.ieeeremainder/vb/ieeeremainder1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Log">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="dc3c0-306">Retorna o logaritmo de um número especificado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-306">Returns the logarithm of a specified number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static double Log (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Log(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="dc3c0-307">O número cujo logaritmo deve ser encontrado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-307">The number whose logarithm is to be found.</span></span></param>
        <summary><span data-ttu-id="dc3c0-308">Retorna o logaritmo natural (de base <see langword="e" />) de um número especificado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-308">Returns the natural (base <see langword="e" />) logarithm of a specified number.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-309">Um dos valores na tabela a seguir.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-309">One of the values in the following table.</span></span>  
  
 <span data-ttu-id="dc3c0-310">Parâmetro <list type="table"><listheader><term><paramref name="d" /></span><span class="sxs-lookup"><span data-stu-id="dc3c0-310"><list type="table"><listheader><term><paramref name="d" /> parameter</span></span>  
  
 <span data-ttu-id="dc3c0-311"></term><description> Valor retornado</span><span class="sxs-lookup"><span data-stu-id="dc3c0-311"></term><description> Return value</span></span>  
  
 <span data-ttu-id="dc3c0-312"></description></listheader><item><term> Positivo</span><span class="sxs-lookup"><span data-stu-id="dc3c0-312"></description></listheader><item><term> Positive</span></span>  
  
 <span data-ttu-id="dc3c0-313"></term><description> O logaritmo natural de <paramref name="d" />; ou seja, ln <paramref name="d" /> ou log e <paramref name="d" /></description></item><item><term> Zero</span><span class="sxs-lookup"><span data-stu-id="dc3c0-313"></term><description> The natural logarithm of <paramref name="d" />; that is, ln <paramref name="d" />, or log e <paramref name="d" /></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="dc3c0-314"></term><description><see cref="F:System.Double.NegativeInfinity" /></description></item><item><term> Negativo</span><span class="sxs-lookup"><span data-stu-id="dc3c0-314"></term><description><see cref="F:System.Double.NegativeInfinity" /></description></item><item><term> Negative</span></span>  
  
 <span data-ttu-id="dc3c0-315"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> igual a <see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> igual a <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></span><span class="sxs-lookup"><span data-stu-id="dc3c0-315"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equal to <see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equal to <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-316">Parâmetro `d` é especificado como um número de base 10.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-316">Parameter `d` is specified as a base 10 number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-317">O exemplo a seguir ilustra o <xref:System.Math.Log%2A> método.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-317">The following example illustrates the <xref:System.Math.Log%2A> method.</span></span>  
  
 [!code-csharp[System.Math.Log_Overloads#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Log_Overloads/CS/log1.cs#2)]
 [!code-vb[System.Math.Log_Overloads#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Log_Overloads/VB/log1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Math.E" />
        <altmember cref="M:System.Math.Exp(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static double Log (double a, double newBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(float64 a, float64 newBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Log(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (a As Double, newBase As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log(double a, double newBase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
        <Parameter Name="newBase" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="dc3c0-318">O número cujo logaritmo deve ser encontrado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-318">The number whose logarithm is to be found.</span></span></param>
        <param name="newBase"><span data-ttu-id="dc3c0-319">A base do logaritmo.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-319">The base of the logarithm.</span></span></param>
        <summary><span data-ttu-id="dc3c0-320">Retorna o logaritmo de um número especificado em uma base especificada.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-320">Returns the logarithm of a specified number in a specified base.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-321">Um dos valores na tabela a seguir.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-321">One of the values in the following table.</span></span> <span data-ttu-id="dc3c0-322">(+Infinito indica <see cref="F:System.Double.PositiveInfinity" />, -Infinito indica <see cref="F:System.Double.NegativeInfinity" /> e NaN indica <see cref="F:System.Double.NaN" />.)</span><span class="sxs-lookup"><span data-stu-id="dc3c0-322">(+Infinity denotes <see cref="F:System.Double.PositiveInfinity" />, -Infinity denotes <see cref="F:System.Double.NegativeInfinity" />, and NaN denotes <see cref="F:System.Double.NaN" />.)</span></span>  
  
 <span data-ttu-id="dc3c0-323"><list type="table"><listheader><term><paramref name="a" /></term><description><paramref name="newBase" /></description><description> Valor retornado</span><span class="sxs-lookup"><span data-stu-id="dc3c0-323"><list type="table"><listheader><term><paramref name="a" /></term><description><paramref name="newBase" /></description><description> Return value</span></span>  
  
 <span data-ttu-id="dc3c0-324"></description></listheader><item><term><paramref name="a" />&gt; 0</span><span class="sxs-lookup"><span data-stu-id="dc3c0-324"></description></listheader><item><term><paramref name="a" />&gt; 0</span></span>  
  
 <span data-ttu-id="dc3c0-325"></term><description> (0 &lt;<paramref name="newBase" />&lt; 1) – ou – (<paramref name="newBase" />&gt; 1)</span><span class="sxs-lookup"><span data-stu-id="dc3c0-325"></term><description> (0 &lt;<paramref name="newBase" />&lt; 1) -or-(<paramref name="newBase" />&gt; 1)</span></span>  
  
 <span data-ttu-id="dc3c0-326"></description><description> lognewBase(a)</span><span class="sxs-lookup"><span data-stu-id="dc3c0-326"></description><description> lognewBase(a)</span></span>  
  
 <span data-ttu-id="dc3c0-327"></description></item><item><term><paramref name="a" />&lt; 0</span><span class="sxs-lookup"><span data-stu-id="dc3c0-327"></description></item><item><term><paramref name="a" />&lt; 0</span></span>  
  
 <span data-ttu-id="dc3c0-328"></term><description> (qualquer valor)</span><span class="sxs-lookup"><span data-stu-id="dc3c0-328"></term><description> (any value)</span></span>  
  
 <span data-ttu-id="dc3c0-329"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="dc3c0-329"></description><description> NaN</span></span>  
  
 <span data-ttu-id="dc3c0-330"></description></item><item><term> (qualquer valor)</span><span class="sxs-lookup"><span data-stu-id="dc3c0-330"></description></item><item><term> (any value)</span></span>  
  
 <span data-ttu-id="dc3c0-331"></term><description><paramref name="newBase" />&lt; 0</span><span class="sxs-lookup"><span data-stu-id="dc3c0-331"></term><description><paramref name="newBase" />&lt; 0</span></span>  
  
 <span data-ttu-id="dc3c0-332"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="dc3c0-332"></description><description> NaN</span></span>  
  
 <span data-ttu-id="dc3c0-333"></description></item><item><term><paramref name="a" /> != 1</span><span class="sxs-lookup"><span data-stu-id="dc3c0-333"></description></item><item><term><paramref name="a" /> != 1</span></span>  
  
 <span data-ttu-id="dc3c0-334"></term><description><paramref name="newBase" /> = 0</span><span class="sxs-lookup"><span data-stu-id="dc3c0-334"></term><description><paramref name="newBase" /> = 0</span></span>  
  
 <span data-ttu-id="dc3c0-335"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="dc3c0-335"></description><description> NaN</span></span>  
  
 <span data-ttu-id="dc3c0-336"></description></item><item><term><paramref name="a" /> != 1</span><span class="sxs-lookup"><span data-stu-id="dc3c0-336"></description></item><item><term><paramref name="a" /> != 1</span></span>  
  
 <span data-ttu-id="dc3c0-337"></term><description><paramref name="newBase" /> = +infinito</span><span class="sxs-lookup"><span data-stu-id="dc3c0-337"></term><description><paramref name="newBase" /> = +Infinity</span></span>  
  
 <span data-ttu-id="dc3c0-338"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="dc3c0-338"></description><description> NaN</span></span>  
  
 <span data-ttu-id="dc3c0-339"></description></item><item><term><paramref name="a" /> = NaN</span><span class="sxs-lookup"><span data-stu-id="dc3c0-339"></description></item><item><term><paramref name="a" /> = NaN</span></span>  
  
 <span data-ttu-id="dc3c0-340"></term><description> (qualquer valor)</span><span class="sxs-lookup"><span data-stu-id="dc3c0-340"></term><description> (any value)</span></span>  
  
 <span data-ttu-id="dc3c0-341"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="dc3c0-341"></description><description> NaN</span></span>  
  
 <span data-ttu-id="dc3c0-342"></description></item><item><term> (qualquer valor)</span><span class="sxs-lookup"><span data-stu-id="dc3c0-342"></description></item><item><term> (any value)</span></span>  
  
 <span data-ttu-id="dc3c0-343"></term><description><paramref name="newBase" /> = NaN</span><span class="sxs-lookup"><span data-stu-id="dc3c0-343"></term><description><paramref name="newBase" /> = NaN</span></span>  
  
 <span data-ttu-id="dc3c0-344"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="dc3c0-344"></description><description> NaN</span></span>  
  
 <span data-ttu-id="dc3c0-345"></description></item><item><term> (qualquer valor)</span><span class="sxs-lookup"><span data-stu-id="dc3c0-345"></description></item><item><term> (any value)</span></span>  
  
 <span data-ttu-id="dc3c0-346"></term><description><paramref name="newBase" /> = 1</span><span class="sxs-lookup"><span data-stu-id="dc3c0-346"></term><description><paramref name="newBase" /> = 1</span></span>  
  
 <span data-ttu-id="dc3c0-347"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="dc3c0-347"></description><description> NaN</span></span>  
  
 <span data-ttu-id="dc3c0-348"></description></item><item><term><paramref name="a" /> = 0</span><span class="sxs-lookup"><span data-stu-id="dc3c0-348"></description></item><item><term><paramref name="a" /> = 0</span></span>  
  
 <span data-ttu-id="dc3c0-349"></term><description> 0 &lt;<paramref name="newBase" />&lt; 1</span><span class="sxs-lookup"><span data-stu-id="dc3c0-349"></term><description> 0 &lt;<paramref name="newBase" />&lt; 1</span></span>  
  
 <span data-ttu-id="dc3c0-350"></description><description> +infinito</span><span class="sxs-lookup"><span data-stu-id="dc3c0-350"></description><description> +Infinity</span></span>  
  
 <span data-ttu-id="dc3c0-351"></description></item><item><term><paramref name="a" /> = 0</span><span class="sxs-lookup"><span data-stu-id="dc3c0-351"></description></item><item><term><paramref name="a" /> = 0</span></span>  
  
 <span data-ttu-id="dc3c0-352"></term><description><paramref name="newBase" />&gt; 1</span><span class="sxs-lookup"><span data-stu-id="dc3c0-352"></term><description><paramref name="newBase" />&gt; 1</span></span>  
  
 <span data-ttu-id="dc3c0-353"></description><description> -infinito</span><span class="sxs-lookup"><span data-stu-id="dc3c0-353"></description><description> -Infinity</span></span>  
  
 <span data-ttu-id="dc3c0-354"></description></item><item><term><paramref name="a" /> =  +infinito</span><span class="sxs-lookup"><span data-stu-id="dc3c0-354"></description></item><item><term><paramref name="a" /> =  +Infinity</span></span>  
  
 <span data-ttu-id="dc3c0-355"></term><description> 0 &lt;<paramref name="newBase" />&lt; 1</span><span class="sxs-lookup"><span data-stu-id="dc3c0-355"></term><description> 0 &lt;<paramref name="newBase" />&lt; 1</span></span>  
  
 <span data-ttu-id="dc3c0-356"></description><description> -infinito</span><span class="sxs-lookup"><span data-stu-id="dc3c0-356"></description><description> -Infinity</span></span>  
  
 <span data-ttu-id="dc3c0-357"></description></item><item><term><paramref name="a" /> =  +infinito</span><span class="sxs-lookup"><span data-stu-id="dc3c0-357"></description></item><item><term><paramref name="a" /> =  +Infinity</span></span>  
  
 <span data-ttu-id="dc3c0-358"></term><description><paramref name="newBase" />&gt; 1</span><span class="sxs-lookup"><span data-stu-id="dc3c0-358"></term><description><paramref name="newBase" />&gt; 1</span></span>  
  
 <span data-ttu-id="dc3c0-359"></description><description> +infinito</span><span class="sxs-lookup"><span data-stu-id="dc3c0-359"></description><description> +Infinity</span></span>  
  
 <span data-ttu-id="dc3c0-360"></description></item><item><term><paramref name="a" /> = 1</span><span class="sxs-lookup"><span data-stu-id="dc3c0-360"></description></item><item><term><paramref name="a" /> = 1</span></span>  
  
 <span data-ttu-id="dc3c0-361"></term><description><paramref name="newBase" /> = 0</span><span class="sxs-lookup"><span data-stu-id="dc3c0-361"></term><description><paramref name="newBase" /> = 0</span></span>  
  
 <span data-ttu-id="dc3c0-362"></description><description> 0</span><span class="sxs-lookup"><span data-stu-id="dc3c0-362"></description><description> 0</span></span>  
  
 <span data-ttu-id="dc3c0-363"></description></item><item><term><paramref name="a" /> = 1</span><span class="sxs-lookup"><span data-stu-id="dc3c0-363"></description></item><item><term><paramref name="a" /> = 1</span></span>  
  
 <span data-ttu-id="dc3c0-364"></term><description><paramref name="newBase" /> = +infinito</span><span class="sxs-lookup"><span data-stu-id="dc3c0-364"></term><description><paramref name="newBase" /> = +Infinity</span></span>  
  
 <span data-ttu-id="dc3c0-365"></description><description> 0</span><span class="sxs-lookup"><span data-stu-id="dc3c0-365"></description><description> 0</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-366">O exemplo a seguir usa <xref:System.Math.Log%2A> para avaliar determinadas identidades logarítmicas para valores selecionados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-366">The following example uses <xref:System.Math.Log%2A> to evaluate certain logarithmic identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.Log_Overloads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.Log_Overloads/CPP/loggen.cpp#1)]
 [!code-csharp[System.Math.Log_Overloads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Log_Overloads/CS/loggen.cs#1)]
 [!code-vb[System.Math.Log_Overloads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Log_Overloads/VB/loggen.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public static double Log10 (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log10(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Log10(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log10 (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log10(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="dc3c0-367">Um número cujo logaritmo deve ser localizado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-367">A number whose logarithm is to be found.</span></span></param>
        <summary><span data-ttu-id="dc3c0-368">Retorna o logaritmo de base 10 de um número especificado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-368">Returns the base 10 logarithm of a specified number.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-369">Um dos valores na tabela a seguir.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-369">One of the values in the following table.</span></span>  
  
 <span data-ttu-id="dc3c0-370">Parâmetro <list type="table"><listheader><term><paramref name="d" /></span><span class="sxs-lookup"><span data-stu-id="dc3c0-370"><list type="table"><listheader><term><paramref name="d" /> parameter</span></span>  
  
 <span data-ttu-id="dc3c0-371"></term><description> Valor retornado</span><span class="sxs-lookup"><span data-stu-id="dc3c0-371"></term><description> Return value</span></span>  
  
 <span data-ttu-id="dc3c0-372"></description></listheader><item><term> Positivo</span><span class="sxs-lookup"><span data-stu-id="dc3c0-372"></description></listheader><item><term> Positive</span></span>  
  
 <span data-ttu-id="dc3c0-373"></term><description> O log de base 10 de <paramref name="d" />; ou seja, log 10<paramref name="d" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-373"></term><description> The base 10 log of <paramref name="d" />; that is, log 10<paramref name="d" />.</span></span>  
  
 <span data-ttu-id="dc3c0-374"></description></item><item><term> Zero</span><span class="sxs-lookup"><span data-stu-id="dc3c0-374"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="dc3c0-375"></term><description><see cref="F:System.Double.NegativeInfinity" /></description></item><item><term> Negativo</span><span class="sxs-lookup"><span data-stu-id="dc3c0-375"></term><description><see cref="F:System.Double.NegativeInfinity" /></description></item><item><term> Negative</span></span>  
  
 <span data-ttu-id="dc3c0-376"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> igual a <see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> igual a <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></span><span class="sxs-lookup"><span data-stu-id="dc3c0-376"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equal to <see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equal to <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-377">Parâmetro `d` é especificado como um número de base 10.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-377">Parameter `d` is specified as a base 10 number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-378">O exemplo a seguir usa o <xref:System.Math.Log10%2A> método para retornar o logaritmo de base 10 para os valores selecionados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-378">The following example uses the <xref:System.Math.Log10%2A> method to return the base 10 logarithm for selected values.</span></span>  
  
 [!code-csharp[System.Math.Log10#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Log10/CS/log10.cs#1)]
 [!code-vb[System.Math.Log10#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Log10/VB/log10.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Max">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="dc3c0-379">Retorna o maior dos dois números especificados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-379">Returns the larger of two specified numbers.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static byte Max (byte val1, byte val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 Max(unsigned int8 val1, unsigned int8 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Byte,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Byte, val2 As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte Max(System::Byte val1, System::Byte val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Byte" />
        <Parameter Name="val2" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="dc3c0-380">O primeiro entre dois inteiros sem sinal de 8 bits a serem comparados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-380">The first of two 8-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="dc3c0-381">O segundo entre dois inteiros sem sinal de 8 bits a serem comparados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-381">The second of two 8-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="dc3c0-382">Retorna o maior entre dois inteiros sem sinal de 8 bits.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-382">Returns the larger of two 8-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-383">Parâmetro <paramref name="val1" /> ou <paramref name="val2" />, o que for maior.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-383">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-384">O exemplo a seguir demonstra como usar o método <xref:System.Math.Max%2A> para retornar e exibir a maior de duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-384">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static decimal Max (decimal val1, decimal val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Max(valuetype System.Decimal val1, valuetype System.Decimal val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Decimal,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Decimal, val2 As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Max(System::Decimal val1, System::Decimal val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Decimal" />
        <Parameter Name="val2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="dc3c0-385">O primeiro dos dois números decimais a ser comparado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-385">The first of two decimal numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="dc3c0-386">O segundo dos dois números decimais a serem comparados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-386">The second of two decimal numbers to compare.</span></span></param>
        <summary><span data-ttu-id="dc3c0-387">Retorna o maior dos dois números decimais.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-387">Returns the larger of two decimal numbers.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-388">Parâmetro <paramref name="val1" /> ou <paramref name="val2" />, o que for maior.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-388">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-389">O exemplo a seguir demonstra como usar o método <xref:System.Math.Max%2A> para retornar e exibir a maior de duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-389">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static double Max (double val1, double val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Max(float64 val1, float64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Double, val2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Max(double val1, double val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Double" />
        <Parameter Name="val2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="dc3c0-390">O primeiro dos dois números de ponto flutuante de precisão dupla a ser comparado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-390">The first of two double-precision floating-point numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="dc3c0-391">O segundo dos dois números de ponto flutuante de precisão dupla a ser comparado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-391">The second of two double-precision floating-point numbers to compare.</span></span></param>
        <summary><span data-ttu-id="dc3c0-392">Retorna o maior dos dois números de ponto flutuante de precisão dupla.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-392">Returns the larger of two double-precision floating-point numbers.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-393">Parâmetro <paramref name="val1" /> ou <paramref name="val2" />, o que for maior.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-393">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span> <span data-ttu-id="dc3c0-394">Se <paramref name="val1" />, <paramref name="val2" /> ou tanto <paramref name="val1" /> quanto <paramref name="val2" /> forem iguais a <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> será retornado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-394">If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-395">O exemplo a seguir demonstra como usar o método <xref:System.Math.Max%2A> para retornar e exibir a maior de duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-395">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static short Max (short val1, short val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Max(int16 val1, int16 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Int16,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Short, val2 As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Max(short val1, short val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int16" />
        <Parameter Name="val2" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="dc3c0-396">O primeiro dos dois inteiros com sinal de 16 bits a ser comparado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-396">The first of two 16-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="dc3c0-397">O segundo de dois inteiros com sinal de 16 bits a serem comparados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-397">The second of two 16-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="dc3c0-398">Retorna o maior dos dois inteiros com sinal de 16 bits.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-398">Returns the larger of two 16-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-399">Parâmetro <paramref name="val1" /> ou <paramref name="val2" />, o que for maior.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-399">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-400">O exemplo a seguir demonstra como usar o método <xref:System.Math.Max%2A> para retornar e exibir a maior de duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-400">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static int Max (int val1, int val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Max(int32 val1, int32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Integer, val2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Max(int val1, int val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int32" />
        <Parameter Name="val2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="dc3c0-401">O primeiro dos dois inteiros com sinal de 32 bits a ser comparado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-401">The first of two 32-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="dc3c0-402">O segundo de dois inteiros com sinal de 32 bits a serem comparados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-402">The second of two 32-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="dc3c0-403">Retorna o maior dos dois inteiros com sinal de 32 bits.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-403">Returns the larger of two 32-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-404">Parâmetro <paramref name="val1" /> ou <paramref name="val2" />, o que for maior.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-404">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-405">O exemplo a seguir demonstra como usar o método <xref:System.Math.Max%2A> para retornar e exibir a maior de duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-405">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static long Max (long val1, long val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Max(int64 val1, int64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Long, val2 As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Max(long val1, long val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int64" />
        <Parameter Name="val2" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="dc3c0-406">O primeiro dos dois inteiros com sinal de 64 bits a ser comparado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-406">The first of two 64-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="dc3c0-407">O segundo de dois inteiros com sinal de 64 bits a serem comparados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-407">The second of two 64-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="dc3c0-408">Retorna o maior dos dois inteiros com sinal de 64 bits.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-408">Returns the larger of two 64-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-409">Parâmetro <paramref name="val1" /> ou <paramref name="val2" />, o que for maior.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-409">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-410">O exemplo a seguir demonstra como usar o método <xref:System.Math.Max%2A> para retornar e exibir a maior de duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-410">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static sbyte Max (sbyte val1, sbyte val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Max(int8 val1, int8 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.SByte,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As SByte, val2 As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Max(System::SByte val1, System::SByte val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.SByte" />
        <Parameter Name="val2" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="dc3c0-411">O primeiro dos dois inteiros com sinal de 8 bits a serem comparados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-411">The first of two 8-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="dc3c0-412">O segundo dos dois inteiros com sinal de 8 bits a serem comparados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-412">The second of two 8-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="dc3c0-413">Retorna o maior dos dois inteiros com sinal de 8 bits.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-413">Returns the larger of two 8-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-414">Parâmetro <paramref name="val1" /> ou <paramref name="val2" />, o que for maior.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-414">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-415">O exemplo a seguir demonstra como usar o método <xref:System.Math.Max%2A> para retornar e exibir a maior de duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-415">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static float Max (float val1, float val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max(float32 val1, float32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Single, val2 As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Max(float val1, float val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Single" />
        <Parameter Name="val2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="dc3c0-416">O primeiro dos dois números de ponto flutuante de precisão simples a ser comparado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-416">The first of two single-precision floating-point numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="dc3c0-417">O segundo dos dois números de ponto flutuante de precisão simples a ser comparado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-417">The second of two single-precision floating-point numbers to compare.</span></span></param>
        <summary><span data-ttu-id="dc3c0-418">Retorna o maior dos dois números de ponto flutuante de precisão simples.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-418">Returns the larger of two single-precision floating-point numbers.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-419">Parâmetro <paramref name="val1" /> ou <paramref name="val2" />, o que for maior.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-419">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span> <span data-ttu-id="dc3c0-420">Se <paramref name="val1" />, <paramref name="val2" /> ou ambos <paramref name="val1" /> e <paramref name="val2" /> forem igual a <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> será retornado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-420">If <paramref name="val1" />, or <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-421">O exemplo a seguir demonstra como usar o método <xref:System.Math.Max%2A> para retornar e exibir a maior de duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-421">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static ushort Max (ushort val1, ushort val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 Max(unsigned int16 val1, unsigned int16 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.UInt16,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As UShort, val2 As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 Max(System::UInt16 val1, System::UInt16 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt16" />
        <Parameter Name="val2" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="dc3c0-422">O primeiro dos dois inteiros sem sinal de 16 bits para comparar.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-422">The first of two 16-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="dc3c0-423">O segundo dos dois inteiros sem sinal de 16 bits para comparar.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-423">The second of two 16-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="dc3c0-424">Retorna o maior de dois inteiros sem sinal de 16 bits.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-424">Returns the larger of two 16-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-425">Parâmetro <paramref name="val1" /> ou <paramref name="val2" />, o que for maior.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-425">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-426">O exemplo a seguir demonstra como usar o método <xref:System.Math.Max%2A> para retornar e exibir a maior de duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-426">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static uint Max (uint val1, uint val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Max(unsigned int32 val1, unsigned int32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As UInteger, val2 As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 Max(System::UInt32 val1, System::UInt32 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt32" />
        <Parameter Name="val2" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="dc3c0-427">O primeiro de dois inteiros sem sinal de 32 bits a serem comparados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-427">The first of two 32-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="dc3c0-428">O segundo de dois inteiros sem sinal de 32 bits a serem comparados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-428">The second of two 32-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="dc3c0-429">Retorna o maior de dois inteiros sem sinal de 32 bits.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-429">Returns the larger of two 32-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-430">Parâmetro <paramref name="val1" /> ou <paramref name="val2" />, o que for maior.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-430">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-431">O exemplo a seguir demonstra como usar o método <xref:System.Math.Max%2A> para retornar e exibir a maior de duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-431">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static ulong Max (ulong val1, ulong val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Max(unsigned int64 val1, unsigned int64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.UInt64,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As ULong, val2 As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 Max(System::UInt64 val1, System::UInt64 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt64" />
        <Parameter Name="val2" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="dc3c0-432">O primeiro de dois inteiros sem sinal de 64 bits a serem comparados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-432">The first of two 64-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="dc3c0-433">O segundo de dois inteiros sem sinal de 64 bits a serem comparados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-433">The second of two 64-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="dc3c0-434">Retorna o maior entre dois inteiros sem sinal de 64 bits.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-434">Returns the larger of two 64-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-435">Parâmetro <paramref name="val1" /> ou <paramref name="val2" />, o que for maior.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-435">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-436">O exemplo a seguir demonstra como usar o método <xref:System.Math.Max%2A> para retornar e exibir a maior de duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-436">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Min">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="dc3c0-437">Retorna o menor de dois números.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-437">Returns the smaller of two numbers.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static byte Min (byte val1, byte val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 Min(unsigned int8 val1, unsigned int8 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Byte,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Byte, val2 As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte Min(System::Byte val1, System::Byte val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Byte" />
        <Parameter Name="val2" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="dc3c0-438">O primeiro entre dois inteiros sem sinal de 8 bits a serem comparados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-438">The first of two 8-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="dc3c0-439">O segundo entre dois inteiros sem sinal de 8 bits a serem comparados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-439">The second of two 8-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="dc3c0-440">Retorna o menor dos dois inteiros sem sinal de 8 bits.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-440">Returns the smaller of two 8-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-441">Parâmetro <paramref name="val1" /> ou <paramref name="val2" />, o que for menor.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-441">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-442">O exemplo a seguir demonstra como usar o método <xref:System.Math.Min%2A> para retornar e exibir a menor de duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-442">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static decimal Min (decimal val1, decimal val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Min(valuetype System.Decimal val1, valuetype System.Decimal val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Decimal,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Decimal, val2 As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Min(System::Decimal val1, System::Decimal val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Decimal" />
        <Parameter Name="val2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="dc3c0-443">O primeiro dos dois números decimais a ser comparado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-443">The first of two decimal numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="dc3c0-444">O segundo dos dois números decimais a serem comparados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-444">The second of two decimal numbers to compare.</span></span></param>
        <summary><span data-ttu-id="dc3c0-445">Retorna o menor dos dois números decimais.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-445">Returns the smaller of two decimal numbers.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-446">Parâmetro <paramref name="val1" /> ou <paramref name="val2" />, o que for menor.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-446">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-447">O exemplo a seguir demonstra como usar o método <xref:System.Math.Min%2A> para retornar e exibir a menor de duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-447">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static double Min (double val1, double val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Min(float64 val1, float64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Double, val2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Min(double val1, double val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Double" />
        <Parameter Name="val2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="dc3c0-448">O primeiro dos dois números de ponto flutuante de precisão dupla a ser comparado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-448">The first of two double-precision floating-point numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="dc3c0-449">O segundo dos dois números de ponto flutuante de precisão dupla a ser comparado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-449">The second of two double-precision floating-point numbers to compare.</span></span></param>
        <summary><span data-ttu-id="dc3c0-450">Retorna o menor dos dois números de ponto flutuante de precisão dupla.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-450">Returns the smaller of two double-precision floating-point numbers.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-451">Parâmetro <paramref name="val1" /> ou <paramref name="val2" />, o que for menor.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-451">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span> <span data-ttu-id="dc3c0-452">Se <paramref name="val1" />, <paramref name="val2" /> ou tanto <paramref name="val1" /> quanto <paramref name="val2" /> forem iguais a <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> será retornado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-452">If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-453">O exemplo a seguir demonstra como usar o método <xref:System.Math.Min%2A> para retornar e exibir a menor de duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-453">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static short Min (short val1, short val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Min(int16 val1, int16 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Int16,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Short, val2 As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Min(short val1, short val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int16" />
        <Parameter Name="val2" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="dc3c0-454">O primeiro dos dois inteiros com sinal de 16 bits a ser comparado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-454">The first of two 16-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="dc3c0-455">O segundo de dois inteiros com sinal de 16 bits a serem comparados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-455">The second of two 16-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="dc3c0-456">Retorna o menor de dois inteiros com sinal de 16 bits.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-456">Returns the smaller of two 16-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-457">Parâmetro <paramref name="val1" /> ou <paramref name="val2" />, o que for menor.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-457">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-458">O exemplo a seguir demonstra como usar o método <xref:System.Math.Min%2A> para retornar e exibir a menor de duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-458">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static int Min (int val1, int val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Min(int32 val1, int32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Integer, val2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Min(int val1, int val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int32" />
        <Parameter Name="val2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="dc3c0-459">O primeiro dos dois inteiros com sinal de 32 bits a ser comparado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-459">The first of two 32-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="dc3c0-460">O segundo de dois inteiros com sinal de 32 bits a serem comparados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-460">The second of two 32-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="dc3c0-461">Retorna o menor de dois inteiros com sinal de 32 bits.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-461">Returns the smaller of two 32-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-462">Parâmetro <paramref name="val1" /> ou <paramref name="val2" />, o que for menor.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-462">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-463">O exemplo a seguir demonstra como usar o método <xref:System.Math.Min%2A> para retornar e exibir a menor de duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-463">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static long Min (long val1, long val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Min(int64 val1, int64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Long, val2 As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Min(long val1, long val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int64" />
        <Parameter Name="val2" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="dc3c0-464">O primeiro dos dois inteiros com sinal de 64 bits a ser comparado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-464">The first of two 64-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="dc3c0-465">O segundo de dois inteiros com sinal de 64 bits a serem comparados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-465">The second of two 64-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="dc3c0-466">Retorna o menor de dois inteiros com sinal de 64 bits.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-466">Returns the smaller of two 64-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-467">Parâmetro <paramref name="val1" /> ou <paramref name="val2" />, o que for menor.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-467">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-468">O exemplo a seguir demonstra como usar o método <xref:System.Math.Min%2A> para retornar e exibir a menor de duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-468">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static sbyte Min (sbyte val1, sbyte val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Min(int8 val1, int8 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.SByte,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As SByte, val2 As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Min(System::SByte val1, System::SByte val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.SByte" />
        <Parameter Name="val2" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="dc3c0-469">O primeiro dos dois inteiros com sinal de 8 bits a serem comparados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-469">The first of two 8-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="dc3c0-470">O segundo dos dois inteiros com sinal de 8 bits a serem comparados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-470">The second of two 8-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="dc3c0-471">Retorna o menor de dois inteiros com sinal de 8 bits.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-471">Returns the smaller of two 8-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-472">Parâmetro <paramref name="val1" /> ou <paramref name="val2" />, o que for menor.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-472">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-473">O exemplo a seguir demonstra como usar o método <xref:System.Math.Min%2A> para retornar e exibir a menor de duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-473">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static float Min (float val1, float val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min(float32 val1, float32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Single, val2 As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Min(float val1, float val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Single" />
        <Parameter Name="val2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="dc3c0-474">O primeiro dos dois números de ponto flutuante de precisão simples a ser comparado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-474">The first of two single-precision floating-point numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="dc3c0-475">O segundo dos dois números de ponto flutuante de precisão simples a ser comparado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-475">The second of two single-precision floating-point numbers to compare.</span></span></param>
        <summary><span data-ttu-id="dc3c0-476">Retorna o menor de dois números de ponto flutuante de precisão simples.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-476">Returns the smaller of two single-precision floating-point numbers.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-477">Parâmetro <paramref name="val1" /> ou <paramref name="val2" />, o que for menor.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-477">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span> <span data-ttu-id="dc3c0-478">Se <paramref name="val1" />, <paramref name="val2" /> ou tanto <paramref name="val1" /> quanto <paramref name="val2" /> forem iguais a <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> será retornado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-478">If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-479">O exemplo a seguir demonstra como usar o método <xref:System.Math.Min%2A> para retornar e exibir a menor de duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-479">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static ushort Min (ushort val1, ushort val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 Min(unsigned int16 val1, unsigned int16 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.UInt16,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As UShort, val2 As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 Min(System::UInt16 val1, System::UInt16 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt16" />
        <Parameter Name="val2" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="dc3c0-480">O primeiro dos dois inteiros sem sinal de 16 bits para comparar.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-480">The first of two 16-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="dc3c0-481">O segundo dos dois inteiros sem sinal de 16 bits para comparar.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-481">The second of two 16-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="dc3c0-482">Retorna o menor dos dois inteiros sem sinal de 16 bits.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-482">Returns the smaller of two 16-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-483">Parâmetro <paramref name="val1" /> ou <paramref name="val2" />, o que for menor.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-483">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-484">O exemplo a seguir demonstra como usar o método <xref:System.Math.Min%2A> para retornar e exibir a menor de duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-484">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static uint Min (uint val1, uint val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Min(unsigned int32 val1, unsigned int32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As UInteger, val2 As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 Min(System::UInt32 val1, System::UInt32 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt32" />
        <Parameter Name="val2" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="dc3c0-485">O primeiro de dois inteiros sem sinal de 32 bits a serem comparados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-485">The first of two 32-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="dc3c0-486">O segundo de dois inteiros sem sinal de 32 bits a serem comparados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-486">The second of two 32-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="dc3c0-487">Retorna o menor de dois inteiros sem sinal de 32 bits.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-487">Returns the smaller of two 32-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-488">Parâmetro <paramref name="val1" /> ou <paramref name="val2" />, o que for menor.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-488">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-489">O exemplo a seguir demonstra como usar o método <xref:System.Math.Min%2A> para retornar e exibir a menor de duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-489">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static ulong Min (ulong val1, ulong val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Min(unsigned int64 val1, unsigned int64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.UInt64,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As ULong, val2 As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 Min(System::UInt64 val1, System::UInt64 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt64" />
        <Parameter Name="val2" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="dc3c0-490">O primeiro de dois inteiros sem sinal de 64 bits a serem comparados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-490">The first of two 64-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="dc3c0-491">O segundo de dois inteiros sem sinal de 64 bits a serem comparados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-491">The second of two 64-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="dc3c0-492">Retorna o menor de dois inteiros sem sinal de 64 bits.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-492">Returns the smaller of two 64-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-493">Parâmetro <paramref name="val1" /> ou <paramref name="val2" />, o que for menor.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-493">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-494">O exemplo a seguir demonstra como usar o método <xref:System.Math.Min%2A> para retornar e exibir a menor de duas variáveis.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-494">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PI">
      <MemberSignature Language="C#" Value="public const double PI = 3.14159265358979;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 PI = (3.14159265358979)" />
      <MemberSignature Language="DocId" Value="F:System.Math.PI" />
      <MemberSignature Language="VB.NET" Value="Public Const PI As Double  = 3.14159265358979" />
      <MemberSignature Language="C++ CLI" Value="public: double PI = 3.14159265358979;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>3.14159265358979</MemberValue>
      <Docs>
        <summary><span data-ttu-id="dc3c0-495">Representa a razão entre a circunferência de um círculo e seu diâmetro, especificada pela constante π.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-495">Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-496">O valor desse campo é 3.14159265358979323846.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-496">The value of this field is 3.14159265358979323846.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-497">O exemplo a seguir usa <xref:System.Math.PI> para auxiliar na computação dos ângulos internas de um determinado Trapézio.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-497">The following example uses <xref:System.Math.PI> to assist in the computation of the inner angles of a given trapezoid.</span></span>  
  
 [!code-cpp[MathSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MathSample/CPP/mathsample.cpp#1)]
 [!code-csharp[MathSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MathSample/CS/mathsample.cs#1)]
 [!code-vb[MathSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MathSample/VB/mathsample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public static double Pow (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Pow(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Pow(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Pow (x As Double, y As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Pow(double x, double y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="dc3c0-498">Um número de ponto flutuante de precisão dupla a ser elevado a uma potência.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-498">A double-precision floating-point number to be raised to a power.</span></span></param>
        <param name="y"><span data-ttu-id="dc3c0-499">Um número de ponto flutuante de precisão dupla que especifica uma potência.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-499">A double-precision floating-point number that specifies a power.</span></span></param>
        <summary><span data-ttu-id="dc3c0-500">Retorna um número especificado elevado à potência especificada.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-500">Returns a specified number raised to the specified power.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-501">O número <paramref name="x" /> elevado à potência <paramref name="y" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-501">The number <paramref name="x" /> raised to the power <paramref name="y" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-502">A tabela a seguir indica o valor de retorno quando vários valores ou intervalos de valores são especificados para o `x` e `y` parâmetros.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-502">The following table indicates the return value when various values or ranges of values are specified for the `x` and `y` parameters.</span></span> <span data-ttu-id="dc3c0-503">Para obter mais informações, consulte <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> e <xref:System.Double.NaN?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-503">For more information, see <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, and <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="dc3c0-504">Parâmetros</span><span class="sxs-lookup"><span data-stu-id="dc3c0-504">Parameters</span></span>|<span data-ttu-id="dc3c0-505">Valor retornado</span><span class="sxs-lookup"><span data-stu-id="dc3c0-505">Return value</span></span>|  
|----------------|------------------|  
|<span data-ttu-id="dc3c0-506">`x` ou `y`  =  `NaN`.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-506">`x` or `y` = `NaN`.</span></span>|`NaN`|  
|<span data-ttu-id="dc3c0-507">`x` = Qualquer valor exceto `NaN`; `y` = 0.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-507">`x` = Any value except `NaN`; `y` = 0.</span></span>|<span data-ttu-id="dc3c0-508">1</span><span class="sxs-lookup"><span data-stu-id="dc3c0-508">1</span></span>|  
|<span data-ttu-id="dc3c0-509">`x` = `NegativeInfinity`; `y` < 0.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-509">`x` = `NegativeInfinity`; `y` < 0.</span></span>|<span data-ttu-id="dc3c0-510">0</span><span class="sxs-lookup"><span data-stu-id="dc3c0-510">0</span></span>|  
|<span data-ttu-id="dc3c0-511">`x` = `NegativeInfinity`; `y` é um inteiro ímpar.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-511">`x` = `NegativeInfinity`; `y` is a positive odd integer.</span></span>|`NegativeInfinity`|  
|<span data-ttu-id="dc3c0-512">`x` = `NegativeInfinity`; `y` é positivo, mas não for um inteiro ímpar.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-512">`x` = `NegativeInfinity`; `y` is positive but not an odd integer.</span></span>|`PositiveInfinity`|  
|<span data-ttu-id="dc3c0-513">`x` < 0, mas não `NegativeInfinity`; `y` não é um inteiro, `NegativeInfinity`, ou `PositiveInfinity`.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-513">`x` < 0 but not `NegativeInfinity`; `y` is not an integer, `NegativeInfinity`, or `PositiveInfinity`.</span></span>|`NaN`|  
|<span data-ttu-id="dc3c0-514">`x` = -1; `y`  =  `NegativeInfinity` ou `PositiveInfinity`.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-514">`x` = -1; `y` = `NegativeInfinity` or `PositiveInfinity`.</span></span>|`NaN`|  
|<span data-ttu-id="dc3c0-515">-1 < `x` < 1; `y` = `NegativeInfinity`.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-515">-1 < `x` < 1; `y` = `NegativeInfinity`.</span></span>|`PositiveInfinity`|  
|<span data-ttu-id="dc3c0-516">-1 < `x` < 1; `y` = `PositiveInfinity`.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-516">-1 < `x` < 1; `y` = `PositiveInfinity`.</span></span>|<span data-ttu-id="dc3c0-517">0</span><span class="sxs-lookup"><span data-stu-id="dc3c0-517">0</span></span>|  
|<span data-ttu-id="dc3c0-518">`x` < -1 ou `x` > 1. `y` = `NegativeInfinity`.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-518">`x` < -1 or `x` > 1; `y` = `NegativeInfinity`.</span></span>|<span data-ttu-id="dc3c0-519">0</span><span class="sxs-lookup"><span data-stu-id="dc3c0-519">0</span></span>|  
|<span data-ttu-id="dc3c0-520">`x` < -1 ou `x` > 1. `y` = `PositiveInfinity`.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-520">`x` < -1 or `x` > 1; `y` = `PositiveInfinity`.</span></span>|`PositiveInfinity`|  
|<span data-ttu-id="dc3c0-521">`x` = 0; `y` < 0.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-521">`x` = 0; `y` < 0.</span></span>|`PositiveInfinity`|  
|<span data-ttu-id="dc3c0-522">`x` = 0; `y` > 0.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-522">`x` = 0; `y` > 0.</span></span>|<span data-ttu-id="dc3c0-523">0</span><span class="sxs-lookup"><span data-stu-id="dc3c0-523">0</span></span>|  
|<span data-ttu-id="dc3c0-524">`x` = 1; `y` for qualquer valor exceto `NaN`.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-524">`x` = 1; `y` is any value except `NaN`.</span></span>|<span data-ttu-id="dc3c0-525">1</span><span class="sxs-lookup"><span data-stu-id="dc3c0-525">1</span></span>|  
|<span data-ttu-id="dc3c0-526">`x` = `PositiveInfinity`; `y` < 0.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-526">`x` = `PositiveInfinity`; `y` < 0.</span></span>|<span data-ttu-id="dc3c0-527">0</span><span class="sxs-lookup"><span data-stu-id="dc3c0-527">0</span></span>|  
|<span data-ttu-id="dc3c0-528">`x` = `PositiveInfinity`; `y` > 0.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-528">`x` = `PositiveInfinity`; `y` > 0.</span></span>|`PositiveInfinity`|  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-529">O exemplo a seguir usa o <xref:System.Math.Pow%2A> método para calcular o valor resultante de gerar 2 a uma potência variando de 0 a 32.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-529">The following example uses the <xref:System.Math.Pow%2A> method to calculate the value that results from raising 2 to a power ranging from 0 to 32.</span></span>  
  
 [!code-csharp[System.Math.Pow#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.pow/cs/pow1.cs#1)]
 [!code-vb[System.Math.Pow#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.pow/vb/pow1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Sqrt(System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Round">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="dc3c0-530">Arredonda um valor para o inteiro mais próximo ou para o número especificado de casas decimais.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-530">Rounds a value to the nearest integer or to the specified number of fractional digits.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-531">Nesta seção:</span><span class="sxs-lookup"><span data-stu-id="dc3c0-531">In this section:</span></span>  
  
 <span data-ttu-id="dc3c0-532">[Sintaxe de método sobrecarregado](#Syntax) </span><span class="sxs-lookup"><span data-stu-id="dc3c0-532">[Overloaded method syntax](#Syntax) </span></span>  
 <span data-ttu-id="dc3c0-533">[Parâmetros](#Params) </span><span class="sxs-lookup"><span data-stu-id="dc3c0-533">[Parameters](#Params) </span></span>  
 <span data-ttu-id="dc3c0-534">[Valor de retorno](#Returns) </span><span class="sxs-lookup"><span data-stu-id="dc3c0-534">[Return value](#Returns) </span></span>  
 <span data-ttu-id="dc3c0-535">[Exceções](#Exceptions) </span><span class="sxs-lookup"><span data-stu-id="dc3c0-535">[Exceptions](#Exceptions) </span></span>  
 <span data-ttu-id="dc3c0-536">[Qual método chamar?](#Tasks) </span><span class="sxs-lookup"><span data-stu-id="dc3c0-536">[Which method do I call?](#Tasks) </span></span>  
 <span data-ttu-id="dc3c0-537">[Valores de ponto médio e convenções de arredondamento](#Midpoint) </span><span class="sxs-lookup"><span data-stu-id="dc3c0-537">[Midpoint values and rounding conventions](#Midpoint) </span></span>  
 <span data-ttu-id="dc3c0-538">[Arredondamento e precisão](#Precision) </span><span class="sxs-lookup"><span data-stu-id="dc3c0-538">[Rounding and precision](#Precision) </span></span>  
 <span data-ttu-id="dc3c0-539">[Valores de ponto flutuante de arredondamento e precisão simples](#Single) </span><span class="sxs-lookup"><span data-stu-id="dc3c0-539">[Rounding and single-precision floating-point values](#Single) </span></span>  
 <span data-ttu-id="dc3c0-540">Exemplos:</span><span class="sxs-lookup"><span data-stu-id="dc3c0-540">Examples:</span></span>   
 [<span data-ttu-id="dc3c0-541">Math.Round(Decimal)</span><span class="sxs-lookup"><span data-stu-id="dc3c0-541">Math.Round(Decimal)</span></span>](#Round1_Example)  
 [<span data-ttu-id="dc3c0-542">Math.Round(Double)</span><span class="sxs-lookup"><span data-stu-id="dc3c0-542">Math.Round(Double)</span></span>](#Round2_Example)  
 [<span data-ttu-id="dc3c0-543">Math.Round(Decimal, Int32)</span><span class="sxs-lookup"><span data-stu-id="dc3c0-543">Math.Round(Decimal, Int32)</span></span>](#Round3_Example)  
 [<span data-ttu-id="dc3c0-544">Math.Round(Decimal, MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="dc3c0-544">Math.Round(Decimal, MidpointRounding)</span></span>](#Round4_Example)  
 [<span data-ttu-id="dc3c0-545">Math (Double, Int32)</span><span class="sxs-lookup"><span data-stu-id="dc3c0-545">Math.Round(Double, Int32)</span></span>](#Round5_Example)  
 [<span data-ttu-id="dc3c0-546">Math MidpointRounding (Double)</span><span class="sxs-lookup"><span data-stu-id="dc3c0-546">Math.Round(Double, MidpointRounding)</span></span>](#Round6_Example)  
 [<span data-ttu-id="dc3c0-547">Math.Round(Decimal, Int32, MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="dc3c0-547">Math.Round(Decimal, Int32, MidpointRounding)</span></span>](#Round7_Example)  
 [<span data-ttu-id="dc3c0-548">Math (Double, Int32, MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="dc3c0-548">Math.Round(Double, Int32, MidpointRounding)</span></span>](#Round8_Example)  
[<span data-ttu-id="dc3c0-549">Informações de versão</span><span class="sxs-lookup"><span data-stu-id="dc3c0-549">Version information</span></span>](#Round_Versions)  
  
<a name="Syntax"></a>   
## <a name="overloaded-method-syntax"></a><span data-ttu-id="dc3c0-550">Sintaxe de método sobrecarregada</span><span class="sxs-lookup"><span data-stu-id="dc3c0-550">Overloaded method syntax</span></span>  
 <span data-ttu-id="dc3c0-551">Para obter orientação adicional sobre como escolher uma sobrecarga, consulte [qual método é chamada?](#Tasks)</span><span class="sxs-lookup"><span data-stu-id="dc3c0-551">For additional guidance on choosing an overload, see [Which method do I call?](#Tasks)</span></span>  
  
 <span data-ttu-id="dc3c0-552">`Decimal Math.Round(Decimal``d``)`</span><span class="sxs-lookup"><span data-stu-id="dc3c0-552">`Decimal Math.Round(Decimal` `d` `)`</span></span>  
 <span data-ttu-id="dc3c0-553">Arredonda um valor decimal para o inteiro mais próximo e Arredonda valores de ponto médio para o número par mais próximo ([exemplo](#Round1_Example)).</span><span class="sxs-lookup"><span data-stu-id="dc3c0-553">Rounds a decimal value to the nearest integer, and rounds midpoint values to the nearest even number ([example](#Round1_Example)).</span></span>  
  
 <span data-ttu-id="dc3c0-554">`Double Math.Round(Double``a``)`</span><span class="sxs-lookup"><span data-stu-id="dc3c0-554">`Double Math.Round(Double` `a` `)`</span></span>  
 <span data-ttu-id="dc3c0-555">Arredonda um valor de ponto flutuante de precisão dupla para o inteiro mais próximo e Arredonda valores de ponto médio para o número par mais próximo ([exemplo](#Round2_Example)).</span><span class="sxs-lookup"><span data-stu-id="dc3c0-555">Rounds a double-precision floating-point value to the nearest integer, and rounds midpoint values to the nearest even number ([example](#Round2_Example)).</span></span>  
  
 <span data-ttu-id="dc3c0-556">`Decimal Math.Round(Decimal` `d` `, Int32`  `decimals` `)`</span><span class="sxs-lookup"><span data-stu-id="dc3c0-556">`Decimal Math.Round(Decimal` `d` `, Int32`  `decimals` `)`</span></span>  
 <span data-ttu-id="dc3c0-557">Arredonda um valor decimal para um número especificado de dígitos fracionários e Arredonda valores de ponto médio para o número par mais próximo ([exemplo](#Round3_Example)).</span><span class="sxs-lookup"><span data-stu-id="dc3c0-557">Rounds a decimal value to a specified number of fractional digits, and rounds midpoint values to the nearest even number ([example](#Round3_Example)).</span></span>  
  
 <span data-ttu-id="dc3c0-558">`Double Math.Round(Double` `value` `, Int32`  `digits` `)`</span><span class="sxs-lookup"><span data-stu-id="dc3c0-558">`Double Math.Round(Double` `value` `, Int32`  `digits` `)`</span></span>  
 <span data-ttu-id="dc3c0-559">Arredonda um valor de ponto flutuante de precisão dupla em um número especificado de dígitos fracionários e Arredonda valores de ponto médio para o número par mais próximo ([exemplo](#Round4_Example)).</span><span class="sxs-lookup"><span data-stu-id="dc3c0-559">Rounds a double-precision floating-point value to a specified number of fractional digits, and rounds midpoint values to the nearest even number ([example](#Round4_Example)).</span></span>  
  
 <span data-ttu-id="dc3c0-560">`Decimal Math.Round(Decimal` `d` `, MidpointRounding`  `mode` `)`</span><span class="sxs-lookup"><span data-stu-id="dc3c0-560">`Decimal Math.Round(Decimal` `d` `, MidpointRounding`  `mode` `)`</span></span>  
 <span data-ttu-id="dc3c0-561">Arredonda um valor decimal para o inteiro mais próximo e usa a convenção de arredondamento especificada para valores de ponto médio ([exemplo](#Round5_Example)).</span><span class="sxs-lookup"><span data-stu-id="dc3c0-561">Rounds a decimal value to the nearest integer, and uses the specified rounding convention for midpoint values ([example](#Round5_Example)).</span></span>  
  
 <span data-ttu-id="dc3c0-562">`Double Math.Round(Double` `value` `, MidpointRounding`  `mode` `)`</span><span class="sxs-lookup"><span data-stu-id="dc3c0-562">`Double Math.Round(Double` `value` `, MidpointRounding`  `mode` `)`</span></span>  
 <span data-ttu-id="dc3c0-563">Arredonda um valor de ponto flutuante de precisão dupla para o inteiro mais próximo e usa a convenção de arredondamento especificada para valores de ponto médio ([exemplo](#Round6_Example)).</span><span class="sxs-lookup"><span data-stu-id="dc3c0-563">Rounds a double-precision floating-point value to the nearest integer, and uses the specified rounding convention for midpoint values ([example](#Round6_Example)).</span></span>  
  
 <span data-ttu-id="dc3c0-564">`Decimal Math.Round(Decimal` `d` `, Int32`  `decimals` `, MidpointRounding`  `mode` `)`</span><span class="sxs-lookup"><span data-stu-id="dc3c0-564">`Decimal Math.Round(Decimal` `d` `, Int32`  `decimals` `, MidpointRounding`  `mode` `)`</span></span>  
 <span data-ttu-id="dc3c0-565">Arredonda um valor decimal para um número especificado de dígitos fracionários e usa a convenção de arredondamento especificada para valores de ponto médio ([exemplo](#Round7_Example)).</span><span class="sxs-lookup"><span data-stu-id="dc3c0-565">Rounds a decimal value to a specified number of fractional digits, and uses the specified rounding convention for midpoint values ([example](#Round7_Example)).</span></span>  
  
 <span data-ttu-id="dc3c0-566">`Double Math.Round(Double` `value` `, Int32`  `digits` `, MidpointRounding`  `mode` `)`</span><span class="sxs-lookup"><span data-stu-id="dc3c0-566">`Double Math.Round(Double` `value` `, Int32`  `digits` `, MidpointRounding`  `mode` `)`</span></span>  
 <span data-ttu-id="dc3c0-567">Arredonda um valor de ponto flutuante de precisão dupla em um número especificado de dígitos fracionários e usa a convenção de arredondamento especificada para valores de ponto médio ([exemplo](#Round8_Example)).</span><span class="sxs-lookup"><span data-stu-id="dc3c0-567">Rounds a double-precision floating-point value to a specified number of fractional digits, and uses the specified rounding convention for midpoint values ([example](#Round8_Example)).</span></span>  
  
<a name="Params"></a>   
## <a name="parameters"></a><span data-ttu-id="dc3c0-568">Parâmetros</span><span class="sxs-lookup"><span data-stu-id="dc3c0-568">Parameters</span></span>  
 <span data-ttu-id="dc3c0-569">Esta é uma lista completa de parâmetros para o <xref:System.Math.Round%2A> método.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-569">This is a complete list of parameters for the <xref:System.Math.Round%2A> method.</span></span> <span data-ttu-id="dc3c0-570">Para os parâmetros usados por cada sobrecarga, consulte a sintaxe de sobrecarga acima.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-570">For the parameters used by each overload, see the overload syntax above.</span></span>  
  
|<span data-ttu-id="dc3c0-571">Parâmetro</span><span class="sxs-lookup"><span data-stu-id="dc3c0-571">Parameter</span></span>|<span data-ttu-id="dc3c0-572">Tipo</span><span class="sxs-lookup"><span data-stu-id="dc3c0-572">Type</span></span>|<span data-ttu-id="dc3c0-573">Descrição</span><span class="sxs-lookup"><span data-stu-id="dc3c0-573">Description</span></span>|  
|---------------|----------|-----------------|  
|`d`|<xref:System.Decimal>|<span data-ttu-id="dc3c0-574">Um número a ser arredondado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-574">A number to be rounded.</span></span>|  
|`a`<br /><br /> <span data-ttu-id="dc3c0-575">- ou -</span><span class="sxs-lookup"><span data-stu-id="dc3c0-575">-or-</span></span><br /><br /> `value`|<xref:System.Double>|<span data-ttu-id="dc3c0-576">Um número de ponto flutuante de precisão dupla a ser arredondado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-576">A double-precision floating-point number to be rounded.</span></span>|  
|`decimals`<br /><br /> <span data-ttu-id="dc3c0-577">- ou -</span><span class="sxs-lookup"><span data-stu-id="dc3c0-577">-or-</span></span><br /><br /> `digits`|<xref:System.Int32>|<span data-ttu-id="dc3c0-578">O número de dígitos fracionários no valor de retorno.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-578">The number of fractional digits in the return value.</span></span> <span data-ttu-id="dc3c0-579">Para <xref:System.Decimal> valores, ele pode variar de 0 a 28.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-579">For <xref:System.Decimal> values, it can range from 0 to 28.</span></span> <span data-ttu-id="dc3c0-580">Para <xref:System.Double> valores, ele pode variar de 0 a 15.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-580">For <xref:System.Double> values, it can range from 0 to 15.</span></span> <span data-ttu-id="dc3c0-581">Observe que 15 é o número máximo de dígitos integrais e fracionários com suporte a <xref:System.Double> tipo.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-581">Note that 15 is the maximum number of integral and fractional digits supported by the <xref:System.Double> type.</span></span><br /><br /> <span data-ttu-id="dc3c0-582">Valor padrão: 0, que é arredondado para um número inteiro</span><span class="sxs-lookup"><span data-stu-id="dc3c0-582">Default value: 0, which rounds to an integer</span></span>|  
|`mode`|<xref:System.MidpointRounding>|<span data-ttu-id="dc3c0-583">Um sinalizador que especifica a convenção a ser usado para valores de ponto médio de arredondamento.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-583">A flag that specifies the convention to use for rounding midpoint values.</span></span> <span data-ttu-id="dc3c0-584">Consulte [valores de ponto médio e convenções de arredondamento](#Midpoint).</span><span class="sxs-lookup"><span data-stu-id="dc3c0-584">See [Midpoint values and rounding conventions](#Midpoint).</span></span><br /><br /> <span data-ttu-id="dc3c0-585">Valor padrão: <xref:System.MidpointRounding.ToEven?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="dc3c0-585">Default value: <xref:System.MidpointRounding.ToEven?displayProperty=nameWithType></span></span>|  
  
<a name="Returns"></a>   
## <a name="return-value"></a><span data-ttu-id="dc3c0-586">Valor retornado</span><span class="sxs-lookup"><span data-stu-id="dc3c0-586">Return value</span></span>  
 <span data-ttu-id="dc3c0-587">Tipo: <xref:System.Decimal> ou <xref:System.Double>, dependendo do tipo do valor a ser arredondado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-587">Type: <xref:System.Decimal> or <xref:System.Double>, depending on the type of the value to be rounded.</span></span>   
<span data-ttu-id="dc3c0-588">Um valor numérico do mesmo tipo como `d`, `a`, ou `value`, mas arredondado para um número inteiro ou para o número especificado de casas decimais.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-588">A numeric value of the same type as `d`, `a`, or `value`, but rounded either to an integer or to the specified number of decimal digits.</span></span> <span data-ttu-id="dc3c0-589">Consulte [valores de ponto médio e convenções de arredondamento](#Midpoint) para obter informações sobre números com valores de ponto médio de arredondamento.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-589">See [Midpoint values and rounding conventions](#Midpoint) for information about rounding numbers with midpoint values.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="dc3c0-590">Quando o arredondamento de valores de ponto médio, o algoritmo de arredondamento executa um teste de igualdade.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-590">When rounding midpoint values, the rounding algorithm performs an equality test.</span></span> <span data-ttu-id="dc3c0-591">Devido a problemas de representação binária e precisão no formato de ponto flutuante, o valor retornado pelo método pode ser inesperado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-591">Because of problems of binary representation and precision in the floating-point format, the value returned by the method can be unexpected.</span></span> <span data-ttu-id="dc3c0-592">Para obter mais informações, consulte [arredondamento e precisão](#Precision).</span><span class="sxs-lookup"><span data-stu-id="dc3c0-592">For more information, see [Rounding and precision](#Precision).</span></span>  
  
 <span data-ttu-id="dc3c0-593">Se uma sobrecarga com um <xref:System.Double> parâmetro é chamado com <xref:System.Double.NaN?displayProperty=nameWithType>, o método retornará <xref:System.Double.NaN?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-593">If an overload with a <xref:System.Double> parameter is called with <xref:System.Double.NaN?displayProperty=nameWithType>, the method returns <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="dc3c0-594">Se for chamado com <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> ou <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, o método retorna <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> ou <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, respectivamente.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-594">If it is called with <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, the method returns <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, respectively.</span></span>  
  
<a name="Exceptions"></a>   
## <a name="exceptions"></a><span data-ttu-id="dc3c0-595">Exceções</span><span class="sxs-lookup"><span data-stu-id="dc3c0-595">Exceptions</span></span>  
  
|<span data-ttu-id="dc3c0-596">Exceção</span><span class="sxs-lookup"><span data-stu-id="dc3c0-596">Exception</span></span>|<span data-ttu-id="dc3c0-597">Condição</span><span class="sxs-lookup"><span data-stu-id="dc3c0-597">Condition</span></span>|<span data-ttu-id="dc3c0-598">Lançado por</span><span class="sxs-lookup"><span data-stu-id="dc3c0-598">Thrown by</span></span>|  
|---------------|---------------|---------------|  
|<xref:System.OverflowException>|<span data-ttu-id="dc3c0-599">O resultado está fora do intervalo da <xref:System.Decimal> tipo.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-599">The result is outside the range of the <xref:System.Decimal> type.</span></span>|<xref:System.Math.Round%28System.Decimal%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29>|  
|<xref:System.ArgumentOutOfRangeException>|<span data-ttu-id="dc3c0-600">`decimals` é menor que 0 ou maior que 28.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-600">`decimals` is less than 0 or greater than 28.</span></span><br /><br /> <span data-ttu-id="dc3c0-601">- ou -</span><span class="sxs-lookup"><span data-stu-id="dc3c0-601">-or-</span></span><br /><br /> <span data-ttu-id="dc3c0-602">`digits` é menor que 0 ou maior que 15.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-602">`digits` is less than 0 or greater than 15.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%29><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29>|  
|<xref:System.ArgumentException>|<span data-ttu-id="dc3c0-603">`mode` não é um valor válido de <xref:System.MidpointRounding>.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-603">`mode` is not a valid value of <xref:System.MidpointRounding>.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29>|  
  
<a name="Tasks"></a>   
## <a name="which-method-do-i-call"></a><span data-ttu-id="dc3c0-604">Qual método devo chamar?</span><span class="sxs-lookup"><span data-stu-id="dc3c0-604">Which method do I call?</span></span>  
  
|<span data-ttu-id="dc3c0-605">Para</span><span class="sxs-lookup"><span data-stu-id="dc3c0-605">To</span></span>|<span data-ttu-id="dc3c0-606">Call</span><span class="sxs-lookup"><span data-stu-id="dc3c0-606">Call</span></span>|  
|--------|----------|  
|<span data-ttu-id="dc3c0-607">Arredondar um número para um inteiro usando o arredondamento para convenção mais próxima.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-607">Round a number to an integer by using the rounding to nearest convention.</span></span>|<xref:System.Math.Round%28System.Decimal%29><br /><br /> <span data-ttu-id="dc3c0-608">- ou -</span><span class="sxs-lookup"><span data-stu-id="dc3c0-608">-or-</span></span><br /><br /> <xref:System.Math.Round%28System.Double%29>|  
|<span data-ttu-id="dc3c0-609">Arredondar um número para um inteiro usando uma convenção de arredondamento.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-609">Round a number to an integer by using a specified rounding convention.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29><br /><br /> <span data-ttu-id="dc3c0-610">- ou -</span><span class="sxs-lookup"><span data-stu-id="dc3c0-610">-or-</span></span><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29>|  
|<span data-ttu-id="dc3c0-611">Arredondar um número para um número especificado de dígitos fracionários usando o arredondamento para convenção mais próxima.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-611">Round a number to a specified number of fractional digits by using the rounding to nearest convention.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%29><br /><br /> <span data-ttu-id="dc3c0-612">- ou -</span><span class="sxs-lookup"><span data-stu-id="dc3c0-612">-or-</span></span><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%29>|  
|<span data-ttu-id="dc3c0-613">Arredondar um número para um número especificado de dígitos fracionários usando uma convenção de arredondamento.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-613">Round a number to a specified number of fractional digits by using a specified rounding convention.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29><br /><br /> <span data-ttu-id="dc3c0-614">- ou -</span><span class="sxs-lookup"><span data-stu-id="dc3c0-614">-or-</span></span><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29>|  
|<span data-ttu-id="dc3c0-615">Round um <xref:System.Single> valor para um número especificado de dígitos fracionários usando uma convenção de arredondamento e especificados minimiza a perda de precisão.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-615">Round a <xref:System.Single> value to a specified number of fractional digits by using a specified rounding convention and minimizing the loss of precision.</span></span>|<span data-ttu-id="dc3c0-616">Converter o <xref:System.Single> para um <xref:System.Decimal> e chame <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29>.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-616">Convert the <xref:System.Single> to a <xref:System.Decimal> and call <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29>.</span></span>|  
|<span data-ttu-id="dc3c0-617">Arredondar um número para um número especificado de dígitos fracionários, minimizando a problemas de precisão em valores de ponto médio de arredondamento.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-617">Round a number to a specified number of fractional digits while minimizing problems of precision in rounding midpoint values.</span></span>|<span data-ttu-id="dc3c0-618">Chame um método de arredondamento que implementa uma comparação "aproximadamente igual a ou maior que".</span><span class="sxs-lookup"><span data-stu-id="dc3c0-618">Call a rounding method that implements a "greater than or approximately equal to" comparison.</span></span> <span data-ttu-id="dc3c0-619">Consulte [arredondamento e precisão](#Precision).</span><span class="sxs-lookup"><span data-stu-id="dc3c0-619">See [Rounding and precision](#Precision).</span></span>|  
|<span data-ttu-id="dc3c0-620">Arredondar um valor fracionário para um número inteiro que é maior que o valor fracionário.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-620">Round a fractional value to an integer that is greater than the fractional value.</span></span> <span data-ttu-id="dc3c0-621">Por exemplo, arredonde 3.1 para 4.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-621">For example, round 3.1 to 4.</span></span>|<xref:System.Math.Ceiling%2A>|  
|<span data-ttu-id="dc3c0-622">Arredondar um valor fracionário para um número inteiro que é menor que o valor fracionário.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-622">Round a fractional value to an integer that is less than the fractional value.</span></span> <span data-ttu-id="dc3c0-623">Por exemplo, arredonde 3.9 a 3.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-623">For example, round 3.9 to 3.</span></span>|<xref:System.Math.Floor%2A>|  
  
<a name="Midpoint"></a>   
## <a name="midpoint-values-and-rounding-conventions"></a><span data-ttu-id="dc3c0-624">Valores de ponto médio e convenções arredondamento</span><span class="sxs-lookup"><span data-stu-id="dc3c0-624">Midpoint values and rounding conventions</span></span>  
 <span data-ttu-id="dc3c0-625">Arredondamento envolve a conversão de um valor numérico com uma precisão especificada para o valor mais próximo com menos precisão.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-625">Rounding involves converting a numeric value with a specified precision to the nearest value with less precision.</span></span> <span data-ttu-id="dc3c0-626">Por exemplo, você pode usar o <xref:System.Math.Round%28System.Double%29> método para arredondar um valor de 3.4 a 3.0 e o <xref:System.Math.Round%28System.Double%2CSystem.Int32%29> método para arredondar um valor de 3.579 para 3,58.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-626">For example, you can use the <xref:System.Math.Round%28System.Double%29> method to round a value of 3.4 to 3.0, and the <xref:System.Math.Round%28System.Double%2CSystem.Int32%29> method to round a value of 3.579 to 3.58.</span></span>  
  
 <span data-ttu-id="dc3c0-627">Um valor de ponto médio, o valor após os dígitos menos significativos no resultado é precisamente metade do caminho entre dois números.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-627">In a midpoint value, the value after the least significant digit in the result is precisely half way between two numbers.</span></span> <span data-ttu-id="dc3c0-628">Por exemplo, 3.47500 é um valor de ponto médio se ele deve ser arredondado para duas casas decimais e 7.500 é um valor de ponto médio, se for a ser arredondado para um número inteiro.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-628">For example, 3.47500 is a midpoint value if it is to be rounded two decimal places, and 7.500 is a midpoint value if it is to be rounded to an integer.</span></span> <span data-ttu-id="dc3c0-629">Nesses casos, o valor mais próximo não pode ser identificado facilmente sem uma convenção de arredondamento.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-629">In these cases, the nearest value can't be easily identified without a rounding convention.</span></span>  
  
 <span data-ttu-id="dc3c0-630">O <xref:System.Math.Round%2A> método dá suporte a duas convenções de arredondamento para lidar com valores de ponto médio:</span><span class="sxs-lookup"><span data-stu-id="dc3c0-630">The <xref:System.Math.Round%2A> method supports two rounding conventions for handling midpoint values:</span></span>  
  
 <span data-ttu-id="dc3c0-631">**Arredondamento para cima**</span><span class="sxs-lookup"><span data-stu-id="dc3c0-631">**Rounding away from zero**</span></span>  
 <span data-ttu-id="dc3c0-632">Valores de ponto médio são arredondados para o próximo número diferente de zero.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-632">Midpoint values are rounded to the next number away from zero.</span></span> <span data-ttu-id="dc3c0-633">Por exemplo, 3,75 Arredonda para 3.8, 3.85 Arredonda para 3.9,-3.75 Arredonda para-3.8, e-3.85 Arredonda para-3.9.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-633">For example, 3.75 rounds to 3.8, 3.85 rounds to 3.9, -3.75 rounds to -3.8, and -3.85 rounds to -3.9.</span></span> <span data-ttu-id="dc3c0-634">Essa forma de arredondamento é representada pelo <xref:System.MidpointRounding.AwayFromZero?displayProperty=nameWithType> membro de enumeração.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-634">This form of rounding is represented by the <xref:System.MidpointRounding.AwayFromZero?displayProperty=nameWithType> enumeration member.</span></span>  
  
 <span data-ttu-id="dc3c0-635">Arredondamento diferente de zero é a forma mais amplamente conhecida de arredondamento.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-635">Rounding away from zero is the most widely known form of rounding.</span></span>  
  
 <span data-ttu-id="dc3c0-636">**Arredondamento mais próximo ou arredondamento bancário**</span><span class="sxs-lookup"><span data-stu-id="dc3c0-636">**Rounding to nearest, or banker's rounding**</span></span>  
 <span data-ttu-id="dc3c0-637">Valores de ponto médio são arredondados para o número par mais próximo.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-637">Midpoint values are rounded to the nearest even number.</span></span> <span data-ttu-id="dc3c0-638">Por exemplo, 3,75 e 3,85 arredondar para 3.8 e-3.75 e-3.85 arredondam para-3.8.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-638">For example, both 3.75 and 3.85 round to 3.8, and both -3.75 and -3.85 round to -3.8.</span></span> <span data-ttu-id="dc3c0-639">Essa forma de arredondamento é representada pelo <xref:System.MidpointRounding.ToEven?displayProperty=nameWithType> membro de enumeração.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-639">This form of rounding is represented by the <xref:System.MidpointRounding.ToEven?displayProperty=nameWithType> enumeration member.</span></span>  
  
 <span data-ttu-id="dc3c0-640">Arredondamento mais próximo é a forma padrão de arredondamento usados em operações financeiras e estatísticas.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-640">Rounding to nearest is the standard form of rounding used in financial and statistical operations.</span></span> <span data-ttu-id="dc3c0-641">Ele está em conformidade com IEEE 754 padrão, a seção 4.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-641">It conforms to IEEE Standard 754, section 4.</span></span> <span data-ttu-id="dc3c0-642">Quando usado em várias operações de arredondamento, ele reduz o erro de arredondamento é causado por valores de ponto médio em uma única direção de arredondamento consistentemente.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-642">When used in multiple rounding operations, it reduces the rounding error that is caused by consistently rounding midpoint values in a single direction.</span></span> <span data-ttu-id="dc3c0-643">Em alguns casos, esse erro de arredondamento pode ser significativo.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-643">In some cases, this rounding error can be significant.</span></span>  
  
 <span data-ttu-id="dc3c0-644">O exemplo a seguir ilustra a diferença que pode resultar de arredondamento consistentemente valores de ponto médio em uma única direção.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-644">The following example illustrates the bias that can result from consistently rounding midpoint values in a single direction.</span></span> <span data-ttu-id="dc3c0-645">O exemplo calcula a média real de uma matriz de <xref:System.Decimal> valores e, em seguida, calcula a média quando os valores na matriz são arredondados usando as convenções de dois.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-645">The example computes the true mean of an array of <xref:System.Decimal> values, and then computes the mean when the values in the array are rounded by using the two conventions.</span></span> <span data-ttu-id="dc3c0-646">Neste exemplo, a média real e a média resultante quando o arredondamento mais próximo são os mesmos.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-646">In this example, the true mean and the mean that results when rounding to nearest are the same.</span></span> <span data-ttu-id="dc3c0-647">No entanto, a média resultante quando o arredondamento para cima difere.05 (ou por % 3.6) a média real.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-647">However, the mean that results when rounding away from zero differs by .05 (or by 3.6%) from the true mean.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/mean1.cs#2)]
 [!code-vb[System.Math.Round.Overload#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/mean1.vb#2)]  
  
 <span data-ttu-id="dc3c0-648">Por padrão, o <xref:System.Math.Round%2A> método usa o arredondamento para convenção mais próxima.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-648">By default, the <xref:System.Math.Round%2A> method uses the rounding to nearest convention.</span></span> <span data-ttu-id="dc3c0-649">A tabela a seguir lista as sobrecargas do <xref:System.Math.Round%2A> método e a convenção de arredondamento que cada uma usa.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-649">The following table lists the overloads of the <xref:System.Math.Round%2A> method and the rounding convention that each uses.</span></span>  
  
|<span data-ttu-id="dc3c0-650">Sobrecarga</span><span class="sxs-lookup"><span data-stu-id="dc3c0-650">Overload</span></span>|<span data-ttu-id="dc3c0-651">Convenção de arredondamento</span><span class="sxs-lookup"><span data-stu-id="dc3c0-651">Rounding convention</span></span>|  
|--------------|-------------------------|  
|<xref:System.Math.Round%28System.Decimal%29>|<xref:System.MidpointRounding.ToEven>|  
|<xref:System.Math.Round%28System.Double%29>|<xref:System.MidpointRounding.ToEven>|  
|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%29>|<xref:System.MidpointRounding.ToEven>|  
|<xref:System.Math.Round%28System.Double%2CSystem.Int32%29>|<xref:System.MidpointRounding.ToEven>|  
|<xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29>|<span data-ttu-id="dc3c0-652">Determinado pelo `mode` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-652">Determined by `mode` parameter.</span></span>|  
|<xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29>|<span data-ttu-id="dc3c0-653">Determinado pelo parâmetro `mode`</span><span class="sxs-lookup"><span data-stu-id="dc3c0-653">Determined by `mode` parameter</span></span>|  
|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29>|<span data-ttu-id="dc3c0-654">Determinado pelo parâmetro `mode`</span><span class="sxs-lookup"><span data-stu-id="dc3c0-654">Determined by `mode` parameter</span></span>|  
|<xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29>|<span data-ttu-id="dc3c0-655">Determinado pelo parâmetro `mode`</span><span class="sxs-lookup"><span data-stu-id="dc3c0-655">Determined by `mode` parameter</span></span>|  
  
<a name="Precision"></a>   
## <a name="rounding-and-precision"></a><span data-ttu-id="dc3c0-656">Arredondamento e precisão</span><span class="sxs-lookup"><span data-stu-id="dc3c0-656">Rounding and precision</span></span>  
 <span data-ttu-id="dc3c0-657">Para determinar se uma operação de arredondamento envolve um valor de ponto médio, o <xref:System.Math.Round%2A> método multiplica o valor original deve ser arredondada 10<sup>n</sup>, onde *n* é o número desejado de fracionários dígitos no valor de retorno e, em seguida, determina se a parte fracionária restante do valor é maior que ou igual para. 5.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-657">In order to determine whether a rounding operation involves a midpoint value, the <xref:System.Math.Round%2A> method multiplies the original value to be rounded by 10<sup>n</sup>, where *n* is the desired number of fractional digits in the return value, and then determines whether the remaining fractional portion of the value is greater than or equal to .5.</span></span> <span data-ttu-id="dc3c0-658">Essa é uma pequena variação em um teste de igualdade e como discutido na seção "Teste de igualdade" o <xref:System.Double> tópico de referência, testes de igualdade com valores de ponto flutuante são problemáticos devido a problemas do formato de ponto flutuante com binário representação e precisão.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-658">This is a slight variation on a test for equality, and as discussed in the "Testing for Equality" section of the <xref:System.Double> reference topic, tests for equality with floating-point values are problematic because of the floating-point format's issues with binary representation and precision.</span></span> <span data-ttu-id="dc3c0-659">Isso significa que qualquer parte fracionária de um número que é um pouco menos de.5 (devido a uma perda de precisão) não será arredondado para cima.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-659">This means that any fractional portion of a number that is slightly less than .5 (because of a loss of precision) will not be rounded upward.</span></span>  
  
 <span data-ttu-id="dc3c0-660">O exemplo a seguir ilustra o problema.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-660">The following example illustrates the problem.</span></span> <span data-ttu-id="dc3c0-661">Repetidamente, ele adiciona.1 para 11.0 e Arredonda o resultado para o inteiro mais próximo.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-661">It repeatedly adds .1 to 11.0 and rounds the result to the nearest integer.</span></span> <span data-ttu-id="dc3c0-662">Independentemente da convenção de arredondamento 11.5 devem ser arredondados para 12.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-662">Regardless of the rounding convention, 11.5 should round to 12.</span></span> <span data-ttu-id="dc3c0-663">No entanto, como a saída de exemplo mostra, não.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-663">However, as the output from the example shows, it does not.</span></span> <span data-ttu-id="dc3c0-664">O exemplo usa "R" [cadeia de caracteres de formato numérico padrão](~/docs/standard/base-types/standard-numeric-format-strings.md) para exibir o ponto flutuante do valor precisão total e mostra que o valor a ser arredondado perdeu a precisão durante adições repetidas e seu valor é realmente 11.499999999999998.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-664">The example uses the "R" [standard numeric format string](~/docs/standard/base-types/standard-numeric-format-strings.md) to display the floating point value's full precision, and shows that the value to be rounded has lost precision during repeated additions, and its value is actually 11.499999999999998.</span></span> <span data-ttu-id="dc3c0-665">Como.499999999999998 é menor que.5, o valor não é arredondado para o inteiro mais próximo.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-665">Because .499999999999998 is less than .5, the value is not rounded to the next highest integer.</span></span> <span data-ttu-id="dc3c0-666">Como o exemplo também mostra, esse problema não ocorre se podemos simplesmente atribuir o valor da constante 11.5 para um <xref:System.Double> variável.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-666">As the example also shows, this problem does not occur if we simply assign the constant value 11.5 to a <xref:System.Double> variable.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/precision1.cs#7)]
 [!code-vb[System.Math.Round.Overload#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/precision1.vb#7)]  
  
 <span data-ttu-id="dc3c0-667">Problemas de precisão em valores de ponto médio de arredondamento têm mais probabilidade de ocorrer nas seguintes condições:</span><span class="sxs-lookup"><span data-stu-id="dc3c0-667">Problems of precision in rounding midpoint values are most likely to arise in the following conditions:</span></span>  
  
-   <span data-ttu-id="dc3c0-668">Quando um valor fracionário não pode ser expressas com precisão no formato binário do tipo de ponto flutuante.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-668">When a fractional value cannot be expressed precisely in the floating-point type's binary format.</span></span>  
  
-   <span data-ttu-id="dc3c0-669">Quando o valor a ser arredondado é calculado a partir de uma ou mais operações de ponto flutuantes.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-669">When the value to be rounded is calculated from one or more floating-point operations.</span></span>  
  
-   <span data-ttu-id="dc3c0-670">Quando o valor a ser arredondado é um <xref:System.Single> em vez de <xref:System.Double> ou <xref:System.Decimal>.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-670">When the value to be rounded is a <xref:System.Single> rather than a <xref:System.Double> or <xref:System.Decimal>.</span></span> <span data-ttu-id="dc3c0-671">Para obter mais informações, consulte a próxima seção, [arredondamento e valores de ponto flutuante de precisão única](#Single).</span><span class="sxs-lookup"><span data-stu-id="dc3c0-671">For more information, see the next section, [Rounding and single-precision floating-point values](#Single).</span></span>  
  
 <span data-ttu-id="dc3c0-672">Em casos em que a falta de precisão em operações de arredondamento é um problema, você pode fazer o seguinte:</span><span class="sxs-lookup"><span data-stu-id="dc3c0-672">In cases where the lack of precision in rounding operations is problematic, you can do the following:</span></span>  
  
-   <span data-ttu-id="dc3c0-673">Se a operação de arredondamento chama uma sobrecarga que Arredonda um <xref:System.Double> valor, você pode alterar o <xref:System.Double> para um <xref:System.Decimal> valor e chame uma sobrecarga que Arredonda um <xref:System.Decimal> valor em vez disso.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-673">If the rounding operation calls an overload that rounds a <xref:System.Double> value, you can change the <xref:System.Double> to a <xref:System.Decimal> value and call an overload that rounds a <xref:System.Decimal> value instead.</span></span> <span data-ttu-id="dc3c0-674">Embora o <xref:System.Decimal> tipo de dados também tem problemas de representação e perda de precisão, esses problemas são muito menos comuns.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-674">Although the <xref:System.Decimal> data type also has problems of representation and loss of precision, these issues are far less common.</span></span>  
  
-   <span data-ttu-id="dc3c0-675">Defina um algoritmo de arredondamento personalizado que executa um teste de "quase igual" para determinar se o valor a ser arredondado aceitável está perto de um valor de ponto médio.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-675">Define a custom rounding algorithm that performs a "nearly equal" test to determine whether the value to be rounded is acceptably close to a midpoint value.</span></span> <span data-ttu-id="dc3c0-676">O exemplo a seguir define um `RoundApproximate` método examina se um valor fracionário suficientemente está perto de um valor de ponto médio esteja sujeito a arredondamentos ponto médio.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-676">The following example defines a `RoundApproximate` method that examines whether a fractional value is sufficiently near to a midpoint value to be subject to midpoint rounding.</span></span> <span data-ttu-id="dc3c0-677">Como mostra a saída do exemplo, ela corrige o problema de arredondamento mostrado no exemplo anterior.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-677">As the output from the example shows, it corrects the rounding problem shown in the previous example.</span></span>  
  
     [!code-csharp[System.Math.Round.Overload#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/precision2.cs#8)]
     [!code-vb[System.Math.Round.Overload#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/precision2.vb#8)]  
  
<a name="Single"></a>   
## <a name="rounding-and-single-precision-floating-point-values"></a><span data-ttu-id="dc3c0-678">Arredondamento e valores de ponto flutuante de precisão simples</span><span class="sxs-lookup"><span data-stu-id="dc3c0-678">Rounding and single-precision floating-point values</span></span>  
 <span data-ttu-id="dc3c0-679">O <xref:System.Math.Round%2A> método inclui sobrecargas que aceitam argumentos de tipo <xref:System.Decimal> e <xref:System.Double>.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-679">The <xref:System.Math.Round%2A> method includes overloads that accept arguments of type <xref:System.Decimal> and <xref:System.Double>.</span></span> <span data-ttu-id="dc3c0-680">Não há métodos que arredondar valores do tipo <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-680">There are no methods that round values of type <xref:System.Single>.</span></span> <span data-ttu-id="dc3c0-681">Se você passar um <xref:System.Single> valor para uma das sobrecargas do <xref:System.Math.Round%2A> método, ele é convertido (em c#) ou convertido (no Visual Basic) em um <xref:System.Double>e o correspondente <xref:System.Math.Round%2A> sobrecarga com um <xref:System.Double> parâmetro é chamado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-681">If you pass a <xref:System.Single> value to one of the overloads of the <xref:System.Math.Round%2A> method, it is cast (in C#) or converted (in Visual Basic) to a <xref:System.Double>, and the corresponding <xref:System.Math.Round%2A> overload with a <xref:System.Double> parameter is called.</span></span> <span data-ttu-id="dc3c0-682">Embora essa seja uma conversão de expansão, ele geralmente envolve uma perda de precisão, como mostra o exemplo a seguir.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-682">Although this is a widening conversion, it often involves a loss of precision, as the following example illustrates.</span></span> <span data-ttu-id="dc3c0-683">Quando um <xref:System.Single> valor 16.325 é passado para o <xref:System.Math.Round%2A> método e arredondadas para duas casas decimais, usando o arredondamento para convenção mais próxima, o resultado é 16.33 e não o esperado resultado de 16.32.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-683">When a <xref:System.Single> value of 16.325 is passed to the <xref:System.Math.Round%2A> method and rounded to two decimal places using the rounding to nearest convention, the result is 16.33 and not the expected result of 16.32.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/single1.cs#1)]
 [!code-vb[System.Math.Round.Overload#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/single1.vb#1)]  
  
 <span data-ttu-id="dc3c0-684">Esse resultado inesperado é devido à perda de precisão na conversão do <xref:System.Single> valor para um <xref:System.Double>.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-684">This unexpected result is due to a loss of precision in the conversion of the <xref:System.Single> value to a <xref:System.Double>.</span></span> <span data-ttu-id="dc3c0-685">Porque resultante <xref:System.Double> valor 16.325000762939453 não é um valor de ponto médio e é maior do que 16.325, ele sempre é arredondado para cima.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-685">Because the resulting <xref:System.Double> value of 16.325000762939453 is not a midpoint value and is greater than 16.325, it is always rounded upward.</span></span>  
  
 <span data-ttu-id="dc3c0-686">Em muitos casos, como mostra o exemplo, a perda de precisão pode ser minimizada ou eliminada por conversão de <xref:System.Single> valor para um <xref:System.Decimal>.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-686">In many cases, as the example illustrates, the loss of precision can be minimized or eliminated by casting or converting the <xref:System.Single> value to a <xref:System.Decimal>.</span></span> <span data-ttu-id="dc3c0-687">Observe que, como esta é uma conversão de restrição, ela requer uso de um operador de conversão ou chamando um método de conversão.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-687">Note that, because this is a narrowing conversion, it requires using a cast operator or calling a conversion method.</span></span>  
  
<a name="Round1_Example"></a>   
## <a name="mathrounddecimal-example"></a><span data-ttu-id="dc3c0-688">Exemplo de Math.Round(Decimal)</span><span class="sxs-lookup"><span data-stu-id="dc3c0-688">Math.Round(Decimal) example</span></span>  
 <span data-ttu-id="dc3c0-689">O exemplo a seguir demonstra o <xref:System.Math.Round%28System.Decimal%29> método.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-689">The following example demonstrates the <xref:System.Math.Round%28System.Decimal%29> method.</span></span> <span data-ttu-id="dc3c0-690">Observe que o <xref:System.Decimal> valor 4.5 arredonda 4 em vez de 5, porque essa sobrecarga usa o padrão <xref:System.MidpointRounding.ToEven> convenção.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-690">Note that the <xref:System.Decimal> value of 4.5 rounds to 4 rather than 5, because this overload uses the default <xref:System.MidpointRounding.ToEven> convention.</span></span>  
  
 [!code-csharp[System.Math.Round#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/rounddecimal1.cs#6)]
 [!code-vb[System.Math.Round#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/rounddecimal1.vb#6)]  
  
<a name="Round2_Example"></a>   
## <a name="mathrounddouble-example"></a><span data-ttu-id="dc3c0-691">Exemplo de Math.Round(Double)</span><span class="sxs-lookup"><span data-stu-id="dc3c0-691">Math.Round(Double) example</span></span>  
 <span data-ttu-id="dc3c0-692">O exemplo a seguir demonstra o arredondamento para o valor inteiro mais próximo.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-692">The following example demonstrates rounding to the nearest integer value.</span></span>  
  
 [!code-cpp[Classic Math.Round Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Math.Round Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Math.Round Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Math.Round Example/CS/source.cs#1)]
 [!code-vb[Classic Math.Round Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Math.Round Example/VB/source.vb#1)]  
  
<a name="Round3_Example"></a>   
## <a name="mathrounddecimal-int32-example"></a><span data-ttu-id="dc3c0-693">Exemplo de Math.Round(Decimal, Int32)</span><span class="sxs-lookup"><span data-stu-id="dc3c0-693">Math.Round(Decimal, Int32) example</span></span>  
 <span data-ttu-id="dc3c0-694">O exemplo a seguir Arredonda valores decimais com dois dígitos de fração para os valores que têm um único dígito de fração.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-694">The following example rounds decimal values with two fractional digits to values that have a single fractional digit.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/source.cs#3)]
 [!code-vb[System.Math.Round.Overload#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/source.vb#3)]  
  
<a name="Round4_Example"></a>   
## <a name="mathrounddouble-int32-example"></a><span data-ttu-id="dc3c0-695">Exemplo de Math.Round(Double, Int32)</span><span class="sxs-lookup"><span data-stu-id="dc3c0-695">Math.Round(Double, Int32) example</span></span>  
 <span data-ttu-id="dc3c0-696">O exemplo a seguir Arredonda valores double com dois dígitos fracionários a duplicatas que têm um único dígito de fração.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-696">The following example rounds double values with two fractional digits to doubles that have a single fractional digit.</span></span>  
  
 [!code-cpp[Classic Math.Round2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Math.Round2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Math.Round2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Math.Round2 Example/CS/source.cs#1)]
 [!code-vb[Classic Math.Round2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Math.Round2 Example/VB/source.vb#1)]  
  
<a name="Round5_Example"></a>   
## <a name="mathrounddecimal-midpointrounding-example"></a><span data-ttu-id="dc3c0-697">Exemplo de Math.Round(Decimal, MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="dc3c0-697">Math.Round(Decimal, MidpointRounding) example</span></span>  
 <span data-ttu-id="dc3c0-698">O exemplo a seguir exibe valores retornados pelo <xref:System.Math.Round%28System.Decimal%29> método, o <xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29> método com um `mode` argumento de <xref:System.MidpointRounding.ToEven>e o <xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29> método com um `mode` argumento de <xref:System.MidpointRounding.AwayFromZero>.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-698">The following example displays values returned by the <xref:System.Math.Round%28System.Decimal%29> method, the <xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29> method with a `mode` argument of <xref:System.MidpointRounding.ToEven>, and the <xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29> method with a `mode` argument of <xref:System.MidpointRounding.AwayFromZero>.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/midpoint1.cs#5)]
 [!code-vb[System.Math.Round.Overload#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/midpoint1.vb#5)]  
  
<a name="Round6_Example"></a>   
## <a name="mathrounddouble-midpointrounding-example"></a><span data-ttu-id="dc3c0-699">Exemplo de Math.Round(Double, MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="dc3c0-699">Math.Round(Double, MidpointRounding) example</span></span>  
 <span data-ttu-id="dc3c0-700">O exemplo a seguir exibe valores retornados pelo <xref:System.Math.Round%28System.Double%29> método, o <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29> método com um `mode` argumento de <xref:System.MidpointRounding.ToEven>e o <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29> método com um `mode` argumento de <xref:System.MidpointRounding.AwayFromZero>.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-700">The following example displays values returned by the <xref:System.Math.Round%28System.Double%29> method, the <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29> method with a `mode` argument of <xref:System.MidpointRounding.ToEven>, and the <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29> method with a `mode` argument of <xref:System.MidpointRounding.AwayFromZero>.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/midpoint2.cs#6)]
 [!code-vb[System.Math.Round.Overload#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/midpoint2.vb#6)]  
  
<a name="Round7_Example"></a>   
## <a name="mathrounddecimal-int32-midpointrounding-example"></a><span data-ttu-id="dc3c0-701">Exemplo de Math.Round(Decimal, Int32, MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="dc3c0-701">Math.Round(Decimal, Int32, MidpointRounding) example</span></span>  
 <span data-ttu-id="dc3c0-702">O exemplo a seguir demonstra como usar o <xref:System.Math.Round%2A> método com o <xref:System.MidpointRounding> enumeração.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-702">The following example demonstrates how to use the <xref:System.Math.Round%2A> method with the <xref:System.MidpointRounding> enumeration.</span></span>  
  
 [!code-cpp[math.midpointrounding#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.midpointrounding/cpp/mpr.cpp#1)]
 [!code-csharp[math.midpointrounding#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.midpointrounding/CS/mpr.cs#1)]
 [!code-vb[math.midpointrounding#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.midpointrounding/VB/mpr.vb#1)]  
  
<a name="Round8_Example"></a>   
## <a name="mathrounddouble-int32-midpointrounding-example"></a><span data-ttu-id="dc3c0-703">Exemplo de Math.Round(Double, Int32, MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="dc3c0-703">Math.Round(Double, Int32, MidpointRounding) example</span></span>  
 <span data-ttu-id="dc3c0-704">O exemplo a seguir demonstra como usar o <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29> método com o <xref:System.MidpointRounding> enumeração.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-704">The following example demonstrates how to use the <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29> method with the <xref:System.MidpointRounding> enumeration.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/mpr.cs#4)]
 [!code-vb[System.Math.Round.Overload#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/mpr.vb#4)]  
  
<a name="Round_Versions"></a>   
## <a name="version-information"></a><span data-ttu-id="dc3c0-705">Informações de versão</span><span class="sxs-lookup"><span data-stu-id="dc3c0-705">Version information</span></span>  
 <span data-ttu-id="dc3c0-706">.NET Framework</span><span class="sxs-lookup"><span data-stu-id="dc3c0-706">.NET Framework</span></span>  
 <span data-ttu-id="dc3c0-707">Sobrecargas sem um <xref:System.MidpointRounding> parâmetro têm suporte em: 4.5, 4, 3.5, 3.0, 2.0, 1.1 e 1.0</span><span class="sxs-lookup"><span data-stu-id="dc3c0-707">Overloads without a <xref:System.MidpointRounding> parameter are supported in: 4.5, 4, 3.5, 3.0, 2.0, 1.1, 1.0</span></span>  
<span data-ttu-id="dc3c0-708">Sobrecargas com um <xref:System.MidpointRounding> parâmetro têm suporte em: 4.5, 4, 3.5, 3.0, 2.0</span><span class="sxs-lookup"><span data-stu-id="dc3c0-708">Overloads with a <xref:System.MidpointRounding> parameter are supported in: 4.5, 4, 3.5, 3.0, 2.0</span></span>  
  
 <span data-ttu-id="dc3c0-709">.NET Framework Client Profile</span><span class="sxs-lookup"><span data-stu-id="dc3c0-709">.NET Framework Client Profile</span></span>  
 <span data-ttu-id="dc3c0-710">Todas as sobrecargas são suportadas em: 4, 3.5 SP1</span><span class="sxs-lookup"><span data-stu-id="dc3c0-710">All overloads are supported in: 4, 3.5 SP1</span></span>  
  
 <span data-ttu-id="dc3c0-711">Biblioteca de Classes Portátil</span><span class="sxs-lookup"><span data-stu-id="dc3c0-711">Portable Class Library</span></span>  
 <span data-ttu-id="dc3c0-712">Todas as sobrecargas são suportadas</span><span class="sxs-lookup"><span data-stu-id="dc3c0-712">All overloads are supported</span></span>  
  
 <span data-ttu-id="dc3c0-713">.NET para aplicativos da Windows Store</span><span class="sxs-lookup"><span data-stu-id="dc3c0-713">.NET for Windows Store apps</span></span>  
 <span data-ttu-id="dc3c0-714">Todas as sobrecargas são suportadas em: Windows 8</span><span class="sxs-lookup"><span data-stu-id="dc3c0-714">All overloads are supported in: Windows 8</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Ceiling(System.Decimal)" />
        <altmember cref="M:System.Math.Floor(System.Decimal)" />
        <altmember cref="M:System.Math.Truncate(System.Decimal)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (d As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Round(System::Decimal d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="dc3c0-715">Um número decimal a ser arredondado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-715">A decimal number to be rounded.</span></span></param>
        <summary><span data-ttu-id="dc3c0-716">Arredonda um valor decimal para o valor inteiro mais próximo.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-716">Rounds a decimal value to the nearest integral value.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-717">O parâmetro <paramref name="d" /> mais próximo do inteiro.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-717">The integer nearest parameter <paramref name="d" />.</span></span> <span data-ttu-id="dc3c0-718">Se o componente fracionário de <paramref name="d" /> estiver entre dois inteiros, sendo um deles par e o outro ímpar, o número par será retornado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-718">If the fractional component of <paramref name="d" /> is halfway between two integers, one of which is even and the other odd, the even number is returned.</span></span> <span data-ttu-id="dc3c0-719">Observe que esse método retorna um <see cref="T:System.Decimal" /> em vez de um tipo integral.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-719">Note that this method returns a <see cref="T:System.Decimal" /> instead of an integral type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="dc3c0-720">Para obter exemplos e informações de uso abrangentes sobre esta e outras sobrecargas do método `Round`, consulte a página de referência do <xref:System.Math.Round%2A>.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-720">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="dc3c0-721">O resultado é fora do intervalo de um <see cref="T:System.Decimal" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-721">The result is outside the range of a <see cref="T:System.Decimal" />.</span></span></exception>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static double Round (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Round(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Round(double a);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="dc3c0-722">Um número de ponto flutuante de precisão dupla a ser arredondado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-722">A double-precision floating-point number to be rounded.</span></span></param>
        <summary><span data-ttu-id="dc3c0-723">Arredonda um valor de ponto flutuante de precisão dupla para o valor inteiro mais próximo.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-723">Rounds a double-precision floating-point value to the nearest integral value.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-724">O inteiro mais próximo de <paramref name="a" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-724">The integer nearest <paramref name="a" />.</span></span> <span data-ttu-id="dc3c0-725">Se o componente fracionário de <paramref name="a" /> estiver entre dois inteiros, sendo um deles par e o outro ímpar, o número par será retornado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-725">If the fractional component of <paramref name="a" /> is halfway between two integers, one of which is even and the other odd, then the even number is returned.</span></span> <span data-ttu-id="dc3c0-726">Observe que esse método retorna um <see cref="T:System.Double" /> em vez de um tipo integral.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-726">Note that this method returns a <see cref="T:System.Double" /> instead of an integral type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="dc3c0-727">Para obter exemplos e informações de uso abrangentes sobre esta e outras sobrecargas do método `Round`, consulte a página de referência do <xref:System.Math.Round%2A>.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-727">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="dc3c0-728">Devido à perda de precisão que pode resultar de representando valores decimais como números de ponto flutuante ou executar operações aritméticas em valores de ponto flutuante, em alguns casos o <see cref="M:System.Math.Round(System.Double)" /> método não pode aparecer arredondar valores de ponto médio para o inteiro par mais próximo.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-728">Because of the loss of precision that can result from representing decimal values as floating-point numbers or performing arithmetic operations on floating-point values, in some cases the <see cref="M:System.Math.Round(System.Double)" /> method may not appear to round midpoint values to the nearest even integer.</span></span> <span data-ttu-id="dc3c0-729">No exemplo a seguir, porque o valor de ponto flutuante.1 não tem nenhuma representação binária finita, a primeira chamada para o <see cref="M:System.Math.Round(System.Double)" /> método com um valor de 11.5 retorna 11 em vez de 12.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-729">In the following example, because the floating-point value .1 has no finite binary representation, the first call to the <see cref="M:System.Math.Round(System.Double)" /> method with a value of 11.5 returns 11 instead of 12.</span></span>  
  
 [!code-csharp[System.Math.Round#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/round2.cs#1)]
 [!code-vb[System.Math.Round#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/round2.vb#1)]</para>
        </block>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d, int decimals);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d, int32 decimals) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Decimal,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (d As Decimal, decimals As Integer) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Round(System::Decimal d, int decimals);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
        <Parameter Name="decimals" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="dc3c0-730">Um número decimal a ser arredondado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-730">A decimal number to be rounded.</span></span></param>
        <param name="decimals"><span data-ttu-id="dc3c0-731">O número de casas decimais no valor retornado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-731">The number of decimal places in the return value.</span></span></param>
        <summary><span data-ttu-id="dc3c0-732">Arredonda um valor decimal para um número especificado de dígitos fracionários.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-732">Rounds a decimal value to a specified number of fractional digits.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-733">O número mais próximo de <paramref name="d" /> que contém um número de dígitos fracionários igual a <paramref name="decimals" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-733">The number nearest to <paramref name="d" /> that contains a number of fractional digits equal to <paramref name="decimals" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="dc3c0-734">Para obter exemplos e informações de uso abrangentes sobre esta e outras sobrecargas do método `Round`, consulte a página de referência do <xref:System.Math.Round%2A>.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-734">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="dc3c0-735"><paramref name="decimals" /> é menor que 0 ou maior que 28.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-735"><paramref name="decimals" /> is less than 0 or greater than 28.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="dc3c0-736">O resultado é fora do intervalo de um <see cref="T:System.Decimal" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-736">The result is outside the range of a <see cref="T:System.Decimal" />.</span></span></exception>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Decimal,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (d As Decimal, mode As MidpointRounding) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Round(System::Decimal d, MidpointRounding mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="dc3c0-737">Um número decimal a ser arredondado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-737">A decimal number to be rounded.</span></span></param>
        <param name="mode"><span data-ttu-id="dc3c0-738">Especificação de como arredondar <c>d</c> se o valor estiver entre dois outros números.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-738">Specification for how to round <c>d</c> if it is midway between two other numbers.</span></span></param>
        <summary><span data-ttu-id="dc3c0-739">Arredonda um valor decimal para o inteiro mais próximo.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-739">Rounds a decimal value to the nearest integer.</span></span> <span data-ttu-id="dc3c0-740">Um parâmetro especifica como arredondar o valor caso esteja entre dois números.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-740">A parameter specifies how to round the value if it is midway between two numbers.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-741">O inteiro mais próximo de <paramref name="d" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-741">The integer nearest <paramref name="d" />.</span></span> <span data-ttu-id="dc3c0-742">Se <paramref name="d" /> estiver entre dois números, sendo um deles par e o outro ímpar, <paramref name="mode" /> determinará qual dos dois será retornado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-742">If <paramref name="d" /> is halfway between two numbers, one of which is even and the other odd, then <paramref name="mode" /> determines which of the two is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="dc3c0-743">Para obter exemplos e informações de uso abrangentes sobre esta e outras sobrecargas do método `Round`, consulte a página de referência do <xref:System.Math.Round%2A>.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-743">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="dc3c0-744"><paramref name="mode" /> não é um valor válido de <see cref="T:System.MidpointRounding" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-744"><paramref name="mode" /> is not a valid value of <see cref="T:System.MidpointRounding" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="dc3c0-745">O resultado é fora do intervalo de um <see cref="T:System.Decimal" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-745">The result is outside the range of a <see cref="T:System.Decimal" />.</span></span></exception>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.MidpointRounding)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static double Round (double value, int digits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Round(float64 value, int32 digits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Double,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (value As Double, digits As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Round(double value, int digits);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="digits" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc3c0-746">Um número de ponto flutuante de precisão dupla a ser arredondado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-746">A double-precision floating-point number to be rounded.</span></span></param>
        <param name="digits"><span data-ttu-id="dc3c0-747">O número de dígitos fracionários no valor de retorno.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-747">The number of fractional digits in the return value.</span></span></param>
        <summary><span data-ttu-id="dc3c0-748">Arredonda um valor de ponto flutuante de precisão dupla para um número especificado de dígitos fracionários.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-748">Rounds a double-precision floating-point value to a specified number of fractional digits.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-749">O número mais próximo de <paramref name="value" /> que contém um número de dígitos fracionários igual a <paramref name="digits" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-749">The number nearest to <paramref name="value" /> that contains a number of fractional digits equal to <paramref name="digits" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="dc3c0-750">Para obter exemplos e informações de uso abrangentes sobre esta e outras sobrecargas do método `Round`, consulte a página de referência do <xref:System.Math.Round%2A>.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-750">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="dc3c0-751"><paramref name="digits" /> é menor que 0 ou maior que 15.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-751"><paramref name="digits" /> is less than 0 or greater than 15.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="dc3c0-752">Devido à perda de precisão que pode resultar de representando valores decimais como números de ponto flutuante ou executar operações aritméticas em valores de ponto flutuante, em alguns casos o <see cref="M:System.Math.Round(System.Double,System.Int32)" /> método não pode aparecer arredondar valores de ponto médio para o mesmo valor em mais próximo a <paramref name="digits" /> posição decimal.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-752">Because of the loss of precision that can result from representing decimal values as floating-point numbers or performing arithmetic operations on floating-point values, in some cases the <see cref="M:System.Math.Round(System.Double,System.Int32)" /> method may not appear to round midpoint values to the nearest even value in the <paramref name="digits" /> decimal position.</span></span> <span data-ttu-id="dc3c0-753">Isso é ilustrado no exemplo a seguir, onde 2.135 é arredondado para 2.13 em vez de 2.14.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-753">This is illustrated in the following example, where 2.135 is rounded to 2.13 instead of 2.14.</span></span> <span data-ttu-id="dc3c0-754">Isso ocorre porque, internamente o método multiplica <paramref name="value" /> 10<sup>dígitos</sup>, e a operação de multiplicação sofre nesse caso de perda de precisão.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-754">This occurs because internally the method multiplies <paramref name="value" /> by 10<sup>digits</sup>, and the multiplication operation in this case suffers from a loss of precision.</span></span>  
  
 [!code-csharp[System.Math.Round#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/round3.cs#2)]
 [!code-vb[System.Math.Round#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/round3.vb#2)]</para>
        </block>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static double Round (double value, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Round(float64 value, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Double,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (value As Double, mode As MidpointRounding) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Round(double value, MidpointRounding mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc3c0-755">Um número de ponto flutuante de precisão dupla a ser arredondado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-755">A double-precision floating-point number to be rounded.</span></span></param>
        <param name="mode"><span data-ttu-id="dc3c0-756">Especificação de como arredondar um <c>valor</c> se ele estiver entre dois outros números.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-756">Specification for how to round <c>value</c> if it is midway between two other numbers.</span></span></param>
        <summary><span data-ttu-id="dc3c0-757">Arredonda um valor de ponto flutuante de precisão dupla para o inteiro mais próximo.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-757">Rounds a double-precision floating-point value to the nearest integer.</span></span> <span data-ttu-id="dc3c0-758">Um parâmetro especifica como arredondar o valor caso esteja entre dois números.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-758">A parameter specifies how to round the value if it is midway between two numbers.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-759">O inteiro mais próximo de <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-759">The integer nearest <paramref name="value" />.</span></span> <span data-ttu-id="dc3c0-760">Se <paramref name="value" /> estiver entre dois inteiros, sendo um deles par e o outro ímpar, <paramref name="mode" /> determinará qual dos dois será retornado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-760">If <paramref name="value" /> is halfway between two integers, one of which is even and the other odd, then <paramref name="mode" /> determines which of the two is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="dc3c0-761">Para obter exemplos e informações de uso abrangentes sobre esta e outras sobrecargas do método `Round`, consulte a página de referência do <xref:System.Math.Round%2A>.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-761">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="dc3c0-762"><paramref name="mode" /> não é um valor válido de <see cref="T:System.MidpointRounding" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-762"><paramref name="mode" /> is not a valid value of <see cref="T:System.MidpointRounding" />.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="dc3c0-763">Devido à perda de precisão que pode resultar de representando valores decimais como números de ponto flutuante ou executar operações aritméticas em valores de ponto flutuante, em alguns casos o <see cref="M:System.Math.Round(System.Double,System.MidpointRounding)" /> método não pode aparecer arredondar valores de ponto médio para o inteiro par mais próximo.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-763">Because of the loss of precision that can result from representing decimal values as floating-point numbers or performing arithmetic operations on floating-point values, in some cases the <see cref="M:System.Math.Round(System.Double,System.MidpointRounding)" /> method may not appear to round midpoint values to the nearest even integer.</span></span> <span data-ttu-id="dc3c0-764">No exemplo a seguir, porque o valor de ponto flutuante.1 não tem nenhuma representação binária finita, a primeira chamada para o <see cref="M:System.Math.Round(System.Double)" /> método com um valor de 11.5 retorna 11 em vez de 12.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-764">In the following example, because the floating-point value .1 has no finite binary representation, the first call to the <see cref="M:System.Math.Round(System.Double)" /> method with a value of 11.5 returns 11 instead of 12.</span></span>  
  
 [!code-csharp[System.Math.Round#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/round5.cs#4)]
 [!code-vb[System.Math.Round#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/round5.vb#4)]</para>
        </block>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.MidpointRounding)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d, int decimals, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d, int32 decimals, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (d As Decimal, decimals As Integer, mode As MidpointRounding) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Round(System::Decimal d, int decimals, MidpointRounding mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
        <Parameter Name="decimals" Type="System.Int32" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="dc3c0-765">Um número decimal a ser arredondado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-765">A decimal number to be rounded.</span></span></param>
        <param name="decimals"><span data-ttu-id="dc3c0-766">O número de casas decimais no valor retornado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-766">The number of decimal places in the return value.</span></span></param>
        <param name="mode"><span data-ttu-id="dc3c0-767">Especificação de como arredondar <c>d</c> se o valor estiver entre dois outros números.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-767">Specification for how to round <c>d</c> if it is midway between two other numbers.</span></span></param>
        <summary><span data-ttu-id="dc3c0-768">Arredonda um valor decimal para um número especificado de dígitos fracionários.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-768">Rounds a decimal value to a specified number of fractional digits.</span></span> <span data-ttu-id="dc3c0-769">Um parâmetro especifica como arredondar o valor caso esteja entre dois números.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-769">A parameter specifies how to round the value if it is midway between two numbers.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-770">O número mais próximo de <paramref name="d" /> que contém um número de dígitos fracionários igual a <paramref name="decimals" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-770">The number nearest to <paramref name="d" /> that contains a number of fractional digits equal to <paramref name="decimals" />.</span></span> <span data-ttu-id="dc3c0-771">Se <paramref name="d" /> tiver menos dígitos fracionários que <paramref name="decimals" />, <paramref name="d" /> será retornado inalterado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-771">If <paramref name="d" /> has fewer fractional digits than <paramref name="decimals" />, <paramref name="d" /> is returned unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="dc3c0-772">Para obter exemplos e informações de uso abrangentes sobre esta e outras sobrecargas do método `Round`, consulte a página de referência do <xref:System.Math.Round%2A>.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-772">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="dc3c0-773"><paramref name="decimals" /> é menor que 0 ou maior que 28.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-773"><paramref name="decimals" /> is less than 0 or greater than 28.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="dc3c0-774"><paramref name="mode" /> não é um valor válido de <see cref="T:System.MidpointRounding" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-774"><paramref name="mode" /> is not a valid value of <see cref="T:System.MidpointRounding" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="dc3c0-775">O resultado é fora do intervalo de um <see cref="T:System.Decimal" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-775">The result is outside the range of a <see cref="T:System.Decimal" />.</span></span></exception>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.Int32,System.MidpointRounding)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static double Round (double value, int digits, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Round(float64 value, int32 digits, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (value As Double, digits As Integer, mode As MidpointRounding) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Round(double value, int digits, MidpointRounding mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="digits" Type="System.Int32" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc3c0-776">Um número de ponto flutuante de precisão dupla a ser arredondado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-776">A double-precision floating-point number to be rounded.</span></span></param>
        <param name="digits"><span data-ttu-id="dc3c0-777">O número de dígitos fracionários no valor de retorno.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-777">The number of fractional digits in the return value.</span></span></param>
        <param name="mode"><span data-ttu-id="dc3c0-778">Especificação de como arredondar um <c>valor</c> se ele estiver entre dois outros números.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-778">Specification for how to round <c>value</c> if it is midway between two other numbers.</span></span></param>
        <summary><span data-ttu-id="dc3c0-779">Arredonda um valor de ponto flutuante de precisão dupla para um número especificado de dígitos fracionários.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-779">Rounds a double-precision floating-point value to a specified number of fractional digits.</span></span> <span data-ttu-id="dc3c0-780">Um parâmetro especifica como arredondar o valor caso esteja entre dois números.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-780">A parameter specifies how to round the value if it is midway between two numbers.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-781">O número mais próximo de <paramref name="value" /> que tem um número de dígitos fracionários igual a <paramref name="digits" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-781">The number nearest to <paramref name="value" /> that has a number of fractional digits equal to <paramref name="digits" />.</span></span> <span data-ttu-id="dc3c0-782">Se <paramref name="value" /> tiver menos dígitos fracionários que <paramref name="digits" />, <paramref name="value" /> será retornado inalterado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-782">If <paramref name="value" /> has fewer fractional digits than <paramref name="digits" />, <paramref name="value" /> is returned unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="dc3c0-783">Para obter exemplos e informações de uso abrangentes sobre esta e outras sobrecargas do método `Round`, consulte a página de referência do <xref:System.Math.Round%2A>.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-783">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="dc3c0-784"><paramref name="digits" /> é menor que 0 ou maior que 15.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-784"><paramref name="digits" /> is less than 0 or greater than 15.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="dc3c0-785"><paramref name="mode" /> não é um valor válido de <see cref="T:System.MidpointRounding" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-785"><paramref name="mode" /> is not a valid value of <see cref="T:System.MidpointRounding" />.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="dc3c0-786">Devido à perda de precisão que pode resultar de representando valores decimais como números de ponto flutuante ou executar operações aritméticas em valores de ponto flutuante, em alguns casos o <see cref="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)" /> método não pode aparecer arredondar valores de ponto médio especificado pelo <paramref name="mode" /> parâmetro.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-786">Because of the loss of precision that can result from representing decimal values as floating-point numbers or performing arithmetic operations on floating-point values, in some cases the <see cref="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)" /> method may not appear to round midpoint values as specified by the <paramref name="mode" /> parameter.</span></span> <span data-ttu-id="dc3c0-787">Isso é ilustrado no exemplo a seguir, onde 2.135 é arredondado para 2.13 em vez de 2.14.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-787">This is illustrated in the following example, where 2.135 is rounded to 2.13 instead of 2.14.</span></span> <span data-ttu-id="dc3c0-788">Isso ocorre porque, internamente o método multiplica <paramref name="value" /> 10<sup>dígitos</sup>, e a operação de multiplicação sofre nesse caso de perda de precisão.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-788">This occurs because internally the method multiplies <paramref name="value" /> by 10<sup>digits</sup>, and the multiplication operation in this case suffers from a loss of precision.</span></span>  
  
 [!code-csharp[System.Math.Round#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/round4.cs#3)]
 [!code-vb[System.Math.Round#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/round4.vb#3)]</para>
        </block>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.Int32,System.MidpointRounding)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Sign">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="dc3c0-789">Retorna um inteiro que indica o sinal de um número.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-789">Returns an integer that indicates the sign of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc3c0-790">Um número decimal com sinal.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-790">A signed decimal number.</span></span></param>
        <summary><span data-ttu-id="dc3c0-791">Retorna um inteiro que indica o sinal de um número decimal.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-791">Returns an integer that indicates the sign of a decimal number.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-792">Um número que indica o sinal de <paramref name="value" />, conforme mostrado na tabela a seguir.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-792">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="dc3c0-793"><list type="table"><listheader><term> Valor retornado</span><span class="sxs-lookup"><span data-stu-id="dc3c0-793"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="dc3c0-794"></term><description> Significado</span><span class="sxs-lookup"><span data-stu-id="dc3c0-794"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="dc3c0-795"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="dc3c0-795"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="dc3c0-796"></term><description><paramref name="value" /> é menor que zero.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-796"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="dc3c0-797"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="dc3c0-797"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="dc3c0-798"></term><description><paramref name="value" /> é igual a zero.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-798"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="dc3c0-799"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="dc3c0-799"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="dc3c0-800"></term><description><paramref name="value" /> é maior que zero.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-800"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-801">O exemplo a seguir demonstra como usar o <xref:System.Math.Sign%28System.Decimal%29> método para determinar o sinal de um <xref:System.Decimal> valor e exibi-lo no console.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-801">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Decimal%29> method to determine the sign of a <xref:System.Decimal> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc3c0-802">Um número assinado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-802">A signed number.</span></span></param>
        <summary><span data-ttu-id="dc3c0-803">Retorna um inteiro que indica o sinal de um número de ponto flutuante de precisão dupla.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-803">Returns an integer that indicates the sign of a double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-804">Um número que indica o sinal de <paramref name="value" />, conforme mostrado na tabela a seguir.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-804">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="dc3c0-805"><list type="table"><listheader><term> Valor retornado</span><span class="sxs-lookup"><span data-stu-id="dc3c0-805"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="dc3c0-806"></term><description> Significado</span><span class="sxs-lookup"><span data-stu-id="dc3c0-806"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="dc3c0-807"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="dc3c0-807"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="dc3c0-808"></term><description><paramref name="value" /> é menor que zero.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-808"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="dc3c0-809"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="dc3c0-809"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="dc3c0-810"></term><description><paramref name="value" /> é igual a zero.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-810"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="dc3c0-811"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="dc3c0-811"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="dc3c0-812"></term><description><paramref name="value" /> é maior que zero.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-812"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-813">O exemplo a seguir demonstra como usar o <xref:System.Math.Sign%28System.Double%29> método para determinar o sinal de um <xref:System.Double> valor e exibi-lo no console.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-813">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Double%29> method to determine the sign of a <xref:System.Double> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArithmeticException">
          <span data-ttu-id="dc3c0-814"><paramref name="value" /> é igual a <see cref="F:System.Double.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-814"><paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc3c0-815">Um número assinado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-815">A signed number.</span></span></param>
        <summary><span data-ttu-id="dc3c0-816">Retorna um inteiro que indica o sinal de um inteiro com sinal de 16 bits.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-816">Returns an integer that indicates the sign of a 16-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-817">Um número que indica o sinal de <paramref name="value" />, conforme mostrado na tabela a seguir.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-817">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="dc3c0-818"><list type="table"><listheader><term> Valor retornado</span><span class="sxs-lookup"><span data-stu-id="dc3c0-818"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="dc3c0-819"></term><description> Significado</span><span class="sxs-lookup"><span data-stu-id="dc3c0-819"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="dc3c0-820"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="dc3c0-820"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="dc3c0-821"></term><description><paramref name="value" /> é menor que zero.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-821"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="dc3c0-822"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="dc3c0-822"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="dc3c0-823"></term><description><paramref name="value" /> é igual a zero.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-823"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="dc3c0-824"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="dc3c0-824"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="dc3c0-825"></term><description><paramref name="value" /> é maior que zero.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-825"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-826">O exemplo a seguir demonstra como usar o <xref:System.Math.Sign%28System.Int16%29> método para determinar o sinal de um <xref:System.Int16> valor e exibi-lo no console.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-826">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Int16%29> method to determine the sign of an <xref:System.Int16> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc3c0-827">Um número assinado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-827">A signed number.</span></span></param>
        <summary><span data-ttu-id="dc3c0-828">Retorna um inteiro que indica o sinal de um inteiro com sinal de 32 bits.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-828">Returns an integer that indicates the sign of a 32-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-829">Um número que indica o sinal de <paramref name="value" />, conforme mostrado na tabela a seguir.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-829">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="dc3c0-830"><list type="table"><listheader><term> Valor retornado</span><span class="sxs-lookup"><span data-stu-id="dc3c0-830"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="dc3c0-831"></term><description> Significado</span><span class="sxs-lookup"><span data-stu-id="dc3c0-831"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="dc3c0-832"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="dc3c0-832"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="dc3c0-833"></term><description><paramref name="value" /> é menor que zero.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-833"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="dc3c0-834"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="dc3c0-834"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="dc3c0-835"></term><description><paramref name="value" /> é igual a zero.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-835"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="dc3c0-836"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="dc3c0-836"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="dc3c0-837"></term><description><paramref name="value" /> é maior que zero.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-837"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-838">O exemplo a seguir demonstra como usar o <xref:System.Math.Sign%28System.Int32%29> método para determinar o sinal de um <xref:System.Int32> valor e exibi-lo no console.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-838">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Int32%29> method to determine the sign of an <xref:System.Int32> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc3c0-839">Um número assinado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-839">A signed number.</span></span></param>
        <summary><span data-ttu-id="dc3c0-840">Retorna um inteiro que indica o sinal de um inteiro com sinal de 64 bits.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-840">Returns an integer that indicates the sign of a 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-841">Um número que indica o sinal de <paramref name="value" />, conforme mostrado na tabela a seguir.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-841">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="dc3c0-842"><list type="table"><listheader><term> Valor retornado</span><span class="sxs-lookup"><span data-stu-id="dc3c0-842"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="dc3c0-843"></term><description> Significado</span><span class="sxs-lookup"><span data-stu-id="dc3c0-843"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="dc3c0-844"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="dc3c0-844"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="dc3c0-845"></term><description><paramref name="value" /> é menor que zero.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-845"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="dc3c0-846"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="dc3c0-846"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="dc3c0-847"></term><description><paramref name="value" /> é igual a zero.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-847"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="dc3c0-848"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="dc3c0-848"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="dc3c0-849"></term><description><paramref name="value" /> é maior que zero.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-849"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-850">O exemplo a seguir demonstra como usar o <xref:System.Math.Sign%28System.Int64%29> método para determinar o sinal de um <xref:System.Int64> valor e exibi-lo no console.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-850">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Int64%29> method to determine the sign of an <xref:System.Int64> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc3c0-851">Um número assinado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-851">A signed number.</span></span></param>
        <summary><span data-ttu-id="dc3c0-852">Retorna um inteiro que indica o sinal de um inteiro com sinal de 8 bits.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-852">Returns an integer that indicates the sign of an 8-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-853">Um número que indica o sinal de <paramref name="value" />, conforme mostrado na tabela a seguir.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-853">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="dc3c0-854"><list type="table"><listheader><term> Valor retornado</span><span class="sxs-lookup"><span data-stu-id="dc3c0-854"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="dc3c0-855"></term><description> Significado</span><span class="sxs-lookup"><span data-stu-id="dc3c0-855"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="dc3c0-856"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="dc3c0-856"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="dc3c0-857"></term><description><paramref name="value" /> é menor que zero.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-857"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="dc3c0-858"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="dc3c0-858"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="dc3c0-859"></term><description><paramref name="value" /> é igual a zero.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-859"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="dc3c0-860"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="dc3c0-860"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="dc3c0-861"></term><description><paramref name="value" /> é maior que zero.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-861"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-862">O exemplo a seguir demonstra como usar o <xref:System.Math.Sign%28System.SByte%29> método para determinar o sinal de um <xref:System.SByte> valor e exibi-lo no console.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-862">The following example demonstrates how to use the <xref:System.Math.Sign%28System.SByte%29> method to determine the sign of an <xref:System.SByte> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc3c0-863">Um número assinado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-863">A signed number.</span></span></param>
        <summary><span data-ttu-id="dc3c0-864">Retorna um inteiro que indica o sinal de um número de ponto flutuante de precisão simples.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-864">Returns an integer that indicates the sign of a single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-865">Um número que indica o sinal de <paramref name="value" />, conforme mostrado na tabela a seguir.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-865">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="dc3c0-866"><list type="table"><listheader><term> Valor retornado</span><span class="sxs-lookup"><span data-stu-id="dc3c0-866"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="dc3c0-867"></term><description> Significado</span><span class="sxs-lookup"><span data-stu-id="dc3c0-867"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="dc3c0-868"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="dc3c0-868"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="dc3c0-869"></term><description><paramref name="value" /> é menor que zero.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-869"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="dc3c0-870"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="dc3c0-870"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="dc3c0-871"></term><description><paramref name="value" /> é igual a zero.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-871"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="dc3c0-872"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="dc3c0-872"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="dc3c0-873"></term><description><paramref name="value" /> é maior que zero.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-873"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-874">O exemplo a seguir demonstra como usar o <xref:System.Math.Sign%28System.Single%29> método para determinar o sinal de um <xref:System.Single> valor e exibi-lo no console.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-874">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Single%29> method to determine the sign of a <xref:System.Single> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArithmeticException">
          <span data-ttu-id="dc3c0-875"><paramref name="value" /> é igual a <see cref="F:System.Single.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-875"><paramref name="value" /> is equal to <see cref="F:System.Single.NaN" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sin">
      <MemberSignature Language="C#" Value="public static double Sin (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sin(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sin(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sin (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Sin(double a);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="dc3c0-876">Um ângulo, medido em radianos.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-876">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="dc3c0-877">Retorna o seno do ângulo especificado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-877">Returns the sine of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-878">O seno de <paramref name="a" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-878">The sine of <paramref name="a" />.</span></span> <span data-ttu-id="dc3c0-879">Se <paramref name="a" /> for igual a <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> ou <see cref="F:System.Double.PositiveInfinity" />, esse método retornará <see cref="F:System.Double.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-879">If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-880">O ângulo, `a`, devem ser em radianos.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-880">The angle, `a`, must be in radians.</span></span> <span data-ttu-id="dc3c0-881">Multiplique por <xref:System.Math.PI?displayProperty=nameWithType>/180 para converter graus em radianos.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-881">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
 <span data-ttu-id="dc3c0-882">Os valores aceitáveis de `a` variam de aproximadamente-9223372036854775295 a aproximadamente 9223372036854775295.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-882">Acceptable values of `a` range from approximately -9223372036854775295 to approximately 9223372036854775295.</span></span> <span data-ttu-id="dc3c0-883">Para valores fora desse intervalo, o <xref:System.Math.Sin%2A> método retorna `a` inalterado em vez de gerar uma exceção.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-883">For values outside of this range, the <xref:System.Math.Sin%2A> method returns `a` unchanged rather than throwing an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-884">O exemplo a seguir usa <xref:System.Math.Sin%2A> para avaliar determinadas identidades trigonométricas para ângulos selecionadas.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-884">The following example uses <xref:System.Math.Sin%2A> to evaluate certain trigonometric identities for selected angles.</span></span>  
  
 [!code-cpp[System.Math.SinCos#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.SinCos/CPP/sincos.cpp#1)]
 [!code-csharp[System.Math.SinCos#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.SinCos/CS/sincos.cs#1)]
 [!code-vb[System.Math.SinCos#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.SinCos/VB/sincos.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public static double Sinh (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sinh(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sinh (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Sinh(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc3c0-885">Um ângulo, medido em radianos.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-885">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="dc3c0-886">Retorna o seno hiperbólico do ângulo especificado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-886">Returns the hyperbolic sine of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-887">O seno hiperbólico de <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-887">The hyperbolic sine of <paramref name="value" />.</span></span> <span data-ttu-id="dc3c0-888">Se <paramref name="value" /> for igual a <see cref="F:System.Double.NegativeInfinity" />, <see cref="F:System.Double.PositiveInfinity" /> ou <see cref="F:System.Double.NaN" />, o método retornará um <see cref="T:System.Double" /> igual a <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-888">If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NaN" />, this method returns a <see cref="T:System.Double" /> equal to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-889">O ângulo, `value`, devem ser em radianos.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-889">The angle, `value`, must be in radians.</span></span> <span data-ttu-id="dc3c0-890">Multiplique por <xref:System.Math.PI?displayProperty=nameWithType>/180 para converter graus em radianos.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-890">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-891">O exemplo a seguir usa <xref:System.Math.Sinh%2A> para avaliar determinadas identidades hiperbólica para valores selecionados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-891">The following example uses <xref:System.Math.Sinh%2A> to evaluate certain hyperbolic identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.SinhCosh#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.SinhCosh/CPP/sinhcosh.cpp#1)]
 [!code-csharp[System.Math.SinhCosh#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.SinhCosh/CS/sinhcosh.cs#1)]
 [!code-vb[System.Math.SinhCosh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.SinhCosh/VB/sinhcosh.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sqrt">
      <MemberSignature Language="C#" Value="public static double Sqrt (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sqrt(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sqrt(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sqrt (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Sqrt(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="dc3c0-892">O número cuja raiz quadrada deve ser encontrada.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-892">The number whose square root is to be found.</span></span></param>
        <summary><span data-ttu-id="dc3c0-893">Retorna a raiz quadrada de um número especificado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-893">Returns the square root of a specified number.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-894">Um dos valores na tabela a seguir.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-894">One of the values in the following table.</span></span>  
  
 <span data-ttu-id="dc3c0-895">Parâmetro <list type="table"><listheader><term><paramref name="d" /></span><span class="sxs-lookup"><span data-stu-id="dc3c0-895"><list type="table"><listheader><term><paramref name="d" /> parameter</span></span>  
  
 <span data-ttu-id="dc3c0-896"></term><description> Valor retornado</span><span class="sxs-lookup"><span data-stu-id="dc3c0-896"></term><description> Return value</span></span>  
  
 <span data-ttu-id="dc3c0-897"></description></listheader><item><term> Zero ou positivo</span><span class="sxs-lookup"><span data-stu-id="dc3c0-897"></description></listheader><item><term> Zero or positive</span></span>  
  
 <span data-ttu-id="dc3c0-898"></term><description> A raiz quadrada positiva de <paramref name="d" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-898"></term><description> The positive square root of <paramref name="d" />.</span></span>  
  
 <span data-ttu-id="dc3c0-899"></description></item><item><term> Negativo</span><span class="sxs-lookup"><span data-stu-id="dc3c0-899"></description></item><item><term> Negative</span></span>  
  
 <span data-ttu-id="dc3c0-900"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> é igual a <see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> é igual a <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></span><span class="sxs-lookup"><span data-stu-id="dc3c0-900"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equals <see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equals <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc3c0-901">A raiz quadrada da área de um quadrado representa o comprimento de qualquer lado do quadrado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-901">The square root of the area of a square represents the length of any side of the square.</span></span> <span data-ttu-id="dc3c0-902">O exemplo a seguir exibe a área de algumas cidades nos Estados Unidos e fornece uma impressão do tamanho de cada cidade, se ele foi representado por um quadrado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-902">The following example displays the area of some cities in the United States and gives an impression of each city's size if it were represented by a square.</span></span>  
  
 [!code-csharp[System.Math.Sqrt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.sqrt/cs/sqrt1.cs#1)]
 [!code-vb[System.Math.Sqrt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.sqrt/vb/sqrt1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Pow(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Tan">
      <MemberSignature Language="C#" Value="public static double Tan (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Tan(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Tan(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tan (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Tan(double a);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="dc3c0-903">Um ângulo, medido em radianos.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-903">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="dc3c0-904">Retorna a tangente do ângulo especificado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-904">Returns the tangent of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-905">A tangente de <paramref name="a" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-905">The tangent of <paramref name="a" />.</span></span> <span data-ttu-id="dc3c0-906">Se <paramref name="a" /> for igual a <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> ou <see cref="F:System.Double.PositiveInfinity" />, esse método retornará <see cref="F:System.Double.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-906">If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-907">O ângulo, `a`, devem ser em radianos.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-907">The angle, `a`, must be in radians.</span></span> <span data-ttu-id="dc3c0-908">Multiplique por <xref:System.Math.PI?displayProperty=nameWithType>/180 para converter graus em radianos.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-908">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-909">O exemplo a seguir demonstra como calcular a tangente de um ângulo e exibi-lo no console.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-909">The following example demonstrates how to calculate the tangent of an angle and display it to the console.</span></span>  
  
 [!code-cpp[math.atanx#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.atanx/CPP/atan.cpp#1)]
 [!code-csharp[math.atanx#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.atanx/CS/atan.cs#1)]
 [!code-vb[math.atanx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.atanx/VB/atan.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public static double Tanh (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Tanh(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Tanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tanh (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Tanh(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc3c0-910">Um ângulo, medido em radianos.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-910">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="dc3c0-911">Retorna a tangente hiperbólica do ângulo especificado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-911">Returns the hyperbolic tangent of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-912">A tangente hiperbólica de <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-912">The hyperbolic tangent of <paramref name="value" />.</span></span> <span data-ttu-id="dc3c0-913">Se <paramref name="value" /> for igual a <see cref="F:System.Double.NegativeInfinity" />, esse método retornará -1.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-913">If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" />, this method returns -1.</span></span> <span data-ttu-id="dc3c0-914">Se o valor for igual a <see cref="F:System.Double.PositiveInfinity" />, esse método retornará 1.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-914">If value is equal to <see cref="F:System.Double.PositiveInfinity" />, this method returns 1.</span></span> <span data-ttu-id="dc3c0-915">Se <paramref name="value" /> for igual a <see cref="F:System.Double.NaN" />, esse método retornará <see cref="F:System.Double.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-915">If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />, this method returns <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-916">O ângulo, `value`, devem ser em radianos.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-916">The angle, `value`, must be in radians.</span></span> <span data-ttu-id="dc3c0-917">Multiplique por <xref:System.Math.PI?displayProperty=nameWithType>/180 para converter graus em radianos.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-917">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-918">O exemplo a seguir usa <xref:System.Math.Tanh%2A> para avaliar determinadas identidades tangentes hiperbólica para valores selecionados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-918">The following example uses <xref:System.Math.Tanh%2A> to evaluate certain hyperbolic tangent identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.Tanh#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.Tanh/CPP/tanh.cpp#1)]
 [!code-csharp[System.Math.Tanh#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Tanh/CS/tanh.cs#1)]
 [!code-vb[System.Math.Tanh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Tanh/VB/tanh.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Truncate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="dc3c0-919">Calcula a parte integral de um número.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-919">Calculates the integral part of a number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-920">O número será arredondado para o inteiro mais próximo em direção a zero.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-920">The number is rounded to the nearest integer towards zero.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Truncate">
      <MemberSignature Language="C#" Value="public static decimal Truncate (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Truncate(valuetype System.Decimal d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Truncate(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Truncate (d As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Truncate(System::Decimal d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="dc3c0-921">Um número a ser truncado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-921">A number to truncate.</span></span></param>
        <summary><span data-ttu-id="dc3c0-922">Calcula a parte integral de um número decimal especificado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-922">Calculates the integral part of a specified decimal number.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-923">A parte integral do <paramref name="d" />; ou seja, o número que permanece depois que os dígitos fracionários foram descartados.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-923">The integral part of <paramref name="d" />; that is, the number that remains after any fractional digits have been discarded.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-924"><xref:System.Math.Truncate%2A> Arredonda `d` para o inteiro mais próximo em direção a zero.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-924"><xref:System.Math.Truncate%2A> rounds `d` to the nearest integer towards zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-925">A exemplo a seguir chama o <xref:System.Math.Truncate%28System.Decimal%29> método truncar um positivo e um negativo <xref:System.Decimal> valor.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-925">The following example calls the <xref:System.Math.Truncate%28System.Decimal%29> method to truncate both a positive and a negative <xref:System.Decimal> value.</span></span>  
  
 [!code-csharp[System.Math.Truncate#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Truncate/cs/Truncate1.cs#2)]
 [!code-vb[System.Math.Truncate#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Truncate/vb/Truncate1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Ceiling(System.Decimal)" />
        <altmember cref="M:System.Math.Floor(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Truncate">
      <MemberSignature Language="C#" Value="public static double Truncate (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Truncate(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Truncate(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Truncate (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Truncate(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="dc3c0-926">Um número a ser truncado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-926">A number to truncate.</span></span></param>
        <summary><span data-ttu-id="dc3c0-927">Calcula a parte integral de um número de ponto flutuante de precisão dupla especificado.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-927">Calculates the integral part of a specified double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="dc3c0-928">A parte integral do <paramref name="d" />; ou seja, o número que permanece depois que os dígitos fracionários tiverem sido descartados ou um dos valores listados na tabela a seguir.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-928">The integral part of <paramref name="d" />; that is, the number that remains after any fractional digits have been discarded, or one of the values listed in the following table.</span></span>  
  
 <span data-ttu-id="dc3c0-929"><list type="table"><listheader><term><paramref name="d" /></term><description> Valor retornado</span><span class="sxs-lookup"><span data-stu-id="dc3c0-929"><list type="table"><listheader><term><paramref name="d" /></term><description> Return value</span></span>  
  
 </description></listheader><item><term><see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term><see cref="F:System.Double.NegativeInfinity" /></term><description><see cref="F:System.Double.NegativeInfinity" /></description></item><item><term><see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc3c0-930"><xref:System.Math.Truncate%2A> Arredonda `d` para o inteiro mais próximo em direção a zero.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-930"><xref:System.Math.Truncate%2A> rounds `d` to the nearest integer towards zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc3c0-931">A exemplo a seguir chama o <xref:System.Math.Truncate%28System.Double%29> método truncar um positivo e um negativo <xref:System.Double> valor.</span><span class="sxs-lookup"><span data-stu-id="dc3c0-931">The following example calls the <xref:System.Math.Truncate%28System.Double%29> method to truncate both a positive and a negative <xref:System.Double> value.</span></span>  
  
 [!code-csharp[System.Math.Truncate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Truncate/cs/Truncate1.cs#1)]
 [!code-vb[System.Math.Truncate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Truncate/vb/Truncate1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
      </Docs>
    </Member>
  </Members>
</Type>