<Type Name="Func&lt;TResult&gt;" FullName="System.Func&lt;TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0599c71b76782f0ec10ee69ac1d90dd08f0035e5" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37727777" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;out TResult&gt;();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`1&lt;+ TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of Out TResult)() As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public delegate TResult Func();" />
  <TypeSignature Language="F#" Value="type Func&lt;'Result&gt; = delegate of unit -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TResult">O tipo do valor retornado do método encapsulado por esse delegado.</typeparam>
    <summary>Encapsula um método que não tem parâmetros e retorna um valor do tipo especificado pelo parâmetro <typeparamref name="TResult" />.</summary>
    <returns>O valor retornado do método encapsulado por esse delegado.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode usar esse delegado para representar um método que pode ser passado como um parâmetro sem declarar explicitamente um delegado personalizado. O método encapsulado deve corresponder à assinatura do método que é definida por esse delegado. Isso significa que o método encapsulado não deve ter nenhum parâmetro e deve retornar um valor.  
  
> [!NOTE]
>  Para fazer referência a um método que não tem parâmetros e retorna `void` (ou no Visual Basic, que é declarado como um `Sub` em vez de como um `Function`), use o <xref:System.Action> delegado em vez disso.  
  
 Quando você usa o <xref:System.Func%601> delegado, você não precisa definir explicitamente um delegado que encapsula um método sem parâmetros. Por exemplo, o código a seguir declara explicitamente um delegado chamado `WriteMethod` e atribui uma referência para o `OutputTarget.SendToFile` método para sua instância do delegado de instância.  
  
 [!code-csharp[System.Func~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)]
 [!code-vb[System.Func~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)]  
  
 O exemplo a seguir simplifica esse código pela instanciação de <xref:System.Func%601> delegado em vez de explicitamente definindo um novo delegado e atribuí-lo um método nomeado.  
  
 [!code-csharp[System.Func~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)]
 [!code-vb[System.Func~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)]  
  
 Você pode usar o <xref:System.Func%601> delegar com métodos anônimos no c#, como mostra o exemplo a seguir. (Para obter uma introdução aos métodos anônimos, consulte [métodos anônimos](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Func~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)]  
  
 Você também pode atribuir uma expressão lambda para uma <xref:System.Func%602> delegar, como mostra o exemplo a seguir. (Para obter uma introdução às expressões lambda, consulte [expressões Lambda](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) e [expressões Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Func~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)]
 [!code-vb[System.Func~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)]  
  
 O tipo subjacente de uma expressão lambda é um dos genéricos `Func` delegados. Isso torna possível passar uma expressão lambda como um parâmetro sem explicitamente atribuí-lo a um delegado. Em particular, porque muitos métodos de tipos na <xref:System.Linq> namespace tiver `Func` parâmetros, você pode passar esses métodos de uma expressão lambda sem instanciar explicitamente um `Func` delegar.  
  
 Se você tiver uma computação cara que você deseja executar somente se o resultado é realmente necessário, você pode atribuir a função cara para um <xref:System.Func%601> delegar. A execução da função, em seguida, pode ser atrasada até que uma propriedade que acessa o valor é usada em uma expressão. O exemplo na próxima seção demonstra como fazer isso.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como usar um delegado que não usa nenhum parâmetro. Esse código cria uma classe genérica chamada `LazyValue` que tem um campo do tipo <xref:System.Func%601>. Este campo de delegado pode armazenar uma referência a qualquer função que retorna um valor do tipo que corresponde ao parâmetro de tipo do `LazyValue` objeto. O `LazyValue` tipo também tem um `Value` propriedade que executa a função (se ele já não foi executado) e retorna o valor resultante.  
  
 O exemplo cria dois métodos e instancia dois `LazyValue` objetos com expressões lambda que chamam esses métodos. As expressões lambda não obtêm parâmetros porque eles só precisam chamar um método. Como mostra a saída, os dois métodos são executados somente quando o valor de cada `LazyValue` objeto é recuperado.  
  
 [!code-csharp[System.Func~1#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Example.cs#5)]
 [!code-vb[System.Func~1#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>