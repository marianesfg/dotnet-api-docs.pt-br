<Type Name="Func&lt;TResult&gt;" FullName="System.Func&lt;TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="32bfd87c717460eeca143861ae42f3f64042f133" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30729720" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;out TResult&gt;();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`1&lt;+ TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of Out TResult)() As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public delegate TResult Func();" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TResult">
      <span data-ttu-id="cc3a8-101">O tipo do valor retornado do método encapsulado por esse delegado.</span>
      <span class="sxs-lookup">
        <span data-stu-id="cc3a8-101">The type of the return value of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="cc3a8-102">Encapsula um método que não tem parâmetros e retorna um valor do tipo especificado pelo parâmetro <typeparamref name="TResult" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="cc3a8-102">Encapsulates a method that has no parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span>
      </span>
    </summary>
    <returns>
      <span data-ttu-id="cc3a8-103">O valor retornado do método encapsulado por esse delegado.</span>
      <span class="sxs-lookup">
        <span data-stu-id="cc3a8-103">The return value of the method that this delegate encapsulates.</span>
      </span>
    </returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc3a8-104">Você pode usar este delegado para representar um método que pode ser passado como um parâmetro sem declarar explicitamente um delegado personalizado.</span><span class="sxs-lookup"><span data-stu-id="cc3a8-104">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="cc3a8-105">O método encapsulado deve corresponder à assinatura do método que é definida por este delegado.</span><span class="sxs-lookup"><span data-stu-id="cc3a8-105">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="cc3a8-106">Isso significa que o método encapsulado não deve ter parâmetros e deve retornar um valor.</span><span class="sxs-lookup"><span data-stu-id="cc3a8-106">This means that the encapsulated method must have no parameters and must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc3a8-107">Para fazer referência a um método que não tem parâmetros e retorna `void` (ou no Visual Basic, que é declarado como um `Sub` em vez de como um `Function`), use o <xref:System.Action> delegado em vez disso.</span><span class="sxs-lookup"><span data-stu-id="cc3a8-107">To reference a method that has no parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the <xref:System.Action> delegate instead.</span></span>  
  
 <span data-ttu-id="cc3a8-108">Quando você usa o <xref:System.Func%601> delegado, você não precisa definir explicitamente um delegado que encapsula um método sem parâmetros.</span><span class="sxs-lookup"><span data-stu-id="cc3a8-108">When you use the <xref:System.Func%601> delegate, you do not have to explicitly define a delegate that encapsulates a parameterless method.</span></span> <span data-ttu-id="cc3a8-109">Por exemplo, o código a seguir declara explicitamente um delegado chamado `WriteMethod` e atribui uma referência para o `OutputTarget.SendToFile` método para sua instância de delegado de instância.</span><span class="sxs-lookup"><span data-stu-id="cc3a8-109">For example, the following code explicitly declares a delegate named `WriteMethod` and assigns a reference to the `OutputTarget.SendToFile` instance method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)]
 [!code-vb[System.Func~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="cc3a8-110">O exemplo a seguir simplifica esse código instanciando a <xref:System.Func%601> delegado em vez de definir um novo delegado explicitamente e atribuí-lo um método nomeado.</span><span class="sxs-lookup"><span data-stu-id="cc3a8-110">The following example simplifies this code by instantiating the <xref:System.Func%601> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)]
 [!code-vb[System.Func~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)]  
  
 <span data-ttu-id="cc3a8-111">Você pode usar o <xref:System.Func%601> delegar com métodos anônimos em c#, como mostra o exemplo a seguir.</span><span class="sxs-lookup"><span data-stu-id="cc3a8-111">You can use the <xref:System.Func%601> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="cc3a8-112">(Para obter uma introdução aos métodos anônimos, consulte [métodos anônimos](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span><span class="sxs-lookup"><span data-stu-id="cc3a8-112">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)]  
  
 <span data-ttu-id="cc3a8-113">Você também pode atribuir uma expressão lambda para uma <xref:System.Func%602> delegado, como mostra o exemplo a seguir.</span><span class="sxs-lookup"><span data-stu-id="cc3a8-113">You can also assign a lambda expression to a <xref:System.Func%602> delegate, as the following example illustrates.</span></span> <span data-ttu-id="cc3a8-114">(Para obter uma introdução a expressões lambda, consulte [expressões Lambda](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) e [expressões Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span><span class="sxs-lookup"><span data-stu-id="cc3a8-114">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)]
 [!code-vb[System.Func~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)]  
  
 <span data-ttu-id="cc3a8-115">O tipo subjacente de uma expressão lambda é um dos genérica `Func` delegados.</span><span class="sxs-lookup"><span data-stu-id="cc3a8-115">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="cc3a8-116">Isso torna possível passar uma expressão lambda como um parâmetro sem explicitamente atribuí-lo a um delegado.</span><span class="sxs-lookup"><span data-stu-id="cc3a8-116">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="cc3a8-117">Em particular, porque muitos métodos de tipos no <xref:System.Linq> namespace ter `Func` parâmetros, você pode passar esses métodos de uma expressão lambda sem instanciar explicitamente um `Func` delegar.</span><span class="sxs-lookup"><span data-stu-id="cc3a8-117">In particular, because many methods of types in the <xref:System.Linq> namespace have `Func` parameters, you can pass these methods a lambda expression without explicitly instantiating a `Func` delegate.</span></span>  
  
 <span data-ttu-id="cc3a8-118">Se você tiver uma computação cara que você deseja executar somente se o resultado é realmente necessária, você pode atribuir a função cara para um <xref:System.Func%601> delegate.</span><span class="sxs-lookup"><span data-stu-id="cc3a8-118">If you have an expensive computation that you want to execute only if the result is actually needed, you can assign the expensive function to a <xref:System.Func%601> delegate.</span></span> <span data-ttu-id="cc3a8-119">A execução da função, em seguida, pode ser atrasada até que uma propriedade que acessa o valor é usada em uma expressão.</span><span class="sxs-lookup"><span data-stu-id="cc3a8-119">The execution of the function can then be delayed until a property that accesses the value is used in an expression.</span></span> <span data-ttu-id="cc3a8-120">O exemplo na próxima seção demonstra como fazer isso.</span><span class="sxs-lookup"><span data-stu-id="cc3a8-120">The example in the next section demonstrates how to do this.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc3a8-121">O exemplo a seguir demonstra como usar um delegado que não usa nenhum parâmetro.</span><span class="sxs-lookup"><span data-stu-id="cc3a8-121">The following example demonstrates how to use a delegate that takes no parameters.</span></span> <span data-ttu-id="cc3a8-122">Esse código cria uma classe genérica denominada `LazyValue` que tem um campo do tipo <xref:System.Func%601>.</span><span class="sxs-lookup"><span data-stu-id="cc3a8-122">This code creates a generic class named `LazyValue` that has a field of type <xref:System.Func%601>.</span></span> <span data-ttu-id="cc3a8-123">Este campo de delegado pode armazenar uma referência a qualquer função que retorna um valor do tipo que corresponde ao parâmetro de tipo do `LazyValue` objeto.</span><span class="sxs-lookup"><span data-stu-id="cc3a8-123">This delegate field can store a reference to any function that returns a value of the type that corresponds to the type parameter of the `LazyValue` object.</span></span> <span data-ttu-id="cc3a8-124">O `LazyValue` tipo também tem um `Value` propriedade que executa a função (se ela já não foi executada) e retorna o valor resultante.</span><span class="sxs-lookup"><span data-stu-id="cc3a8-124">The `LazyValue` type also has a `Value` property that executes the function (if it has not already been executed) and returns the resulting value.</span></span>  
  
 <span data-ttu-id="cc3a8-125">O exemplo cria dois métodos e cria dois `LazyValue` objetos com expressões lambda que chamam esses métodos.</span><span class="sxs-lookup"><span data-stu-id="cc3a8-125">The example creates two methods and instantiates two `LazyValue` objects with lambda expressions that call these methods.</span></span> <span data-ttu-id="cc3a8-126">As expressões lambda não obtêm parâmetros porque eles só precisam chamar um método.</span><span class="sxs-lookup"><span data-stu-id="cc3a8-126">The lambda expressions do not take parameters because they just need to call a method.</span></span> <span data-ttu-id="cc3a8-127">Como mostra a saída, os dois métodos são executados somente quando o valor de cada `LazyValue` objeto é recuperado.</span><span class="sxs-lookup"><span data-stu-id="cc3a8-127">As the output shows, the two methods are executed only when the value of each `LazyValue` object is retrieved.</span></span>  
  
 [!code-csharp[System.Func~1#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Example.cs#5)]
 [!code-vb[System.Func~1#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>