<Type Name="ReadOnlySpan&lt;T&gt;" FullName="System.ReadOnlySpan&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="12357179192b89232e7d5799ab47b00a99fb8e1d" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39986304" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct ReadOnlySpan&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ReadOnlySpan`1&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.ReadOnlySpan`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure ReadOnlySpan(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public value class ReadOnlySpan" />
  <TypeSignature Language="F#" Value="type ReadOnlySpan&lt;'T&gt; = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="94b62-101">O tipo dos itens no <see cref="System.ReadOnlySpan`1" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="94b62-101">The type of items in the <see cref="System.ReadOnlySpan`1" />.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="94b62-102">Fornece uma representação fortemente tipada e de memória segura de uma região contígua da memória arbitrária.</span>
      <span class="sxs-lookup">
        <span data-stu-id="94b62-102">Provides a type-safe and memory-safe read-only representation of a contiguous region of arbitrary memory.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[<span data-ttu-id="94b62-103">`ReadOnlySpan<T>` é um [ref struct](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type) que é alocada na pilha e nunca possam escapar para o heap gerenciado.</span><span class="sxs-lookup"><span data-stu-id="94b62-103">`ReadOnlySpan<T>` is a [ref struct](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type) that is allocated on the stack and can never escape to the managed heap.</span></span> <span data-ttu-id="94b62-104">Tipos de struct ref têm um número de restrições para garantir que eles não podem ser promovidos para o heap gerenciado, incluindo o que eles não podem ser convertidos, capturado em expressões lambda, atribuídas a variáveis do tipo <xref:System.Object>, atribuído a `dynamic` variáveis, e eles não podem implementar qualquer tipo de interface.</span><span class="sxs-lookup"><span data-stu-id="94b62-104">Ref struct types have a number of restrictions to ensure that they cannot be promoted to the managed heap, including that they can't be boxed, captured in lambda expressions, assigned to variables of type <xref:System.Object>, assigned to `dynamic` variables, and they cannot implement any interface type.</span></span>

<span data-ttu-id="94b62-105">Um `ReadOnlySpan<T>` instância geralmente é usada para fazer referência os elementos de uma matriz ou uma parte de uma matriz.</span><span class="sxs-lookup"><span data-stu-id="94b62-105">A `ReadOnlySpan<T>` instance is often used to reference the elements of an array or a portion of an array.</span></span> <span data-ttu-id="94b62-106">Ao contrário de uma matriz, no entanto, um `ReadOnlySpan<T>` instância pode apontar para a memória gerenciada, memória nativa, ou a memória gerenciada na pilha.</span><span class="sxs-lookup"><span data-stu-id="94b62-106">Unlike an array, however, a `ReadOnlySpan<T>` instance can point to managed memory, native memory, or memory managed on the stack.</span></span>]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlySpan (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.#ctor(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="new ReadOnlySpan&lt;'T&gt; : 'T[] -&gt; ReadOnlySpan&lt;'T&gt;" Usage="new System.ReadOnlySpan&lt;'T&gt; array" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="94b62-107">A matriz com base na qual criar o <see cref="T:System.ReadOnlySpan`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-107">The array from which to create the <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="94b62-108">Cria um novo <see cref="T:System.ReadOnlySpan`1" /> sobre a totalidade de uma matriz especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-108">Creates a new <see cref="T:System.ReadOnlySpan`1" /> over the entirety of a specified array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="94b62-109">Se a matriz for null, esse construtor retorna um valor nulo `ReadOnlySpan<T>`.</span><span class="sxs-lookup"><span data-stu-id="94b62-109">If the array is null, this constructor returns a null `ReadOnlySpan<T>`.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlySpan (void* pointer, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(void* pointer, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.#ctor(System.Void*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan(void* pointer, int length);" />
      <MemberSignature Language="F#" Value="new ReadOnlySpan&lt;'T&gt; : nativeptr&lt;unit&gt; * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="new System.ReadOnlySpan&lt;'T&gt; (pointer, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pointer" Type="System.Void*" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pointer">
          <span data-ttu-id="94b62-110">Um ponteiro para o endereço inicial de um número especificado de objetos <paramref name="T" /> na memória.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-110">A pointer to the starting address of a specified number of <paramref name="T" /> objects in memory.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="94b62-111">O número de objetos <paramref name="T" /> a serem incluídos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-111">The number of <paramref name="T" /> objects to be included.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="94b62-112">Cria um novo <see cref="T:System.ReadOnlySpan`1" /> com base em um número especificado de bytes, começando em um endereço de memória especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-112">Creates a new <see cref="T:System.ReadOnlySpan`1" /> from a specified number of bytes starting at a specified memory address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="94b62-113">Este construtor deve ser usado com cuidado, pois ele cria tipado arbitrariamente `T`s de um bloco de memória.</span><span class="sxs-lookup"><span data-stu-id="94b62-113">This constructor should be used with care, since it creates arbitrarily typed `T`s from a block of memory.</span></span>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="94b62-114">
            <paramref name="T" /> é um tipo de referência ou contém referências e, portanto, não pode ser armazenado na memória não gerenciada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-114">
              <paramref name="T" /> is a reference type or contains references and therefore cannot be stored in unmanaged memory.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="94b62-115">
            <paramref name="length" /> é negativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-115">
              <paramref name="length" /> is negative.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlySpan (T[] array, int start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array, int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.#ctor(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T(), start As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan(cli::array &lt;T&gt; ^ array, int start);" />
      <MemberSignature Language="F#" Value="new ReadOnlySpan&lt;'T&gt; : 'T[] * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="new System.ReadOnlySpan&lt;'T&gt; (array, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="94b62-116">A matriz com base na qual criar o <see cref="T:System.ReadOnlySpan`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-116">The array from which to create the <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </param>
        <param name="start">
          <span data-ttu-id="94b62-117">O índice inicial no qual iniciar o intervalo somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-117">The starting index from which to begin the read-only span.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="94b62-118">Cria um novo <see cref="T:System.ReadOnlySpan`1" /> de uma matriz, começando no índice especificado e continuando até o final da matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-118">Creates a new <see cref="T:System.ReadOnlySpan`1" /> from an array starting at the specified index and continuing until the end of the array.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="94b62-119">
            <paramref name="start" /> é menor que 0 ou maior que o comprimento da matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-119">
              <paramref name="start" /> is less-than 0 or greater-than the length of the array.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="94b62-120">
            <paramref name="array" /> é nulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-120">
              <paramref name="array" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlySpan (T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.#ctor(`0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T(), start As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="new ReadOnlySpan&lt;'T&gt; : 'T[] * int * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="new System.ReadOnlySpan&lt;'T&gt; (array, start, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="94b62-121">A matriz com base na qual criar o <see cref="T:System.ReadOnlySpan`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-121">The array from which to create the <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </param>
        <param name="start">
          <span data-ttu-id="94b62-122">O índice do primeiro elemento a ser incluído.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-122">The index of the first element to include.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="94b62-123">O número de elementos a serem incluídos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-123">The number of elements to include.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="94b62-124">Cria um novo <see cref="T:System.ReadOnlySpan`1" /> que inclui um número especificado de elementos de uma matriz, começando em um índice especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-124">Creates a new <see cref="T:System.ReadOnlySpan`1" /> that includes a specified number of elements of an array starting at a specified index.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="94b62-125">
            <paramref name="array" /> é <see langword="null" />, mas <paramref name="start" /> ou <paramref name="length" /> é diferente de zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-125">
              <paramref name="array" /> is <see langword="null" />, but <paramref name="start" /> or <paramref name="length" /> is non-zero.</span>
          </span>
          <p />
          <span data-ttu-id="94b62-126">--ou--</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-126">--or--</span>
          </span>
          <p />
          <span data-ttu-id="94b62-127">
            <paramref name="start" /> está fora dos limites da matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-127">
              <paramref name="start" /> is outside the bounds of the array.</span>
          </span>
          <p />
          <span data-ttu-id="94b62-128">--ou--</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-128">--or--</span>
          </span>
          <p />
          <span data-ttu-id="94b62-129">
            <paramref name="start" /> e <paramref name="length" /> excedem o número de elementos da matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-129">
              <paramref name="start" /> and <paramref name="length" /> exceeds the number of elements in the array.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.CopyTo(System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As Span(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(Span&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : Span&lt;'T&gt; -&gt; unit" Usage="readOnlySpan.CopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="94b62-130">O intervalo no qual copiar itens.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-130">The span to copy items into.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="94b62-131">Copia o conteúdo deste <see cref="System.ReadOnlySpan`1" /> para um <see cref="System.Span`1" /> de destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-131">Copies the contents of this <see cref="System.ReadOnlySpan`1" /> into a destination <see cref="System.Span`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="94b62-132">Se o `source` e `destination` se sobrepõem, todo `source` é tratado como se ele foi copiado para um local temporário antes que ele é copiado para `destination`.</span><span class="sxs-lookup"><span data-stu-id="94b62-132">If the `source` and `destination` overlap, the entirety of `source` is handled as if it was copied to a temporary location before it is copied to `destination`.</span></span>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="94b62-133">
            <paramref name="destination" /> é menor que o <see cref="System.ReadOnlySpan`1" /> de origem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-133">
              <paramref name="destination" /> is shorter than the source <see cref="System.ReadOnlySpan`1" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DangerousCreate">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; DangerousCreate (object obj, ref T objectData, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!T&gt; DangerousCreate(object obj, !T&amp; objectData, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.DangerousCreate(System.Object,`0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DangerousCreate (obj As Object, ByRef objectData As T, length As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;T&gt; DangerousCreate(System::Object ^ obj, T % objectData, int length);" />
      <MemberSignature Language="F#" Value="static member DangerousCreate : obj *  * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.ReadOnlySpan&lt;'T&gt;.DangerousCreate (obj, objectData, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="objectData" Type="T" RefType="ref" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="94b62-134">O objeto gerenciado que contém os dados que o intervalo abrangerá.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-134">The managed object that contains the data the span will cover.</span>
          </span>
        </param>
        <param name="objectData">
          <span data-ttu-id="94b62-135">Uma referência aos dados dentro do objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-135">A reference to data within the object.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="94b62-136">O número de elementos <paramref name="T" /> a serem abrangidos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-136">The number of <paramref name="T" /> elements to span.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="94b62-137">Cria um novo <see cref="T:System.ReadOnlySpan`1" /> sobre uma parte de um objeto gerenciado regular.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-137">Creates a new <see cref="T:System.ReadOnlySpan`1" /> over a portion of a regular managed object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="94b62-138">Um <see cref="T:System.ReadOnlySpan`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-138">A <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="94b62-139">Esse método é perigoso porque ele **não verifica** para as seguintes condições de erro:</span><span class="sxs-lookup"><span data-stu-id="94b62-139">This method is dangerous because it **does not check** for the following error conditions:</span></span>

- <span data-ttu-id="94b62-140">O parâmetro `length` está incorreto.</span><span class="sxs-lookup"><span data-stu-id="94b62-140">The `length` parameter is incorrect.</span></span>
- <span data-ttu-id="94b62-141">O parâmetro `obj` é nulo.</span><span class="sxs-lookup"><span data-stu-id="94b62-141">The `obj` parameter is null.</span></span>
- <span data-ttu-id="94b62-142">Os objetos `obj` pontos a serem podem conter um ponteiro bruto.</span><span class="sxs-lookup"><span data-stu-id="94b62-142">The objects `obj` points to may contain a raw pointer.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DangerousGetPinnableReference">
      <MemberSignature Language="C#" Value="public T DangerousGetPinnableReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T DangerousGetPinnableReference() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.DangerousGetPinnableReference" />
      <MemberSignature Language="VB.NET" Value="Public Function DangerousGetPinnableReference () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T % DangerousGetPinnableReference();" />
      <MemberSignature Language="F#" Value="member this.DangerousGetPinnableReference : unit -&gt; " Usage="readOnlySpan.DangerousGetPinnableReference " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="94b62-143">Retorna uma referência ao elemento do <see cref="T:System.ReadOnlySpan`1" /> no índice zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-143">Returns a reference to the element of the <see cref="T:System.ReadOnlySpan`1" /> at index zero.</span>
          </span>
          <span data-ttu-id="94b62-144">Se o intervalo somente leitura estiver vazio, retornará a referência para o local de memória em que o primeiro elemento teria sido armazenado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-144">If the read-only span is empty, returns the reference to the memory location where the first element would have been stored.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="94b62-145">Uma referência ao primeiro elemento do <see cref="T:System.ReadOnlySpan`1" /> no índice zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-145">A reference to the first element of the <see cref="T:System.ReadOnlySpan`1" /> at index zero.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="94b62-146">Esse método retorna um [ref struct](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type).</span><span class="sxs-lookup"><span data-stu-id="94b62-146">This method returns a [ref struct](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type).</span></span> <span data-ttu-id="94b62-147">Ele pode ser usado para fixar um <xref:System.ReadOnlySpan`1> na memória.</span><span class="sxs-lookup"><span data-stu-id="94b62-147">It can be used for pinning a <xref:System.ReadOnlySpan`1> in memory.</span></span> <span data-ttu-id="94b62-148">É necessário para dar suporte ao uso de um <xref:System.ReadOnlySpan`1> dentro de um [fixo](~/docs/csharp/language-reference/keywords/fixed-statement.md) instrução.</span><span class="sxs-lookup"><span data-stu-id="94b62-148">It is required to support the use of a <xref:System.ReadOnlySpan`1> within a [fixed](~/docs/csharp/language-reference/keywords/fixed-statement.md) statement.</span></span>

<span data-ttu-id="94b62-149">Essa referência é usada para fixar e nunca deve ser cancelada.</span><span class="sxs-lookup"><span data-stu-id="94b62-149">This reference is used for pinning and must never be dereferenced.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ReadOnlySpan`1&lt;!T&gt; Empty" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property ReadOnlySpan&lt;T&gt; Empty { ReadOnlySpan&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : ReadOnlySpan&lt;'T&gt;" Usage="System.ReadOnlySpan&lt;'T&gt;.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="94b62-150">Retorna um <see cref="T:System.ReadOnlySpan`1" /> vazio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-150">Returns an empty <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="94b62-151">Retorna um <see cref="T:System.ReadOnlySpan`1" /> vazio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-151">Returns an empty <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="readOnlySpan.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1">
          <AttributeName>System.Obsolete("Equals() on ReadOnlySpan will always throw an exception. Use == instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="94b62-152">Sem suporte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-152">Not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="94b62-153">Sem suporte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-153">Not supported.</span>
          </span>
          <span data-ttu-id="94b62-154">Gera uma <see cref="T:System.NotSupportedException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-154">Throws a <see cref="T:System.NotSupportedException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="94b62-155">Sem suporte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-155">Not supported.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="94b62-156">Sem suporte.</span><span class="sxs-lookup"><span data-stu-id="94b62-156">Not supported.</span></span>]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="94b62-157">Sempre gerada por este método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-157">Always thrown by this method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlySpan`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As ReadOnlySpan(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; ReadOnlySpan&lt;'T&gt;.Enumerator" Usage="readOnlySpan.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="94b62-158">Retorna um enumerador para este <see cref="T:System.ReadOnlySpan`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-158">Returns an enumerator for this <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="94b62-159">Um enumerador para esse intervalo somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-159">An enumerator for this read-only span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="94b62-160">Em vez de chamar o <xref:System.ReadOnlySpan%601.GetEnumerator%2A> método diretamente, você pode usar o c# `foreach` instrução e do Visual Basic `For Each`... `Next` constructo para enumerar um <xref:System.ReadOnlySpan%601>.</span><span class="sxs-lookup"><span data-stu-id="94b62-160">Instead of calling the <xref:System.ReadOnlySpan%601.GetEnumerator%2A> method directly, you can use the C# `foreach` statement and the Visual Basic `For Each`...`Next` construct to enumerate a <xref:System.ReadOnlySpan%601>.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="readOnlySpan.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1">
          <AttributeName>System.Obsolete("GetHashCode() on ReadOnlySpan will always throw an exception.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="94b62-161">Sem suporte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-161">Not supported.</span>
          </span>
          <span data-ttu-id="94b62-162">Gera uma <see cref="T:System.NotSupportedException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-162">Throws a <see cref="T:System.NotSupportedException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="94b62-163">Sem suporte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-163">Not supported.</span>
          </span>
        </returns>
        <remarks>
          <span data-ttu-id="94b62-164">Sem suporte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-164">Not supported.</span>
          </span>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="94b62-165">Sempre gerada por este método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-165">Always thrown by this method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPinnableReference">
      <MemberSignature Language="C#" Value="public T&amp; GetPinnableReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.T&amp; modreq(System.Runtime.InteropServices.InAttribute) GetPinnableReference() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.GetPinnableReference" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPinnableReference () As T&amp;" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T&amp; ^ GetPinnableReference();" />
      <MemberSignature Language="F#" Value="member this.GetPinnableReference : unit -&gt; T&amp;" Usage="readOnlySpan.GetPinnableReference " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="94b62-166">Retorna uma referência ao elemento do <see cref="T:System.ReadOnlySpan`1" /> no índice zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-166">Returns a reference to the element of the <see cref="T:System.ReadOnlySpan`1" /> at index zero.</span>
          </span>
          <span data-ttu-id="94b62-167">Se o intervalo somente leitura estiver vazio, retornará <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-167">If the read-only span is empty, returns <see langword="null" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="94b62-168">Uma referência ao elemento do <see cref="T:System.ReadOnlySpan`1" /> no índice zero ou <see langword="null" /> se <see cref="M:System.ReadOnlySpan`1.IsEmpty" /> for <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-168">A reference to the element of the <see cref="T:System.ReadOnlySpan`1" /> at index zero, or <see langword="null" /> if <see cref="M:System.ReadOnlySpan`1.IsEmpty" /> is  <see langword="true" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="94b62-169">O `GetPinnableReference` método retorna um [ref struct](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type).</span><span class="sxs-lookup"><span data-stu-id="94b62-169">The `GetPinnableReference` method returns a [ref struct](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type).</span></span> <span data-ttu-id="94b62-170">Ele pode ser usado para fixar um <xref:System.ReadOnlySpan%601> na memória.</span><span class="sxs-lookup"><span data-stu-id="94b62-170">It can be used for pinning a <xref:System.ReadOnlySpan%601> in memory.</span></span> <span data-ttu-id="94b62-171">É necessário para dar suporte ao uso de um <xref:System.ReadOnlySpan%601> dentro de um [fixo](~/docs/csharp/language-reference/keywords/fixed-statement.md) instrução.</span><span class="sxs-lookup"><span data-stu-id="94b62-171">It is required to support the use of a <xref:System.ReadOnlySpan%601> within a [fixed](~/docs/csharp/language-reference/keywords/fixed-statement.md) statement.</span></span>

<span data-ttu-id="94b62-172">Essa referência é usada para fixar e nunca deve ser cancelada.</span><span class="sxs-lookup"><span data-stu-id="94b62-172">This reference is used for pinning and must never be dereferenced.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.ReadOnlySpan&lt;'T&gt;.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="94b62-173">Retorna um valor que indica o intervalo atual somente leitura está vazio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-173">Returns a value that indicates the current read-only span is empty.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="94b62-174">
            <see langword="true" /> Quando o período atual está vazio. Caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-174">
              <see langword="true" /> when the current span is empty; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T&amp; this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance T&amp; modreq(System.Runtime.InteropServices.InAttribute) Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As T&amp;" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T&amp; ^ default[int] { T&amp; ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : T&amp;" Usage="System.ReadOnlySpan&lt;'T&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.1">
          <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T&amp;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="94b62-175">O índice baseado em zero do elemento a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-175">The zero-based index of the element to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="94b62-176">Obtém um item do intervalo somente leitura no índice baseado em zero especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-176">Gets an item from the read-only span at the specified zero-based index.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="94b62-177">O elemento do alcance de somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-177">The element from the read-only span.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="94b62-178">
            <paramref name="index" /> é menor que zero ou superior ou igual a <see cref="P:System.ReadOnlySpan`1.Length" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-178">
              <paramref name="index" /> is less then zero or greater than or equal to <see cref="P:System.ReadOnlySpan`1.Length" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.ReadOnlySpan&lt;'T&gt;.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="94b62-179">O número de itens no intervalo somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-179">The number of items in the read-only span.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="94b62-180">O número de itens.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-180">The number of items.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (ReadOnlySpan&lt;T&gt; left, ReadOnlySpan&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.ReadOnlySpan`1&lt;!T&gt; left, valuetype System.ReadOnlySpan`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.op_Equality(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As ReadOnlySpan(Of T), right As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(ReadOnlySpan&lt;T&gt; left, ReadOnlySpan&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : ReadOnlySpan&lt;'T&gt; * ReadOnlySpan&lt;'T&gt; -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="right" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="94b62-181">O primeiro intervalo a ser comparado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-181">The first span to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="94b62-182">O segundo intervalo a ser comparado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-182">The second span to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="94b62-183">Retorna um valor que indica se duas instâncias <see cref="T:System.ReadOnlySpan`1" /> são iguais.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-183">Returns a value that indicates whether two <see cref="T:System.ReadOnlySpan`1" /> instances are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="94b62-184">
            <see langword="true" /> se as duas instâncias de <see cref="T:System.ReadOnlySpan`1" /> forem iguais; caso contrário, <see langword="false" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-184">
              <see langword="true" /> if the two <see cref="T:System.ReadOnlySpan`1" /> instances are equal; otherwise, <see langword="false" /></span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="94b62-185">Isso testa se duas <xref:System.ReadOnlySpan`1> instâncias apontam para o mesmo local de memória inicial e tem o mesmo <xref:System.ReadOnlySpan`1.Length> valores.</span><span class="sxs-lookup"><span data-stu-id="94b62-185">This tests if two <xref:System.ReadOnlySpan`1> instances point to the same starting memory location, and have the same <xref:System.ReadOnlySpan`1.Length> values.</span></span> <span data-ttu-id="94b62-186">Isso não compara o conteúdo de dois <xref:System.ReadOnlySpan`1> instâncias.</span><span class="sxs-lookup"><span data-stu-id="94b62-186">This does not compare the contents of two <xref:System.ReadOnlySpan`1> instances.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlySpan&lt;T&gt; (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlySpan`1&lt;!T&gt; op_Implicit(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.op_Implicit(`0[])~System.ReadOnlySpan{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (array As T()) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlySpan&lt;T&gt;(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : 'T[] -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.ReadOnlySpan&lt;'T&gt;.op_Implicit array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="94b62-187">A matriz a ser convertida em um <see cref="T:System.ReadOnlySpan`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-187">The array to convert to a <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="94b62-188">Define uma conversão implícita de uma matriz em um <see cref="T:System.ReadOnlySpan`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-188">Defines an implicit conversion of an array to a <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="94b62-189">O intervalo somente leitura que corresponde a <paramref name="array" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-189">The read-only span that corresponds to <paramref name="array" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlySpan&lt;T&gt; (ArraySegment&lt;T&gt; arraySegment);" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlySpan`1&lt;!T&gt; op_Implicit(valuetype System.ArraySegment`1&lt;!T&gt; arraySegment) cil managed" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (arraySegment As ArraySegment(Of T)) As ReadOnlySpan(Of T)" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlySpan&lt;T&gt;(ArraySegment&lt;T&gt; arraySegment);" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlySpan&lt;T&gt; (ArraySegment&lt;T&gt; segment);" FrameworkAlternate="netcore-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlySpan`1&lt;!T&gt; op_Implicit(valuetype System.ArraySegment`1&lt;!T&gt; segment) cil managed" FrameworkAlternate="netcore-2.1" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.op_Implicit(System.ArraySegment{`0})~System.ReadOnlySpan{`0}" FrameworkAlternate="netcore-2.1;netcore-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (segment As ArraySegment(Of T)) As ReadOnlySpan(Of T)" FrameworkAlternate="netcore-2.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlySpan&lt;T&gt;(ArraySegment&lt;T&gt; segment);" FrameworkAlternate="netcore-2.1" />
      <MemberSignature Language="F#" Value="static member op_Implicit : ArraySegment&lt;'T&gt; -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.ReadOnlySpan&lt;'T&gt;.op_Implicit segment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arraySegment" Type="System.ArraySegment&lt;T&gt;" Index="0" FrameworkAlternate="netcore-2.0" />
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" Index="0" FrameworkAlternate="netcore-2.1" />
      </Parameters>
      <Docs>
        <param name="arraySegment">
          <span data-ttu-id="94b62-190">O segmento de matriz a ser convertido em um <see cref="T:System.ReadOnlySpan`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-190">The array segment to be converted to a <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </param>
        <param name="segment">
          <span data-ttu-id="94b62-191">O segmento de matriz a ser convertido em um <see cref="T:System.ReadOnlySpan`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-191">The array segment to be converted to a <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="94b62-192">Define uma conversão implícita de um <see cref="T:System.ArraySegment`1" /> em um <see cref="T:System.ReadOnlySpan`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-192">Defines an implicit conversion of an <see cref="T:System.ArraySegment`1" /> to a <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="94b62-193">Um intervalo somente leitura que corresponde ao segmento de matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-193">A read-only span that corresponds to the array segment.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (ReadOnlySpan&lt;T&gt; left, ReadOnlySpan&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.ReadOnlySpan`1&lt;!T&gt; left, valuetype System.ReadOnlySpan`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.op_Inequality(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As ReadOnlySpan(Of T), right As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(ReadOnlySpan&lt;T&gt; left, ReadOnlySpan&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : ReadOnlySpan&lt;'T&gt; * ReadOnlySpan&lt;'T&gt; -&gt; bool" Usage="System.ReadOnlySpan&lt;'T&gt;.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="right" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="94b62-194">O primeiro intervalo somente leitura a ser comparado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-194">The first read-only span to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="94b62-195">O segundo intervalo somente leitura a ser comparado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-195">The second read-only span to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="94b62-196">Retorna um valor que indica se duas instâncias <see cref="T:System.ReadOnlySpan`1" /> não são iguais.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-196">Returns a value that indicates whether two <see cref="T:System.ReadOnlySpan`1" /> instances are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="94b62-197">
            <see langword="true" /> se as duas instâncias <see cref="T:System.ReadOnlySpan`1" /> não são iguais; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-197">
              <see langword="true" /> if the two <see cref="T:System.ReadOnlySpan`1" /> instances are not equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="94b62-198">Duas <xref:System.ReadOnlySpan%601> instâncias não são iguais se eles têm comprimentos diferentes ou se os elementos correspondentes das `left` e `right` apontam para locais de memória diferentes.</span><span class="sxs-lookup"><span data-stu-id="94b62-198">Two <xref:System.ReadOnlySpan%601> instances are not equal if they have different lengths or if the corresponding elements of `left` and `right` point to different memory locations.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt; Slice (int start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlySpan`1&lt;!T&gt; Slice(int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Slice(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan&lt;T&gt; Slice(int start);" />
      <MemberSignature Language="F#" Value="member this.Slice : int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="readOnlySpan.Slice start" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">
          <span data-ttu-id="94b62-199">O índice no qual iniciar a fatia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-199">The index at which to begin the slice.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="94b62-200">Forma uma fatia com base no intervalo somente leitura atual que começa em um índice especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-200">Forms a slice out of the current read-only span that begins at a specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="94b62-201">Um intervalo que consiste em todos os elementos do intervalo atual de <paramref name="index" /> até o final do intervalo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-201">A span that consists of all elements of the current span from <paramref name="index" /> to the end of the span.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="94b62-202">
            <paramref name="start" /> é maior que o número de itens no intervalo somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-202">
              <paramref name="start" /> is greater than the number of items in the read-only span.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt; Slice (int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlySpan`1&lt;!T&gt; Slice(int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Slice(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer, length As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan&lt;T&gt; Slice(int start, int length);" />
      <MemberSignature Language="F#" Value="member this.Slice : int * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="readOnlySpan.Slice (start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">
          <span data-ttu-id="94b62-203">O índice no qual começar essa fatia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-203">The index at which to begin this slice.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="94b62-204">O tamanho desejado da fatia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-204">The desired length for the slice.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="94b62-205">Forma uma fatia com base no intervalo somente leitura atual que começa em um índice especificado para um tamanho especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-205">Forms a slice out of the current read-only span starting at a specified index for a specified length.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="94b62-206">Um intervalo somente leitura que consiste em elementos <paramref name="length" /> do intervalo atual que começa em <paramref name="index" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-206">A read-only span that consists of <paramref name="length" /> elements from the current span starting at <paramref name="index" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="94b62-207">
            <paramref name="start" /> é menor que zero ou superior ou igual a <see cref="T:System.Span`1.Length" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-207">
              <paramref name="start" /> is less than zero or greater than or equal to <see cref="T:System.Span`1.Length" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="readOnlySpan.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="94b62-208">Copia o conteúdo desse intervalo somente leitura para uma nova matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-208">Copies the contents of this read-only span into a new array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="94b62-209">Uma matriz que contém os dados no intervalo atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-209">An array containing the data in the current span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="94b62-210">Esse método faz uma cópia de dados e de alocação de heap e, portanto, deve ser evitado se possível.</span><span class="sxs-lookup"><span data-stu-id="94b62-210">This method performs a heap allocation and data copy, and therefore, should be avoided if possible.</span></span> <span data-ttu-id="94b62-211">Ele às vezes, necessário quando as APIs que dão suporte a <xref:System.ReadOnlySpan%601> não estão disponíveis, mas as APIs que são de trabalho com matrizes.</span><span class="sxs-lookup"><span data-stu-id="94b62-211">It it sometimes necessary when APIs that support <xref:System.ReadOnlySpan%601> are not available, but APIs that work with arrays are.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="readOnlySpan.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="94b62-212">Retorna a representação de cadeia de caracteres deste <see cref="T:System.ReadOnlySpan`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-212">Returns the string representation of this <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="94b62-213">A representação de cadeia de caracteres desta instância.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-213">The string representation of this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="94b62-214">Para um `ReadOnlySpan<Char>`, o `ToString` método retorna um <xref:System.String> que contém os caracteres apontados pelo alcance.</span><span class="sxs-lookup"><span data-stu-id="94b62-214">For a `ReadOnlySpan<Char>`, the `ToString` method returns a <xref:System.String> that contains the characters pointed to by the span.</span></span> <span data-ttu-id="94b62-215">Caso contrário, retornará um <xref:System.String> com o nome do tipo e o número de elementos que contém o alcance.</span><span class="sxs-lookup"><span data-stu-id="94b62-215">Otherwise, it returns a <xref:System.String> with the name of the type and the number of elements that the span contains.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCopyTo">
      <MemberSignature Language="C#" Value="public bool TryCopyTo (Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryCopyTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.TryCopyTo(System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCopyTo (destination As Span(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryCopyTo(Span&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.TryCopyTo : Span&lt;'T&gt; -&gt; bool" Usage="readOnlySpan.TryCopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="94b62-216">O destino da operação de cópia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-216">The target of the copy operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="94b62-217">Tenta copiar o conteúdo deste <see cref="System.ReadOnlySpan`1" /> em um <see cref="System.Span`1" /> e retorna um valor para indicar se a operação foi bem-sucedida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-217">Attempts to copy the contents of this <see cref="System.ReadOnlySpan`1" /> into a <see cref="System.Span`1" /> and returns a value to indicate whether or not the operation succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="94b62-218">
            <see langword="true" /> se a operação de cópia foi bem-sucedida; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94b62-218">
              <see langword="true" /> if the copy operation succeeded; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="94b62-219">Se o `source` e `destination` se sobrepõem, todo `source` é tratado como se ele foi copiado para um local temporário antes que ele é copiado para `destination`.</span><span class="sxs-lookup"><span data-stu-id="94b62-219">If the `source` and `destination` overlap, the entirety of `source` is handled as if it was copied to a temporary location before it is copied to `destination`.</span></span>

<span data-ttu-id="94b62-220">Se o `destination` comprimento é menor que `source`, não há itens são copiados e o método retornará `false`.</span><span class="sxs-lookup"><span data-stu-id="94b62-220">If the `destination` length is shorter than `source`, no items are copied and the method returns `false`.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>