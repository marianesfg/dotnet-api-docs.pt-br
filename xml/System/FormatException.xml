<Type Name="FormatException" FullName="System.FormatException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="86d552e99834841a8741b98fe4bc02c87a9c080a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36431710" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FormatException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit FormatException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.FormatException" />
  <TypeSignature Language="VB.NET" Value="Public Class FormatException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class FormatException : SystemException" />
  <TypeSignature Language="F#" Value="type FormatException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The exception that is thrown when the format of an argument is invalid, or when a [composite format string](~/docs/standard/base-types/composite-formatting.md) is not well formed.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um <xref:System.FormatException> exceção pode ser lançada para um dos seguintes motivos:  
  
-   Em uma chamada para um método que converte uma cadeia de caracteres para outro tipo de dados, a cadeia de caracteres não está em conformidade com o padrão necessário. Isso normalmente ocorre ao chamar alguns métodos do <xref:System.Convert> classe e o `Parse` e `ParseExact` métodos de alguns tipos.  
  
     Na maioria dos casos, especialmente se a cadeia de caracteres que você está convertendo é de entrada por um usuário ou ler de um arquivo, você deve usar um `try/catch` bloquear e tratar o <xref:System.FormatException> exceção se a conversão for bem-sucedida. Você também pode substituir a chamada para o método de conversão com uma chamada para um `TryParse` ou `TryParseExact` método, se houver. No entanto, um <xref:System.FormatException> exceção que é lançada quando você estiver tentando analisar uma cadeia de caracteres predefinida ou embutido indica um erro de programa. Nesse caso, você deve corrigir o erro em vez de lidar com a exceção.  
  
     A conversão de uma cadeia de caracteres para os seguintes tipos do <xref:System> namespace pode lançar um <xref:System.FormatException> exceção:  
  
    -   <xref:System.Boolean>. O <xref:System.Boolean.Parse%28System.String%29?displayProperty=nameWithType> e <xref:System.Convert.ToBoolean%28System.String%29?displayProperty=nameWithType> métodos requerem a cadeia de caracteres a ser convertido para "True", "true", "Falso" ou "false". Qualquer outro valor gera um <xref:System.FormatException> exceção.  
  
    -   <xref:System.DateTime> e <xref:System.DateTimeOffset>. Todos os dados de data e hora é interpretado com base nas convenções de formatação de uma determinada cultura: cultura thread atual (ou, em alguns casos, a cultura atual de domínio de aplicativo), a cultura invariável ou uma cultura específica. Quando você chama o <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> e <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> métodos, dados de data e hora também devem estar em conformidade *exatamente* um padrão especificado por uma ou mais [cadeias de caracteres de formato padrão](~/docs/standard/base-types/standard-date-and-time-format-strings.md) ou [personalizado cadeias de caracteres de formato](~/docs/standard/base-types/custom-date-and-time-format-strings.md) que são fornecidos como argumentos na chamada do método. Se ele não está em conformidade com um padrão esperado de específicos de cultura, um <xref:System.FormatException> exceção será lançada. Isso significa que dados de data e hora salvos em um formato de específicos de cultura em um sistema não podem analisar com êxito em outro sistema.  
  
         Para obter mais informações sobre análise de datas e horas, consulte [análise Date and Time Strings](~/docs/standard/base-types/parsing-datetime.md) e a documentação para o método que gerou a exceção.  
  
    -   **GUIDs.** A representação de cadeia de caracteres de um GUID deve conter 32 dígitos hexadecimais (0-F) e deve estar em um a saída de cinco formatos de <xref:System.Guid.ToString%2A?displayProperty=nameWithType> método. Para obter mais informações, consulte o método <xref:System.Guid.Parse%2A?displayProperty=nameWithType>.  
  
    -   **Tipos numéricos, incluindo tudo assinados inteiros, números inteiros sem sinal e tipos de ponto flutuante.** A cadeia de caracteres a ser analisada deve consistir de latinos dígitos 0-9. Símbolo de moeda, um sinal positivo ou negativo, separador decimal e separadores de grupo também podem ser permitidas. Tentativa de analisar uma cadeia de caracteres que contém qualquer outro caractere sempre gera um <xref:System.FormatException> exceção.  
  
         Todas as cadeias de caracteres numéricas são interpretadas com base nas convenções de formatação de uma determinada cultura: cultura thread atual (ou, em alguns casos, a cultura atual de domínio de aplicativo), a cultura invariável ou uma cultura específica. Como resultado, uma cadeia de caracteres numérica que é analisada usando as convenções de uma cultura pode falhar ao usar as convenções do outro.  
  
         Para obter mais informações sobre como analisar cadeias de caracteres numéricas, consulte [Analisando cadeias de caracteres numéricas](~/docs/standard/base-types/parsing-numeric.md) e a documentação para o método específico que lançou a exceção.  
  
    -   **Intervalos de tempo.** A cadeia de caracteres a ser analisada deve ser no formato de cultura fixo ou em um formato de cultura definido pela cultura do thread atual (ou, em alguns casos, a cultura atual de domínio de aplicativo), a cultura invariável ou uma cultura específica. Se a cadeia de caracteres não está em um formato apropriado, ou se, no mínimo, dias, horas, e os componentes de minutos do intervalo de tempo não estão presentes, o método de análise gera uma <xref:System.FormatException> exceção. Para obter mais informações, consulte a documentação para o <xref:System.TimeSpan> análise do método que lançou a exceção.  
  
-   Um tipo implementa o <xref:System.IFormattable> interface, que oferece suporte a cadeias de caracteres de formato que definem como um objeto é convertido em sua representação de cadeia de caracteres e uma cadeia de caracteres de formato inválido é usada. Isso é mais comum em uma operação de formatação. No exemplo a seguir, a cadeia de caracteres de formato padrão de "P" é usada em uma cadeia de caracteres de formato composto para formatar um número. No entanto, não é válido "Q" [cadeia de caracteres de formato padrão](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
     [!code-csharp[System.FormatException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/iformattable1.cs#7)]
     [!code-vb[System.FormatException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/iformattable1.vb#7)]  
  
     Essa exceção resulta de um erro de codificação. Para corrigir o erro, remova a cadeia de caracteres de formato ou substituir um válido. O exemplo a seguir corrige o erro, substituindo a cadeia de caracteres de formato inválido com a cadeia de caracteres de formato "C" (moeda).  
  
     [!code-csharp[System.FormatException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/iformattable2.cs#8)]
     [!code-vb[System.FormatException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/iformattable2.vb#8)]  
  
     Um <xref:System.FormatException> exceção também pode ser lançada por métodos de análise, como <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> e <xref:System.Guid.ParseExact%2A?displayProperty=nameWithType>, que exigem a cadeia de caracteres a ser analisada para estar de acordo com exatamente o padrão especificado por uma cadeia de caracteres de formato. No exemplo a seguir, a representação de cadeia de caracteres de um GUID deve estar de acordo com o padrão especificado pela cadeia de caracteres de formato padrão "G". No entanto, o <xref:System.Guid> a implementação da estrutura de <xref:System.IFormattable> não oferece suporte a cadeia de caracteres de formato "G".  
  
     [!code-csharp[System.FormatException#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/iformattable3.cs#9)]
     [!code-vb[System.FormatException#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/iformattable3.vb#9)]  
  
     Essa exceção também resulta de um erro de codificação. Para corrigi-lo, chamar um método de análise que não requer um formato preciso, tais como <xref:System.DateTime.Parse%2A?displayProperty=nameWithType> ou <xref:System.Guid.Parse%2A?displayProperty=nameWithType>, ou substituir uma cadeia de caracteres de formato válido. O exemplo a seguir corrige o erro ao chamar o <xref:System.Guid.Parse%2A?displayProperty=nameWithType> método.  
  
     [!code-csharp[System.FormatException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/iformattable4.cs#10)]
     [!code-vb[System.FormatException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/iformattable4.vb#10)]  
  
-   Um ou mais índices dos itens de formato em um [cadeia de caracteres de formato composto](~/docs/standard/base-types/composite-formatting.md) é maior do que os índices dos itens na matriz de parâmetro ou lista de objetos. No exemplo a seguir, o maior índice de um item de formato de cadeia de caracteres de formato é 3. Como os índices de itens na lista de objeto são com base em zero, essa cadeia de caracteres de formato exigiria a lista de objetos com quatro itens. Em vez disso, ele tem somente três `dat`, `temp`, e `scale`, portanto, o código resulta em um <xref:System.FormatException> exceção em tempo de execução:.  
  
     [!code-csharp[System.FormatException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/example1.cs#1)]
     [!code-vb[System.FormatException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/example1.vb#1)]  
  
     Nesse caso, o <xref:System.FormatException> exceção é um resultado de erro do desenvolvedor. Ele deve ser corrigido em vez de tratados em um `try/catch` bloco, certificando-se de que cada item na lista de objeto corresponde ao índice de um item de formato. Para corrigir esse exemplo, alterar o índice do segundo item de formato para referir-se a `dat` variável e diminuir o índice de cada item de formato subsequentes por um.  
  
     [!code-csharp[System.FormatException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/example2.cs#2)]
     [!code-vb[System.FormatException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/example2.vb#2)]  
  
-   A cadeia de caracteres de formato composto não está bem formada. Quando isso acontece, o <xref:System.FormatException> exceção sempre é um resultado de erro do desenvolvedor. Ele deve ser corrigido em vez de tratados em um `try/catch` bloco.  
  
     Tentando incluir chaves literal em uma cadeia de caracteres, como o exemplo a seguir, lançará a exceção.  
  
     [!code-csharp[System.String.Format#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa3.cs#23)]
     [!code-vb[System.String.Format#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa3.vb#23)]  
  
     A técnica recomendada para incluindo chaves literal em uma cadeia de caracteres de formato composto é incluí-las na lista de objetos e usar itens de formato para inseri-los na cadeia de caracteres de resultado. Por exemplo, você pode modificar a cadeia de caracteres de formato composto anterior, conforme mostrado aqui.  
  
     [!code-csharp[System.String.Format#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa3.cs#24)]
     [!code-vb[System.String.Format#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa3.vb#24)]  
  
     A exceção também é gerada se a cadeia de caracteres de formato contiver um erro de digitação. A seguinte chamada para o <xref:System.String.Format%2A?displayProperty=nameWithType> método omite uma chave de fechamento e pares de uma chave de abertura com um colchete de fechamento.  
  
     [!code-csharp[System.FormatException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/example3.cs#3)]
     [!code-vb[System.FormatException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/example3.vb#3)]  
  
     Para corrigir o erro, certifique-se de que todos os abrindo e fechando chaves correspondem.  
  
     [!code-csharp[System.FormatException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/example3.cs#4)]
     [!code-vb[System.FormatException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/example3.vb#4)]  
  
-   Você já forneceu a lista de objetos em uma composição método como uma matriz de parâmetro com rigidez de tipos de formatação e o <xref:System.FormatException> exceção indica que o índice de um ou mais itens de formato excede o número de argumentos na lista de objetos. Isso ocorre porque não existe nenhuma conversão explícita entre tipos de matriz, portanto em vez disso, que o compilador trata a matriz como um argumento único em vez de uma matriz de parâmetros. Por exemplo, a seguinte chamada para o <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> método lança um <xref:System.FormatException> exceção, embora o índice mais alto dos itens de formato é 3 e a matriz de parâmetros de tipo <xref:System.Int32> tem quatro elementos.  
  
     [!code-csharp[System.FormatException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/qa1.cs#5)]
     [!code-vb[System.FormatException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/qa1.vb#5)]  
  
     Em vez de lidar com essa exceção, você deve eliminar sua causa. Como o Visual Basic nem c# pode converter uma matriz de inteiros em uma matriz de objeto, você precisa executar a conversão antes de chamar a método de formatação de composição. O exemplo a seguir fornece uma implementação.  
  
     [!code-csharp[System.FormatException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/qa2.cs#6)]
     [!code-vb[System.FormatException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/qa2.vb#6)]  
  
 <xref:System.FormatException> usa o HRESULT COR_E_FORMAT, que tem o valor 0x80131537.  
  
 O <xref:System.FormatException> classe derivada de <xref:System.Exception> e não adiciona nenhum membro exclusivo. Para obter uma lista de valores de propriedade inicial para uma instância do <xref:System.FormatException>, consulte o <xref:System.FormatException.%23ctor%2A> construtores.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.FormatException" /> class.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormatException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FormatException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormatException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.FormatException" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este construtor inicializa o <xref:System.Exception.Message%2A> propriedade da nova instância para uma mensagem fornecida pelo sistema que descreve o erro, como "Formato inválido." Esta mensagem leva em conta a cultura do sistema atual.  
  
 A tabela a seguir mostra os valores de propriedade iniciais para uma instância de <xref:System.FormatException>.  
  
|Propriedade|Valor|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Uma referência nula (`Nothing` no Visual Basic).|  
|<xref:System.Exception.Message%2A>|A cadeia de caracteres da mensagem de erro localizada.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormatException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FormatException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormatException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new FormatException : string -&gt; FormatException" Usage="new System.FormatException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">The message that describes the error.</param>
        <summary>Initializes a new instance of the <see cref="T:System.FormatException" /> class with a specified error message.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este construtor inicializa a propriedade <xref:System.Exception.Message%2A?displayProperty=nameWithType> da nova exceção usando-se o parâmetro `message`. O conteúdo de `message` deve ser compreendido por humanos. O chamador desse construtor é necessário para garantir que essa cadeia de caracteres tenha sido localizada para a cultura do sistema atual.  
  
 A tabela a seguir mostra os valores de propriedade iniciais para uma instância de <xref:System.FormatException>.  
  
|Propriedade|Valor|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Uma referência nula (`Nothing` no Visual Basic).|  
|<xref:System.Exception.Message%2A>|A cadeia de caracteres da mensagem de erro.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected FormatException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; FormatException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new FormatException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; FormatException" Usage="new System.FormatException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">The object that holds the serialized object data.</param>
        <param name="context">The contextual information about the source or destination.</param>
        <summary>Initializes a new instance of the <see cref="T:System.FormatException" /> class with serialized data.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este construtor é chamado durante a desserialização para reconstituir o objeto de exceção transmitido por um fluxo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormatException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FormatException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormatException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new FormatException : string * Exception -&gt; FormatException" Usage="new System.FormatException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">The error message that explains the reason for the exception.</param>
        <param name="innerException">The exception that is the cause of the current exception. If the <c>innerException</c> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
        <summary>Initializes a new instance of the <see cref="T:System.FormatException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma exceção que é lançada como um resultado direto de uma exceção anterior deve incluir uma referência para a exceção anterior na propriedade <xref:System.Exception.InnerException%2A>. A propriedade <xref:System.Exception.InnerException%2A> retorna o mesmo valor que é passado para o construtor ou uma referência nula (`Nothing` no Visual Basic) caso a propriedade <xref:System.Exception.InnerException%2A> não forneça o valor de exceção interna para o construtor.  
  
 A tabela a seguir mostra os valores de propriedade iniciais para uma instância de <xref:System.FormatException>.  
  
|Propriedade|Valor|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|A referência de exceção interna.|  
|<xref:System.Exception.Message%2A>|A cadeia de caracteres da mensagem de erro.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
  </Members>
</Type>