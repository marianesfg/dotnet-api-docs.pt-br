<Type Name="Action&lt;T1,T2,T3&gt;" FullName="System.Action&lt;T1,T2,T3&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c839e4ff80e04855d94465fe9a6adcb7298ea98c" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39916982" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void Action&lt;in T1,in T2,in T3&gt;(T1 arg1, T2 arg2, T3 arg3);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`3&lt;- T1, - T2, - T3&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`3" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T1, In T2, In T3)(arg1 As T1, arg2 As T2, arg3 As T3)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3&gt;&#xA;public delegate void Action(T1 arg1, T2 arg2, T3 arg3);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T1, 'T2, 'T3&gt; = delegate of 'T1 * 'T2 * 'T3 -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">
      <span data-ttu-id="5a053-101">O tipo do primeiro parâmetro do método encapsulado por esse delegado.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5a053-101">The type of the first parameter of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <typeparam name="T2">
      <span data-ttu-id="5a053-102">O tipo do segundo parâmetro do método encapsulado por esse delegado.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5a053-102">The type of the second parameter of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <typeparam name="T3">
      <span data-ttu-id="5a053-103">O tipo do terceiro parâmetro do método encapsulado por esse delegado.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5a053-103">The type of the third parameter of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <param name="arg1">
      <span data-ttu-id="5a053-104">O primeiro parâmetro do método encapsulado por esse delegado.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5a053-104">The first parameter of the method that this delegate encapsulates.</span>
      </span>
    </param>
    <param name="arg2">
      <span data-ttu-id="5a053-105">O segundo parâmetro do método encapsulado por esse delegado.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5a053-105">The second parameter of the method that this delegate encapsulates.</span>
      </span>
    </param>
    <param name="arg3">
      <span data-ttu-id="5a053-106">O terceiro parâmetro do método encapsulado por esse delegado.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5a053-106">The third parameter of the method that this delegate encapsulates.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="5a053-107">Encapsula um método que tem três parâmetros e não retorna um valor.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5a053-107">Encapsulates a method that has three parameters and does not return a value.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5a053-108">Você pode usar o <xref:System.Action%603> delegado para passar um método como um parâmetro sem declarar explicitamente um delegado personalizado.</span><span class="sxs-lookup"><span data-stu-id="5a053-108">You can use the <xref:System.Action%603> delegate to pass a method as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="5a053-109">O método encapsulado deve corresponder à assinatura do método que é definida por esse delegado.</span><span class="sxs-lookup"><span data-stu-id="5a053-109">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="5a053-110">Isso significa que o método encapsulado deve ter três parâmetros que são todos passados a ele por valor, e ele não deve retornar um valor.</span><span class="sxs-lookup"><span data-stu-id="5a053-110">This means that the encapsulated method must have three parameters that are all passed to it by value, and it must not return a value.</span></span> <span data-ttu-id="5a053-111">(No c#, o método deve retornar `void`.</span><span class="sxs-lookup"><span data-stu-id="5a053-111">(In C#, the method must return `void`.</span></span> <span data-ttu-id="5a053-112">No Visual Basic, ele deve ser definido pelo `Sub`...`End Sub`</span><span class="sxs-lookup"><span data-stu-id="5a053-112">In Visual Basic, it must be defined by the `Sub`…`End Sub`</span></span> <span data-ttu-id="5a053-113">Construa.</span><span class="sxs-lookup"><span data-stu-id="5a053-113">construct.</span></span> <span data-ttu-id="5a053-114">Ele também pode ser um método que retorna um valor que será ignorado.) Normalmente, esse tipo de método é usado para executar uma operação.</span><span class="sxs-lookup"><span data-stu-id="5a053-114">It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5a053-115">Para fazer referência a um método que tem três parâmetros e retorna um valor, use o genérico <xref:System.Func%604> delegado em vez disso.</span><span class="sxs-lookup"><span data-stu-id="5a053-115">To reference a method that has three parameters and returns a value, use the generic <xref:System.Func%604> delegate instead.</span></span>  
  
 <span data-ttu-id="5a053-116">Quando você usa o <xref:System.Action%603> delegado, você não precisa definir explicitamente um delegado que encapsula um método com três parâmetros.</span><span class="sxs-lookup"><span data-stu-id="5a053-116">When you use the <xref:System.Action%603> delegate, you do not have to explicitly define a delegate that encapsulates a method with three parameters.</span></span> <span data-ttu-id="5a053-117">Por exemplo, o código a seguir declara explicitamente um delegado chamado `StringCopy` e atribui uma referência para o `CopyStrings` método para sua instância do delegado.</span><span class="sxs-lookup"><span data-stu-id="5a053-117">For example, the following code explicitly declares a delegate named `StringCopy` and assigns a reference to the `CopyStrings` method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Action~3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~3/cs/Delegate.cs#1)]
 [!code-vb[System.Action~3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~3/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="5a053-118">O exemplo a seguir simplifica esse código pela instanciação de <xref:System.Action%603> delegado em vez de explicitamente definindo um novo delegado e atribuí-lo um método nomeado.</span><span class="sxs-lookup"><span data-stu-id="5a053-118">The following example simplifies this code by instantiating the <xref:System.Action%603> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Action~3#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~3/cs/Action3.cs#2)]
 [!code-vb[System.Action~3#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~3/vb/Action3.vb#2)]  
  
 <span data-ttu-id="5a053-119">Você também pode usar o <xref:System.Action%603> delegar com métodos anônimos no c#, como mostra o exemplo a seguir.</span><span class="sxs-lookup"><span data-stu-id="5a053-119">You can also use the <xref:System.Action%603> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="5a053-120">(Para obter uma introdução aos métodos anônimos, consulte [métodos anônimos](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span><span class="sxs-lookup"><span data-stu-id="5a053-120">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Action~3#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~3/cs/Anon.cs#3)]  
  
 <span data-ttu-id="5a053-121">Você também pode atribuir uma expressão lambda para uma <xref:System.Action%603> delegar a instância, como mostra o exemplo a seguir.</span><span class="sxs-lookup"><span data-stu-id="5a053-121">You can also assign a lambda expression to an <xref:System.Action%603> delegate instance, as the following example illustrates.</span></span> <span data-ttu-id="5a053-122">(Para obter uma introdução às expressões lambda, consulte [expressões Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span><span class="sxs-lookup"><span data-stu-id="5a053-122">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Action~3#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~3/cs/Lambda.cs#4)]
 [!code-vb[System.Action~3#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~3/vb/lambda.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`4" />
  </Docs>
</Type>