<Type Name="DateTimeOffset" FullName="System.DateTimeOffset">
  <Metadata><Meta Name="ms.openlocfilehash" Value="47e90fd28d75157cd16c43eed5fe0fc8b6390178" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55398688" /></Metadata><TypeSignature Language="C#" Value="public struct DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTimeOffset extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IEquatable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IFormattable, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTimeOffset" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTimeOffset&#xA;Implements IComparable, IComparable(Of DateTimeOffset), IDeserializationCallback, IEquatable(Of DateTimeOffset), IFormattable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type DateTimeOffset = struct&#xA;    interface IFormattable&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa um ponto no tempo, geralmente expresso como uma data e hora do dia, em relação ao Tempo Universal Coordenado (UTC).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset> estrutura inclui um <xref:System.DateTime> valor, junto com um <xref:System.DateTimeOffset.Offset%2A> propriedade que define a diferença entre atual <xref:System.DateTimeOffset> da instância data e hora e Tempo Universal Coordenado (UTC). Porque define exatamente uma data e hora em relação ao UTC, o <xref:System.DateTimeOffset> a estrutura não inclui um `Kind` membro, como o <xref:System.DateTime> estrutura faz. Ele representa datas e horas com valores cuja UTC varia de 12:00:00 meia-noite, 1 de janeiro de 0001 DC Cristã (Era comum), 11:59:59 PM, 31 de dezembro de 9999 D.C. (C.E.).  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 O componente de tempo de um <xref:System.DateTimeOffset> valor é medido em unidades de 100 nanossegundos chamadas tiques e uma data específica é o número de tiques desde a meia-noite, 1º de janeiro de 0001 D.C. (C.E.) no <xref:System.Globalization.GregorianCalendar> calendário. Um <xref:System.DateTimeOffset> valor é sempre expresso no contexto de um valor explícito ou calendário padrão. Tiques serão atribuídos a leap segundos não são incluídas no número total de tiques.  
  
 Embora um <xref:System.DateTimeOffset> valor inclui um deslocamento, ele não é uma estrutura de dados totalmente reconhecimento de fuso horário. Enquanto um deslocamento do UTC é uma característica de um fuso horário, ela não identifica inequivocamente um fuso horário. Não apenas fazer vários fusos compartilham o mesmo deslocamento do UTC, mas o deslocamento de um único fuso horário é alterado se ele observa o horário de verão. Isso significa que, assim que um <xref:System.DateTimeOffset> valor é dissociado do seu fuso horário, ele pode inequivocamente desvinculado volta para seu fuso horário original.  
  
 Porque <xref:System.DateTimeOffset> é uma estrutura, uma <xref:System.DateTimeOffset> objeto que foi declarado, mas não inicializado contém os valores padrão para cada um de seus campos de membro. Isso significa que seu <xref:System.DateTimeOffset.DateTime%2A> estiver definida como <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> e seu <xref:System.DateTimeOffset.Offset%2A> estiver definida como <xref:System.TimeSpan.Zero?displayProperty=nameWithType>.  
  
 Você pode criar um novo <xref:System.DateTimeOffset> valor chamando-se qualquer uma das sobrecargas do construtor, que são semelhantes aos construtores sobrecarregados para o <xref:System.DateTime> estrutura. Você também pode criar um novo <xref:System.DateTimeOffset> valor atribuindo a ele um <xref:System.DateTime> valor. Isso é uma conversão implícita; ele não exige um operador de conversão (em c#) ou chamar um método de conversão (no Visual Basic). Você também pode inicializar uma <xref:System.DateTimeOffset> o valor da representação de cadeia de caracteres de uma data e hora, chamando um número de métodos, que incluem a cadeia de caracteres estática <xref:System.DateTimeOffset.Parse%2A>, <xref:System.DateTimeOffset.ParseExact%2A>, <xref:System.DateTimeOffset.TryParse%2A>, e <xref:System.DateTimeOffset.TryParseExact%2A>.  
  
 Os membros do <xref:System.DateTimeOffset> estrutura fornecem a funcionalidade nas seguintes áreas:  
  
-   Data e hora.  
  
     Você pode adicionar ou subtrair datas ou intervalos de tempo de um determinado <xref:System.DateTimeOffset> valor. Operações aritméticas com <xref:System.DateTimeOffset> valores diferentes daquelas com <xref:System.DateTime> valores, ajustar as diferenças na hora deslocamentos ao retornar um resultado. Por exemplo, o código a seguir usa <xref:System.DateTime> variáveis para subtrair a hora local atual da hora UTC atual. O código, em seguida, usa <xref:System.DateTimeOffset> variáveis para executar a mesma operação. A subtração com <xref:System.DateTime> valores retorna a diferença do fuso horário local do UTC, embora a subtração com <xref:System.DateTimeOffset> valores retorna <xref:System.TimeSpan.Zero?displayProperty=nameWithType>.  
  
     [!code-csharp[System.DateTimeOffset.Type#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Type/cs/Type.cs#1)]
     [!code-vb[System.DateTimeOffset.Type#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Type/vb/Type.vb#1)]  
  
-   Operações de conversão de tipo.  
  
     Você pode converter <xref:System.DateTimeOffset> valores <xref:System.DateTimeOffset.DateTime%2A> valores e vice-versa.  
  
-   Operações de extração e manipulação de tempo.  
  
     Você pode extrair a data ou a hora de um <xref:System.DateTimeOffset> valor. Você também pode recuperar o valor de um determinado <xref:System.DateTimeOffset> componente, como o ano ou mês.  

   > [!NOTE]
   >  Se você estiver trabalhando com um valor de tiques que você deseja converter em algum outro intervalo de tempo, como minutos ou segundos, você deve usar o <xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>, ou <xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType> constante para realizar a conversão. Por exemplo adicionar o número de segundos representado por um número especificado de tiques para o <xref:System.DateTimeOffset.Second%2A> componente de um <xref:System.DateTimeOffset> valor, você pode usar a expressão `dateValue.Second + nTicks/Timespan.TicksPerSecond`.  
  

-   Conversão de data e hora.  
  
     Você pode converter qualquer <xref:System.DateTimeOffset> valor para outro <xref:System.DateTimeOffset> valor que representa o mesmo ponto no tempo em outro fuso horário. No entanto, as regras de ajuste de um fuso horário são aplicadas apenas no caso do <xref:System.DateTimeOffset.ToLocalTime%2A> método, que converte um <xref:System.DateTimeOffset> valor para a data e hora na zona de sistema local.  
  
-   Comparação de data e hora.  
  
     Você pode determinar se qualquer determinada <xref:System.DateTimeOffset> valor é anterior, igual ou posterior à outra <xref:System.DateTimeOffset> valor. Antes da comparação é executada, todos os valores são convertidos em UTC.  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/datetime/choosing-between-datetime.md">Escolhendo entre DateTime, DateTimeOffset, TimeSpan e TimeZoneInfo</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">Exemplo: .NET Framework 4 Formatting Utility&amp;lt;2}&amp;lt;1}</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa uma nova instância da estrutura <see cref="T:System.DateTimeOffset" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : DateTime -&gt; DateTimeOffset" Usage="new System.DateTimeOffset dateTime" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Uma data e hora.</param>
        <summary>Inicializa uma nova instância da estrutura <see cref="T:System.DateTimeOffset" /> usando o valor <see cref="T:System.DateTime" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Comportamento do construtor, este depende do valor da <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> propriedade do `dateTime` parâmetro:  
  
-   Se o valor de <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> está <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, o <xref:System.DateTimeOffset.DateTime%2A> propriedade da nova instância é definida igual a `dateTime`e o <xref:System.DateTimeOffset.Offset%2A> propriedade é definida igual ao <xref:System.TimeSpan.Zero>.  
  
-   Se o valor de <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> está <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ou <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, o <xref:System.DateTimeOffset.DateTime%2A> propriedade da nova instância é definida igual ao `dateTime`e o <xref:System.DateTimeOffset.Offset%2A> propriedade será definida como igual ao deslocamento do fuso horário da atual do sistema local.  
  
   
  
## Examples  
 O exemplo a seguir ilustra como o valor da <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> propriedade do `dateTime` parâmetro afeta o valor de data e hora que é retornado por esse construtor.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#1)]
 [!code-vb[System.DateTimeOffset.Constructors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">A data e hora em UTC (Tempo Universal Coordenado) que resultam da aplicação do deslocamento são anteriores a <see cref="F:System.DateTimeOffset.MinValue" />.  
  
- ou - 
A data e hora UTC que resulta da aplicação do deslocamento é posterior a <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Criando uma instância de um objeto DateTimeOffset</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : DateTime * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (dateTime, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dateTime">Uma data e hora.</param>
        <param name="offset">O deslocamento de tempo em relação ao Tempo Universal Coordenado (UTC).</param>
        <summary>Inicializa uma nova instância da estrutura <see cref="T:System.DateTimeOffset" /> usando o valor <see cref="T:System.DateTime" /> e deslocamento especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Comportamento do construtor, este depende em parte no valor da <xref:System.DateTime.Kind%2A> propriedade do `dateTime` parâmetro:  
  
-   Se o valor de <xref:System.DateTime.Kind%2A> está <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, o valor da `offset` parâmetro deve ser 0 ou um <xref:System.ArgumentException> é gerada.  
  
-   Se o valor de <xref:System.DateTime.Kind%2A> está <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, o valor da `offset` parâmetro deve ser igual ao deslocamento do fuso horário local do tempo Universal Coordenado (UTC) para essa data específica ou um <xref:System.ArgumentException> é gerada.  
  
-   Se o valor de <xref:System.DateTime.Kind%2A> está <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, o `offset` parâmetro pode ter qualquer valor válido.  
  
   
  
## Examples  
 O exemplo a seguir mostra como inicializar um <xref:System.DateTimeOffset> objeto com uma data e hora e o deslocamento do fuso horário local quando esse fuso horário não é conhecido de antemão.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#3)]
 [!code-vb[System.DateTimeOffset.Constructors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime.Kind" /> é igual a <see cref="F:System.DateTimeKind.Utc" /> e <paramref name="offset" /> não é igual a zero.  
  
- ou - 
 <paramref name="dateTime.Kind" /> é igual a <see cref="F:System.DateTimeKind.Local" /> e <paramref name="offset" /> não é igual ao deslocamento do fuso horário local do sistema.  
  
- ou - 
 O <paramref name="offset" /> não está especificado em minutos inteiros.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> é menor que -14 horas ou maior que 14 horas.  
  
- ou - 
 <see cref="P:System.DateTimeOffset.UtcDateTime" /> é menor que <see cref="F:System.DateTimeOffset.MinValue" /> ou maior que <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Criando uma instância de um objeto DateTimeOffset</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (long ticks, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(long ticks, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int64 * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (ticks, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ticks">Uma data e hora expressada como o número de intervalos de 100 nanossegundos decorridos desde a meia noite de 1º de janeiro, 0001.</param>
        <param name="offset">O deslocamento de tempo em relação ao Tempo Universal Coordenado (UTC).</param>
        <summary>Inicializa uma nova instância da estrutura <see cref="T:System.DateTimeOffset" /> usando o número de tiques e deslocamento especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, tentando chamar o <xref:System.DateTimeOffset.%23ctor%2A> construtor para instanciar uma <xref:System.DateTimeOffset> valor com uma hora local e um deslocamento diferente de que, da hora local zona gera um <xref:System.ArgumentException>. Você pode usar essa sobrecarga da <xref:System.DateTimeOffset> construtor para contornar essa limitação. O exemplo a seguir usa número de hora local de tiques para instanciar um <xref:System.DateTimeOffset> valor cujo deslocamento não representa necessariamente da hora local:  
  
 [!code-csharp[System.DateTimeOffset.Constructors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#4)]
 [!code-vb[System.DateTimeOffset.Constructors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#4)]  
  
   
  
## Examples  
 O exemplo a seguir inicializa um <xref:System.DateTimeOffset> objeto usando o número de tiques em uma data arbitrária (nesse caso, 16 de julho de 2007, às 1:32 PM) com um deslocamento de -5.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#2)]
 [!code-vb[System.DateTimeOffset.Constructors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O <paramref name="offset" /> não está especificado em minutos inteiros.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">A propriedade <see cref="P:System.DateTimeOffset.UtcDateTime" /> é anterior a <see cref="F:System.DateTimeOffset.MinValue" /> ou posterior a <see cref="F:System.DateTimeOffset.MaxValue" />.  
  
- ou - 
 <paramref name="ticks" /> é menor que <see langword="DateTimeOffset.MinValue.Ticks" /> ou maior que <see langword="DateTimeOffset.MaxValue.Ticks" />.  
  
- ou - 
 <paramref name="Offset" /> é menor que -14 horas ou maior que 14 horas.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Criando uma instância de um objeto DateTimeOffset</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">O ano (de 1 a 9999).</param>
        <param name="month">O mês (de 1 a 12).</param>
        <param name="day">O dia (1 até o número de dias em <paramref name="month" />).</param>
        <param name="hour">As horas (de 0 a 23).</param>
        <param name="minute">Os minutos (de 0 a 59).</param>
        <param name="second">Os segundos (de 0 a 59).</param>
        <param name="offset">O deslocamento de tempo em relação ao Tempo Universal Coordenado (UTC).</param>
        <summary>Inicializa uma nova instância da estrutura <see cref="T:System.DateTimeOffset" /> usando o ano, mês, dia, hora, minuto, segundo e deslocamento especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este construtor interpreta `year`, `month` e `day` como um ano, mês e um dia no calendário gregoriano. Para criar uma instância de um <xref:System.DateTimeOffset> valor usando o ano, mês e dia no calendário de outro, chamada de <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29> construtor.  
  
   
  
## Examples  
 O exemplo a seguir instancia um <xref:System.DateTimeOffset> objeto usando o <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=nameWithType> sobrecarga de construtor.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#5)]
 [!code-vb[System.DateTimeOffset.Constructors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" /> não representa minutos inteiros.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> é menor que um ou maior que 9.999.  
  
- ou - 
 <paramref name="month" /> é menor que um ou maior que 12.  
  
- ou - 
 <paramref name="day" /> é menor que um ou maior que o número de dias em <paramref name="month" />.  
  
- ou - 
 <paramref name="hour" /> é menor que zero ou maior que 23.  
  
- ou - 
 <paramref name="minute" /> é menor que 0 ou maior que 59.  
  
- ou - 
 <paramref name="second" /> é menor que 0 ou maior que 59.  
  
- ou - 
 <paramref name="offset" /> é menor que -14 horas ou maior que 14 horas.  
  
- ou - 
A propriedade <see cref="P:System.DateTimeOffset.UtcDateTime" /> é anterior a <see cref="F:System.DateTimeOffset.MinValue" /> ou posterior a <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Criando uma instância de um objeto DateTimeOffset</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * int * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, millisecond, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">O ano (de 1 a 9999).</param>
        <param name="month">O mês (de 1 a 12).</param>
        <param name="day">O dia (1 até o número de dias em <paramref name="month" />).</param>
        <param name="hour">As horas (de 0 a 23).</param>
        <param name="minute">Os minutos (de 0 a 59).</param>
        <param name="second">Os segundos (de 0 a 59).</param>
        <param name="millisecond">Os milissegundos (de 0 a 999).</param>
        <param name="offset">O deslocamento de tempo em relação ao Tempo Universal Coordenado (UTC).</param>
        <summary>Inicializa uma nova instância da estrutura <see cref="T:System.DateTimeOffset" /> usando o ano, mês, dia, hora, minuto, segundo, milissegundo e deslocamento especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este construtor interpreta `year`, `month` e `day` como um ano, mês e um dia no calendário gregoriano. Para criar uma instância de um <xref:System.DateTimeOffset> valor usando o ano, mês e dia no calendário de outro, chamada de <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29> construtor.  
  
   
  
## Examples  
 O exemplo a seguir instancia um <xref:System.DateTimeOffset> objeto usando o <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=nameWithType> sobrecarga de construtor.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#7)]
 [!code-vb[System.DateTimeOffset.Constructors#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" /> não representa minutos inteiros.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> é menor que um ou maior que 9.999.  
  
- ou - 
 <paramref name="month" /> é menor que um ou maior que 12.  
  
- ou - 
 <paramref name="day" /> é menor que um ou maior que o número de dias em <paramref name="month" />.  
  
- ou - 
 <paramref name="hour" /> é menor que zero ou maior que 23.  
  
- ou - 
 <paramref name="minute" /> é menor que 0 ou maior que 59.  
  
- ou - 
 <paramref name="second" /> é menor que 0 ou maior que 59.  
  
- ou - 
 <paramref name="millisecond" /> é menor que 0 ou maior que 999.  
  
- ou - 
 <paramref name="offset" /> é menor que -14 ou maior que 14.  
  
- ou - 
A propriedade <see cref="P:System.DateTimeOffset.UtcDateTime" /> é anterior a <see cref="F:System.DateTimeOffset.MinValue" /> ou posterior a <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Criando uma instância de um objeto DateTimeOffset</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * int * System.Globalization.Calendar * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, millisecond, calendar, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">O ano.</param>
        <param name="month">O mês (de 1 a 12).</param>
        <param name="day">O dia (1 até o número de dias em <paramref name="month" />).</param>
        <param name="hour">As horas (de 0 a 23).</param>
        <param name="minute">Os minutos (de 0 a 59).</param>
        <param name="second">Os segundos (de 0 a 59).</param>
        <param name="millisecond">Os milissegundos (de 0 a 999).</param>
        <param name="calendar">O calendário usado para interpretar <paramref name="year" />, <paramref name="month" /> e <paramref name="day" />.</param>
        <param name="offset">O deslocamento de tempo em relação ao Tempo Universal Coordenado (UTC).</param>
        <summary>Inicializa uma nova instância da estrutura <see cref="T:System.DateTimeOffset" /> usando o ano, mês, dia, hora, minuto, segundo, milissegundo e deslocamento especificados de um calendário especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `year`, `month`, `day`, `hour`, `minute`, `second`, e `millisecond` todos os parâmetros refletem os valores expressadas no calendário especificado pelo `calendar` parâmetro. Uma exceção é lançada se esses valores formam uma data e hora que não pode ser expresso usando este calendário.  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]   

## Examples  
 O exemplo a seguir usa instâncias de ambas as <xref:System.Globalization.HebrewCalendar> classe e o <xref:System.Globalization.HijriCalendar> classe para instanciar um <xref:System.DateTimeOffset> valor. Essa data é exibida no console usando os respectivos calendários e o calendário gregoriano.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#8)]
 [!code-vb[System.DateTimeOffset.Constructors#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" /> não representa minutos inteiros.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" /> não pode ser <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> é menor que o <see langword="MinSupportedDateTime.Year" /> do parâmetro <paramref name="calendar" /> ou maior que <see langword="MaxSupportedDateTime.Year" />.  
  
- ou - 
 <paramref name="month" /> é menor que ou maior que o número de meses em <paramref name="year" /> no <paramref name="calendar" />.  
  
- ou - 
 <paramref name="day" /> é menor que um ou maior que o número de dias em <paramref name="month" />.  
  
- ou - 
 <paramref name="hour" /> é menor que zero ou maior que 23.  
  
- ou - 
 <paramref name="minute" /> é menor que 0 ou maior que 59.  
  
- ou - 
 <paramref name="second" /> é menor que 0 ou maior que 59.  
  
- ou - 
 <paramref name="millisecond" /> é menor que 0 ou maior que 999.  
  
- ou - 
 <paramref name="offset" /> é menor que -14 horas ou maior que 14 horas.  
  
- ou - 
Os parâmetros <paramref name="year" />, <paramref name="month" /> e <paramref name="day" /> não podem ser representados como um valor de data e hora.  
  
- ou - 
A propriedade <see cref="P:System.DateTimeOffset.UtcDateTime" /> é anterior a <see cref="F:System.DateTimeOffset.MinValue" /> ou posterior a <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Criando uma instância de um objeto DateTimeOffset</related>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTimeOffset Add (TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Add(valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Add(System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset Add(TimeSpan timeSpan);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.Add timeSpan" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeSpan">Um objeto <see cref="T:System.TimeSpan" /> que representa um alarme ou um intervalo de tempo negativo.</param>
        <summary>Retorna um novo objeto <see cref="T:System.DateTimeOffset" /> que adiciona um intervalo de tempo especificado ao valor dessa instância.</summary>
        <returns>Um objeto cujo valor é a soma da data e hora representada pelo objeto <see cref="T:System.DateTimeOffset" /> atual e o intervalo de tempo representado por <paramref name="timeSpan" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode usar o <xref:System.DateTimeOffset.Add%2A> método para adicionar mais de um tipo de intervalo de tempo (dias, horas, minutos, segundos ou milissegundos) em uma única operação. Comportamento desse método é idêntico para o operador de adição. O <xref:System.DateTimeOffset> estrutura também dá suporte a métodos de adição especializada (tal como <xref:System.DateTimeOffset.AddDays%2A>, <xref:System.DateTimeOffset.AddHours%2A>, e <xref:System.DateTimeOffset.AddMinutes%2A>) para cada intervalo de tempo.  
  
> [!NOTE]
>  Este método retorna um novo objeto <xref:System.DateTimeOffset>. Ele não modifica o valor do objeto atual, adicionando `timeSpan` à sua data e hora.  
  
 O <xref:System.DateTimeOffset.Add%2A> método não afeta o valor do atual <xref:System.DateTimeOffset> do objeto <xref:System.DateTimeOffset.Offset%2A> propriedade.  
  
 Como uma <xref:System.DateTimeOffset> objeto não representa a data e hora em um fuso horário específico, o <xref:System.DateTimeOffset.Add%2A> método não considera as regras de ajuste de um determinado fuso horário quando ele executa a data e hora.  
  
 Se o `timeSpan` parâmetro é `null`, esse método retorna o valor do original <xref:System.DateTimeOffset> objeto inalterado.  
  
   
  
## Examples  
 O exemplo a seguir cria uma matriz de <xref:System.TimeSpan> objetos que representam os tempos de trânsito entre os destinos. O <xref:System.DateTimeOffset.Add%2A> método, em seguida, adiciona esses horários para um <xref:System.DateTimeOffset> objeto que representa tempo de decolagem inicial de um voo. O resultado reflete a hora de chegada agendado a cada destino.  
  
 [!code-csharp[System.DateTimeOffset.Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#1)]
 [!code-vb[System.DateTimeOffset.Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O valor <see cref="T:System.DateTimeOffset" /> resultante é menor que <see cref="F:System.DateTimeOffset.MinValue" />.  
  
- ou - 
O valor <see cref="T:System.DateTimeOffset" /> resultante é maior que <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <altmember cref="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Executando operações aritméticas com datas e horas</related>
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddDays (double days);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddDays(float64 days) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (days As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddDays(double days);" />
      <MemberSignature Language="F#" Value="member this.AddDays : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddDays days" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="days" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="days">Um número de dias inteiros e fracionários. O número pode ser positivo ou negativo.</param>
        <summary>Retorna um novo objeto <see cref="T:System.DateTimeOffset" /> que adiciona um número especificado de dias inteiros e fracionários ao valor dessa instância.</summary>
        <returns>Um objeto cujo valor é a soma da data e hora representada pelo objeto <see cref="T:System.DateTimeOffset" /> atual e o número de dias representado por <paramref name="days" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A parte fracionária de `days` parâmetro é a parte fracionária de um dia. Por exemplo, 4.5 é equivalente a 4 dias, 12 horas, 0 minutos, 0 segundos, 0 milissegundo. O parâmetro `days` é arredondado para o milissegundo mais próximo.  
  
> [!NOTE]
>  Este método retorna um novo objeto <xref:System.DateTimeOffset>. Ele não modifica o valor do objeto atual, adicionando `days` à sua data e hora.  
  
 Como uma <xref:System.DateTimeOffset> objeto não representa a data e hora em um fuso horário específico, o <xref:System.DateTimeOffset.AddDays%2A> método não considera as regras de ajuste de um determinado fuso horário quando ele executa a data e hora.  
  
 Converter os intervalos de tempo de menos de um dia em uma fração pode envolver uma perda de precisão. Se esse for um problema, você pode usar o <xref:System.DateTimeOffset.Add%2A> método, que permite que você especificar mais de um tipo de intervalo de tempo em uma única chamada de método e elimina a necessidade de converter os intervalos de tempo em partes fracionárias de um dia.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTimeOffset.AddDays%2A> método para listar as datas que se enquadram na segunda-feira, o início da semana de trabalho, em março de 2008.  
  
 [!code-csharp[System.DateTimeOffset.Methods#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#2)]
 [!code-vb[System.DateTimeOffset.Methods#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O valor <see cref="T:System.DateTimeOffset" /> resultante é menor que <see cref="F:System.DateTimeOffset.MinValue" />.  
  
- ou - 
O valor <see cref="T:System.DateTimeOffset" /> resultante é maior que <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddHours (double hours);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddHours(float64 hours) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (hours As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddHours(double hours);" />
      <MemberSignature Language="F#" Value="member this.AddHours : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddHours hours" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hours" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="hours">Um número de horas inteiras e fracionárias. O número pode ser positivo ou negativo.</param>
        <summary>Retorna um novo objeto <see cref="T:System.DateTimeOffset" /> que adiciona um número especificado de horas inteiras e fracionárias ao valor dessa instância.</summary>
        <returns>Um objeto cujo valor é a soma da data e hora representada pelo objeto <see cref="T:System.DateTimeOffset" /> atual e o número de horas representado por <paramref name="hours" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A parte fracionária de `hours` parâmetro é a parte fracionária de uma hora. Por exemplo, 4.5 é equivalente a 4 horas, 30 minutos, 0 segundos, 0 milissegundo. O parâmetro `hours` é arredondado para o milissegundo mais próximo.  
  
> [!NOTE]
>  Este método retorna um novo objeto <xref:System.DateTimeOffset>. Ele não modifica o valor do objeto atual, adicionando `hours` à sua data e hora.  
  
 Como uma <xref:System.DateTimeOffset> objeto não representa a data e hora em um fuso horário específico, o <xref:System.DateTimeOffset.AddHours%2A> método não considera as regras de ajuste de um determinado fuso horário quando ele executa a data e hora.  
  
 Converter os intervalos de tempo de menos de uma hora para uma fração pode envolver uma perda de precisão. (Por exemplo, um minuto é 0.01666 de uma hora). Se esse for um problema, você pode usar o <xref:System.DateTimeOffset.Add%2A> método, que permite que você especificar mais de um tipo de intervalo de tempo em uma única chamada de método e elimina a necessidade de converter os intervalos de tempo em partes fracionárias de uma hora.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTimeOffset.AddHours%2A> método para listar as horas de início do trabalho muda para uma semana específica em um escritório que tem dois turnos de oito horas por dia.  
  
 [!code-csharp[System.DateTimeOffset.Methods#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#3)]
 [!code-vb[System.DateTimeOffset.Methods#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O valor <see cref="T:System.DateTimeOffset" /> resultante é menor que <see cref="F:System.DateTimeOffset.MinValue" />.  
  
- ou - 
O valor <see cref="T:System.DateTimeOffset" /> resultante é maior que <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Executando operações aritméticas com datas e horas</related>
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMilliseconds (double milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMilliseconds(float64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (milliseconds As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMilliseconds(double milliseconds);" />
      <MemberSignature Language="F#" Value="member this.AddMilliseconds : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMilliseconds milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="milliseconds">Um número de milissegundos inteiros e fracionários. O número pode ser positivo ou negativo.</param>
        <summary>Retorna um novo objeto <see cref="T:System.DateTimeOffset" /> que adiciona um número especificado de milissegundos ao valor dessa instância.</summary>
        <returns>Um objeto cujo valor é a soma da data e hora representadas pelo objeto <see cref="T:System.DateTimeOffset" /> atual e o número de milissegundos completos representados por <paramref name="milliseconds" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A parte fracionária de `milliseconds` parâmetro é a parte fracionária de um milissegundo. Por exemplo, 4.5 é equivalente a 4 milissegundos e 5000 tiques, onde um milissegundo é igual a 10.000 tiques. No entanto, `milliseconds` é arredondado para o milissegundo mais próximo; todos os valores de.5 ou superior são arredondados para cima.  
  
> [!NOTE]
>  Este método retorna um novo objeto <xref:System.DateTimeOffset>. Ele não modifica o valor do objeto atual, adicionando `milliseconds` à sua data e hora.  
  
 Como uma <xref:System.DateTimeOffset> objeto não representa a data e hora em um fuso horário específico, o <xref:System.DateTimeOffset.AddMilliseconds%2A> método não considera as regras de ajuste de um determinado fuso horário quando ele executa a data e hora.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O valor <see cref="T:System.DateTimeOffset" /> resultante é menor que <see cref="F:System.DateTimeOffset.MinValue" />.  
  
- ou - 
O valor <see cref="T:System.DateTimeOffset" /> resultante é maior que <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Executando operações aritméticas com datas e horas</related>
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMinutes (double minutes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMinutes(float64 minutes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (minutes As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMinutes(double minutes);" />
      <MemberSignature Language="F#" Value="member this.AddMinutes : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMinutes minutes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minutes" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="minutes">Um número de minutos inteiros e fracionários. O número pode ser positivo ou negativo.</param>
        <summary>Retorna um novo objeto <see cref="T:System.DateTimeOffset" /> que adiciona um número especificado de minutos inteiros e fracionários ao valor dessa instância.</summary>
        <returns>Um objeto cujo valor é a soma da data e hora representada pelo objeto <see cref="T:System.DateTimeOffset" /> atual e o número de minutos representados por <paramref name="minutes" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A parte fracionária de `minutes` parâmetro é a parte fracionária de um minuto. Por exemplo, 4.5 é equivalente a 4 minutos e 30 segundos, 0 milissegundo. O parâmetro `minutes` é arredondado para o milissegundo mais próximo.  
  
> [!NOTE]
>  Este método retorna um novo objeto <xref:System.DateTimeOffset>. Ele não modifica o valor do objeto atual, adicionando `minutes` à sua data e hora.  
  
 Como uma <xref:System.DateTimeOffset> objeto não representa a data e hora em um fuso horário específico, o <xref:System.DateTimeOffset.AddMinutes%2A> método não considera as regras de ajuste de um determinado fuso horário quando ele executa a data e hora.  
  
 Converter os intervalos de tempo de menos de um minuto para uma fração pode envolver uma perda de precisão. (Por exemplo, um segundo é 0.01666 de um minuto.) Se esse for um problema, você pode usar o <xref:System.DateTimeOffset.Add%2A> método, que permite que você especificar mais de um tipo de intervalo de tempo em uma única chamada de método e elimina a necessidade de converter os intervalos de tempo em partes fracionárias de um minuto.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O valor <see cref="T:System.DateTimeOffset" /> resultante é menor que <see cref="F:System.DateTimeOffset.MinValue" />.  
  
- ou - 
O valor <see cref="T:System.DateTimeOffset" /> resultante é maior que <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Executando operações aritméticas com datas e horas</related>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMonths(int months);" />
      <MemberSignature Language="F#" Value="member this.AddMonths : int -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMonths months" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">Um número de meses completos. O número pode ser positivo ou negativo.</param>
        <summary>Retorna um novo objeto <see cref="T:System.DateTimeOffset" /> que adiciona um número especificado de meses ao valor dessa instância.</summary>
        <returns>Um objeto cujo valor é a soma da data e hora representada pelo objeto <see cref="T:System.DateTimeOffset" /> atual e o número de meses representado por <paramref name="months" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ao contrário da maioria dos outros métodos que adicionam uma unidade de intervalo de tempo único (por exemplo, minutos ou dias) para um valor de data e hora, <xref:System.DateTimeOffset.AddMonths%2A> não permite que você adicione partes fracionárias de um mês. Para adicionar uma hora que consiste em outras unidades de tempo, além de meses para uma <xref:System.DateTimeOffset> do objeto, use o <xref:System.DateTimeOffset.Add%2A> método.  
  
> [!NOTE]
>  Este método retorna um novo objeto <xref:System.DateTimeOffset>. Ele não modifica o valor do objeto atual, adicionando `months` à sua data e hora.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTimeOffset.AddMonths%2A> método para exibir a data de início de cada trimestre do ano de 2007.  
  
 [!code-csharp[System.DateTimeOffset.Methods#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#4)]
 [!code-vb[System.DateTimeOffset.Methods#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O valor <see cref="T:System.DateTimeOffset" /> resultante é menor que <see cref="F:System.DateTimeOffset.MinValue" />.  
  
- ou - 
O valor <see cref="T:System.DateTimeOffset" /> resultante é maior que <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddSeconds (double seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddSeconds(float64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (seconds As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddSeconds(double seconds);" />
      <MemberSignature Language="F#" Value="member this.AddSeconds : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="seconds">Um número de segundos inteiros e fracionários. O número pode ser positivo ou negativo.</param>
        <summary>Retorna um novo objeto <see cref="T:System.DateTimeOffset" /> que adiciona um número especificado de segundos inteiros e fracionários ao valor dessa instância.</summary>
        <returns>Um objeto cujo valor é a soma da data e hora representadas pelo objeto <see cref="T:System.DateTimeOffset" /> atual e o número de segundos representados por <paramref name="seconds" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A parte fracionária de `seconds` parâmetro é a parte fracionária de segundos. O valor de partes fracionárias de um segundo são mostradas na tabela a seguir.  
  
|Segundo valor|Equivalente|  
|------------------|----------------|  
|segundo.1|100 milissegundos|  
|segundo.01|10 milissegundos|  
|segundo.001|1 milissegundo|  
  
 O parâmetro `seconds` é arredondado para o milissegundo mais próximo.  
  
> [!NOTE]
>  Este método retorna um novo objeto <xref:System.DateTimeOffset>. Ele não modifica o valor do objeto atual, adicionando `minutes` à sua data e hora.  
  
 Como uma <xref:System.DateTimeOffset> objeto não representa a data e hora em um fuso horário específico, o <xref:System.DateTimeOffset.AddSeconds%2A> método não considera as regras de ajuste de um determinado fuso horário quando ele executa a data e hora.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O valor <see cref="T:System.DateTimeOffset" /> resultante é menor que <see cref="F:System.DateTimeOffset.MinValue" />.  
  
- ou - 
O valor <see cref="T:System.DateTimeOffset" /> resultante é maior que <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Executando operações aritméticas com datas e horas</related>
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddTicks (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddTicks(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (ticks As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddTicks(long ticks);" />
      <MemberSignature Language="F#" Value="member this.AddTicks : int64 -&gt; DateTimeOffset" Usage="dateTimeOffset.AddTicks ticks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">Um número de tiques de 100 nanossegundos. O número pode ser positivo ou negativo.</param>
        <summary>Retorna um novo objeto <see cref="T:System.DateTimeOffset" /> que adiciona um número especificado de tiques ao valor dessa instância.</summary>
        <returns>Um objeto cujo valor é a soma da data e hora representada pelo objeto <see cref="T:System.DateTimeOffset" /> atual e o número de tiques representado por <paramref name="ticks" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um tique representa 100 nanossegundos ou dez um milionésimo de segundo. Como um tique é um intervalo de tempo muito pequena e precisos, qualquer unidade de tempo maior pode ser expresso como um número de tiques sem perda de precisão.  
  
> [!NOTE]
>  Este método retorna um novo objeto <xref:System.DateTimeOffset>. Ele não modifica o valor do objeto atual, adicionando `minutes` à sua data e hora.  
  
 A tabela a seguir lista o número de tiques em um intervalo de tempo específico.  
  
|Intervalo de tempo|Número de tiques|  
|-------------------|---------------------|  
|Segundo|10,000,000|  
|Minuto|600,000,000|  
|Hora|36,000,000,000|  
|Dia|864,000,000,000|  
|Semana|6,048,000,000,000|  
|Mês|Depende do número de dias no mês.|  
|Ano bissexto não|315,360,000,000,000|  
|Ano bissexto|316,224,000,000,000|  
  
 Como uma <xref:System.DateTimeOffset> objeto não representa a data e hora em um fuso horário específico, o <xref:System.DateTimeOffset.AddTicks%2A> método não considera as regras de ajuste de um determinado fuso horário quando ele executa a data e hora.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O valor <see cref="T:System.DateTimeOffset" /> resultante é menor que <see cref="F:System.DateTimeOffset.MinValue" />.  
  
- ou - 
O valor <see cref="T:System.DateTimeOffset" /> resultante é maior que <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Executando operações aritméticas com datas e horas</related>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddYears (int years);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddYears(int32 years) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (years As Integer) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddYears(int years);" />
      <MemberSignature Language="F#" Value="member this.AddYears : int -&gt; DateTimeOffset" Usage="dateTimeOffset.AddYears years" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="years" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="years">Um número de anos. O número pode ser positivo ou negativo.</param>
        <summary>Retorna um novo objeto <see cref="T:System.DateTimeOffset" /> que adiciona um número especificado de anos ao valor dessa instância.</summary>
        <returns>Um objeto cujo valor é a soma da data e hora representada pelo objeto <see cref="T:System.DateTimeOffset" /> atual e o número de anos representado por <paramref name="years" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ao contrário da maioria dos outros métodos que adicionam uma unidade de intervalo de tempo único (por exemplo, minutos ou dias) para um valor de data e hora, <xref:System.DateTimeOffset.AddYears%2A> não permite que você adicione partes fracionárias de um ano. Para adicionar uma hora que consiste em outras unidades de tempo, além de anos para um <xref:System.DateTimeOffset> do objeto, use o <xref:System.DateTimeOffset.Add%2A> método.  
  
> [!NOTE]
>  Este método retorna um novo objeto <xref:System.DateTimeOffset>. Ele não modifica o valor do objeto atual, adicionando `months` à sua data e hora.  
  
   
  
## Examples  
 Nos Estados Unidos, carteiras de motorista não podem ser emitidas para pessoas em 16 anos de idade. O exemplo a seguir exibe a última data possível em que uma pessoa deve ser gerada para legalmente emitido de motorista uma carteira.  
  
 [!code-csharp[System.DateTimeOffset.Methods#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#6)]
 [!code-vb[System.DateTimeOffset.Methods#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O valor <see cref="T:System.DateTimeOffset" /> resultante é menor que <see cref="F:System.DateTimeOffset.MinValue" />.  
  
- ou - 
O valor <see cref="T:System.DateTimeOffset" /> resultante é maior que <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (first As DateTimeOffset, second As DateTimeOffset) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="F#" Value="static member Compare : DateTimeOffset * DateTimeOffset -&gt; int" Usage="System.DateTimeOffset.Compare (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">O primeiro objeto a ser comparado.</param>
        <param name="second">O segundo objeto a ser comparado.</param>
        <summary>Compara dois objetos <see cref="T:System.DateTimeOffset" /> e indica se a primeira é anterior, igual ou posterior ao segundo.</summary>
        <returns>Um inteiro com sinal que indica se o valor do parâmetro <paramref name="first" /> é anterior, posterior ou simultâneo ao valor do parâmetro <paramref name="second" />, como mostra a tabela a seguir.  
  
 <list type="table"><listheader><term> Valor retornado 
 </term><description> Significado 
 </description></listheader><item><term> Menor que zero 
 </term><description><paramref name="first" /> é anterior a <paramref name="second" />.  
  
 </description></item><item><term> Zero 
 </term><description><paramref name="first" /> é igual a <paramref name="second" />.  
  
 </description></item><item><term> Maior que zero 
 </term><description><paramref name="first" /> é posterior a <paramref name="second" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ao executar a comparação, o método converte ambos os `first` e o `second` parâmetros ao tempo Universal Coordenado (UTC) antes de executar a comparação. O método é equivalente ao seguinte:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#1)]
 [!code-vb[System.DateTimeOffset.Syntax#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#1)]  
  
 Em outras palavras, o <xref:System.DateTimeOffset.Compare%2A> método determina se dois <xref:System.DateTimeOffset> objetos representam um único ponto no tempo. Ele não compara diretamente datas e horas nem deslocamentos.  
  
   
  
## Examples  
 O exemplo a seguir ilustra chamadas para o <xref:System.DateTimeOffset.Compare%2A> método para comparar <xref:System.DateTimeOffset> objetos.  
  
 [!code-csharp[System.DateTimeOffset.Methods#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods2.cs#7)]
 [!code-vb[System.DateTimeOffset.Methods#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods2.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As DateTimeOffset) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : DateTimeOffset -&gt; int&#xA;override this.CompareTo : DateTimeOffset -&gt; int" Usage="dateTimeOffset.CompareTo other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">Um objeto a ser comparado com o objeto <see cref="T:System.DateTimeOffset" /> atual.</param>
        <summary>Compara o objeto <see cref="T:System.DateTimeOffset" /> atual a um objeto <see cref="T:System.DateTimeOffset" /> especificado e indica se o objeto atual é anterior, o mesmo ou posterior ao segundo objeto <see cref="T:System.DateTimeOffset" />.</summary>
        <returns>Um inteiro com sinal que indica o relacionamento entre o objeto <see cref="T:System.DateTimeOffset" /> atual e <paramref name="other" />, conforme mostrado na tabela a seguir.  
  
 <list type="table"><listheader><term> Valor de Retorno 
 </term><description> Descrição 
 </description></listheader><item><term> Menor que zero 
 </term><description> O objeto <see cref="T:System.DateTimeOffset" /> atual é anterior a <paramref name="other" />.  
  
 </description></item><item><term> Zero 
 </term><description> O objeto <see cref="T:System.DateTimeOffset" /> atual é o mesmo que <paramref name="other" />.  
  
 </description></item><item><term> Maior que zero.  
  
 </term><description> O objeto <see cref="T:System.DateTimeOffset" /> atual é posterior a <paramref name="other" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método compara <xref:System.DateTimeOffset> objetos, comparando seus <xref:System.DateTimeOffset.UtcDateTime%2A> valores; ou seja, ele determina se os dois objetos representam um único ponto no tempo e indica se o objeto atual é anterior, posterior ou igual a `other`parâmetro.  
  
   
  
## Examples  
 O exemplo a seguir ilustra chamadas para o <xref:System.DateTimeOffset.CompareTo%2A> método para comparar <xref:System.DateTimeOffset> objetos.  
  
 [!code-csharp[System.DateTimeOffset.Methods#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods3.cs#8)]
 [!code-vb[System.DateTimeOffset.Methods#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods3.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime" Usage="System.DateTimeOffset.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor <see cref="T:System.DateTime" /> que representa o componente de data do objeto <see cref="T:System.DateTimeOffset" /> atual.</summary>
        <value>Um valor <see cref="T:System.DateTime" /> que representa o componente de data do objeto <see cref="T:System.DateTimeOffset" /> atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade remove qualquer parte significativa do componente de tempo de um <xref:System.DateTimeOffset> do objeto e retorna apenas o componente de data significativa. Por exemplo, se o <xref:System.DateTimeOffset> objeto tem um valor de data e hora de "12/1/07 01 às 16:00 + 7:30", a propriedade retorna um <xref:System.DateTime> valor de "12/1/07 12:00:00 AM". O <xref:System.DateTime> valor, em seguida, pode ser exibido usando qualquer um dos especificadores de formato padrão ou personalizado que exibem apenas datas. (Consulte a seção de exemplo para obter uma ilustração.)  
  
 O valor da <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> propriedade retornada <xref:System.DateTime> objeto é sempre <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Não é afetado pelo valor da <xref:System.DateTimeOffset.Offset%2A> propriedade.  
  
 Para exibir uma data sem o seu componente de tempo, você também pode usar "D" ou "d" Formatar especificadores. Para obter uma ilustração, consulte a seção de exemplo.  
  
   
  
## Examples  
 O exemplo a seguir recupera o valor da <xref:System.DateTimeOffset.Date%2A> propriedade para uma data específica. Ele exibe, em seguida, esse valor no console usando alguns especificadores de formato padrão e personalizados de somente Data.  
  
 [!code-csharp[System.DateTimeOffset.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#1)]
 [!code-vb[System.DateTimeOffset.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora padrão</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora personalizado</related>
      </Docs>
    </Member>
    <Member MemberName="DateTime">
      <MemberSignature Language="C#" Value="public DateTime DateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime DateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DateTime : DateTime" Usage="System.DateTimeOffset.DateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor <see cref="T:System.DateTime" /> que representa a data e hora do objeto <see cref="T:System.DateTimeOffset" /> atual.</summary>
        <value>A data e hora do objeto <see cref="T:System.DateTimeOffset" /> atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset.DateTime%2A> propriedade não é afetada pelo valor da <xref:System.DateTimeOffset.Offset%2A> propriedade.  
  
 Essa propriedade retorna a data e o componente de tempo de um <xref:System.DateTimeOffset> objeto, que é útil para a realização <xref:System.DateTimeOffset> para <xref:System.DateTime> conversão. Por exemplo, se o <xref:System.DateTimeOffset> objeto tem um valor de data e hora de "12/1/07 01 às 16:00 + 7:30", a propriedade retorna uma data de "12/1/07 4:01 pm".  
  
 O valor da <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> propriedade retornada <xref:System.DateTime> objeto é <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.  
  
   
  
## Examples  
 O exemplo a seguir ilustra o uso do <xref:System.DateTimeOffset.DateTime%2A> propriedade para converter a hora retornada pelo <xref:System.DateTimeOffset.Now%2A> e <xref:System.DateTimeOffset.UtcNow%2A> propriedades a serem <xref:System.DateTime> valores.  
  
 [!code-csharp[System.DateTimeOffset.Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#2)]
 [!code-vb[System.DateTimeOffset.Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.LocalDateTime" />
        <related type="Article" href="~/docs/standard/datetime/converting-between-datetime-and-offset.md">Convertendo entre DateTime e DateTimeOffset</related>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Day : int" Usage="System.DateTimeOffset.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o dia do mês representado pelo objeto <see cref="T:System.DateTimeOffset" /> atual.</summary>
        <value>O componente de dia do objeto <see cref="T:System.DateTimeOffset" /> atual, expresso como um valor entre 1 e 31.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset.Day%2A> propriedade não é afetada pelo valor da <xref:System.DateTimeOffset.Offset%2A> propriedade.  
  
 Você também pode criar uma representação de cadeia de caracteres de um <xref:System.DateTimeOffset> componente de dia do objeto chamando o <xref:System.DateTimeOffset.ToString%2A> método com os especificadores de formato personalizado "d" ou "dd".  
  
   
  
## Examples  
 O exemplo a seguir exibe o componente de dia de um <xref:System.DateTimeOffset> objeto de três maneiras diferentes:  
  
-   Recuperando o valor da <xref:System.DateTimeOffset.Day%2A> propriedade.  
  
-   Chamando o <xref:System.DateTimeOffset.ToString%28System.String%29> método com o especificador de formato "d".  
  
-   Chamando o <xref:System.DateTimeOffset.ToString%28System.String%29> método com o especificador de formato "dd".  
  
 [!code-csharp[System.DateTimeOffset.Properties#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#10)]
 [!code-vb[System.DateTimeOffset.Properties#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfWeek : DayOfWeek" Usage="System.DateTimeOffset.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o dia da semana representado pelo objeto <see cref="T:System.DateTimeOffset" /> atual.</summary>
        <value>Um dos valores de enumeração que indica o dia da semana do objeto <see cref="T:System.DateTimeOffset" /> atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor das constantes na <xref:System.DayOfWeek> varia de enumeração de <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType> para <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>. Se converter em um inteiro, seu valor varia de zero (que indica <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>) a 6 (que indica <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>).  
  
 Você também pode exibir o nome de dia da semana de uma determinada data, usando o especificador de formato "D" ou o especificador de formato personalizado "dddd". Por exemplo:  
  
 [!code-csharp[System.DateTimeOffset.Properties#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#4)]
 [!code-vb[System.DateTimeOffset.Properties#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#4)]  
  
 Observe que a cadeia de caracteres retornadas por meio da chamada a `ToString` método da <xref:System.DayOfWeek> membro de enumeração que é retornado por essa propriedade não está localizado. Para extrair uma cadeia de caracteres que contém o nome do dia da semana da cultura atual ou de uma cultura específica, chame o <xref:System.DateTimeOffset.ToString%2A> método com o especificador de formato personalizado "dddd". Por exemplo, o código a seguir exibe o nome do dia da semana para uma data usando o `fr-fr` cultura.  
  
 [!code-csharp[System.DateTimeOffset.Properties#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#5)]
 [!code-vb[System.DateTimeOffset.Properties#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#5)]  
  
   
  
## Examples  
 O exemplo a seguir exibe o nome do dia da semana do primeiro dia de cada mês do ano 2008.  
  
 [!code-csharp[System.DateTimeOffset.Properties#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#3)]
 [!code-vb[System.DateTimeOffset.Properties#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfYear : int" Usage="System.DateTimeOffset.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o dia do ano representado pelo objeto <see cref="T:System.DateTimeOffset" /> atual.</summary>
        <value>O dia do ano atual <see cref="T:System.DateTimeOffset" /> objeto, expressado como um valor entre 1 e 366.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determina se dois objetos <see cref="T:System.DateTimeOffset" /> são iguais ou se um objeto <see cref="T:System.DateTimeOffset" /> é igual a um objeto especificado.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="override this.Equals : DateTimeOffset -&gt; bool" Usage="dateTimeOffset.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">Um objeto a ser comparado com o objeto <see cref="T:System.DateTimeOffset" /> atual.</param>
        <summary>Determina se o objeto <see cref="T:System.DateTimeOffset" /> atual representa o mesmo ponto no tempo que um objeto <see cref="T:System.DateTimeOffset" /> especificado.</summary>
        <returns><see langword="true" /> se ambos os objetos <see cref="T:System.DateTimeOffset" /> tiverem o mesmo valor <see cref="P:System.DateTimeOffset.UtcDateTime" />; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Antes de executar a comparação, esse método converte os valores dos dois <xref:System.DateTimeOffset> objetos para o tempo Universal Coordenado (UTC). O método é equivalente ao seguinte:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#2)]
 [!code-vb[System.DateTimeOffset.Syntax#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#2)]  
  
 Em outras palavras, o <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> método determina se dois <xref:System.DateTimeOffset> objetos representam um único ponto no tempo. Ele não compara diretamente datas e horas nem deslocamentos. Para determinar se dois objetos <xref:System.DateTimeOffset> representam a mesma hora e têm o mesmo valor de deslocamento, use o método <xref:System.DateTimeOffset.EqualsExact%2A>.  
  
 Um <xref:System.DateTimeOffset> objeto que não esteja `null` é considerado posterior (ou superior) do que outra `null`.  
  
 Essa sobrecarga da <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> método implementa o <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> método. Ele oferece desempenho ligeiramente melhor do que o <xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=nameWithType> sobrecarregar porque o `other` parâmetro não precisa ser convertido de um objeto.  
  
   
  
## Examples  
 O exemplo a seguir ilustra chamadas para o <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> método de teste <xref:System.DateTimeOffset> objetos para igualdade com o atual <xref:System.DateTimeOffset> objeto.  
  
 [!code-csharp[System.DateTimeOffset.Methods#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#9)]
 [!code-vb[System.DateTimeOffset.Methods#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dateTimeOffset.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">O objeto a ser comparado com o objeto <see cref="T:System.DateTimeOffset" /> atual.</param>
        <summary>Determina se um objeto <see cref="T:System.DateTimeOffset" /> representa o mesmo ponto no tempo que um objeto especificado.</summary>
        <returns><see langword="true" /> se o parâmetro <paramref name="obj" /> for um objeto <see cref="T:System.DateTimeOffset" /> e sua representar o mesmo ponto no tempo que o objeto <see cref="T:System.DateTimeOffset" /> atual; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Antes de executar a comparação, esse método converte os valores de ambas as atual <xref:System.DateTimeOffset> objeto e o `obj` parâmetro para o tempo Universal Coordenado (UTC). O método é equivalente ao seguinte:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#3)]
 [!code-vb[System.DateTimeOffset.Syntax#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#3)]  
  
 Em outras palavras, o <xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=nameWithType> método determina se o atual <xref:System.DateTimeOffset> objeto e um objeto especificado representam um único ponto no tempo. Ele não compara diretamente datas e horas nem deslocamentos. Para determinar se dois objetos <xref:System.DateTimeOffset> representam a mesma hora e têm o mesmo valor de deslocamento, use o método <xref:System.DateTimeOffset.EqualsExact%2A>.  
  
 Se `obj` está `null`, ou se o tipo de tempo de execução de `obj` não é <xref:System.DateTimeOffset>, o método retorna `false`.  
  
   
  
## Examples  
 O exemplo a seguir indica se o atual <xref:System.DateTimeOffset> objeto é igual a várias outras <xref:System.DateTimeOffset> objetos, bem como para uma referência nula e uma <xref:System.DateTime> objeto.  
  
 [!code-csharp[System.DateTimeOffset.Methods#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#10)]
 [!code-vb[System.DateTimeOffset.Methods#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (first As DateTimeOffset, second As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="F#" Value="static member Equals : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.Equals (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">O primeiro objeto a ser comparado.</param>
        <param name="second">O segundo objeto a ser comparado.</param>
        <summary>Determina se dois objetos <see cref="T:System.DateTimeOffset" /> especificados representam o mesmo ponto no tempo.</summary>
        <returns><see langword="true" /> se dois objetos <see cref="T:System.DateTimeOffset" /> tiverem o mesmo valor <see cref="P:System.DateTimeOffset.UtcDateTime" />; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Antes de executar a comparação, este método converte ambos <xref:System.DateTimeOffset> objetos para o tempo Universal Coordenado (UTC). O método é equivalente ao seguinte:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 Em outras palavras, o <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29> método determina se os dois <xref:System.DateTimeOffset> objetos representam um único ponto no tempo. Ele não compara diretamente datas e horas nem deslocamentos. Para determinar se dois objetos <xref:System.DateTimeOffset> representam a mesma hora e têm o mesmo valor de deslocamento, use o método <xref:System.DateTimeOffset.EqualsExact%2A>.  
  
   
  
## Examples  
 O exemplo a seguir ilustra chamadas para o <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29> método para testar vários pares de <xref:System.DateTimeOffset> objetos quanto à igualdade.  
  
 [!code-csharp[System.DateTimeOffset.Methods#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#11)]
 [!code-vb[System.DateTimeOffset.Methods#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="EqualsExact">
      <MemberSignature Language="C#" Value="public bool EqualsExact (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EqualsExact(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function EqualsExact (other As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EqualsExact(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="member this.EqualsExact : DateTimeOffset -&gt; bool" Usage="dateTimeOffset.EqualsExact other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">O objeto a ser comparado com o objeto <see cref="T:System.DateTimeOffset" /> atual.</param>
        <summary>Determina se o objeto <see cref="T:System.DateTimeOffset" /> atual representa a mesma hora e tem o mesmo deslocamento que um objeto <see cref="T:System.DateTimeOffset" /> especificado.</summary>
        <returns><see langword="true" /> se o objeto <see cref="T:System.DateTimeOffset" /> atual e <paramref name="other" /> têm o mesmo valor de data e hora e o mesmo valor <see cref="P:System.DateTimeOffset.Offset" />; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Como vários fusos compartilham um único deslocamento, um valor de retorno `true` não garante que o atual e o `other` objeto representam vezes no mesmo fuso horário.  
  
 Ao contrário o <xref:System.DateTimeOffset.EqualsExact%2A> as sobrecargas de um método, o <xref:System.DateTimeOffset.Equals%2A> método determinar se dois <xref:System.DateTimeOffset> valores representam um único ponto no tempo. Elas não indicam que os dois valores tenham a mesma data e hora, bem como o mesmo deslocamento.  
  
   
  
## Examples  
 O exemplo a seguir ilustra o uso do <xref:System.DateTimeOffset.EqualsExact%2A> método para comparar semelhante <xref:System.DateTimeOffset> objetos.  
  
 [!code-csharp[System.DateTimeOffset.Methods#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#12)]
 [!code-vb[System.DateTimeOffset.Methods#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromFileTime(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTime : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromFileTime fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">Uma hora de arquivo do Windows, expressa em tiques.</param>
        <summary>Converte a hora de arquivo do Windows especificada em uma hora local equivalente.</summary>
        <returns>Um objeto que representa a data e hora de <paramref name="fileTime" /> com a diferença definida como a diferença de hora local.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma hora de arquivo do Windows é um valor de 64 bits que representa o número de intervalos de 100 nanossegundos desde a meia-noite de 12h00, 1º de janeiro de 1601 A.D. (C.E.) Tempo Universal Coordenado (UTC). O Windows usa uma hora de arquivo a ser registrada quando um aplicativo cria, acessa ou grava em um arquivo.  
  
 Uma hora de arquivo do Windows é diretamente acessível por meio da API do Windows por meio da chamada a `GetFileTime` função, que retorna um `FILETIME` estrutura. O parâmetro de função única é o identificador do arquivo cujas informações de hora do arquivo deve ser recuperado. O identificador de arquivo é recuperado chamando o `CreateFile` função. O `FILETIME` da estrutura `dwHighDateTime` membro contém os quatro bytes de ordem alta da hora de arquivo e seu `dwLowDateTime` membro contém os quatro bytes de ordem inferior. O exemplo a seguir ilustra como recuperar valores de hora de arquivo do Windows e convertê-las para <xref:System.DateTimeOffset> valores.  
  
 Valores de hora de arquivo do Windows também podem ser criados na <xref:System.DateTime> valores chamando o <xref:System.DateTime.ToFileTime%2A?displayProperty=nameWithType> e <xref:System.DateTime.ToFileTimeUtc%2A?displayProperty=nameWithType> métodos e de <xref:System.DateTimeOffset> valores chamando o <xref:System.DateTimeOffset.ToFileTime%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 O exemplo a seguir usa a API do Windows para recuperar os tempos de arquivo do Windows para o executável do WordPad.  
  
 [!code-csharp[System.DateTimeOffset.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/cs/FileTime.cs#1)]
 [!code-vb[System.DateTimeOffset.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/vb/FileTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="filetime" /> é menor que zero.  
  
- ou - 
 <paramref name="filetime" /> é maior que <see langword="DateTimeOffset.MaxValue.Ticks" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeMilliseconds (long milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeMilliseconds(int64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUnixTimeMilliseconds (milliseconds As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromUnixTimeMilliseconds(long milliseconds);" />
      <MemberSignature Language="F#" Value="static member FromUnixTimeMilliseconds : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromUnixTimeMilliseconds milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="milliseconds">Um horário do Unix expresso como o número de milissegundos decorridos desde 1970-01-01T00:00:00Z (1º de janeiro de 1970, às 12h UTC). Para horários do Unix anteriores a essa data, seu valor é negativo.</param>
        <summary>Converte um horário do Unix expresso como o número de milissegundos decorridos desde 1970-01-01T00:00:00Z para um valor de <see cref="T:System.DateTimeOffset" />.</summary>
        <returns>Um valor de data e hora que representa o mesmo momento que o horário do Unix.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset.Offset%2A> valor da propriedade de retornado <xref:System.DateTimeOffset> instância é <xref:System.TimeSpan.Zero?displayProperty=nameWithType>, que representa o tempo Universal Coordenado. Você pode convertê-lo para o horário em um fuso horário específico chamando o <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="milliseconds" /> é menor que -62.135.596.800.000.  
  
- ou - 
 <paramref name="milliseconds" /> é maior que 253.402.300.799.999.</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeSeconds (long seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeSeconds(int64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUnixTimeSeconds (seconds As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromUnixTimeSeconds(long seconds);" />
      <MemberSignature Language="F#" Value="static member FromUnixTimeSeconds : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromUnixTimeSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="seconds">Um horário do Unix expresso como o número de segundos decorridos desde 1970-01-01T00:00:00Z (1 de janeiro de 1970, 00h UTC). Para horários do Unix anteriores a essa data, seu valor é negativo.</param>
        <summary>Converte um horário do Unix expresso como o número de segundos decorridos desde 1970-01-01T00:00:00Z em um valor de <see cref="T:System.DateTimeOffset" />.</summary>
        <returns>Um valor de data e hora que representa o mesmo momento que o horário do Unix.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset.Offset%2A> valor da propriedade de retornado <xref:System.DateTimeOffset> instância é <xref:System.TimeSpan.Zero?displayProperty=nameWithType>, que representa o tempo Universal Coordenado. Você pode convertê-lo para o horário em um fuso horário específico chamando o <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="seconds" /> é menor que -62,135,596,800.  
  
- ou - 
 <paramref name="seconds" /> é maior que 253,402,300,799.</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dateTimeOffset.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna o código hash para o objeto <see cref="T:System.DateTimeOffset" /> atual.</summary>
        <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hour : int" Usage="System.DateTimeOffset.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o componente de hora do tempo representado pelo objeto <see cref="T:System.DateTimeOffset" /> atual.</summary>
        <value>O componente de hora do objeto <see cref="T:System.DateTimeOffset" /> atual. Esta propriedade usa um relógio de 24 horas; o valor varia de 0 a 23.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset.Hour%2A> propriedade não é afetada pelo valor da <xref:System.DateTimeOffset.Offset%2A> propriedade.  
  
 Você também pode criar uma representação de cadeia de caracteres de um <xref:System.DateTimeOffset> componente de hora do objeto chamando o <xref:System.DateTimeOffset.ToString%2A> método com "H", ou especificadores de formato personalizado "HH".  
  
   
  
## Examples  
 O exemplo a seguir exibe o componente de hora uma <xref:System.DateTimeOffset> objeto de três maneiras diferentes:  
  
-   Recuperando o valor da <xref:System.DateTimeOffset.Hour%2A> propriedade.  
  
-   Chamando o <xref:System.DateTimeOffset.ToString%28System.String%29> método com o especificador de formato "H".  
  
-   Chamando o <xref:System.DateTimeOffset.ToString%28System.String%29> especificador de formato de método com "HH".  
  
 [!code-csharp[System.DateTimeOffset.Properties#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#6)]
 [!code-vb[System.DateTimeOffset.Properties#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalDateTime">
      <MemberSignature Language="C#" Value="public DateTime LocalDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime LocalDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.LocalDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime LocalDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalDateTime : DateTime" Usage="System.DateTimeOffset.LocalDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor <see cref="T:System.DateTime" /> que representa a data e hora locais do objeto <see cref="T:System.DateTimeOffset" /> atual.</summary>
        <value>A data e hora locais do objeto <see cref="T:System.DateTimeOffset" /> atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se necessário, o <xref:System.DateTimeOffset.LocalDateTime%2A> propriedade converte atual <xref:System.DateTimeOffset> data e hora de data e a hora do sistema local do objeto. A conversão é uma operação de duas etapas:  
  
1.  A propriedade converte atual <xref:System.DateTimeOffset> tempo do objeto ao tempo Universal Coordenado (UTC).  
  
2.  A propriedade, em seguida, converte o UTC em hora local.  
  
 Há não há horários inválidos e horários ambíguos são mapeados para o horário padrão do fuso horário local. (No entanto, a conversão pode criar uma anomalia: se um <xref:System.DateTimeOffset> valor é derivado do computador local reflete uma data e hora ambíguas, que pode ser convertido em UTC de valor e, em seguida, de volta para uma hora local que difere da hora original.)  A propriedade se aplica as regras de ajuste do fuso horário local quando ele executa essa conversão.  
  
 Essa propriedade retorna a data e o componente de tempo de um <xref:System.DateTimeOffset> objeto, que é útil para <xref:System.DateTimeOffset> para <xref:System.DateTime> conversão. Além de realizar qualquer conversão necessária do tempo, essa propriedade é diferente do <xref:System.DateTimeOffset.DateTime%2A> propriedade definindo o valor da <xref:System.DateTime.Kind%2A> propriedade de retornado <xref:System.DateTime> do objeto para <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
   
  
## Examples  
 O exemplo a seguir ilustra várias conversões de <xref:System.DateTimeOffset> valores para os horários locais nos EUA Fuso horário padrão do Pacífico. Observe que os últimos três vezes são todos ambíguos. a propriedade todas elas é mapeado para uma única data e hora no fuso horário padrão do Pacífico.  
  
 [!code-csharp[System.DateTimeOffset.Properties#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#7)]
 [!code-vb[System.DateTimeOffset.Properties#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : DateTimeOffset" Usage="System.DateTimeOffset.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa o maior valor possível de <see cref="T:System.DateTimeOffset" />. Este campo é somente leitura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor dessa constante é 12/31/9999 11:59:59 PM + 00:00.  
  
 O <xref:System.DateTimeOffset.MaxValue> propriedade é usada para determinar se o valor de uma nova <xref:System.DateTimeOffset> objeto ou o <xref:System.DateTimeOffset> valor retornado por uma operação aritmética é o mesmo ou anteriores que esse valor de intervalo máximo. Se não for, o método gerará uma <xref:System.ArgumentOutOfRangeException>. Qualquer <xref:System.DateTimeOffset> valor é convertido para o tempo Universal Coordenado (UTC) antes do método compara-o com <xref:System.DateTimeOffset.MaxValue>.  Isso significa que um <xref:System.DateTimeOffset> valor cuja data e hora são próximos o intervalo máximo, mas cujo deslocamento for negativo, podem gerar uma exceção. Por exemplo, o valor 12/31/9999 11:00 PM-02: 00 está fora do intervalo porque ele é uma hora posterior a <xref:System.DateTimeOffset.MaxValue> quando ela é convertida para UTC.  
  
 Alguns calendários, como o <xref:System.Globalization.UmAlQuraCalendar>, dão suporte a um intervalo de datas superior anterior <xref:System.DateTime.MaxValue>. Nesses casos, tentando acessar <xref:System.DateTime.MaxValue> em atribuições de variáveis ou formatação e análise de operações pode lançar um <xref:System.ArgumentOutOfRangeException>. Em vez de recuperar o valor de <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, você pode recuperar o valor do valor de data válido mais recente da cultura especificada do <xref:System.Globalization.Calendar.MaxSupportedDateTime%2A?displayProperty=nameWithType> propriedade.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="F:System.DateTime.MaxValue" /> está fora do intervalo do calendário padrão da cultura atual ou especificada.</exception>
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Millisecond : int" Usage="System.DateTimeOffset.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o componente de milissegundo do tempo representado pelo objeto <see cref="T:System.DateTimeOffset" /> atual.</summary>
        <value>O componente de milissegundo do objeto <see cref="T:System.DateTimeOffset" /> atual, expressado como um inteiro entre 0 e 999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você também pode criar uma representação de cadeia de caracteres de um <xref:System.DateTimeOffset> componente de milissegundo do objeto chamando o <xref:System.DateTimeOffset.ToString%2A> método com o especificador de formato personalizado "fff".  
  
 Se você confiar em propriedades, como <xref:System.DateTimeOffset.Now%2A> ou <xref:System.DateTimeOffset.UtcNow%2A> para controlar com precisão o número de milissegundos decorridos, a precisão do componente de milissegundo do tempo depende da resolução do relógio do sistema. No Windows NT 3.5 e versões posterior e sistemas operacionais Windows Vista, a resolução do relógio é de aproximadamente 10 a 15 milissegundos.  
  
   
  
## Examples  
 O exemplo a seguir exibe o número de milissegundos de um <xref:System.DateTimeOffset> objeto por meio de um especificador de formato personalizado e acessando diretamente o <xref:System.DateTimeOffset.Millisecond%2A> propriedade.  
  
 [!code-csharp[System.DateTimeOffset.Properties#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#12)]
 [!code-vb[System.DateTimeOffset.Properties#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minute : int" Usage="System.DateTimeOffset.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o componente de minuto do tempo representado pelo objeto <see cref="T:System.DateTimeOffset" /> atual.</summary>
        <value>O componente de minuto do atual <see cref="T:System.DateTimeOffset" /> objeto, expressado como um número inteiro entre 0 e 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset.Minute%2A> propriedade não é afetada pelo valor da <xref:System.DateTimeOffset.Offset%2A> propriedade.  
  
 Você também pode criar uma representação de cadeia de caracteres de um <xref:System.DateTimeOffset> componente de minuto do objeto chamando o <xref:System.DateTimeOffset.ToString%2A> método com o "m", ou especificadores de formato personalizado "mm".  
  
   
  
## Examples  
 O exemplo a seguir exibe o componente de minuto um <xref:System.DateTimeOffset> objeto de três maneiras diferentes:  
  
-   Recuperando o valor da <xref:System.DateTimeOffset.Minute%2A> propriedade.  
  
-   Chamando o <xref:System.DateTimeOffset.ToString%28System.String%29> método com o especificador de formato "m".  
  
-   Chamando o <xref:System.DateTimeOffset.ToString%28System.String%29> método com o especificador de formato "mm".  
  
 [!code-csharp[System.DateTimeOffset.Properties#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#8)]
 [!code-vb[System.DateTimeOffset.Properties#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : DateTimeOffset" Usage="System.DateTimeOffset.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa o primeiro valor possível de <see cref="T:System.DateTimeOffset" />. Este campo é somente leitura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor dessa constante é 1/1/0001 12:00:00 AM + 00:00.  
  
 O <xref:System.DateTimeOffset.MinValue> propriedade é usada para determinar se o valor de uma nova <xref:System.DateTimeOffset> objeto ou o <xref:System.DateTimeOffset> valor retornado por uma operação aritmética é o mesmo ou posterior que esse valor de intervalo mínimo. Se não for, o método gerará uma <xref:System.ArgumentOutOfRangeException>. Qualquer <xref:System.DateTimeOffset> valor é convertido para o tempo Universal Coordenado (UTC) antes do método executa a comparação com <xref:System.DateTimeOffset.MinValue>.  Isso significa que um <xref:System.DateTimeOffset> valor cuja data e hora estão próximos do intervalo mínimo, mas cujo deslocamento é positivo, podem gerar uma exceção. Por exemplo, o valor de 1/1/0001 1:00:00 AM + 02:00 está fora do intervalo porque ele é uma hora anterior ao <xref:System.DateTimeOffset.MinValue> quando ela é convertida para UTC.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Month : int" Usage="System.DateTimeOffset.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o componente de mês da data representada pelo objeto <see cref="T:System.DateTimeOffset" /> atual.</summary>
        <value>O componente de mês do objeto <see cref="T:System.DateTimeOffset" /> atual, expresso como um inteiro entre 1 e 12.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset.Month%2A> propriedade não é afetada pelo valor da <xref:System.DateTimeOffset.Offset%2A> propriedade.  
  
 Você também pode criar uma representação de cadeia de caracteres de um <xref:System.DateTimeOffset> componente de mês do objeto chamando o <xref:System.DateTimeOffset.ToString%2A> método com os especificadores de formato personalizado "M" ou "MM".  
  
   
  
## Examples  
 O exemplo a seguir exibe o componente de mês de um <xref:System.DateTimeOffset> valor de três maneiras diferentes:  
  
-   Recuperando o valor da <xref:System.DateTimeOffset.Month%2A> propriedade.  
  
-   Chamando o <xref:System.DateTimeOffset.ToString%28System.String%29> método com o especificador de formato "M".  
  
-   Chamando o <xref:System.DateTimeOffset.ToString%28System.String%29> método com o especificador de formato "MM".  
  
 [!code-csharp[System.DateTimeOffset.Properties#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#9)]
 [!code-vb[System.DateTimeOffset.Properties#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTimeOffset Now { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTimeOffset" Usage="System.DateTimeOffset.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um objeto <see cref="T:System.DateTimeOffset" /> definido como a data e hora atual no computador atual, com o deslocamento definido como o deslocamento de hora local do UTC (Tempo Universal Coordenado).</summary>
        <value>Um objeto <see cref="T:System.DateTimeOffset" /> cuja data e hora é o fuso horário atual e cujo deslocamento é o deslocamento do fuso horário local do UTC (Tempo Universal Coordenado).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A precisão do componente de milissegundo do horário local atual depende da resolução do relógio do sistema. No Windows NT 3.5 e versões posterior e sistemas operacionais Windows Vista, a resolução do relógio é de aproximadamente 10 a 15 milissegundos.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTimeOffset.Now%2A> propriedade para recuperar a data e hora atuais e o exibe usando cada um a [cadeias de caracteres de formato de data e hora padrão](~/docs/standard/base-types/standard-date-and-time-format-strings.md) compatíveis com o <xref:System.DateTimeOffset> tipo.  
  
 [!code-csharp[System.DateTimeOffset.Now#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.now/cs/now1.cs#1)]
 [!code-vb[System.DateTimeOffset.Now#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.now/vb/now1.vb#1)]  
  
 O exemplo a seguir usa o <xref:System.DateTimeOffset.Now%2A> e <xref:System.DateTimeOffset.Millisecond%2A> propriedades para determinar a resolução do relógio do sistema. Ele exibe a hora apenas quando o valor do componente de milissegundo foi alterado.  
  
 [!code-csharp[System.DateTimeOffset.Properties#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#11)]
 [!code-vb[System.DateTimeOffset.Properties#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public TimeSpan Offset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Offset" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Offset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Offset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Offset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Offset : TimeSpan" Usage="System.DateTimeOffset.Offset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o deslocamento de UTC (Tempo Universal Coordenado).</summary>
        <value>A diferença entre o valor temporal do objeto <see cref="T:System.DateTimeOffset" /> atual e o UTC (Tempo Universal Coordenado).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor da <xref:System.TimeSpan.Hours%2A> propriedade retornada <xref:System.TimeSpan> objeto pode variar de-14 horas para 14 horas.  
  
 O valor da <xref:System.DateTimeOffset.Offset%2A> propriedade é precisa para o minuto.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTimeOffset.Offset%2A> propriedade para exibir a diferença de hora local do tempo Universal Coordenado (UTC).  
  
 [!code-csharp[System.DateTimeOffset.Properties#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#13)]
 [!code-vb[System.DateTimeOffset.Properties#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator + (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator +(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset + timeSpan" FrameworkAlternate="netcore-2.2;netframework-2.0" />
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator + (DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeTz, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator +(DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeTz + timeSpan" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
        <Parameter Name="dateTimeTz" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" Index="1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">O objeto ao qual adicionar o intervalo de tempo.</param>
        <param name="dateTimeTz">O objeto ao qual adicionar o intervalo de tempo.</param>
        <param name="timeSpan">O intervalo de tempo a ser adicionado.</param>
        <summary>Adiciona um intervalo de tempo especificado para um objeto <see cref="T:System.DateTimeOffset" /> que tem uma data e hora especificadas e produz um <see cref="T:System.DateTimeOffset" /> objeto que tem uma nova data e hora.</summary>
        <returns>Um objeto cujo valor é a soma dos valores de <paramref name="dateTimeTz" /> e <paramref name="timeSpan" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset.op_Addition%2A> método define a operação de adição para <xref:System.DateTimeOffset> valores. Ele permite que o código seja o seguinte:  
  
 [!code-csharp[System.DateTimeOffset.Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#1)]
 [!code-vb[System.DateTimeOffset.Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#1)]  
  
 Idiomas que não dão suporte a operadores personalizados e sobrecarga de operador podem chamar o <xref:System.DateTimeOffset.Add%2A> método em vez disso.  
  
 O método equivalente para esse operador é <xref:System.DateTimeOffset.Add%28System.TimeSpan%29?displayProperty=nameWithType>.]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O valor <see cref="T:System.DateTimeOffset" /> resultante é menor que <see cref="F:System.DateTimeOffset.MinValue" />.  
  
- ou - 
O valor <see cref="T:System.DateTimeOffset" /> resultante é maior que <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <altmember cref="M:System.DateTimeOffset.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Executando operações aritméticas com datas e horas</related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">O primeiro objeto a ser comparado.</param>
        <param name="right">O segundo objeto a ser comparado.</param>
        <summary>Determina se dois objetos <see cref="T:System.DateTimeOffset" /> especificados representam o mesmo ponto no tempo.</summary>
        <returns><see langword="true" /> se ambos os objetos <see cref="T:System.DateTimeOffset" /> tiverem o mesmo valor <see cref="P:System.DateTimeOffset.UtcDateTime" />; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset.op_Equality%2A> método define a operação do operador de igualdade para <xref:System.DateTimeOffset> objetos. Ele permite que o código seja o seguinte:  
  
 [!code-csharp[System.DateTimeOffset.Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#2)]
 [!code-vb[System.DateTimeOffset.Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#2)]  
  
 Antes de avaliar os `left` e `right` operandos de igualdade, o operador converte os dois valores para o tempo Universal Coordenado (UTC). A operação é equivalente ao seguinte:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 Em outras palavras, o <xref:System.DateTimeOffset.op_Equality%2A> método determina se os dois <xref:System.DateTimeOffset> objetos representam um único ponto no tempo. Ele não compara diretamente datas e horas nem deslocamentos. Para determinar se dois objetos <xref:System.DateTimeOffset> representam a mesma hora e têm o mesmo valor de deslocamento, use o método <xref:System.DateTimeOffset.EqualsExact%2A>.  
  
 É o método equivalente para esse operador <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">O primeiro objeto a ser comparado.</param>
        <param name="right">O segundo objeto a ser comparado.</param>
        <summary>Determina se um objeto <see cref="T:System.DateTimeOffset" /> especificado é maior que (ou posterior a) um segundo objeto <see cref="T:System.DateTimeOffset" /> especificado.</summary>
        <returns><see langword="true" /> se o valor <see cref="P:System.DateTimeOffset.UtcDateTime" /> de <paramref name="left" /> for posterior ao valor <see cref="P:System.DateTimeOffset.UtcDateTime" /> de <paramref name="right" />, caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset.op_GreaterThan%2A> método define a operação de maior que o operador para <xref:System.DateTimeOffset> objetos. Ele permite que o código seja o seguinte:  
  
 [!code-csharp[System.DateTimeOffset.Operators#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#3)]
 [!code-vb[System.DateTimeOffset.Operators#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#3)]  
  
 Linguagens que não dão suporte a operadores personalizados podem chamar o método <xref:System.DateTimeOffset.Compare%2A> em vez disso. Eles também podem chamar o <xref:System.DateTimeOffset.op_GreaterThan%2A> método diretamente, como o exemplo a seguir mostra.  
  
 [!code-vb[System.DateTimeOffset.Operators#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#4)]  
  
 Antes de avaliar os `left` e `right` operandos, o operador converte os dois valores para o tempo Universal Coordenado (UTC). A operação é equivalente ao seguinte:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#5)]
 [!code-vb[System.DateTimeOffset.Syntax#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#5)]  
  
 É o método equivalente para esse operador <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">O primeiro objeto a ser comparado.</param>
        <param name="right">O segundo objeto a ser comparado.</param>
        <summary>Determina se um objeto <see cref="T:System.DateTimeOffset" /> especificado é maior que ou igual a um segundo objeto <see cref="T:System.DateTimeOffset" /> especificado.</summary>
        <returns><see langword="true" /> se o valor <see cref="P:System.DateTimeOffset.UtcDateTime" /> de <paramref name="left" /> for igual ou posterior ao valor <see cref="P:System.DateTimeOffset.UtcDateTime" /> de <paramref name="right" />; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset.op_GreaterThan%2A> método define a operação de maior que ou igual ao operador para <xref:System.DateTimeOffset> objetos. Ele permite que o código seja o seguinte:  
  
 [!code-csharp[System.DateTimeOffset.Operators#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#5)]
 [!code-vb[System.DateTimeOffset.Operators#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#5)]  
  
 Linguagens que não dão suporte a operadores personalizados podem chamar o método <xref:System.DateTimeOffset.Compare%2A> em vez disso. Algumas linguagens também podem chamar o <xref:System.DateTimeOffset.op_GreaterThanOrEqual%2A> método diretamente, como o exemplo a seguir mostra.  
  
 [!code-vb[System.DateTimeOffset.Operators#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#6)]  
  
 Antes de avaliar os `left` e `right` operandos, o operador converte os dois valores para o tempo Universal Coordenado (UTC). A operação é equivalente ao seguinte:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#6)]
 [!code-vb[System.DateTimeOffset.Syntax#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#6)]  
  
 É o método equivalente para esse operador <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Implicit(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator DateTimeOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : DateTime -&gt; DateTimeOffset" Usage="System.DateTimeOffset.op_Implicit dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">O objeto a ser convertido.</param>
        <summary>Define uma conversão implícita de um objeto <see cref="T:System.DateTime" /> como um objeto <see cref="T:System.DateTimeOffset" />.</summary>
        <returns>O objeto convertido.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset.op_Implicit%2A> método permite que o compilador converter automaticamente um <xref:System.DateTime> do objeto para um <xref:System.DateTimeOffset> objeto sem um operador de conversão explícita (em c#) ou uma chamada para uma função de conversão (no Visual Basic). Ele define uma conversão de ampliação que não envolvem a perda de dados e não gerará um <xref:System.OverflowException>. O <xref:System.DateTimeOffset.op_Implicit%2A> método torna o código como o seguinte possível:  
  
 [!code-csharp[System.DateTimeOffset.Operators#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#7)]
 [!code-vb[System.DateTimeOffset.Operators#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#7)]  
  
 Esse método é equivalente a <xref:System.DateTimeOffset.%23ctor%2A> construtor. O deslocamento do resultante <xref:System.DateTimeOffset> objeto depende do valor da <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> propriedade do `dateTime` parâmetro:  
  
-   Se o valor da <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> é de propriedade <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, a data e hora da <xref:System.DateTimeOffset> objeto é definido igual ao `dateTime`e seu <xref:System.DateTimeOffset.Offset%2A> propriedade é definida igual a 0.  
  
-   Se o valor da <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> é de propriedade <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ou <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, a data e hora dos <xref:System.DateTimeOffset> objeto é definido igual ao `dateTime`e seu <xref:System.DateTimeOffset.Offset%2A> propriedade será definida como igual ao deslocamento do fuso horário da atual do sistema local.  
  
 É o método equivalente para esse operador <xref:System.DateTimeOffset.%23ctor%28System.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">A data e hora em UTC (Tempo Universal Coordenado) que resultam da aplicação do deslocamento são anteriores a <see cref="F:System.DateTimeOffset.MinValue" />.  
  
- ou - 
A data e hora UTC que resulta da aplicação do deslocamento é posterior a <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">O primeiro objeto a ser comparado.</param>
        <param name="right">O segundo objeto a ser comparado.</param>
        <summary>Determina se dois objetos <see cref="T:System.DateTimeOffset" /> especificados referem-se a diferentes pontos no tempo.</summary>
        <returns><see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> não têm o mesmo valor <see cref="P:System.DateTimeOffset.UtcDateTime" />; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset.op_Inequality%2A> método define a operação do operador de desigualdade para <xref:System.DateTimeOffset> objetos. Ele sempre retorna o resultado oposto do <xref:System.DateTimeOffset.op_Equality%2A>. O <xref:System.DateTimeOffset.op_Inequality%2A> método permite que o código como o seguinte:  
  
 [!code-csharp[System.DateTimeOffset.Operators#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#8)]
 [!code-vb[System.DateTimeOffset.Operators#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#8)]  
  
 Antes de avaliar os `left` e `right` operandos de igualdade, o operador converte os dois valores para o tempo Universal Coordenado (UTC). A operação é equivalente ao seguinte:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 Em outras palavras, o <xref:System.DateTimeOffset.op_Inequality%2A> método determina se os dois <xref:System.DateTimeOffset> objetos representam diferentes pontos no tempo. Ele não compara diretamente datas e horas nem deslocamentos.  
  
 Linguagens que não dão suporte a operadores personalizados podem chamar o método <xref:System.DateTimeOffset.Compare%2A> em vez disso. Além disso, alguns idiomas também podem chamar o <xref:System.DateTimeOffset.op_Inequality%2A> método diretamente, como o exemplo a seguir mostra.  
  
 [!code-vb[System.DateTimeOffset.Operators#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#9)]  
  
 É o método equivalente para esse operador <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">O primeiro objeto a ser comparado.</param>
        <param name="right">O segundo objeto a ser comparado.</param>
        <summary>Determina se um objeto <see cref="T:System.DateTimeOffset" /> especificado é menor que um segundo objeto <see cref="T:System.DateTimeOffset" /> especificado.</summary>
        <returns><see langword="true" /> se o valor <see cref="P:System.DateTimeOffset.UtcDateTime" /> de <paramref name="left" /> for anterior ao valor <see cref="P:System.DateTimeOffset.UtcDateTime" /> de <paramref name="right" />, caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset.op_LessThan%2A> método define a operação pelo menor que o operador para <xref:System.DateTimeOffset> objetos. Ele permite que o código seja o seguinte:  
  
 [!code-csharp[System.DateTimeOffset.Operators#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#10)]
 [!code-vb[System.DateTimeOffset.Operators#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#10)]  
  
 Antes de avaliar os `left` e `right` operandos, o operador converte ambos os operandos para o tempo Universal Coordenado (UTC). A operação é equivalente ao seguinte:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#8)]
 [!code-vb[System.DateTimeOffset.Syntax#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#8)]  
  
 Linguagens que não dão suporte a operadores personalizados podem chamar o método <xref:System.DateTimeOffset.Compare%2A> em vez disso. Além disso, alguns idiomas também podem chamar o <xref:System.DateTimeOffset.op_LessThan%2A> método diretamente, como o exemplo a seguir mostra.  
  
 [!code-vb[System.DateTimeOffset.Operators#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#11)]  
  
 É o método equivalente para esse operador <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">O primeiro objeto a ser comparado.</param>
        <param name="right">O segundo objeto a ser comparado.</param>
        <summary>Determina se um objeto <see cref="T:System.DateTimeOffset" /> especificado é menor que um segundo objeto <see cref="T:System.DateTimeOffset" /> especificado.</summary>
        <returns><see langword="true" /> se o valor <see cref="P:System.DateTimeOffset.UtcDateTime" /> de <paramref name="left" /> for anterior ao valor <see cref="P:System.DateTimeOffset.UtcDateTime" /> de <paramref name="right" />, caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset.op_LessThanOrEqual%2A> método define a operação de menor que ou igual ao operador para <xref:System.DateTimeOffset> objetos. Ele permite que o código seja o seguinte:  
  
 [!code-csharp[System.DateTimeOffset.Operators#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#12)]
 [!code-vb[System.DateTimeOffset.Operators#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#12)]  
  
 Linguagens que não dão suporte a operadores personalizados podem chamar o método <xref:System.DateTimeOffset.Compare%2A> em vez disso. Algumas linguagens também podem chamar o <xref:System.DateTimeOffset.op_LessThanOrEqual%2A> método diretamente, como o exemplo a seguir mostra.  
  
 [!code-vb[System.DateTimeOffset.Operators#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#13)]  
  
 Antes de avaliar os `left` e `right` operandos, o operador converte os dois valores para o tempo Universal Coordenado (UTC). A operação é equivalente ao seguinte:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#9)]
 [!code-vb[System.DateTimeOffset.Syntax#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#9)]  
  
 É o método equivalente para esse operador <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Subtrai um objeto <see cref="T:System.DateTimeOffset" /> ou <see cref="T:System.TimeSpan" /> especificado de um objeto <see cref="T:System.DateTimeOffset" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As DateTimeOffset, right As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * DateTimeOffset -&gt; TimeSpan" Usage="left - right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">O minuendo.</param>
        <param name="right">O subtraendo.</param>
        <summary>Subtrai um objeto <see cref="T:System.DateTimeOffset" /> do outro e produz um intervalo de tempo.</summary>
        <returns>Um objeto que representa a diferença entre <paramref name="left" /> e <paramref name="right" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset.op_Subtraction%2A> método define a operação de subtração para <xref:System.DateTimeOffset> objetos. Ele permite que o código seja o seguinte:  
  
 [!code-csharp[System.DateTimeOffset.Operators#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#14)]
 [!code-vb[System.DateTimeOffset.Operators#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#14)]  
  
 Idiomas que não dão suporte a operadores personalizados e sobrecarga de operador podem chamar o <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType> método em vez disso.  
  
 O método equivalente para esse operador é <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>.]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Executando operações aritméticas com datas e horas</related>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator - (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator -(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset - timeSpan" FrameworkAlternate="netcore-2.2;netframework-2.0" />
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator - (DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeTz, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator -(DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeTz - timeSpan" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
        <Parameter Name="dateTimeTz" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" Index="1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">O objeto de data e hora para subtração.</param>
        <param name="dateTimeTz">O objeto de data e hora para subtração.</param>
        <param name="timeSpan">O intervalo de tempo a ser subtraído.</param>
        <summary>Subtrai um intervalo de tempo especificado de uma data e hora especificada e gera uma nova data e hora.</summary>
        <returns>Um objeto que é igual ao valor de <paramref name="dateTimeOffset" /> menos <paramref name="timeSpan" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset.op_Subtraction%2A> método define a operação de subtração para <xref:System.DateTimeOffset> objetos. Ele permite que o código seja o seguinte:  
  
 [!code-csharp[System.DateTimeOffset.Operators#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#15)]
 [!code-vb[System.DateTimeOffset.Operators#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#15)]  
  
 Idiomas que não dão suporte a operadores personalizados e sobrecarga de operador podem chamar o <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> método em vez disso.  
  
 O método equivalente para esse operador é <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>.]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O valor <see cref="T:System.DateTimeOffset" /> resultante é menor que <see cref="F:System.DateTimeOffset.MinValue" /> ou maior que <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Executando operações aritméticas com datas e horas</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converte a representação da cadeia de caracteres especificada de uma data e hora no <see cref="T:System.DateTimeOffset" /> equivalente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">Uma cadeia de caracteres que contém uma data e hora a ser convertida.</param>
        <summary>Converte a representação da cadeia de caracteres especificada de uma data, hora e desvio no <see cref="T:System.DateTimeOffset" /> equivalente.</summary>
        <returns>Um objeto equivalente à data e hora contida no <paramref name="input" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Parse%28System.String%29> analisa uma cadeia de caracteres com três elementos que podem aparecer em qualquer ordem e são delimitadas por espaço em branco. Esses três elementos são conforme mostrado na tabela a seguir.  
  
|Elemento|Exemplo|  
|-------------|-------------|  
|\<Data >|"2/10/2007"|  
|\<Time>|"1:02:03 PM"|  
|\<Offset>|"-7:30"|  
  
 Embora cada um desses elementos seja opcional, \<deslocamento > não pode aparecer sozinho. Ele deve ser fornecido com \<data > ou \<tempo >. Se \<data > está ausente, o padrão valor é o dia atual. Se \<tempo > está ausente, o padrão é de valor 12:00:00 AM. Se \<data > está presente, mas o componente consiste em apenas dois dígitos de ano, ele é convertido em um ano no calendário atual da cultura atual, com base no valor da <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> propriedade. Se \<deslocamento > está ausente, o padrão valor é o deslocamento de fuso horário local. \<Deslocamento > pode representar um deslocamento positivo ou negativo do tempo Universal Coordenado (UTC). Em ambos os casos, \<deslocamento > deve incluir um símbolo de sinal.  
  
 O `input` cadeia de caracteres é analisada usando as informações de formatação em um <xref:System.Globalization.DateTimeFormatInfo> objeto que é inicializado para a cultura atual. Para analisar uma cadeia de caracteres que contém a formatação designado não corresponde necessariamente na formatação da cultura atual, use o <xref:System.DateTimeOffset.ParseExact%2A> método e fornecer um especificador de formato.  
  
   
  
## Examples  
 A exemplo a seguir chama o <xref:System.DateTimeOffset.Parse%28System.String%29> método analisar várias cadeias de caracteres de data e hora. O exemplo inclui a saída de 22 de março de 2007, em um sistema cuja cultura é en-us.  
  
 [!code-csharp[System.DateTimeOffset.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#1)]
 [!code-vb[System.DateTimeOffset.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O deslocamento é maior que 14 horas ou menor que -14 horas.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> é <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> não contém uma representação da cadeia de caracteres válida de uma data e hora.  
  
- ou - 
 <paramref name="input" /> contém a representação de cadeia de caracteres de um valor de deslocamento sem uma data ou hora.</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">Uma cadeia de caracteres que contém uma data e hora a ser convertida.</param>
        <param name="formatProvider">Um objeto que fornece informações de formato específicas da cultura sobre <paramref name="input" />.</param>
        <summary>Converte a representação de cadeia de caracteres especificada de data e hora em seu equivalente <see cref="T:System.DateTimeOffset" /> usando as informações de formato específicas da cultura.</summary>
        <returns>Um objeto equivalente à data e hora contida em <paramref name="input" />, conforme especificado por <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método analisa uma cadeia de caracteres com três elementos que podem aparecer em qualquer ordem e são delimitadas por espaço em branco. Esses três elementos são mostrados na tabela a seguir.  
  
|Elemento|Exemplo|  
|-------------|-------------|  
|\<Data >|"2/10/2007"|  
|\<Time>|"1:02:03 PM"|  
|\<Offset>|"-7:30"|  
  
 Embora cada um desses elementos seja opcional, \<deslocamento > não pode aparecer sozinho. Ele deve ser fornecido com \<data > ou \<tempo >. Se \<data > está ausente, o padrão valor é o dia atual. Se \<data > está presente, mas o componente consiste em apenas dois dígitos de ano, ele é convertido em um ano em de `provider` calendário atual do parâmetro com base no valor da <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> propriedade. Se \<tempo > está ausente, o padrão é de valor 12:00:00 AM. Se \<deslocamento > está ausente, o padrão valor é o deslocamento de fuso horário local. \<Deslocamento > pode representar um deslocamento positivo ou negativo do tempo Universal Coordenado (UTC). Em ambos os casos, \<deslocamento > deve incluir um símbolo de sinal.  
  
 O formato desses três elementos é definido pelo `formatProvider` parâmetro, que pode ser um destes procedimentos:  
  
-   Um <xref:System.Globalization.CultureInfo> objeto que representa a cultura cuja formatação será usada no `input` parâmetro. O <xref:System.Globalization.DateTimeFormatInfo> objeto retornado pela <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriedade define a formatação usada `input`.  
  
-   Um objeto <xref:System.Globalization.DateTimeFormatInfo> que define o formato dos dados de data e hora.  
  
 Caso `formatprovider` seja `null`, o objeto <xref:System.Globalization.CultureInfo> que corresponde à cultura atual é usado.  
  
 O sinal positivo ou negativo usado na \<deslocamento > deve ser um + ou -. Ele não é definido pelo <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> ou <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> propriedades da <xref:System.Globalization.NumberFormatInfo> objeto do `formatProvider` parâmetro.  
  
   
  
## Examples  
 O exemplo a seguir analisa a data e cadeias de caracteres de hora que são formatadas para a cultura fr-fr e exibe-os usando o sistema local padrão en-us de cultura.  
  
 [!code-csharp[System.DateTimeOffset.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#2)]
 [!code-vb[System.DateTimeOffset.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O deslocamento é maior que 14 horas ou menor que -14 horas.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> é <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> não contém uma representação da cadeia de caracteres válida de uma data e hora.  
  
- ou - 
 <paramref name="input" /> contém a representação de cadeia de caracteres de um valor de deslocamento sem uma data ou hora.</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider = null, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As ReadOnlySpan(Of Char), Optional formatProvider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">Uma cadeia de caracteres que contém uma data e hora a ser convertida.</param>
        <param name="formatProvider">Um objeto que fornece informações de formato específicas da cultura sobre <paramref name="input" />.</param>
        <param name="styles">Um combinação bit a bit de valores de enumeração que indica o formato permitido de <paramref name="input" />. Um valor típico a ser especificado é <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Converte a representação de cadeia de caracteres especificada de uma data e hora em seu <see cref="T:System.DateTimeOffset" /> equivalente usando o estilo de formatação e as informações de formato específicos da cultura especificada.</summary>
        <returns>Um objeto equivalente à data e hora contida no <paramref name="input" />, conforme especificado por <paramref name="formatProvider" /> e <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método analisa uma cadeia de caracteres com três elementos que podem aparecer em qualquer ordem e são delimitadas por espaço em branco. Esses três elementos são mostrados na tabela a seguir.  
  
|Elemento|Exemplo|  
|-------------|-------------|  
|\<Data >|"2/10/2007"|  
|\<Time>|"1:02:03 PM"|  
|\<Offset>|"-7:30"|  
  
 Embora cada um desses elementos seja opcional, \<deslocamento > não pode aparecer sozinho. Ele deve ser fornecido com \<data > ou \<tempo >. Se \<data > está ausente, o padrão valor é o dia atual. Se \<data > está presente, mas o componente consiste em apenas dois dígitos de ano, ele é convertido em um ano em de `provider` calendário atual do parâmetro com base no valor da <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> propriedade. Se \<tempo > está ausente, o padrão é de valor 12:00:00 AM. Se \<deslocamento > estiver ausente, o padrão valor é o deslocamento de fuso horário local, ou <xref:System.TimeSpan.Zero?displayProperty=nameWithType> se o <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> ou <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> valor é especificado no `styles` parâmetro. Se \<deslocamento > estiver presente, ele pode representar um deslocamento positivo ou negativo do tempo Universal Coordenado (UTC). Em ambos os casos, \<deslocamento > deve incluir um símbolo de sinal.  
  
 O formato desses três elementos é definido pelo `formatProvider` parâmetro, que pode ser um destes procedimentos:  
  
-   Um <xref:System.Globalization.CultureInfo> objeto que representa a cultura cuja formatação será usada no `input` parâmetro. O <xref:System.Globalization.DateTimeFormatInfo> objeto retornado pela <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriedade define a formatação usada `input`.  
  
-   Um objeto <xref:System.Globalization.DateTimeFormatInfo> que define o formato dos dados de data e hora.  
  
 Cada elemento também pode ser incluído por espaço em branco à esquerda ou direita e o \<data > e \<tempo > elementos podem incluir espaços em branco interno (como 6:   00:00). Somente o \<deslocamento > componente não pode incluir espaços em branco interno.  
  
 Caso `formatprovider` seja `null`, o objeto <xref:System.Globalization.CultureInfo> que corresponde à cultura atual é usado.  
  
 O sinal positivo ou negativo usado na \<deslocamento > deve ser um + ou -. Ele não é definido pelo <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> ou <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> propriedades da <xref:System.Globalization.NumberFormatInfo> objeto retornado pelo `formatProvider` parâmetro.  
  
 A tabela a seguir mostra os membros do <xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType> enumeração que têm suporte.  
  
|Membro DateTimeStyles|Descrição|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analisa a cadeia de caracteres representada pelo `input` e, se necessário, converte-o em UTC. É equivalente à análise de uma cadeia de caracteres e, em seguida, chamar o <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> método de retornado <xref:System.DateTimeOffset> objeto.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Embora válido, esse valor é ignorado. Espaço em branco interno é permitido o \<data > e \<tempo > elementos.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Embora válido, esse valor é ignorado. Espaço em branco à esquerda é permitido na frente de cada componente na cadeia de caracteres analisada.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Embora válido, esse valor é ignorado. Espaço em branco à direita é permitido na frente de cada componente na cadeia de caracteres analisada.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Este é o comportamento padrão. Ele não pode ser substituído por meio do fornecimento mais restritiva <xref:System.Globalization.DateTimeStyles> valor de enumeração, como <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Indica que, se o `input` parâmetro não tem um \<deslocamento > elemento, o deslocamento do fuso horário local deve ser fornecido. Esse é o comportamento padrão da <xref:System.DateTimeOffset.Parse%2A> método.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Indica que, se o `input` parâmetro não tem um \<deslocamento > elemento, o deslocamento do UTC (00:00) deve ser fornecido.|  
|<xref:System.Globalization.DateTimeStyles.None>|Embora seja válido, esse valor é ignorado e não tem nenhum efeito.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Porque o <xref:System.DateTimeOffset> a estrutura não inclui um `Kind` propriedade, esse valor não tem nenhum efeito.|  
  
 Somente o <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> valor não é suportado. Uma <xref:System.ArgumentException> será lançada se esse valor é incluído no `styles` parâmetro.  
  
   
  
## Examples  
 O exemplo a seguir ilustra o efeito de passar o <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>, e <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> valores para o `styles` parâmetro do <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> método.  
  
 [!code-csharp[System.DateTimeOffset.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#3)]
 [!code-vb[System.DateTimeOffset.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O deslocamento é maior que 14 horas ou menor que -14 horas.  
  
- ou - 
 <paramref name="styles" /> não é um valor <see cref="T:System.Globalization.DateTimeStyles" /> válido.  
  
- ou - 
 <paramref name="styles" /> inclui um valor de <see cref="T:System.Globalization.DateTimeStyles" /> sem suporte.  
  
- ou - 
 <paramref name="styles" /> inclui valores de <see cref="T:System.Globalization.DateTimeStyles" /> que não podem ser usados juntos.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> é <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> não contém uma representação da cadeia de caracteres válida de uma data e hora.  
  
- ou - 
 <paramref name="input" /> contém a representação de cadeia de caracteres de um valor de deslocamento sem uma data ou hora.</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converte a representação da cadeia de caracteres especificada de uma data e hora no <see cref="T:System.DateTimeOffset" /> equivalente. O formato da representação da cadeia de caracteres deve corresponder exatamente a um formato especificado.</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">Uma cadeia de caracteres que contém uma data e hora a ser convertida.</param>
        <param name="format">Um especificador de formato que define o formato esperado de <paramref name="input" />.</param>
        <param name="formatProvider">Um objeto que fornece informações de formatação específicas de cultura sobre <paramref name="input" />.</param>
        <summary>Converte a representação de cadeia de caracteres especificada de data e hora em seu equivalente <see cref="T:System.DateTimeOffset" /> usando o formato especificado e as informações de formato específicas da cultura. O formato de representação da cadeia de caracteres deve corresponder exatamente ao formato especificado.</summary>
        <returns>Um objeto equivalente à data e hora contida no <paramref name="input" />, conforme especificado por <paramref name="format" /> e <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> método analisa a representação de cadeia de caracteres de uma data, que deve estar no formato definido pelo `format` parâmetro. Ele também requer que o \<data >, \<tempo >, e \<deslocamento > elementos da representação de cadeia de caracteres de data e hora são exibidos na ordem especificada pelo `format`. Se o `input` cadeia de caracteres não coincide com isso `format` parâmetro, o método lança um <xref:System.FormatException>.  Em contraste, o <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método analisa a representação de cadeia de caracteres de uma data em qualquer um dos formatos reconhecidas pelo provedor de formato <xref:System.Globalization.DateTimeFormatInfo> objeto. <xref:System.DateTimeOffset.Parse%2A> também permite que o \<data >, \<hora >, e \<deslocamento > elementos da representação de cadeia de caracteres de data e hora para aparecer em qualquer ordem.  
  
 O `format` parâmetro é uma cadeia de caracteres que contém um especificador de formato único padrão ou um ou mais especificadores de formato personalizado que definem o formato obrigatório do `input` parâmetro. Para obter detalhes sobre códigos de formatação válidos, consulte [padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md) e [Data personalizada e cadeias de caracteres de formato de hora](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Se `format` inclui o `z`, `zz`, ou `zzz` especificadores de formato personalizado para indicar que um deslocamento deve estar presente no `input`, que o deslocamento deve incluir um sinal negativo ou um sinal positivo. Se a entrada estiver ausente, o método gerará uma <xref:System.FormatException>.  
  
 Se `format` exige que `input` contêm uma data, mas não uma hora, resultante <xref:System.DateTimeOffset> objeto é atribuído a uma hora de meia-noite (0: 00:00). Se `format` exige que `input` contêm uma hora, mas não uma data, resultante <xref:System.DateTimeOffset> objeto é atribuído a data atual no sistema local. Se `format` não exige que `input` contêm um deslocamento resultante <xref:System.DateTimeOffset> objeto é atribuído o deslocamento de fuso horário do sistema local.  
  
 O específica símbolos de data e hora e cadeias de caracteres usadas no `input` são definidos pela `formatProvider` parâmetro, como o formato preciso da `input` se `format` é uma cadeia de caracteres do especificador de formato padrão. O parâmetro `formatProvider` pode ser qualquer um dos seguintes:  
  
-   Um objeto <xref:System.Globalization.CultureInfo> que representa a cultura com base na qual `input` é interpretado. O objeto <xref:System.Globalization.DateTimeFormatInfo> retornado pela propriedade <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> define os símbolos e a formatação em `input`.  
  
-   Um objeto <xref:System.Globalization.DateTimeFormatInfo> que define o formato dos dados de data e hora.  
  
 Caso `formatprovider` seja `null`, o objeto <xref:System.Globalization.CultureInfo> que corresponde à cultura atual é usado.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método com especificadores de formato padrão e personalizados e a cultura invariável para analisar várias cadeias de caracteres de data e hora.  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#1)]  

O exemplo a seguir analisa uma matriz de cadeias de caracteres que devem estar em conformidade com [ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier). Como a saída do exemplo mostra, cadeias de caracteres com espaços à direita ou não são analisadas com êxito, assim como cadeias de caracteres com elementos de data e hora que estão fora do intervalo.

[!code-csharp[Parsing an ISO 8601 string](~/samples/snippets/csharp/api/system/datetimeoffset/parseexact/parseexact-iso8601.cs)]
[!code-vb[Parsing an ISO 8601 string](~/samples/snippets/visualbasic/api/system/datetimeoffset/parseexact/parseexact-iso8601.vb)]


 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O deslocamento é maior que 14 horas ou menor que -14 horas.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="format" /> é <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> é uma cadeia de caracteres vazia ("").  
  
- ou - 
 <paramref name="input" /> não contém uma representação da cadeia de caracteres válida de uma data e hora.  
  
- ou - 
 <paramref name="format" /> é uma cadeia de caracteres vazia.  
  
- ou - 
O componente de hora e o designador AM/PM no <paramref name="input" /> não concordam.</exception>
        <block subset="none" type="usage"><para>No [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], o <see cref="Overload:System.DateTimeOffset.ParseExact" /> método lança um <see cref="T:System.FormatException" /> se a cadeia de caracteres a ser analisada contém um componente de hora e um designador AM/PM que não estão no contrato. No [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] e versões anteriores, o designador AM/PM é ignorado.</para></block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora padrão</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora personalizado</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">Um intervalo de caracteres que representa uma data e hora.</param>
        <param name="format">Um intervalo de caracteres que contém um especificador de formato que define o formato esperado de <paramref name="input" />.</param>
        <param name="formatProvider">Um objeto que fornece informações de formatação específicas à cultura sobre <paramref name="input" />.</param>
        <param name="styles">Um combinação bit a bit de valores de enumeração que indica o formato permitido de <paramref name="input" />.</param>
        <summary>Converte um intervalo de caracteres que representa uma data e hora em seu equivalente <see cref="T:System.DateTimeOffset" /> usando o formato especificado, as informações de formato específicas da cultura e o estilo. O formato de representação da cadeia de caracteres deve corresponder exatamente ao formato especificado.</summary>
        <returns>Um objeto equivalente à data e hora contidas no parâmetro <paramref name="input" />, conforme especificado pelos parâmetros <paramref name="format" />, <paramref name="formatProvider" /> e <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Esse método analisa um intervalo de caracteres que representa uma data, que deve estar no formato definido pelo `format` parâmetro. Ele também requer que o \<data >, \<tempo >, e \<deslocamento > elementos da representação de cadeia de caracteres de data e hora são exibidos na ordem especificada pelo `format`. Se `input` não corresponde a `format` padrão, o método lança um <xref:System.FormatException>.  Em contraste, o <xref:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> método analisa a representação de cadeia de caracteres de uma data em qualquer um dos formatos reconhecidas pelo provedor de formato <xref:System.Globalization.DateTimeFormatInfo> objeto. <xref:System.DateTimeOffset.Parse%2A> também permite que o \<data >, \<hora >, e \<deslocamento > elementos da representação de cadeia de caracteres de data e hora para aparecer em qualquer ordem.  
  
 O `format` parâmetro é um intervalo de caracteres que contém um especificador de formato padrão de caractere único ou um ou mais especificadores de formato personalizado que definem o formato obrigatório do `input` parâmetro. Para obter detalhes sobre códigos de formatação válidos, consulte [padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md) e [Data personalizada e cadeias de caracteres de formato de hora](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Se `format` inclui o `z`, `zz`, ou `zzz` especificadores de formato personalizado para indicar que um deslocamento deve estar presente no `input`, que o deslocamento deve incluir um sinal negativo ou um sinal positivo. Se a entrada estiver ausente, o método gerará uma <xref:System.FormatException>.  
  
 Se `format` exige que `input` contêm uma data, mas não uma hora, resultante <xref:System.DateTimeOffset> objeto é atribuído a uma hora de meia-noite (0: 00:00). Se `format` exige que `input` contêm uma hora, mas não uma data, resultante <xref:System.DateTimeOffset> objeto é atribuído a data atual no sistema local. Se `format` não exige que `input` contêm um deslocamento resultante <xref:System.DateTimeOffset> objeto é atribuído o deslocamento de fuso horário do sistema local.  
  
 O específica símbolos de data e hora e cadeias de caracteres usadas no `input` são definidos pela `formatProvider` parâmetro, como o formato preciso da `input` se `format` é um especificador de formato padrão. O parâmetro `formatProvider` pode ser qualquer um dos seguintes:  
  
-   Um objeto <xref:System.Globalization.CultureInfo> que representa a cultura com base na qual `input` é interpretado. O objeto <xref:System.Globalization.DateTimeFormatInfo> retornado pela propriedade <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> define os símbolos e a formatação em `input`.  
  
-   Um objeto <xref:System.Globalization.DateTimeFormatInfo> que define o formato dos dados de data e hora.  
  
 Caso `formatprovider` seja `null`, o objeto <xref:System.Globalization.CultureInfo> que corresponde à cultura atual é usado.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O deslocamento é maior que 14 horas ou menor que -14 horas.  
- ou -  
O parâmetro <paramref name="styles" /> inclui um valor sem suporte.  
- ou -  
O parâmetro <paramref name="styles" /> contém valores <see cref="T:System.Globalization.DateTimeStyles" /> que não podem ser usados juntos.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> é um intervalo de caracteres vazio.  
 - ou - <paramref name="input" /> não contém uma representação da cadeia de caracteres válida de uma data e hora.  
 - ou - <paramref name="format" /> é um intervalo de caracteres vazio.  
 - ou -  
 O componente de hora e o designador AM/PM no <paramref name="input" /> não concordam.</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">Um intervalo de caracteres que contém uma data e hora a serem convertidas.</param>
        <param name="formats">Uma matriz de especificadores de formato que definem os formatos esperados de <paramref name="input" />.</param>
        <param name="formatProvider">Um objeto que fornece informações de formatação específicas de cultura sobre <paramref name="input" />.</param>
        <param name="styles">Um combinação bit a bit de valores de enumeração que indica o formato permitido de <paramref name="input" />.</param>
        <summary>Converte um intervalo de caracteres que contém a representação da cadeia de caracteres especificada de data e hora em seu equivalente <see cref="T:System.DateTimeOffset" /> usando o formato, informações do formato específico da cultura e o estilo especificados. O formato da representação de data e hora deve corresponder exatamente a um dos formatos especificados.</summary>
        <returns>Um objeto equivalente à data e hora contidas no parâmetro <paramref name="input" />, conforme especificado pelos parâmetros <paramref name="formats" />, <paramref name="formatProvider" /> e <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
Esse método analisa um intervalo de caracteres que representa uma data que corresponde a qualquer um dos padrões atribuído para o `formats` parâmetro. Se `input` não corresponder a qualquer um desses padrões com qualquer uma das variações definidas pelo `styles` parâmetro, o método lança um <xref:System.FormatException>. Além de comparando `input` vários padrões de formatação, essa sobrecarga se comporta de forma idêntica ao <xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> método.  
  
 O `formats` parâmetro é uma matriz de cadeia de caracteres cujos elementos contêm um especificador de formato único padrão ou um ou mais especificadores de formato personalizado que definem o padrão de possíveis do `input` parâmetro. Quando o método é chamado, `input` deve corresponder a um desses padrões. Para obter detalhes sobre códigos de formatação válidos, consulte [padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md) e [Data personalizada e cadeias de caracteres de formato de hora](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Se o elemento correspondente em `formats` inclui o `z`, `zz`, ou `zzz` especificadores de formato personalizado para indicar que um deslocamento deve estar presente no `input`, que o deslocamento deve incluir um sinal negativo ou um sinal positivo. Se a entrada estiver ausente, o método gerará uma <xref:System.FormatException>.  
  
> [!IMPORTANT]
>  Usando o `formats` parâmetro dessa sobrecarga para especificar vários formatos pode ajudar a reduzir a experimentam de muitos usuários quando eles entram datas e horas de frustração. Em particular, a capacidade de definir vários padrões de entrada permite que um aplicativo lidar com representações de data e hora que podem incluir ou não têm os zeros à esquerda em meses, dias, horas, minutos e segundos.
  
 Se o elemento correspondente em `formats` exige que `input` contêm uma data, mas não uma hora, resultante <xref:System.DateTimeOffset> objeto é atribuído a uma hora de meia-noite (0: 00:00). Se o elemento correspondente em `formats` exige que `input` contêm uma hora, mas não uma data, resultante <xref:System.DateTimeOffset> objeto é atribuído a data atual no sistema local. Se o elemento correspondente em `formats` não exige que `input` contêm um deslocamento, o deslocamento do resultante <xref:System.DateTimeOffset> objeto depende do valor da `styles` parâmetro. Caso `styles` inclua <xref:System.Globalization.DateTimeStyles.AssumeLocal>, o deslocamento do fuso horário local é atribuído ao objeto <xref:System.DateTimeOffset>. Caso `styles` inclua <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, o deslocamento de Tempo Universal Coordenado (UTC), ou +00:00, é atribuído ao objeto <xref:System.DateTimeOffset>. Caso nenhum valor seja especificado, o deslocamento do fuso horário local é usado.  
  
 Os símbolos de data e hora específicos e as cadeias de caracteres usadas em `input` são definidos pelo parâmetro `formatProvider`. O mesmo é verdadeiro para o formato preciso da `input`, se o elemento correspondente da `formats` é uma cadeia de caracteres do especificador de formato padrão. O parâmetro `formatProvider` pode ser qualquer um dos seguintes:  
  
-   Um objeto <xref:System.Globalization.CultureInfo> que representa a cultura com base na qual `input` é interpretado. O <xref:System.Globalization.DateTimeFormatInfo> objeto retornado pela <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriedade define os símbolos e formatação no `input`.  
  
-   Um objeto <xref:System.Globalization.DateTimeFormatInfo> que define o formato dos dados de data e hora.  
  
 Caso `formatprovider` seja `null`, o objeto <xref:System.Globalization.CultureInfo> que corresponde à cultura atual é usado.  
  
 O `styles` parâmetro define se o espaço em branco é permitido na cadeia de entrada, indica como as cadeias de caracteres sem um componente de deslocamento explícita são analisadas e dá suporte à conversão de UTC como parte da operação de análise. Todos os membros da enumeração <xref:System.Globalization.DateTimeStyles> são suportados, exceto <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. A tabela a seguir lista o efeito de cada membro suportado.  
  
|Membro do `DateTimeStyles`|Comportamento|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analisa `input` e, caso necessário, converte-o em UTC. Ele é equivalente à análise de uma cadeia de caracteres e, em seguida, à chamada do método <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> do objeto <xref:System.DateTimeOffset> retornado.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Se o elemento correspondente em `formats` não exige que `input` contêm um valor de deslocamento, retornado <xref:System.DateTimeOffset> objeto receberá o deslocamento do fuso horário local. Este é o valor padrão.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Se o elemento correspondente em `formats` não exige que `input` contêm um valor de deslocamento, retornado <xref:System.DateTimeOffset> objeto receberá o deslocamento do UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Permite `input` para incluir espaço em branco interno não especificado por `format`. Espaço em branco extra pode aparecer entre os componentes de data e hora e em componentes individuais (exceto o deslocamento) e é ignorado ao analisar a cadeia de caracteres.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Permite `input` incluir espaços à esquerda não especificados por `formats`. Eles são ignorados durante a análise da cadeia de caracteres.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Permite `input` incluir espaços não especificados à direita `formats`. Eles são ignorados durante a análise da cadeia de caracteres.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Permite `input` para incluir espaços à esquerda, à direita e internos não especificados por `formats`. Todos os caracteres de espaço em branco extra não especificados no elemento correspondente no `formats` são ignorados ao analisar a cadeia de caracteres.|  
|<xref:System.Globalization.DateTimeStyles.None>|Indica que o espaço em branco adicional não é permitido em `input`. Espaço em branco devem aparecer exatamente conforme especificado em um elemento específico de `formats` para uma correspondência ocorra. Este é o comportamento padrão.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Não tem nenhum efeito porque o <xref:System.DateTimeOffset> a estrutura não inclui um `Kind` propriedade.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O deslocamento é maior que 14 horas ou menor que -14 horas.  
-ou- <paramref name="styles" /> inclui um valor sem suporte.  
- ou -  
O parâmetro <paramref name="styles" /> contém valores <see cref="T:System.Globalization.DateTimeStyles" /> que não podem ser usados juntos.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> é um intervalo de caracteres vazio.  
- ou - <paramref name="input" /> não contém uma representação da cadeia de caracteres válida de uma data e hora.  
- ou -  
Nenhum elemento de <paramref name="formats" /> contém um especificador de formato válido.  
- ou -  
O componente de hora e o designador AM/PM no <paramref name="input" /> não concordam.</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">Uma cadeia de caracteres que contém uma data e hora a ser convertida.</param>
        <param name="format">Um especificador de formato que define o formato esperado de <paramref name="input" />.</param>
        <param name="formatProvider">Um objeto que fornece informações de formatação específicas de cultura sobre <paramref name="input" />.</param>
        <param name="styles">Um combinação bit a bit de valores de enumeração que indica o formato permitido de <paramref name="input" />.</param>
        <summary>Converte a representação de cadeia de caracteres especificada de data e hora em seu equivalente <see cref="T:System.DateTimeOffset" /> usando o formato especificado, as informações de formato específicas da cultura e o estilo. O formato de representação da cadeia de caracteres deve corresponder exatamente ao formato especificado.</summary>
        <returns>Um objeto equivalente à data e hora contidas no parâmetro <paramref name="input" />, conforme especificado pelos parâmetros <paramref name="format" />, <paramref name="formatProvider" /> e <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método analisa a representação de cadeia de caracteres de uma data, que deve estar no formato definido pelo `format` parâmetro. Ele também requer que o \<data >, \<tempo >, e \<deslocamento > elementos da representação de cadeia de caracteres de data e hora são exibidos na ordem especificada pelo `format`. Se o `input` cadeia de caracteres não coincide com o padrão do `format` parâmetro, com qualquer variação definido pelo `styles` parâmetro, o método lança um <xref:System.FormatException>.  Em contraste, o <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método analisa a representação de cadeia de caracteres de uma data em qualquer um dos formatos reconhecidas pelo provedor de formato <xref:System.Globalization.DateTimeFormatInfo> objeto. <xref:System.DateTimeOffset.Parse%2A> também permite que o \<data >, \<hora >, e \<deslocamento > elementos da representação de cadeia de caracteres de data e hora para aparecer em qualquer ordem.  
  
 O `format` parâmetro é uma cadeia de caracteres que contém um especificador de formato único padrão ou um ou mais especificadores de formato personalizado que definem o padrão necessário do `input` parâmetro. Para obter detalhes sobre códigos de formatação válidos, consulte [padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md) e [Data personalizada e cadeias de caracteres de formato de hora](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Se `format` inclui o `z`, `zz`, ou `zzz` especificadores de formato personalizado para indicar que um deslocamento deve estar presente no `input`, que o deslocamento deve incluir um sinal negativo ou um sinal positivo. Se a entrada estiver ausente, o método gerará uma <xref:System.FormatException>.  
  
 Se `format` exige que `input` contêm uma data, mas não uma hora, resultante <xref:System.DateTimeOffset> objeto é atribuído a uma hora de meia-noite (0: 00:00). Se `format` exige que `input` contêm uma hora, mas não uma data, resultante <xref:System.DateTimeOffset> objeto é atribuído a data atual no sistema local. Se `format` não exige que `input` contêm um deslocamento, o deslocamento do resultante <xref:System.DateTimeOffset> objeto depende do valor da `styles` parâmetro. Caso `styles` inclua <xref:System.Globalization.DateTimeStyles.AssumeLocal>, o deslocamento do fuso horário local é atribuído ao objeto <xref:System.DateTimeOffset>. Caso `styles` inclua <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, o deslocamento de Tempo Universal Coordenado (UTC), ou +00:00, é atribuído ao objeto <xref:System.DateTimeOffset>. Caso nenhum valor seja especificado, o deslocamento do fuso horário local é usado.  
  
 Os símbolos de data e hora específicos e as cadeias de caracteres usadas em `input` são definidos pelo parâmetro `formatProvider`. O mesmo é verdadeiro para o formato preciso da `input`, se `format` é uma cadeia de caracteres do especificador de formato padrão. O parâmetro `formatProvider` pode ser qualquer um dos seguintes:  
  
-   Um objeto <xref:System.Globalization.CultureInfo> que representa a cultura com base na qual `input` é interpretado. O <xref:System.Globalization.DateTimeFormatInfo> objeto retornado pela <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriedade define os símbolos e formatação no `input`.  
  
-   Um objeto <xref:System.Globalization.DateTimeFormatInfo> que define o formato dos dados de data e hora.  
  
 Caso `formatprovider` seja `null`, o objeto <xref:System.Globalization.CultureInfo> que corresponde à cultura atual é usado.  
  
 O `styles` parâmetro define se o espaço em branco é permitido na cadeia de entrada, indica como as cadeias de caracteres sem um componente de deslocamento explícita são analisadas e dá suporte à conversão de UTC como parte da operação de análise. Todos os membros da enumeração <xref:System.Globalization.DateTimeStyles> são suportados, exceto <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. A tabela a seguir lista o efeito de cada membro suportado.  
  
|Membro do `DateTimeStyles`|Comportamento|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analisa `input` e, caso necessário, converte-o em UTC. Ele é equivalente à análise de uma cadeia de caracteres e, em seguida, à chamada do método <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> do objeto <xref:System.DateTimeOffset> retornado.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Se `format` não exige que `input` contêm um valor de deslocamento, retornado <xref:System.DateTimeOffset> objeto receberá o deslocamento do fuso horário local. Este é o valor padrão.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Se `format` não exige que `input` contêm um valor de deslocamento, retornado <xref:System.DateTimeOffset> objeto receberá o deslocamento do UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Permite `input` para incluir espaço em branco interno não especificado por `format`. Espaço em branco extra pode aparecer entre os componentes de data e hora e em componentes individuais e é ignorado ao analisar a cadeia de caracteres.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Permite `input` incluir espaços à esquerda não especificados por `format`. Eles são ignorados durante a análise da cadeia de caracteres.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Permite `input` incluir espaços não especificados à direita `format`. Eles são ignorados durante a análise da cadeia de caracteres.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Permite `input` para incluir espaços à esquerda, à direita e internos não especificados por `format`. Todos os caracteres de espaço em branco extra não especificados no `format` são ignorados ao analisar a cadeia de caracteres.|  
|<xref:System.Globalization.DateTimeStyles.None>|Indica que o espaço em branco adicional não é permitido em `input`. Espaço em branco devem aparecer exatamente conforme especificado no `format`. Este é o comportamento padrão.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Não tem nenhum efeito porque o <xref:System.DateTimeOffset> a estrutura não inclui um `Kind` propriedade.|  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método com especificadores de formato padrão e personalizadas, a cultura invariável e vários <xref:System.Globalization.DateTimeStyles> valores analisar várias cadeias de caracteres de data e hora.  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#2)]  

O exemplo a seguir usa uma variedade de <xref:System.Globalization.DateTimeStyles> valores para analisar uma matriz de cadeias de caracteres que devem estar em conformidade com [ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier). Como mostra a saída do exemplo, cadeias de caracteres no formato correto não analisa se:

- eles contêm espaços em branco e apropriado <xref:System.Globalization.DateTimeStyles> sinalizador (como <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> não foi fornecido na chamada do método.

- eles contêm os elementos de data e hora que estão fora do intervalo.

Cadeias de caracteres que não especificam um deslocamento UTC devem para ter o deslocamento do fuso horário local (nesse caso, -07:00), a menos que o <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> sinalizador for fornecido na chamada do método. Nesse caso, eles devem para ser o Horário Coordenado Universal.

[!code-csharp[Parsing ISO 8601 strings](~/samples/snippets/csharp/api/system/datetimeoffset/parseexact/parseexact-iso8601-2.cs)]
[!code-vb[Parsing ISO 8601 strings](~/samples/snippets/visualbasic/api/system/datetimeoffset/parseexact/parseexact-iso8601-2.vb)]


 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O deslocamento é maior que 14 horas ou menor que -14 horas.  
  
- ou - 
O parâmetro <paramref name="styles" /> inclui um valor sem suporte.  
  
- ou - 
O parâmetro <paramref name="styles" /> contém valores <see cref="T:System.Globalization.DateTimeStyles" /> que não podem ser usados juntos.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="format" /> é <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> é uma cadeia de caracteres vazia ("").  
  
- ou - 
 <paramref name="input" /> não contém uma representação da cadeia de caracteres válida de uma data e hora.  
  
- ou - 
 <paramref name="format" /> é uma cadeia de caracteres vazia.  
  
- ou - 
O componente de hora e o designador AM/PM no <paramref name="input" /> não concordam.</exception>
        <block subset="none" type="usage"><para>No [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], o <see cref="Overload:System.DateTimeOffset.ParseExact" /> método lança um <see cref="T:System.FormatException" /> se a cadeia de caracteres a ser analisada contém um componente de hora e um designador AM/PM que não estão no contrato. No [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] e versões anteriores, o designador AM/PM é ignorado.</para></block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora padrão</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora personalizado</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">Uma cadeia de caracteres que contém uma data e hora a ser convertida.</param>
        <param name="formats">Uma matriz de especificadores de formato que definem os formatos esperados de <paramref name="input" />.</param>
        <param name="formatProvider">Um objeto que fornece informações de formatação específicas de cultura sobre <paramref name="input" />.</param>
        <param name="styles">Um combinação bit a bit de valores de enumeração que indica o formato permitido de <paramref name="input" />.</param>
        <summary>Converte a representação da cadeia de caracteres especificada de data e hora em seu equivalente <see cref="T:System.DateTimeOffset" /> usando o formato, informações do formato específico da cultura e o estilo especificados. O formato da representação da cadeia de caracteres deve corresponder exatamente a um dos formatos especificados.</summary>
        <returns>Um objeto equivalente à data e hora contidas no parâmetro <paramref name="input" />, conforme especificado pelos parâmetros <paramref name="formats" />, <paramref name="formatProvider" /> e <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método analisa a representação de cadeia de caracteres de uma data que corresponde a qualquer um dos padrões atribuído para o `formats` parâmetro. Se o `input` cadeia de caracteres não corresponder a qualquer um desses padrões com qualquer uma das variações definidas pelo `styles` parâmetro, o método lança um <xref:System.FormatException>. Além de comparando `input` vários padrões de formatação, essa sobrecarga se comporta de forma idêntica ao <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método.  
  
 O `formats` parâmetro é uma matriz de cadeia de caracteres cujos elementos contêm um especificador de formato único padrão ou um ou mais especificadores de formato personalizado que definem o padrão de possíveis do `input` parâmetro. Quando o método é chamado, `input` deve corresponder a um desses padrões. Para obter detalhes sobre códigos de formatação válidos, consulte [padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md) e [Data personalizada e cadeias de caracteres de formato de hora](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Se o elemento correspondente em `formats` inclui o `z`, `zz`, ou `zzz` especificadores de formato personalizado para indicar que um deslocamento deve estar presente no `input`, que o deslocamento deve incluir um sinal negativo ou um sinal positivo. Se a entrada estiver ausente, o método gerará uma <xref:System.FormatException>.  
  
> [!IMPORTANT]
>  Usando o `formats` parâmetro dessa sobrecarga para especificar vários formatos pode ajudar a reduzir a experimentam de muitos usuários quando eles entram datas e horas de frustração. Em particular, a capacidade de definir vários padrões de entrada permite que um aplicativo lidar com representações de data e hora que podem incluir ou não têm os zeros à esquerda em meses, dias, horas, minutos e segundos. O exemplo fornece uma ilustração disto.  
  
 Se o elemento correspondente em `formats` exige que `input` contêm uma data, mas não uma hora, resultante <xref:System.DateTimeOffset> objeto é atribuído a uma hora de meia-noite (0: 00:00). Se o elemento correspondente em `formats` exige que `input` contêm uma hora, mas não uma data, resultante <xref:System.DateTimeOffset> objeto é atribuído a data atual no sistema local. Se o elemento correspondente em `formats` não exige que `input` contêm um deslocamento, o deslocamento do resultante <xref:System.DateTimeOffset> objeto depende do valor da `styles` parâmetro. Caso `styles` inclua <xref:System.Globalization.DateTimeStyles.AssumeLocal>, o deslocamento do fuso horário local é atribuído ao objeto <xref:System.DateTimeOffset>. Caso `styles` inclua <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, o deslocamento de Tempo Universal Coordenado (UTC), ou +00:00, é atribuído ao objeto <xref:System.DateTimeOffset>. Caso nenhum valor seja especificado, o deslocamento do fuso horário local é usado.  
  
 Os símbolos de data e hora específicos e as cadeias de caracteres usadas em `input` são definidos pelo parâmetro `formatProvider`. O mesmo é verdadeiro para o formato preciso da `input`, se o elemento correspondente da `formats` é uma cadeia de caracteres do especificador de formato padrão. O parâmetro `formatProvider` pode ser qualquer um dos seguintes:  
  
-   Um objeto <xref:System.Globalization.CultureInfo> que representa a cultura com base na qual `input` é interpretado. O <xref:System.Globalization.DateTimeFormatInfo> objeto retornado pela <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriedade define os símbolos e formatação no `input`.  
  
-   Um objeto <xref:System.Globalization.DateTimeFormatInfo> que define o formato dos dados de data e hora.  
  
 Caso `formatprovider` seja `null`, o objeto <xref:System.Globalization.CultureInfo> que corresponde à cultura atual é usado.  
  
 O `styles` parâmetro define se o espaço em branco é permitido na cadeia de entrada, indica como as cadeias de caracteres sem um componente de deslocamento explícita são analisadas e dá suporte à conversão de UTC como parte da operação de análise. Todos os membros da enumeração <xref:System.Globalization.DateTimeStyles> são suportados, exceto <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. A tabela a seguir lista o efeito de cada membro suportado.  
  
|Membro do `DateTimeStyles`|Comportamento|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analisa `input` e, caso necessário, converte-o em UTC. Ele é equivalente à análise de uma cadeia de caracteres e, em seguida, à chamada do método <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> do objeto <xref:System.DateTimeOffset> retornado.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Se o elemento correspondente em `formats` não exige que `input` contêm um valor de deslocamento, retornado <xref:System.DateTimeOffset> objeto receberá o deslocamento do fuso horário local. Este é o valor padrão.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Se o elemento correspondente em `formats` não exige que `input` contêm um valor de deslocamento, retornado <xref:System.DateTimeOffset> objeto receberá o deslocamento do UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Permite `input` para incluir espaço em branco interno não especificado por `format`. Espaço em branco extra pode aparecer entre os componentes de data e hora e em componentes individuais (exceto o deslocamento) e é ignorado ao analisar a cadeia de caracteres.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Permite `input` incluir espaços à esquerda não especificados por `formats`. Eles são ignorados durante a análise da cadeia de caracteres.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Permite `input` incluir espaços não especificados à direita `formats`. Eles são ignorados durante a análise da cadeia de caracteres.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Permite `input` para incluir espaços à esquerda, à direita e internos não especificados por `formats`. Todos os caracteres de espaço em branco extra não especificados no elemento correspondente no `formats` são ignorados ao analisar a cadeia de caracteres.|  
|<xref:System.Globalization.DateTimeStyles.None>|Indica que o espaço em branco adicional não é permitido em `input`. Espaço em branco devem aparecer exatamente conforme especificado em um elemento específico de `formats` para uma correspondência ocorra. Este é o comportamento padrão.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Não tem nenhum efeito porque o <xref:System.DateTimeOffset> a estrutura não inclui um `Kind` propriedade.|  
  
   
  
## Examples  
 O exemplo a seguir define vários formatos de entrada para a representação de cadeia de caracteres de uma data e hora e o valor de deslocamento e, em seguida, passa a cadeia de caracteres inserida pelo usuário para o <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método.  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#3)]
 [!code-vb[System.DateTimeOffset.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O deslocamento é maior que 14 horas ou menor que -14 horas.  
  
- ou - 
 <paramref name="styles" /> inclui um valor sem suporte.  
  
- ou - 
O parâmetro <paramref name="styles" /> contém valores <see cref="T:System.Globalization.DateTimeStyles" /> que não podem ser usados juntos.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> é <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> é uma cadeia de caracteres vazia ("").  
  
- ou - 
 <paramref name="input" /> não contém uma representação da cadeia de caracteres válida de uma data e hora.  
  
- ou - 
Nenhum elemento de <paramref name="formats" /> contém um especificador de formato válido.  
  
- ou - 
O componente de hora e o designador AM/PM no <paramref name="input" /> não concordam.</exception>
        <block subset="none" type="usage"><para>No [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], o <see cref="Overload:System.DateTimeOffset.ParseExact" /> método lança um <see cref="T:System.FormatException" /> se a cadeia de caracteres a ser analisada contém um componente de hora e um designador AM/PM que não estão no contrato. No [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] e versões anteriores, o designador AM/PM é ignorado.</para></block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora padrão</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora personalizado</related>
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Second : int" Usage="System.DateTimeOffset.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o componente de segundo da hora do relógio representado pelo objeto <see cref="T:System.DateTimeOffset" /> atual.</summary>
        <value>O componente de segundo o <see cref="T:System.DateTimeOffset" /> objeto, expressado como um valor inteiro entre 0 e 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset.Second%2A> propriedade não é afetada pelo valor da <xref:System.DateTimeOffset.Offset%2A> propriedade.  
  
 Você também pode criar uma representação de cadeia de caracteres de um <xref:System.DateTimeOffset> segundo componente do objeto chamando o <xref:System.DateTimeOffset.ToString%2A> método com o "s", ou especificadores de formato personalizado "ss".  
  
   
  
## Examples  
 O exemplo a seguir exibe o componente de segundos de um <xref:System.DateTimeOffset> objeto de três maneiras diferentes:  
  
-   Recuperando o valor da <xref:System.DateTimeOffset.Second%2A> propriedade.  
  
-   Chamando o <xref:System.DateTimeOffset.ToString%28System.String%29> método com o especificador de formato "s".  
  
-   Chamando o <xref:System.DateTimeOffset.ToString%28System.String%29> especificador de formato de método com "ss".  
  
 [!code-csharp[System.DateTimeOffset.Properties#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#14)]
 [!code-vb[System.DateTimeOffset.Properties#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Subtrai um tempo ou duração especificada do objeto <see cref="T:System.DateTimeOffset" /> atual.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : DateTimeOffset -&gt; TimeSpan" Usage="dateTimeOffset.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value">Um objeto que representa o valor a ser subtraído.</param>
        <summary>Subtrai um valor <see cref="T:System.DateTimeOffset" /> que representa uma data e hora específica do objeto <see cref="T:System.DateTimeOffset" /> atual.</summary>
        <returns>Um objeto que especifica o intervalo entre os dois objetos <see cref="T:System.DateTimeOffset" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método converte ambos <xref:System.DateTimeOffset> objetos para o tempo Universal Coordenado (UTC) antes de calcular o intervalo de tempo que separa-los. Isso remove qualquer efeito que deslocamentos diferentes do UTC podem ter na comparação.  
  
> [!NOTE]
>  Para linguagens que dão suporte a operadores personalizados, você também pode executar a subtração de data e hora usando o operador de subtração. Para obter detalhes, consulte o <xref:System.DateTimeOffset.op_Subtraction%2A> método.  
  
 Porque nenhuma das atual <xref:System.DateTimeOffset> objeto nem a `value` parâmetro representar a data e hora em um fuso horário específico, o <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29> método não considera as regras de ajuste de um determinado fuso horário quando ele subtrai datas e horas.  
  
   
  
## Examples  
 O exemplo a seguir ilustra a subtração que usa o <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29> método.  
  
 [!code-csharp[System.DateTimeOffset.Methods#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#13)]
 [!code-vb[System.DateTimeOffset.Methods#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Executando operações aritméticas com datas e horas</related>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTimeOffset Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset Subtract(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">O intervalo de tempo a ser subtraído.</param>
        <summary>Subtrai um intervalo de tempo especificado do objeto <see cref="T:System.DateTimeOffset" /> atual.</summary>
        <returns>Um objeto igual à data e hora representadas pelo objeto <see cref="T:System.DateTimeOffset" /> atual, menos o intervalo de tempo representado por <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode usar o <xref:System.DateTimeOffset.Subtract%2A> método a ser subtraído de mais de um tipo de intervalo de tempo (dias, horas, minutos, segundos ou milissegundos) em uma única operação. Seu comportamento é idêntico de <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.TimeSpan%29> método, que define o operador de subtração. O <xref:System.DateTimeOffset> estrutura também dá suporte a métodos de adição especializada (tal como <xref:System.DateTimeOffset.AddDays%2A>, <xref:System.DateTimeOffset.AddHours%2A>, e <xref:System.DateTimeOffset.AddMinutes%2A>) que permitem que você execute subtração, atribuindo um valor negativo para o parâmetro do método.  
  
> [!NOTE]
>  Este método retorna um novo objeto <xref:System.DateTimeOffset>. Ele não modifica o valor do objeto atual, adicionando `timeSpan` à sua data e hora.  
  
 O <xref:System.DateTimeOffset.Subtract%2A> método não afeta o valor de <xref:System.DateTimeOffset> do objeto <xref:System.DateTimeOffset.Offset%2A> propriedade. Retornado <xref:System.DateTimeOffset> objeto tem o mesmo deslocamento que o objeto original.  
  
 Porque o atual <xref:System.DateTimeOffset> objeto não representa a data e hora em um fuso horário específico, o <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29> método não considera as regras de ajuste de um determinado fuso horário quando ele executa a subtração.  
  
   
  
## Examples  
 O exemplo a seguir ilustra a subtração que usa o <xref:System.DateTimeOffset.Subtract%2A> método.  
  
 [!code-csharp[System.DateTimeOffset.Methods#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#14)]
 [!code-vb[System.DateTimeOffset.Methods#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O valor <see cref="T:System.DateTimeOffset" /> resultante é menor que <see cref="F:System.DateTimeOffset.MinValue" />.  
  
- ou - 
O valor <see cref="T:System.DateTimeOffset" /> resultante é maior que <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Executando operações aritméticas com datas e horas</related>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">O objeto a ser comparado com o objeto <see cref="T:System.DateTimeOffset" /> atual.</param>
        <summary>Compara o valor do objeto <see cref="T:System.DateTimeOffset" /> atual com outro objeto do mesmo tipo.</summary>
        <returns>Um inteiro com sinal de 32 bits que indica se o objeto <see cref="T:System.DateTimeOffset" /> atual é menor, igual ou maior que <paramref name="obj" />. Os valores retornados do método são interpretados da seguinte maneira: 
 <list type="table"><listheader><term> Valor de Retorno 
 </term><description> Descrição 
 </description></listheader><item><term> Menor que zero 
 </term><description> O objeto <see cref="T:System.DateTimeOffset" /> atual é menor do que (anterior a) <paramref name="obj" />.  
  
 </description></item><item><term> Zero 
 </term><description> O objeto <see cref="T:System.DateTimeOffset" /> atual é igual a (o mesmo ponto no tempo que) <paramref name="obj" />.  
  
 </description></item><item><term> Maior que zero 
 </term><description> O objeto <see cref="T:System.DateTimeOffset" /> atual é maior do que (posterior a) <paramref name="obj" />.  
  
 </description></item></list></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">O objeto que iniciou o retorno de chamada. A funcionalidade desse parâmetro não está implementada no momento.</param>
        <summary>Executado quando a desserialização de um objeto foi concluída.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">O objeto a ser preenchido com dados.</param>
        <param name="context">O destino dessa serialização (veja <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Popula um objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> com os dados necessários para serializar o objeto <see cref="T:System.DateTimeOffset" /> atual.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="info" /> é <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requer confiança total para o chamador imediato. Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.DateTimeOffset.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o número de tiques que representa a data e hora do objeto <see cref="T:System.DateTimeOffset" /> atual na hora do relógio.</summary>
        <value>O número de tiques na hora do relógio do objeto <see cref="T:System.DateTimeOffset" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset.Ticks%2A> propriedade não é afetada pelo valor da <xref:System.DateTimeOffset.Offset%2A> propriedade.  
  
 O valor de <xref:System.DateTimeOffset.Ticks%2A> propriedade representa o número de intervalos de 100 nanossegundos decorridos desde a meia-noite de 12:00:00 em 1º de janeiro, 0001 (o valor de <xref:System.DateTimeOffset.MinValue>). Ele não inclui tiques que seriam adicionados por segundos intercalares. Um nanossegundo é aquele bilionésimo de um segundo; Há dez milhões de tiques em um segundo. O valor de <xref:System.DateTimeOffset.Ticks%2A> varia de propriedade de `DateTimeOffset.MinValue.Ticks` para `DateTimeOffset.MaxValue.Ticks`.  
  
 Você pode atribuir o número de tiques a um <xref:System.DateTimeOffset> objeto usando o <xref:System.DateTimeOffset.%23ctor%28System.Int64%2CSystem.TimeSpan%29> sobrecarga de construtor.  
  
   
  
## Examples  
 O exemplo a seguir inicializa um <xref:System.DateTimeOffset> objeto por aproximar o número de tiques na data de 1º de julho de 2008 1:23:07. Ele exibe a data e o número de tiques representado por essa data para o console.  
  
 [!code-csharp[System.DateTimeOffset.Properties#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#15)]
 [!code-vb[System.DateTimeOffset.Properties#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcDateTime" />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : TimeSpan" Usage="System.DateTimeOffset.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a hora do dia para o objeto <see cref="T:System.DateTimeOffset" /> atual.</summary>
        <value>O intervalo da data atual decorrido desde a meia-noite.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset.TimeOfDay%2A> propriedade não é afetada pelo valor da <xref:System.DateTimeOffset.Offset%2A> propriedade.  
  
 O <xref:System.DateTimeOffset.TimeOfDay%2A> propriedade retorna o componente de tempo de um <xref:System.DateTimeOffset> objeto na forma de um <xref:System.TimeSpan> objeto. É equivalente ao <xref:System.DateTime.TimeOfDay%2A?displayProperty=nameWithType> propriedade.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTimeOffset.TimeOfDay%2A> propriedade extrair a hora e exibi-lo no console.  
  
 [!code-csharp[System.DateTimeOffset.Properties#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#16)]
 [!code-vb[System.DateTimeOffset.Properties#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberSignature Language="F#" Value="member this.ToFileTime : unit -&gt; int64" Usage="dateTimeOffset.ToFileTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte o valor do objeto <see cref="T:System.DateTimeOffset" /> atual para uma hora de arquivo do Windows.</summary>
        <returns>O valor do objeto <see cref="T:System.DateTimeOffset" /> atual expresso como uma hora de arquivo do Windows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma hora de arquivo do Windows é um valor de 64 bits que representa o número de intervalos de 100 nanossegundos desde a meia-noite de 12h00, 1º de janeiro de 1601 A.D. (C.E.) Tempo Universal Coordenado (UTC). O Windows usa uma hora de arquivo a ser registrada quando um aplicativo cria, acessa ou grava em um arquivo.  
  
 O <xref:System.DateTimeOffset.ToFileTime%2A> método converte atual <xref:System.DateTimeOffset> data e hora em UTC antes de executar a conversão do objeto. Em outras palavras, chamar o <xref:System.DateTimeOffset.ToFileTime%2A> método é equivalente à chamada de método a seguir:  
  
```csharp
this.ToUtcDateTime().ToFileTime();  
```  
  
```vb  
Me.ToUtcDateTime().ToFileTime()  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">A hora do arquivo resultante representaria uma data e hora antes da meia-noite de 1º de janeiro de 1601, C.E. Tempo Universal Coordenado (UTC).</exception>
        <altmember cref="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToLocalTime();" />
      <MemberSignature Language="F#" Value="member this.ToLocalTime : unit -&gt; DateTimeOffset" Usage="dateTimeOffset.ToLocalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte o objeto <see cref="T:System.DateTimeOffset" /> atual em um objeto <see cref="T:System.DateTimeOffset" /> que representa a hora local.</summary>
        <returns>Um objeto que representa a data e a hora do objeto <see cref="T:System.DateTimeOffset" /> atual convertido em hora local.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na execução da conversão para a hora local, o método primeiro converte atual <xref:System.DateTimeOffset> data e a hora em tempo Universal Coordenado (UTC), subtraindo o deslocamento da hora do objeto. Ele, em seguida, converte a data e hora UTC em hora local, adicionando o deslocamento de fuso horário local. Ao fazer isso, ele leva em conta quaisquer regras de ajuste de fuso horário local.  
  
 O valor do atual <xref:System.DateTimeOffset> objeto e o valor da <xref:System.DateTimeOffset> objeto retornado pela chamada de método representam o mesmo ponto no tempo. Ou seja, se ambos forem passadas para o <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> método, o método retornará `true`.  
  
 Se a conversão faz com que um horário que está fora do intervalo da <xref:System.DateTimeOffset> tipo, o <xref:System.DateTimeOffset.ToLocalTime%2A> método retorna um <xref:System.DateTimeOffset> objeto que tem a data e hora definida como <xref:System.DateTimeOffset.MaxValue> ou <xref:System.DateTimeOffset.MinValue> e a diferença definida como o deslocamento de fuso horário local.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTimeOffset.ToLocalTime%2A> método para converter um <xref:System.DateTimeOffset> valor para a hora local no fuso horário padrão do Pacífico. Ele também ilustra o suporte para regras de ajuste do fuso horário local do método.  
  
 [!code-csharp[System.DateTimeOffset.Methods#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#15)]
 [!code-vb[System.DateTimeOffset.Methods#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToOffset">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToOffset (TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToOffset(valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOffset (offset As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToOffset(TimeSpan offset);" />
      <MemberSignature Language="F#" Value="member this.ToOffset : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.ToOffset offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="offset">O deslocamento para se converter o valor <see cref="T:System.DateTimeOffset" />.</param>
        <summary>Converte o valor do objeto <see cref="T:System.DateTimeOffset" /> atual na data e hora especificada por um valor de deslocamento.</summary>
        <returns>Um objeto igual ao objeto <see cref="T:System.DateTimeOffset" /> original (ou seja, seus métodos <see cref="M:System.DateTimeOffset.ToUniversalTime" /> retornam pontos idênticos no tempo), mas cuja propriedade <see cref="P:System.DateTimeOffset.Offset" /> está definida como <paramref name="offset" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset.ToOffset%2A> método é uma alternativa a chamar o <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> método. Ele pode ser útil para realizar conversões simples de um fuso horário para outro quando deslocamentos as zonas de tempo do tempo Universal Coordenado (UTC) são conhecidos. No entanto, porque nenhuma das original <xref:System.DateTimeOffset> objeto nem o novo <xref:System.DateTimeOffset> objeto retornado pela chamada de método inequivocamente relacionados a um determinado fuso horário, o método não se aplica a quaisquer regras de ajuste de fuso horário na conversão.  
  
   
  
## Examples  
 O exemplo a seguir ilustra como usar o <xref:System.DateTimeOffset.ToOffset%2A> método para converter um <xref:System.DateTimeOffset> do objeto para um <xref:System.DateTimeOffset> objeto com um deslocamento diferente.  
  
 [!code-csharp[System.DateTimeOffset.ToOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/cs/ToOffset.cs#1)]
 [!code-vb[System.DateTimeOffset.ToOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/vb/ToOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O objeto <see cref="T:System.DateTimeOffset" /> resultante tem um valor <see cref="P:System.DateTimeOffset.DateTime" /> anterior a <see cref="F:System.DateTimeOffset.MinValue" />.  
  
- ou - 
O objeto <see cref="T:System.DateTimeOffset" /> resultante tem um valor <see cref="P:System.DateTimeOffset.DateTime" /> posterior a <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> é menor que -14 horas.  
  
- ou - 
 <paramref name="offset" /> é maior que 14 horas.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converte o valor do atual objeto <see cref="T:System.DateTimeOffset" /> na representação de cadeia de caracteres equivalente.</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dateTimeOffset.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte o valor do atual objeto <see cref="T:System.DateTimeOffset" /> na representação de cadeia de caracteres equivalente.</summary>
        <returns>Uma representação de cadeia de caracteres de um objeto <see cref="T:System.DateTimeOffset" /> que inclui o deslocamento acrescentado no final da cadeia de caracteres.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor retornado desse método é idêntico do <xref:System.DateTime.ToString?displayProperty=nameWithType> método, exceto que ele inclui um espaço seguido pelo deslocamento acrescentado ao final da cadeia de caracteres. Em outras palavras, ele formata a saída usando o padrão de data abreviada, o padrão de muito tempo e o `zzz` cadeia de caracteres de formato personalizado, com cada elemento separado do elemento anterior por um espaço. Por exemplo, se <xref:System.DateTime.ToString?displayProperty=nameWithType> retorna um valor de 12/1/2008:15:50 às 18H, <xref:System.DateTimeOffset.ToString> retorna um valor de 12/1/2008 6:15:50 PM -08:00 para uma hora que é de oito horas atrás de tempo Universal Coordenado (UTC).  
  
 Este método usa informações de formatação derivadas da cultura atual. Para obter mais informações, consulte <xref:System.Globalization.CultureInfo.CurrentCulture%2A>. Outras sobrecargas do <xref:System.DateTimeOffset.ToString%2A> método permitem que você especifique a cultura cuja formatação para usar e para definir o padrão de saída do <xref:System.DateTimeOffset> valor.  
  
   
  
## Examples  
 O exemplo a seguir ilustra chamadas para o <xref:System.DateTimeOffset.ToString> método e exibe seu resultado em um sistema cuja cultura atual é en-us.  
  
 [!code-csharp[System.DateTimeOffset.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#1)]
 [!code-vb[System.DateTimeOffset.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">A data e hora está fora do intervalo de datas suportadas pelo calendário usado pela cultura atual.</exception>
        <block subset="none" type="usage"><para>O <see cref="M:System.DateTimeOffset.ToString" /> método retorna a representação de cadeia de caracteres de data e hora no calendário usado pela cultura atual. Caso o valor da instância <see cref="T:System.DateTimeOffset" /> atual seja anterior a <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> ou posterior a <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, o método lança um <see cref="T:System.ArgumentOutOfRangeException" />. O exemplo a seguir fornece uma ilustração. Ele tenta formatar uma data que está fora do intervalo da <see cref="T:System.Globalization.HijriCalendar" /> classe quando a cultura atual é árabe (Síria).  
  
[!code-csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception2.cs#2)] [!code-vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception2.vb#2)]</para></block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="dateTimeOffset.ToString formatProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider">Um objeto que fornece informações de formatação específicas de cultura.</param>
        <summary>Converte o valor do objeto <see cref="T:System.DateTimeOffset" /> atual em sua representação de cadeia de caracteres equivalente usando as informações de formatação específicas da cultura especificadas.</summary>
        <returns>Uma representação de cadeia de caracteres do valor do objeto <see cref="T:System.DateTimeOffset" /> atual, conforme especificado por <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor retornado desse método é idêntico de seu equivalente sobrecarga da <xref:System.DateTime.ToString%2A?displayProperty=nameWithType> método, exceto que ele inclui um espaço seguido pelo deslocamento acrescentado ao final da cadeia de caracteres. Em outras palavras, ele formata a saída usando o padrão de data abreviada, o padrão de muito tempo e o `zzz` cadeia de caracteres de formato personalizado, com cada elemento separado do elemento anterior por um espaço.  
  
 O formato desses três elementos é definido pelo `formatProvider` parâmetro. O parâmetro `formatProvider` pode ser qualquer um dos seguintes:  
  
-   Um <xref:System.Globalization.CultureInfo> objeto que representa a cultura cujas convenções de formatação são aplicadas a cadeia de caracteres retornada. O objeto <xref:System.Globalization.DateTimeFormatInfo> retornado pela propriedade <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> define a formatação da cadeia de caracteres retornada.  
  
-   Um objeto <xref:System.Globalization.DateTimeFormatInfo> que define o formato dos dados de data e hora.  
  
 Se `formatProvider` está `null`, o <xref:System.Globalization.DateTimeFormatInfo> objeto associado com a cultura atual é usado (consulte <xref:System.Globalization.CultureInfo.CurrentCulture%2A>).  
  
   
  
## Examples  
 O exemplo a seguir exibe uma <xref:System.DateTimeOffset> do objeto usando <xref:System.Globalization.CultureInfo> objetos que representam a cultura invariável, bem como quatro outras culturas.  
  
 [!code-csharp[System.DateTimeOffset.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#2)]
 [!code-vb[System.DateTimeOffset.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">A data e hora estão fora do intervalo de datas com suporte no calendário usado por <paramref name="formatProvider" />.</exception>
        <block subset="none" type="usage"><para>O <see cref="M:System.DateTimeOffset.ToString(System.IFormatProvider)" /> método retorna a representação de cadeia de caracteres de data e hora no calendário usado pela cultura representada pelo <paramref name="formatProvider" /> parâmetro. O calendário é definido pela propriedade <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />. Caso o valor da instância <see cref="T:System.DateTimeOffset" /> atual seja anterior a <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> ou posterior a <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, o método lança um <see cref="T:System.ArgumentOutOfRangeException" />. O exemplo a seguir fornece uma ilustração. Ele tenta formatar uma data que está fora do intervalo da <see cref="T:System.Globalization.JapaneseCalendar" /> classe.  
  
[!code-csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception1.cs#1)] [!code-vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception1.vb#1)]</para></block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="dateTimeOffset.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Uma cadeia de caracteres de formato.</param>
        <summary>Converte o valor do objeto <see cref="T:System.DateTimeOffset" /> atual em sua representação de cadeia de caracteres equivalente usando o formato especificado.</summary>
        <returns>Uma representação de cadeia de caracteres do valor do objeto <see cref="T:System.DateTimeOffset" /> atual, conforme especificado por <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `format` o parâmetro deve conter um caractere de especificador de formato único (consulte [padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) ou um padrão de formato personalizado (consulte [personalizado de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/custom-date-and-time-format-strings.md) ) que define o formato de cadeia de caracteres retornada. Se `format` é uma cadeia de caracteres nula ou vazia (""), o <xref:System.DateTimeOffset> valor é de saída usando o formato padrão.  
  
 A tabela a seguir mostra a operação exata de determinados especificadores de formato quando usado com <xref:System.DateTimeOffset>, que difere de seu comportamento quando usado com <xref:System.DateTime>.  
  
|Especificador de formato existente|Novo comportamento|  
|-------------------------------|------------------|  
|"K"|Projetado para ida e volta uma data e hora. Com <xref:System.DateTimeOffset>, é mapeado para "zzz" (o deslocamento é sempre exibido com as horas e minutos). Observe que o "K" é um especificador de formato personalizado; ela não pode aparecer como o único caractere em `format`.|  
|"U"|Sem suporte.|  
|"r"|Converte o <xref:System.DateTimeOffset> objeto ao tempo Universal Coordenado (UTC) e gera-o usando a cadeia de caracteres de formato personalizado `ddd, dd MMM yyyy HH:mm:ss GMT`.|  
|"u"|Converte o <xref:System.DateTimeOffset> objeto para UTC e gera-o usando o formato `yyyy-MM-dd HH:mm:ssZ`.|  
  
 O padrão de data restante e especificadores de formato de hora se comportam da mesma maneira com a <xref:System.DateTimeOffset.ToString%28System.String%29> método que funcionam com o <xref:System.DateTime.ToString%2A> método.  
  
 Este método usa informações de formatação derivadas da cultura atual. Para obter mais informações, consulte <xref:System.Globalization.CultureInfo.CurrentCulture%2A>.  
  
   
  
## Examples  
 O exemplo a seguir exibe um <xref:System.DateTimeOffset> objeto no console usando cada um dos especificadores de formato de hora e data padrão. A saída é formatada usando o en-us de cultura.  
  
 [!code-csharp[System.DateTimeOffset.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#3)]
 [!code-vb[System.DateTimeOffset.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">O tamanho de <paramref name="format" /> é um, e ele não é um dos caracteres especificadores de formato padrão definidos para <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
- ou - 
 <paramref name="format" /> não contém um padrão de formato personalizado válido.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">A data e hora está fora do intervalo de datas suportadas pelo calendário usado pela cultura atual.</exception>
        <block subset="none" type="usage"><para>O <see cref="M:System.DateTimeOffset.ToString(System.String)" /> método retorna a representação de cadeia de caracteres de data e hora no calendário usado pela cultura atual. Caso o valor da instância <see cref="T:System.DateTimeOffset" /> atual seja anterior a <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> ou posterior a <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, o método lança um <see cref="T:System.ArgumentOutOfRangeException" />. O exemplo a seguir fornece uma ilustração. Ele tenta formatar uma data que está fora do intervalo da <see cref="T:System.Globalization.HebrewCalendar" /> classe quando a cultura atual é hebraico (Israel).  
  
[!code-csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception3.cs#3)] [!code-vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception3.vb#3)]</para></block>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora padrão</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora personalizado</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="dateTimeOffset.ToString (format, formatProvider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Uma cadeia de caracteres de formato.</param>
        <param name="formatProvider">Um objeto que fornece informações de formatação específicas de cultura.</param>
        <summary>Converte o valor do atual objeto <see cref="T:System.DateTimeOffset" /> na representação de cadeia de caracteres equivalente usando o formato especificado e as informações de formato específicas da cultura.</summary>
        <returns>Uma representação de cadeia de caracteres do valor do atual objeto <see cref="T:System.DateTimeOffset" />, conforme especificado por <paramref name="format" /> e <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `format` o parâmetro deve conter um caractere de especificador de formato único (consulte [padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) ou um padrão de formato personalizado (consulte [personalizado de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/custom-date-and-time-format-strings.md) ). Se `format` é uma cadeia de caracteres nula ou vazia (""), o <xref:System.DateTimeOffset> objeto é de saída usando o formato padrão.  
  
 A tabela a seguir mostra a operação exata de determinados especificadores de formato quando usado com <xref:System.DateTimeOffset>, que difere de seu comportamento quando usado com <xref:System.DateTime>.  
  
|Especificador de formato existente|Novo comportamento|  
|-------------------------------|------------------|  
|"K"|Projetado para ida e volta uma data e hora. Com <xref:System.DateTimeOffset>, é mapeado para "zzz" (o deslocamento é sempre exibido com as horas e minutos). Observe que o "K" é um especificador de formato personalizado; ela não pode aparecer como o único caractere em `format`.|  
|"U"|Sem suporte.|  
|"r"|Converte o <xref:System.DateTimeOffset> objeto ao tempo Universal Coordenado (UTC) e gera-o usando a cadeia de caracteres de formato personalizado `ddd, dd MMM yyyy HH:mm:ss GMT`.|  
|"u"|Converte o <xref:System.DateTimeOffset> valor para UTC e gera-o usando o formato `yyyy-MM-dd HH:mm:ssZ`.|  
  
 O padrão de data restante e especificadores de formato de hora se comportam da mesma maneira com a <xref:System.DateTimeOffset.ToString%28System.String%29> método que funcionam com o <xref:System.DateTime.ToString%2A> método.  
  
 O padrão que corresponde ao especificadores de formato padrão, bem como os símbolos e os nomes dos componentes de data e hora, é definido pelo `formatProvider` parâmetro. O parâmetro `formatProvider` pode ser qualquer um dos seguintes:  
  
-   Um <xref:System.Globalization.CultureInfo> objeto que representa a cultura cuja formatação será usada no `input`. O <xref:System.Globalization.DateTimeFormatInfo> objeto retornado pela <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriedade define a formatação usada `input`.  
  
-   Um objeto <xref:System.Globalization.DateTimeFormatInfo> que define o formato dos dados de data e hora.  
  
 Se `formatProvider` está `null`, o <xref:System.Globalization.DateTimeFormatInfo> objeto associado com a cultura atual é usado (consulte <xref:System.Globalization.CultureInfo.CurrentCulture%2A>).  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.DateTimeOffset.ToString%28System.String%2CSystem.IFormatProvider%29> método para exibir um <xref:System.DateTimeOffset> usando uma cadeia de caracteres de formato personalizado para várias culturas diferentes do objeto.  
  
 [!code-csharp[System.DateTimeOffset.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#4)]
 [!code-vb[System.DateTimeOffset.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">O tamanho de <paramref name="format" /> é um, e ele não é um dos caracteres especificadores de formato padrão definidos para <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
- ou - 
 <paramref name="format" /> não contém um padrão de formato personalizado válido.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">A data e hora estão fora do intervalo de datas com suporte no calendário usado por <paramref name="formatProvider" />.</exception>
        <block subset="none" type="usage"><para>O <see cref="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" /> método retorna a representação de cadeia de caracteres de data e hora no calendário usado pelo <paramref name="formatProvider" /> parâmetro. O calendário é definido pela propriedade <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />. Caso o valor da instância <see cref="T:System.DateTimeOffset" /> atual seja anterior a <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> ou posterior a <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, o método lança um <see cref="T:System.ArgumentOutOfRangeException" />. O exemplo a seguir fornece uma ilustração. Ele tenta formatar uma data que está fora do intervalo da <see cref="T:System.Globalization.UmAlQuraCalendar" /> classe.  
  
[!code-csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception4.cs#4)] [!code-vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception4.vb#4)]</para></block>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora padrão</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadeias de caracteres de formato de data e hora personalizado</related>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">Exemplo: .NET Framework 4 Formatting Utility&amp;lt;2}&amp;lt;1}</related>
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToUniversalTime();" />
      <MemberSignature Language="F#" Value="member this.ToUniversalTime : unit -&gt; DateTimeOffset" Usage="dateTimeOffset.ToUniversalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte o objeto <see cref="T:System.DateTimeOffset" /> atual em um valor <see cref="T:System.DateTimeOffset" /> que representa o UTC (Tempo Universal Coordenado).</summary>
        <returns>Um objeto que representa a data e hora do objeto <see cref="T:System.DateTimeOffset" /> atual convertido em UTC (Tempo Universal Coordenado).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método retorna um <xref:System.DateTimeOffset> do objeto cuja <xref:System.DateTimeOffset.Offset%2A> estiver definida como zero.  
  
 O valor do atual <xref:System.DateTimeOffset> objeto e o valor da <xref:System.DateTimeOffset> objeto retornado pela chamada de método representam o mesmo ponto no tempo. Ou seja, se ambos forem passadas para o <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> método, o método retornará `true`.  
  
   
  
## Examples  
 A exemplo a seguir chama o <xref:System.DateTimeOffset.ToUniversalTime%2A> método para converter uma hora local e várias outras horas para o tempo Universal Coordenado (UTC).  
  
 [!code-csharp[System.DateTimeOffset.Methods#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#16)]
 [!code-vb[System.DateTimeOffset.Methods#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToLocalTime" />
        <altmember cref="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeMilliseconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeMilliseconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUnixTimeMilliseconds () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToUnixTimeMilliseconds();" />
      <MemberSignature Language="F#" Value="member this.ToUnixTimeMilliseconds : unit -&gt; int64" Usage="dateTimeOffset.ToUnixTimeMilliseconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna o número de milissegundos decorridos desde 1970-01-01T00:00:00.000Z.</summary>
        <returns>O número de milissegundos decorridos desde 1970-01-01T00:00:00.000Z.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Horário do UNIX representa o número de segundos decorridos desde 1970-01-01T00:00:00Z (1 de janeiro de 1970, às 12:00 AM UTC). Ele não considera segundos intercalares. Esse método retorna o número de milissegundos no horário do Unix.  
  
 Esse método primeiro converte a instância atual em UTC antes de retornar o número de milissegundos no horário Unix. Para obter valores de data e hora antes de 1970-01-01T00:00:00Z, este método retorna um valor negativo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeSeconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeSeconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUnixTimeSeconds () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToUnixTimeSeconds();" />
      <MemberSignature Language="F#" Value="member this.ToUnixTimeSeconds : unit -&gt; int64" Usage="dateTimeOffset.ToUnixTimeSeconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna o número de segundos decorridos desde 1970-01-01T00:00:00Z.</summary>
        <returns>O número de segundos decorridos desde 1970-01-01T00:00:00Z.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Horário do UNIX representa o número de segundos decorridos desde 1970-01-01T00:00:00Z (1 de janeiro de 1970, às 12:00 AM UTC). Ele não considera segundos intercalares.  
  
 Esse método primeiro converte a instância atual em UTC antes de retornar o horário do Unix. Para obter valores de data e hora antes de 1970-01-01T00:00:00Z, este método retorna um valor negativo.  
  
   
  
## Examples  
 A exemplo a seguir chama o <xref:System.DateTimeOffset.ToUnixTimeSeconds%2A> método para retornar a hora do Unix de valores que sejam iguais, logo antes e logo depois de 1970-01-01T00:00:00Z.  
  
 [!code-csharp[System.DateTimeOffset.ToUnixTimeSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/cs/tounixtimeseconds1.cs#1)]
 [!code-vb[System.DateTimeOffset.ToUnixTimeSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/vb/tounixtimeseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider formatProvider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional formatProvider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="dateTimeOffset.TryFormat (destination, charsWritten, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converte uma representação de cadeia de caracteres especificada de uma data e hora ao seu equivalente <see cref="T:System.DateTimeOffset" />.</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Uma cadeia de caracteres que contém uma data e hora a ser convertida.</param>
        <param name="result">Quando é retornado, esse método contém o <see cref="T:System.DateTimeOffset" /> equivalente à data e hora de <paramref name="input" />, caso a conversão seja bem-sucedida ou <see cref="F:System.DateTimeOffset.MinValue" /> caso a conversão falhe. A conversão falhará se o parâmetro <paramref name="input" /> for <see langword="null" /> ou não contiver uma representação de cadeia de caracteres válida de uma data e hora. Este parâmetro é passado não inicializado.</param>
        <summary>Tenta converter a representação de cadeia de caracteres especificada de uma data e hora em seu <see cref="T:System.DateTimeOffset" /> equivalente e retorna um valor que indica se a conversão foi bem-sucedida.</summary>
        <returns><see langword="true" /> caso o parâmetro <paramref name="input" /> seja convertido com êxito; do contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa sobrecarga da <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29> método é como o <xref:System.DateTimeOffset.Parse%28System.String%29?displayProperty=nameWithType> método, exceto que ele não gerará uma exceção se a conversão falhar. Analisa uma cadeia de caracteres com três elementos que podem aparecer em qualquer ordem e são delimitadas por espaço em branco. Esses três elementos são mostrados na tabela a seguir.  
  
|Elemento|Exemplo|  
|-------------|-------------|  
|\<Data >|"2/10/2007"|  
|\<Time>|"1:02:03 PM"|  
|\<Offset>|"-7:30"|  
  
 Embora cada um desses elementos seja opcional, \<deslocamento > não pode aparecer sozinho. Ele deve ser fornecido com \<data > ou \<tempo >. Se \<data > está ausente, o padrão valor é o dia atual. Se \<data > está presente, mas o componente consiste em apenas dois dígitos de ano, ele é convertido em um ano no calendário atual da cultura atual, com base no valor da <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> propriedade. Se \<tempo > está ausente, o padrão é de valor 12:00:00 AM. Se \<deslocamento > está ausente, o padrão valor é o deslocamento de fuso horário local. Se \<deslocamento > estiver presente, ele pode representar um deslocamento positivo ou negativo do tempo Universal Coordenado (UTC). Em ambos os casos \<deslocamento > deve incluir um símbolo de sinal ou o método retorna `false`.  
  
 O `input` cadeia de caracteres é analisada usando as informações de formatação em um <xref:System.Globalization.DateTimeFormatInfo> objeto inicializado para a cultura atual. Para analisar uma cadeia de caracteres que contém a formatação designado não necessariamente corresponde da cultura atual, use o <xref:System.DateTimeOffset.TryParseExact%2A> método e fornecer um especificador de formato.  
  
   
  
## Examples  
 A exemplo a seguir chama o <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29> método analisar várias cadeias de caracteres com vários formatos de data e hora.  
  
 [!code-csharp[System.DateTimeOffset.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">Exemplo: .NET Framework 4 Formatting Utility&amp;lt;2}&amp;lt;1}</related>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Uma cadeia de caracteres que contém uma data e hora a ser convertida.</param>
        <param name="formatProvider">Um objeto que fornece informações de formatação específicas de cultura sobre <paramref name="input" />.</param>
        <param name="styles">Um combinação bit a bit de valores de enumeração que indica o formato permitido de <paramref name="input" />.</param>
        <param name="result">Quando é retornado, esse método contém o valor <see cref="T:System.DateTimeOffset" /> equivalente à data e hora de <paramref name="input" />, caso a conversão seja bem-sucedida ou <see cref="F:System.DateTimeOffset.MinValue" /> caso a conversão falhe. A conversão falhará se o parâmetro <paramref name="input" /> for <see langword="null" /> ou não contiver uma representação de cadeia de caracteres válida de uma data e hora. Este parâmetro é passado não inicializado.</param>
        <summary>Tenta converter a representação de cadeia de caracteres especificada de uma data e hora em seu <see cref="T:System.DateTimeOffset" /> equivalente e retorna um valor que indica se a conversão foi bem-sucedida.</summary>
        <returns><see langword="true" /> caso o parâmetro <paramref name="input" /> seja convertido com êxito; do contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa sobrecarga da <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> método é como o <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método, exceto que ele não gerará uma exceção se a conversão falhar. O método analisa uma cadeia de caracteres com três elementos que podem aparecer em qualquer ordem e são delimitadas por espaço em branco. Esses três elementos são mostrados na tabela a seguir.  
  
|Elemento|Exemplo|  
|-------------|-------------|  
|\<Data >|"2/10/2007"|  
|\<Time>|"1:02:03 PM"|  
|\<Offset>|"-7:30"|  
  
 Embora cada um desses elementos seja opcional, \<deslocamento > não pode aparecer sozinho. Ele deve ser fornecido com \<data > ou \<tempo >. Se \<data > está ausente, o padrão valor é o dia atual. Se \<data > está presente, mas o componente consiste em apenas dois dígitos de ano, ele é convertido em um ano em de `provider` calendário atual do parâmetro com base no valor da <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> propriedade. Se \<tempo > está ausente, o padrão é de valor 12:00:00 AM. Se \<deslocamento > está ausente, o padrão valor é o deslocamento de fuso horário local, ou <xref:System.TimeSpan.Zero> se o <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> ou <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> valor é especificado em `styles`. Se \<deslocamento > estiver presente, ele pode representar um deslocamento positivo ou negativo do tempo Universal Coordenado (UTC). Em ambos os casos \<deslocamento > deve incluir um símbolo de sinal ou o método retorna `false`.  
  
 O `input` cadeia de caracteres é analisada usando as informações de formatação específicas da cultura em um <xref:System.Globalization.DateTimeFormatInfo> objeto fornecido pelo `formatProvider` parâmetro. O parâmetro `formatProvider` pode ser qualquer um dos seguintes:  
  
-   Um <xref:System.Globalization.CultureInfo> objeto que representa a cultura cuja formatação será usada no `input`. O <xref:System.Globalization.DateTimeFormatInfo> objeto retornado pela <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriedade define o formato que é usado em `input`.  
  
-   Um objeto <xref:System.Globalization.DateTimeFormatInfo> que define o formato dos dados de data e hora.  
  
 Além disso, cada elemento pode ser delimitado por espaço em branco à esquerda ou direita e o \<data > e \<tempo > componentes podem incluir espaços em branco interno (como 6:   00:00). Somente o \<deslocamento > componente não pode incluir espaços em branco interno.  
  
 Caso `provider` seja `null`, o objeto <xref:System.Globalization.CultureInfo> que corresponde à cultura atual é usado.  
  
 O sinal positivo ou negativo usado na \<deslocamento > deve ser um + ou -. Ele não é definido pelo <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> ou <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> propriedades da <xref:System.Globalization.NumberFormatInfo> objeto retornado pelo `formatprovider` do parâmetro <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade.  
  
 Os seguintes membros do <xref:System.Globalization.DateTimeStyles> enumeração são suportados:  
  
|Membro DateTimeStyles|Comentários|  
|---------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analisa a cadeia de caracteres representada pelo `input` e, se necessário, converte-o em UTC. É equivalente à análise de uma cadeia de caracteres e, em seguida, chamar o objeto retornado <xref:System.DateTimeOffset.ToUniversalTime> método.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Embora válido, esse valor é ignorado. Espaço em branco interno é permitido na \<data > e \<tempo > componentes.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Embora válido, esse valor é ignorado. Espaço em branco à esquerda é permitido na frente de cada componente na cadeia de caracteres analisada.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Embora válido, esse valor é ignorado. Espaço em branco à direita é permitido na frente de cada componente na cadeia de caracteres analisada.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Este é o comportamento padrão. Ele não pode ser substituído por meio do fornecimento mais restritiva <xref:System.Globalization.DateTimeStyles> valor de enumeração, como <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Indica que, se o `input` parâmetro não tem um \<deslocamento > elemento, o deslocamento do fuso horário local deve ser fornecido. Esse é o comportamento padrão da <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> método.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Indica que, se o `input` parâmetro não tem um \<deslocamento > elemento, o deslocamento do UTC (00:00) deve ser fornecido.|  
|<xref:System.Globalization.DateTimeStyles.None>|Embora seja válido, esse valor é ignorado e não tem nenhum efeito.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Porque o <xref:System.DateTimeOffset> a estrutura não inclui um `Kind` propriedade, esse valor não tem nenhum efeito.|  
  
 Somente o <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> valor não é suportado. Uma <xref:System.ArgumentException> será lançada se esse valor é incluído no `styles` parâmetro.  
  
   
  
## Examples  
 A exemplo a seguir chama o <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> método com uma variedade de <xref:System.Globalization.DateTimeStyles> valores analisar algumas cadeias de caracteres com vários formatos de data e hora.  
  
 [!code-csharp[System.DateTimeOffset.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> inclui um valor <see cref="T:System.Globalization.DateTimeStyles" /> indefinido.  
  
- ou - 
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> não é suportado.  
  
- ou - 
 <paramref name="styles" /> inclui valores <see cref="T:System.Globalization.DateTimeStyles" /> mutuamente exclusivos.</exception>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converte a representação da cadeia de caracteres especificada de uma data e hora no <see cref="T:System.DateTimeOffset" /> equivalente. O formato da representação da cadeia de caracteres deve corresponder exatamente a um formato especificado.</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Um intervalo de caracteres que contém a representação de uma data e hora a serem convertidas.</param>
        <param name="format">Um especificador de formato que define o formato obrigatório de <paramref name="input" />.</param>
        <param name="formatProvider">Um objeto que fornece informações de formatação específicas de cultura sobre <paramref name="input" />.</param>
        <param name="styles">Um combinação bit a bit de valores de enumeração que indica o formato permitido de <paramref name="input" />. Um valor típico a ser especificado é <see cref="F:System.Globalization.DateTimeStyles.None" /></param>
        <param name="result">Quando é retornado, esse método contém o <see cref="T:System.DateTimeOffset" /> equivalente à data e hora de <paramref name="input" />, caso a conversão seja bem-sucedida ou <see cref="F:System.DateTimeOffset.MinValue" /> caso a conversão falhe. A conversão falhará se o</param>
        <summary>Converte a representação de data e hora em um intervalo de caracteres em seu equivalente <see cref="System.DateTimeOffset" /> usando o formato especificado, as informações de formato específicas da cultura e o estilo. O formato de representação da cadeia de caracteres deve corresponder exatamente ao formato especificado.</summary>
        <returns><see langword="true" /> caso o parâmetro <paramref name="input" /> seja convertido com êxito; do contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Essa sobrecarga é como o <xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> método, exceto pelo fato desse método não lançará uma exceção se a conversão falhar. Ele analisa a representação de uma data e hora que deve corresponder exatamente ao padrão especificado pelo `format` parâmetro. Se `input` não corresponder a esse padrão, com algumas variações possíveis no espaço em branco definido pela `styles` parâmetro, a operação de análise falhar e o método retornará `false`.  
  
O `format` parâmetro é um intervalo de caracteres que contém um especificador de formato único padrão ou um ou mais especificadores de formato personalizado que definem o padrão necessário de `input`. Para obter detalhes sobre códigos de formatação válidos, consulte [padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md) e [Data personalizada e cadeias de caracteres de formato de hora](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Se `format` inclui o `z`, `zz`, ou `zzz` especificadores de formato personalizado para indicar que um deslocamento deve estar presente no `input`, que o deslocamento deve incluir um sinal negativo ou um sinal positivo. Se o sinal está ausente, a operação de análise falha e o método retornará `false`.  
  
Se `format` exige que `input` contêm uma data, mas não uma hora, resultante <xref:System.DateTimeOffset> objeto é atribuído a uma hora de meia-noite (0: 00:00). Se `format` exige que `input` contêm uma hora, mas não uma data, resultante <xref:System.DateTimeOffset> objeto é atribuído a data atual no sistema local. Se `format` não exige que `input` contêm um deslocamento, o deslocamento do resultante <xref:System.DateTimeOffset> objeto depende do valor da `styles` parâmetro. Caso `styles` inclua <xref:System.Globalization.DateTimeStyles.AssumeLocal>, o deslocamento do fuso horário local é atribuído ao objeto <xref:System.DateTimeOffset>. Caso `styles` inclua <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, o deslocamento de Tempo Universal Coordenado (UTC), ou +00:00, é atribuído ao objeto <xref:System.DateTimeOffset>. Caso nenhum valor seja especificado, o deslocamento do fuso horário local é usado.  
  
Os símbolos de data e hora específicos e as cadeias de caracteres usadas em `input` são definidos pelo parâmetro `formatProvider`. O mesmo é verdadeiro para o padrão de preciso dos `input` se `format` é uma cadeia de caracteres do especificador de formato padrão. O parâmetro `formatProvider` pode ser qualquer um dos seguintes:  
  
-   Um objeto <xref:System.Globalization.CultureInfo> que representa a cultura com base na qual `input` é interpretado. O <xref:System.Globalization.DateTimeFormatInfo> objeto retornado pela <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriedade define os símbolos e formatos padrão permitido em `input`.  
  
-   Um objeto <xref:System.Globalization.DateTimeFormatInfo> que define o formato dos dados de data e hora.  
  
 Caso `formatprovider` seja `null`, o objeto <xref:System.Globalization.CultureInfo> que corresponde à cultura atual é usado.  
  
 O `styles` parâmetro define se o espaço em branco é permitido na cadeia de entrada, indica como as cadeias de caracteres sem um componente de deslocamento explícita são analisadas e dá suporte à conversão de UTC como parte da operação de análise. Todos os membros da enumeração <xref:System.Globalization.DateTimeStyles> são suportados, exceto <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. A tabela a seguir lista o efeito de cada membro suportado.  
  
|Membro do `DateTimeStyles`|Comportamento|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analisa `input` e, caso necessário, converte-o em UTC. É equivalente à análise de uma representação de data e hora e, em seguida, chamar o <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> método de retornado <xref:System.DateTimeOffset> objeto.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Se `format` não exige que `input` contêm um valor de deslocamento, retornado <xref:System.DateTimeOffset> objeto receberá o deslocamento do fuso horário local. Este é o comportamento padrão.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Se `format` não exige que `input` contêm um valor de deslocamento, retornado <xref:System.DateTimeOffset> objeto receberá o deslocamento do UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Permite que `input` para incluir espaço em branco interno não especificado pelo formato. Espaço em branco extra pode aparecer entre os componentes de data e hora e em componentes individuais, que não seja o deslocamento e é ignorado ao analisar a cadeia de caracteres.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Permite `input` incluir espaços à esquerda não especificados por `format`. Eles são ignorados durante a análise da cadeia de caracteres.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Permite `input` incluir espaços não especificados à direita `format`. Eles são ignorados durante a análise da cadeia de caracteres.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Permite `input` para incluir espaços à esquerda, à direita e internos não especificados por `format`. Todos os caracteres de espaço em branco extra não especificados no `format` são ignorados ao analisar a cadeia de caracteres.|  
|<xref:System.Globalization.DateTimeStyles.None>|Indica que o espaço em branco adicional não é permitido em `input`. Espaço em branco devem aparecer exatamente conforme especificado no `format`. Este é o comportamento padrão.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Não tem nenhum efeito, porque o <xref:System.DateTimeOffset> a estrutura não inclui um `Kind` propriedade.|  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> inclui um valor <see cref="T:System.Globalization.DateTimeStyles" /> indefinido.  
- ou - Não há suporte para <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />.  
- ou - <paramref name="styles" /> inclui valores <see cref="T:System.Globalization.DateTimeStyles" /> mutuamente exclusivos.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks
 
Esse método analisa a representação de cadeia de caracteres de uma data que corresponde a qualquer um dos padrões atribuído para o `formats` matriz. Se `input` não corresponder a qualquer um desses padrões com qualquer variação definido pelo `styles` parâmetro, a operação de análise falhar e o método retornará `false`. Além de comparando `input` em várias cadeias de caracteres que contêm os especificadores de formato, essa sobrecarga se comporta de forma idêntica ao <xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> método.  
  
 O `formats` parâmetro é uma matriz de cadeia de caracteres cujos elementos contêm um especificador de formato único padrão ou um ou mais especificadores de formato personalizado que definem o padrão de possíveis de `input`. Para obter detalhes sobre códigos de formatação válidos, consulte [padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md) e [Data personalizada e cadeias de caracteres de formato de hora](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Se o elemento correspondente em `formats` inclui o `z`, `zz`, ou `zzz` especificadores de formato personalizado para indicar que um deslocamento deve estar presente no `input`, que o deslocamento deve incluir um sinal negativo ou um sinal positivo. Se o sinal está ausente, a operação de análise falha e o método retornará `false`.  
  
> [!IMPORTANT]
>  Usando o `formats` parâmetro dessa sobrecarga para especificar vários formatos pode ajudar a reduzir a experimentam de muitos usuários quando eles entram datas e horas de frustração. Em particular, a capacidade de definir vários padrões de entrada permite que um aplicativo lidar com representações de data e hora que podem incluir ou não têm os zeros à esquerda em meses, dias, horas, minutos e segundos. O exemplo fornece uma ilustração disto.  
  
 Se o elemento correspondente em `formats` exige que `input` contêm uma data, mas não uma hora, resultante <xref:System.DateTimeOffset> objeto é atribuído a uma hora de meia-noite (0: 00:00). Se o elemento correspondente em `formats` requer que a entrada contenha uma hora, mas não uma data, resultante <xref:System.DateTimeOffset> objeto é atribuído a data atual no sistema local. Se o elemento correspondente em `formats` não exige que `input` contêm um deslocamento, o deslocamento do resultante <xref:System.DateTimeOffset> objeto depende do valor da `styles` parâmetro. Caso `styles` inclua <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, o deslocamento do fuso horário local é atribuído ao objeto <xref:System.DateTimeOffset>. Caso `styles` inclua <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>, o deslocamento de Tempo Universal Coordenado (UTC), ou +00:00, é atribuído ao objeto <xref:System.DateTimeOffset>. Caso nenhum valor seja especificado, o deslocamento do fuso horário local é usado.  
  
 O data específica e os símbolos de tempo usados na `input` são definidos pelo `formatProvider` parâmetro. O mesmo é verdadeiro para o padrão de preciso dos `input` se o elemento correspondente da `formats` é uma cadeia de caracteres do especificador de formato padrão. O parâmetro `formatProvider` pode ser qualquer um dos seguintes:  
  
-   Um objeto <xref:System.Globalization.CultureInfo> que representa a cultura com base na qual `input` é interpretado. O <xref:System.Globalization.DateTimeFormatInfo> objeto retornado pela <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriedade define os símbolos e formatação no `input`.  
  
-   Um objeto <xref:System.Globalization.DateTimeFormatInfo> que define o formato dos dados de data e hora.  
  
 Caso `formatprovider` seja `null`, o objeto <xref:System.Globalization.CultureInfo> que corresponde à cultura atual é usado.  
  
 O `styles` parâmetro define se o espaço em branco é permitido na cadeia de entrada, indica como as cadeias de caracteres sem um componente de deslocamento explícita são analisadas e dá suporte à conversão de UTC como parte da operação de análise. Todos os membros da enumeração <xref:System.Globalization.DateTimeStyles> são suportados, exceto <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. A tabela a seguir lista o efeito de cada membro suportado.  
  
|Membro do `DateTimeStyles`|Comportamento|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analisa `input` e, caso necessário, converte-o em UTC. Ele é equivalente à análise de uma cadeia de caracteres e, em seguida, à chamada do método <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> do objeto <xref:System.DateTimeOffset> retornado.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Se o elemento correspondente em `formats` não exige que `input` contêm um valor de deslocamento, retornado <xref:System.DateTimeOffset> objeto receberá o deslocamento do fuso horário local. Este é o valor padrão.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Se o elemento correspondente em `formats` não exige que `input` contêm um valor de deslocamento, retornado <xref:System.DateTimeOffset> objeto receberá o deslocamento do UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Permite `input` para incluir espaço em branco interno não especificado dos elementos no `formats`. Espaço em branco extra pode aparecer entre os componentes de data e hora e em componentes individuais (exceto para o deslocamento) e é ignorado ao analisar a cadeia de caracteres.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Permite `input` incluir espaços não especificado dos elementos no `formats`. Eles são ignorados durante a análise da cadeia de caracteres.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Permite `input` incluir espaços não especificados dos elementos à direita `formats`. Eles são ignorados durante a análise da cadeia de caracteres.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Permite `input` para incluir espaços à esquerda, à direita e internos não especificados dos elementos no `formats`. Todos os caracteres de espaço em branco extra não especificados no elemento correspondente no `formats` são ignorados ao analisar a cadeia de caracteres.|  
|<xref:System.Globalization.DateTimeStyles.None>|Indica que o espaço em branco adicional não é permitido em `input`. Espaço em branco devem aparecer exatamente conforme especificado em um determinado elemento no `formats` uma correspondência com êxito a ocorrer. Este é o comportamento padrão.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Não tem nenhum efeito porque o <xref:System.DateTimeOffset> a estrutura não inclui um `Kind` propriedade.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> inclui um valor <see cref="T:System.Globalization.DateTimeStyles" /> indefinido.  
- ou - Não há suporte para <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />.  
- ou - <paramref name="styles" /> inclui valores <see cref="T:System.Globalization.DateTimeStyles" /> mutuamente exclusivos.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Uma cadeia de caracteres que contém uma data e hora a ser convertida.</param>
        <param name="format">Um especificador de formato que define o formato obrigatório de <paramref name="input" />.</param>
        <param name="formatProvider">Um objeto que fornece informações de formatação específicas de cultura sobre <paramref name="input" />.</param>
        <param name="styles">Um combinação bit a bit de valores de enumeração que indica o formato de entrada permitido. Um valor típico a ser especificado é <see langword="None" />.</param>
        <param name="result">Quando é retornado, esse método contém o <see cref="T:System.DateTimeOffset" /> equivalente à data e hora de <paramref name="input" />, caso a conversão seja bem-sucedida ou <see cref="F:System.DateTimeOffset.MinValue" /> caso a conversão falhe. A conversão falhará se o parâmetro <paramref name="input" /> for <see langword="null" /> ou não contiver uma representação de cadeia de caracteres válida de uma data e hora no formato esperado definido por <paramref name="format" /> e <c>provedor</c>. Este parâmetro é passado não inicializado.</param>
        <summary>Converte a representação de cadeia de caracteres especificada de data e hora em seu equivalente <see cref="T:System.DateTimeOffset" /> usando o formato especificado, as informações de formato específicas da cultura e o estilo. O formato de representação da cadeia de caracteres deve corresponder exatamente ao formato especificado.</summary>
        <returns><see langword="true" /> caso o parâmetro <paramref name="input" /> seja convertido com êxito; do contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa sobrecarga da <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> método é como o <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método, exceto pelo fato desse método não lançará uma exceção se a conversão falhar. Ele analisa a representação de cadeia de caracteres de data e hora em que deve corresponder exatamente ao padrão especificado pelo `format` parâmetro. Se o `input` cadeia de caracteres não coincide com esse padrão, com algumas variações possíveis no espaço em branco definido pela `styles` parâmetro, a operação de análise falhar e o método retornará `false`.  
  
 O `format` parâmetro é uma cadeia de caracteres que contém um especificador de formato único padrão ou um ou mais especificadores de formato personalizado que definem o padrão necessário de `input`. Para obter detalhes sobre códigos de formatação válidos, consulte [padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md) e [Data personalizada e cadeias de caracteres de formato de hora](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Se `format` inclui o `z`, `zz`, ou `zzz` especificadores de formato personalizado para indicar que um deslocamento deve estar presente no `input`, que o deslocamento deve incluir um sinal negativo ou um sinal positivo. Se o sinal está ausente, a operação de análise falha e o método retornará `false`.  
  
 Se `format` exige que `input` contêm uma data, mas não uma hora, resultante <xref:System.DateTimeOffset> objeto é atribuído a uma hora de meia-noite (0: 00:00). Se `format` exige que `input` contêm uma hora, mas não uma data, resultante <xref:System.DateTimeOffset> objeto é atribuído a data atual no sistema local. Se `format` não exige que `input` contêm um deslocamento, o deslocamento do resultante <xref:System.DateTimeOffset> objeto depende do valor da `styles` parâmetro. Caso `styles` inclua <xref:System.Globalization.DateTimeStyles.AssumeLocal>, o deslocamento do fuso horário local é atribuído ao objeto <xref:System.DateTimeOffset>. Caso `styles` inclua <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, o deslocamento de Tempo Universal Coordenado (UTC), ou +00:00, é atribuído ao objeto <xref:System.DateTimeOffset>. Caso nenhum valor seja especificado, o deslocamento do fuso horário local é usado.  
  
 Os símbolos de data e hora específicos e as cadeias de caracteres usadas em `input` são definidos pelo parâmetro `formatProvider`. O mesmo é verdadeiro para o padrão de preciso dos `input` se `format` é uma cadeia de caracteres do especificador de formato padrão. O parâmetro `formatProvider` pode ser qualquer um dos seguintes:  
  
-   Um objeto <xref:System.Globalization.CultureInfo> que representa a cultura com base na qual `input` é interpretado. O <xref:System.Globalization.DateTimeFormatInfo> objeto retornado pela <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriedade define os símbolos e formatos padrão permitido em `input`.  
  
-   Um objeto <xref:System.Globalization.DateTimeFormatInfo> que define o formato dos dados de data e hora.  
  
 Caso `formatprovider` seja `null`, o objeto <xref:System.Globalization.CultureInfo> que corresponde à cultura atual é usado.  
  
 O `styles` parâmetro define se o espaço em branco é permitido na cadeia de entrada, indica como as cadeias de caracteres sem um componente de deslocamento explícita são analisadas e dá suporte à conversão de UTC como parte da operação de análise. Todos os membros da enumeração <xref:System.Globalization.DateTimeStyles> são suportados, exceto <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. A tabela a seguir lista o efeito de cada membro suportado.  
  
|Membro do `DateTimeStyles`|Comportamento|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analisa `input` e, caso necessário, converte-o em UTC. Ele é equivalente à análise de uma cadeia de caracteres e, em seguida, à chamada do método <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> do objeto <xref:System.DateTimeOffset> retornado.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Se `format` não exige que `input` contêm um valor de deslocamento, retornado <xref:System.DateTimeOffset> objeto receberá o deslocamento do fuso horário local. Este é o comportamento padrão.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Se `format` não exige que `input` contêm um valor de deslocamento, retornado <xref:System.DateTimeOffset> objeto receberá o deslocamento do UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Permite que `input` para incluir espaço em branco interno não especificado pelo formato. Espaço em branco extra pode aparecer entre os componentes de data e hora e em componentes individuais, que não seja o deslocamento e é ignorado ao analisar a cadeia de caracteres.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Permite `input` incluir espaços à esquerda não especificados por `format`. Eles são ignorados durante a análise da cadeia de caracteres.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Permite `input` incluir espaços não especificados à direita `format`. Eles são ignorados durante a análise da cadeia de caracteres.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Permite `input` para incluir espaços à esquerda, à direita e internos não especificados por `format`. Todos os caracteres de espaço em branco extra não especificados no `format` são ignorados ao analisar a cadeia de caracteres.|  
|<xref:System.Globalization.DateTimeStyles.None>|Indica que o espaço em branco adicional não é permitido em `input`. Espaço em branco devem aparecer exatamente conforme especificado no `format`. Este é o comportamento padrão.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Não tem nenhum efeito, porque o <xref:System.DateTimeOffset> a estrutura não inclui um `Kind` propriedade.|  
  
## Examples 

 O exemplo a seguir usa o <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> método com especificadores de formato padrão e personalizadas, a cultura invariável e vários <xref:System.Globalization.DateTimeStyles> valores analisar várias cadeias de caracteres de data e hora.  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#1)]  

O exemplo a seguir usa uma variedade de <xref:System.Globalization.DateTimeStyles> valores para analisar uma matriz de cadeias de caracteres que devem estar em conformidade com [ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier). Como mostra a saída do exemplo, cadeias de caracteres no formato correto não analisa se:

- eles contêm espaços em branco e apropriado <xref:System.Globalization.DateTimeStyles> sinalizador (como <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> não foi fornecido na chamada do método.

- eles contêm os elementos de data e hora que estão fora do intervalo.

Cadeias de caracteres que não especificam um deslocamento UTC devem para ter o deslocamento do fuso horário local (nesse caso, -07:00, que reflete o deslocamento do fuso horário de verão do Pacífico), a menos que o <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> sinalizador for fornecido na chamada do método. Nesse caso, eles devem para ser o Horário Coordenado Universal.

[!code-csharp[Parsing ISO 8601 strings](~/samples/snippets/csharp/api/system/datetimeoffset/tryparseexact/tryparseexacto8601-2.cs)]
[!code-vb[Parsing ISO 8601 strings](~/samples/snippets/visualbasic/api/system/datetimeoffset/tryparseexact/tryparseexacto8601-2.vb)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> inclui um valor <see cref="T:System.Globalization.DateTimeStyles" /> indefinido.  
  
- ou - 
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> não é suportado.  
  
- ou - 
 <paramref name="styles" /> inclui valores <see cref="T:System.Globalization.DateTimeStyles" /> mutuamente exclusivos.</exception>
        <block subset="none" type="usage"><para>No [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], o <see cref="Overload:System.DateTimeOffset.TryParseExact" /> retorna <see langword="false" /> se a cadeia de caracteres a ser analisada contém um componente de hora e um designador AM/PM que não estão no contrato. No [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] e versões anteriores, o designador AM/PM é ignorado.</para></block>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Uma cadeia de caracteres que contém uma data e hora a ser convertida.</param>
        <param name="formats">Uma matriz que define os formatos esperados de <paramref name="input" />.</param>
        <param name="formatProvider">Um objeto que fornece informações de formatação específicas de cultura sobre <paramref name="input" />.</param>
        <param name="styles">Um combinação bit a bit de valores de enumeração que indica o formato de entrada permitido. Um valor típico a ser especificado é <see langword="None" />.</param>
        <param name="result">Quando é retornado, esse método contém o <see cref="T:System.DateTimeOffset" /> equivalente à data e hora de <paramref name="input" />, caso a conversão seja bem-sucedida ou <see cref="F:System.DateTimeOffset.MinValue" /> caso a conversão falhe. A conversão falhará se o <paramref name="input" /> não contiver uma representação de cadeia de caracteres válida de uma data e hora ou não contiver a data e hora no formato esperado definido por <paramref name="format" /> ou se <paramref name="formats" /> for <see langword="null" />. Este parâmetro é passado não inicializado.</param>
        <summary>Converte a representação de cadeia de caracteres especificada de um data e hora no equivalente de <see cref="T:System.DateTimeOffset" /> usando a matriz de formatos, informações de formato específicas da cultura e estilo especificados. O formato da representação da cadeia de caracteres deve corresponder exatamente a um dos formatos especificados.</summary>
        <returns><see langword="true" /> caso o parâmetro <paramref name="input" /> seja convertido com êxito; do contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> método analisa a representação de cadeia de caracteres de uma data que corresponde a qualquer um dos padrões atribuído para o `formats` matriz. Se o `input` cadeia de caracteres não corresponde a qualquer um desses padrões com qualquer variação definido pelo `styles` parâmetro, a operação de análise falhar e o método retornará `false`. Além de comparando `input` em várias cadeias de caracteres que contêm os especificadores de formato, essa sobrecarga se comporta de forma idêntica ao <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método.  
  
 O `formats` parâmetro é uma matriz de cadeia de caracteres cujos elementos contêm um especificador de formato único padrão ou um ou mais especificadores de formato personalizado que definem o padrão de possíveis de `input`. Para obter detalhes sobre códigos de formatação válidos, consulte [padrão de data e cadeias de caracteres de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md) e [Data personalizada e cadeias de caracteres de formato de hora](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Se o elemento correspondente em `formats` inclui o `z`, `zz`, ou `zzz` especificadores de formato personalizado para indicar que um deslocamento deve estar presente no `input`, que o deslocamento deve incluir um sinal negativo ou um sinal positivo. Se o sinal está ausente, a operação de análise falha e o método retornará `false`.  
  
> [!IMPORTANT]
>  Usando o `formats` parâmetro dessa sobrecarga para especificar vários formatos pode ajudar a reduzir a experimentam de muitos usuários quando eles entram datas e horas de frustração. Em particular, a capacidade de definir vários padrões de entrada permite que um aplicativo lidar com representações de data e hora que podem incluir ou não têm os zeros à esquerda em meses, dias, horas, minutos e segundos. O exemplo fornece uma ilustração disto.  
  
 Se o elemento correspondente em `formats` exige que `input` contêm uma data, mas não uma hora, resultante <xref:System.DateTimeOffset> objeto é atribuído a uma hora de meia-noite (0: 00:00). Se o elemento correspondente em `formats` requer que a entrada contenha uma hora, mas não uma data, resultante <xref:System.DateTimeOffset> objeto é atribuído a data atual no sistema local. Se o elemento correspondente em `formats` não exige que `input` contêm um deslocamento, o deslocamento do resultante <xref:System.DateTimeOffset> objeto depende do valor da `styles` parâmetro. Caso `styles` inclua <xref:System.Globalization.DateTimeStyles.AssumeLocal>, o deslocamento do fuso horário local é atribuído ao objeto <xref:System.DateTimeOffset>. Caso `styles` inclua <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, o deslocamento de Tempo Universal Coordenado (UTC), ou +00:00, é atribuído ao objeto <xref:System.DateTimeOffset>. Caso nenhum valor seja especificado, o deslocamento do fuso horário local é usado.  
  
 Os símbolos de data e hora específicos e as cadeias de caracteres usadas em `input` são definidos pelo parâmetro `formatProvider`. O mesmo é verdadeiro para o padrão de preciso dos `input` se o elemento correspondente da `formats` é uma cadeia de caracteres do especificador de formato padrão. O parâmetro `formatProvider` pode ser qualquer um dos seguintes:  
  
-   Um objeto <xref:System.Globalization.CultureInfo> que representa a cultura com base na qual `input` é interpretado. O <xref:System.Globalization.DateTimeFormatInfo> objeto retornado pela <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriedade define os símbolos e formatação no `input`.  
  
-   Um objeto <xref:System.Globalization.DateTimeFormatInfo> que define o formato dos dados de data e hora.  
  
 Caso `formatprovider` seja `null`, o objeto <xref:System.Globalization.CultureInfo> que corresponde à cultura atual é usado.  
  
 O `styles` parâmetro define se o espaço em branco é permitido na cadeia de entrada, indica como as cadeias de caracteres sem um componente de deslocamento explícita são analisadas e dá suporte à conversão de UTC como parte da operação de análise. Todos os membros da enumeração <xref:System.Globalization.DateTimeStyles> são suportados, exceto <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. A tabela a seguir lista o efeito de cada membro suportado.  
  
|Membro do `DateTimeStyles`|Comportamento|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analisa `input` e, caso necessário, converte-o em UTC. Ele é equivalente à análise de uma cadeia de caracteres e, em seguida, à chamada do método <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> do objeto <xref:System.DateTimeOffset> retornado.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Se o elemento correspondente em `formats` não exige que `input` contêm um valor de deslocamento, retornado <xref:System.DateTimeOffset> objeto receberá o deslocamento do fuso horário local. Este é o valor padrão.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Se o elemento correspondente em `formats` não exige que `input` contêm um valor de deslocamento, retornado <xref:System.DateTimeOffset> objeto receberá o deslocamento do UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Permite `input` para incluir espaço em branco interno não especificado dos elementos no `formats`. Espaço em branco extra pode aparecer entre os componentes de data e hora e em componentes individuais (exceto para o deslocamento) e é ignorado ao analisar a cadeia de caracteres.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Permite `input` incluir espaços não especificado dos elementos no `formats`. Eles são ignorados durante a análise da cadeia de caracteres.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Permite `input` incluir espaços não especificados dos elementos à direita `formats`. Eles são ignorados durante a análise da cadeia de caracteres.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Permite `input` para incluir espaços à esquerda, à direita e internos não especificados dos elementos no `formats`. Todos os caracteres de espaço em branco extra não especificados no elemento correspondente no `formats` são ignorados ao analisar a cadeia de caracteres.|  
|<xref:System.Globalization.DateTimeStyles.None>|Indica que o espaço em branco adicional não é permitido em `input`. Espaço em branco devem aparecer exatamente conforme especificado em um determinado elemento no `formats` uma correspondência com êxito a ocorrer. Este é o comportamento padrão.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Não tem nenhum efeito porque o <xref:System.DateTimeOffset> a estrutura não inclui um `Kind` propriedade.|  
  
   
  
## Examples  
 O exemplo a seguir define vários formatos de entrada para a representação de cadeia de caracteres de uma data e hora e o valor de deslocamento e, em seguida, passa a cadeia de caracteres inserida pelo usuário para o <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> método.  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> inclui um valor <see cref="T:System.Globalization.DateTimeStyles" /> indefinido.  
  
- ou - 
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> não é suportado.  
  
- ou - 
 <paramref name="styles" /> inclui valores <see cref="T:System.Globalization.DateTimeStyles" /> mutuamente exclusivos.</exception>
        <block subset="none" type="usage"><para>No [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], o <see cref="Overload:System.DateTimeOffset.TryParseExact" /> retorna <see langword="false" /> se a cadeia de caracteres a ser analisada contém um componente de hora e um designador AM/PM que não estão no contrato. No [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] e versões anteriores, o designador AM/PM é ignorado.</para></block>
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset UnixEpoch;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnixEpoch : DateTimeOffset" Usage="System.DateTimeOffset.UnixEpoch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcDateTime">
      <MemberSignature Language="C#" Value="public DateTime UtcDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime UtcDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime UtcDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcDateTime : DateTime" Usage="System.DateTimeOffset.UtcDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor <see cref="T:System.DateTime" /> que representa da data e hora UTC (Tempo Universal Coordenado) do objeto <see cref="T:System.DateTimeOffset" /> atual.</summary>
        <value>A data e hora UTC (Tempo Universal Coordenado) do objeto <see cref="T:System.DateTimeOffset" /> atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset.UtcDateTime%2A> propriedade executa uma conversão dupla:  
  
-   Ele converte a data e hora atual <xref:System.DateTimeOffset> objeto ao tempo Universal Coordenado (UTC). A conversão é executada subtraindo o valor de <xref:System.DateTimeOffset.Offset%2A> propriedade da data e hora do atual <xref:System.DateTimeOffset> objeto.  
  
-   Ele converte o <xref:System.DateTimeOffset> de valor para um <xref:System.DateTime> valor.  
  
 O <xref:System.DateTime.Kind%2A> propriedade retornada <xref:System.DateTimeOffset.DateTime%2A> valor é definido como <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Recuperar o valor da <xref:System.DateTimeOffset.UtcDateTime%2A> propriedade é equivalente a chamar atual <xref:System.DateTimeOffset> do objeto `ToUniversalTime.DateTime` propriedade, exceto que o <xref:System.DateTime.Kind%2A> propriedade do último <xref:System.DateTime> valor é <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.  
  
   
  
## Examples  
 O exemplo a seguir mostra como usar o <xref:System.DateTimeOffset.UtcDateTime%2A> propriedade para exibir um <xref:System.DateTimeOffset> valor e o horário UTC correspondente.  
  
 [!code-csharp[System.DateTimeOffset.Properties#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#17)]
 [!code-vb[System.DateTimeOffset.Properties#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTimeOffset UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTimeOffset UtcNow { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcNow : DateTimeOffset" Usage="System.DateTimeOffset.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o objeto <see cref="T:System.DateTimeOffset" />, cuja data e hora estão definidas para o Tempo Universal Coordenado (UTC) atual e cujo deslocamento é <see cref="F:System.TimeSpan.Zero" />.</summary>
        <value>Um objeto cuja data e hora são o Tempo Universal Coordenado (UTC) atual e cujo deslocamento é <see cref="F:System.TimeSpan.Zero" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset.UtcNow%2A> propriedade calcula o tempo Universal Coordenado (UTC) com base na hora do relógio do sistema local e um deslocamento definido pelo fuso horário do sistema local.  
  
 A precisão do componente de milissegundo do horário UTC atual depende da resolução do relógio do sistema. No Windows NT 3.5 e versões posterior e sistemas operacionais Windows Vista, a resolução do relógio é de aproximadamente 10 a 15 milissegundos.  
  
   
  
## Examples  
 O exemplo a seguir ilustra a relação entre o tempo Universal Coordenado (UTC) e a hora local.  
  
 [!code-csharp[System.DateTimeOffset.Properties#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#18)]
 [!code-vb[System.DateTimeOffset.Properties#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
      </Docs>
    </Member>
    <Member MemberName="UtcTicks">
      <MemberSignature Language="C#" Value="public long UtcTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 UtcTicks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcTicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcTicks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long UtcTicks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcTicks : int64" Usage="System.DateTimeOffset.UtcTicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o número de tiques que representa a data e hora do objeto <see cref="T:System.DateTimeOffset" /> atual em UTC (Tempo Universal Coordenado).</summary>
        <value>O número de tiques no <see cref="T:System.DateTimeOffset" /> UTC (Tempo Universal Coordenado) do objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor de <xref:System.DateTimeOffset.UtcTicks%2A> propriedade representa o número de intervalos de 100 nanossegundos decorridos desde a meia-noite de 12:00:00 em 1º de janeiro, 0001 (o valor de <xref:System.DateTimeOffset.MinValue>). Ele não inclui tiques que seriam adicionados por segundos intercalares. Um nanossegundo é aquele bilionésimo de um segundo; Há dez milhões de tiques em um segundo. O valor de <xref:System.DateTimeOffset.UtcTicks%2A> varia de propriedade de `DateTimeOffset.MinValue.Ticks` para `DateTimeOffset.MaxValue.Ticks`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Year : int" Usage="System.DateTimeOffset.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o componente de ano da data representada pelo objeto <see cref="T:System.DateTimeOffset" /> atual.</summary>
        <value>O componente de ano do atual <see cref="T:System.DateTimeOffset" /> objeto, expressado como um valor inteiro entre 0 e 9999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.DateTimeOffset.Year%2A> propriedade não é afetada pelo valor da <xref:System.DateTimeOffset.Offset%2A> propriedade.  
  
 Você também pode criar uma representação de cadeia de caracteres de um <xref:System.DateTimeOffset> componente de ano do objeto chamando o <xref:System.DateTimeOffset.ToString%2A> método com os especificadores de formato personalizado "yyyy", "yy" ou "y".  
  
   
  
## Examples  
 O exemplo a seguir exibe o componente de ano de uma <xref:System.DateTimeOffset> valor de quatro maneiras diferentes:  
  
-   Recuperando o valor da <xref:System.DateTimeOffset.Year%2A> propriedade.  
  
-   Chamando o <xref:System.DateTimeOffset.ToString%28System.String%29> método com o especificador de formato "y".  
  
-   Chamando o <xref:System.DateTimeOffset.ToString%28System.String%29> método com o especificador de formato "AA".  
  
-   Chamando o <xref:System.DateTimeOffset.ToString%28System.String%29> método com o especificador de formato "aaaa".  
  
 [!code-csharp[System.DateTimeOffset.Properties#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#19)]
 [!code-vb[System.DateTimeOffset.Properties#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>