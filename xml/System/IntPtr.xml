<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IntPtr.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52192def95145771b706a7a498d8ae7af18a5e827.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2192def95145771b706a7a498d8ae7af18a5e827</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IntPtr">
          <source>A platform-specific type that is used to represent a pointer or a handle.</source>
          <target state="translated">Um tipo específico da plataforma que é usado para representar um ponteiro ou um identificador.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>The <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> type is designed to be an integer whose size is platform-specific.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> tipo foi projetado para ser um inteiro cujo tamanho é específico da plataforma.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>That is, an instance of this type is expected to be 32-bits on 32-bit hardware and operating systems, and 64-bits on 64-bit hardware and operating systems.</source>
          <target state="translated">Ou seja, uma instância desse tipo deve ser de 32 bits em sistemas operacionais e hardware de 32 bits e 64 bits nos sistemas operacionais e hardware de 64 bits.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>The <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> type can be used by languages that support pointers, and as a common means of referring to data between languages that do and do not support pointers.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> tipo pode ser usado pelas linguagens com suporte para ponteiros e como uma forma comum de referir-se a dados entre as linguagens que e não oferecem suporte a ponteiros.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source><ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> objects can also be used to hold handles.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> objetos também podem ser usados para armazenar identificadores.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>For example, instances of <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> are used extensively in the <ph id="ph2">&lt;xref:System.IO.FileStream?displayProperty=nameWithType&gt;</ph> class to hold file handles.</source>
          <target state="translated">Por exemplo, instâncias de <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> são utilizadas extensivamente na <ph id="ph2">&lt;xref:System.IO.FileStream?displayProperty=nameWithType&gt;</ph> classe para conter identificadores de arquivos.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>The <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> type is CLS-compliant, while the <ph id="ph2">&lt;xref:System.UIntPtr&gt;</ph> type is not.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> tipo é compatível com CLS, enquanto o <ph id="ph2">&lt;xref:System.UIntPtr&gt;</ph> tipo não é.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>Only the <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> type is used in the common language runtime.</source>
          <target state="translated">Somente o <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> tipo é usado no common language runtime.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>The <ph id="ph1">&lt;xref:System.UIntPtr&gt;</ph> type is provided mostly to maintain architectural symmetry with the <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph> type.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.UIntPtr&gt;</ph> tipo é fornecido principalmente para manter a arquitetura simetria com o <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph> tipo.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>This type implements the <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface.</source>
          <target state="translated">Este tipo implementa o <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>The following example uses managed pointers to reverse the characters in an array.</source>
          <target state="translated">O exemplo a seguir usa ponteiros gerenciados para reverter os caracteres em uma matriz.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>After it initializes a <ph id="ph1">&lt;xref:System.String&gt;</ph> object and gets its length, it does the following:</source>
          <target state="translated">Depois que ele inicializa um <ph id="ph1">&lt;xref:System.String&gt;</ph> de objeto e obtém seu comprimento, ele faz o seguinte:</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>Calls the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=nameWithType&gt;</ph> method to copy the Unicode string to unmanaged memory as an ANSI (one-byte) character.</source>
          <target state="translated">Chama o <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=nameWithType&gt;</ph> método para copiar a cadeia de caracteres Unicode em memória não gerenciada como um caractere de ANSI (um byte).</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>The method returns an <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> object that points to the beginning of the unmanaged string.</source>
          <target state="translated">O método retorna um <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> objeto que aponta para o início da cadeia de caracteres não gerenciado.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>The Visual Basic example uses this pointer directly; in the C++ and C# examples, it is cast to a pointer to a byte.</source>
          <target state="translated">O exemplo do Visual Basic usa esse ponteiro diretamente. nos exemplos a C++ e c#, ela será convertida em um ponteiro para um byte.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>Calls the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A?displayProperty=nameWithType&gt;</ph> method to allocate the same number of bytes as the unmanaged string occupies.</source>
          <target state="translated">Chama o <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A?displayProperty=nameWithType&gt;</ph> método para alocar o mesmo número de bytes que ocupa a cadeia de caracteres não gerenciada.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>The method returns an <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> object that points to the beginning of the unmanaged block of memory.</source>
          <target state="translated">O método retorna um <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> objeto que aponta para o início do bloco não gerenciado de memória.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>The Visual Basic example uses this pointer directly; in the C++ and C# examples, it is cast to a pointer to a byte.</source>
          <target state="translated">O exemplo do Visual Basic usa esse ponteiro diretamente. nos exemplos a C++ e c#, ela será convertida em um ponteiro para um byte.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>The Visual Basic example defines a variable named <ph id="ph1">`offset`</ph> that is equal to the length of the ANSI string.</source>
          <target state="translated">O exemplo do Visual Basic define uma variável denominada <ph id="ph1">`offset`</ph> que é igual ao comprimento da cadeia de caracteres ANSI.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>It is used to determine the offset into unmanaged memory to which the next charter in the ANSI string is copied.</source>
          <target state="translated">Ele é usado para determinar o deslocamento em memória não gerenciada para o qual a próxima nota na cadeia de caracteres ANSI é copiada.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>Because its starting value is the length of the string, the copy operation will copy a character from the start of the string to the end of the memory block.</source>
          <target state="translated">Como seu valor inicial é o comprimento da cadeia de caracteres, a operação de cópia copiará um caractere do início da cadeia de caracteres para o fim do bloco de memória.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>The C# and C++ examples call the <ph id="ph1">&lt;xref:System.IntPtr.ToPointer%2A&gt;</ph> method to get an unmanaged pointer to the starting address of the string and the unmanaged block of memory, and they add one less than the length of the string to the starting address of the ANSI string.</source>
          <target state="translated">A chamada de exemplos do c# e C++ a <ph id="ph1">&lt;xref:System.IntPtr.ToPointer%2A&gt;</ph> método para obter um ponteiro não gerenciado para o endereço inicial da cadeia de caracteres e o bloco não gerenciado de memória, e eles adicionar um menor do que o comprimento da cadeia de caracteres para o endereço inicial da cadeia de caracteres ANSI.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>Because the unmanaged string pointer now points to the end of the string, the copy operation will copy a character from the end of the string to the start of the memory block.</source>
          <target state="translated">Como o ponteiro não gerenciado de cadeia de caracteres agora aponta para o fim da cadeia de caracteres, a operação de cópia copiará um caractere do final da cadeia de caracteres para o início do bloco de memória.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>Uses a loop to copy each character from the string to the unmanaged block of memory.</source>
          <target state="translated">Usa um loop para copiar cada caractere da cadeia de caracteres para o bloco não gerenciado de memória.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>The Visual Basic example calls the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.ReadByte%28System.IntPtr%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> method to read the byte (or one-byte character) at a specified offset from the managed pointer to the ANSI string.</source>
          <target state="translated">O exemplo do Visual Basic chama o <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.ReadByte%28System.IntPtr%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> método de leitura de bytes (ou caracteres de um byte) em um deslocamento especificado de ponteiro gerenciado para a cadeia de caracteres ANSI.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>The offset is incremented with each iteration of the loop.</source>
          <target state="translated">O deslocamento é incrementado com cada iteração do loop.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.WriteByte%28System.IntPtr%2CSystem.Int32%2CSystem.Byte%29?displayProperty=nameWithType&gt;</ph> method to write the byte to the memory address defined by the starting address of the unmanaged block of memory plus <ph id="ph2">`offset`</ph>.</source>
          <target state="translated">Depois, ele chama o <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.WriteByte%28System.IntPtr%2CSystem.Int32%2CSystem.Byte%29?displayProperty=nameWithType&gt;</ph> método para gravar os bytes para o endereço de memória definido pelo endereço inicial do bloco não gerenciado de memória mais <ph id="ph2">`offset`</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>It then decrements <ph id="ph1">`offset`</ph>.</source>
          <target state="translated">Em seguida, diminui <ph id="ph1">`offset`</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>The C# and C++ examples perform the copy operation, then decrement the pointer to the address of the next location in the unmanaged ANSI string and increment the pointer to the next address in the unmanaged block.</source>
          <target state="translated">C# e C++ exemplos de executam a operação de cópia, em seguida, diminuir o ponteiro para o endereço do local do próximo na cadeia de caracteres ANSI não gerenciado e incrementam o ponteiro para o próximo endereço no bloco não gerenciado.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>All examples call the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=nameWithType&gt;</ph> to convert the unmanaged memory block containing the copied ANSI string to a managed Unicode <ph id="ph2">&lt;xref:System.String&gt;</ph> object.</source>
          <target state="translated">Todos os exemplos de chamar o <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=nameWithType&gt;</ph> para converter o bloco de memória não gerenciada que contém a cadeia de caracteres ANSI copiada para um gerenciado Unicode <ph id="ph2">&lt;xref:System.String&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>After displaying the original and reversed strings, all examples call the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A&gt;</ph> method to free the memory allocated for the unmanaged ANSI string and the unmanaged block of memory.</source>
          <target state="translated">Depois de exibir as cadeias de caracteres originais e revertidas, todos os exemplos de chamar o <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A&gt;</ph> método para liberar a memória alocada para a cadeia de caracteres ANSI não gerenciada e o bloco não gerenciado de memória.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>This type is thread safe.</source>
          <target state="translated">Este tipo é thread-safe.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="T:System.IntPtr">
          <source>Initializes a new instance of <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>.</source>
          <target state="translated">Inicializa uma nova instância de <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.IntPtr.#ctor(System.Int32)">
          <source>A pointer or handle contained in a 32-bit signed integer.</source>
          <target state="translated">Um ponteiro ou identificador contidos em um inteiro com sinal de 32 bits.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.IntPtr.#ctor(System.Int32)">
          <source>Initializes a new instance of <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> using the specified 32-bit pointer or handle.</source>
          <target state="translated">Inicializa uma nova instância do <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> usando o ponteiro de 32 bits especificado ou identificador.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.IntPtr.#ctor(System.Int64)">
          <source>A pointer or handle contained in a 64-bit signed integer.</source>
          <target state="translated">Um ponteiro ou identificador contidos em um inteiro com sinal de 64 bits.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.IntPtr.#ctor(System.Int64)">
          <source>Initializes a new instance of <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> using the specified 64-bit pointer.</source>
          <target state="translated">Inicializa uma nova instância de <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> usando o ponteiro de 64 bits especificado.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.#ctor(System.Int64)">
          <source>An exception is only thrown if the value of <ph id="ph1">`value`</ph> requires more bits than the current platform supports.</source>
          <target state="translated">Uma exceção é gerada apenas se o valor de <ph id="ph1">`value`</ph> requer mais bits que o dá suporte a plataforma atual.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.IntPtr.#ctor(System.Int64)">
          <source>On a 32-bit platform, <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is too large or too small to represent as an <ph id="ph2">&lt;see cref="T:System.IntPtr" /&gt;</ph>.</source>
          <target state="translated">Em uma plataforma de 32 bits, o <ph id="ph1">&lt;paramref name="value" /&gt;</ph> é muito grande ou muito pequeno para ser representado como um <ph id="ph2">&lt;see cref="T:System.IntPtr" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.IntPtr.#ctor(System.Void*)">
          <source>A pointer to an unspecified type.</source>
          <target state="translated">Um ponteiro para um tipo não especificado.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.IntPtr.#ctor(System.Void*)">
          <source>Initializes a new instance of <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> using the specified pointer to an unspecified type.</source>
          <target state="translated">Inicializa uma nova instância do <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> usando o ponteiro especificado para um tipo não especificado.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.#ctor(System.Void*)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.#ctor(System.Void*)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.IntPtr.Add(System.IntPtr,System.Int32)">
          <source>The pointer to add the offset to.</source>
          <target state="translated">O ponteiro ao qual adicionar o deslocamento.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.IntPtr.Add(System.IntPtr,System.Int32)">
          <source>The offset to add.</source>
          <target state="translated">O deslocamento a ser adicionado.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.IntPtr.Add(System.IntPtr,System.Int32)">
          <source>Adds an offset to the value of a pointer.</source>
          <target state="translated">Adiciona um deslocamento ao valor de um ponteiro.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.IntPtr.Add(System.IntPtr,System.Int32)">
          <source>A new pointer that reflects the addition of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> to <ph id="ph2">&lt;paramref name="pointer" /&gt;</ph>.</source>
          <target state="translated">Um novo ponteiro que reflete a adição de <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> a <ph id="ph2">&lt;paramref name="pointer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.Add(System.IntPtr,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IntPtr.Add%2A&gt;</ph> method does not throw an exception if the result is too large to represent as a pointer on the specified platform.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IntPtr.Add%2A&gt;</ph> método não lançará uma exceção se o resultado é muito grande para representar como um ponteiro na plataforma específica.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.Add(System.IntPtr,System.Int32)">
          <source>Instead, the addition operation is performed in an unchecked context.</source>
          <target state="translated">Em vez disso, a operação de adição é executada em um contexto desmarcado.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.Add(System.IntPtr,System.Int32)">
          <source>Languages that do not support operator overloading or custom operators can use this method to add an offset to the value of a pointer.</source>
          <target state="translated">Idiomas que não dão suporte a sobrecarga de operador ou operadores personalizados podem usar esse método para adicionar um deslocamento para o valor de um ponteiro.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.Add(System.IntPtr,System.Int32)">
          <source>The following example instantiates an <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> object that points to the beginning of a ten-element array, and then calls the <ph id="ph2">&lt;xref:System.IntPtr.Add%2A&gt;</ph> method to iterate the elements in the array.</source>
          <target state="translated">O exemplo a seguir cria um <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> objeto que aponta para o início de uma matriz de elementos de dez e, em seguida, chama o <ph id="ph2">&lt;xref:System.IntPtr.Add%2A&gt;</ph> método para iterar os elementos na matriz.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.IntPtr.Equals(System.Object)">
          <source>An object to compare with this instance or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um objeto a ser comparado com essa instância ou <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.IntPtr.Equals(System.Object)">
          <source>Returns a value indicating whether this instance is equal to a specified object.</source>
          <target state="translated">Retorna um valor que indica se essa instância é igual a um objeto especificado.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.IntPtr.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> is an instance of <ph id="ph3">&lt;see cref="T:System.IntPtr" /&gt;</ph> and equals the value of this instance; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> é uma instância de <ph id="ph3">&lt;see cref="T:System.IntPtr" /&gt;</ph> e é igual ao valor dessa instância; caso contrário, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.IntPtr.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">Retorna o código hash para essa instância.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.IntPtr.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">Um código de hash do inteiro assinado de 32 bits.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
          <source>The pointer to add the offset to.</source>
          <target state="translated">O ponteiro ao qual adicionar o deslocamento.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
          <source>The offset to add.</source>
          <target state="translated">O deslocamento a ser adicionado.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
          <source>Adds an offset to the value of a pointer.</source>
          <target state="translated">Adiciona um deslocamento ao valor de um ponteiro.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
          <source>A new pointer that reflects the addition of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> to <ph id="ph2">&lt;paramref name="pointer" /&gt;</ph>.</source>
          <target state="translated">Um novo ponteiro que reflete a adição de <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> a <ph id="ph2">&lt;paramref name="pointer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IntPtr.op_Addition%2A&gt;</ph> method defines the addition operation for <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph> objects.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IntPtr.op_Addition%2A&gt;</ph> método define a operação de adição para <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph> objetos.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
          <source>It enables code such as the following.</source>
          <target state="translated">Ele permite que o código como o seguinte.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
          <source>Languages that do not support custom operators can call the <ph id="ph1">&lt;xref:System.IntPtr.Add%2A&gt;</ph> method instead.</source>
          <target state="translated">Linguagens que não dão suporte a operadores personalizados podem chamar o método <ph id="ph1">&lt;xref:System.IntPtr.Add%2A&gt;</ph> em vez disso.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
          <source>The addition operation does not throw an exception if the result is too large to represent as a pointer on the specified platform.</source>
          <target state="translated">A operação de adição não lançar uma exceção se o resultado é muito grande para representar como um ponteiro na plataforma específica.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
          <source>Instead, it is performed in an unchecked context.</source>
          <target state="translated">Em vez disso, ele é executado em um contexto desmarcado.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.IntPtr.Add%28System.IntPtr%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph></source>
          <target state="translated">O método equivalente para esse operador é <ph id="ph1">&lt;xref:System.IntPtr.Add%28System.IntPtr%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph></target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)">
          <source>The first pointer or handle to compare.</source>
          <target state="translated">O primeiro ponteiro ou identificador a ser comparado.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)">
          <source>The second pointer or handle to compare.</source>
          <target state="translated">O segundo ponteiro ou identificador a ser comparado.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)">
          <source>Determines whether two specified instances of <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> are equal.</source>
          <target state="translated">Determina se duas instâncias especificadas do <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> são iguais.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value1" /&gt;</ph> equals <ph id="ph3">&lt;paramref name="value2" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="value1" /&gt;</ph> for igual a <ph id="ph3">&lt;paramref name="value2" /&gt;</ph>; caso contrário, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.IntPtr.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph></source>
          <target state="translated">O método equivalente para esse operador é <ph id="ph1">&lt;xref:System.IntPtr.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph></target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="T:System.IntPtr">
          <source>Converts a specified data type to an <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> value, or an <ph id="ph2">&lt;see cref="T:System.IntPtr" /&gt;</ph> value to a specified data type.</source>
          <target state="translated">Converte um tipo de dados especificado em um valor <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> ou um valor <ph id="ph2">&lt;see cref="T:System.IntPtr" /&gt;</ph> em um tipo de dados especificado.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.Int32)~System.IntPtr">
          <source>A 32-bit signed integer.</source>
          <target state="translated">Um inteiro com sinal de 32 bits.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.Int32)~System.IntPtr">
          <source>Converts the value of a 32-bit signed integer to an <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>.</source>
          <target state="translated">Converte o valor de um inteiro com sinal de 32 bits em um <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.Int32)~System.IntPtr">
          <source>A new instance of <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> initialized to <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Uma nova instância do <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> inicializada para <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.Int64)~System.IntPtr">
          <source>A 64-bit signed integer.</source>
          <target state="translated">Um inteiro com sinal de 64 bits.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.Int64)~System.IntPtr">
          <source>Converts the value of a 64-bit signed integer to an <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>.</source>
          <target state="translated">Converte o valor de um inteiro com sinal de 64 bits em um <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.Int64)~System.IntPtr">
          <source>A new instance of <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> initialized to <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Uma nova instância do <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> inicializada para <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.Int64)~System.IntPtr">
          <source>On a 32-bit platform, <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is too large to represent as an <ph id="ph2">&lt;see cref="T:System.IntPtr" /&gt;</ph>.</source>
          <target state="translated">Em uma plataforma de 32 bits, o <ph id="ph1">&lt;paramref name="value" /&gt;</ph> é muito grande para ser representado como um <ph id="ph2">&lt;see cref="T:System.IntPtr" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32">
          <source>The pointer or handle to convert.</source>
          <target state="translated">O ponteiro ou identificador a ser convertido.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32">
          <source>Converts the value of the specified <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> to a 32-bit signed integer.</source>
          <target state="translated">Converte o valor do <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> especificado em um inteiro com sinal de 32 bits.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32">
          <source>The contents of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">O conteúdo de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32">
          <source>An exception is only thrown if the value of <ph id="ph1">`value`</ph> requires more bits than the current platform supports.</source>
          <target state="translated">Uma exceção é gerada apenas se o valor de <ph id="ph1">`value`</ph> requer mais bits que o dá suporte a plataforma atual.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32">
          <source>On a 64-bit platform, the value of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is too large to represent as a 32-bit signed integer.</source>
          <target state="translated">Em uma plataforma de 64 bits, o valor de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> é muito grande para ser representado como um inteiro com sinal de 32 bits.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int64">
          <source>The pointer or handle to convert.</source>
          <target state="translated">O ponteiro ou identificador a ser convertido.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int64">
          <source>Converts the value of the specified <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> to a 64-bit signed integer.</source>
          <target state="translated">Converte o valor do <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> especificado em um inteiro com sinal de 64 bits.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int64">
          <source>The contents of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">O conteúdo de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Void*">
          <source>The pointer or handle to convert.</source>
          <target state="translated">O ponteiro ou identificador a ser convertido.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Void*">
          <source>Converts the value of the specified <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> to a pointer to an unspecified type.</source>
          <target state="translated">Converte o valor do <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> especificado em um ponteiro para um tipo não especificado.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Void*">
          <source>This API is not CLS-compliant.</source>
          <target state="translated">Esta API não compatível com CLS.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Void*">
          <source>The contents of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">O conteúdo de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr">
          <source>A pointer to an unspecified type.</source>
          <target state="translated">Um ponteiro para um tipo não especificado.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr">
          <source>Converts the specified pointer to an unspecified type to an <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>.</source>
          <target state="translated">Converte o ponteiro especificado em um tipo não especificado para um <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr">
          <source>This API is not CLS-compliant.</source>
          <target state="translated">Esta API não compatível com CLS.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr">
          <source>A new instance of <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> initialized to <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Uma nova instância do <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> inicializada para <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)">
          <source>The first pointer or handle to compare.</source>
          <target state="translated">O primeiro ponteiro ou identificador a ser comparado.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)">
          <source>The second pointer or handle to compare.</source>
          <target state="translated">O segundo ponteiro ou identificador a ser comparado.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)">
          <source>Determines whether two specified instances of <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> are not equal.</source>
          <target state="translated">Determina se duas instâncias especificadas de <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> não são iguais.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value1" /&gt;</ph> does not equal <ph id="ph3">&lt;paramref name="value2" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="value1" /&gt;</ph> não for igual a <ph id="ph3">&lt;paramref name="value2" /&gt;</ph>; caso contrário, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.IntPtr.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph></source>
          <target state="translated">O método equivalente para esse operador é <ph id="ph1">&lt;xref:System.IntPtr.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph></target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
          <source>The pointer to subtract the offset from.</source>
          <target state="translated">O ponteiro do qual subtrair o deslocamento.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
          <source>The offset to subtract.</source>
          <target state="translated">O deslocamento a ser subtraído.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
          <source>Subtracts an offset from the value of a pointer.</source>
          <target state="translated">Subtrai um deslocamento do valor de um ponteiro.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
          <source>A new pointer that reflects the subtraction of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> from <ph id="ph2">&lt;paramref name="pointer" /&gt;</ph>.</source>
          <target state="translated">Um novo ponteiro que reflete a subtração de <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> de <ph id="ph2">&lt;paramref name="pointer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IntPtr.op_Subtraction%2A&gt;</ph> method defines the subtraction operation for <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph> objects.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IntPtr.op_Subtraction%2A&gt;</ph> método define a operação de subtração para <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph> objetos.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
          <source>It enables code such as the following.</source>
          <target state="translated">Ele permite que o código como o seguinte.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
          <source>Languages that do not support custom operators can call the <ph id="ph1">&lt;xref:System.IntPtr.Subtract%2A&gt;</ph> method instead.</source>
          <target state="translated">Linguagens que não dão suporte a operadores personalizados podem chamar o método <ph id="ph1">&lt;xref:System.IntPtr.Subtract%2A&gt;</ph> em vez disso.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
          <source>The subtraction operation does not throw an exception if the result is too small to represent as a pointer on the specified platform.</source>
          <target state="translated">A operação de subtração não lançar uma exceção se o resultado é muito pequeno para representar um ponteiro na plataforma específica.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
          <source>Instead, it is performed in an unchecked context.</source>
          <target state="translated">Em vez disso, ele é executado em um contexto desmarcado.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.IntPtr.Subtract%28System.IntPtr%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph></source>
          <target state="translated">O método equivalente para esse operador é <ph id="ph1">&lt;xref:System.IntPtr.Subtract%28System.IntPtr%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph></target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="P:System.IntPtr.Size">
          <source>Gets the size of this instance.</source>
          <target state="translated">Obtém o tamanho dessa instância.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IntPtr.Size">
          <source>The size of a pointer or handle in this process, measured in bytes.</source>
          <target state="translated">O tamanho de um ponteiro ou identificador nesse processo, medido em bytes.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IntPtr.Size">
          <source>The value of this property is 4 in a 32-bit process, and 8 in a 64-bit process.</source>
          <target state="translated">O valor dessa propriedade é 4 em um processo de 32 bits e 8 em um processo de 64 bits.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IntPtr.Size">
          <source>You can define the process type by setting the <ph id="ph1">&lt;see langword="/platform" /&gt;</ph> switch when you compile your code with the C# and Visual Basic compilers.</source>
          <target state="translated">Defina o tipo de processo definindo a opção <ph id="ph1">&lt;see langword="/platform" /&gt;</ph> ao compilar o código com os compiladores C# e Visual Basic.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.IntPtr.Subtract(System.IntPtr,System.Int32)">
          <source>The pointer to subtract the offset from.</source>
          <target state="translated">O ponteiro do qual subtrair o deslocamento.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.IntPtr.Subtract(System.IntPtr,System.Int32)">
          <source>The offset to subtract.</source>
          <target state="translated">O deslocamento a ser subtraído.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.IntPtr.Subtract(System.IntPtr,System.Int32)">
          <source>Subtracts an offset from the value of a pointer.</source>
          <target state="translated">Subtrai um deslocamento do valor de um ponteiro.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.IntPtr.Subtract(System.IntPtr,System.Int32)">
          <source>A new pointer that reflects the subtraction of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> from <ph id="ph2">&lt;paramref name="pointer" /&gt;</ph>.</source>
          <target state="translated">Um novo ponteiro que reflete a subtração de <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> de <ph id="ph2">&lt;paramref name="pointer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.Subtract(System.IntPtr,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IntPtr.Subtract%2A&gt;</ph> method does not throw an exception if the result is too small to represent as a pointer on the specified platform.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IntPtr.Subtract%2A&gt;</ph> método não lançará uma exceção se o resultado é muito pequeno para representar um ponteiro na plataforma específica.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.Subtract(System.IntPtr,System.Int32)">
          <source>Instead, the subtraction operation is performed in an unchecked context.</source>
          <target state="translated">Em vez disso, a operação de subtração é executada em um contexto desmarcado.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.Subtract(System.IntPtr,System.Int32)">
          <source>Languages that do not support operator overloading or custom operators can use this method to subtract an offset from the value of a pointer.</source>
          <target state="translated">Idiomas que não dão suporte a sobrecarga de operador ou operadores personalizados podem usar esse método para subtrair um deslocamento do valor de um ponteiro.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.Subtract(System.IntPtr,System.Int32)">
          <source>The following example instantiates an <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> object that points to the end of a ten-element array, and then calls the <ph id="ph2">&lt;xref:System.IntPtr.Subtract%2A&gt;</ph> method to iterate the elements in the array in reverse order.</source>
          <target state="translated">O exemplo a seguir cria um <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> objeto que aponta para o final de uma matriz de elementos de dez e, em seguida, chama o <ph id="ph2">&lt;xref:System.IntPtr.Subtract%2A&gt;</ph> método para iterar os elementos na matriz na ordem inversa.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object to populate with data.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> a ser populado com os dados.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The destination for this serialization.</source>
          <target state="translated">O destino dessa serialização.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>(This parameter is not used; specify <ph id="ph1">&lt;see langword="null" /&gt;</ph>.)</source>
          <target state="translated">(Este parâmetro não é usado; especifique <ph id="ph1">&lt;see langword="null" /&gt;</ph>.)</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Populates a <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object with the data needed to serialize the current <ph id="ph2">&lt;see cref="T:System.IntPtr" /&gt;</ph> object.</source>
          <target state="translated">Popula um objeto <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> com os dados necessários para serializar o objeto <ph id="ph2">&lt;see cref="T:System.IntPtr" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This method populates the <ph id="ph1">`info`</ph> parameter with the value of the current <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph> object.</source>
          <target state="translated">Este método preenche o <ph id="ph1">`info`</ph> parâmetro com o valor atual <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">&lt;paramref name="info" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="info" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.IntPtr.ToInt32">
          <source>Converts the value of this instance to a 32-bit signed integer.</source>
          <target state="translated">Converte o valor desta instância em um inteiro com sinal de 32 bits.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.IntPtr.ToInt32">
          <source>A 32-bit signed integer equal to the value of this instance.</source>
          <target state="translated">Um inteiro com sinal de 32 bits equivalente ao valor desta instância.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.IntPtr.ToInt32">
          <source>On a 64-bit platform, the value of this instance is too large or too small to represent as a 32-bit signed integer.</source>
          <target state="translated">Em uma plataforma de 64 bits, o valor desta instância é grande ou pequeno demais para ser representado como um inteiro com sinal de 32 bits.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.IntPtr.ToInt64">
          <source>Converts the value of this instance to a 64-bit signed integer.</source>
          <target state="translated">Converte o valor desta instância em um inteiro com sinal de 64 bits.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.IntPtr.ToInt64">
          <source>A 64-bit signed integer equal to the value of this instance.</source>
          <target state="translated">Um inteiro com sinal de 64 bits equivalente ao valor desta instância.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.IntPtr.ToPointer">
          <source>Converts the value of this instance to a pointer to an unspecified type.</source>
          <target state="translated">Converte o valor dessa instância em um ponteiro para um tipo não especificado.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.IntPtr.ToPointer">
          <source>A pointer to <ph id="ph1">&lt;see cref="T:System.Void" /&gt;</ph>; that is, a pointer to memory containing data of an unspecified type.</source>
          <target state="translated">Um ponteiro para <ph id="ph1">&lt;see cref="T:System.Void" /&gt;</ph>, ou seja, um ponteiro para a memória que contém dados de um tipo não especificado.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToPointer">
          <source>The following example uses managed pointers to reverse the characters in an array.</source>
          <target state="translated">O exemplo a seguir usa ponteiros gerenciados para reverter os caracteres em uma matriz.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToPointer">
          <source>After it initializes a <ph id="ph1">&lt;xref:System.String&gt;</ph> object and gets its length, it does the following:</source>
          <target state="translated">Depois que ele inicializa um <ph id="ph1">&lt;xref:System.String&gt;</ph> de objeto e obtém seu comprimento, ele faz o seguinte:</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToPointer">
          <source>Calls the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=nameWithType&gt;</ph> method to copy the Unicode string to unmanaged memory as ANSI (one-byte) characters.</source>
          <target state="translated">Chama o <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=nameWithType&gt;</ph> método para copiar a cadeia de caracteres Unicode para a memória não gerenciada como caracteres do ANSI (um byte).</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToPointer">
          <source>The method returns an <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> object that points to the beginning of the unmanaged string.</source>
          <target state="translated">O método retorna um <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> objeto que aponta para o início da cadeia de caracteres não gerenciado.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToPointer">
          <source>Calls the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A?displayProperty=nameWithType&gt;</ph> method to allocate the same number of bytes as the unmanaged string occupies.</source>
          <target state="translated">Chama o <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A?displayProperty=nameWithType&gt;</ph> método para alocar o mesmo número de bytes que ocupa a cadeia de caracteres não gerenciada.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToPointer">
          <source>The method returns an <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> object that points to the beginning of the unmanaged block of memory.</source>
          <target state="translated">O método retorna um <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> objeto que aponta para o início do bloco não gerenciado de memória.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToPointer">
          <source>Calls the <ph id="ph1">&lt;xref:System.IntPtr.ToPointer%2A&gt;</ph> method to get an unmanaged pointer to the starting address of the string and the unmanaged block of memory, and adds one less than the length of the string to the starting address of the ANSI string.</source>
          <target state="translated">Chama o <ph id="ph1">&lt;xref:System.IntPtr.ToPointer%2A&gt;</ph> método para obter um ponteiro não gerenciado para o endereço inicial da cadeia de caracteres e o bloco não gerenciado de memória e adiciona um menor do que o comprimento da cadeia de caracteres para o endereço inicial da cadeia de caracteres ANSI.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToPointer">
          <source>Because the unmanaged string pointer now points to the end of the string, the copy operation will copy a character from the end of the string to the start of the memory block.</source>
          <target state="translated">Como o ponteiro não gerenciado de cadeia de caracteres agora aponta para o fim da cadeia de caracteres, a operação de cópia copiará um caractere do final da cadeia de caracteres para o início do bloco de memória.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToPointer">
          <source>Uses a loop to copy each character from the string to the unmanaged block of memory.</source>
          <target state="translated">Usa um loop para copiar cada caractere da cadeia de caracteres para o bloco não gerenciado de memória.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToPointer">
          <source>After each copy operation, it decrements the pointer to the address of the next location in the unmanaged ANSI string and increments the pointer to the next address in the unmanaged block.</source>
          <target state="translated">Depois de cada operação de cópia, ele diminui o ponteiro para o endereço do local do próximo na cadeia de caracteres ANSI não gerenciado e incrementa o ponteiro para o próximo endereço no bloco não gerenciado.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToPointer">
          <source>Calls the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=nameWithType&gt;</ph> to convert the unmanaged memory block containing the copied ANSI string to a managed Unicode <ph id="ph2">&lt;xref:System.String&gt;</ph> object.</source>
          <target state="translated">Chamadas de <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=nameWithType&gt;</ph> para converter o bloco de memória não gerenciada que contém a cadeia de caracteres ANSI copiada para um gerenciado Unicode <ph id="ph2">&lt;xref:System.String&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToPointer">
          <source>After displaying the original and reversed strings, calls the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A?displayProperty=nameWithType&gt;</ph> method to free the memory allocated for the unmanaged ANSI string and the unmanaged block of memory.</source>
          <target state="translated">Depois de exibir as cadeias de caracteres originais e revertidas, chama o <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A?displayProperty=nameWithType&gt;</ph> método para liberar a memória alocada para a cadeia de caracteres ANSI não gerenciada e o bloco não gerenciado de memória.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="T:System.IntPtr">
          <source>Converts the numeric value of the current <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> object to its equivalent string representation.</source>
          <target state="translated">Converte o valor numérico do objeto <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> atual na representação da cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.IntPtr.ToString">
          <source>Converts the numeric value of the current <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> object to its equivalent string representation.</source>
          <target state="translated">Converte o valor numérico do objeto <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> atual na representação da cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.IntPtr.ToString">
          <source>The string representation of the value of this instance.</source>
          <target state="translated">A representação da cadeia de caracteres do valor dessa instância.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToString">
          <source>If the value of the <ph id="ph1">&lt;xref:System.IntPtr.Size%2A&gt;</ph> property for this instance is 4, then this method is equivalent to <ph id="ph2">&lt;xref:System.Int32.ToString%2A?displayProperty=nameWithType&gt;</ph>; otherwise, this method is equivalent to <ph id="ph3">&lt;xref:System.Int64.ToString%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Se o valor de <ph id="ph1">&lt;xref:System.IntPtr.Size%2A&gt;</ph> propriedade para esta instância for 4, esse método é equivalente a <ph id="ph2">&lt;xref:System.Int32.ToString%2A?displayProperty=nameWithType&gt;</ph>; caso contrário, esse método é equivalente a <ph id="ph3">&lt;xref:System.Int64.ToString%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.IntPtr.ToString(System.String)">
          <source>A format specification that governs how the current <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> object is converted.</source>
          <target state="translated">Uma especificação de formato que controla como o atual objeto <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> é convertido.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.IntPtr.ToString(System.String)">
          <source>Converts the numeric value of the current <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> object to its equivalent string representation.</source>
          <target state="translated">Converte o valor numérico do objeto <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> atual na representação da cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.IntPtr.ToString(System.String)">
          <source>The string representation of the value of the current <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> object.</source>
          <target state="translated">Uma representação de cadeia de caracteres do valor do atual objeto <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToString(System.String)">
          <source>If the <ph id="ph1">`format`</ph> parameter is <ph id="ph2">`null`</ph> or an empty string (""), the return value is formatted with the general format specifier ("G").</source>
          <target state="translated">Se o <ph id="ph1">`format`</ph> parâmetro é <ph id="ph2">`null`</ph> ou uma cadeia de caracteres vazia (""), o valor de retorno é formatado com o especificador de formato geral ("G").</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToString(System.String)">
          <source>For more information about numeric format specifiers, see the <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> topic.</source>
          <target state="translated">Para obter mais informações sobre especificadores de formato numérico, consulte o <bpt id="p1">[</bpt>cadeias de caracteres de formato numérico padrão<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> tópico.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToString(System.String)">
          <source>The return value is formatted using the invariant culture.</source>
          <target state="translated">O valor de retorno é formatado usando a cultura invariável.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="F:System.IntPtr.Zero">
          <source>A read-only field that represents a pointer or handle that has been initialized to zero.</source>
          <target state="translated">Um campo somente leitura que representa um ponteiro ou identificador que foi inicializado para zero.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IntPtr.Zero">
          <source>The value of this field is not equivalent to <ph id="ph1">`null`</ph>.</source>
          <target state="translated">O valor do campo não é equivalente a <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IntPtr.Zero">
          <source>Use this field to efficiently determine whether an instance of <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> has been set to a value other than zero.</source>
          <target state="translated">Use este campo para determinar com eficiência se uma instância do <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> foi definida como um valor diferente de zero.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IntPtr.Zero">
          <source>For example, assume the variable, ip, is an instance of <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph>.</source>
          <target state="translated">Por exemplo, suponha que a variável de ip, é uma instância de <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IntPtr.Zero">
          <source>You can determine if it has been set by comparing it to the value returned by a constructor, for example: " <ph id="ph1">`if ip != new IntPtr(0)...`</ph> ".</source>
          <target state="translated">Você pode determinar se ele foi definido, comparando-o como o valor retornado por um construtor, por exemplo: " <ph id="ph1">`if ip != new IntPtr(0)...`</ph> ".</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IntPtr.Zero">
          <source>However, invoking a constructor to get an unintialized pointer is inefficient.</source>
          <target state="translated">No entanto, é ineficiente chamar um construtor para obter um ponteiro não inicializado.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IntPtr.Zero">
          <source>It is better to code either " <ph id="ph1">`if ip != IntPtr.Zero...`</ph> ", or " <ph id="ph2">`if !IntPtr.Zero.Equals(ip)...`</ph> ".</source>
          <target state="translated">É melhor codificar um " <ph id="ph1">`if ip != IntPtr.Zero...`</ph> ", ou " <ph id="ph2">`if !IntPtr.Zero.Equals(ip)...`</ph> ".</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IntPtr.Zero">
          <source>When calling the Windows API from managed code, you can pass <ph id="ph1">&lt;xref:System.IntPtr.Zero?displayProperty=nameWithType&gt;</ph> instead of <ph id="ph2">`null`</ph> if an argument is expected to be either a pointer or a <ph id="ph3">`null`</ph>.</source>
          <target state="translated">Ao chamar a API do Windows do código gerenciado, você pode passar <ph id="ph1">&lt;xref:System.IntPtr.Zero?displayProperty=nameWithType&gt;</ph> em vez de <ph id="ph2">`null`</ph> se um argumento deve ser um ponteiro ou um <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IntPtr.Zero">
          <source>For example, the following call to the Windows <ph id="ph1">`CreateFile`</ph> function supplies <ph id="ph2">&lt;xref:System.IntPtr.Zero?displayProperty=nameWithType&gt;</ph> for the <ph id="ph3">`pSecurityAttributes`</ph> and <ph id="ph4">`hTemplateFile`</ph> argument values.</source>
          <target state="translated">Por exemplo, a seguinte chamada para o Windows <ph id="ph1">`CreateFile`</ph> função fontes <ph id="ph2">&lt;xref:System.IntPtr.Zero?displayProperty=nameWithType&gt;</ph> para o <ph id="ph3">`pSecurityAttributes`</ph> e <ph id="ph4">`hTemplateFile`</ph> valores de argumento.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IntPtr.Zero">
          <source>Although <ph id="ph1">&lt;xref:System.IntPtr.Zero&gt;</ph> is equivalent to <ph id="ph2">`null`</ph> for Windows API functions with parameters or return values that can be either pointers or <ph id="ph3">`null`</ph>, <ph id="ph4">&lt;xref:System.IntPtr.Zero&gt;</ph> is not equivalent to <ph id="ph5">`null`</ph>.</source>
          <target state="translated">Embora <ph id="ph1">&lt;xref:System.IntPtr.Zero&gt;</ph> é equivalente a <ph id="ph2">`null`</ph> para funções de API do Windows com parâmetros ou valores de retorno podem ser qualquer um dos ponteiros ou <ph id="ph3">`null`</ph>, <ph id="ph4">&lt;xref:System.IntPtr.Zero&gt;</ph> não é equivalente a <ph id="ph5">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IntPtr.Zero">
          <source>Passing <ph id="ph1">`null`</ph> to the <ph id="ph2">`IntPtr.Zero.Equals`</ph> method always returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Passando <ph id="ph1">`null`</ph> para o <ph id="ph2">`IntPtr.Zero.Equals`</ph> método sempre retornará <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IntPtr.Zero">
          <source>You can also test for a <ph id="ph1">`null`</ph> return value from Windows API function calls that return either a pointer or a <ph id="ph2">`null`</ph> by comparing the returned value with <ph id="ph3">&lt;xref:System.IntPtr.Zero?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Você também pode testar uma <ph id="ph1">`null`</ph> valor de retorno de chamadas de função de API do Windows que retornam um ponteiro ou um <ph id="ph2">`null`</ph> comparando o valor retornado com <ph id="ph3">&lt;xref:System.IntPtr.Zero?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IntPtr.Zero">
          <source>For example, the call to the <ph id="ph1">`GetWindow`</ph> function in the following example tries to retrieve the handle of a non-existent window.</source>
          <target state="translated">Por exemplo, a chamada para o <ph id="ph1">`GetWindow`</ph> função no exemplo a seguir tenta recuperar o identificador de uma janela inexistente.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IntPtr.Zero">
          <source>If it were called from unmanaged code, the function would return <ph id="ph1">`null`</ph>, but when it is called from managed code, it returns <ph id="ph2">&lt;xref:System.IntPtr.Zero?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Se ele tiver sido chamado de código não gerenciado, a função retornará <ph id="ph1">`null`</ph>, mas quando ele é chamado de código gerenciado, ele retorna <ph id="ph2">&lt;xref:System.IntPtr.Zero?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>