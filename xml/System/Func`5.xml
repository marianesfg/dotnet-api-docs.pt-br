<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Func`5.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac55f9fcdd7976b46b8a2b75779942f1bae4994ab8f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5f9fcdd7976b46b8a2b75779942f1bae4994ab8f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`5">
          <source>The type of the first parameter of the method that this delegate encapsulates.</source>
          <target state="translated">O tipo do primeiro parâmetro do método encapsulado por esse delegado.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`5">
          <source>The type of the second parameter of the method that this delegate encapsulates.</source>
          <target state="translated">O tipo do segundo parâmetro do método encapsulado por esse delegado.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`5">
          <source>The type of the third parameter of the method that this delegate encapsulates.</source>
          <target state="translated">O tipo do terceiro parâmetro do método encapsulado por esse delegado.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`5">
          <source>The type of the fourth parameter of the method that this delegate encapsulates.</source>
          <target state="translated">O tipo do quarto parâmetro do método encapsulado por esse delegado.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`5">
          <source>The type of the return value of the method that this delegate encapsulates.</source>
          <target state="translated">O tipo do valor retornado do método encapsulado por esse delegado.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="T:System.Func`5">
          <source>The first parameter of the method that this delegate encapsulates.</source>
          <target state="translated">O primeiro parâmetro do método encapsulado por esse delegado.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="T:System.Func`5">
          <source>The second parameter of the method that this delegate encapsulates.</source>
          <target state="translated">O segundo parâmetro do método encapsulado por esse delegado.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="T:System.Func`5">
          <source>The third parameter of the method that this delegate encapsulates.</source>
          <target state="translated">O terceiro parâmetro do método encapsulado por esse delegado.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="T:System.Func`5">
          <source>The fourth parameter of the method that this delegate encapsulates.</source>
          <target state="translated">O quarto parâmetro do método encapsulado por esse delegado.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="T:System.Func`5">
          <source>Encapsulates a method that has four parameters and returns a value of the type specified by the <ph id="ph1">&lt;typeparamref name="TResult" /&gt;</ph> parameter.</source>
          <target state="translated">Encapsula um método que tem quatro parâmetros e retorna um valor do tipo especificado pelo parâmetro <ph id="ph1">&lt;typeparamref name="TResult" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="T:System.Func`5">
          <source>The return value of the method that this delegate encapsulates.</source>
          <target state="translated">O valor retornado do método encapsulado por esse delegado.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`5">
          <source>You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</source>
          <target state="translated">Você pode usar este delegado para representar um método que pode ser passado como um parâmetro sem declarar explicitamente um delegado personalizado.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`5">
          <source>The encapsulated method must correspond to the method signature that is defined by this delegate.</source>
          <target state="translated">O método encapsulado deve corresponder à assinatura do método que é definida por este delegado.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`5">
          <source>This means that the encapsulated method must have four parameters, each of which is passed to it by value, and that it must return a value.</source>
          <target state="translated">Isso significa que o método encapsulado deve ter quatro parâmetros, cada um deles é passada a ele por valor, e que ele deve retornar um valor.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`5">
          <source>To reference a method that has four parameters and returns <ph id="ph1">`void`</ph> (or in Visual Basic, that is declared as a <ph id="ph2">`Sub`</ph> rather than as a <ph id="ph3">`Function`</ph>), use the generic <ph id="ph4">&lt;xref:System.Action%604&gt;</ph> delegate instead.</source>
          <target state="translated">Para fazer referência a um método que tem quatro parâmetros e retorna <ph id="ph1">`void`</ph> (ou no Visual Basic, que é declarado como um <ph id="ph2">`Sub`</ph> em vez de como um <ph id="ph3">`Function`</ph>), use o genérico <ph id="ph4">&lt;xref:System.Action%604&gt;</ph> delegado em vez disso.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`5">
          <source>When you use the <ph id="ph1">&lt;xref:System.Func%605&gt;</ph> delegate, you do not have to explicitly define a delegate that encapsulates a method with four parameters.</source>
          <target state="translated">Quando você usa o <ph id="ph1">&lt;xref:System.Func%605&gt;</ph> delegado, você não precisa definir explicitamente um delegado que encapsula um método com quatro parâmetros.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`5">
          <source>For example, the following code explicitly declares a generic delegate named <ph id="ph1">`Searcher`</ph> and assigns a reference to the <ph id="ph2">&lt;xref:System.String.IndexOf%2A&gt;</ph> method to its delegate instance.</source>
          <target state="translated">Por exemplo, o código a seguir declara um delegate genérico chamado explicitamente <ph id="ph1">`Searcher`</ph> e atribui uma referência para o <ph id="ph2">&lt;xref:System.String.IndexOf%2A&gt;</ph> método para sua instância de delegado.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`5">
          <source>The following example simplifies this code by instantiating the <ph id="ph1">&lt;xref:System.Func%605&gt;</ph> delegate instead of explicitly defining a new delegate and assigning a named method to it.</source>
          <target state="translated">O exemplo a seguir simplifica esse código instanciando a <ph id="ph1">&lt;xref:System.Func%605&gt;</ph> delegado em vez de definir um novo delegado explicitamente e atribuí-lo um método nomeado.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`5">
          <source>You can use the <ph id="ph1">&lt;xref:System.Func%605&gt;</ph> delegate with anonymous methods in C#, as the following example illustrates.</source>
          <target state="translated">Você pode usar o <ph id="ph1">&lt;xref:System.Func%605&gt;</ph> delegar com métodos anônimos em c#, como mostra o exemplo a seguir.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`5">
          <source>(For an introduction to anonymous methods, see <bpt id="p1">[</bpt>Anonymous Methods<ept id="p1">](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>.)</source>
          <target state="translated">(Para obter uma introdução aos métodos anônimos, consulte <bpt id="p1">[</bpt>métodos anônimos<ept id="p1">](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`5">
          <source>You can also assign a lambda expression to a <ph id="ph1">&lt;xref:System.Func%605&gt;</ph> delegate, as the following example illustrates.</source>
          <target state="translated">Você também pode atribuir uma expressão lambda para uma <ph id="ph1">&lt;xref:System.Func%605&gt;</ph> delegado, como mostra o exemplo a seguir.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`5">
          <source>(For an introduction to lambda expressions, see <bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept> and <bpt id="p2">[</bpt>Lambda Expressions<ept id="p2">](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>.)</source>
          <target state="translated">(Para obter uma introdução a expressões lambda, consulte <bpt id="p1">[</bpt>expressões Lambda<ept id="p1">](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept> e <bpt id="p2">[</bpt>expressões Lambda<ept id="p2">](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`5">
          <source>The underlying type of a lambda expression is one of the generic <ph id="ph1">`Func`</ph> delegates.</source>
          <target state="translated">O tipo subjacente de uma expressão lambda é um dos genérica <ph id="ph1">`Func`</ph> delegados.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`5">
          <source>This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</source>
          <target state="translated">Isso torna possível passar uma expressão lambda como um parâmetro sem explicitamente atribuí-lo a um delegado.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`5">
          <source>In particular, because many methods of types in the <ph id="ph1">&lt;xref:System.Linq&gt;</ph> namespace have <ph id="ph2">`Func`</ph> parameters, you can pass these methods a lambda expression without explicitly instantiating a <ph id="ph3">`Func`</ph> delegate.</source>
          <target state="translated">Em particular, porque muitos métodos de tipos no <ph id="ph1">&lt;xref:System.Linq&gt;</ph> namespace ter <ph id="ph2">`Func`</ph> parâmetros, você pode passar esses métodos de uma expressão lambda sem instanciar explicitamente um <ph id="ph3">`Func`</ph> delegar.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`5">
          <source>The following example demonstrates how to declare and use a <ph id="ph1">&lt;xref:System.Func%603&gt;</ph> delegate.</source>
          <target state="translated">O exemplo a seguir demonstra como declarar e usar um <ph id="ph1">&lt;xref:System.Func%603&gt;</ph> delegate.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`5">
          <source>This example declares a <ph id="ph1">&lt;xref:System.Func%603&gt;</ph> variable and assigns it a lambda expression that takes a <ph id="ph2">&lt;xref:System.String&gt;</ph> value and an <ph id="ph3">&lt;xref:System.Int32&gt;</ph> value as parameters.</source>
          <target state="translated">Este exemplo declara um <ph id="ph1">&lt;xref:System.Func%603&gt;</ph> variável e atribui uma expressão lambda que leva um <ph id="ph2">&lt;xref:System.String&gt;</ph> valor e um <ph id="ph3">&lt;xref:System.Int32&gt;</ph> valor como parâmetros.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`5">
          <source>The lambda expression returns <ph id="ph1">`true`</ph> if the length of the <ph id="ph2">&lt;xref:System.String&gt;</ph> parameter is equal to the value of the <ph id="ph3">&lt;xref:System.Int32&gt;</ph> parameter.</source>
          <target state="translated">Retorna a expressão lambda <ph id="ph1">`true`</ph> se o comprimento do <ph id="ph2">&lt;xref:System.String&gt;</ph> parâmetro for igual ao valor da <ph id="ph3">&lt;xref:System.Int32&gt;</ph> parâmetro.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`5">
          <source>The delegate that encapsulates this method is subsequently used in a query to filter strings in an array of strings.</source>
          <target state="translated">O delegado que encapsula esse método é usado posteriormente em uma consulta em cadeias de caracteres de filtro em uma matriz de cadeias de caracteres.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>