<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="WeakReference.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c0d4836429712734d47bb9c53ee59e9a0dd4d9f0.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c0d4836429712734d47bb9c53ee59e9a0dd4d9f0</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.WeakReference">
          <source>Represents a weak reference, which references an object while still allowing that object to be reclaimed by garbage collection.</source>
          <target state="translated">Representa uma referência fraca, que faz referência a um objeto enquanto ainda permite que esse objeto seja recuperada pela coleta de lixo.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>A weak reference allows the garbage collector to collect an object while still allowing an application to access the object.</source>
          <target state="translated">Uma referência fraca permite que o coletor de lixo coletar um objeto enquanto ainda permite que um aplicativo acessar o objeto.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>If you need the object, you can still obtain a strong reference to it and prevent it from being collected.</source>
          <target state="translated">Se você precisar do objeto, pode obter uma referência forte a ele e impedir que ele seja coletado.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>For more information about how to use short and long weak references, see <bpt id="p1">[</bpt>Weak References<ept id="p1">](~/docs/standard/garbage-collection/weak-references.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre como usar curto e longo fracas referências, consulte <bpt id="p1">[</bpt>referências fracas<ept id="p1">](~/docs/standard/garbage-collection/weak-references.md)</ept>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>The following example demonstrates how you can use weak references to maintain a cache of objects as a resource for an application.</source>
          <target state="translated">O exemplo a seguir demonstra como você pode usar referências fracas para manter um cache de objetos como um recurso de um aplicativo.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>The cache is constructed using an <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> of <ph id="ph2">&lt;xref:System.WeakReference&gt;</ph> objects keyed by an index value.</source>
          <target state="translated">O cache é construído usando um <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> de <ph id="ph2">&lt;xref:System.WeakReference&gt;</ph> objetos chaveados por um valor de índice.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>The <ph id="ph1">&lt;xref:System.WeakReference.Target%2A&gt;</ph> property for the <ph id="ph2">&lt;xref:System.WeakReference&gt;</ph> objects is an object in a byte array that represents data.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.WeakReference.Target%2A&gt;</ph> propriedade para o <ph id="ph2">&lt;xref:System.WeakReference&gt;</ph> objetos é um objeto em uma matriz de bytes que representa os dados.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>The example randomly accesses objects in the cache.</source>
          <target state="translated">O exemplo aleatoriamente acessa objetos no cache.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>If an object is reclaimed for garbage collection, a new data object is regenerated; otherwise, the object is available to access because of the weak reference.</source>
          <target state="translated">Se um objeto é recuperado para coleta de lixo, um novo objeto de dados é regenerado; Caso contrário, o objeto está disponível para acessar devido a referência fraca.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>for the ability to call unmanaged code.</source>
          <target state="translated">para a capacidade de chamar código não gerenciado.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>Demand value: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" /&gt;</ph>; Permission value: <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">Valor de demanda: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" /&gt;</ph>; Valor de permissão: <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="T:System.WeakReference">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Object)">
          <source>The object to track or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O objeto a ser acompanhado ou <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Object)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> class, referencing the specified object.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph>, fazendo referência ao objeto especificado.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.#ctor(System.Object)">
          <source>This constructor creates a short weak reference to <ph id="ph1">`target`</ph>.</source>
          <target state="translated">Este construtor cria uma referência fraca curta para <ph id="ph1">`target`</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>An object to track.</source>
          <target state="translated">Um objeto a acompanhar.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>Indicates when to stop tracking the object.</source>
          <target state="translated">Indica quando parar de acompanhar o objeto.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the object is tracked after finalization; if <ph id="ph2">&lt;see langword="false" /&gt;</ph>, the object is only tracked until finalization.</source>
          <target state="translated">Se <ph id="ph1">&lt;see langword="true" /&gt;</ph>, o objeto será rastreado após a finalização; se <ph id="ph2">&lt;see langword="false" /&gt;</ph>, o objeto será controlado somente até a finalização.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> class, referencing the specified object and using the specified resurrection tracking.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph>, fazendo referência ao objeto especificado e usando o acompanhamento de ressurreição especificado.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>If <ph id="ph1">`trackResurrection`</ph> is <ph id="ph2">`false`</ph>, a short weak reference is created.</source>
          <target state="translated">Se <ph id="ph1">`trackResurrection`</ph> é <ph id="ph2">`false`</ph>, é criada uma referência fraca curta.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>If <ph id="ph1">`trackResurrection`</ph> is <ph id="ph2">`true`</ph>, a long weak reference is created.</source>
          <target state="translated">Se <ph id="ph1">`trackResurrection`</ph> é <ph id="ph2">`true`</ph>, é criada uma referência fraca longa.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>The following example creates a cache of data objects with short weak references.</source>
          <target state="translated">O exemplo a seguir cria um cache de objetos de dados com referências fracas curtas.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>This example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.WeakReference&gt;</ph> class.</source>
          <target state="translated">Este exemplo é parte de um exemplo maior fornecido para a <ph id="ph1">&lt;xref:System.WeakReference&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>An object that holds all the data needed to serialize or deserialize the current <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> object.</source>
          <target state="translated">Um objeto que contém todos os dados necessários para serializar ou desserializar o objeto <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>(Reserved) Describes the source and destination of the serialized stream specified by <bpt id="p1">&lt;c&gt;</bpt>info<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">(Reservado) Descreve a origem e o destino do fluxo serializado especificado por <bpt id="p1">&lt;c&gt;</bpt>info<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> class, using deserialized data from the specified serialization and stream objects.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> usando dados desserializados da serialização e dos objetos de fluxo especificados.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">`context`</ph> parameter is reserved, and does not currently participate in this operation.</source>
          <target state="translated">O <ph id="ph1">`context`</ph> parâmetro é reservado e não participar no momento nesta operação.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">&lt;paramref name="info" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="info" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.WeakReference.Finalize">
          <source>Discards the reference to the target represented by the current <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> object.</source>
          <target state="translated">Descarta a referência ao destino representado pelo objeto <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>An object that holds all the data needed to serialize or deserialize the current <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> object.</source>
          <target state="translated">Um objeto que contém todos os dados necessários para serializar ou desserializar o objeto <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>(Reserved) The location where serialized data is stored and retrieved.</source>
          <target state="translated">(Reservado) O local em que os dados serializados são armazenados e recuperados.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Populates a <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object with all the data needed to serialize the current <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> object.</source>
          <target state="translated">Popula um objeto <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> com todos os dados necessários para serializar o objeto <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This method stores all the information in <ph id="ph1">`info`</ph> necessary to serialize the current <ph id="ph2">&lt;xref:System.WeakReference&gt;</ph> object.</source>
          <target state="translated">Esse método armazena todas as informações em <ph id="ph1">`info`</ph> necessários para serializar atual <ph id="ph2">&lt;xref:System.WeakReference&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">`context`</ph> parameter is reserved and is not currently used in the execution of this method.</source>
          <target state="translated">O <ph id="ph1">`context`</ph> parâmetro é reservado e não está sendo usado na execução deste método.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">&lt;paramref name="info" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="info" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="P:System.WeakReference.IsAlive">
          <source>Gets an indication whether the object referenced by the current <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> object has been garbage collected.</source>
          <target state="translated">Obtém uma indicação se o objeto referenciado pelo objeto <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> atual passou pela coleta de lixo.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.IsAlive">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the object referenced by the current <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> object has not been garbage collected and is still accessible; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o objeto referenciado pelo objeto <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> atual não tiver passado pela coleta de lixo e ainda for acessível; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.IsAlive">
          <source>Because an object could potentially be reclaimed for garbage collection immediately after the <ph id="ph1">&lt;xref:System.WeakReference.IsAlive%2A&gt;</ph> property returns <ph id="ph2">`true`</ph>, using this property is not recommended unless you are testing only for a <ph id="ph3">`false`</ph> return value.</source>
          <target state="translated">Como um objeto potencialmente pode ser recuperado para coleta de lixo imediatamente após o <ph id="ph1">&lt;xref:System.WeakReference.IsAlive%2A&gt;</ph> propriedade retorna <ph id="ph2">`true`</ph>, não é recomendável usar essa propriedade, a menos que você está testando somente para um <ph id="ph3">`false`</ph> valor de retorno.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="P:System.WeakReference.Target">
          <source>Gets or sets the object (the target) referenced by the current <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> object.</source>
          <target state="translated">Obtém ou define o objeto (o destino) referenciado pelo objeto <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.Target">
          <source><ph id="ph1">&lt;see langword="null" /&gt;</ph> if the object referenced by the current <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> object has been garbage collected; otherwise, a reference to the object referenced by the current <ph id="ph3">&lt;see cref="T:System.WeakReference" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="null" /&gt;</ph> se o objeto referenciado pelo objeto <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> atual passou pela coleta de lixo; caso contrário, uma referência ao objeto referenciado pelo objeto <ph id="ph3">&lt;see cref="T:System.WeakReference" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.Target">
          <source>After setting this property to the target object, make sure that there are no other strong references to the object; otherwise, it will not be collected.</source>
          <target state="translated">Depois de definir esta propriedade para o objeto de destino, certifique-se de que não há nenhuma referência forte para o objeto; Caso contrário, ele não será coletado.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.Target">
          <source>The following example tries to obtain an object from a cache of objects with weak references.</source>
          <target state="translated">O exemplo a seguir tenta obter um objeto de um cache de objetos com referências fracas.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.Target">
          <source>If the object was reclaimed for garbage collection, a new object is generated.</source>
          <target state="translated">Se o objeto foi recuperado para coleta de lixo, um novo objeto será gerado.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.Target">
          <source>This example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.WeakReference&gt;</ph> class.</source>
          <target state="translated">Este exemplo é parte de um exemplo maior fornecido para a <ph id="ph1">&lt;xref:System.WeakReference&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="P:System.WeakReference.Target">
          <source>The reference to the target object is invalid.</source>
          <target state="translated">A referência ao objeto de destino é inválida.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="P:System.WeakReference.Target">
          <source>This exception can be thrown while setting this property if the value is a null reference or if the object has been finalized during the set operation.</source>
          <target state="translated">Essa exceção pode ser gerada ao configurar essa propriedade se o valor for uma referência nula ou se o objeto tiver sido finalizado durante a operação de conjuntos.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="P:System.WeakReference.TrackResurrection">
          <source>Gets an indication whether the object referenced by the current <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> object is tracked after it is finalized.</source>
          <target state="translated">Obtém uma indicação se o objeto referenciado pelo objeto <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> atual é acompanhado depois de finalizado.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.TrackResurrection">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the object the current <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> object refers to is tracked after finalization; or <ph id="ph3">&lt;see langword="false" /&gt;</ph> if the object is only tracked until finalization.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o objeto ao qual o objeto <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> atual se refere for acompanhado após a finalização; ou <ph id="ph3">&lt;see langword="false" /&gt;</ph> se o objeto somente for acompanhado até a finalização.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.TrackResurrection">
          <source>If <ph id="ph1">`true`</ph>, the weak reference is a long weak reference and <ph id="ph2">`true`</ph> was specified for the <ph id="ph3">`trackResurrection`</ph> parameter in the <ph id="ph4">&lt;xref:System.WeakReference&gt;</ph> constructor.</source>
          <target state="translated">Se <ph id="ph1">`true`</ph>, a referência fraca é uma referência fraca longa e <ph id="ph2">`true`</ph> foi especificado para o <ph id="ph3">`trackResurrection`</ph> parâmetro o <ph id="ph4">&lt;xref:System.WeakReference&gt;</ph> construtor.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>