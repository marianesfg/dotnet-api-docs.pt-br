<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IEquatable`1.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac519bc49f94beee1a3c075a5ffa5eaa52f9c90027f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">19bc49f94beee1a3c075a5ffa5eaa52f9c90027f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>The type of objects to compare.</source>
          <target state="translated">O tipo de objetos a serem comparados.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.IEquatable`1">
          <source>Defines a generalized method that a value type or class implements to create a type-specific method for determining equality of instances.</source>
          <target state="translated">Define um método generalizado que implementa uma classe ou um tipo de valor para criar um método de tipo específico para determinar igualdade de instâncias.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>This interface is implemented by types whose values can be equated (for example, the numeric and string classes).</source>
          <target state="translated">Essa interface é implementada por tipos cujos valores podem ser era igual (para classes de exemplo, numéricos e cadeia de caracteres).</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>A value type or class implements the <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method to create a type-specific method suitable for determining equality of instances.</source>
          <target state="translated">Implementa uma classe ou um tipo de valor de <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> método para criar um método específico de tipo adequado para determinar igualdade de instâncias.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>The <ph id="ph1">&lt;xref:System.IComparable%601&gt;</ph> interface defines the <ph id="ph2">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> method, which determines the sort order of instances of the implementing type.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IComparable%601&gt;</ph> interface define o <ph id="ph2">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> método, que determina a ordem de classificação de instâncias do tipo de implementação.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>The <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> interface defines the <ph id="ph2">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method, which determines the equality of instances of the implementing type.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> interface define o <ph id="ph2">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> método, que determina a igualdade de instâncias do tipo de implementação.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>The <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> interface is used by generic collection objects such as <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> when testing for equality in such methods as <ph id="ph5">`Contains`</ph>, <ph id="ph6">`IndexOf`</ph>, <ph id="ph7">`LastIndexOf`</ph>, and <ph id="ph8">`Remove`</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> interface é usada por objetos de coleção genérica, como <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, e <ph id="ph4">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> durante o teste de igualdade em tais métodos como <ph id="ph5">`Contains`</ph>, <ph id="ph6">`IndexOf`</ph>, <ph id="ph7">`LastIndexOf`</ph>, e <ph id="ph8">`Remove`</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>It should be implemented for any object that might be stored in a generic collection.</source>
          <target state="translated">Ele deve ser implementado para qualquer objeto que pode ser armazenado em uma coleção genérica.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>See the example for the <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Consulte o exemplo para o <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>Replace the type parameter of the <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph> interface with the type that is implementing this interface.</source>
          <target state="translated">Substitua o parâmetro de tipo de <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph> interface com o tipo que implementa essa interface.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>If you implement <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>, you should also override the base class implementations of <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.Object.GetHashCode" /&gt;</ph> so that their behavior is consistent with that of the <ph id="ph4">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph> method.</source>
          <target state="translated">Se você implementar <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>, você também deve substituir as implementações de classe base de <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> e <ph id="ph3">&lt;see cref="M:System.Object.GetHashCode" /&gt;</ph> para que seu comportamento é consistente com que o <ph id="ph4">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>If you do override <ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>, your overridden implementation is also called in calls to the static <ph id="ph2">&lt;see langword="Equals(System.Object, System.Object)" /&gt;</ph> method on your class.</source>
          <target state="translated">Se você substituir <ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>, também é chamada de sua implementação substituída em chamadas para estático <ph id="ph2">&lt;see langword="Equals(System.Object, System.Object)" /&gt;</ph> método na sua classe.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>In addition, you should overload the <ph id="ph1">&lt;see langword="op_Equality" /&gt;</ph> and <ph id="ph2">&lt;see langword="op_Inequality" /&gt;</ph> operators.</source>
          <target state="translated">Além disso, você deve sobrecarregar o <ph id="ph1">&lt;see langword="op_Equality" /&gt;</ph> e <ph id="ph2">&lt;see langword="op_Inequality" /&gt;</ph> operadores.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>This ensures that all tests for equality return consistent results.</source>
          <target state="translated">Isso garante que todos os testes de igualdade retornam resultados consistentes.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>For information on overriding <ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>, see the <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> article.</source>
          <target state="translated">Para obter informações sobre substituição de <ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>, consulte o <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> artigo.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>For a value type, you should always implement <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph> and override <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> for better performance.</source>
          <target state="translated">Para um tipo de valor, você sempre deve implementar <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph> e substituir <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> para melhorar o desempenho.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source><ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> boxes value types and relies on reflection to compare two values for equality.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> caixas de tipos de valor e se baseia em reflexão para comparar dois valores para igualdade.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>Both your implementation of <ph id="ph1">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph> and your override of <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> should return consistent results.</source>
          <target state="translated">Ambos os sua implementação de <ph id="ph1">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph> e sua substituição de <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> deve retornar resultados consistentes.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>If you implement <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>, you should also implement <ph id="ph2">&lt;see cref="T:System.IComparable`1" /&gt;</ph> if instances of your type can be ordered or sorted.</source>
          <target state="translated">Se você implementar <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>, você também deve implementar <ph id="ph2">&lt;see cref="T:System.IComparable`1" /&gt;</ph> se instâncias de seu tipo podem ser ordenadas ou classificadas.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>If your type implements <ph id="ph1">&lt;see cref="T:System.IComparable`1" /&gt;</ph>, you almost always also implement <ph id="ph2">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>.</source>
          <target state="translated">Se o tipo implementa <ph id="ph1">&lt;see cref="T:System.IComparable`1" /&gt;</ph>, quase sempre também é implementar <ph id="ph2">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>Note that there are some designs where a type supports an order relation, but equality may be distinct from an ordering relation.</source>
          <target state="translated">Observe que há alguns designs onde um tipo compatível com uma relação de ordem, mas igualdade pode ser diferente de uma relação de pedidos.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>Consider a <ph id="ph1">`Person`</ph> class where you sort alphabetically.</source>
          <target state="translated">Considere um <ph id="ph1">`Person`</ph> classe onde você classificar em ordem alfabética.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>Two people with the same name sort the same, but are not the same person.</source>
          <target state="translated">Duas pessoas com o mesmo nome classifica os mesmos, mas não serão a mesma pessoa.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.IEquatable`1.Equals(`0)">
          <source>An object to compare with this object.</source>
          <target state="translated">Um objeto para comparação com esse objeto.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.IEquatable`1.Equals(`0)">
          <source>Indicates whether the current object is equal to another object of the same type.</source>
          <target state="translated">Indica se o objeto atual é igual a outro objeto do mesmo tipo.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.IEquatable`1.Equals(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current object is equal to the <ph id="ph2">&lt;paramref name="other" /&gt;</ph> parameter; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o objeto atual for igual ao parâmetro <ph id="ph2">&lt;paramref name="other" /&gt;</ph>; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>The implementation of the <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method is intended to perform a test for equality with another object of type <ph id="ph2">`T`</ph>, the same type as the current object.</source>
          <target state="translated">A implementação do <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> método destina-se para executar um teste de igualdade com outro objeto do tipo <ph id="ph2">`T`</ph>, o mesmo tipo que o objeto atual.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>The <ph id="ph1">&lt;xref:System.IEquatable%601.Equals(%600)&gt;</ph> method is called in the following circumstances:</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IEquatable%601.Equals(%600)&gt;</ph> método é chamado nas seguintes circunstâncias:</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>When the <ph id="ph1">`Equals`</ph> method is called and the <ph id="ph2">`other`</ph> argument is a strongly-typed object of type <ph id="ph3">`T`</ph>.</source>
          <target state="translated">Quando o <ph id="ph1">`Equals`</ph> método é chamado e o <ph id="ph2">`other`</ph> argumento é um objeto fortemente tipado do tipo <ph id="ph3">`T`</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>(If <ph id="ph1">`other`</ph> is not of type <ph id="ph2">`T`</ph>, the base <ph id="ph3">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method is called.</source>
          <target state="translated">(Se <ph id="ph1">`other`</ph> não é do tipo <ph id="ph2">`T`</ph>, a base de <ph id="ph3">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> método é chamado.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>Of the two methods, <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType&gt;</ph> offers slightly better performance.)</source>
          <target state="translated">Os dois métodos, <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType&gt;</ph> oferece um pouco melhor desempenho.)</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>When the search methods of a number of generic collection objects are called.</source>
          <target state="translated">Quando são chamados os métodos de pesquisa de um número de objetos de coleção genérica.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>Some of these types and their methods include the following:</source>
          <target state="translated">Alguns desses tipos e seus métodos incluem o seguinte:</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>Some of the generic overloads of the <ph id="ph1">&lt;xref:System.Array.BinarySearch%2A&gt;</ph> method.</source>
          <target state="translated">Algumas das sobrecargas genéricas do <ph id="ph1">&lt;xref:System.Array.BinarySearch%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>The search methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class, including <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Os métodos de pesquisa do <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe, incluindo <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType&gt;</ph>, e <ph id="ph5">&lt;xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>The search methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class, including <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602.Remove%2A&gt;</ph>.</source>
          <target state="translated">Os métodos de pesquisa do <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> classe, incluindo <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A&gt;</ph> e <ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602.Remove%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>The search methods of the generic <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class, including <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Remove%2A&gt;</ph>.</source>
          <target state="translated">Os métodos de pesquisa de genérica <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> classe, incluindo <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType&gt;</ph> e <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Remove%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>In other words, to handle the possibility that objects of a class will be stored in an array or a generic collection object, it is a good idea to implement <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> so that the object can be easily identified and manipulated.</source>
          <target state="translated">Em outras palavras, para lidar com a possibilidade de que os objetos de uma classe serão armazenados em uma matriz ou um objeto de coleção genérica, é recomendável implementar <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> para que o objeto pode ser facilmente identificado e manipulado.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>When implementing the <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method, define equality appropriately for the type specified by the generic type argument.</source>
          <target state="translated">Ao implementar o <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> método, definir a igualdade de forma apropriada para o tipo especificado pelo argumento de tipo genérico.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>For example, if the type argument is <ph id="ph1">&lt;xref:System.Int32&gt;</ph>, define equality appropriately for the comparison of two 32-bit signed integers.</source>
          <target state="translated">Por exemplo, se o argumento de tipo é <ph id="ph1">&lt;xref:System.Int32&gt;</ph>, definir a igualdade adequadamente para a comparação de dois inteiros de 32 bits assinados.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>The following example shows the partial implementation of a <ph id="ph1">`Person`</ph> class that implements <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> and has two properties, <ph id="ph3">`LastName`</ph> and <ph id="ph4">`SSN`</ph>.</source>
          <target state="translated">O exemplo a seguir mostra a implementação parcial de um <ph id="ph1">`Person`</ph> classe que implementa <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> e tem duas propriedades, <ph id="ph3">`LastName`</ph> e <ph id="ph4">`SSN`</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>The <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method returns <ph id="ph2">`True`</ph> if the <ph id="ph3">`SSN`</ph> property of two <ph id="ph4">`Person`</ph> objects is identical; otherwise, it returns <ph id="ph5">`False`</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> método retorna <ph id="ph2">`True`</ph> se o <ph id="ph3">`SSN`</ph> propriedade de dois <ph id="ph4">`Person`</ph> objetos é idêntico; caso contrário, retornará <ph id="ph5">`False`</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source><ph id="ph1">`Person`</ph> objects can then be stored in a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object and can be identified by the <ph id="ph3">`Contains`</ph> method, as the following example shows.</source>
          <target state="translated"><ph id="ph1">`Person`</ph> objetos podem ser armazenados em um <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de objeto e pode ser identificado pelo <ph id="ph3">`Contains`</ph> método, como mostra o exemplo a seguir.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>If you implement <ph id="ph1">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph>, you should also override the base class implementations of <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.Object.GetHashCode" /&gt;</ph> so that their behavior is consistent with that of the <ph id="ph4">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph> method.</source>
          <target state="translated">Se você implementar <ph id="ph1">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph>, você também deve substituir as implementações de classe base de <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> e <ph id="ph3">&lt;see cref="M:System.Object.GetHashCode" /&gt;</ph> para que seu comportamento é consistente com que o <ph id="ph4">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>If you do override <ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>, your overridden implementation is also called in calls to the static <ph id="ph2">&lt;see langword="Equals(System.Object, System.Object)" /&gt;</ph> method on your class.</source>
          <target state="translated">Se você substituir <ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>, também é chamada de sua implementação substituída em chamadas para estático <ph id="ph2">&lt;see langword="Equals(System.Object, System.Object)" /&gt;</ph> método na sua classe.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>In addition, you should overload the <ph id="ph1">&lt;see langword="op_Equality" /&gt;</ph> and <ph id="ph2">&lt;see langword="op_Inequality" /&gt;</ph> operators.</source>
          <target state="translated">Além disso, você deve sobrecarregar o <ph id="ph1">&lt;see langword="op_Equality" /&gt;</ph> e <ph id="ph2">&lt;see langword="op_Inequality" /&gt;</ph> operadores.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>This ensures that all tests for equality return consistent results, which the example illustrates.</source>
          <target state="translated">Isso garante que todos os testes de igualdade retornam resultados consistentes, que ilustra o exemplo.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>