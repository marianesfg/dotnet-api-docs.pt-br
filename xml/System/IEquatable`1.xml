<Type Name="IEquatable&lt;T&gt;" FullName="System.IEquatable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c71b1ce8bef586f2453604f33dc3ca2e6f5af9bc" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="37728033" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEquatable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEquatable`1&lt;T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IEquatable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEquatable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEquatable" />
  <TypeSignature Language="F#" Value="type IEquatable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="27eaf-101">O tipo de objetos a serem comparados.</span>
      <span class="sxs-lookup">
        <span data-stu-id="27eaf-101">The type of objects to compare.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="27eaf-102">Define um método generalizado que implementa uma classe ou um tipo de valor para criar um método de tipo específico para determinar igualdade de instâncias.</span>
      <span class="sxs-lookup">
        <span data-stu-id="27eaf-102">Defines a generalized method that a value type or class implements to create a type-specific method for determining equality of instances.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27eaf-103">Essa interface é implementada pelos tipos cujos valores podem ser equacionados (por exemplo, o numérico e a cadeia de caracteres de classes).</span><span class="sxs-lookup"><span data-stu-id="27eaf-103">This interface is implemented by types whose values can be equated (for example, the numeric and string classes).</span></span> <span data-ttu-id="27eaf-104">Implementa uma classe ou um tipo de valor a <xref:System.IEquatable%601.Equals%2A> método para criar um método específico do tipo adequado para determinar igualdade de instâncias.</span><span class="sxs-lookup"><span data-stu-id="27eaf-104">A value type or class implements the <xref:System.IEquatable%601.Equals%2A> method to create a type-specific method suitable for determining equality of instances.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="27eaf-105">O <xref:System.IComparable%601> interface define o <xref:System.IComparable%601.CompareTo%2A> método, que determina a ordem de classificação de instâncias do tipo de implementação.</span><span class="sxs-lookup"><span data-stu-id="27eaf-105">The <xref:System.IComparable%601> interface defines the <xref:System.IComparable%601.CompareTo%2A> method, which determines the sort order of instances of the implementing type.</span></span> <span data-ttu-id="27eaf-106">O <xref:System.IEquatable%601> interface define o <xref:System.IEquatable%601.Equals%2A> método, que determina a igualdade de instâncias do tipo de implementação.</span><span class="sxs-lookup"><span data-stu-id="27eaf-106">The <xref:System.IEquatable%601> interface defines the <xref:System.IEquatable%601.Equals%2A> method, which determines the equality of instances of the implementing type.</span></span>  
  
 <span data-ttu-id="27eaf-107">O <xref:System.IEquatable%601> interface é usada por objetos de coleção genérica, como <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.Generic.List%601>, e <xref:System.Collections.Generic.LinkedList%601> durante o teste de igualdade em métodos como `Contains`, `IndexOf`, `LastIndexOf`, e `Remove`.</span><span class="sxs-lookup"><span data-stu-id="27eaf-107">The <xref:System.IEquatable%601> interface is used by generic collection objects such as <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.Generic.List%601>, and <xref:System.Collections.Generic.LinkedList%601> when testing for equality in such methods as `Contains`, `IndexOf`, `LastIndexOf`, and `Remove`.</span></span> <span data-ttu-id="27eaf-108">Ele deve ser implementado para qualquer objeto que pode ser armazenado em uma coleção genérica.</span><span class="sxs-lookup"><span data-stu-id="27eaf-108">It should be implemented for any object that might be stored in a generic collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="27eaf-109">Consulte o exemplo para o <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="27eaf-109">See the example for the <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="27eaf-110">
        <para>Substitua o parâmetro de tipo a <see cref="T:System.IEquatable`1" /> interface com o tipo que está implementando essa interface.  Se você implementar <see cref="T:System.IEquatable`1" />, você também deve substituir as implementações de classe base das <see cref="M:System.Object.Equals(System.Object)" /> e <see cref="M:System.Object.GetHashCode" /> para que seu comportamento é consistente com a do <see cref="M:System.IEquatable`1.Equals(`0)" /> método. Se você substituir <see cref="M:System.Object.Equals(System.Object)" />, sua implementação substituída também é chamada em chamadas para estático <see langword="Equals(System.Object, System.Object)" /> método em sua classe. Além disso, você deve sobrecarregar o <see langword="op_Equality" /> e <see langword="op_Inequality" /> operadores. Isso garante que todos os testes de igualdade retornem resultados consistentes.  <block subset="none" type="note"><para> Para obter informações sobre a substituição <see cref="M:System.Object.Equals(System.Object)" />, consulte o <see cref="M:System.Object.Equals(System.Object)" /> artigo.  </para></block>  Para um tipo de valor, você sempre deve implementar <see cref="T:System.IEquatable`1" /> e substituir <see cref="M:System.Object.Equals(System.Object)" /> para melhorar o desempenho. <see cref="M:System.Object.Equals(System.Object)" /> caixas de tipos de valor e se baseia em reflexão para comparar dois valores quanto à igualdade. Ambos os sua implementação de <see cref="M:System.IEquatable`1.Equals(`0)" /> e sua substituição do <see cref="M:System.Object.Equals(System.Object)" /> deve retornar resultados consistentes.  Se você implementar <see cref="T:System.IEquatable`1" />, você também deve implementar <see cref="T:System.IComparable`1" /> se instâncias de seu tipo podem ser ordenadas ou classificadas. Se o tipo implementa <see cref="T:System.IComparable`1" />, você quase sempre também implementar <see cref="T:System.IEquatable`1" />.</para>
        <para>Observe que há alguns designs, onde um tipo dá suporte a uma relação de ordem, mas igualdade pode ser distinta de uma relação de ordenação. Considere um `Person` classe onde você classificar em ordem alfabética. Duas pessoas com o mesmo nome classificar os mesmos, mas não serão a mesma pessoa.</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="27eaf-110">
          <para>Replace the type parameter of the <see cref="T:System.IEquatable`1" /> interface with the type that is implementing this interface.  If you implement <see cref="T:System.IEquatable`1" />, you should also override the base class implementations of <see cref="M:System.Object.Equals(System.Object)" /> and <see cref="M:System.Object.GetHashCode" /> so that their behavior is consistent with that of the <see cref="M:System.IEquatable`1.Equals(`0)" /> method. If you do override <see cref="M:System.Object.Equals(System.Object)" />, your overridden implementation is also called in calls to the static <see langword="Equals(System.Object, System.Object)" /> method on your class. In addition, you should overload the <see langword="op_Equality" /> and <see langword="op_Inequality" /> operators. This ensures that all tests for equality return consistent results.  <block subset="none" type="note"><para> For information on overriding <see cref="M:System.Object.Equals(System.Object)" />, see the <see cref="M:System.Object.Equals(System.Object)" /> article.  </para></block>  For a value type, you should always implement <see cref="T:System.IEquatable`1" /> and override <see cref="M:System.Object.Equals(System.Object)" /> for better performance. <see cref="M:System.Object.Equals(System.Object)" /> boxes value types and relies on reflection to compare two values for equality. Both your implementation of <see cref="M:System.IEquatable`1.Equals(`0)" /> and your override of <see cref="M:System.Object.Equals(System.Object)" /> should return consistent results.  If you implement <see cref="T:System.IEquatable`1" />, you should also implement <see cref="T:System.IComparable`1" /> if instances of your type can be ordered or sorted. If your type implements <see cref="T:System.IComparable`1" />, you almost always also implement <see cref="T:System.IEquatable`1" />.</para>
          <para>Note that there are some designs where a type supports an order relation, but equality may be distinct from an ordering relation. Consider a `Person` class where you sort alphabetically. Two people with the same name sort the same, but are not the same person.</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.IComparable" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IEquatable`1.Equals(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(T other);" />
      <MemberSignature Language="F#" Value="abstract member Equals : 'T -&gt; bool" Usage="iEquatable.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="27eaf-111">Um objeto para comparação com esse objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="27eaf-111">An object to compare with this object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="27eaf-112">Indica se o objeto atual é igual a outro objeto do mesmo tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="27eaf-112">Indicates whether the current object is equal to another object of the same type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="27eaf-113">
            <see langword="true" /> se o objeto atual for igual ao parâmetro <paramref name="other" />; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="27eaf-113">
              <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27eaf-114">A implementação de <xref:System.IEquatable%601.Equals%2A> método destina-se para executar um teste de igualdade com outro objeto do tipo `T`, o mesmo tipo que o objeto atual.</span><span class="sxs-lookup"><span data-stu-id="27eaf-114">The implementation of the <xref:System.IEquatable%601.Equals%2A> method is intended to perform a test for equality with another object of type `T`, the same type as the current object.</span></span> <span data-ttu-id="27eaf-115">O <xref:System.IEquatable%601.Equals(%600)> método é chamado nas seguintes circunstâncias:</span><span class="sxs-lookup"><span data-stu-id="27eaf-115">The <xref:System.IEquatable%601.Equals(%600)> method is called in the following circumstances:</span></span>  
  
-   <span data-ttu-id="27eaf-116">Quando o `Equals` método é chamado e o `other` argumento é um objeto fortemente tipado do tipo `T`.</span><span class="sxs-lookup"><span data-stu-id="27eaf-116">When the `Equals` method is called and the `other` argument is a strongly-typed object of type `T`.</span></span> <span data-ttu-id="27eaf-117">(Se `other` não é do tipo `T`, a base de <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> método é chamado.</span><span class="sxs-lookup"><span data-stu-id="27eaf-117">(If `other` is not of type `T`, the base <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="27eaf-118">Dos dois métodos, <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> oferece um desempenho ligeiramente melhor.)</span><span class="sxs-lookup"><span data-stu-id="27eaf-118">Of the two methods, <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> offers slightly better performance.)</span></span>  
  
-   <span data-ttu-id="27eaf-119">Quando os métodos de pesquisa de um número de objetos de coleção genérica são chamados.</span><span class="sxs-lookup"><span data-stu-id="27eaf-119">When the search methods of a number of generic collection objects are called.</span></span> <span data-ttu-id="27eaf-120">Alguns desses tipos e seus métodos incluem o seguinte:</span><span class="sxs-lookup"><span data-stu-id="27eaf-120">Some of these types and their methods include the following:</span></span>  
  
    -   <span data-ttu-id="27eaf-121">Algumas das sobrecargas genéricas do <xref:System.Array.BinarySearch%2A> método.</span><span class="sxs-lookup"><span data-stu-id="27eaf-121">Some of the generic overloads of the <xref:System.Array.BinarySearch%2A> method.</span></span>  
  
    -   <span data-ttu-id="27eaf-122">Os métodos de pesquisa do <xref:System.Collections.Generic.List%601> classe, incluindo <xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>, e <xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="27eaf-122">The search methods of the <xref:System.Collections.Generic.List%601> class, including <xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>, and <xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>.</span></span>  
  
    -   <span data-ttu-id="27eaf-123">Os métodos de pesquisa do <xref:System.Collections.Generic.Dictionary%602> classe, incluindo <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> e <xref:System.Collections.Generic.IDictionary%602.Remove%2A>.</span><span class="sxs-lookup"><span data-stu-id="27eaf-123">The search methods of the <xref:System.Collections.Generic.Dictionary%602> class, including <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> and <xref:System.Collections.Generic.IDictionary%602.Remove%2A>.</span></span>  
  
    -   <span data-ttu-id="27eaf-124">Os métodos de pesquisa de genéricos <xref:System.Collections.Generic.LinkedList%601> classe, incluindo <xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType> e <xref:System.Collections.Generic.LinkedList%601.Remove%2A>.</span><span class="sxs-lookup"><span data-stu-id="27eaf-124">The search methods of the generic <xref:System.Collections.Generic.LinkedList%601> class, including <xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType> and <xref:System.Collections.Generic.LinkedList%601.Remove%2A>.</span></span>  
  
 <span data-ttu-id="27eaf-125">Em outras palavras, para lidar com a possibilidade de que os objetos de uma classe serão armazenados em uma matriz ou um objeto de coleção genérica, é uma boa ideia implementar <xref:System.IEquatable%601> para que o objeto pode ser facilmente identificado e manipulado.</span><span class="sxs-lookup"><span data-stu-id="27eaf-125">In other words, to handle the possibility that objects of a class will be stored in an array or a generic collection object, it is a good idea to implement <xref:System.IEquatable%601> so that the object can be easily identified and manipulated.</span></span>  
  
 <span data-ttu-id="27eaf-126">Ao implementar o <xref:System.IEquatable%601.Equals%2A> método, definir a igualdade de forma adequada para o tipo especificado pelo argumento de tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="27eaf-126">When implementing the <xref:System.IEquatable%601.Equals%2A> method, define equality appropriately for the type specified by the generic type argument.</span></span> <span data-ttu-id="27eaf-127">Por exemplo, se o argumento de tipo é <xref:System.Int32>, definir a igualdade de forma adequada para a comparação dos dois inteiros com sinal de 32 bits.</span><span class="sxs-lookup"><span data-stu-id="27eaf-127">For example, if the type argument is <xref:System.Int32>, define equality appropriately for the comparison of two 32-bit signed integers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="27eaf-128">O exemplo a seguir mostra a implementação parcial de um `Person` classe que implementa <xref:System.IEquatable%601> e tem duas propriedades, `LastName` e `SSN`.</span><span class="sxs-lookup"><span data-stu-id="27eaf-128">The following example shows the partial implementation of a `Person` class that implements <xref:System.IEquatable%601> and has two properties, `LastName` and `SSN`.</span></span> <span data-ttu-id="27eaf-129">O <xref:System.IEquatable%601.Equals%2A> método retorna `True` se o `SSN` propriedade de dois `Person` objetos idênticos; caso contrário, retornará `False`.</span><span class="sxs-lookup"><span data-stu-id="27eaf-129">The <xref:System.IEquatable%601.Equals%2A> method returns `True` if the `SSN` property of two `Person` objects is identical; otherwise, it returns `False`.</span></span>  
  
 [!code-csharp[System.GenericIEquatable.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/EqualsEx2.cs#3)]
 [!code-vb[System.GenericIEquatable.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/EqualsEx2.vb#3)]  
  
 <span data-ttu-id="27eaf-130">`Person` objetos, em seguida, podem ser armazenados em uma <xref:System.Collections.Generic.List%601> do objeto e pode ser identificado pelo `Contains` método, como mostra o exemplo a seguir.</span><span class="sxs-lookup"><span data-stu-id="27eaf-130">`Person` objects can then be stored in a <xref:System.Collections.Generic.List%601> object and can be identified by the `Contains` method, as the following example shows.</span></span>  
  
 [!code-csharp[System.GenericIEquatable.Equals#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/Snippet12.cs#12)]
 [!code-vb[System.GenericIEquatable.Equals#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/Snippet12.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="27eaf-131">
            <para>Se você implementar <see cref="M:System.IEquatable`1.Equals(`0)" />, você também deve substituir as implementações de classe base das <see cref="M:System.Object.Equals(System.Object)" /> e <see cref="M:System.Object.GetHashCode" /> para que seu comportamento é consistente com a do <see cref="M:System.IEquatable`1.Equals(`0)" /> método. Se você substituir <see cref="M:System.Object.Equals(System.Object)" />, sua implementação substituída também é chamada em chamadas para estático <see langword="Equals(System.Object, System.Object)" /> método em sua classe. Além disso, você deve sobrecarregar o <see langword="op_Equality" /> e <see langword="op_Inequality" /> operadores. Isso garante que todos os testes de igualdade retornem resultados consistentes, que ilustra o exemplo.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="27eaf-131">
              <para>If you implement <see cref="M:System.IEquatable`1.Equals(`0)" />, you should also override the base class implementations of <see cref="M:System.Object.Equals(System.Object)" /> and <see cref="M:System.Object.GetHashCode" /> so that their behavior is consistent with that of the <see cref="M:System.IEquatable`1.Equals(`0)" /> method. If you do override <see cref="M:System.Object.Equals(System.Object)" />, your overridden implementation is also called in calls to the static <see langword="Equals(System.Object, System.Object)" /> method on your class. In addition, you should overload the <see langword="op_Equality" /> and <see langword="op_Inequality" /> operators. This ensures that all tests for equality return consistent results, which the example illustrates.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>