<Type Name="StringComparer" FullName="System.StringComparer">
  <TypeSignature Language="C#" Value="public abstract class StringComparer : System.Collections.Generic.IComparer&lt;string&gt;, System.Collections.Generic.IEqualityComparer&lt;string&gt;, System.Collections.IComparer, System.Collections.IEqualityComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit StringComparer extends System.Object implements class System.Collections.Generic.IComparer`1&lt;string&gt;, class System.Collections.Generic.IEqualityComparer`1&lt;string&gt;, class System.Collections.IComparer, class System.Collections.IEqualityComparer" />
  <TypeSignature Language="DocId" Value="T:System.StringComparer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class StringComparer&#xA;Implements IComparer, IComparer(Of String), IEqualityComparer, IEqualityComparer(Of String)" />
  <TypeSignature Language="C++ CLI" Value="public ref class StringComparer abstract : System::Collections::Generic::IComparer&lt;System::String ^&gt;, System::Collections::Generic::IEqualityComparer&lt;System::String ^&gt;, System::Collections::IComparer, System::Collections::IEqualityComparer" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IComparer&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEqualityComparer&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IComparer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEqualityComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="96aaf-101">Representa uma operação de comparação de cadeia de caracteres que usa regras de comparação ordinal ou com base em cultura e caso específico.</span><span class="sxs-lookup"><span data-stu-id="96aaf-101">Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96aaf-102">Um objeto derivado de <xref:System.StringComparer> classe incorpora as operações de código de hash que levam em conta as regras de comparação específicas de cultura e caso, igualdade e comparação de cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="96aaf-102">An object derived from the <xref:System.StringComparer> class embodies string-based comparison, equality, and hash code operations that take into account both case and culture-specific comparison rules.</span></span> <span data-ttu-id="96aaf-103">Você pode usar o <xref:System.StringComparer> classe para criar uma comparação de tipo específico para classificar os elementos em uma coleção genérica.</span><span class="sxs-lookup"><span data-stu-id="96aaf-103">You can use the <xref:System.StringComparer> class to create a type-specific comparison to sort the elements in a generic collection.</span></span> <span data-ttu-id="96aaf-104">Classes como <xref:System.Collections.Hashtable>, <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.SortedList>, e <xref:System.Collections.Generic.SortedList%602> usar o <xref:System.StringComparer> classe para fins de classificação.</span><span class="sxs-lookup"><span data-stu-id="96aaf-104">Classes such as <xref:System.Collections.Hashtable>, <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.SortedList>, and <xref:System.Collections.Generic.SortedList%602> use the <xref:System.StringComparer> class for sorting purposes.</span></span>  
  
 <span data-ttu-id="96aaf-105">Uma operação de comparação que é representada pelo <xref:System.StringComparer> classe é definida para ser diferencia maiusculas de minúsculas ou maiusculas de minúsculas e usar o word (sensíveis à cultura) ou regras de comparação (sem diferenciação de cultura) ordinal.</span><span class="sxs-lookup"><span data-stu-id="96aaf-105">A comparison operation that is represented by the <xref:System.StringComparer> class is defined to be either case-sensitive or case-insensitive, and use either word (culture-sensitive) or ordinal (culture-insensitive) comparison rules.</span></span> <span data-ttu-id="96aaf-106">Para obter mais informações sobre regras de comparação ordinal e word, consulte <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96aaf-106">For more information about word and ordinal comparison rules, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
## <a name="implemented-properties"></a><span data-ttu-id="96aaf-107">Propriedades implementadas</span><span class="sxs-lookup"><span data-stu-id="96aaf-107">Implemented Properties</span></span>  
 <span data-ttu-id="96aaf-108">Pode ser confuso sobre como usar o <xref:System.StringComparer> propriedades da classe devido a uma contradição aparente.</span><span class="sxs-lookup"><span data-stu-id="96aaf-108">You might be confused about how to use the <xref:System.StringComparer> class properties because of a seeming contradiction.</span></span> <span data-ttu-id="96aaf-109">O <xref:System.StringComparer> classe é declarada `abstract` (`MustInherit` no Visual Basic), que significa que seus membros pode ser chamado apenas em um objeto de uma classe derivada do <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="96aaf-109">The <xref:System.StringComparer> class is declared `abstract` (`MustInherit` in Visual Basic), which means its members can be invoked only on an object of a class derived from the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="96aaf-110">A contradição é que cada propriedade do <xref:System.StringComparer> classe é declarada `static` (`Shared` no Visual Basic), que significa que a propriedade pode ser chamado sem primeiro criar uma classe derivada.</span><span class="sxs-lookup"><span data-stu-id="96aaf-110">The contradiction is that each property of the <xref:System.StringComparer> class is declared `static` (`Shared` in Visual Basic), which means the property can be invoked without first creating a derived class.</span></span>  
  
 <span data-ttu-id="96aaf-111">Você pode chamar um <xref:System.StringComparer> propriedade diretamente porque cada propriedade, na verdade, retorna uma instância de uma classe anônima que é derivada de <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="96aaf-111">You can call a <xref:System.StringComparer> property directly because each property actually returns an instance of an anonymous class that is derived from the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="96aaf-112">Consequentemente, o tipo de cada valor de propriedade é <xref:System.StringComparer>, que é a classe base da classe anônima, não o tipo do anônimo a classe em si.</span><span class="sxs-lookup"><span data-stu-id="96aaf-112">Consequently, the type of each property value is <xref:System.StringComparer>, which is the base class of the anonymous class, not the type of the anonymous class itself.</span></span> <span data-ttu-id="96aaf-113">Cada <xref:System.StringComparer> classe propriedade retorna um <xref:System.StringComparer> objeto que dá suporte a regras predefinidas de caso e comparação.</span><span class="sxs-lookup"><span data-stu-id="96aaf-113">Each <xref:System.StringComparer> class property returns a <xref:System.StringComparer> object that supports predefined case and comparison rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96aaf-114">O exemplo a seguir demonstra as propriedades e o <xref:System.StringComparer.Create%2A> método o <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="96aaf-114">The following example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="96aaf-115">O exemplo ilustra como objetos <xref:System.StringComparer> diferentes classificam três versões da letra I em Latin.</span><span class="sxs-lookup"><span data-stu-id="96aaf-115">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Globalization.CompareOptions" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected StringComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; StringComparer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="96aaf-116">Inicializa uma nova instância da classe <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="96aaf-116">Initializes a new instance of the <see cref="T:System.StringComparer" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="96aaf-117">Compara dois objetos ou cadeias de caracteres e retorna uma indicação de sua ordem de classificação relativa.</span><span class="sxs-lookup"><span data-stu-id="96aaf-117">Compares two objects or strings and returns an indication of their relative sort order.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public int Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compare (x As Object, y As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::Object ^ x, System::Object ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="96aaf-118">Um objeto a ser comparado com <c>Y</c>.</span><span class="sxs-lookup"><span data-stu-id="96aaf-118">An object to compare to <c>y</c>.</span></span></param>
        <param name="y"><span data-ttu-id="96aaf-119">Um objeto a ser comparado com <c>X</c>.</span><span class="sxs-lookup"><span data-stu-id="96aaf-119">An object to compare to <c>x</c>.</span></span></param>
        <summary><span data-ttu-id="96aaf-120">Quando substituído em uma classe derivada, compara dois objetos e retorna uma indicação de sua ordem de classificação relativa.</span><span class="sxs-lookup"><span data-stu-id="96aaf-120">When overridden in a derived class, compares two objects and returns an indication of their relative sort order.</span></span></summary>
        <returns><span data-ttu-id="96aaf-121">Um inteiro assinado que indica os valores relativos de <paramref name="x" /> e <paramref name="y" />, conforme mostrado na tabela a seguir.</span><span class="sxs-lookup"><span data-stu-id="96aaf-121">A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="96aaf-122"><list type="table"><listheader><term> Valor</span><span class="sxs-lookup"><span data-stu-id="96aaf-122"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="96aaf-123"></term><description> Significado</span><span class="sxs-lookup"><span data-stu-id="96aaf-123"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="96aaf-124"></description></listheader><item><term> Menor que zero</span><span class="sxs-lookup"><span data-stu-id="96aaf-124"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="96aaf-125"></term><description><paramref name="x" /> precede <paramref name="y" /> na ordem de classificação.</span><span class="sxs-lookup"><span data-stu-id="96aaf-125"></term><description><paramref name="x" /> precedes  <paramref name="y" /> in the sort order.</span></span>  
  
 <span data-ttu-id="96aaf-126">- ou -</span><span class="sxs-lookup"><span data-stu-id="96aaf-126">-or-</span></span>  
  
 <span data-ttu-id="96aaf-127"><paramref name="x" /> é <see langword="null" /> e <paramref name="y" /> não é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="96aaf-127"><paramref name="x" /> is <see langword="null" /> and <paramref name="y" /> is not <see langword="null" />.</span></span>  
  
 <span data-ttu-id="96aaf-128"></description></item><item><term> Zero</span><span class="sxs-lookup"><span data-stu-id="96aaf-128"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="96aaf-129"></term><description><paramref name="x" /> é igual a <paramref name="y" />.</span><span class="sxs-lookup"><span data-stu-id="96aaf-129"></term><description><paramref name="x" /> is equal to <paramref name="y" />.</span></span>  
  
 <span data-ttu-id="96aaf-130">- ou -</span><span class="sxs-lookup"><span data-stu-id="96aaf-130">-or-</span></span>  
  
 <span data-ttu-id="96aaf-131"><paramref name="x" /> e <paramref name="y" /> são <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="96aaf-131"><paramref name="x" /> and <paramref name="y" /> are both <see langword="null" />.</span></span>  
  
 <span data-ttu-id="96aaf-132"></description></item><item><term> Maior que zero</span><span class="sxs-lookup"><span data-stu-id="96aaf-132"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="96aaf-133"></term><description><paramref name="x" /> segue <paramref name="y" /> na ordem de classificação.</span><span class="sxs-lookup"><span data-stu-id="96aaf-133"></term><description><paramref name="x" /> follows <paramref name="y" /> in the sort order.</span></span>  
  
 <span data-ttu-id="96aaf-134">- ou -</span><span class="sxs-lookup"><span data-stu-id="96aaf-134">-or-</span></span>  
  
 <span data-ttu-id="96aaf-135"><paramref name="y" /> é <see langword="null" /> e <paramref name="x" /> não é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="96aaf-135"><paramref name="y" /> is <see langword="null" /> and <paramref name="x" /> is not <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96aaf-136">O <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> método é um pouco mais eficiente do que o <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> método porque nenhuma conversão do `x` e `y` argumento é necessário para executar a comparação.</span><span class="sxs-lookup"><span data-stu-id="96aaf-136">The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> method because no conversion of the `x` and `y` arguments is needed to perform the comparison.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="96aaf-137">Nem <paramref name="x" /> nem <paramref name="y" /> é um <see cref="T:System.String" /> objeto e nem <paramref name="x" /> nem <paramref name="y" /> implementa a interface <see cref="T:System.IComparable" />.</span><span class="sxs-lookup"><span data-stu-id="96aaf-137">Neither <paramref name="x" /> nor <paramref name="y" /> is a <see cref="T:System.String" /> object, and neither <paramref name="x" /> nor <paramref name="y" /> implements the <see cref="T:System.IComparable" /> interface.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public abstract int Compare (string x, string y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string x, string y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Compare(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Compare (x As String, y As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int Compare(System::String ^ x, System::String ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IComparer`1.Compare(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.String" />
        <Parameter Name="y" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="96aaf-138">Uma cadeia de caracteres a ser comparada com <c>Y</c>.</span><span class="sxs-lookup"><span data-stu-id="96aaf-138">A string to compare to <c>y</c>.</span></span></param>
        <param name="y"><span data-ttu-id="96aaf-139">Uma cadeia de caracteres a ser comparada com <c>X</c>.</span><span class="sxs-lookup"><span data-stu-id="96aaf-139">A string to compare to <c>x</c>.</span></span></param>
        <summary><span data-ttu-id="96aaf-140">Quando substituído em uma classe derivada, compara duas cadeias de caracteres e retorna uma indicação de sua ordem de classificação relativa.</span><span class="sxs-lookup"><span data-stu-id="96aaf-140">When overridden in a derived class, compares two strings and returns an indication of their relative sort order.</span></span></summary>
        <returns><span data-ttu-id="96aaf-141">Um inteiro assinado que indica os valores relativos de <paramref name="x" /> e <paramref name="y" />, conforme mostrado na tabela a seguir.</span><span class="sxs-lookup"><span data-stu-id="96aaf-141">A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="96aaf-142"><list type="table"><listheader><term> Valor</span><span class="sxs-lookup"><span data-stu-id="96aaf-142"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="96aaf-143"></term><description> Significado</span><span class="sxs-lookup"><span data-stu-id="96aaf-143"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="96aaf-144"></description></listheader><item><term> Menor que zero</span><span class="sxs-lookup"><span data-stu-id="96aaf-144"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="96aaf-145"></term><description><paramref name="x" /> precede o <paramref name="y" /> na ordem de classificação.</span><span class="sxs-lookup"><span data-stu-id="96aaf-145"></term><description><paramref name="x" /> precedes <paramref name="y" /> in the sort order.</span></span>  
  
 <span data-ttu-id="96aaf-146">- ou -</span><span class="sxs-lookup"><span data-stu-id="96aaf-146">-or-</span></span>  
  
 <span data-ttu-id="96aaf-147"><paramref name="x" /> é <see langword="null" /> e <paramref name="y" /> não é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="96aaf-147"><paramref name="x" /> is <see langword="null" /> and <paramref name="y" /> is not <see langword="null" />.</span></span>  
  
 <span data-ttu-id="96aaf-148"></description></item><item><term> Zero</span><span class="sxs-lookup"><span data-stu-id="96aaf-148"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="96aaf-149"></term><description><paramref name="x" /> é igual a <paramref name="y" />.</span><span class="sxs-lookup"><span data-stu-id="96aaf-149"></term><description><paramref name="x" /> is equal to <paramref name="y" />.</span></span>  
  
 <span data-ttu-id="96aaf-150">- ou -</span><span class="sxs-lookup"><span data-stu-id="96aaf-150">-or-</span></span>  
  
 <span data-ttu-id="96aaf-151"><paramref name="x" /> e <paramref name="y" /> são <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="96aaf-151"><paramref name="x" /> and <paramref name="y" /> are both <see langword="null" />.</span></span>  
  
 <span data-ttu-id="96aaf-152"></description></item><item><term> Maior que zero</span><span class="sxs-lookup"><span data-stu-id="96aaf-152"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="96aaf-153"></term><description><paramref name="x" /> segue <paramref name="y" /> na ordem de classificação.</span><span class="sxs-lookup"><span data-stu-id="96aaf-153"></term><description><paramref name="x" /> follows <paramref name="y" /> in the sort order.</span></span>  
  
 <span data-ttu-id="96aaf-154">- ou -</span><span class="sxs-lookup"><span data-stu-id="96aaf-154">-or-</span></span>  
  
 <span data-ttu-id="96aaf-155"><paramref name="y" /> é <see langword="null" /> e <paramref name="x" /> não é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="96aaf-155"><paramref name="y" /> is <see langword="null" /> and <paramref name="x" /> is not <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96aaf-156">O <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> método é um pouco mais eficiente do que o <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> método porque nenhuma conversão do `x` e `y` argumento é necessário para executar a comparação.</span><span class="sxs-lookup"><span data-stu-id="96aaf-156">The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> method because no conversion of the `x` and `y` arguments is needed to perform the comparison.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static StringComparer Create (System.Globalization.CultureInfo culture, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer Create(class System.Globalization.CultureInfo culture, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (culture As CultureInfo, ignoreCase As Boolean) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ Create(System::Globalization::CultureInfo ^ culture, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="96aaf-157">Uma cultura cujas regras linguísticas são usadas para executar uma comparação de cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="96aaf-157">A culture whose linguistic rules are used to perform a string comparison.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="96aaf-158"><see langword="true" /> para especificar que as operações de comparação não diferenciam maiúsculas de minúsculas, <see langword="false" /> para especificar que as comparações que diferenciam maiúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="96aaf-158"><see langword="true" /> to specify that comparison operations be case-insensitive; <see langword="false" /> to specify that comparison operations be case-sensitive.</span></span></param>
        <summary><span data-ttu-id="96aaf-159">Cria um objeto <see cref="T:System.StringComparer" /> que compara cadeias de caracteres de acordo com as regras de uma cultura especificada.</span><span class="sxs-lookup"><span data-stu-id="96aaf-159">Creates a <see cref="T:System.StringComparer" /> object that compares strings according to the rules of a specified culture.</span></span></summary>
        <returns><span data-ttu-id="96aaf-160">Um novo objeto <see cref="T:System.StringComparer" /> que realiza comparações de cadeias de caracteres de acordo com as regras de comparação usadas pelo parâmetro <paramref name="culture" /> e a regra de maiúsculas e minúsculas especificada pelo parâmetro <paramref name="ignoreCase" />.</span><span class="sxs-lookup"><span data-stu-id="96aaf-160">A new <see cref="T:System.StringComparer" /> object that performs string comparisons according to the comparison rules used by the <paramref name="culture" /> parameter and the case rule specified by the <paramref name="ignoreCase" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="96aaf-161">O exemplo de código a seguir demonstra as propriedades e o método <xref:System.StringComparer.Create%2A> da classe <xref:System.StringComparer>.</span><span class="sxs-lookup"><span data-stu-id="96aaf-161">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="96aaf-162">O exemplo ilustra como objetos <xref:System.StringComparer> diferentes classificam três versões da letra I em Latin.</span><span class="sxs-lookup"><span data-stu-id="96aaf-162">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96aaf-163"><paramref name="culture" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="96aaf-163"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static StringComparer Create (System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer Create(class System.Globalization.CultureInfo culture, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (culture As CultureInfo, options As CompareOptions) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ Create(System::Globalization::CultureInfo ^ culture, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="culture">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public static StringComparer CurrentCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentCulture As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ CurrentCulture { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="96aaf-164">Obtém um objeto <see cref="T:System.StringComparer" /> que executa uma comparação de cadeia de caracteres que diferencia maiúsculas de minúsculas usando as regras de comparação de palavras da cultura atual.</span><span class="sxs-lookup"><span data-stu-id="96aaf-164">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive string comparison using the word comparison rules of the current culture.</span></span></summary>
        <value><span data-ttu-id="96aaf-165">Um novo objeto <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="96aaf-165">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96aaf-166">O <xref:System.StringComparer> retornado pelo <xref:System.StringComparer.CurrentCulture%2A> propriedade pode ser usada quando as cadeias de caracteres são linguisticamente relevantes.</span><span class="sxs-lookup"><span data-stu-id="96aaf-166">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCulture%2A> property can be used when strings are linguistically relevant.</span></span> <span data-ttu-id="96aaf-167">Por exemplo, se cadeias de caracteres são exibidas para o usuário ou cadeias de caracteres são o resultado da interação do usuário, comparação de cadeia de caracteres sensíveis à cultura deve ser usada para ordenar os dados de cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="96aaf-167">For example, if strings are displayed to the user, or if strings are the result of user interaction, culture-sensitive string comparison should be used to order the string data.</span></span>  
  
 <span data-ttu-id="96aaf-168">A cultura atual é o <xref:System.Globalization.CultureInfo> objeto associado ao segmento atual.</span><span class="sxs-lookup"><span data-stu-id="96aaf-168">The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.</span></span>  
  
 <span data-ttu-id="96aaf-169">O <xref:System.StringComparer.CurrentCulture%2A> propriedade realmente retorna uma instância de uma classe anônima derivada de <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="96aaf-169">The <xref:System.StringComparer.CurrentCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 <span data-ttu-id="96aaf-170">Cada chamada para o <xref:System.StringComparer.CurrentCulture%2A> propriedade `get` acessador retorna um novo <xref:System.StringComparer> objeto, como mostra o código a seguir.</span><span class="sxs-lookup"><span data-stu-id="96aaf-170">Each call to the <xref:System.StringComparer.CurrentCulture%2A> property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows.</span></span>  
  
 [!code-csharp[System.StringComparer.CurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#1)]
 [!code-vb[System.StringComparer.CurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#1)]  
  
 <span data-ttu-id="96aaf-171">Para melhorar o desempenho, você pode armazenar o <xref:System.StringComparer> do objeto em uma variável local em vez de recuperar o valor da <xref:System.StringComparer.CurrentCulture%2A> propriedade várias vezes.</span><span class="sxs-lookup"><span data-stu-id="96aaf-171">To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCulture%2A> property multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96aaf-172">O exemplo de código a seguir demonstra as propriedades e o método <xref:System.StringComparer.Create%2A> da classe <xref:System.StringComparer>.</span><span class="sxs-lookup"><span data-stu-id="96aaf-172">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="96aaf-173">O exemplo ilustra como objetos <xref:System.StringComparer> diferentes classificam três versões da letra I em Latin.</span><span class="sxs-lookup"><span data-stu-id="96aaf-173">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentCultureIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer CurrentCultureIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer CurrentCultureIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.CurrentCultureIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentCultureIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ CurrentCultureIgnoreCase { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="96aaf-174">Obtém um objeto <see cref="T:System.StringComparer" /> que executa comparações de cadeia de caracteres que não diferenciam maiúsculas de minúsculas, usando as regras de comparação de palavras da cultura atual.</span><span class="sxs-lookup"><span data-stu-id="96aaf-174">Gets a <see cref="T:System.StringComparer" /> object that performs case-insensitive string comparisons using the word comparison rules of the current culture.</span></span></summary>
        <value><span data-ttu-id="96aaf-175">Um novo objeto <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="96aaf-175">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96aaf-176">A cultura atual é o <xref:System.Globalization.CultureInfo> objeto associado ao segmento atual.</span><span class="sxs-lookup"><span data-stu-id="96aaf-176">The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.</span></span>  
  
 <span data-ttu-id="96aaf-177">O <xref:System.StringComparer> retornado pelo <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> propriedade pode ser usada quando cadeias de caracteres são linguisticamente relevantes, mas seu caso não.</span><span class="sxs-lookup"><span data-stu-id="96aaf-177">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property can be used when strings are linguistically relevant but their case is not.</span></span> <span data-ttu-id="96aaf-178">Por exemplo, se cadeias de caracteres são exibidas para o usuário, mas caso é importante, sensíveis à cultura, comparação de cadeia de caracteres de maiusculas e minúsculas deve ser usada para ordenar os dados de cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="96aaf-178">For example, if strings are displayed to the user but case is unimportant, culture-sensitive, case-insensitive string comparison should be used to order the string data.</span></span>  
  
 <span data-ttu-id="96aaf-179">O <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> propriedade realmente retorna uma instância de uma classe anônima derivada de <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="96aaf-179">The <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 <span data-ttu-id="96aaf-180">Cada chamada para o <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> propriedade `get` acessador retorna um novo <xref:System.StringComparer> objeto, como mostra o código a seguir.</span><span class="sxs-lookup"><span data-stu-id="96aaf-180">Each call to the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows.</span></span>  
  
 [!code-csharp[System.StringComparer.CurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#2)]
 [!code-vb[System.StringComparer.CurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#2)]  
  
 <span data-ttu-id="96aaf-181">Para melhorar o desempenho, você pode armazenar o <xref:System.StringComparer> do objeto em uma variável local em vez de recuperar o valor da <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> propriedade várias vezes.</span><span class="sxs-lookup"><span data-stu-id="96aaf-181">To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property multiple times.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="96aaf-182">Quando substituído em uma classe derivada, indica se dois objetos ou cadeias de caracteres são iguais.</span><span class="sxs-lookup"><span data-stu-id="96aaf-182">When overridden in a derived class, indicates whether two objects or strings are equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (x As Object, y As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Object ^ x, System::Object ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="96aaf-183">Um objeto a ser comparado com <c>Y</c>.</span><span class="sxs-lookup"><span data-stu-id="96aaf-183">An object to compare to <c>y</c>.</span></span></param>
        <param name="y"><span data-ttu-id="96aaf-184">Um objeto a ser comparado com <c>X</c>.</span><span class="sxs-lookup"><span data-stu-id="96aaf-184">An object to compare to <c>x</c>.</span></span></param>
        <summary><span data-ttu-id="96aaf-185">Quando substituído em uma classe derivada, indica se dois objetos são iguais.</span><span class="sxs-lookup"><span data-stu-id="96aaf-185">When overridden in a derived class, indicates whether two objects are equal.</span></span></summary>
        <returns>
          <span data-ttu-id="96aaf-186"><see langword="true" /> se <paramref name="x" /> e <paramref name="y" /> se referirem ao mesmo objeto ou <paramref name="x" /> e <paramref name="y" /> forem o mesmo tipo de objeto e esses objetos forem iguais ou <paramref name="x" /> e <paramref name="y" /> forem <see langword="null" />; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="96aaf-186"><see langword="true" /> if <paramref name="x" /> and <paramref name="y" /> refer to the same object, or <paramref name="x" /> and <paramref name="y" /> are both the same type of object and those objects are equal, or both <paramref name="x" /> and <paramref name="y" /> are <see langword="null" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96aaf-187">Porque o tempo de execução não tem que converter `x` ou `y` se eles são tipos de valor ou tentar baixá-los para `x` ou `y` em cadeias de caracteres se eles são tipos de referência, o <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> método pode ser um pouco mais eficiente do que o <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> método.</span><span class="sxs-lookup"><span data-stu-id="96aaf-187">Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public abstract bool Equals (string x, string y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(string x, string y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Equals(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Equals (x As String, y As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Equals(System::String ^ x, System::String ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.String" />
        <Parameter Name="y" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="96aaf-188">Uma cadeia de caracteres a ser comparada com <c>Y</c>.</span><span class="sxs-lookup"><span data-stu-id="96aaf-188">A string to compare to <c>y</c>.</span></span></param>
        <param name="y"><span data-ttu-id="96aaf-189">Uma cadeia de caracteres a ser comparada com <c>X</c>.</span><span class="sxs-lookup"><span data-stu-id="96aaf-189">A string to compare to <c>x</c>.</span></span></param>
        <summary><span data-ttu-id="96aaf-190">Quando substituído em uma classe derivada, indica se duas cadeias de caracteres são iguais.</span><span class="sxs-lookup"><span data-stu-id="96aaf-190">When overridden in a derived class, indicates whether two strings are equal.</span></span></summary>
        <returns>
          <span data-ttu-id="96aaf-191"><see langword="true" /> se <paramref name="x" /> e <paramref name="y" /> se referirem ao mesmo objeto, ou <paramref name="x" /> e <paramref name="y" /> forem iguais, ou <paramref name="x" /> e <paramref name="y" /> forem <see langword="null" />; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="96aaf-191"><see langword="true" /> if <paramref name="x" /> and <paramref name="y" /> refer to the same object, or <paramref name="x" /> and <paramref name="y" /> are equal, or <paramref name="x" /> and <paramref name="y" /> are <see langword="null" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96aaf-192">Porque o tempo de execução não tem que converter `x` ou `y` se eles são tipos de valor ou tentar baixá-los para `x` ou `y` em cadeias de caracteres se eles são tipos de referência, o <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> método pode ser um pouco mais eficiente do que o <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> método.</span><span class="sxs-lookup"><span data-stu-id="96aaf-192">Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromComparison">
      <MemberSignature Language="C#" Value="public static StringComparer FromComparison (StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer FromComparison(valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.FromComparison(System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromComparison (comparisonType As StringComparison) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ FromComparison(StringComparison comparisonType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="comparisonType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetHashCode">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="96aaf-193">Quando substituído em uma classe derivada, obtém o código hash para o objeto <see cref="T:System.StringComparer" /> atual.</span><span class="sxs-lookup"><span data-stu-id="96aaf-193">When overridden in a derived class, gets the hash code for the current <see cref="T:System.StringComparer" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.GetHashCode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="96aaf-194">Um objeto.</span><span class="sxs-lookup"><span data-stu-id="96aaf-194">An object.</span></span></param>
        <summary><span data-ttu-id="96aaf-195">Quando substituído em uma classe derivada, obtém o código hash para o objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="96aaf-195">When overridden in a derived class, gets the hash code for the specified object.</span></span></summary>
        <returns><span data-ttu-id="96aaf-196">Um código hash com sinal de 32 bits calculado do valor do parâmetro <paramref name="obj" />.</span><span class="sxs-lookup"><span data-stu-id="96aaf-196">A 32-bit signed hash code calculated from the value of the <paramref name="obj" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96aaf-197">O <xref:System.StringComparer.GetHashCode%28System.String%29> método é mais eficiente do que o <xref:System.StringComparer.GetHashCode%2A> método porque o `obj` parâmetro não tem que ser desencaixotado para executar a operação.</span><span class="sxs-lookup"><span data-stu-id="96aaf-197">The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the <xref:System.StringComparer.GetHashCode%2A> method because the `obj` parameter does not have to be unboxed to perform the operation.</span></span>  
  
 <span data-ttu-id="96aaf-198">O <xref:System.StringComparer.GetHashCode%28System.Object%29> método aloca uma quantidade de memória que é proporcional ao tamanho do `obj` para calcular o código hash de `obj`.</span><span class="sxs-lookup"><span data-stu-id="96aaf-198">The <xref:System.StringComparer.GetHashCode%28System.Object%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`.</span></span> <span data-ttu-id="96aaf-199">No caso de grandes cadeias de caracteres, ao tentar recuperar o código hash pode lançar um <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="96aaf-199">In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="96aaf-200">Em vez disso, você pode usar um algoritmo alternativo que aloca uma quantidade fixa de memória durante o cálculo de códigos hash.</span><span class="sxs-lookup"><span data-stu-id="96aaf-200">Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes.</span></span> <span data-ttu-id="96aaf-201">Para usar esse algoritmo, adicione o [< NetFx45_CultureAwareComparerGetHashCode_LongStrings >](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) elemento para o [ \<tempo de execução >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) seção do arquivo de configuração do aplicativo.</span><span class="sxs-lookup"><span data-stu-id="96aaf-201">To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="96aaf-202">Não há memória suficiente disponível para alocar o buffer necessário para calcular o código hash.</span><span class="sxs-lookup"><span data-stu-id="96aaf-202">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96aaf-203"><paramref name="obj" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="96aaf-203"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="  &#xA;            T:System.ArgumentException"><span data-ttu-id="96aaf-204">Não há memória suficiente disponível para alocar o buffer necessário para calcular o código hash.</span><span class="sxs-lookup"><span data-stu-id="96aaf-204">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public abstract int GetHashCode (string obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(string obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.GetHashCode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetHashCode (obj As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetHashCode(System::String ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="96aaf-205">Uma cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="96aaf-205">A string.</span></span></param>
        <summary><span data-ttu-id="96aaf-206">Quando substituído em uma classe derivada, obtém o código hash para a cadeia de caracteres especificada.</span><span class="sxs-lookup"><span data-stu-id="96aaf-206">When overridden in a derived class, gets the hash code for the specified string.</span></span></summary>
        <returns><span data-ttu-id="96aaf-207">Um código hash com sinal de 32 bits calculado do valor do parâmetro <paramref name="obj" />.</span><span class="sxs-lookup"><span data-stu-id="96aaf-207">A 32-bit signed hash code calculated from the value of the <paramref name="obj" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96aaf-208">O <xref:System.StringComparer.GetHashCode%28System.String%29> método é mais eficiente do que o <xref:System.StringComparer.GetHashCode%28System.Object%29> método porque o `obj` parâmetro não tem que ser desencaixotado para executar a operação.</span><span class="sxs-lookup"><span data-stu-id="96aaf-208">The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the <xref:System.StringComparer.GetHashCode%28System.Object%29> method because the `obj` parameter does not have to be unboxed to perform the operation.</span></span>  
  
 <span data-ttu-id="96aaf-209">O <xref:System.StringComparer.GetHashCode%28System.String%29> método aloca uma quantidade de memória que é proporcional ao tamanho do `obj` para calcular o código hash de `obj`.</span><span class="sxs-lookup"><span data-stu-id="96aaf-209">The <xref:System.StringComparer.GetHashCode%28System.String%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`.</span></span> <span data-ttu-id="96aaf-210">No caso de grandes cadeias de caracteres, ao tentar recuperar o código hash pode lançar um <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="96aaf-210">In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="96aaf-211">Em vez disso, você pode usar um algoritmo alternativo que aloca uma quantidade fixa de memória durante o cálculo de códigos hash.</span><span class="sxs-lookup"><span data-stu-id="96aaf-211">Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes.</span></span> <span data-ttu-id="96aaf-212">Para usar esse algoritmo, adicione o [< NetFx45_CultureAwareComparerGetHashCode_LongStrings >](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) elemento para o [ \<tempo de execução >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) seção do arquivo de configuração do aplicativo.</span><span class="sxs-lookup"><span data-stu-id="96aaf-212">To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="96aaf-213">Não há memória suficiente disponível para alocar o buffer necessário para calcular o código hash.</span><span class="sxs-lookup"><span data-stu-id="96aaf-213">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96aaf-214"><paramref name="obj" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="96aaf-214"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="  &#xA;            T:System.ArgumentException"><span data-ttu-id="96aaf-215">Não há memória suficiente disponível para alocar o buffer necessário para calcular o código hash.</span><span class="sxs-lookup"><span data-stu-id="96aaf-215">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="InvariantCulture">
      <MemberSignature Language="C#" Value="public static StringComparer InvariantCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer InvariantCulture" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.InvariantCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCulture As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ InvariantCulture { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="96aaf-216">Obtém um objeto <see cref="T:System.StringComparer" /> que executa uma comparação de cadeia de caracteres que diferencia maiúsculas de minúsculas usando as regras de comparação de palavras da cultura invariável.</span><span class="sxs-lookup"><span data-stu-id="96aaf-216">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive string comparison using the word comparison rules of the invariant culture.</span></span></summary>
        <value><span data-ttu-id="96aaf-217">Um novo objeto <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="96aaf-217">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96aaf-218">O <xref:System.StringComparer> retornado pelo <xref:System.StringComparer.InvariantCulture%2A> propriedade compara cadeias de caracteres de forma linguisticamente relevante, mas não é adequado para exibição em qualquer cultura específica.</span><span class="sxs-lookup"><span data-stu-id="96aaf-218">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCulture%2A> property compares strings in a linguistically relevant manner, but it is not suitable for display in any particular culture.</span></span> <span data-ttu-id="96aaf-219">Seu aplicativo principal é cadeias de caracteres de ordem de forma que sejam idênticas entre culturas.</span><span class="sxs-lookup"><span data-stu-id="96aaf-219">Its major application is to order strings in a way that will be identical across cultures.</span></span>  
  
 <span data-ttu-id="96aaf-220">A cultura invariável é o <xref:System.Globalization.CultureInfo> objeto retornado pelo <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="96aaf-220">The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.</span></span>  
  
 <span data-ttu-id="96aaf-221">O <xref:System.StringComparer.InvariantCulture%2A> propriedade realmente retorna uma instância de uma classe anônima derivada de <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="96aaf-221">The <xref:System.StringComparer.InvariantCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96aaf-222">O exemplo de código a seguir demonstra as propriedades e o método <xref:System.StringComparer.Create%2A> da classe <xref:System.StringComparer>.</span><span class="sxs-lookup"><span data-stu-id="96aaf-222">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="96aaf-223">O exemplo ilustra como objetos <xref:System.StringComparer> diferentes classificam três versões da letra I em Latin.</span><span class="sxs-lookup"><span data-stu-id="96aaf-223">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvariantCultureIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer InvariantCultureIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer InvariantCultureIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.InvariantCultureIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCultureIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ InvariantCultureIgnoreCase { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="96aaf-224">Obtém um objeto <see cref="T:System.StringComparer" /> que executa uma comparação de cadeia de caracteres que não diferencia maiúsculas de minúsculas usando as regras de comparação de palavras da cultura invariável.</span><span class="sxs-lookup"><span data-stu-id="96aaf-224">Gets a <see cref="T:System.StringComparer" /> object that performs a case-insensitive string comparison using the word comparison rules of the invariant culture.</span></span></summary>
        <value><span data-ttu-id="96aaf-225">Um novo objeto <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="96aaf-225">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96aaf-226">O <xref:System.StringComparer> retornado pelo <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> propriedade compara cadeias de caracteres de forma linguisticamente relevante que diferencia maiusculas de minúsculas, mas não é adequado para exibição em qualquer cultura específica.</span><span class="sxs-lookup"><span data-stu-id="96aaf-226">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property compares strings in a linguistically relevant manner that ignores case, but it is not suitable for display in any particular culture.</span></span> <span data-ttu-id="96aaf-227">Seu aplicativo principal é cadeias de caracteres de ordem de forma que sejam idênticas entre culturas.</span><span class="sxs-lookup"><span data-stu-id="96aaf-227">Its major application is to order strings in a way that will be identical across cultures.</span></span>  
  
 <span data-ttu-id="96aaf-228">A cultura invariável é o <xref:System.Globalization.CultureInfo> objeto retornado pelo <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="96aaf-228">The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.</span></span>  
  
 <span data-ttu-id="96aaf-229">O <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> propriedade realmente retorna uma instância de uma classe anônima derivada de <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="96aaf-229">The <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ordinal">
      <MemberSignature Language="C#" Value="public static StringComparer Ordinal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer Ordinal" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.Ordinal" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Ordinal As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ Ordinal { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="96aaf-230">Obtém um objeto <see cref="T:System.StringComparer" /> que executa uma comparação de cadeia de caracteres ordinais que diferencia maiúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="96aaf-230">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive ordinal string comparison.</span></span></summary>
        <value><span data-ttu-id="96aaf-231">Um objeto <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="96aaf-231">A <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96aaf-232">O <xref:System.StringComparer> retornado pelo <xref:System.StringComparer.Ordinal%2A> propriedade executa uma comparação byte simples que é independente do idioma.</span><span class="sxs-lookup"><span data-stu-id="96aaf-232">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.Ordinal%2A> property performs a simple byte comparison that is independent of language.</span></span> <span data-ttu-id="96aaf-233">Isso é mais apropriado quando a comparação de cadeias de caracteres que são gerados programaticamente ou quando comparar recursos diferencia maiusculas de minúsculas, como senhas.</span><span class="sxs-lookup"><span data-stu-id="96aaf-233">This is most appropriate when comparing strings that are generated programmatically or when comparing case-sensitive resources such as passwords.</span></span>  
  
 <span data-ttu-id="96aaf-234">O <xref:System.StringComparer.Ordinal%2A> propriedade realmente retorna uma instância de uma classe anônima derivada de <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="96aaf-234">The <xref:System.StringComparer.Ordinal%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96aaf-235">O exemplo de código a seguir demonstra as propriedades e o método <xref:System.StringComparer.Create%2A> da classe <xref:System.StringComparer>.</span><span class="sxs-lookup"><span data-stu-id="96aaf-235">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="96aaf-236">O exemplo ilustra como objetos <xref:System.StringComparer> diferentes classificam três versões da letra I em Latin.</span><span class="sxs-lookup"><span data-stu-id="96aaf-236">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrdinalIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer OrdinalIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer OrdinalIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.OrdinalIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property OrdinalIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ OrdinalIgnoreCase { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="96aaf-237">Obtém um objeto <see cref="T:System.StringComparer" /> que executa uma comparação de cadeia de caracteres ordinais que não diferencia maiúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="96aaf-237">Gets a <see cref="T:System.StringComparer" /> object that performs a case-insensitive ordinal string comparison.</span></span></summary>
        <value><span data-ttu-id="96aaf-238">Um objeto <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="96aaf-238">A <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96aaf-239">O <xref:System.StringComparer> retornado pelo <xref:System.StringComparer.OrdinalIgnoreCase%2A> propriedade trata os caracteres em cadeias de caracteres para comparar como se eles foram convertidos em maiusculas usando as convenções da cultura invariável e, em seguida, executa uma comparação de byte simples que é independente do idioma.</span><span class="sxs-lookup"><span data-stu-id="96aaf-239">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.OrdinalIgnoreCase%2A> property treats the characters in the strings to compare as if they were converted to uppercase using the conventions of the invariant culture, and then performs a simple byte comparison that is independent of language.</span></span> <span data-ttu-id="96aaf-240">Isso é mais apropriado quando Comparando cadeias de caracteres que são gerados por meio de programação ou quando comparar recursos maiusculas de minúsculas, como caminhos e nomes de arquivo.</span><span class="sxs-lookup"><span data-stu-id="96aaf-240">This is most appropriate when comparing strings that are generated programmatically or when comparing case-insensitive resources such as paths and filenames.</span></span>  
  
 <span data-ttu-id="96aaf-241">O <xref:System.StringComparer.OrdinalIgnoreCase%2A> propriedade realmente retorna uma instância de uma classe anônima derivada de <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="96aaf-241">The <xref:System.StringComparer.OrdinalIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96aaf-242">O exemplo de código a seguir demonstra as propriedades e o método <xref:System.StringComparer.Create%2A> da classe <xref:System.StringComparer>.</span><span class="sxs-lookup"><span data-stu-id="96aaf-242">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="96aaf-243">O exemplo ilustra como objetos <xref:System.StringComparer> diferentes classificam três versões da letra I em Latin.</span><span class="sxs-lookup"><span data-stu-id="96aaf-243">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IComparer.Compare">
      <MemberSignature Language="C#" Value="int IComparer.Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IComparer.Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IComparer#Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Compare (x As Object, y As Object) As Integer Implements IComparer.Compare" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IComparer.Compare(System::Object ^ x, System::Object ^ y) = System::Collections::IComparer::Compare;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.Equals">
      <MemberSignature Language="C#" Value="bool IEqualityComparer.Equals (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IEqualityComparer.Equals(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (x As Object, y As Object) As Boolean Implements IEqualityComparer.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IEqualityComparer.Equals(System::Object ^ x, System::Object ^ y) = System::Collections::IEqualityComparer::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.GetHashCode">
      <MemberSignature Language="C#" Value="int IEqualityComparer.GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IEqualityComparer.GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (obj As Object) As Integer Implements IEqualityComparer.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IEqualityComparer.GetHashCode(System::Object ^ obj) = System::Collections::IEqualityComparer::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.GetHashCode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>