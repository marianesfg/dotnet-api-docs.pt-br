<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AppDomain.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c3ab234edad8a65f7b4b6688da32990c9642f79d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c3ab234edad8a65f7b4b6688da32990c9642f79d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.AppDomain">
          <source>Represents an application domain, which is an isolated environment where applications execute.</source>
          <target state="translated">Representa um domínio de aplicativo, que é um ambiente isolado em que os aplicativos são executados.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.AppDomain">
          <source>This class cannot be inherited.</source>
          <target state="translated">Essa classe não pode ser herdada.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomain">
          <source>Application domains, which are represented by <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> objects, help provide isolation, unloading, and security boundaries for executing managed code.</source>
          <target state="translated">Domínios de aplicativo, que são representados por <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> objetos, ajuda a fornecer limites, descarregamento, segurança e isolamento para código gerenciado em execução.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomain">
          <source>Use application domains to isolate tasks that might bring down a process.</source>
          <target state="translated">Use domínios de aplicativo para isolar as tarefas que podem colocar um processo.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomain">
          <source>If the state of the <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> that's executing a task becomes unstable, the <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> can be unloaded without affecting the process.</source>
          <target state="translated">Se o estado do <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> que está executando uma tarefa torna-se instável, a <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> pode ser descarregado sem afetar o processo.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomain">
          <source>This is important when a process must run for long periods without restarting.</source>
          <target state="translated">Isso é importante quando um processo deve ser executado por longos períodos sem reiniciar.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomain">
          <source>You can also use application domains to isolate tasks that should not share data.</source>
          <target state="translated">Você também pode usar domínios de aplicativo para isolar as tarefas que não devem compartilhar dados.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomain">
          <source>If an assembly is loaded into the default application domain, it cannot be unloaded from memory while the process is running.</source>
          <target state="translated">Se um assembly é carregado no domínio de aplicativo padrão, ele não pode ser descarregado da memória enquanto o processo está em execução.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomain">
          <source>However, if you open a second application domain to load and execute the assembly, the assembly is unloaded when that application domain is unloaded.</source>
          <target state="translated">No entanto, se você abrir um segundo domínio de aplicativo para carregar e executar o assembly, o assembly é descarregado quando o domínio de aplicativo é descarregado.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomain">
          <source>Use this technique to minimize the working set of long-running processes that occasionally use large DLLs.</source>
          <target state="translated">Use essa técnica para minimizar o conjunto de trabalho de processos de execução demorada que usam ocasionalmente DLLs grandes.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomain">
          <source>Multiple application domains can run in a single process; however, there is not a one-to-one correlation between application domains and threads.</source>
          <target state="translated">Vários domínios de aplicativo podem executar em um único processo; No entanto, não há uma correlação entre domínios de aplicativo e segmentos.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomain">
          <source>Several threads can belong to a single application domain, and while a given thread is not confined to a single application domain, at any given time, a thread executes in a single application domain.</source>
          <target state="translated">Vários threads podem pertencer a um único domínio de aplicativo e, enquanto um determinado thread não está limitado a um único domínio de aplicativo, a qualquer momento determinado, um thread é executado em um único domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomain">
          <source>Application domains are created using the <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%2A&gt;</ph> method.</source>
          <target state="translated">Domínios de aplicativo são criados usando o <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomain">
          <source><ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> instances are used to load and execute assemblies (<ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> instâncias são usadas para carregar e executar assemblies (<ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomain">
          <source>When an <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> is no longer in use, it can be unloaded.</source>
          <target state="translated">Quando um <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> é não mais em uso, ele pode ser descarregado.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomain">
          <source>The <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> class implements a set of events that enable applications to respond when an assembly is loaded, when an application domain will be unloaded, or when an unhandled exception is thrown.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> classe implementa um conjunto de eventos que habilitam aplicativos para responder quando um assembly é carregado, quando um domínio de aplicativo será descarregado, ou quando uma exceção sem tratamento.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomain">
          <source>For more information on using application domains, see <bpt id="p1">[</bpt>Application Domains<ept id="p1">](~/docs/framework/app-domains/application-domains.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre como usar domínios de aplicativo, consulte <bpt id="p1">[</bpt>domínios de aplicativo<ept id="p1">](~/docs/framework/app-domains/application-domains.md)</ept>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomain">
          <source>This class implements the <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>, <ph id="ph2">&lt;xref:System._AppDomain&gt;</ph>, and <ph id="ph3">&lt;xref:System.Security.IEvidenceFactory&gt;</ph> interfaces.</source>
          <target state="translated">Essa classe implementa o <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>, <ph id="ph2">&lt;xref:System._AppDomain&gt;</ph>, e <ph id="ph3">&lt;xref:System.Security.IEvidenceFactory&gt;</ph> interfaces.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomain">
          <source>You should never create a remotable wrapper for an <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> object.</source>
          <target state="translated">Você nunca deve criar um wrapper remoto para um <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomain">
          <source>Doing so could publish a remote reference to that <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>, exposing methods such as <ph id="ph2">&lt;xref:System.AppDomain.CreateInstance%2A&gt;</ph> to remote access and effectively destroying code access security for that <ph id="ph3">&lt;xref:System.AppDomain&gt;</ph>.</source>
          <target state="translated">Isso foi possível publicar uma referência remota ao <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>, expor métodos, como <ph id="ph2">&lt;xref:System.AppDomain.CreateInstance%2A&gt;</ph> para acesso remoto e efetivamente destruição de segurança de acesso de código para que <ph id="ph3">&lt;xref:System.AppDomain&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomain">
          <source>Malicious clients connecting to the remoted <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> could obtain access to any resource the <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> itself has access to.</source>
          <target state="translated">Mal-intencionado clientes conectando-se para a remota <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> poderia obter acesso a qualquer recurso de <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> tem acesso ao.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomain">
          <source>Do not create remotable wrappers for any type that extends <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> and that implements methods that could be used by malicious clients to bypass the security system.</source>
          <target state="translated">Não criar wrappers remota para qualquer tipo que estende <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> e que implementa os métodos que podem ser usados por clientes mal-intencionado para ignorar o sistema de segurança.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomain">
          <source>The default value for the <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A?displayProperty=nameWithType&gt;</ph> property is <ph id="ph2">`false`</ph>.</source>
          <target state="translated">O valor padrão para o <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A?displayProperty=nameWithType&gt;</ph> é de propriedade <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomain">
          <source>This setting is unsafe for services.</source>
          <target state="translated">Essa configuração não é segura para serviços.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomain">
          <source>To prevent services from downloading partially trusted code, set this property to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Para impedir que serviços baixando código parcialmente confiável, defina essa propriedade como <ph id="ph1">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomain">
          <source>This example shows how to create a new <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>, instantiate a type in that new <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>, and communicate with that type’s object.</source>
          <target state="translated">Este exemplo mostra como criar um novo <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>, criar uma instância de um tipo em que novos <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>e se comunicar com o objeto do tipo.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomain">
          <source>In addition, this example shows how to unload the <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> causing the object to be garbage collected.</source>
          <target state="translated">Além disso, este exemplo mostra como descarregar o <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> fazendo com que o objeto a ser coletado como lixo.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="P:System.AppDomain.ActivationContext">
          <source>Gets the activation context for the current application domain.</source>
          <target state="translated">Obtém o contexto de ativação para o domínio do aplicativo atual.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.ActivationContext">
          <source>An object that represents the activation context for the current application domain, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the domain has no activation context.</source>
          <target state="translated">Um objeto que representa o contexto de ativação para o domínio de aplicativo atual ou <ph id="ph1">&lt;see langword="null" /&gt;</ph>, se o domínio não tiver contexto de ativação.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.ActivationContext">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">Requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.ActivationContext">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.AppDomain.AppendPrivatePath(System.String)">
          <source>The name of the directory to be appended to the private path.</source>
          <target state="translated">O nome do diretório a ser anexo ao caminho privado.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.AppDomain.AppendPrivatePath(System.String)">
          <source>Appends the specified directory name to the private path list.</source>
          <target state="translated">Anexa o nome do diretório especificado à lista de caminhos privado.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.AppendPrivatePath(System.String)">
          <source>The use of this property is not recommended, because it might change the probing path for assemblies after they have already been loaded.</source>
          <target state="translated">O uso dessa propriedade não é recomendável, pois ele pode alterar o caminho de sondagem para assemblies depois que já foram carregados.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.AppendPrivatePath(System.String)">
          <source>Use the <ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=nameWithType&gt;</ph> property instead.</source>
          <target state="translated">Use a propriedade <ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=nameWithType&gt;</ph> em seu lugar.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.AppendPrivatePath(System.String)">
          <source>The private path, or relative search path, is the path relative to the base directory where the assembly resolver probes for private assemblies.</source>
          <target state="translated">O caminho particular ou caminho de pesquisa relativo é o caminho relativo para o diretório base onde o resolvedor de assembly sondas de assemblies privados.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.AppDomain.AppendPrivatePath(System.String)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.AppendPrivatePath(System.String)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">Requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.AppendPrivatePath(System.String)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="P:System.AppDomain.ApplicationIdentity">
          <source>Gets the identity of the application in the application domain.</source>
          <target state="translated">Obtém a identidade do aplicativo no domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.ApplicationIdentity">
          <source>An object that identifies the application in the application domain.</source>
          <target state="translated">Um objeto que identifica o aplicativo no domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.ApplicationIdentity">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">Requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.ApplicationIdentity">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.AppDomain.ApplicationTrust">
          <source>Gets information describing permissions granted to an application and whether the application has a trust level that allows it to run.</source>
          <target state="translated">Obtém informações que descrevem as permissões concedidas a um aplicativo e se o aplicativo tem um nível de confiança que permite que ele seja executado.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.ApplicationTrust">
          <source>An object that encapsulates permission and trust information for the application in the application domain.</source>
          <target state="translated">Um objeto que encapsula informações de permissão e de relação de confiança do aplicativo no domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.ApplicationTrust">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">Requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.ApplicationTrust">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ApplyPolicy(System.String)">
          <source>The assembly display name, in the form provided by the <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph> property.</source>
          <target state="translated">O nome de exibição do assembly no formato fornecido pela propriedade <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ApplyPolicy(System.String)">
          <source>Returns the assembly display name after policy has been applied.</source>
          <target state="translated">Retorna o nome de exibição do assembly depois de a política ser aplicada.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ApplyPolicy(System.String)">
          <source>A string containing the assembly display name after policy has been applied.</source>
          <target state="translated">Uma cadeia de caracteres que contém o nome de exibição do assembly depois de a política ser aplicada.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ApplyPolicy(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.AppDomain.ApplyPolicy%2A&gt;</ph> method takes an assembly display name and returns the post-policy display name.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.AppDomain.ApplyPolicy%2A&gt;</ph> leva um assembly de nome de exibição e retorna o nome de exibição de pós política de.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ApplyPolicy(System.String)">
          <source>This is useful if you need to load an assembly using policy, because the reflection-only context does not apply policy.</source>
          <target state="translated">Isso é útil se você precisar carregar um assembly usando a política, porque o contexto exclusivo de reflexão não se aplica a política.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="E:System.AppDomain.AssemblyLoad">
          <source>Occurs when an assembly is loaded.</source>
          <target state="translated">Ocorre quando um assembly é carregado.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.AssemblyLoad">
          <source>The <ph id="ph1">&lt;xref:System.AssemblyLoadEventHandler&gt;</ph> delegate for this event indicates what assembly was loaded.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.AssemblyLoadEventHandler&gt;</ph> delegar para esse evento indica que o assembly foi carregado.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.AssemblyLoad">
          <source>To register an event handler for this event, you must have the required permissions, or a <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown.</source>
          <target state="translated">Para registrar um manipulador de eventos para esse evento, você deve ter as permissões necessárias, ou um <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> é lançado.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.AssemblyLoad">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre a manipulação de eventos, consulte <bpt id="p1">[</bpt>tratamento e gerando eventos<ept id="p1">](~/docs/standard/events/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.AssemblyLoad">
          <source>The following sample demonstrates the <ph id="ph1">&lt;xref:System.AppDomain.AssemblyLoad&gt;</ph> event.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.AppDomain.AssemblyLoad&gt;</ph> evento.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.AssemblyLoad">
          <source>For this code example to run, you must provide the fully qualified assembly name.</source>
          <target state="translated">Para este exemplo de código ser executado, você deve fornecer o nome de assembly totalmente qualificado.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.AssemblyLoad">
          <source>For information about how to obtain the fully qualified assembly name, see <bpt id="p1">[</bpt>Assembly Names<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</source>
          <target state="translated">Para obter informações sobre como obter o nome totalmente qualificado do assembly, consulte <bpt id="p1">[</bpt>nomes de Assembly<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.AssemblyLoad">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">Requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.AssemblyLoad">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="E:System.AppDomain.AssemblyResolve">
          <source>Occurs when the resolution of an assembly fails.</source>
          <target state="translated">Ocorre quando a resolução de um assembly falha.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.AssemblyResolve">
          <source>It is the responsibility of the <ph id="ph1">&lt;xref:System.ResolveEventHandler&gt;</ph> for this event to return the assembly that is specified by the <ph id="ph2">&lt;xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType&gt;</ph> property, or to return null if the assembly is not recognized.</source>
          <target state="translated">É responsabilidade do <ph id="ph1">&lt;xref:System.ResolveEventHandler&gt;</ph> para esse evento retornar o assembly que é especificado pelo <ph id="ph2">&lt;xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType&gt;</ph> propriedade, ou para retornar null se o assembly não é reconhecido.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.AssemblyResolve">
          <source>The assembly must be loaded into an execution context; if it is loaded into the reflection-only context, the load that caused this event to be raised fails.</source>
          <target state="translated">O assembly deve ser carregado em um contexto de execução; Se ele é carregado no contexto exclusivo de reflexão, a carga que causou este evento a ser gerado falhará.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.AssemblyResolve">
          <source>For guidance on the use of this event, see <bpt id="p1">[</bpt>Resolving Assembly Loads<ept id="p1">](~/docs/framework/app-domains/resolve-assembly-loads.md)</ept>.</source>
          <target state="translated">Para obter diretrizes sobre o uso desse evento, consulte <bpt id="p1">[</bpt>Resolvendo carregamentos de Assembly<ept id="p1">](~/docs/framework/app-domains/resolve-assembly-loads.md)</ept>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.AssemblyResolve">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType&gt;</ph> property returns the assembly that requested the assembly load that could not be resolved.</source>
          <target state="translated">Começando com o <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, o <ph id="ph2">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType&gt;</ph> propriedade retorna o assembly que pediu a carga de assembly não pôde ser resolvida.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.AssemblyResolve">
          <source>For example, the loader might be unable to load a dependency of the requesting assembly because the requesting assembly and its dependency are not in the probing path.</source>
          <target state="translated">Por exemplo, o carregador pode ser não é possível carregar uma dependência do solicitante assembly porque o assembly solicitante e sua dependência não estão no caminho de investigação.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.AssemblyResolve">
          <source>Knowing the identity of the requesting assembly might be useful in locating the dependency or in identifying the correct version, if more than one version of the dependency is available.</source>
          <target state="translated">Saber a identidade do solicitante assembly pode ser úteis na localização de dependência ou identificar a versão correta, se houver mais de uma versão da dependência.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.AssemblyResolve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Para obter mais informações, consulte <ph id="ph1">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.AssemblyResolve">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.ResolveEventHandler&gt;</ph> event is raised for all assemblies, including resource assemblies.</source>
          <target state="translated">Começando com o <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, o <ph id="ph2">&lt;xref:System.ResolveEventHandler&gt;</ph> é gerado para todos os assemblies, incluindo módulos de recursos.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.AssemblyResolve">
          <source>In earlier versions, the event was not raised for resource assemblies.</source>
          <target state="translated">Em versões anteriores, o evento não foi gerado para módulos de recursos.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.AssemblyResolve">
          <source>If the operating system is localized, the handler might be called multiple times: once for each culture in the fallback chain.</source>
          <target state="translated">Se o sistema operacional está localizado, o manipulador pode ser chamado várias vezes: uma vez para cada cultura na cadeia de fallback.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.AssemblyResolve">
          <source>For this event, the <ph id="ph1">&lt;xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType&gt;</ph> property returns the assembly name before policy is applied.</source>
          <target state="translated">Para esse evento, o <ph id="ph1">&lt;xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType&gt;</ph> propriedade retorna o nome do assembly, antes da política é aplicada.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.AssemblyResolve">
          <source>If more than one event handler is registered for this event, the event handlersarecalled in order until an event handler returns a value that isn't <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Se mais de um manipulador de eventos é registrado para esse evento, o evento handlersarecalled na ordem até que um manipulador de eventos retorna um valor que não é <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.AssemblyResolve">
          <source>Subsequent event handlers are ignored.</source>
          <target state="translated">Manipuladores de eventos subsequentes serão ignorados.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.AssemblyResolve">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre a manipulação de eventos, consulte <bpt id="p1">[</bpt>tratamento e gerando eventos<ept id="p1">](~/docs/standard/events/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.AssemblyResolve">
          <source>The following sample demonstrates the <ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph> event.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph> evento.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.AssemblyResolve">
          <source>For this code example to run, you must provide the fully qualified assembly name.</source>
          <target state="translated">Para este exemplo de código ser executado, você deve fornecer o nome de assembly totalmente qualificado.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.AssemblyResolve">
          <source>For information about how to obtain the fully qualified assembly name, see <bpt id="p1">[</bpt>Assembly Names<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</source>
          <target state="translated">Para obter informações sobre como obter o nome totalmente qualificado do assembly, consulte <bpt id="p1">[</bpt>nomes de Assembly<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.AssemblyResolve">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">Requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.AssemblyResolve">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="P:System.AppDomain.BaseDirectory">
          <source>Gets the base directory that the assembly resolver uses to probe for assemblies.</source>
          <target state="translated">Obtém o diretório base usado pelo resolvedor de assembly para investigar assemblies.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.BaseDirectory">
          <source>The base directory that the assembly resolver uses to probe for assemblies.</source>
          <target state="translated">O diretório base usado pelo resolvedor de assembly para investigar assemblies.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.BaseDirectory">
          <source>This property corresponds to the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Essa propriedade corresponde do <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=nameWithType&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.BaseDirectory">
          <source>It can also be retrieved using the <ph id="ph1">&lt;xref:System.AppDomain.GetData%2A&gt;</ph> method with the string "APPBASE".</source>
          <target state="translated">Ele também pode ser recuperado usando o <ph id="ph1">&lt;xref:System.AppDomain.GetData%2A&gt;</ph> método com a cadeia de caracteres "APPBASE".</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.BaseDirectory">
          <source>The following code example creates a new application domain, specifying a base directory to use when searching for assemblies to load into the domain.</source>
          <target state="translated">O exemplo de código a seguir cria um novo domínio de aplicativo, especificando um diretório base a ser usado ao procurar por assemblies para carregar no domínio.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.BaseDirectory">
          <source>The example then uses the <ph id="ph1">&lt;xref:System.AppDomain.BaseDirectory%2A&gt;</ph> property to obtain the base directory path, for display to the console.</source>
          <target state="translated">O exemplo usa o <ph id="ph1">&lt;xref:System.AppDomain.BaseDirectory%2A&gt;</ph> propriedade para obter o caminho de diretório base para exibição no console.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="P:System.AppDomain.BaseDirectory">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.BaseDirectory">
          <source>for access to the information in the path itself, including if the path is in the form "file://" or <ph id="ph1">\\</ph>\UNC\dir or "c:<ph id="ph2">\\</ph>".</source>
          <target state="translated">para acessar as informações no caminho em si, incluindo se, o caminho está no formato "file://" ou <ph id="ph1">\\</ph>\UNC\dir ou "c:<ph id="ph2">\\</ph>".</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.BaseDirectory">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">Enumerações associadas: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ClearPrivatePath">
          <source>Resets the path that specifies the location of private assemblies to the empty string ("").</source>
          <target state="translated">Redefine o caminho que especifica o local dos assemblies privados para a cadeia de caracteres vazia ("").</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ClearPrivatePath">
          <source>The private path is a path relative to the base directory that the common language runtime searches to locate private assemblies.</source>
          <target state="translated">O caminho particular é um caminho relativo para o diretório base do que o common language runtime pesquisa para localizar assemblies privados.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ClearPrivatePath">
          <source>For more information, see <ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Para obter mais informações, consulte <ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ClearPrivatePath">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.AppDomain.ClearPrivatePath%2A&gt;</ph> method to remove all entries from the list of private paths to search when assemblies are loaded.</source>
          <target state="translated">O exemplo de código a seguir demonstra como usar o <ph id="ph1">&lt;xref:System.AppDomain.ClearPrivatePath%2A&gt;</ph> método para remover todas as entradas da lista de caminhos privadas para pesquisar quando os assemblies são carregados.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ClearPrivatePath">
          <source>This method is now obsolete, and should not be used for new development.</source>
          <target state="translated">Este método agora está obsoleto e não deve ser usado no novo desenvolvimento.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ClearPrivatePath">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ClearPrivatePath">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">Requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ClearPrivatePath">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ClearShadowCopyPath">
          <source>Resets the list of directories containing shadow copied assemblies to the empty string ("").</source>
          <target state="translated">Redefine a lista de diretórios que contêm assemblies de cópia de sombra para a cadeia de caracteres vazia ("").</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ClearShadowCopyPath">
          <source>The shadow copy path is a list of directories where shadow copied assemblies are stored.</source>
          <target state="translated">O caminho de cópia de sombra é uma lista de diretórios onde a sombra copiados assemblies são armazenados.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ClearShadowCopyPath">
          <source>For more information, see <ph id="ph1">&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A?displayProperty=nameWithType&gt;</ph> and <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <ph id="ph1">&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A?displayProperty=nameWithType&gt;</ph> e <bpt id="p1">[</bpt>cópia de sombra de Assemblies<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ClearShadowCopyPath">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ClearShadowCopyPath">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">Requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ClearShadowCopyPath">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="T:System.AppDomain">
          <source>Creates a new instance of a specified COM type.</source>
          <target state="translated">Cria uma nova instância de um tipo COM especificado.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)">
          <source>The name of a file containing an assembly that defines the requested type.</source>
          <target state="translated">O nome de um arquivo que contém um assembly que define o tipo solicitado.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)">
          <source>The name of the requested type.</source>
          <target state="translated">O nome do módulo solicitado.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)">
          <source>Creates a new instance of a specified COM type.</source>
          <target state="translated">Cria uma nova instância de um tipo COM especificado.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)">
          <source>Parameters specify the name of a file that contains an assembly containing the type and the name of the type.</source>
          <target state="translated">Parâmetros especificam o nome de um arquivo que contém um assembly com o tipo e o nome do tipo.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)">
          <source>An object that is a wrapper for the new instance specified by <ph id="ph1">&lt;paramref name="typeName" /&gt;</ph>.</source>
          <target state="translated">Um objeto que é um wrapper para a nova instância especificada por <ph id="ph1">&lt;paramref name="typeName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">O valor de retorno precisa ser desencapsulado para acessar o objeto real.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)">
          <source>Use this method to create objects remotely without having to load the type locally.</source>
          <target state="translated">Use esse método para criar objetos remotamente sem a necessidade de carregar o tipo localmente.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)">
          <source>The return value must to be unwrapped to access the real object.</source>
          <target state="translated">O valor de retorno deve para ser desencapsulamento para acessar o objeto real.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)">
          <source>A <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=nameWithType&gt;</ph> attribute with a value of <ph id="ph2">`true`</ph> must be applied either explicitly or by default to the COM type for this method to create an instance of that type; otherwise, <ph id="ph3">&lt;xref:System.TypeLoadException&gt;</ph> is thrown.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=nameWithType&gt;</ph> atributo com um valor de <ph id="ph2">`true`</ph> deve ser aplicado explicitamente ou por padrão para o tipo de COM para esse método para criar uma instância desse tipo; caso contrário, <ph id="ph3">&lt;xref:System.TypeLoadException&gt;</ph> é gerada.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)">
          <source>The following sample demonstrates</source>
          <target state="translated">O exemplo a seguir demonstra</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> or <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)">
          <source>The type cannot be loaded.</source>
          <target state="translated">O tipo não pode ser carregado.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)">
          <source>No public parameterless constructor was found.</source>
          <target state="translated">Nenhum construtor público sem parâmetros foi encontrado.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> is an abstract class.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> é uma classe abstrata.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)">
          <source>This member was invoked with a late-binding mechanism.</source>
          <target state="translated">Este membro foi invocado com um mecanismo de associação tardia.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</source>
          <target state="translated">O chamador não pode fornecer atributos de ativação para um objeto que não seja herdado de <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is an empty string ("").</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> é uma cadeia de caracteres vazia ("").</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)">
          <source>The COM object that is being referred to is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O objeto COM que está sendo referenciado é <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)">
          <source>for the ability to read the file containing the assembly manifest.</source>
          <target state="translated">para a capacidade de ler o arquivo que contém o manifesto do assembly.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)">
          <source>for the ability to access the location of the assembly if the assembly is not local.</source>
          <target state="translated">para a capacidade de acessar o local do conjunto caso o assembly não seja local.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>The name of a file containing an assembly that defines the requested type.</source>
          <target state="translated">O nome de um arquivo que contém um assembly que define o tipo solicitado.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>The name of the requested type.</source>
          <target state="translated">O nome do módulo solicitado.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>Represents the value of the computed hash code.</source>
          <target state="translated">Representa o valor do código hash computado.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>Represents the hash algorithm used by the assembly manifest.</source>
          <target state="translated">Representa o algoritmo de hash usado pelo manifesto do assembly.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>Creates a new instance of a specified COM type.</source>
          <target state="translated">Cria uma nova instância de um tipo COM especificado.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>Parameters specify the name of a file that contains an assembly containing the type and the name of the type.</source>
          <target state="translated">Parâmetros especificam o nome de um arquivo que contém um assembly com o tipo e o nome do tipo.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>An object that is a wrapper for the new instance specified by <ph id="ph1">&lt;paramref name="typeName" /&gt;</ph>.</source>
          <target state="translated">Um objeto que é um wrapper para a nova instância especificada por <ph id="ph1">&lt;paramref name="typeName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">O valor de retorno precisa ser desencapsulado para acessar o objeto real.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>Use this method to create objects remotely without having to load the type locally.</source>
          <target state="translated">Use esse método para criar objetos remotamente sem a necessidade de carregar o tipo localmente.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>The return value must to be unwrapped to access the real object.</source>
          <target state="translated">O valor de retorno deve para ser desencapsulamento para acessar o objeto real.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>A <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=nameWithType&gt;</ph> attribute with a value of <ph id="ph2">`true`</ph> must be applied either explicitly or by default to the COM type for this method to create an instance of that type; otherwise, <ph id="ph3">&lt;xref:System.TypeLoadException&gt;</ph> is thrown.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=nameWithType&gt;</ph> atributo com um valor de <ph id="ph2">`true`</ph> deve ser aplicado explicitamente ou por padrão para o tipo de COM para esse método para criar uma instância desse tipo; caso contrário, <ph id="ph3">&lt;xref:System.TypeLoadException&gt;</ph> é gerada.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> or <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>The type cannot be loaded.</source>
          <target state="translated">O tipo não pode ser carregado.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>No public parameterless constructor was found.</source>
          <target state="translated">Nenhum construtor público sem parâmetros foi encontrado.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> is an abstract class.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> é uma classe abstrata.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>This member was invoked with a late-binding mechanism.</source>
          <target state="translated">Este membro foi invocado com um mecanismo de associação tardia.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</source>
          <target state="translated">O chamador não pode fornecer atributos de ativação para um objeto que não seja herdado de <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is the empty string ("").</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> é a cadeia de caracteres vazia ("").</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>The COM object that is being referred to is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O objeto COM que está sendo referenciado é <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>for the ability to read the file containing the assembly manifest.</source>
          <target state="translated">para a capacidade de ler o arquivo que contém o manifesto do assembly.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>for the ability to access the location of the assembly if the assembly is not local.</source>
          <target state="translated">para a capacidade de acessar o local do conjunto caso o assembly não seja local.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="T:System.AppDomain">
          <source>Creates a new application domain.</source>
          <target state="translated">Cria um novo domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String)">
          <source>The friendly name of the domain.</source>
          <target state="translated">O nome amigável do domínio.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String)">
          <source>Creates a new application domain with the specified name.</source>
          <target state="translated">Cria um novo domínio de aplicativo com o nome especificado.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String)">
          <source>The newly created application domain.</source>
          <target state="translated">O domínio de aplicativo recém-criado.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String)">
          <source>The <ph id="ph1">`friendlyName`</ph> parameter is intended to identify the domain in a manner that is meaningful to humans.</source>
          <target state="translated">O <ph id="ph1">`friendlyName`</ph> parâmetro destina-se para identificar o domínio de uma maneira que seja significativa para os usuários.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String)">
          <source>This string should be suitable for display in user interfaces.</source>
          <target state="translated">Essa cadeia de caracteres deve ser adequada para exibição nas interfaces do usuário.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String)">
          <source>This method overload uses the <ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph> information from the default application domain.</source>
          <target state="translated">Essa sobrecarga de método usa o <ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph> informações do domínio de aplicativo padrão.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String)">
          <source>The following sample demonstrates, in general, how to create a domain using one of the <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%2A&gt;</ph> overloads.</source>
          <target state="translated">O exemplo a seguir demonstra, em geral, como criar um domínio usando uma das sobrecargas de <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String)">
          <source><ph id="ph1">&lt;paramref name="friendlyName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="friendlyName" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String)">
          <source>to provide evidence.</source>
          <target state="translated">para fornecer evidência.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence)">
          <source>The friendly name of the domain.</source>
          <target state="translated">O nome amigável do domínio.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence)">
          <source>This friendly name can be displayed in user interfaces to identify the domain.</source>
          <target state="translated">Este nome amigável pode ser exibido nas interfaces do usuário para identificar o domínio.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence)">
          <source>For more information, see <ph id="ph1">&lt;see cref="P:System.AppDomain.FriendlyName" /&gt;</ph>.</source>
          <target state="translated">Para obter mais informações, consulte <ph id="ph1">&lt;see cref="P:System.AppDomain.FriendlyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence)">
          <source>Evidence that establishes the identity of the code that runs in the application domain.</source>
          <target state="translated">Evidência que estabelece a identidade do código executado no domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence)">
          <source>Pass <ph id="ph1">&lt;see langword="null" /&gt;</ph> to use the evidence of the current application domain.</source>
          <target state="translated">Passe <ph id="ph1">&lt;see langword="null" /&gt;</ph> para usar a evidência do domínio de aplicativo atual.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence)">
          <source>Creates a new application domain with the given name using the supplied evidence.</source>
          <target state="translated">Cria um novo domínio do aplicativo com o nome especificado usando a evidência fornecida.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence)">
          <source>The newly created application domain.</source>
          <target state="translated">O domínio de aplicativo recém-criado.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence)">
          <source>This method overload uses the <ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph> information from the default application domain.</source>
          <target state="translated">Essa sobrecarga de método usa o <ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph> informações do domínio de aplicativo padrão.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence)">
          <source>If <ph id="ph1">`securityInfo`</ph> is not supplied, the evidence from the current application domain is used.</source>
          <target state="translated">Se <ph id="ph1">`securityInfo`</ph> não for fornecido, a evidência do domínio de aplicativo atual será usada.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence)">
          <source>Do not use this method overload to create sandboxed application domains.</source>
          <target state="translated">Não use essa sobrecarga de método para criar domínios de aplicativo em área restrita.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence)">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the evidence that is supplied for <ph id="ph2">`securityInfo`</ph> no longer affects the grant set of the application domain.</source>
          <target state="translated">Começando pelo <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, a evidência que é fornecida para <ph id="ph2">`securityInfo`</ph> não afeta mais o conjunto de concessões do domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence)">
          <source>Use the <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29&gt;</ph> method overload to create sandboxed application domains.</source>
          <target state="translated">Use a sobrecarga do método <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29&gt;</ph> para criar domínios de aplicativo em área restrita.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence)">
          <source>The following sample demonstrates, in general, how to create a domain using one of the <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%2A&gt;</ph> overloads.</source>
          <target state="translated">O exemplo a seguir demonstra, em geral, como criar um domínio usando uma das sobrecargas de <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="friendlyName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="friendlyName" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence)">
          <source>to provide evidence.</source>
          <target state="translated">para fornecer evidência.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>The friendly name of the domain.</source>
          <target state="translated">O nome amigável do domínio.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>This friendly name can be displayed in user interfaces to identify the domain.</source>
          <target state="translated">Este nome amigável pode ser exibido nas interfaces do usuário para identificar o domínio.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>For more information, see <ph id="ph1">&lt;see cref="P:System.AppDomain.FriendlyName" /&gt;</ph>.</source>
          <target state="translated">Para obter mais informações, consulte <ph id="ph1">&lt;see cref="P:System.AppDomain.FriendlyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>Evidence that establishes the identity of the code that runs in the application domain.</source>
          <target state="translated">Evidência que estabelece a identidade do código executado no domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>Pass <ph id="ph1">&lt;see langword="null" /&gt;</ph> to use the evidence of the current application domain.</source>
          <target state="translated">Passe <ph id="ph1">&lt;see langword="null" /&gt;</ph> para usar a evidência do domínio de aplicativo atual.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>An object that contains application domain initialization information.</source>
          <target state="translated">Um objeto que contém informações de inicialização do domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>Creates a new application domain using the specified name, evidence, and application domain setup information.</source>
          <target state="translated">Cria um novo domínio do aplicativo usando o nome, evidência e informações de instalação do domínio do aplicativo especificados.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>The newly created application domain.</source>
          <target state="translated">O domínio de aplicativo recém-criado.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>If <ph id="ph1">`info`</ph> is not supplied, this method overload uses the <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> information from the default application domain.</source>
          <target state="translated">Se <ph id="ph1">`info`</ph> não é fornecido, essa sobrecarga de método usa o <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> informações do domínio de aplicativo padrão.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>If <ph id="ph1">`securityInfo`</ph> is not supplied, the evidence from the current application domain is used.</source>
          <target state="translated">Se <ph id="ph1">`securityInfo`</ph> não for fornecido, a evidência do domínio de aplicativo atual será usada.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>Do not use this method overload to create sandboxed application domains.</source>
          <target state="translated">Não use essa sobrecarga de método para criar domínios de aplicativo em área restrita.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the evidence that is supplied for <ph id="ph2">`securityInfo`</ph> no longer affects the grant set of the application domain.</source>
          <target state="translated">Começando pelo <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, a evidência que é fornecida para <ph id="ph2">`securityInfo`</ph> não afeta mais o conjunto de concessões do domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>Use the <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29&gt;</ph> method overload to create sandboxed application domains.</source>
          <target state="translated">Use a sobrecarga do método <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29&gt;</ph> para criar domínios de aplicativo em área restrita.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>The following sample demonstrates, in general, how to create a domain using one of the <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%2A&gt;</ph> overloads.</source>
          <target state="translated">O exemplo a seguir demonstra, em geral, como criar um domínio usando uma das sobrecargas de <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source><ph id="ph1">&lt;paramref name="friendlyName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="friendlyName" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>to provide evidence.</source>
          <target state="translated">para fornecer evidência.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])">
          <source>The friendly name of the domain.</source>
          <target state="translated">O nome amigável do domínio.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])">
          <source>This friendly name can be displayed in user interfaces to identify the domain.</source>
          <target state="translated">Este nome amigável pode ser exibido nas interfaces do usuário para identificar o domínio.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])">
          <source>For more information, see the description of <ph id="ph1">&lt;see cref="P:System.AppDomain.FriendlyName" /&gt;</ph>.</source>
          <target state="translated">Para obter mais informações, consulte a descrição de <ph id="ph1">&lt;see cref="P:System.AppDomain.FriendlyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])">
          <source>Evidence that establishes the identity of the code that runs in the application domain.</source>
          <target state="translated">Evidência que estabelece a identidade do código executado no domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])">
          <source>Pass <ph id="ph1">&lt;see langword="null" /&gt;</ph> to use the evidence of the current application domain.</source>
          <target state="translated">Passe <ph id="ph1">&lt;see langword="null" /&gt;</ph> para usar a evidência do domínio de aplicativo atual.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])">
          <source>An object that contains application domain initialization information.</source>
          <target state="translated">Um objeto que contém informações de inicialização do domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])">
          <source>A default permission set that is granted to all assemblies loaded into the new application domain that do not have specific grants.</source>
          <target state="translated">Um conjunto de permissões padrão concedido a todos os assemblies carregados no novo domínio do aplicativo que não tem concessões específicas.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])">
          <source>An array of strong names representing assemblies to be considered fully trusted in the new application domain.</source>
          <target state="translated">Uma matriz de nomes fortes que representa os assemblies a serem considerados totalmente confiáveis no novo domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])">
          <source>Creates a new application domain using the specified name, evidence, application domain setup information, default permission set, and array of fully trusted assemblies.</source>
          <target state="translated">Cria um novo domínio do aplicativo usando o nome, evidência, informações de configuração do domínio do aplicativo, conjunto de permissões padrão e a matriz de assemblies totalmente confiáveis especificados.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])">
          <source>The newly created application domain.</source>
          <target state="translated">O domínio de aplicativo recém-criado.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])">
          <source>You must set the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> object that you supply for <ph id="ph3">`info`</ph>.</source>
          <target state="translated">Você deve definir o <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> propriedade o <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> objeto que você fornecer para <ph id="ph3">`info`</ph>.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])">
          <source>Otherwise, an exception is thrown.</source>
          <target state="translated">Caso contrário, uma exceção será gerada.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])">
          <source>If <ph id="ph1">`securityInfo`</ph> is not supplied, the evidence from the current application domain is used.</source>
          <target state="translated">Se <ph id="ph1">`securityInfo`</ph> não for fornecido, a evidência do domínio de aplicativo atual será usada.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])">
          <source>The information provided for <ph id="ph1">`grantSet`</ph> and <ph id="ph2">`fullTrustAssemblies`</ph> is used to create an <ph id="ph3">&lt;xref:System.Security.Policy.ApplicationTrust&gt;</ph> object for the new application domain.</source>
          <target state="translated">As informações fornecidas para <ph id="ph1">`grantSet`</ph> e <ph id="ph2">`fullTrustAssemblies`</ph> é usado para criar um <ph id="ph3">&lt;xref:System.Security.Policy.ApplicationTrust&gt;</ph> objeto para o novo domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])">
          <source><ph id="ph1">&lt;paramref name="friendlyName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="friendlyName" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])">
          <source>The application domain is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O domínio do aplicativo é <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])">
          <source>The <ph id="ph1">&lt;see cref="P:System.AppDomainSetup.ApplicationBase" /&gt;</ph> property is not set on the <ph id="ph2">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> object that is supplied for <ph id="ph3">&lt;paramref name="info" /&gt;</ph>.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see cref="P:System.AppDomainSetup.ApplicationBase" /&gt;</ph> não está definida no objeto <ph id="ph2">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> fornecido para <ph id="ph3">&lt;paramref name="info" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])">
          <source>for the ability to create and manipulate an application domain.</source>
          <target state="translated">para a capacidade de criar e manipular um domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.Demand" /&gt;</ph>.</source>
          <target state="translated">Ação de segurança: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.Demand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean)">
          <source>The friendly name of the domain.</source>
          <target state="translated">O nome amigável do domínio.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean)">
          <source>This friendly name can be displayed in user interfaces to identify the domain.</source>
          <target state="translated">Este nome amigável pode ser exibido nas interfaces do usuário para identificar o domínio.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean)">
          <source>For more information, see <ph id="ph1">&lt;see cref="P:System.AppDomain.FriendlyName" /&gt;</ph>.</source>
          <target state="translated">Para obter mais informações, consulte <ph id="ph1">&lt;see cref="P:System.AppDomain.FriendlyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean)">
          <source>Evidence that establishes the identity of the code that runs in the application domain.</source>
          <target state="translated">Evidência que estabelece a identidade do código executado no domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean)">
          <source>Pass <ph id="ph1">&lt;see langword="null" /&gt;</ph> to use the evidence of the current application domain.</source>
          <target state="translated">Passe <ph id="ph1">&lt;see langword="null" /&gt;</ph> para usar a evidência do domínio de aplicativo atual.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean)">
          <source>The base directory that the assembly resolver uses to probe for assemblies.</source>
          <target state="translated">O diretório base usado pelo resolvedor de assembly para investigar assemblies.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean)">
          <source>For more information, see <ph id="ph1">&lt;see cref="P:System.AppDomain.BaseDirectory" /&gt;</ph>.</source>
          <target state="translated">Para obter mais informações, consulte <ph id="ph1">&lt;see cref="P:System.AppDomain.BaseDirectory" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean)">
          <source>The path relative to the base directory where the assembly resolver should probe for private assemblies.</source>
          <target state="translated">O caminho relativo ao diretório base em que o resolvedor do assembly deve investigar assemblies particulares.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean)">
          <source>For more information, see <ph id="ph1">&lt;see cref="P:System.AppDomain.RelativeSearchPath" /&gt;</ph>.</source>
          <target state="translated">Para obter mais informações, consulte <ph id="ph1">&lt;see cref="P:System.AppDomain.RelativeSearchPath" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, a shadow copy of an assembly is loaded into this application domain.</source>
          <target state="translated">Se for <ph id="ph1">&lt;see langword="true" /&gt;</ph>, uma cópia de sombra de um assembly é carregada nesse domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean)">
          <source>Creates a new application domain with the given name, using evidence, application base path, relative search path, and a parameter that specifies whether a shadow copy of an assembly is to be loaded into the application domain.</source>
          <target state="translated">Cria um novo domínio de aplicativo com o nome especificado, usando a evidência, o caminho base do aplicativo, o caminho de pesquisa relativo e um parâmetro que especifica se uma cópia de sombra de um assembly deve ser carregada no domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean)">
          <source>The newly created application domain.</source>
          <target state="translated">O domínio de aplicativo recém-criado.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean)">
          <source>If <ph id="ph1">`securityInfo`</ph> is not supplied, the evidence from the current application domain is used.</source>
          <target state="translated">Se <ph id="ph1">`securityInfo`</ph> não for fornecido, a evidência do domínio de aplicativo atual será usada.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean)">
          <source>For more information about shadow copying, see <ph id="ph1">&lt;xref:System.AppDomain.ShadowCopyFiles%2A&gt;</ph> and <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre a cópia de sombra, consulte <ph id="ph1">&lt;xref:System.AppDomain.ShadowCopyFiles%2A&gt;</ph> e <bpt id="p1">[</bpt>cópia de sombra de Assemblies<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean)">
          <source>Do not use this method overload to create sandboxed application domains.</source>
          <target state="translated">Não use essa sobrecarga de método para criar domínios de aplicativo em área restrita.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean)">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the evidence that is supplied for <ph id="ph2">`securityInfo`</ph> no longer affects the grant set of the application domain.</source>
          <target state="translated">Começando pelo <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, a evidência que é fornecida para <ph id="ph2">`securityInfo`</ph> não afeta mais o conjunto de concessões do domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean)">
          <source>Use the <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29&gt;</ph> method overload to create sandboxed application domains.</source>
          <target state="translated">Use a sobrecarga do método <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29&gt;</ph> para criar domínios de aplicativo em área restrita.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean)">
          <source>The following sample demonstrates, in general, how to create a domain using one of the <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%2A&gt;</ph> overloads.</source>
          <target state="translated">O exemplo a seguir demonstra, em geral, como criar um domínio usando uma das sobrecargas de <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="friendlyName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="friendlyName" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean)">
          <source>to provide evidence.</source>
          <target state="translated">para fornecer evidência.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.AppDomainInitializer,System.String[])">
          <source>The friendly name of the domain.</source>
          <target state="translated">O nome amigável do domínio.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.AppDomainInitializer,System.String[])">
          <source>This friendly name can be displayed in user interfaces to identify the domain.</source>
          <target state="translated">Este nome amigável pode ser exibido nas interfaces do usuário para identificar o domínio.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.AppDomainInitializer,System.String[])">
          <source>For more information, see <ph id="ph1">&lt;see cref="P:System.AppDomain.FriendlyName" /&gt;</ph>.</source>
          <target state="translated">Para obter mais informações, consulte <ph id="ph1">&lt;see cref="P:System.AppDomain.FriendlyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.AppDomainInitializer,System.String[])">
          <source>Evidence that establishes the identity of the code that runs in the application domain.</source>
          <target state="translated">Evidência que estabelece a identidade do código executado no domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.AppDomainInitializer,System.String[])">
          <source>Pass <ph id="ph1">&lt;see langword="null" /&gt;</ph> to use the evidence of the current application domain.</source>
          <target state="translated">Passe <ph id="ph1">&lt;see langword="null" /&gt;</ph> para usar a evidência do domínio de aplicativo atual.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.AppDomainInitializer,System.String[])">
          <source>The base directory that the assembly resolver uses to probe for assemblies.</source>
          <target state="translated">O diretório base usado pelo resolvedor de assembly para investigar assemblies.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.AppDomainInitializer,System.String[])">
          <source>For more information, see <ph id="ph1">&lt;see cref="P:System.AppDomain.BaseDirectory" /&gt;</ph>.</source>
          <target state="translated">Para obter mais informações, consulte <ph id="ph1">&lt;see cref="P:System.AppDomain.BaseDirectory" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.AppDomainInitializer,System.String[])">
          <source>The path relative to the base directory where the assembly resolver should probe for private assemblies.</source>
          <target state="translated">O caminho relativo ao diretório base em que o resolvedor do assembly deve investigar assemblies particulares.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.AppDomainInitializer,System.String[])">
          <source>For more information, see <ph id="ph1">&lt;see cref="P:System.AppDomain.RelativeSearchPath" /&gt;</ph>.</source>
          <target state="translated">Para obter mais informações, consulte <ph id="ph1">&lt;see cref="P:System.AppDomain.RelativeSearchPath" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.AppDomainInitializer,System.String[])">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to load a shadow copy of an assembly into the application domain.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> para carregar uma cópia de sombra de um assembly no domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.AppDomainInitializer,System.String[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.AppDomainInitializer" /&gt;</ph> delegate that represents a callback method to invoke when the new <ph id="ph2">&lt;see cref="T:System.AppDomain" /&gt;</ph> object is initialized.</source>
          <target state="translated">Um delegado <ph id="ph1">&lt;see cref="T:System.AppDomainInitializer" /&gt;</ph> que representa um método de retorno de chamada a ser invocado quando o novo objeto <ph id="ph2">&lt;see cref="T:System.AppDomain" /&gt;</ph> for inicializado.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.AppDomainInitializer,System.String[])">
          <source>An array of string arguments to be passed to the callback represented by <bpt id="p1">&lt;c&gt;</bpt>adInit<ept id="p1">&lt;/c&gt;</ept>, when the new <ph id="ph1">&lt;see cref="T:System.AppDomain" /&gt;</ph> object is initialized.</source>
          <target state="translated">Uma matriz de argumentos de cadeia de caracteres a serem passados para o retorno de chamada representado por <bpt id="p1">&lt;c&gt;</bpt>adInit<ept id="p1">&lt;/c&gt;</ept>, quando o novo objeto <ph id="ph1">&lt;see cref="T:System.AppDomain" /&gt;</ph> é inicializado.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.AppDomainInitializer,System.String[])">
          <source>Creates a new application domain with the given name, using evidence, application base path, relative search path, and a parameter that specifies whether a shadow copy of an assembly is to be loaded into the application domain.</source>
          <target state="translated">Cria um novo domínio de aplicativo com o nome especificado, usando a evidência, o caminho base do aplicativo, o caminho de pesquisa relativo e um parâmetro que especifica se uma cópia de sombra de um assembly deve ser carregada no domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.AppDomainInitializer,System.String[])">
          <source>Specifies a callback method that is invoked when the application domain is initialized, and an array of string arguments to pass the callback method.</source>
          <target state="translated">Especifica um método de retorno de chamada invocado quando o domínio de aplicativo é inicializado e uma matriz de argumentos de cadeia de caracteres para passar o método de retorno de chamada.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.AppDomainInitializer,System.String[])">
          <source>The newly created application domain.</source>
          <target state="translated">O domínio de aplicativo recém-criado.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.AppDomainInitializer,System.String[])">
          <source>The method represented by <ph id="ph1">`adInit`</ph> is executed in the context of the newly created application domain.</source>
          <target state="translated">O método representado pela <ph id="ph1">`adInit`</ph> é executado no contexto do domínio do aplicativo recém-criado.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.AppDomainInitializer,System.String[])">
          <source>If <ph id="ph1">`securityInfo`</ph> is not supplied, the evidence from the current application domain is used.</source>
          <target state="translated">Se <ph id="ph1">`securityInfo`</ph> não for fornecido, a evidência do domínio de aplicativo atual será usada.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.AppDomainInitializer,System.String[])">
          <source>For more information about shadow copying, see <ph id="ph1">&lt;xref:System.AppDomain.ShadowCopyFiles%2A&gt;</ph> and <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre a cópia de sombra, consulte <ph id="ph1">&lt;xref:System.AppDomain.ShadowCopyFiles%2A&gt;</ph> e <bpt id="p1">[</bpt>cópia de sombra de Assemblies<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.AppDomainInitializer,System.String[])">
          <source>Do not use this method overload to create sandboxed application domains.</source>
          <target state="translated">Não use essa sobrecarga de método para criar domínios de aplicativo em área restrita.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.AppDomainInitializer,System.String[])">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the evidence that is supplied for <ph id="ph2">`securityInfo`</ph> no longer affects the grant set of the application domain.</source>
          <target state="translated">Começando pelo <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, a evidência que é fornecida para <ph id="ph2">`securityInfo`</ph> não afeta mais o conjunto de concessões do domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.AppDomainInitializer,System.String[])">
          <source>Use the <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29&gt;</ph> method overload to create sandboxed application domains.</source>
          <target state="translated">Use a sobrecarga do método <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29&gt;</ph> para criar domínios de aplicativo em área restrita.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.AppDomainInitializer,System.String[])">
          <source><ph id="ph1">&lt;paramref name="friendlyName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="friendlyName" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.AppDomainInitializer,System.String[])">
          <source>to provide evidence.</source>
          <target state="translated">para fornecer evidência.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.AppDomainInitializer,System.String[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="T:System.AppDomain">
          <source>Creates a new instance of a specified type defined in a specified assembly.</source>
          <target state="translated">Cria uma nova instância de um tipo especificado definido no assembly especificado.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String)">
          <source>The display name of the assembly.</source>
          <target state="translated">O nome para exibição do assembly.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String)">
          <source>See <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String)">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph> property.</source>
          <target state="translated">O nome totalmente qualificado do tipo solicitado, inclusive o namespace, mas não o assembly, como retornado pela propriedade <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String)">
          <source>Creates a new instance of the specified type defined in the specified assembly.</source>
          <target state="translated">Cria uma nova instância do tipo especificado definido no assembly especificado.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String)">
          <source>An object that is a wrapper for the new instance specified by <ph id="ph1">&lt;paramref name="typeName" /&gt;</ph>.</source>
          <target state="translated">Um objeto que é um wrapper para a nova instância especificada por <ph id="ph1">&lt;paramref name="typeName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String)">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">O valor de retorno precisa ser desencapsulado para acessar o objeto real.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String)">
          <source>This method calls the default constructor for <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">Este método chama o construtor padrão para <ph id="ph1">`typeName`</ph>.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String)">
          <source>See <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for the format of <ph id="ph2">`assemblyName`</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> para o formato de <ph id="ph2">`assemblyName`</ph>.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String)">
          <source>An attempt to call <ph id="ph1">&lt;xref:System.AppDomain.CreateInstance%2A&gt;</ph> on a target application domain that is not the current application domain will result in a successful load of the assembly in the target application domain.</source>
          <target state="translated">Uma tentativa de chamar <ph id="ph1">&lt;xref:System.AppDomain.CreateInstance%2A&gt;</ph> em um domínio de aplicativo de destino que não seja o domínio de aplicativo atual resultará em uma carga bem-sucedida do assembly no domínio de aplicativo de destino.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String)">
          <source>Since an <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph> is not <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, when this method attempts to return the <ph id="ph3">&lt;xref:System.Reflection.Assembly&gt;</ph> for the loaded assembly to the current application domain, the common language runtime will try to load the assembly into the current application domain and the load might fail.</source>
          <target state="translated">Como um <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph> não é <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, quando esse método tenta retornar o <ph id="ph3">&lt;xref:System.Reflection.Assembly&gt;</ph> do assembly carregado para o domínio de aplicativo atual, o Common Language Runtime tentará carregar o assembly no domínio do aplicativo atual e a carga poderá falhar.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String)">
          <source>The assembly that is loaded into the current application domain might be different from the assembly that was loaded first if the path settings for the two application domains are different.</source>
          <target state="translated">O assembly carregado no domínio de aplicativo atual pode ser diferente do assembly que foi carregado primeiro caso as configurações de caminho dos dois domínios de aplicativo sejam diferentes.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> or <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String)">
          <source>Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was compiled with a later version.</source>
          <target state="translated">A versão 2,0 ou posterior do Common Language Runtime está carregada e <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> foi compilada com uma versão posterior.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String)">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String)">
          <source>The caller does not have permission to call this constructor.</source>
          <target state="translated">O chamador não tem permissão para chamar esse construtor.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String)">
          <source>No matching public constructor was found.</source>
          <target state="translated">Nenhum construtor público correspondente foi encontrado.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="typename" /&gt;</ph> was not found in <ph id="ph2">&lt;paramref name="assemblyName" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typename" /&gt;</ph> não foi encontrado em <ph id="ph2">&lt;paramref name="assemblyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String)">
          <source>This instance is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Esta instância é <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String)">
          <source>for access to read from a file or directory, and for access to the information in the path itself.</source>
          <target state="translated">para acesso de leitura de um arquivo ou um diretório, e para acesso às informações no próprio caminho.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">Enumerações associadas: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String)">
          <source>for the ability to access the location of the assembly if the assembly is not local.</source>
          <target state="translated">para a capacidade de acessar o local do conjunto caso o assembly não seja local.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String)">
          <source>for the ability to call unmanaged code when creating an instance of a delegate.</source>
          <target state="translated">para a capacidade de chamar código não gerenciado durante a criação de uma instância de um representante.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>The display name of the assembly.</source>
          <target state="translated">O nome para exibição do assembly.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>See <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph> property.</source>
          <target state="translated">O nome totalmente qualificado do tipo solicitado, inclusive o namespace, mas não o assembly, como retornado pela propriedade <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">Uma matriz de um ou mais atributos que podem participar da ativação.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>Typically, an array that contains a single <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /&gt;</ph> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">Normalmente, uma matriz que contém um único objeto <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /&gt;</ph> que especifica a URL necessária para ativar um objeto remoto.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">Esse parâmetro está relacionado a objetos ativados pelo cliente. A ativação pelo cliente é uma tecnologia herdada, mantida para compatibilidade com versões anteriores, mas não é recomendada para novos desenvolvimentos.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">Em vez disso, os aplicativos distribuídos devem usar o Windows Communication Foundation.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>Creates a new instance of the specified type defined in the specified assembly.</source>
          <target state="translated">Cria uma nova instância do tipo especificado definido no assembly especificado.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>A parameter specifies an array of activation attributes.</source>
          <target state="translated">Um parâmetro especifica uma matriz de atributos de ativação.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>An object that is a wrapper for the new instance specified by <ph id="ph1">&lt;paramref name="typeName" /&gt;</ph>.</source>
          <target state="translated">Um objeto que é um wrapper para a nova instância especificada por <ph id="ph1">&lt;paramref name="typeName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">O valor de retorno precisa ser desencapsulado para acessar o objeto real.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>This method calls the default constructor for <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">Este método chama o construtor padrão para <ph id="ph1">`typeName`</ph>.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>See <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for the format of <ph id="ph2">`assemblyName`</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> para o formato de <ph id="ph2">`assemblyName`</ph>.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>An attempt to call <ph id="ph1">&lt;xref:System.AppDomain.CreateInstance%2A&gt;</ph> on a target application domain that is not the current application domain will result in a successful load of the assembly in the target application domain.</source>
          <target state="translated">Uma tentativa de chamar <ph id="ph1">&lt;xref:System.AppDomain.CreateInstance%2A&gt;</ph> em um domínio de aplicativo de destino que não seja o domínio de aplicativo atual resultará em uma carga bem-sucedida do assembly no domínio de aplicativo de destino.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>Since an <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph> is not <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, when this method attempts to return the <ph id="ph3">&lt;xref:System.Reflection.Assembly&gt;</ph> for the loaded assembly to the current application domain, the common language runtime will try to load the assembly into the current application domain and the load might fail.</source>
          <target state="translated">Como um <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph> não é <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, quando esse método tenta retornar o <ph id="ph3">&lt;xref:System.Reflection.Assembly&gt;</ph> do assembly carregado para o domínio de aplicativo atual, o Common Language Runtime tentará carregar o assembly no domínio do aplicativo atual e a carga poderá falhar.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>The assembly that is loaded into the current application domain might be different from the assembly that was loaded first if the path settings for the two application domains are different.</source>
          <target state="translated">O assembly carregado no domínio de aplicativo atual pode ser diferente do assembly que foi carregado primeiro caso as configurações de caminho dos dois domínios de aplicativo sejam diferentes.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> or <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was compiled with a later version.</source>
          <target state="translated">A versão 2,0 ou posterior do Common Language Runtime está carregada e <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> foi compilada com uma versão posterior.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>The caller does not have permission to call this constructor.</source>
          <target state="translated">O chamador não tem permissão para chamar esse construtor.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>No matching public constructor was found.</source>
          <target state="translated">Nenhum construtor público correspondente foi encontrado.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</source>
          <target state="translated">O chamador não pode fornecer atributos de ativação para um objeto que não seja herdado de <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="typename" /&gt;</ph> was not found in <ph id="ph2">&lt;paramref name="assemblyName" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typename" /&gt;</ph> não foi encontrado em <ph id="ph2">&lt;paramref name="assemblyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>This instance is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Esta instância é <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>for the ability to read the file containing the assembly manifest.</source>
          <target state="translated">para a capacidade de ler o arquivo que contém o manifesto do assembly.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>for the ability to access the location of the assembly if the assembly is not local.</source>
          <target state="translated">para a capacidade de acessar o local do conjunto caso o assembly não seja local.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>for the ability to call unmanaged code when creating an instance of a delegate.</source>
          <target state="translated">para a capacidade de chamar código não gerenciado durante a criação de uma instância de um representante.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>for the ability to invoke operations on all type members.</source>
          <target state="translated">a capacidade de invocar operações em todos os membros do tipo.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The display name of the assembly.</source>
          <target state="translated">O nome para exibição do assembly.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>See <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph> property.</source>
          <target state="translated">O nome totalmente qualificado do tipo solicitado, inclusive o namespace, mas não o assembly, como retornado pela propriedade <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>A Boolean value specifying whether to perform a case-sensitive search or not.</source>
          <target state="translated">Um valor booliano especificando se é necessário executar uma pesquisa que diferencie maiúsculas de minúsculas ou não.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>A combination of zero or more bit flags that affect the search for the <bpt id="p1">&lt;c&gt;</bpt>typeName<ept id="p1">&lt;/c&gt;</ept> constructor.</source>
          <target state="translated">Uma combinação de zero ou mais sinalizadores de bit que afetam a pesquisa para o construtor <bpt id="p1">&lt;c&gt;</bpt>typeName<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>bindingAttr<ept id="p1">&lt;/c&gt;</ept> is zero, a case-sensitive search for public constructors is conducted.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>bindingAttr<ept id="p1">&lt;/c&gt;</ept> for zero, uma pesquisa que diferencia maiúsculas de minúsculas para construtores públicos será realizada.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects using reflection.</source>
          <target state="translated">Um objeto que permite a associação, a coerção de tipos de argumento, a invocação de membros e a recuperação de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> usando reflexão.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is null, the default binder is used.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> for nulo, o associador padrão será usado.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The arguments to pass to the constructor.</source>
          <target state="translated">Os argumentos a serem passados para o construtor.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</source>
          <target state="translated">Esta matriz de argumentos deve corresponder em número, ordem e digitar os parâmetros do construtor a ser invocado.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>If the default constructor is preferred, <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> must be an empty array or null.</source>
          <target state="translated">Se construtor padrão for preferido, <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> deverá ser uma matriz vazia ou nula.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Culture-specific information that governs the coercion of <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> to the formal types declared for the <bpt id="p2">&lt;c&gt;</bpt>typeName<ept id="p2">&lt;/c&gt;</ept> constructor.</source>
          <target state="translated">Informações específicas de cultura que controlam a coerção de <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> para os tipos formais declarados para o construtor <bpt id="p2">&lt;c&gt;</bpt>typeName<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> for the current thread is used.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> for <ph id="ph1">&lt;see langword="null" /&gt;</ph>, a <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> do thread atual será usada.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">Uma matriz de um ou mais atributos que podem participar da ativação.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Typically, an array that contains a single <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /&gt;</ph> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">Normalmente, uma matriz que contém um único objeto <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /&gt;</ph> que especifica a URL necessária para ativar um objeto remoto.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>This parameter is related to client-activated objects.</source>
          <target state="translated">Esse parâmetro está relacionado a objetos ativados pelo cliente.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">A ativação do cliente é uma tecnologia herdada, mantida para compatibilidade com versões anteriores, mas não é recomendada para novos desenvolvimentos.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">Em vez disso, os aplicativos distribuídos devem usar o Windows Communication Foundation.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Creates a new instance of the specified type defined in the specified assembly.</source>
          <target state="translated">Cria uma nova instância do tipo especificado definido no assembly especificado.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Parameters specify a binder, binding flags, constructor arguments, culture-specific information used to interpret arguments, and optional activation attributes.</source>
          <target state="translated">Os parâmetros especificam um associador, sinalizadores de associação, argumentos de construtor, informações específicas da cultura usadas para interpretar argumentos e atributos de ativação opcionais.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>An object that is a wrapper for the new instance specified by <ph id="ph1">&lt;paramref name="typeName" /&gt;</ph>.</source>
          <target state="translated">Um objeto que é um wrapper para a nova instância especificada por <ph id="ph1">&lt;paramref name="typeName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">O valor de retorno precisa ser desencapsulado para acessar o objeto real.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>See <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for the format of <ph id="ph2">`assemblyName`</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> para o formato de <ph id="ph2">`assemblyName`</ph>.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>An attempt to call <ph id="ph1">&lt;xref:System.AppDomain.CreateInstance%2A&gt;</ph> on a target application domain that is not the current application domain will result in a successful load of the assembly in the target application domain.</source>
          <target state="translated">Uma tentativa de chamar <ph id="ph1">&lt;xref:System.AppDomain.CreateInstance%2A&gt;</ph> em um domínio de aplicativo de destino que não seja o domínio de aplicativo atual resultará em uma carga bem-sucedida do assembly no domínio de aplicativo de destino.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Since an <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph> is not <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, when this method attempts to return the <ph id="ph3">&lt;xref:System.Reflection.Assembly&gt;</ph> for the loaded assembly to the current application domain, the common language runtime will try to load the assembly into the current application domain and the load might fail.</source>
          <target state="translated">Como um <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph> não é <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, quando esse método tenta retornar o <ph id="ph3">&lt;xref:System.Reflection.Assembly&gt;</ph> do assembly carregado para o domínio de aplicativo atual, o Common Language Runtime tentará carregar o assembly no domínio do aplicativo atual e a carga poderá falhar.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The assembly that is loaded into the current application domain might be different from the assembly that was loaded first if the path settings for the two application domains are different.</source>
          <target state="translated">O assembly carregado no domínio de aplicativo atual pode ser diferente do assembly que foi carregado primeiro caso as configurações de caminho dos dois domínios de aplicativo sejam diferentes.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> or <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was compiled with a later version of the common language runtime than the version that is currently loaded.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> foi compilado com uma versão posterior do Common Language Runtime do que a versão carregada atualmente.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The caller does not have permission to call this constructor.</source>
          <target state="translated">O chamador não tem permissão para chamar esse construtor.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>No matching constructor was found.</source>
          <target state="translated">Nenhum construtor correspondente foi encontrado.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</source>
          <target state="translated">O chamador não pode fornecer atributos de ativação para um objeto que não seja herdado de <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="typename" /&gt;</ph> was not found in <ph id="ph2">&lt;paramref name="assemblyName" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typename" /&gt;</ph> não foi encontrado em <ph id="ph2">&lt;paramref name="assemblyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>This instance is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Esta instância é <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>for the ability to read the file containing the assembly manifest.</source>
          <target state="translated">para a capacidade de ler o arquivo que contém o manifesto do assembly.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>for the ability to access the location of the assembly if the assembly is not local.</source>
          <target state="translated">para a capacidade de acessar o local do conjunto caso o assembly não seja local.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>for the ability to call unmanaged code when creating an instance of a delegate.</source>
          <target state="translated">para a capacidade de chamar código não gerenciado durante a criação de uma instância de um representante.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>for the ability to invoke operations on all type members.</source>
          <target state="translated">a capacidade de invocar operações em todos os membros do tipo.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The display name of the assembly.</source>
          <target state="translated">O nome para exibição do assembly.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>See <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph> property.</source>
          <target state="translated">O nome totalmente qualificado do tipo solicitado, inclusive o namespace, mas não o assembly, como retornado pela propriedade <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>A Boolean value specifying whether to perform a case-sensitive search or not.</source>
          <target state="translated">Um valor booliano especificando se é necessário executar uma pesquisa que diferencie maiúsculas de minúsculas ou não.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>A combination of zero or more bit flags that affect the search for the <bpt id="p1">&lt;c&gt;</bpt>typeName<ept id="p1">&lt;/c&gt;</ept> constructor.</source>
          <target state="translated">Uma combinação de zero ou mais sinalizadores de bit que afetam a pesquisa para o construtor <bpt id="p1">&lt;c&gt;</bpt>typeName<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>bindingAttr<ept id="p1">&lt;/c&gt;</ept> is zero, a case-sensitive search for public constructors is conducted.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>bindingAttr<ept id="p1">&lt;/c&gt;</ept> for zero, uma pesquisa que diferencia maiúsculas de minúsculas para construtores públicos será realizada.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects using reflection.</source>
          <target state="translated">Um objeto que permite a associação, a coerção de tipos de argumento, a invocação de membros e a recuperação de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> usando reflexão.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is null, the default binder is used.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> for nulo, o associador padrão será usado.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The arguments to pass to the constructor.</source>
          <target state="translated">Os argumentos a serem passados para o construtor.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</source>
          <target state="translated">Esta matriz de argumentos deve corresponder em número, ordem e digitar os parâmetros do construtor a ser invocado.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>If the default constructor is preferred, <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> must be an empty array or null.</source>
          <target state="translated">Se construtor padrão for preferido, <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> deverá ser uma matriz vazia ou nula.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Culture-specific information that governs the coercion of <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> to the formal types declared for the <bpt id="p2">&lt;c&gt;</bpt>typeName<ept id="p2">&lt;/c&gt;</ept> constructor.</source>
          <target state="translated">Informações específicas de cultura que controlam a coerção de <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> para os tipos formais declarados para o construtor <bpt id="p2">&lt;c&gt;</bpt>typeName<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> for the current thread is used.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> for <ph id="ph1">&lt;see langword="null" /&gt;</ph>, a <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> do thread atual será usada.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">Uma matriz de um ou mais atributos que podem participar da ativação.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Typically, an array that contains a single <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /&gt;</ph> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">Normalmente, uma matriz que contém um único objeto <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /&gt;</ph> que especifica a URL necessária para ativar um objeto remoto.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">Esse parâmetro está relacionado a objetos ativados pelo cliente. A ativação pelo cliente é uma tecnologia herdada, mantida para compatibilidade com versões anteriores, mas não é recomendada para novos desenvolvimentos.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">Em vez disso, os aplicativos distribuídos devem usar o Windows Communication Foundation.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Information used to authorize creation of <bpt id="p1">&lt;c&gt;</bpt>typeName<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Informações usadas para autorizar a criação de <bpt id="p1">&lt;c&gt;</bpt>typeName<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Creates a new instance of the specified type defined in the specified assembly.</source>
          <target state="translated">Cria uma nova instância do tipo especificado definido no assembly especificado.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Parameters specify a binder, binding flags, constructor arguments, culture-specific information used to interpret arguments, activation attributes, and authorization to create the type.</source>
          <target state="translated">Os parâmetros especificam um associador, sinalizadores de associação, argumentos de construtor, informações específicas da cultura usadas para interpretar argumentos, atributos de ativação e autorização para criar o tipo.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>An object that is a wrapper for the new instance specified by <ph id="ph1">&lt;paramref name="typeName" /&gt;</ph>.</source>
          <target state="translated">Um objeto que é um wrapper para a nova instância especificada por <ph id="ph1">&lt;paramref name="typeName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">O valor de retorno precisa ser desencapsulado para acessar o objeto real.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>See <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for the format of <ph id="ph2">`assemblyName`</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> para o formato de <ph id="ph2">`assemblyName`</ph>.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>An attempt to call <ph id="ph1">&lt;xref:System.AppDomain.CreateInstance%2A&gt;</ph> on a target application domain that is not the current application domain will result in a successful load of the assembly in the target application domain.</source>
          <target state="translated">Uma tentativa de chamar <ph id="ph1">&lt;xref:System.AppDomain.CreateInstance%2A&gt;</ph> em um domínio de aplicativo de destino que não seja o domínio de aplicativo atual resultará em uma carga bem-sucedida do assembly no domínio de aplicativo de destino.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Since an <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph> is not <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, when this method attempts to return the <ph id="ph3">&lt;xref:System.Reflection.Assembly&gt;</ph> for the loaded assembly to the current application domain, the common language runtime will try to load the assembly into the current application domain and the load might fail.</source>
          <target state="translated">Como um <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph> não é <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, quando esse método tenta retornar o <ph id="ph3">&lt;xref:System.Reflection.Assembly&gt;</ph> do assembly carregado para o domínio de aplicativo atual, o Common Language Runtime tentará carregar o assembly no domínio do aplicativo atual e a carga poderá falhar.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The assembly that is loaded into the current application domain might be different from the assembly that was loaded first if the path settings for the two application domains are different.</source>
          <target state="translated">O assembly carregado no domínio de aplicativo atual pode ser diferente do assembly que foi carregado primeiro caso as configurações de caminho dos dois domínios de aplicativo sejam diferentes.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> or <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was compiled with a later version.</source>
          <target state="translated">A versão 2,0 ou posterior do Common Language Runtime está carregada e <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> foi compilada com uma versão posterior.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The caller does not have permission to call this constructor.</source>
          <target state="translated">O chamador não tem permissão para chamar esse construtor.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>No matching constructor was found.</source>
          <target state="translated">Nenhum construtor correspondente foi encontrado.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</source>
          <target state="translated">O chamador não pode fornecer atributos de ativação para um objeto que não seja herdado de <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="securityAttributes" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="securityAttributes" /&gt;</ph> não é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>When legacy CAS policy is not enabled, <ph id="ph1">&lt;paramref name="securityAttributes" /&gt;</ph> should be <ph id="ph2">&lt;see langword="null." /&gt;</ph></source>
          <target state="translated">Quando a política CAS herdada não está habilitada, <ph id="ph1">&lt;paramref name="securityAttributes" /&gt;</ph> deve ser <ph id="ph2">&lt;see langword="null." /&gt;</ph></target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="typename" /&gt;</ph> was not found in <ph id="ph2">&lt;paramref name="assemblyName" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typename" /&gt;</ph> não foi encontrado em <ph id="ph2">&lt;paramref name="assemblyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>This instance is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Esta instância é <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>for the ability to read the file containing the assembly manifest.</source>
          <target state="translated">para a capacidade de ler o arquivo que contém o manifesto do assembly.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>for the ability to access the location of the assembly if the assembly is not local.</source>
          <target state="translated">para a capacidade de acessar o local do conjunto caso o assembly não seja local.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>to provide evidence.</source>
          <target state="translated">para fornecer evidência.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>for the ability to invoke operations on all type members.</source>
          <target state="translated">a capacidade de invocar operações em todos os membros do tipo.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="T:System.AppDomain">
          <source>Creates a new instance of a specified type.</source>
          <target state="translated">Cria uma nova instância de um tipo especificado.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source>The display name of the assembly.</source>
          <target state="translated">O nome para exibição do assembly.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source>See <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph> property.</source>
          <target state="translated">O nome totalmente qualificado do tipo solicitado, inclusive o namespace, mas não o assembly, como retornado pela propriedade <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source>Creates a new instance of the specified type.</source>
          <target state="translated">Cria uma nova instância do tipo especificado.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source>Parameters specify the assembly where the type is defined, and the name of the type.</source>
          <target state="translated">Parâmetros especificam o assembly no qual o tipo é definido e o nome do tipo.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source>An instance of the object specified by <ph id="ph1">&lt;paramref name="typeName" /&gt;</ph>.</source>
          <target state="translated">Uma instância do objeto especificado por <ph id="ph1">&lt;paramref name="typeName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source>This is a convenience method that combines <ph id="ph1">&lt;xref:System.AppDomain.CreateInstance%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Este é um método prático que combina <ph id="ph1">&lt;xref:System.AppDomain.CreateInstance%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source>This method calls the default constructor for <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">Este método chama o construtor padrão para <ph id="ph1">`typeName`</ph>.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source>See <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for the format of <ph id="ph2">`assemblyName`</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> para o formato de <ph id="ph2">`assemblyName`</ph>.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source>See the <ph id="ph1">&lt;xref:System.Type.FullName%2A?displayProperty=nameWithType&gt;</ph> property for the format of <ph id="ph2">`typeName`</ph>.</source>
          <target state="translated">Consulte a propriedade <ph id="ph1">&lt;xref:System.Type.FullName%2A?displayProperty=nameWithType&gt;</ph> do formato de <ph id="ph2">`typeName`</ph>.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source>If you make an early-bound call to a method <ph id="ph1">`M`</ph> of an object of type <ph id="ph2">`T1`</ph> that was returned by <ph id="ph3">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</ph>, and that method makes an early-bound call to a method of an object of type <ph id="ph4">`T2`</ph> in an assembly <ph id="ph5">`C`</ph> other than the current assembly or the assembly containing <ph id="ph6">`T1`</ph>, assembly <ph id="ph7">`C`</ph> is loaded into the current application domain.</source>
          <target state="translated">Caso você faça uma chamada Early Bound para um método <ph id="ph1">`M`</ph> de um objeto do tipo <ph id="ph2">`T1`</ph> que foi retornado por <ph id="ph3">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</ph> e esse método faça uma chamada Early Bound para um método de um objeto do tipo <ph id="ph4">`T2`</ph> em um assembly <ph id="ph5">`C`</ph> diferente do assembly atual ou do assembly que contém <ph id="ph6">`T1`</ph>, o assembly <ph id="ph7">`C`</ph> é carregado no domínio de aplicativo atual.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source>This loading occurs even if the early-bound call to <ph id="ph1">`T1.M()`</ph> was made in the body of a <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>, or in other dynamically generated code.</source>
          <target state="translated">Este carregamento ocorre mesmo se a chamada Early Bound para <ph id="ph1">`T1.M()`</ph> tiver sido feita no corpo de um <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> ou em outro código gerado dinamicamente.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source>If the current domain is the default domain, assembly <ph id="ph1">`C`</ph> cannot be unloaded until the process ends.</source>
          <target state="translated">Caso o domínio atual seja o domínio padrão, o assembly <ph id="ph1">`C`</ph> não pode ser descarregado até o término do processo.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source>If the current domain later attempts to load assembly <ph id="ph1">`C`</ph>, the load might fail.</source>
          <target state="translated">Caso o domínio atual tente carregar posteriormente o assembly <ph id="ph1">`C`</ph>, o carregamento pode falhar.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source>The following code example shows the simplest way to execute code in another application domain.</source>
          <target state="translated">O exemplo de código a seguir mostra a maneira mais simples para executar código em outro domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source>The example defines a class named <ph id="ph1">`Worker`</ph> that inherits from <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>.</source>
          <target state="translated">O exemplo define uma classe denominada <ph id="ph1">`Worker`</ph> que herda de <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source>The <ph id="ph1">`Worker`</ph> class defines a method that displays the name of the application domain in which it is executing.</source>
          <target state="translated">O <ph id="ph1">`Worker`</ph> classe define um método que exibe o nome do domínio do aplicativo no qual ele está em execução.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source>The example creates instances of <ph id="ph1">`Worker`</ph> in the default application domain and in a new application domain.</source>
          <target state="translated">O exemplo cria instâncias de <ph id="ph1">`Worker`</ph> no domínio de aplicativo padrão e em um novo domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source>The assembly that contains <ph id="ph1">`Worker`</ph> must be loaded into both application domains, but it can load other assemblies that exist only in the new application domain.</source>
          <target state="translated">O assembly que contém <ph id="ph1">`Worker`</ph> devem ser carregados em ambos os domínios de aplicativo, mas ele pode carregar outros assemblies que existem somente no novo domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> or <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source>No matching public constructor was found.</source>
          <target state="translated">Nenhum construtor público correspondente foi encontrado.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="typename" /&gt;</ph> was not found in <ph id="ph2">&lt;paramref name="assemblyName" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typename" /&gt;</ph> não foi encontrado em <ph id="ph2">&lt;paramref name="assemblyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source>The caller does not have permission to call this constructor.</source>
          <target state="translated">O chamador não tem permissão para chamar esse construtor.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source>Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was compiled with a later version.</source>
          <target state="translated">A versão 2,0 ou posterior do Common Language Runtime está carregada e <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> foi compilada com uma versão posterior.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source>for the ability to read the file containing the assembly manifest, or if you are creating a type from a module other than the manifest file.</source>
          <target state="translated">a capacidade de ler o arquivo que contém o manifesto do assembly, ou se você estiver criando um tipo de um módulo que não seja o arquivo de manifesto.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
          <source>for the ability to access the location of the assembly if the assembly is not local.</source>
          <target state="translated">para a capacidade de acessar o local do conjunto caso o assembly não seja local.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>The display name of the assembly.</source>
          <target state="translated">O nome para exibição do assembly.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>See <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph> property.</source>
          <target state="translated">O nome totalmente qualificado do tipo solicitado, inclusive o namespace, mas não o assembly, como retornado pela propriedade <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">Uma matriz de um ou mais atributos que podem participar da ativação.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>Typically, an array that contains a single <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /&gt;</ph> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">Normalmente, uma matriz que contém um único objeto <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /&gt;</ph> que especifica a URL necessária para ativar um objeto remoto.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">Esse parâmetro está relacionado a objetos ativados pelo cliente. A ativação pelo cliente é uma tecnologia herdada, mantida para compatibilidade com versões anteriores, mas não é recomendada para novos desenvolvimentos.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">Em vez disso, os aplicativos distribuídos devem usar o Windows Communication Foundation.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>Creates a new instance of the specified type.</source>
          <target state="translated">Cria uma nova instância do tipo especificado.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>Parameters specify the assembly where the type is defined, the name of the type, and an array of activation attributes.</source>
          <target state="translated">Parâmetros especificam o assembly no qual o tipo, o nome do tipo e uma matriz de atributos de ativação são definidos.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>An instance of the object specified by <ph id="ph1">&lt;paramref name="typeName" /&gt;</ph>.</source>
          <target state="translated">Uma instância do objeto especificado por <ph id="ph1">&lt;paramref name="typeName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>This is a convenience method that combines <ph id="ph1">&lt;xref:System.AppDomain.CreateInstance%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Este é um método prático que combina <ph id="ph1">&lt;xref:System.AppDomain.CreateInstance%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>This method calls the default constructor for <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">Este método chama o construtor padrão para <ph id="ph1">`typeName`</ph>.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>See <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for the format of <ph id="ph2">`assemblyName`</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> para o formato de <ph id="ph2">`assemblyName`</ph>.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>See the <ph id="ph1">&lt;xref:System.Type.FullName%2A?displayProperty=nameWithType&gt;</ph> property for the format of <ph id="ph2">`typeName`</ph>.</source>
          <target state="translated">Consulte a propriedade <ph id="ph1">&lt;xref:System.Type.FullName%2A?displayProperty=nameWithType&gt;</ph> do formato de <ph id="ph2">`typeName`</ph>.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>If you make an early-bound call to a method <ph id="ph1">`M`</ph> of an object of type <ph id="ph2">`T1`</ph> that was returned by <ph id="ph3">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</ph>, and that method makes an early-bound call to a method of an object of type <ph id="ph4">`T2`</ph> in an assembly <ph id="ph5">`C`</ph> other than the current assembly or the assembly containing <ph id="ph6">`T1`</ph>, assembly <ph id="ph7">`C`</ph> is loaded into the current application domain.</source>
          <target state="translated">Caso você faça uma chamada Early Bound para um método <ph id="ph1">`M`</ph> de um objeto do tipo <ph id="ph2">`T1`</ph> que foi retornado por <ph id="ph3">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</ph> e esse método faça uma chamada Early Bound para um método de um objeto do tipo <ph id="ph4">`T2`</ph> em um assembly <ph id="ph5">`C`</ph> diferente do assembly atual ou do assembly que contém <ph id="ph6">`T1`</ph>, o assembly <ph id="ph7">`C`</ph> é carregado no domínio de aplicativo atual.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>This loading occurs even if the early-bound call to <ph id="ph1">`T1.M()`</ph> was made in the body of a <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>, or in other dynamically generated code.</source>
          <target state="translated">Este carregamento ocorre mesmo se a chamada Early Bound para <ph id="ph1">`T1.M()`</ph> tiver sido feita no corpo de um <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> ou em outro código gerado dinamicamente.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>If the current domain is the default domain, assembly <ph id="ph1">`C`</ph> cannot be unloaded until the process ends.</source>
          <target state="translated">Caso o domínio atual seja o domínio padrão, o assembly <ph id="ph1">`C`</ph> não pode ser descarregado até o término do processo.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>If the current domain later attempts to load assembly <ph id="ph1">`C`</ph>, the load might fail.</source>
          <target state="translated">Caso o domínio atual tente carregar posteriormente o assembly <ph id="ph1">`C`</ph>, o carregamento pode falhar.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> or <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>No matching public constructor was found.</source>
          <target state="translated">Nenhum construtor público correspondente foi encontrado.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="typename" /&gt;</ph> was not found in <ph id="ph2">&lt;paramref name="assemblyName" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typename" /&gt;</ph> não foi encontrado em <ph id="ph2">&lt;paramref name="assemblyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>The caller does not have permission to call this constructor.</source>
          <target state="translated">O chamador não tem permissão para chamar esse construtor.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</source>
          <target state="translated">O chamador não pode fornecer atributos de ativação para um objeto que não seja herdado de <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was compiled with a later version.</source>
          <target state="translated">A versão 2,0 ou posterior do Common Language Runtime está carregada e <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> foi compilada com uma versão posterior.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>for the ability to read the file containing the assembly manifest.</source>
          <target state="translated">para a capacidade de ler o arquivo que contém o manifesto do assembly.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>for the ability to access the location of the assembly if the assembly is not local.</source>
          <target state="translated">para a capacidade de acessar o local do conjunto caso o assembly não seja local.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>for the ability to call unmanaged code when creating an instance of a delegate.</source>
          <target state="translated">para a capacidade de chamar código não gerenciado durante a criação de uma instância de um representante.</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>for the ability to invoke operations on all type members.</source>
          <target state="translated">a capacidade de invocar operações em todos os membros do tipo.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The display name of the assembly.</source>
          <target state="translated">O nome para exibição do assembly.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>See <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph> property.</source>
          <target state="translated">O nome totalmente qualificado do tipo solicitado, inclusive o namespace, mas não o assembly, como retornado pela propriedade <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>A Boolean value specifying whether to perform a case-sensitive search or not.</source>
          <target state="translated">Um valor booliano especificando se é necessário executar uma pesquisa que diferencie maiúsculas de minúsculas ou não.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>A combination of zero or more bit flags that affect the search for the <bpt id="p1">&lt;c&gt;</bpt>typeName<ept id="p1">&lt;/c&gt;</ept> constructor.</source>
          <target state="translated">Uma combinação de zero ou mais sinalizadores de bit que afetam a pesquisa para o construtor <bpt id="p1">&lt;c&gt;</bpt>typeName<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>bindingAttr<ept id="p1">&lt;/c&gt;</ept> is zero, a case-sensitive search for public constructors is conducted.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>bindingAttr<ept id="p1">&lt;/c&gt;</ept> for zero, uma pesquisa que diferencia maiúsculas de minúsculas para construtores públicos será realizada.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects using reflection.</source>
          <target state="translated">Um objeto que permite a associação, a coerção de tipos de argumento, a invocação de membros e a recuperação de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> usando reflexão.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is null, the default binder is used.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> for nulo, o associador padrão será usado.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The arguments to pass to the constructor.</source>
          <target state="translated">Os argumentos a serem passados para o construtor.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</source>
          <target state="translated">Esta matriz de argumentos deve corresponder em número, ordem e digitar os parâmetros do construtor a ser invocado.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>If the default constructor is preferred, <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> must be an empty array or null.</source>
          <target state="translated">Se construtor padrão for preferido, <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> deverá ser uma matriz vazia ou nula.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>A culture-specific object used to govern the coercion of types.</source>
          <target state="translated">Um objeto específico da cultura usado para controlar a coerção de tipos.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the <ph id="ph2">&lt;see langword="CultureInfo" /&gt;</ph> for the current thread is used.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> for <ph id="ph1">&lt;see langword="null" /&gt;</ph>, a <ph id="ph2">&lt;see langword="CultureInfo" /&gt;</ph> do thread atual será usada.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">Uma matriz de um ou mais atributos que podem participar da ativação.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Typically, an array that contains a single <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /&gt;</ph> object.</source>
          <target state="translated">Normalmente, uma matriz que contém um único objeto <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">que especifica a URL necessária para ativar um objeto remoto.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>This parameter is related to client-activated objects.</source>
          <target state="translated">Esse parâmetro está relacionado a objetos ativados pelo cliente.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">A ativação do cliente é uma tecnologia herdada, mantida para compatibilidade com versões anteriores, mas não é recomendada para novos desenvolvimentos.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">Em vez disso, os aplicativos distribuídos devem usar o Windows Communication Foundation.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Creates a new instance of the specified type defined in the specified assembly, specifying whether the case of the type name is ignored; the binding attributes and the binder that are used to select the type to be created; the arguments of the constructor; the culture; and the activation attributes.</source>
          <target state="translated">Cria uma nova instância do tipo indicado definido no assembly especificado, determinando se a diferenciação entre maiúsculas e minúsculas é ignorada no nome do tipo; os atributos de associação e o associador que são usados para selecionar o tipo a ser criado; os argumentos do construtor; a cultura; e os atributos de ativação.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>An instance of the object specified by <ph id="ph1">&lt;paramref name="typeName" /&gt;</ph>.</source>
          <target state="translated">Uma instância do objeto especificado por <ph id="ph1">&lt;paramref name="typeName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>This is a convenience method that combines <ph id="ph1">&lt;xref:System.AppDomain.CreateInstance%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Este é um método prático que combina <ph id="ph1">&lt;xref:System.AppDomain.CreateInstance%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>See <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for the format of <ph id="ph2">`assemblyName`</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> para o formato de <ph id="ph2">`assemblyName`</ph>.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>See the <ph id="ph1">&lt;xref:System.Type.FullName%2A?displayProperty=nameWithType&gt;</ph> property for the format of <ph id="ph2">`typeName`</ph>.</source>
          <target state="translated">Consulte a propriedade <ph id="ph1">&lt;xref:System.Type.FullName%2A?displayProperty=nameWithType&gt;</ph> do formato de <ph id="ph2">`typeName`</ph>.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>If you make an early-bound call to a method <ph id="ph1">`M`</ph> of an object of type <ph id="ph2">`T1`</ph> that was returned by <ph id="ph3">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</ph>, and that method makes an early-bound call to a method of an object of type <ph id="ph4">`T2`</ph> in an assembly <ph id="ph5">`C`</ph> other than the current assembly or the assembly containing <ph id="ph6">`T1`</ph>, assembly <ph id="ph7">`C`</ph> is loaded into the current application domain.</source>
          <target state="translated">Caso você faça uma chamada Early Bound para um método <ph id="ph1">`M`</ph> de um objeto do tipo <ph id="ph2">`T1`</ph> que foi retornado por <ph id="ph3">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</ph> e esse método faça uma chamada Early Bound para um método de um objeto do tipo <ph id="ph4">`T2`</ph> em um assembly <ph id="ph5">`C`</ph> diferente do assembly atual ou do assembly que contém <ph id="ph6">`T1`</ph>, o assembly <ph id="ph7">`C`</ph> é carregado no domínio de aplicativo atual.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>This loading occurs even if the early-bound call to <ph id="ph1">`T1.M()`</ph> was made in the body of a <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>, or in other dynamically generated code.</source>
          <target state="translated">Este carregamento ocorre mesmo se a chamada Early Bound para <ph id="ph1">`T1.M()`</ph> tiver sido feita no corpo de um <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> ou em outro código gerado dinamicamente.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>If the current domain is the default domain, assembly <ph id="ph1">`C`</ph> cannot be unloaded until the process ends.</source>
          <target state="translated">Caso o domínio atual seja o domínio padrão, o assembly <ph id="ph1">`C`</ph> não pode ser descarregado até o término do processo.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>If the current domain later attempts to load assembly <ph id="ph1">`C`</ph>, the load might fail.</source>
          <target state="translated">Caso o domínio atual tente carregar posteriormente o assembly <ph id="ph1">`C`</ph>, o carregamento pode falhar.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The following sample demonstrates the use of the <ph id="ph1">`ignoreCase`</ph> parameter.</source>
          <target state="translated">O exemplo a seguir demonstra o uso de <ph id="ph1">`ignoreCase`</ph> parâmetro.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> or <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>No matching constructor was found.</source>
          <target state="translated">Nenhum construtor correspondente foi encontrado.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="typename" /&gt;</ph> was not found in <ph id="ph2">&lt;paramref name="assemblyName" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typename" /&gt;</ph> não foi encontrado em <ph id="ph2">&lt;paramref name="assemblyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The caller does not have permission to call this constructor.</source>
          <target state="translated">O chamador não tem permissão para chamar esse construtor.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</source>
          <target state="translated">O chamador não pode fornecer atributos de ativação para um objeto que não seja herdado de <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was compiled with a later version of the common language runtime than the version that is currently loaded.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> foi compilado com uma versão posterior do Common Language Runtime do que a versão carregada atualmente.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>for the ability to read the file containing the assembly manifest.</source>
          <target state="translated">para a capacidade de ler o arquivo que contém o manifesto do assembly.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>for the ability to access the location of the assembly if the assembly is not local.</source>
          <target state="translated">para a capacidade de acessar o local do conjunto caso o assembly não seja local.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>for the ability to call unmanaged code when creating an instance of a delegate.</source>
          <target state="translated">para a capacidade de chamar código não gerenciado durante a criação de uma instância de um representante.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>for the ability to invoke operations on all type members.</source>
          <target state="translated">a capacidade de invocar operações em todos os membros do tipo.</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The display name of the assembly.</source>
          <target state="translated">O nome para exibição do assembly.</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>See <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph> property.</source>
          <target state="translated">O nome totalmente qualificado do tipo solicitado, inclusive o namespace, mas não o assembly, como retornado pela propriedade <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>A Boolean value specifying whether to perform a case-sensitive search or not.</source>
          <target state="translated">Um valor booliano especificando se é necessário executar uma pesquisa que diferencie maiúsculas de minúsculas ou não.</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>A combination of zero or more bit flags that affect the search for the <bpt id="p1">&lt;c&gt;</bpt>typeName<ept id="p1">&lt;/c&gt;</ept> constructor.</source>
          <target state="translated">Uma combinação de zero ou mais sinalizadores de bit que afetam a pesquisa para o construtor <bpt id="p1">&lt;c&gt;</bpt>typeName<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>bindingAttr<ept id="p1">&lt;/c&gt;</ept> is zero, a case-sensitive search for public constructors is conducted.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>bindingAttr<ept id="p1">&lt;/c&gt;</ept> for zero, uma pesquisa que diferencia maiúsculas de minúsculas para construtores públicos será realizada.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects using reflection.</source>
          <target state="translated">Um objeto que permite a associação, a coerção de tipos de argumento, a invocação de membros e a recuperação de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> usando reflexão.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is null, the default binder is used.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> for nulo, o associador padrão será usado.</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The arguments to pass to the constructor.</source>
          <target state="translated">Os argumentos a serem passados para o construtor.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</source>
          <target state="translated">Esta matriz de argumentos deve corresponder em número, ordem e digitar os parâmetros do construtor a ser invocado.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>If the default constructor is preferred, <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> must be an empty array or null.</source>
          <target state="translated">Se construtor padrão for preferido, <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> deverá ser uma matriz vazia ou nula.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>A culture-specific object used to govern the coercion of types.</source>
          <target state="translated">Um objeto específico da cultura usado para controlar a coerção de tipos.</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the <ph id="ph2">&lt;see langword="CultureInfo" /&gt;</ph> for the current thread is used.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> for <ph id="ph1">&lt;see langword="null" /&gt;</ph>, a <ph id="ph2">&lt;see langword="CultureInfo" /&gt;</ph> do thread atual será usada.</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">Uma matriz de um ou mais atributos que podem participar da ativação.</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Typically, an array that contains a single <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /&gt;</ph> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">Normalmente, uma matriz que contém um único objeto <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /&gt;</ph> que especifica a URL necessária para ativar um objeto remoto.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>This parameter is related to client-activated objects.</source>
          <target state="translated">Esse parâmetro está relacionado a objetos ativados pelo cliente.</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">A ativação do cliente é uma tecnologia herdada, mantida para compatibilidade com versões anteriores, mas não é recomendada para novos desenvolvimentos.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">Em vez disso, os aplicativos distribuídos devem usar o Windows Communication Foundation.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Information used to authorize creation of <bpt id="p1">&lt;c&gt;</bpt>typeName<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Informações usadas para autorizar a criação de <bpt id="p1">&lt;c&gt;</bpt>typeName<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Creates a new instance of the specified type.</source>
          <target state="translated">Cria uma nova instância do tipo especificado.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Parameters specify the name of the type, and how it is found and created.</source>
          <target state="translated">Os parâmetros especificam o nome do tipo e como ele é encontrado e criado.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>An instance of the object specified by <ph id="ph1">&lt;paramref name="typeName" /&gt;</ph>.</source>
          <target state="translated">Uma instância do objeto especificado por <ph id="ph1">&lt;paramref name="typeName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>This is a convenience method that combines <ph id="ph1">&lt;xref:System.AppDomain.CreateInstance%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Este é um método prático que combina <ph id="ph1">&lt;xref:System.AppDomain.CreateInstance%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>See <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for the format of <ph id="ph2">`assemblyName`</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> para o formato de <ph id="ph2">`assemblyName`</ph>.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>See the <ph id="ph1">&lt;xref:System.Type.FullName%2A?displayProperty=nameWithType&gt;</ph> property for the format of <ph id="ph2">`typeName`</ph>.</source>
          <target state="translated">Consulte a propriedade <ph id="ph1">&lt;xref:System.Type.FullName%2A?displayProperty=nameWithType&gt;</ph> do formato de <ph id="ph2">`typeName`</ph>.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>If you make an early-bound call to a method <ph id="ph1">`M`</ph> of an object of type <ph id="ph2">`T1`</ph> that was returned by <ph id="ph3">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</ph>, and that method makes an early-bound call to a method of an object of type <ph id="ph4">`T2`</ph> in an assembly <ph id="ph5">`C`</ph> other than the current assembly or the assembly containing <ph id="ph6">`T1`</ph>, assembly <ph id="ph7">`C`</ph> is loaded into the current application domain.</source>
          <target state="translated">Caso você faça uma chamada Early Bound para um método <ph id="ph1">`M`</ph> de um objeto do tipo <ph id="ph2">`T1`</ph> que foi retornado por <ph id="ph3">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</ph> e esse método faça uma chamada Early Bound para um método de um objeto do tipo <ph id="ph4">`T2`</ph> em um assembly <ph id="ph5">`C`</ph> diferente do assembly atual ou do assembly que contém <ph id="ph6">`T1`</ph>, o assembly <ph id="ph7">`C`</ph> é carregado no domínio de aplicativo atual.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>This loading occurs even if the early-bound call to <ph id="ph1">`T1.M()`</ph> was made in the body of a <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>, or in other dynamically generated code.</source>
          <target state="translated">Este carregamento ocorre mesmo se a chamada Early Bound para <ph id="ph1">`T1.M()`</ph> tiver sido feita no corpo de um <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> ou em outro código gerado dinamicamente.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>If the current domain is the default domain, assembly <ph id="ph1">`C`</ph> cannot be unloaded until the process ends.</source>
          <target state="translated">Caso o domínio atual seja o domínio padrão, o assembly <ph id="ph1">`C`</ph> não pode ser descarregado até o término do processo.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>If the current domain later attempts to load assembly <ph id="ph1">`C`</ph>, the load might fail.</source>
          <target state="translated">Caso o domínio atual tente carregar posteriormente o assembly <ph id="ph1">`C`</ph>, o carregamento pode falhar.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The following sample demonstrates the use of the <ph id="ph1">`ignoreCase`</ph> parameter.</source>
          <target state="translated">O exemplo a seguir demonstra o uso de <ph id="ph1">`ignoreCase`</ph> parâmetro.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> or <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>No matching constructor was found.</source>
          <target state="translated">Nenhum construtor correspondente foi encontrado.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="typename" /&gt;</ph> was not found in <ph id="ph2">&lt;paramref name="assemblyName" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typename" /&gt;</ph> não foi encontrado em <ph id="ph2">&lt;paramref name="assemblyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The caller does not have permission to call this constructor.</source>
          <target state="translated">O chamador não tem permissão para chamar esse construtor.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</source>
          <target state="translated">O chamador não pode fornecer atributos de ativação para um objeto que não seja herdado de <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was compiled with a later version.</source>
          <target state="translated">A versão 2,0 ou posterior do Common Language Runtime está carregada e <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> foi compilada com uma versão posterior.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>for the ability to read the file containing the assembly manifest.</source>
          <target state="translated">para a capacidade de ler o arquivo que contém o manifesto do assembly.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>for the ability to access the location of the assembly if the assembly is not local.</source>
          <target state="translated">para a capacidade de acessar o local do conjunto caso o assembly não seja local.</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>to load an assembly with evidence.</source>
          <target state="translated">para carregar um assembly com evidências.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>for the ability to invoke operations on all type members.</source>
          <target state="translated">a capacidade de invocar operações em todos os membros do tipo.</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" uid="T:System.AppDomain">
          <source>Creates a new instance of a specified type defined in the specified assembly file.</source>
          <target state="translated">Cria uma nova instância de um tipo especificado definido no arquivo de assembly especificado.</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>The name, including the path, of a file that contains an assembly that defines the requested type.</source>
          <target state="translated">O nome, inclusive o caminho, de um arquivo que contém um assembly que define o tipo solicitado.</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>The assembly is loaded using the <ph id="ph1">&lt;see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /&gt;</ph> method.</source>
          <target state="translated">O assembly é carregado usando o método <ph id="ph1">&lt;see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph> property.</source>
          <target state="translated">O nome totalmente qualificado do tipo solicitado, inclusive o namespace, mas não o assembly, como retornado pela propriedade <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>Creates a new instance of the specified type defined in the specified assembly file.</source>
          <target state="translated">Cria uma nova instância do tipo especificado definido no arquivo de assembly especificado.</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>An object that is a wrapper for the new instance, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> is not found.</source>
          <target state="translated">Um objeto que é um wrapper para a nova instância ou <ph id="ph1">&lt;see langword="null" /&gt;</ph> caso <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> não seja encontrado.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">O valor de retorno precisa ser desencapsulado para acessar o objeto real.</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>The default constructor for <ph id="ph1">`typeName`</ph> is invoked.</source>
          <target state="translated">O construtor padrão para <ph id="ph1">`typeName`</ph> é invocado.</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Para obter mais informações, consulte o método <ph id="ph1">&lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>When the <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;</ph> method is used to create an instance in a target application domain, other than the application domain from which the call is made, the assembly is loaded in the target application domain.</source>
          <target state="translated">Quando o método <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;</ph> é usado para criar uma instância em um domínio de aplicativo de destino, outro que não seja o domínio de aplicativo do qual a chamada é feita, o assembly é carregado no domínio de aplicativo de destino.</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>However, if the instance is unwrapped in the calling application domain, using the unwrapped instance in certain ways can cause the assembly to be loaded into the calling application domain.</source>
          <target state="translated">No entanto, caso a instância seja desencapsulada no domínio do aplicativo de chamada, o uso da instância desencapsulada de determinadas formas pode fazer o assembly ser carregado no domínio do aplicativo de chamada.</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>For example, after the instance is unwrapped, its type information might be requested, in order to call its methods late-bound.</source>
          <target state="translated">Por exemplo, depois da instância ser desencapsulada, as informações de tipo poderão ser solicitadas, para chamar a associação tardia dos métodos.</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>When the assembly is loaded into the calling application domain, exceptions can occur.</source>
          <target state="translated">Quando o assembly é carregado no domínio de aplicativo de chamada, podem ocorrer exceções.</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>If another version of the same assembly was previously loaded into the calling application domain, or if the load path of the calling application domain is different from that of the target application domain, exceptions such as <ph id="ph1">&lt;xref:System.MissingMethodException&gt;</ph> can occur.</source>
          <target state="translated">Caso outra versão do mesmo assembly tenha sido carregada anteriormente no domínio do aplicativo de chamada ou caso o caminho de carregamento do domínio de aplicativo de chamada seja diferente do domínio do aplicativo de destino, exceções como <ph id="ph1">&lt;xref:System.MissingMethodException&gt;</ph> podem ocorrer.</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>If the calling application domain makes early-bound calls to the instance type, <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> can be thrown when an attempt is made to cast the instance.</source>
          <target state="translated">Caso o domínio do aplicativo de chamada faça chamadas Early Bound para o tipo de instância, <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> pode ser lançado quando uma tentativa é feita para converter a instância.</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceFrom%28System.String%2CSystem.String%29&gt;</ph> method overload to create an instance of an object in a target application domain and call its methods.</source>
          <target state="translated">O exemplo a seguir mostra como usar o <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceFrom%28System.String%2CSystem.String%29&gt;</ph> sobrecarga do método para criar uma instância de um objeto em um domínio de aplicativo de destino e chamar seus métodos.</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>The example defines the <ph id="ph1">`MarshallableExample`</ph> class, which can be marshaled across application domain boundaries.</source>
          <target state="translated">O exemplo define o <ph id="ph1">`MarshallableExample`</ph> classe, que pode ser empacotado nos limites do domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>The example builds a path to the currently executing assembly, creates a target application domain, and uses the <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceFrom%28System.String%2CSystem.String%29&gt;</ph> method overload to load the example assembly into the target application domain and create an instance of <ph id="ph2">`MarshallableExample`</ph>.</source>
          <target state="translated">O exemplo cria um caminho para o assembly em execução no momento, cria um domínio de aplicativo de destino e usa o <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceFrom%28System.String%2CSystem.String%29&gt;</ph> sobrecarga do método para carregar o assembly de exemplo para o domínio de aplicativo de destino e criar uma instância de <ph id="ph2">`MarshallableExample`</ph>.</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>The path is absolute in this example, but a relative path would also work because the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType&gt;</ph> method is used to load the assembly.</source>
          <target state="translated">O caminho é absoluto neste exemplo, mas um caminho relativo, também pode funcionar como o <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType&gt;</ph> método é usado para carregar o assembly.</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>After unwrapping the object handle, the example demonstrates three ways to use an object in a target application domain:</source>
          <target state="translated">Após o desencapsulamento o identificador de objeto, o exemplo demonstra três maneiras de usar um objeto em um domínio de aplicativo de destino:</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>Invoking a method with late binding, using reflection.</source>
          <target state="translated">Invocando um método com associação tardia, usando a reflexão.</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>This requires type information, which causes the assembly to be loaded into the application domain of the caller.</source>
          <target state="translated">Isso requer informações de tipo, que faz com que o assembly a ser carregado no domínio de aplicativo do chamador.</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>(In this example, it is already loaded.)</source>
          <target state="translated">(Neste exemplo, ele já está carregado.)</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>Casting the object to an interface known to both the caller and the callee.</source>
          <target state="translated">Converter o objeto para uma interface conhecida para o chamador e o receptor.</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>If the interface is defined in the calling assembly or in a third assembly referenced by both the caller and the callee, the called assembly is not loaded into the application domain of the caller.</source>
          <target state="translated">Se a interface está definida no assembly de chamada ou em um terceiro assembly referenciado pelo chamador e o receptor, o assembly de chamada não foi carregado para o domínio de aplicativo do chamador.</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>Using the object directly when its type is known to the caller.</source>
          <target state="translated">Usando o objeto diretamente ao seu tipo é conhecido pelo chamador.</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>The assembly must be loaded into the application domain of the caller.</source>
          <target state="translated">O assembly deve ser carregado no domínio de aplicativo do chamador.</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>Another way to avoid loading the called assembly into the application domain of the caller is for the caller to derive from the <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> class and to define a method that can be run in the target application domain.</source>
          <target state="translated">Outra maneira de evitar carregar o assembly de chamada para o domínio de aplicativo do chamador é para o chamador derivar o <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> classe e para definir um método que pode ser executado no domínio de aplicativo de destino.</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>That method can use reflection to examine a target assembly, because the target assembly is already loaded into the target application domain.</source>
          <target state="translated">Esse método pode usar reflexão para examinar um conjunto de destino, porque o assembly de destino já foi carregado para o domínio de aplicativo de destino.</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>See the example for the <ph id="ph1">&lt;xref:System.AppDomain.DynamicDirectory%2A&gt;</ph> property.</source>
          <target state="translated">Consulte o exemplo para o <ph id="ph1">&lt;xref:System.AppDomain.DynamicDirectory%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> was not found in <ph id="ph2">&lt;paramref name="assemblyFile" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> não foi encontrado em <ph id="ph2">&lt;paramref name="assemblyFile" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>No parameterless public constructor was found.</source>
          <target state="translated">Não foi encontrado nenhum construtor público sem parâmetros.</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>The caller does not have sufficient permission to call this constructor.</source>
          <target state="translated">O chamador não tem permissão suficiente para chamar esse construtor.</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> was compiled with a later version.</source>
          <target state="translated">A versão 2,0 ou posterior do Common Language Runtime está carregada e <ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> foi compilada com uma versão posterior.</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>This instance is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Esta instância é <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>for the ability to read the file containing the assembly manifest.</source>
          <target state="translated">para a capacidade de ler o arquivo que contém o manifesto do assembly.</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
          <source>for the ability to access the location of the assembly if the assembly is not local.</source>
          <target state="translated">para a capacidade de acessar o local do conjunto caso o assembly não seja local.</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>The name, including the path, of a file that contains an assembly that defines the requested type.</source>
          <target state="translated">O nome, inclusive o caminho, de um arquivo que contém um assembly que define o tipo solicitado.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>The assembly is loaded using the <ph id="ph1">&lt;see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /&gt;</ph> method.</source>
          <target state="translated">O assembly é carregado usando o método <ph id="ph1">&lt;see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph> property.</source>
          <target state="translated">O nome totalmente qualificado do tipo solicitado, inclusive o namespace, mas não o assembly, como retornado pela propriedade <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">Uma matriz de um ou mais atributos que podem participar da ativação.</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>Typically, an array that contains a single <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /&gt;</ph> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">Normalmente, uma matriz que contém um único objeto <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /&gt;</ph> que especifica a URL necessária para ativar um objeto remoto.</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">Esse parâmetro está relacionado a objetos ativados pelo cliente. A ativação pelo cliente é uma tecnologia herdada, mantida para compatibilidade com versões anteriores, mas não é recomendada para novos desenvolvimentos.</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">Em vez disso, os aplicativos distribuídos devem usar o Windows Communication Foundation.</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>Creates a new instance of the specified type defined in the specified assembly file.</source>
          <target state="translated">Cria uma nova instância do tipo especificado definido no arquivo de assembly especificado.</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>An object that is a wrapper for the new instance, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> is not found.</source>
          <target state="translated">Um objeto que é um wrapper para a nova instância ou <ph id="ph1">&lt;see langword="null" /&gt;</ph> caso <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> não seja encontrado.</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">O valor de retorno precisa ser desencapsulado para acessar o objeto real.</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>The default constructor for <ph id="ph1">`typeName`</ph> is invoked.</source>
          <target state="translated">O construtor padrão para <ph id="ph1">`typeName`</ph> é invocado.</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>For more information about this method, see the <ph id="ph1">&lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Para obter mais informações sobre esse método, consulte o método <ph id="ph1">&lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>When the <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;</ph> method is used to create an instance in a target application domain, other than the application domain from which the call is made, the assembly is loaded in the target application domain.</source>
          <target state="translated">Quando o método <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;</ph> é usado para criar uma instância em um domínio de aplicativo de destino, outro que não seja o domínio de aplicativo do qual a chamada é feita, o assembly é carregado no domínio de aplicativo de destino.</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>However, if the instance is unwrapped in the calling application domain, using the unwrapped instance in certain ways can cause the assembly to be loaded into the calling application domain.</source>
          <target state="translated">No entanto, caso a instância seja desencapsulada no domínio do aplicativo de chamada, o uso da instância desencapsulada de determinadas formas pode fazer o assembly ser carregado no domínio do aplicativo de chamada.</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>For example, after the instance is unwrapped, its type information might be requested, in order to call its methods late-bound.</source>
          <target state="translated">Por exemplo, depois da instância ser desencapsulada, as informações de tipo poderão ser solicitadas, para chamar a associação tardia dos métodos.</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>When the assembly is loaded into the calling application domain, exceptions can occur.</source>
          <target state="translated">Quando o assembly é carregado no domínio de aplicativo de chamada, podem ocorrer exceções.</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>If another version of the same assembly was previously loaded into the calling application domain, or if the load path of the calling application domain is different from that of the target application domain, exceptions such as <ph id="ph1">&lt;xref:System.MissingMethodException&gt;</ph> can occur.</source>
          <target state="translated">Caso outra versão do mesmo assembly tenha sido carregada anteriormente no domínio do aplicativo de chamada ou caso o caminho de carregamento do domínio de aplicativo de chamada seja diferente do domínio do aplicativo de destino, exceções como <ph id="ph1">&lt;xref:System.MissingMethodException&gt;</ph> podem ocorrer.</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>If the calling application domain makes early-bound calls to the instance type, <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> can be thrown when an attempt is made to cast the instance.</source>
          <target state="translated">Caso o domínio do aplicativo de chamada faça chamadas Early Bound para o tipo de instância, <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> pode ser lançado quando uma tentativa é feita para converter a instância.</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> was not found in <ph id="ph2">&lt;paramref name="assemblyFile" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> não foi encontrado em <ph id="ph2">&lt;paramref name="assemblyFile" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>The caller does not have sufficient permission to call this constructor.</source>
          <target state="translated">O chamador não tem permissão suficiente para chamar esse construtor.</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>No matching public constructor was found.</source>
          <target state="translated">Nenhum construtor público correspondente foi encontrado.</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</source>
          <target state="translated">O chamador não pode fornecer atributos de ativação para um objeto que não seja herdado de <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> was compiled with a later version.</source>
          <target state="translated">A versão 2,0 ou posterior do Common Language Runtime está carregada e <ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> foi compilada com uma versão posterior.</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>This instance is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Esta instância é <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>for the ability to read the file containing the assembly manifest.</source>
          <target state="translated">para a capacidade de ler o arquivo que contém o manifesto do assembly.</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
          <source>for the ability to access the location of the assembly if the assembly is not local.</source>
          <target state="translated">para a capacidade de acessar o local do conjunto caso o assembly não seja local.</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The name, including the path, of a file that contains an assembly that defines the requested type.</source>
          <target state="translated">O nome, inclusive o caminho, de um arquivo que contém um assembly que define o tipo solicitado.</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The assembly is loaded using the <ph id="ph1">&lt;see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /&gt;</ph> method.</source>
          <target state="translated">O assembly é carregado usando o método <ph id="ph1">&lt;see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph> property.</source>
          <target state="translated">O nome totalmente qualificado do tipo solicitado, inclusive o namespace, mas não o assembly, como retornado pela propriedade <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>A Boolean value specifying whether to perform a case-sensitive search or not.</source>
          <target state="translated">Um valor booliano especificando se é necessário executar uma pesquisa que diferencie maiúsculas de minúsculas ou não.</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>A combination of zero or more bit flags that affect the search for the <bpt id="p1">&lt;c&gt;</bpt>typeName<ept id="p1">&lt;/c&gt;</ept> constructor.</source>
          <target state="translated">Uma combinação de zero ou mais sinalizadores de bit que afetam a pesquisa para o construtor <bpt id="p1">&lt;c&gt;</bpt>typeName<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>bindingAttr<ept id="p1">&lt;/c&gt;</ept> is zero, a case-sensitive search for public constructors is conducted.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>bindingAttr<ept id="p1">&lt;/c&gt;</ept> for zero, uma pesquisa que diferencia maiúsculas de minúsculas para construtores públicos será realizada.</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects through reflection.</source>
          <target state="translated">Um objeto que permite a associação, a coerção de tipos de argumento, a invocação de membros e a recuperação de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> por meio da reflexão.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is null, the default binder is used.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> for nulo, o associador padrão será usado.</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The arguments to pass to the constructor.</source>
          <target state="translated">Os argumentos a serem passados para o construtor.</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</source>
          <target state="translated">Esta matriz de argumentos deve corresponder em número, ordem e digitar os parâmetros do construtor a ser invocado.</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>If the default constructor is preferred, <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> must be an empty array or null.</source>
          <target state="translated">Se construtor padrão for preferido, <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> deverá ser uma matriz vazia ou nula.</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Culture-specific information that governs the coercion of <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> to the formal types declared for the <bpt id="p2">&lt;c&gt;</bpt>typeName<ept id="p2">&lt;/c&gt;</ept> constructor.</source>
          <target state="translated">Informações específicas de cultura que controlam a coerção de <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> para os tipos formais declarados para o construtor <bpt id="p2">&lt;c&gt;</bpt>typeName<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> for the current thread is used.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> for <ph id="ph1">&lt;see langword="null" /&gt;</ph>, a <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> do thread atual será usada.</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">Uma matriz de um ou mais atributos que podem participar da ativação.</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Typically, an array that contains a single <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /&gt;</ph> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">Normalmente, uma matriz que contém um único objeto <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /&gt;</ph> que especifica a URL necessária para ativar um objeto remoto.</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>This parameter is related to client-activated objects.</source>
          <target state="translated">Esse parâmetro está relacionado a objetos ativados pelo cliente.</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">A ativação do cliente é uma tecnologia herdada, mantida para compatibilidade com versões anteriores, mas não é recomendada para novos desenvolvimentos.</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">Em vez disso, os aplicativos distribuídos devem usar o Windows Communication Foundation.</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Creates a new instance of the specified type defined in the specified assembly file.</source>
          <target state="translated">Cria uma nova instância do tipo especificado definido no arquivo de assembly especificado.</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>An object that is a wrapper for the new instance, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> is not found.</source>
          <target state="translated">Um objeto que é um wrapper para a nova instância ou <ph id="ph1">&lt;see langword="null" /&gt;</ph> caso <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> não seja encontrado.</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">O valor de retorno precisa ser desencapsulado para acessar o objeto real.</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Para obter mais informações, consulte o método <ph id="ph1">&lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>When the <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;</ph> method is used to create an instance in a target application domain, other than the application domain from which the call is made, the assembly is loaded in the target application domain.</source>
          <target state="translated">Quando o método <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;</ph> é usado para criar uma instância em um domínio de aplicativo de destino, outro que não seja o domínio de aplicativo do qual a chamada é feita, o assembly é carregado no domínio de aplicativo de destino.</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>However, if the instance is unwrapped in the calling application domain, using the unwrapped instance in certain ways can cause the assembly to be loaded into the calling application domain.</source>
          <target state="translated">No entanto, caso a instância seja desencapsulada no domínio do aplicativo de chamada, o uso da instância desencapsulada de determinadas formas pode fazer o assembly ser carregado no domínio do aplicativo de chamada.</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>For example, after the instance is unwrapped, its type information might be requested, in order to call its methods late-bound.</source>
          <target state="translated">Por exemplo, depois da instância ser desencapsulada, as informações de tipo poderão ser solicitadas, para chamar a associação tardia dos métodos.</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>When the assembly is loaded into the calling application domain, exceptions can occur.</source>
          <target state="translated">Quando o assembly é carregado no domínio de aplicativo de chamada, podem ocorrer exceções.</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>If another version of the same assembly was previously loaded into the calling application domain, or if the load path of the calling application domain is different from that of the target application domain, exceptions such as <ph id="ph1">&lt;xref:System.MissingMethodException&gt;</ph> can occur.</source>
          <target state="translated">Caso outra versão do mesmo assembly tenha sido carregada anteriormente no domínio do aplicativo de chamada ou caso o caminho de carregamento do domínio de aplicativo de chamada seja diferente do domínio do aplicativo de destino, exceções como <ph id="ph1">&lt;xref:System.MissingMethodException&gt;</ph> podem ocorrer.</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>If the calling application domain makes early-bound calls to the instance type, <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> can be thrown when an attempt is made to cast the instance.</source>
          <target state="translated">Caso o domínio do aplicativo de chamada faça chamadas Early Bound para o tipo de instância, <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> pode ser lançado quando uma tentativa é feita para converter a instância.</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</source>
          <target state="translated">O chamador não pode fornecer atributos de ativação para um objeto que não seja herdado de <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> was not found in <ph id="ph2">&lt;paramref name="assemblyFile" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> não foi encontrado em <ph id="ph2">&lt;paramref name="assemblyFile" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>No matching public constructor was found.</source>
          <target state="translated">Nenhum construtor público correspondente foi encontrado.</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The caller does not have sufficient permission to call this constructor.</source>
          <target state="translated">O chamador não tem permissão suficiente para chamar esse construtor.</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> was compiled with a later version of the common language runtime than the version that is currently loaded.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> foi compilado com uma versão posterior do Common Language Runtime do que a versão carregada atualmente.</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>This instance is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Esta instância é <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>for the ability to read the file containing the assembly manifest.</source>
          <target state="translated">para a capacidade de ler o arquivo que contém o manifesto do assembly.</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>for the ability to access the location of the assembly if the assembly is not local.</source>
          <target state="translated">para a capacidade de acessar o local do conjunto caso o assembly não seja local.</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The name, including the path, of a file that contains an assembly that defines the requested type.</source>
          <target state="translated">O nome, inclusive o caminho, de um arquivo que contém um assembly que define o tipo solicitado.</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The assembly is loaded using the <ph id="ph1">&lt;see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /&gt;</ph> method.</source>
          <target state="translated">O assembly é carregado usando o método <ph id="ph1">&lt;see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph> property.</source>
          <target state="translated">O nome totalmente qualificado do tipo solicitado, inclusive o namespace, mas não o assembly, como retornado pela propriedade <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>A Boolean value specifying whether to perform a case-sensitive search or not.</source>
          <target state="translated">Um valor booliano especificando se é necessário executar uma pesquisa que diferencie maiúsculas de minúsculas ou não.</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>A combination of zero or more bit flags that affect the search for the <bpt id="p1">&lt;c&gt;</bpt>typeName<ept id="p1">&lt;/c&gt;</ept> constructor.</source>
          <target state="translated">Uma combinação de zero ou mais sinalizadores de bit que afetam a pesquisa para o construtor <bpt id="p1">&lt;c&gt;</bpt>typeName<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>bindingAttr<ept id="p1">&lt;/c&gt;</ept> is zero, a case-sensitive search for public constructors is conducted.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>bindingAttr<ept id="p1">&lt;/c&gt;</ept> for zero, uma pesquisa que diferencia maiúsculas de minúsculas para construtores públicos será realizada.</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects through reflection.</source>
          <target state="translated">Um objeto que permite a associação, a coerção de tipos de argumento, a invocação de membros e a recuperação de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> por meio da reflexão.</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is null, the default binder is used.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> for nulo, o associador padrão será usado.</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The arguments to pass to the constructor.</source>
          <target state="translated">Os argumentos a serem passados para o construtor.</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</source>
          <target state="translated">Esta matriz de argumentos deve corresponder em número, ordem e digitar os parâmetros do construtor a ser invocado.</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>If the default constructor is preferred, <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> must be an empty array or null.</source>
          <target state="translated">Se construtor padrão for preferido, <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> deverá ser uma matriz vazia ou nula.</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Culture-specific information that governs the coercion of <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> to the formal types declared for the <bpt id="p2">&lt;c&gt;</bpt>typeName<ept id="p2">&lt;/c&gt;</ept> constructor.</source>
          <target state="translated">Informações específicas de cultura que controlam a coerção de <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> para os tipos formais declarados para o construtor <bpt id="p2">&lt;c&gt;</bpt>typeName<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> for the current thread is used.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> for <ph id="ph1">&lt;see langword="null" /&gt;</ph>, a <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> do thread atual será usada.</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">Uma matriz de um ou mais atributos que podem participar da ativação.</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Typically, an array that contains a single <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /&gt;</ph> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">Normalmente, uma matriz que contém um único objeto <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /&gt;</ph> que especifica a URL necessária para ativar um objeto remoto.</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>This parameter is related to client-activated objects.</source>
          <target state="translated">Esse parâmetro está relacionado a objetos ativados pelo cliente.</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">A ativação do cliente é uma tecnologia herdada, mantida para compatibilidade com versões anteriores, mas não é recomendada para novos desenvolvimentos.</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">Em vez disso, os aplicativos distribuídos devem usar o Windows Communication Foundation.</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Information used to authorize creation of <bpt id="p1">&lt;c&gt;</bpt>typeName<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Informações usadas para autorizar a criação de <bpt id="p1">&lt;c&gt;</bpt>typeName<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Creates a new instance of the specified type defined in the specified assembly file.</source>
          <target state="translated">Cria uma nova instância do tipo especificado definido no arquivo de assembly especificado.</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>An object that is a wrapper for the new instance, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> is not found.</source>
          <target state="translated">Um objeto que é um wrapper para a nova instância ou <ph id="ph1">&lt;see langword="null" /&gt;</ph> caso <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> não seja encontrado.</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">O valor de retorno precisa ser desencapsulado para acessar o objeto real.</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>For more information about this method, see the <ph id="ph1">&lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Para obter mais informações sobre esse método, consulte o método <ph id="ph1">&lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>When the <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;</ph> method is used to create an instance in a target application domain, other than the application domain from which the call is made, the assembly is loaded in the target application domain.</source>
          <target state="translated">Quando o método <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;</ph> é usado para criar uma instância em um domínio de aplicativo de destino, outro que não seja o domínio de aplicativo do qual a chamada é feita, o assembly é carregado no domínio de aplicativo de destino.</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>However, if the instance is unwrapped in the calling application domain, using the unwrapped instance in certain ways can cause the assembly to be loaded into the calling application domain.</source>
          <target state="translated">No entanto, caso a instância seja desencapsulada no domínio do aplicativo de chamada, o uso da instância desencapsulada de determinadas formas pode fazer o assembly ser carregado no domínio do aplicativo de chamada.</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>For example, after the instance is unwrapped, its type information might be requested, in order to call its methods late-bound.</source>
          <target state="translated">Por exemplo, depois da instância ser desencapsulada, as informações de tipo poderão ser solicitadas, para chamar a associação tardia dos métodos.</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>When the assembly is loaded into the calling application domain, exceptions can occur.</source>
          <target state="translated">Quando o assembly é carregado no domínio de aplicativo de chamada, podem ocorrer exceções.</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>If another version of the same assembly was previously loaded into the calling application domain, or if the load path of the calling application domain is different from that of the target application domain, exceptions such as <ph id="ph1">&lt;xref:System.MissingMethodException&gt;</ph> can occur.</source>
          <target state="translated">Caso outra versão do mesmo assembly tenha sido carregada anteriormente no domínio do aplicativo de chamada ou caso o caminho de carregamento do domínio de aplicativo de chamada seja diferente do domínio do aplicativo de destino, exceções como <ph id="ph1">&lt;xref:System.MissingMethodException&gt;</ph> podem ocorrer.</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>If the calling application domain makes early-bound calls to the instance type, <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> can be thrown when an attempt is made to cast the instance.</source>
          <target state="translated">Caso o domínio do aplicativo de chamada faça chamadas Early Bound para o tipo de instância, <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> pode ser lançado quando uma tentativa é feita para converter a instância.</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</source>
          <target state="translated">O chamador não pode fornecer atributos de ativação para um objeto que não seja herdado de <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="securityAttributes" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="securityAttributes" /&gt;</ph> não é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>When legacy CAS policy is not enabled, <ph id="ph1">&lt;paramref name="securityAttributes" /&gt;</ph> should be <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Quando a política CAS herdada não está habilitada, <ph id="ph1">&lt;paramref name="securityAttributes" /&gt;</ph> deve ser <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> was not found in <ph id="ph2">&lt;paramref name="assemblyFile" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> não foi encontrado em <ph id="ph2">&lt;paramref name="assemblyFile" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>No matching public constructor was found.</source>
          <target state="translated">Nenhum construtor público correspondente foi encontrado.</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The caller does not have sufficient permission to call this constructor.</source>
          <target state="translated">O chamador não tem permissão suficiente para chamar esse construtor.</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> was compiled with a later version.</source>
          <target state="translated">A versão 2,0 ou posterior do Common Language Runtime está carregada e <ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> foi compilada com uma versão posterior.</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>This instance is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Esta instância é <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>for the ability to read the file containing the assembly manifest.</source>
          <target state="translated">para a capacidade de ler o arquivo que contém o manifesto do assembly.</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>for the ability to access the location of the assembly if the assembly is not local.</source>
          <target state="translated">para a capacidade de acessar o local do conjunto caso o assembly não seja local.</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>to provide evidence.</source>
          <target state="translated">para fornecer evidência.</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" uid="T:System.AppDomain">
          <source>Creates a new instance of a specified type defined in the specified assembly file.</source>
          <target state="translated">Cria uma nova instância de um tipo especificado definido no arquivo de assembly especificado.</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
          <source>The file name and path of the assembly that defines the requested type.</source>
          <target state="translated">O nome de arquivo e o caminho do assembly que define o tipo solicitado.</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph> property.</source>
          <target state="translated">O nome totalmente qualificado do tipo solicitado, inclusive o namespace, mas não o assembly, como retornado pela propriedade <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
          <source>Creates a new instance of the specified type defined in the specified assembly file.</source>
          <target state="translated">Cria uma nova instância do tipo especificado definido no arquivo de assembly especificado.</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
          <source>The requested object, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> is not found.</source>
          <target state="translated">O objeto solicitado ou <ph id="ph1">&lt;see langword="null" /&gt;</ph> caso <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> não seja encontrado.</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
          <source>This is a convenience method that combines <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Este é um método prático que combina <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
          <source>This method calls the default constructor for <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">Este método chama o construtor padrão para <ph id="ph1">`typeName`</ph>.</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Para obter mais informações, consulte o método <ph id="ph1">&lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> was not found in <ph id="ph2">&lt;paramref name="assemblyName" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> não foi encontrado em <ph id="ph2">&lt;paramref name="assemblyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
          <source>No parameterless public constructor was found.</source>
          <target state="translated">Não foi encontrado nenhum construtor público sem parâmetros.</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
          <source>The caller does not have sufficient permission to call this constructor.</source>
          <target state="translated">O chamador não tem permissão suficiente para chamar esse construtor.</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
          <source>Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was compiled with a later version.</source>
          <target state="translated">A versão 2,0 ou posterior do Common Language Runtime está carregada e <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> foi compilada com uma versão posterior.</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
          <source>for the ability to read the file containing the assembly manifest.</source>
          <target state="translated">para a capacidade de ler o arquivo que contém o manifesto do assembly.</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
          <source>for the ability to access the location of the assembly if the assembly is not local.</source>
          <target state="translated">para a capacidade de acessar o local do conjunto caso o assembly não seja local.</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
          <source>The file name and path of the assembly that defines the requested type.</source>
          <target state="translated">O nome de arquivo e o caminho do assembly que define o tipo solicitado.</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly (see the <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph> property).</source>
          <target state="translated">O nome totalmente qualificado do tipo solicitado, inclusive o namespace, mas não o assembly (consulte a propriedade <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">Uma matriz de um ou mais atributos que podem participar da ativação.</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
          <source>Typically, an array that contains a single <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /&gt;</ph> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">Normalmente, uma matriz que contém um único objeto <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /&gt;</ph> que especifica a URL necessária para ativar um objeto remoto.</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
          <source>This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">Esse parâmetro está relacionado a objetos ativados pelo cliente. A ativação pelo cliente é uma tecnologia herdada, mantida para compatibilidade com versões anteriores, mas não é recomendada para novos desenvolvimentos.</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">Em vez disso, os aplicativos distribuídos devem usar o Windows Communication Foundation.</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
          <source>Creates a new instance of the specified type defined in the specified assembly file.</source>
          <target state="translated">Cria uma nova instância do tipo especificado definido no arquivo de assembly especificado.</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
          <source>The requested object, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> is not found.</source>
          <target state="translated">O objeto solicitado ou <ph id="ph1">&lt;see langword="null" /&gt;</ph> caso <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> não seja encontrado.</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
          <source>This is a convenience method that combines <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Este é um método prático que combina <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
          <source>This method calls the default constructor for <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">Este método chama o construtor padrão para <ph id="ph1">`typeName`</ph>.</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
          <source>For more information about this method, see the <ph id="ph1">&lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Para obter mais informações sobre esse método, consulte o método <ph id="ph1">&lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</source>
          <target state="translated">O chamador não pode fornecer atributos de ativação para um objeto que não seja herdado de <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> was not found in <ph id="ph2">&lt;paramref name="assemblyName" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> não foi encontrado em <ph id="ph2">&lt;paramref name="assemblyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
          <source>No parameterless public constructor was found.</source>
          <target state="translated">Não foi encontrado nenhum construtor público sem parâmetros.</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
          <source>The caller does not have sufficient permission to call this constructor.</source>
          <target state="translated">O chamador não tem permissão suficiente para chamar esse construtor.</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
          <source>Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was compiled with a later version.</source>
          <target state="translated">A versão 2,0 ou posterior do Common Language Runtime está carregada e <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> foi compilada com uma versão posterior.</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
          <source>for the ability to read the file containing the assembly manifest.</source>
          <target state="translated">para a capacidade de ler o arquivo que contém o manifesto do assembly.</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
          <source>for the ability to access the location of the assembly if the assembly is not local.</source>
          <target state="translated">para a capacidade de acessar o local do conjunto caso o assembly não seja local.</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The file name and path of the assembly that defines the requested type.</source>
          <target state="translated">O nome de arquivo e o caminho do assembly que define o tipo solicitado.</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph> property.</source>
          <target state="translated">O nome totalmente qualificado do tipo solicitado, inclusive o namespace, mas não o assembly, como retornado pela propriedade <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>A Boolean value specifying whether to perform a case-sensitive search or not.</source>
          <target state="translated">Um valor booliano especificando se é necessário executar uma pesquisa que diferencie maiúsculas de minúsculas ou não.</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>A combination of zero or more bit flags that affect the search for the <bpt id="p1">&lt;c&gt;</bpt>typeName<ept id="p1">&lt;/c&gt;</ept> constructor.</source>
          <target state="translated">Uma combinação de zero ou mais sinalizadores de bit que afetam a pesquisa para o construtor <bpt id="p1">&lt;c&gt;</bpt>typeName<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>bindingAttr<ept id="p1">&lt;/c&gt;</ept> is zero, a case-sensitive search for public constructors is conducted.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>bindingAttr<ept id="p1">&lt;/c&gt;</ept> for zero, uma pesquisa que diferencia maiúsculas de minúsculas para construtores públicos será realizada.</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects through reflection.</source>
          <target state="translated">Um objeto que permite a associação, a coerção de tipos de argumento, a invocação de membros e a recuperação de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> por meio da reflexão.</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is null, the default binder is used.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> for nulo, o associador padrão será usado.</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The arguments to pass to the constructor.</source>
          <target state="translated">Os argumentos a serem passados para o construtor.</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</source>
          <target state="translated">Esta matriz de argumentos deve corresponder em número, ordem e digitar os parâmetros do construtor a ser invocado.</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>If the default constructor is preferred, <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> must be an empty array or null.</source>
          <target state="translated">Se construtor padrão for preferido, <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> deverá ser uma matriz vazia ou nula.</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Culture-specific information that governs the coercion of <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> to the formal types declared for the <bpt id="p2">&lt;c&gt;</bpt>typeName<ept id="p2">&lt;/c&gt;</ept> constructor.</source>
          <target state="translated">Informações específicas de cultura que controlam a coerção de <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> para os tipos formais declarados para o construtor <bpt id="p2">&lt;c&gt;</bpt>typeName<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> for the current thread is used.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> for <ph id="ph1">&lt;see langword="null" /&gt;</ph>, a <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> do thread atual será usada.</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">Uma matriz de um ou mais atributos que podem participar da ativação.</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Typically, an array that contains a single <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /&gt;</ph> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">Normalmente, uma matriz que contém um único objeto <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /&gt;</ph> que especifica a URL necessária para ativar um objeto remoto.</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>This parameter is related to client-activated objects.</source>
          <target state="translated">Esse parâmetro está relacionado a objetos ativados pelo cliente.</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">A ativação do cliente é uma tecnologia herdada, mantida para compatibilidade com versões anteriores, mas não é recomendada para novos desenvolvimentos.</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">Em vez disso, os aplicativos distribuídos devem usar o Windows Communication Foundation.</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Creates a new instance of the specified type defined in the specified assembly file, specifying whether the case of the type name is ignored; the binding attributes and the binder that are used to select the type to be created; the arguments of the constructor; the culture; and the activation attributes.</source>
          <target state="translated">Cria uma nova instância do tipo indicado definido no arquivo do assembly especificado, determinando se a diferenciação entre maiúsculas e minúsculas é ignorada no nome do tipo; os atributos de associação e o associador que são usados para selecionar o tipo a ser criado; os argumentos do construtor; a cultura; e os atributos de ativação.</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The requested object, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> is not found.</source>
          <target state="translated">O objeto solicitado ou <ph id="ph1">&lt;see langword="null" /&gt;</ph> caso <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> não seja encontrado.</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>This is a convenience method that combines <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Este é um método prático que combina <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>For more information about this method, see the <ph id="ph1">&lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Para obter mais informações sobre esse método, consulte o método <ph id="ph1">&lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</source>
          <target state="translated">O chamador não pode fornecer atributos de ativação para um objeto que não seja herdado de <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> was not found in <ph id="ph2">&lt;paramref name="assemblyName" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> não foi encontrado em <ph id="ph2">&lt;paramref name="assemblyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>No matching public constructor was found.</source>
          <target state="translated">Nenhum construtor público correspondente foi encontrado.</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>The caller does not have sufficient permission to call this constructor.</source>
          <target state="translated">O chamador não tem permissão suficiente para chamar esse construtor.</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was compiled with a later version of the common language runtime that the version that is currently loaded.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> foi compilado com uma versão posterior do Common Language Runtime que a versão carregada atualmente.</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>for the ability to read the file containing the assembly manifest.</source>
          <target state="translated">para a capacidade de ler o arquivo que contém o manifesto do assembly.</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
          <source>for the ability to access the location of the assembly if the assembly is not local.</source>
          <target state="translated">para a capacidade de acessar o local do conjunto caso o assembly não seja local.</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The file name and path of the assembly that defines the requested type.</source>
          <target state="translated">O nome de arquivo e o caminho do assembly que define o tipo solicitado.</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph> property.</source>
          <target state="translated">O nome totalmente qualificado do tipo solicitado, inclusive o namespace, mas não o assembly, como retornado pela propriedade <ph id="ph1">&lt;see cref="P:System.Type.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>A Boolean value specifying whether to perform a case-sensitive search or not.</source>
          <target state="translated">Um valor booliano especificando se é necessário executar uma pesquisa que diferencie maiúsculas de minúsculas ou não.</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>A combination of zero or more bit flags that affect the search for the <bpt id="p1">&lt;c&gt;</bpt>typeName<ept id="p1">&lt;/c&gt;</ept> constructor.</source>
          <target state="translated">Uma combinação de zero ou mais sinalizadores de bit que afetam a pesquisa para o construtor <bpt id="p1">&lt;c&gt;</bpt>typeName<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>bindingAttr<ept id="p1">&lt;/c&gt;</ept> is zero, a case-sensitive search for public constructors is conducted.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>bindingAttr<ept id="p1">&lt;/c&gt;</ept> for zero, uma pesquisa que diferencia maiúsculas de minúsculas para construtores públicos será realizada.</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects through reflection.</source>
          <target state="translated">Um objeto que permite a associação, a coerção de tipos de argumento, a invocação de membros e a recuperação de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> por meio da reflexão.</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is null, the default binder is used.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> for nulo, o associador padrão será usado.</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The arguments to pass to the constructor.</source>
          <target state="translated">Os argumentos a serem passados para o construtor.</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</source>
          <target state="translated">Esta matriz de argumentos deve corresponder em número, ordem e digitar os parâmetros do construtor a ser invocado.</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>If the default constructor is preferred, <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> must be an empty array or null.</source>
          <target state="translated">Se construtor padrão for preferido, <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> deverá ser uma matriz vazia ou nula.</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Culture-specific information that governs the coercion of <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> to the formal types declared for the <bpt id="p2">&lt;c&gt;</bpt>typeName<ept id="p2">&lt;/c&gt;</ept> constructor.</source>
          <target state="translated">Informações específicas de cultura que controlam a coerção de <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> para os tipos formais declarados para o construtor <bpt id="p2">&lt;c&gt;</bpt>typeName<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> for the current thread is used.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> for <ph id="ph1">&lt;see langword="null" /&gt;</ph>, a <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> do thread atual será usada.</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">Uma matriz de um ou mais atributos que podem participar da ativação.</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Typically, an array that contains a single <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /&gt;</ph> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">Normalmente, uma matriz que contém um único objeto <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /&gt;</ph> que especifica a URL necessária para ativar um objeto remoto.</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>This parameter is related to client-activated objects.</source>
          <target state="translated">Esse parâmetro está relacionado a objetos ativados pelo cliente.</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">A ativação do cliente é uma tecnologia herdada, mantida para compatibilidade com versões anteriores, mas não é recomendada para novos desenvolvimentos.</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">Em vez disso, os aplicativos distribuídos devem usar o Windows Communication Foundation.</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Information used to authorize creation of <bpt id="p1">&lt;c&gt;</bpt>typeName<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Informações usadas para autorizar a criação de <bpt id="p1">&lt;c&gt;</bpt>typeName<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Creates a new instance of the specified type defined in the specified assembly file.</source>
          <target state="translated">Cria uma nova instância do tipo especificado definido no arquivo de assembly especificado.</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The requested object, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> is not found.</source>
          <target state="translated">O objeto solicitado ou <ph id="ph1">&lt;see langword="null" /&gt;</ph> caso <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> não seja encontrado.</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>This is a convenience method that combines <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Este é um método prático que combina <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>For more information about this method, see the <ph id="ph1">&lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Para obter mais informações sobre esse método, consulte o método <ph id="ph1">&lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</source>
          <target state="translated">O chamador não pode fornecer atributos de ativação para um objeto que não seja herdado de <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> was not found in <ph id="ph2">&lt;paramref name="assemblyName" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> não foi encontrado em <ph id="ph2">&lt;paramref name="assemblyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>No matching public constructor was found.</source>
          <target state="translated">Nenhum construtor público correspondente foi encontrado.</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>The caller does not have sufficient permission to call this constructor.</source>
          <target state="translated">O chamador não tem permissão suficiente para chamar esse construtor.</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was compiled with a later version.</source>
          <target state="translated">A versão 2,0 ou posterior do Common Language Runtime está carregada e <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> foi compilada com uma versão posterior.</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>for the ability to read the file containing the assembly manifest.</source>
          <target state="translated">para a capacidade de ler o arquivo que contém o manifesto do assembly.</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
          <source>for the ability to access the location of the assembly if the assembly is not local.</source>
          <target state="translated">para a capacidade de acessar o local do conjunto caso o assembly não seja local.</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" uid="P:System.AppDomain.CurrentDomain">
          <source>Gets the current application domain for the current <ph id="ph1">&lt;see cref="T:System.Threading.Thread" /&gt;</ph>.</source>
          <target state="translated">Obtém o domínio de aplicativo atual do <ph id="ph1">&lt;see cref="T:System.Threading.Thread" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.CurrentDomain">
          <source>The current application domain.</source>
          <target state="translated">O domínio do aplicativo atual.</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.CurrentDomain">
          <source>The following code example creates a new application domain.</source>
          <target state="translated">O exemplo de código a seguir cria um novo domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.CurrentDomain">
          <source>The <ph id="ph1">&lt;xref:System.AppDomain.CurrentDomain%2A&gt;</ph> property is used to obtain an <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> object that represents the current application domain.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.AppDomain.CurrentDomain%2A&gt;</ph> propriedade é usada para obter um <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> objeto que representa o domínio de aplicativo atual.</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.CurrentDomain">
          <source>The <ph id="ph1">&lt;xref:System.AppDomain.FriendlyName%2A&gt;</ph> property provides the name of the current application domain, which is then displayed at the command line.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.AppDomain.FriendlyName%2A&gt;</ph> propriedade fornece o nome de domínio de aplicativo atual é exibido na linha de comando.</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" uid="T:System.AppDomain">
          <source>Defines a dynamic assembly in the current application domain.</source>
          <target state="translated">Define um assembly dinâmico no domínio do aplicativo atual.</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">A identidade exclusiva do assembly dinâmico.</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
          <source>The access mode for the dynamic assembly.</source>
          <target state="translated">O modo de acesso para o assembly dinâmico.</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
          <source>Defines a dynamic assembly with the specified name and access mode.</source>
          <target state="translated">Define um assembly dinâmico com o nome e o modo de acesso especificados.</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
          <source>A dynamic assembly with the specified name and access mode.</source>
          <target state="translated">Um assembly dinâmico com o nome e o modo de acesso especificados.</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
          <source>This method should only be used to define a dynamic assembly in the current application domain.</source>
          <target state="translated">Este método só deve ser usado para definir um assembly dinâmico no domínio de aplicativo atual.</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph> method overload.</source>
          <target state="translated">Para obter mais informações, consulte a sobrecarga de método <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
          <source>During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType&gt;</ph> in <ph id="ph3">`refusedPermissions`</ph>.</source>
          <target state="translated">Durante o desenvolvimento de código que emite assemblies dinâmicos, é recomendável usar uma sobrecarga do método <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> que especifica evidência e permissões, fornecer a evidência que você deseja que o assembly dinâmico tenha e incluir <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType&gt;</ph> em <ph id="ph3">`refusedPermissions`</ph>.</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
          <source>Including <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification&gt;</ph> in the <ph id="ph2">`refusedPermissions`</ph> parameter ensures that the MSIL is verified.</source>
          <target state="translated">A inclusão de <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification&gt;</ph> no parâmetro de <ph id="ph2">`refusedPermissions`</ph> garante que o MSIL seja verificado.</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
          <source>A limitation of this technique is that it also causes <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> to be thrown when used with code that demands full trust.</source>
          <target state="translated">Uma limitação dessa técnica é que ela também faz <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> ser lançado quando usado com código que demanda confiança total.</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
          <source>The following sample demonstrates the <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> method and <ph id="ph2">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph> event.</source>
          <target state="translated">O exemplo a seguir demonstra o método <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> e o evento <ph id="ph2">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
          <source>For this code example to run, you must provide the fully qualified assembly name.</source>
          <target state="translated">Para este exemplo de código ser executado, você deve fornecer o nome de assembly totalmente qualificado.</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
          <source>For information about how to obtain the fully qualified assembly name, see <bpt id="p1">[</bpt>Assembly Names<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</source>
          <target state="translated">Para obter informações sobre como obter o nome totalmente qualificado do assembly, consulte <bpt id="p1">[</bpt>nomes de Assembly<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
          <source>The <ph id="ph1">&lt;see langword="Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="name" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="Name" /&gt;</ph> de <ph id="ph2">&lt;paramref name="name" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
          <source>The <ph id="ph1">&lt;see langword="Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="name" /&gt;</ph> begins with white space, or contains a forward or backward slash.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="Name" /&gt;</ph> de <ph id="ph2">&lt;paramref name="name" /&gt;</ph> começa com espaço em branco ou contém uma barra ou uma barra invertida.</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">A identidade exclusiva do assembly dinâmico.</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The access mode for the dynamic assembly.</source>
          <target state="translated">O modo de acesso para o assembly dinâmico.</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>An enumerable list of attributes to be applied to the assembly, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if there are no attributes.</source>
          <target state="translated">Uma lista de atributos enumeráveis a serem aplicados ao assembly ou <ph id="ph1">&lt;see langword="null" /&gt;</ph> caso não haja nenhum atributo.</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>Defines a dynamic assembly with the specified name, access mode, and custom attributes.</source>
          <target state="translated">Define um assembly dinâmico com o nome, o modo de acesso e os atributos personalizados especificados.</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">Um assembly dinâmico com o nome e os recursos especificados.</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>Use this method overload to specify attributes that do not work correctly unless they are applied when a dynamic assembly is created.</source>
          <target state="translated">Use esta sobrecarga de método para especificar atributos que não funcionam corretamente, senão aplicados quando um assembly dinâmico é criado.</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>For example, security attributes such as <ph id="ph1">&lt;xref:System.Security.SecurityTransparentAttribute&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.SecurityCriticalAttribute&gt;</ph> do not work correctly if they are added after a dynamic assembly has been created.</source>
          <target state="translated">Por exemplo, os atributos de segurança como <ph id="ph1">&lt;xref:System.Security.SecurityTransparentAttribute&gt;</ph> e <ph id="ph2">&lt;xref:System.Security.SecurityCriticalAttribute&gt;</ph> não funcionam corretamente caso sejam adicionados após um assembly dinâmico ser criado.</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>This method should be used only to define a dynamic assembly in the current application domain.</source>
          <target state="translated">Esse método deve ser usado apenas para definir um assembly dinâmico no domínio do aplicativo atual.</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>For more information about this restriction, see the <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph> method overload.</source>
          <target state="translated">Para obter mais informações sobre essa restrição, consulte o <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph> sobrecarga do método.</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>This method overload is introduced in the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph>.</source>
          <target state="translated">Essa sobrecarga de método foi introduzida no <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The following code sample shows how to create a dynamic assembly that has the <ph id="ph1">&lt;xref:System.Security.SecurityTransparentAttribute&gt;</ph>.</source>
          <target state="translated">O exemplo de código a seguir mostra como criar um assembly dinâmico que tem o <ph id="ph1">&lt;xref:System.Security.SecurityTransparentAttribute&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The attribute must be specified as an element of an array of <ph id="ph1">&lt;xref:System.Reflection.Emit.CustomAttributeBuilder&gt;</ph> objects.</source>
          <target state="translated">O atributo deve ser especificado como um elemento de uma matriz de <ph id="ph1">&lt;xref:System.Reflection.Emit.CustomAttributeBuilder&gt;</ph> objetos.</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The first step in creating the <ph id="ph1">&lt;xref:System.Reflection.Emit.CustomAttributeBuilder&gt;</ph> is to obtain a constructor for the attribute.</source>
          <target state="translated">A primeira etapa na criação de <ph id="ph1">&lt;xref:System.Reflection.Emit.CustomAttributeBuilder&gt;</ph> é obter um construtor para o atributo.</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The constructor has no parameters, so the <ph id="ph1">&lt;xref:System.Type.GetConstructor%2A&gt;</ph> method is called with an empty array of <ph id="ph2">&lt;xref:System.Type&gt;</ph> objects to represent the types of the parameters.</source>
          <target state="translated">O construtor não tem parâmetros, portanto, o <ph id="ph1">&lt;xref:System.Type.GetConstructor%2A&gt;</ph> método for chamado com uma matriz vazia de <ph id="ph2">&lt;xref:System.Type&gt;</ph> objetos para representar os tipos dos parâmetros.</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The second step is to pass the resulting <ph id="ph1">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph> object to the constructor for the <ph id="ph2">&lt;xref:System.Reflection.Emit.CustomAttributeBuilder&gt;</ph> class, together with an empty array of type <ph id="ph3">&lt;xref:System.Object&gt;</ph> to represent the arguments.</source>
          <target state="translated">A segunda etapa é passar resultante <ph id="ph1">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph> objeto para o construtor para o <ph id="ph2">&lt;xref:System.Reflection.Emit.CustomAttributeBuilder&gt;</ph> classe, junto com uma matriz vazia do tipo <ph id="ph3">&lt;xref:System.Object&gt;</ph> para representar os argumentos.</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The resulting <ph id="ph1">&lt;xref:System.Reflection.Emit.CustomAttributeBuilder&gt;</ph> is then passed to the <ph id="ph2">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> method as the only element of an array.</source>
          <target state="translated">Resultante <ph id="ph1">&lt;xref:System.Reflection.Emit.CustomAttributeBuilder&gt;</ph> é então passado para o <ph id="ph2">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> método como o único elemento de uma matriz.</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The example code defines a module and a type in the new dynamic assembly, and then displays the assembly's attributes.</source>
          <target state="translated">O exemplo de código define um módulo e um tipo no novo assembly dinâmico e, em seguida, exibe os atributos do assembly.</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The <ph id="ph1">&lt;see langword="Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="name" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="Name" /&gt;</ph> de <ph id="ph2">&lt;paramref name="name" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The <ph id="ph1">&lt;see langword="Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="name" /&gt;</ph> starts with white space, or contains a forward or backward slash.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="Name" /&gt;</ph> de <ph id="ph2">&lt;paramref name="name" /&gt;</ph> começa com espaço em branco ou contém uma barra ou uma barra invertida.</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">A identidade exclusiva do assembly dinâmico.</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">O modo no qual o assembly dinâmico será acessado.</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source>The evidence supplied for the dynamic assembly.</source>
          <target state="translated">A evidência fornecida para o assembly dinâmico.</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source>The evidence is used unaltered as the final set of evidence used for policy resolution.</source>
          <target state="translated">A evidência é usada inalterada como o conjunto final de evidências usado na resolução da política.</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source>Defines a dynamic assembly using the specified name, access mode, and evidence.</source>
          <target state="translated">Define um assembly dinâmico usando o nome, o modo de acesso e a evidência especificados.</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">Um assembly dinâmico com o nome e os recursos especificados.</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source>Only fully trusted callers can supply their <ph id="ph1">`evidence`</ph> when defining a dynamic <ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph>.</source>
          <target state="translated">Apenas chamadores totalmente confiáveis podem fornecer <ph id="ph1">`evidence`</ph> ao definir um <ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph> dinâmico.</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source>The runtime will map the <ph id="ph1">&lt;xref:System.Security.Policy.Evidence&gt;</ph> through the security policy to determine the granted permissions.</source>
          <target state="translated">O tempo de execução mapeará <ph id="ph1">&lt;xref:System.Security.Policy.Evidence&gt;</ph> pela política de segurança para determinar as permissões concedidas.</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source>Partially trusted callers must supply a null <ph id="ph1">`evidence`</ph>.</source>
          <target state="translated">Os chamadores parcialmente confiáveis devem fornecer um <ph id="ph1">`evidence`</ph>nulo.</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source>If <ph id="ph1">`evidence`</ph> is <ph id="ph2">`null`</ph>, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's <ph id="ph3">&lt;xref:System.Reflection.Assembly&gt;</ph> to the dynamic <ph id="ph4">&lt;xref:System.Reflection.Assembly&gt;</ph> being defined and marks policy as resolved.</source>
          <target state="translated">Caso <ph id="ph1">`evidence`</ph> seja <ph id="ph2">`null`</ph>, o tempo de execução copia os conjuntos de permissões, ou seja, os conjuntos de concessões e negações, do <ph id="ph3">&lt;xref:System.Reflection.Assembly&gt;</ph> do chamador para o <ph id="ph4">&lt;xref:System.Reflection.Assembly&gt;</ph> dinâmico definido e marca a política como resolvida.</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source>If the dynamic <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph> is saved to disk, subsequent loads will get grants based on policies associated with the location where the <ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph> was saved.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph> dinâmico for salvo em disco, os carregamentos subsequentes obterão concessões com base em políticas associadas ao local no qual o <ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph> foi salvo.</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source>This method should only be used to define a dynamic assembly in the current application domain.</source>
          <target state="translated">Este método só deve ser usado para definir um assembly dinâmico no domínio de aplicativo atual.</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph> method overload.</source>
          <target state="translated">Para obter mais informações, consulte a sobrecarga de método <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source>During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType&gt;</ph> in <ph id="ph3">`refusedPermissions`</ph>.</source>
          <target state="translated">Durante o desenvolvimento de código que emite assemblies dinâmicos, é recomendável usar uma sobrecarga do método <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> que especifica evidência e permissões, fornecer a evidência que você deseja que o assembly dinâmico tenha e incluir <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType&gt;</ph> em <ph id="ph3">`refusedPermissions`</ph>.</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source>Including <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification&gt;</ph> in the <ph id="ph2">`refusedPermissions`</ph> parameter ensures that the MSIL is verified.</source>
          <target state="translated">A inclusão de <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification&gt;</ph> no parâmetro de <ph id="ph2">`refusedPermissions`</ph> garante que o MSIL seja verificado.</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source>A limitation of this technique is that it also causes <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> to be thrown when used with code that demands full trust.</source>
          <target state="translated">Uma limitação dessa técnica é que ela também faz <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> ser lançado quando usado com código que demanda confiança total.</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source>The following sample demonstrates the <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph> event.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> método e o <ph id="ph2">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph> evento.</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source>First, the code example tries to create an instance of <ph id="ph1">`MyDynamicType`</ph> by calling the <ph id="ph2">&lt;xref:System.AppDomain.CreateInstance%2A&gt;</ph> method with an invalid assembly name, and catches the resulting exception.</source>
          <target state="translated">Primeiro, o exemplo de código tenta criar uma instância de <ph id="ph1">`MyDynamicType`</ph> chamando o <ph id="ph2">&lt;xref:System.AppDomain.CreateInstance%2A&gt;</ph> método com um nome de assembly inválido e captura a exceção resultante.</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source>The code example then adds an event handler for the <ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph> event, and again tries to create an instance of<ph id="ph2">`MyDynamicType`</ph>.</source>
          <target state="translated">O exemplo de código, em seguida, adiciona um manipulador de eventos para o <ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph> eventos e novamente tenta criar uma instância de<ph id="ph2">`MyDynamicType`</ph>.</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source>During the call to <ph id="ph1">&lt;xref:System.AppDomain.CreateInstance%2A&gt;</ph>, the <ph id="ph2">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph> event is raised for the invalid assembly.</source>
          <target state="translated">Durante a chamada para <ph id="ph1">&lt;xref:System.AppDomain.CreateInstance%2A&gt;</ph>, o <ph id="ph2">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph> é gerado para o assembly inválido.</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source>The event handler creates a dynamic assembly that contains a type named <ph id="ph1">`MyDynamicType`</ph>, gives the type a parameterless constructor, and returns the new dynamic assembly.</source>
          <target state="translated">O manipulador de eventos cria um assembly dinâmico que contém um tipo denominado <ph id="ph1">`MyDynamicType`</ph>, fornece o tipo de um construtor sem parâmetros e retorna o novo assembly dinâmico.</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source>The call to <ph id="ph1">&lt;xref:System.AppDomain.CreateInstance%2A&gt;</ph> then finishes successfully, and the constructor for <ph id="ph2">`MyDynamicType`</ph> displays a message at the console.</source>
          <target state="translated">A chamada para <ph id="ph1">&lt;xref:System.AppDomain.CreateInstance%2A&gt;</ph> for concluída com êxito e o construtor para <ph id="ph2">`MyDynamicType`</ph> exibe uma mensagem no console do.</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source>The <ph id="ph1">&lt;see langword="Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="name" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="Name" /&gt;</ph> de <ph id="ph2">&lt;paramref name="name" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source>The <ph id="ph1">&lt;see langword="Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="name" /&gt;</ph> begins with white space, or contains a forward or backward slash.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="Name" /&gt;</ph> de <ph id="ph2">&lt;paramref name="name" /&gt;</ph> começa com espaço em branco ou contém uma barra ou uma barra invertida.</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source>to load an assembly with evidence.</source>
          <target state="translated">para carregar um assembly com evidências.</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">A identidade exclusiva do assembly dinâmico.</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">O modo no qual o assembly dinâmico será acessado.</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)">
          <source>The name of the directory where the assembly will be saved.</source>
          <target state="translated">O nome do diretório onde o assembly será salvo.</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>dir<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the directory defaults to the current directory.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>dir<ept id="p1">&lt;/c&gt;</ept> for <ph id="ph1">&lt;see langword="null" /&gt;</ph>, o diretório usará como padrão o diretório atual.</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)">
          <source>Defines a dynamic assembly using the specified name, access mode, and storage directory.</source>
          <target state="translated">Define um assembly dinâmico usando o nome, o modo de acesso e o diretório de armazenamento especificados.</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">Um assembly dinâmico com o nome e os recursos especificados.</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)">
          <source>This method should only be used to define a dynamic assembly in the current application domain.</source>
          <target state="translated">Este método só deve ser usado para definir um assembly dinâmico no domínio de aplicativo atual.</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph> method overload.</source>
          <target state="translated">Para obter mais informações, consulte a sobrecarga de método <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)">
          <source>During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType&gt;</ph> in <ph id="ph3">`refusedPermissions`</ph>.</source>
          <target state="translated">Durante o desenvolvimento de código que emite assemblies dinâmicos, é recomendável usar uma sobrecarga do método <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> que especifica evidência e permissões, fornecer a evidência que você deseja que o assembly dinâmico tenha e incluir <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType&gt;</ph> em <ph id="ph3">`refusedPermissions`</ph>.</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)">
          <source>Including <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification&gt;</ph> in the <ph id="ph2">`refusedPermissions`</ph> parameter ensures that the MSIL is verified.</source>
          <target state="translated">A inclusão de <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification&gt;</ph> no parâmetro de <ph id="ph2">`refusedPermissions`</ph> garante que o MSIL seja verificado.</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)">
          <source>A limitation of this technique is that it also causes <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> to be thrown when used with code that demands full trust.</source>
          <target state="translated">Uma limitação dessa técnica é que ela também faz <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> ser lançado quando usado com código que demanda confiança total.</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)">
          <source>The following sample demonstrates the <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> method and <ph id="ph2">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph> event.</source>
          <target state="translated">O exemplo a seguir demonstra o método <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> e o evento <ph id="ph2">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)">
          <source>For this code example to run, you must provide the fully qualified assembly name.</source>
          <target state="translated">Para este exemplo de código ser executado, você deve fornecer o nome de assembly totalmente qualificado.</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)">
          <source>For information about how to obtain the fully qualified assembly name, see <bpt id="p1">[</bpt>Assembly Names<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</source>
          <target state="translated">Para obter informações sobre como obter o nome totalmente qualificado do assembly, consulte <bpt id="p1">[</bpt>nomes de Assembly<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)">
          <source>The <ph id="ph1">&lt;see langword="Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="name" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="Name" /&gt;</ph> de <ph id="ph2">&lt;paramref name="name" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)">
          <source>The <ph id="ph1">&lt;see langword="Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="name" /&gt;</ph> begins with white space, or contains a forward or backward slash.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="Name" /&gt;</ph> de <ph id="ph2">&lt;paramref name="name" /&gt;</ph> começa com espaço em branco ou contém uma barra ou uma barra invertida.</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder},System.Security.SecurityContextSource)">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">A identidade exclusiva do assembly dinâmico.</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder},System.Security.SecurityContextSource)">
          <source>The access mode for the dynamic assembly.</source>
          <target state="translated">O modo de acesso para o assembly dinâmico.</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder},System.Security.SecurityContextSource)">
          <source>An enumerable list of attributes to be applied to the assembly, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if there are no attributes.</source>
          <target state="translated">Uma lista de atributos enumeráveis a serem aplicados ao assembly ou <ph id="ph1">&lt;see langword="null" /&gt;</ph> caso não haja nenhum atributo.</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder},System.Security.SecurityContextSource)">
          <source>The source of the security context.</source>
          <target state="translated">A origem do contexto de segurança.</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder},System.Security.SecurityContextSource)">
          <source>Defines a dynamic assembly with the specified name, access mode, and custom attributes, and using the specified source for its security context.</source>
          <target state="translated">Define um assembly dinâmico com o nome, o modo de acesso e os atributos personalizados especificados e usando a origem especificada para o seu contexto de segurança.</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder},System.Security.SecurityContextSource)">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">Um assembly dinâmico com o nome e os recursos especificados.</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder},System.Security.SecurityContextSource)">
          <source>Use this method overload to specify attributes that do not work correctly unless they are applied when a dynamic assembly is created.</source>
          <target state="translated">Use esta sobrecarga de método para especificar atributos que não funcionam corretamente, senão aplicados quando um assembly dinâmico é criado.</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder},System.Security.SecurityContextSource)">
          <source>For example, security attributes such as <ph id="ph1">&lt;xref:System.Security.SecurityTransparentAttribute&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.SecurityCriticalAttribute&gt;</ph> do not work correctly if they are added after a dynamic assembly has been created.</source>
          <target state="translated">Por exemplo, os atributos de segurança como <ph id="ph1">&lt;xref:System.Security.SecurityTransparentAttribute&gt;</ph> e <ph id="ph2">&lt;xref:System.Security.SecurityCriticalAttribute&gt;</ph> não funcionam corretamente caso sejam adicionados após um assembly dinâmico ser criado.</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder},System.Security.SecurityContextSource)">
          <source>This method should be used only to define a dynamic assembly in the current application domain.</source>
          <target state="translated">Esse método deve ser usado apenas para definir um assembly dinâmico no domínio do aplicativo atual.</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder},System.Security.SecurityContextSource)">
          <source>For more information about this restriction, see the <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph> method overload.</source>
          <target state="translated">Para obter mais informações sobre essa restrição, consulte o <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph> sobrecarga do método.</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder},System.Security.SecurityContextSource)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder},System.Security.SecurityContextSource)">
          <source>The <ph id="ph1">&lt;see langword="Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="name" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="Name" /&gt;</ph> de <ph id="ph2">&lt;paramref name="name" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder},System.Security.SecurityContextSource)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder},System.Security.SecurityContextSource)">
          <source>The <ph id="ph1">&lt;see langword="Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="name" /&gt;</ph> starts with white space, or contains a forward or backward slash.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="Name" /&gt;</ph> de <ph id="ph2">&lt;paramref name="name" /&gt;</ph> começa com espaço em branco ou contém uma barra ou uma barra invertida.</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder},System.Security.SecurityContextSource)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder},System.Security.SecurityContextSource)">
          <source>The value of <ph id="ph1">&lt;paramref name="securityContextSource" /&gt;</ph> was not one of the enumeration values.</source>
          <target state="translated">O valor de <ph id="ph1">&lt;paramref name="securityContextSource" /&gt;</ph> não era um dos valores de enumeração.</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">A identidade exclusiva do assembly dinâmico.</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">O modo no qual o assembly dinâmico será acessado.</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
          <source>The name of the directory where the assembly will be saved.</source>
          <target state="translated">O nome do diretório onde o assembly será salvo.</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>dir<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the directory defaults to the current directory.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>dir<ept id="p1">&lt;/c&gt;</ept> for <ph id="ph1">&lt;see langword="null" /&gt;</ph>, o diretório usará como padrão o diretório atual.</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
          <source>The evidence supplied for the dynamic assembly.</source>
          <target state="translated">A evidência fornecida para o assembly dinâmico.</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
          <source>The evidence is used unaltered as the final set of evidence used for policy resolution.</source>
          <target state="translated">A evidência é usada inalterada como o conjunto final de evidências usado na resolução da política.</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
          <source>Defines a dynamic assembly using the specified name, access mode, storage directory, and evidence.</source>
          <target state="translated">Define um assembly dinâmico usando o nome, o modo de acesso, o diretório de armazenamento e a evidência especificados.</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">Um assembly dinâmico com o nome e os recursos especificados.</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
          <source>Only fully trusted callers can supply their <ph id="ph1">`evidence`</ph> when defining a dynamic <ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph>.</source>
          <target state="translated">Apenas chamadores totalmente confiáveis podem fornecer <ph id="ph1">`evidence`</ph> ao definir um <ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph> dinâmico.</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
          <source>The runtime will map the <ph id="ph1">&lt;xref:System.Security.Policy.Evidence&gt;</ph> through the security policy to determine the granted permissions.</source>
          <target state="translated">O tempo de execução mapeará <ph id="ph1">&lt;xref:System.Security.Policy.Evidence&gt;</ph> pela política de segurança para determinar as permissões concedidas.</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
          <source>Partially trusted callers must supply a null <ph id="ph1">`evidence`</ph>.</source>
          <target state="translated">Os chamadores parcialmente confiáveis devem fornecer um <ph id="ph1">`evidence`</ph>nulo.</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
          <source>If <ph id="ph1">`evidence`</ph> is <ph id="ph2">`null`</ph>, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's <ph id="ph3">&lt;xref:System.Reflection.Assembly&gt;</ph> to the dynamic <ph id="ph4">&lt;xref:System.Reflection.Assembly&gt;</ph> being defined and marks policy as resolved.</source>
          <target state="translated">Caso <ph id="ph1">`evidence`</ph> seja <ph id="ph2">`null`</ph>, o tempo de execução copia os conjuntos de permissões, ou seja, os conjuntos de concessões e negações, do <ph id="ph3">&lt;xref:System.Reflection.Assembly&gt;</ph> do chamador para o <ph id="ph4">&lt;xref:System.Reflection.Assembly&gt;</ph> dinâmico definido e marca a política como resolvida.</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
          <source>If the dynamic <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph> is saved to disk, subsequent loads will get grants based on policies associated with the location where the <ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph> was saved.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph> dinâmico for salvo em disco, os carregamentos subsequentes obterão concessões com base em políticas associadas ao local no qual o <ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph> foi salvo.</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
          <source>This method should only be used to define a dynamic assembly in the current application domain.</source>
          <target state="translated">Este método só deve ser usado para definir um assembly dinâmico no domínio de aplicativo atual.</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph> method overload.</source>
          <target state="translated">Para obter mais informações, consulte a sobrecarga de método <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
          <source>During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType&gt;</ph> in <ph id="ph3">`refusedPermissions`</ph>.</source>
          <target state="translated">Durante o desenvolvimento de código que emite assemblies dinâmicos, é recomendável usar uma sobrecarga do método <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> que especifica evidência e permissões, fornecer a evidência que você deseja que o assembly dinâmico tenha e incluir <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType&gt;</ph> em <ph id="ph3">`refusedPermissions`</ph>.</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
          <source>Including <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification&gt;</ph> in the <ph id="ph2">`refusedPermissions`</ph> parameter ensures that the MSIL is verified.</source>
          <target state="translated">A inclusão de <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification&gt;</ph> no parâmetro de <ph id="ph2">`refusedPermissions`</ph> garante que o MSIL seja verificado.</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
          <source>A limitation of this technique is that it also causes <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> to be thrown when used with code that demands full trust.</source>
          <target state="translated">Uma limitação dessa técnica é que ela também faz <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> ser lançado quando usado com código que demanda confiança total.</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
          <source>The following sample demonstrates the <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> method and <ph id="ph2">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph> event.</source>
          <target state="translated">O exemplo a seguir demonstra o método <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> e o evento <ph id="ph2">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
          <source>For this code example to run, you must provide the fully qualified assembly name.</source>
          <target state="translated">Para este exemplo de código ser executado, você deve fornecer o nome de assembly totalmente qualificado.</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
          <source>For information about how to obtain the fully qualified assembly name, see <bpt id="p1">[</bpt>Assembly Names<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</source>
          <target state="translated">Para obter informações sobre como obter o nome totalmente qualificado do assembly, consulte <bpt id="p1">[</bpt>nomes de Assembly<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
          <source>The <ph id="ph1">&lt;see langword="Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="name" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="Name" /&gt;</ph> de <ph id="ph2">&lt;paramref name="name" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
          <source>The <ph id="ph1">&lt;see langword="Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="name" /&gt;</ph> begins with white space, or contains a forward or backward slash.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="Name" /&gt;</ph> de <ph id="ph2">&lt;paramref name="name" /&gt;</ph> começa com espaço em branco ou contém uma barra ou uma barra invertida.</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
          <source>to load an assembly with evidence.</source>
          <target state="translated">para carregar um assembly com evidências.</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">A identidade exclusiva do assembly dinâmico.</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">O modo no qual o assembly dinâmico será acessado.</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The required permissions request.</source>
          <target state="translated">A solicitação de permissões obrigatória.</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The optional permissions request.</source>
          <target state="translated">A solicitação de permissões opcional.</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The refused permissions request.</source>
          <target state="translated">A solicitação de permissões recusada.</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>Defines a dynamic assembly using the specified name, access mode, and permission requests.</source>
          <target state="translated">Define um assembly dinâmico usando o nome, o modo de acesso e as solicitações de permissão especificados.</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">Um assembly dinâmico com o nome e os recursos especificados.</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The permission requests specified for <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, and <ph id="ph3">`refusedPermissions`</ph> are not used unless the dynamic assembly has been saved and reloaded into memory.</source>
          <target state="translated">As solicitações de permissão especificadas para <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, e <ph id="ph3">`refusedPermissions`</ph> não são usados, a menos que o assembly dinâmico foi salvo e recarregado na memória.</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>To specify permission requests for a transient assembly that is never saved to disk, use an overload of the <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> method that specifies evidence as well as requested permissions, and supply an <ph id="ph2">&lt;xref:System.Security.Policy.Evidence&gt;</ph> object.</source>
          <target state="translated">Para especificar as solicitações de permissão para um assembly temporário que nunca é salvo em disco, use uma sobrecarga de <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> método que especifica a evidência como solicitado bem como permissões e fornecer um <ph id="ph2">&lt;xref:System.Security.Policy.Evidence&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType&gt;</ph> in <ph id="ph3">`refusedPermissions`</ph>.</source>
          <target state="translated">Durante o desenvolvimento de código que emite assemblies dinâmicos, é recomendável usar uma sobrecarga do método <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> que especifica evidência e permissões, fornecer a evidência que você deseja que o assembly dinâmico tenha e incluir <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType&gt;</ph> em <ph id="ph3">`refusedPermissions`</ph>.</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>Including <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification&gt;</ph> in the <ph id="ph2">`refusedPermissions`</ph> parameter ensures that the MSIL is verified.</source>
          <target state="translated">A inclusão de <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification&gt;</ph> no parâmetro de <ph id="ph2">`refusedPermissions`</ph> garante que o MSIL seja verificado.</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>A limitation of this technique is that it also causes <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> to be thrown when used with code that demands full trust.</source>
          <target state="translated">Uma limitação dessa técnica é que ela também faz <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> ser lançado quando usado com código que demanda confiança total.</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>This method should only be used to define a dynamic assembly in the current application domain.</source>
          <target state="translated">Este método só deve ser usado para definir um assembly dinâmico no domínio de aplicativo atual.</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph> method overload .</source>
          <target state="translated">Para obter mais informações, consulte o <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph> sobrecarga do método.</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The following sample demonstrates the <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> method and <ph id="ph2">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph> event.</source>
          <target state="translated">O exemplo a seguir demonstra o método <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> e o evento <ph id="ph2">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>For this code example to run, you must provide the fully qualified assembly name.</source>
          <target state="translated">Para este exemplo de código ser executado, você deve fornecer o nome de assembly totalmente qualificado.</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>For information about how to obtain the fully qualified assembly name, see <bpt id="p1">[</bpt>Assembly Names<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</source>
          <target state="translated">Para obter informações sobre como obter o nome totalmente qualificado do assembly, consulte <bpt id="p1">[</bpt>nomes de Assembly<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The <ph id="ph1">&lt;see langword="Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="name" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="Name" /&gt;</ph> de <ph id="ph2">&lt;paramref name="name" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The <ph id="ph1">&lt;see langword="Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="name" /&gt;</ph> begins with white space, or contains a forward or backward slash.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="Name" /&gt;</ph> de <ph id="ph2">&lt;paramref name="name" /&gt;</ph> começa com espaço em branco ou contém uma barra ou uma barra invertida.</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">A identidade exclusiva do assembly dinâmico.</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">O modo no qual o assembly dinâmico será acessado.</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The name of the directory where the dynamic assembly will be saved.</source>
          <target state="translated">O nome do diretório no qual o assembly dinâmico será salvo.</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>dir<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the current directory is used.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>dir<ept id="p1">&lt;/c&gt;</ept> for <ph id="ph1">&lt;see langword="null" /&gt;</ph>, o diretório atual será usado.</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> para sincronizar a criação de módulos, tipos e membros no assembly dinâmico; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>An enumerable list of attributes to be applied to the assembly, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if there are no attributes.</source>
          <target state="translated">Uma lista de atributos enumeráveis a serem aplicados ao assembly ou <ph id="ph1">&lt;see langword="null" /&gt;</ph> caso não haja nenhum atributo.</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>Defines a dynamic assembly using the specified name, access mode, storage directory, and synchronization option.</source>
          <target state="translated">Define um assembly dinâmico usando o nome, o modo de acesso, o diretório de armazenamento e a opção de sincronização especificados.</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">Um assembly dinâmico com o nome e os recursos especificados.</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>Use this method overload to specify attributes that do not work correctly unless they are applied when a dynamic assembly is created.</source>
          <target state="translated">Use esta sobrecarga de método para especificar atributos que não funcionam corretamente, senão aplicados quando um assembly dinâmico é criado.</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>For example, security attributes such as <ph id="ph1">&lt;xref:System.Security.SecurityTransparentAttribute&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.SecurityCriticalAttribute&gt;</ph> do not work correctly if they are added after a dynamic assembly has been created.</source>
          <target state="translated">Por exemplo, os atributos de segurança como <ph id="ph1">&lt;xref:System.Security.SecurityTransparentAttribute&gt;</ph> e <ph id="ph2">&lt;xref:System.Security.SecurityCriticalAttribute&gt;</ph> não funcionam corretamente caso sejam adicionados após um assembly dinâmico ser criado.</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>If <ph id="ph1">`isSynchronized`</ph> is <ph id="ph2">`true`</ph>, the following methods of the resulting <ph id="ph3">&lt;xref:System.Reflection.Emit.AssemblyBuilder&gt;</ph> will be synchronized: <ph id="ph4">&lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A&gt;</ph>, and <ph id="ph9">&lt;xref:System.Reflection.Emit.AssemblyBuilder.Save%2A&gt;</ph>.</source>
          <target state="translated">Se <ph id="ph1">`isSynchronized`</ph> é <ph id="ph2">`true`</ph>, os seguintes métodos de resultante <ph id="ph3">&lt;xref:System.Reflection.Emit.AssemblyBuilder&gt;</ph> serão sincronizados: <ph id="ph4">&lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A&gt;</ph>, e <ph id="ph9">&lt;xref:System.Reflection.Emit.AssemblyBuilder.Save%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>If two of these methods are called on different threads, one will block until the other is completed.</source>
          <target state="translated">Se dois desses métodos são chamados em threads diferentes, um será bloqueado até que o outro é concluído.</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The <ph id="ph1">&lt;see langword="Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="name" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="Name" /&gt;</ph> de <ph id="ph2">&lt;paramref name="name" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The <ph id="ph1">&lt;see langword="Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="name" /&gt;</ph> starts with white space, or contains a forward or backward slash.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="Name" /&gt;</ph> de <ph id="ph2">&lt;paramref name="name" /&gt;</ph> começa com espaço em branco ou contém uma barra ou uma barra invertida.</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">A identidade exclusiva do assembly dinâmico.</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">O modo no qual o assembly dinâmico será acessado.</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The evidence supplied for the dynamic assembly.</source>
          <target state="translated">A evidência fornecida para o assembly dinâmico.</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The evidence is used unaltered as the final set of evidence used for policy resolution.</source>
          <target state="translated">A evidência é usada inalterada como o conjunto final de evidências usado na resolução da política.</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The required permissions request.</source>
          <target state="translated">A solicitação de permissões obrigatória.</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The optional permissions request.</source>
          <target state="translated">A solicitação de permissões opcional.</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The refused permissions request.</source>
          <target state="translated">A solicitação de permissões recusada.</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>Defines a dynamic assembly using the specified name, access mode, evidence, and permission requests.</source>
          <target state="translated">Define um assembly dinâmico usando o nome, o modo de acesso, a evidência e as solicitações de permissão especificados.</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">Um assembly dinâmico com o nome e os recursos especificados.</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The permission requests specified for <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, and <ph id="ph3">`refusedPermissions`</ph> are used only if <ph id="ph4">`evidence`</ph> is also supplied, or if the dynamic assembly is saved and reloaded into memory.</source>
          <target state="translated">As solicitações de permissão especificadas para <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, e <ph id="ph3">`refusedPermissions`</ph> são usados somente se <ph id="ph4">`evidence`</ph> também for fornecido, ou se o assembly dinâmico for salvo e recarregado na memória.</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>During the development of code that emits dynamic assemblies, it is recommended that you include <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType&gt;</ph> in <ph id="ph2">`refusedPermissions`</ph>.</source>
          <target state="translated">Durante o desenvolvimento de código que emite assemblies dinâmicos, é recomendável que você inclua <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType&gt;</ph> em <ph id="ph2">`refusedPermissions`</ph>.</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>Including <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification&gt;</ph> in the <ph id="ph2">`refusedPermissions`</ph> parameter ensures that the MSIL is verified.</source>
          <target state="translated">A inclusão de <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification&gt;</ph> no parâmetro de <ph id="ph2">`refusedPermissions`</ph> garante que o MSIL seja verificado.</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>A limitation of this technique is that it also causes <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> to be thrown when used with code that demands full trust.</source>
          <target state="translated">Uma limitação dessa técnica é que ela também faz <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> ser lançado quando usado com código que demanda confiança total.</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>Only fully trusted callers can supply their <ph id="ph1">`evidence`</ph> when defining a dynamic <ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph>.</source>
          <target state="translated">Apenas chamadores totalmente confiáveis podem fornecer <ph id="ph1">`evidence`</ph> ao definir um <ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph> dinâmico.</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The runtime will map the <ph id="ph1">&lt;xref:System.Security.Policy.Evidence&gt;</ph> through the security policy to determine the granted permissions.</source>
          <target state="translated">O tempo de execução mapeará <ph id="ph1">&lt;xref:System.Security.Policy.Evidence&gt;</ph> pela política de segurança para determinar as permissões concedidas.</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>Partially trusted callers must supply a null <ph id="ph1">`evidence`</ph>.</source>
          <target state="translated">Os chamadores parcialmente confiáveis devem fornecer um <ph id="ph1">`evidence`</ph>nulo.</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>If <ph id="ph1">`evidence`</ph> is <ph id="ph2">`null`</ph>, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's <ph id="ph3">&lt;xref:System.Reflection.Assembly&gt;</ph> to the dynamic <ph id="ph4">&lt;xref:System.Reflection.Assembly&gt;</ph> being defined and marks policy as resolved.</source>
          <target state="translated">Caso <ph id="ph1">`evidence`</ph> seja <ph id="ph2">`null`</ph>, o tempo de execução copia os conjuntos de permissões, ou seja, os conjuntos de concessões e negações, do <ph id="ph3">&lt;xref:System.Reflection.Assembly&gt;</ph> do chamador para o <ph id="ph4">&lt;xref:System.Reflection.Assembly&gt;</ph> dinâmico definido e marca a política como resolvida.</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>If the dynamic <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph> is saved to disk, subsequent loads will get grants based on policies associated with the location where the <ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph> was saved.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph> dinâmico for salvo em disco, os carregamentos subsequentes obterão concessões com base em políticas associadas ao local no qual o <ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph> foi salvo.</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>This method should only be used to define a dynamic assembly in the current application domain.</source>
          <target state="translated">Este método só deve ser usado para definir um assembly dinâmico no domínio de aplicativo atual.</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph> method overload.</source>
          <target state="translated">Para obter mais informações, consulte a sobrecarga de método <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The following sample demonstrates the <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> method and <ph id="ph2">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph> event.</source>
          <target state="translated">O exemplo a seguir demonstra o método <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> e o evento <ph id="ph2">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>For this code example to run, you must provide the fully qualified assembly name.</source>
          <target state="translated">Para este exemplo de código ser executado, você deve fornecer o nome de assembly totalmente qualificado.</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>For information about how to obtain the fully qualified assembly name, see <bpt id="p1">[</bpt>Assembly Names<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</source>
          <target state="translated">Para obter informações sobre como obter o nome totalmente qualificado do assembly, consulte <bpt id="p1">[</bpt>nomes de Assembly<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The <ph id="ph1">&lt;see langword="Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="name" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="Name" /&gt;</ph> de <ph id="ph2">&lt;paramref name="name" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The <ph id="ph1">&lt;see langword="Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="name" /&gt;</ph> begins with white space, or contains a forward or backward slash.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="Name" /&gt;</ph> de <ph id="ph2">&lt;paramref name="name" /&gt;</ph> começa com espaço em branco ou contém uma barra ou uma barra invertida.</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>to load an assembly with evidence.</source>
          <target state="translated">para carregar um assembly com evidências.</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">A identidade exclusiva do assembly dinâmico.</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">O modo no qual o assembly dinâmico será acessado.</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The name of the directory where the assembly will be saved.</source>
          <target state="translated">O nome do diretório onde o assembly será salvo.</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>dir<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the directory defaults to the current directory.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>dir<ept id="p1">&lt;/c&gt;</ept> for <ph id="ph1">&lt;see langword="null" /&gt;</ph>, o diretório usará como padrão o diretório atual.</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The required permissions request.</source>
          <target state="translated">A solicitação de permissões obrigatória.</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The optional permissions request.</source>
          <target state="translated">A solicitação de permissões opcional.</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The refused permissions request.</source>
          <target state="translated">A solicitação de permissões recusada.</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>Defines a dynamic assembly using the specified name, access mode, storage directory, and permission requests.</source>
          <target state="translated">Define um assembly dinâmico usando o nome, o modo de acesso, o diretório de armazenamento e as solicitações de permissão especificados.</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">Um assembly dinâmico com o nome e os recursos especificados.</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The permission requests specified for <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, and <ph id="ph3">`refusedPermissions`</ph> are not used unless the dynamic assembly has been saved and reloaded into memory.</source>
          <target state="translated">As solicitações de permissão especificadas para <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, e <ph id="ph3">`refusedPermissions`</ph> não são usados, a menos que o assembly dinâmico foi salvo e recarregado na memória.</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>To specify permission requests for a transient assembly that is never saved to disk, use an overload of the <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> method that specifies evidence as well as requested permissions, and supply an <ph id="ph2">&lt;xref:System.Security.Policy.Evidence&gt;</ph> object.</source>
          <target state="translated">Para especificar as solicitações de permissão para um assembly temporário que nunca é salvo em disco, use uma sobrecarga de <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> método que especifica a evidência como solicitado bem como permissões e fornecer um <ph id="ph2">&lt;xref:System.Security.Policy.Evidence&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType&gt;</ph> in <ph id="ph3">`refusedPermissions`</ph>.</source>
          <target state="translated">Durante o desenvolvimento de código que emite assemblies dinâmicos, é recomendável usar uma sobrecarga do método <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> que especifica evidência e permissões, fornecer a evidência que você deseja que o assembly dinâmico tenha e incluir <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType&gt;</ph> em <ph id="ph3">`refusedPermissions`</ph>.</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>Including <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification&gt;</ph> in the <ph id="ph2">`refusedPermissions`</ph> parameter ensures that the MSIL is verified.</source>
          <target state="translated">A inclusão de <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification&gt;</ph> no parâmetro de <ph id="ph2">`refusedPermissions`</ph> garante que o MSIL seja verificado.</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>A limitation of this technique is that it also causes <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> to be thrown when used with code that demands full trust.</source>
          <target state="translated">Uma limitação dessa técnica é que ela também faz <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> ser lançado quando usado com código que demanda confiança total.</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>This method should only be used to define a dynamic assembly in the current application domain.</source>
          <target state="translated">Este método só deve ser usado para definir um assembly dinâmico no domínio de aplicativo atual.</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph> method overload.</source>
          <target state="translated">Para obter mais informações, consulte a sobrecarga de método <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The following sample demonstrates the <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> method and <ph id="ph2">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph> event.</source>
          <target state="translated">O exemplo a seguir demonstra o método <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> e o evento <ph id="ph2">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>For this code example to run, you must provide the fully qualified assembly name.</source>
          <target state="translated">Para este exemplo de código ser executado, você deve fornecer o nome de assembly totalmente qualificado.</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>For information about how to obtain the fully qualified assembly name, see <bpt id="p1">[</bpt>Assembly Names<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</source>
          <target state="translated">Para obter informações sobre como obter o nome totalmente qualificado do assembly, consulte <bpt id="p1">[</bpt>nomes de Assembly<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The <ph id="ph1">&lt;see langword="Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="name" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="Name" /&gt;</ph> de <ph id="ph2">&lt;paramref name="name" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The <ph id="ph1">&lt;see langword="Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="name" /&gt;</ph> begins with white space, or contains a forward or backward slash.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="Name" /&gt;</ph> de <ph id="ph2">&lt;paramref name="name" /&gt;</ph> começa com espaço em branco ou contém uma barra ou uma barra invertida.</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">A identidade exclusiva do assembly dinâmico.</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">O modo no qual o assembly dinâmico será acessado.</target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The name of the directory where the assembly will be saved.</source>
          <target state="translated">O nome do diretório onde o assembly será salvo.</target>       </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>dir<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the directory defaults to the current directory.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>dir<ept id="p1">&lt;/c&gt;</ept> for <ph id="ph1">&lt;see langword="null" /&gt;</ph>, o diretório usará como padrão o diretório atual.</target>       </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The evidence supplied for the dynamic assembly.</source>
          <target state="translated">A evidência fornecida para o assembly dinâmico.</target>       </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The evidence is used unaltered as the final set of evidence used for policy resolution.</source>
          <target state="translated">A evidência é usada inalterada como o conjunto final de evidências usado na resolução da política.</target>       </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The required permissions request.</source>
          <target state="translated">A solicitação de permissões obrigatória.</target>       </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The optional permissions request.</source>
          <target state="translated">A solicitação de permissões opcional.</target>       </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The refused permissions request.</source>
          <target state="translated">A solicitação de permissões recusada.</target>       </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>Defines a dynamic assembly using the specified name, access mode, storage directory, evidence, and permission requests.</source>
          <target state="translated">Define um assembly dinâmico usando o nome, o modo de acesso, o diretório de armazenamento, a evidência e as solicitações de permissão especificados.</target>       </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">Um assembly dinâmico com o nome e os recursos especificados.</target>       </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The permission requests specified for <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, and <ph id="ph3">`refusedPermissions`</ph> are used only if <ph id="ph4">`evidence`</ph> is also supplied, or if the dynamic assembly is saved and reloaded into memory.</source>
          <target state="translated">As solicitações de permissão especificadas para <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, e <ph id="ph3">`refusedPermissions`</ph> são usados somente se <ph id="ph4">`evidence`</ph> também for fornecido, ou se o assembly dinâmico for salvo e recarregado na memória.</target>       </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>During the development of code that emits dynamic assemblies, it is recommended that you include <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType&gt;</ph> in <ph id="ph2">`refusedPermissions`</ph>.</source>
          <target state="translated">Durante o desenvolvimento de código que emite assemblies dinâmicos, é recomendável que você inclua <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType&gt;</ph> em <ph id="ph2">`refusedPermissions`</ph>.</target>       </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>Including <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification&gt;</ph> in the <ph id="ph2">`refusedPermissions`</ph> parameter ensures that the MSIL is verified.</source>
          <target state="translated">A inclusão de <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification&gt;</ph> no parâmetro de <ph id="ph2">`refusedPermissions`</ph> garante que o MSIL seja verificado.</target>       </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>A limitation of this technique is that it also causes <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> to be thrown when used with code that demands full trust.</source>
          <target state="translated">Uma limitação dessa técnica é que ela também faz <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> ser lançado quando usado com código que demanda confiança total.</target>       </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>Only fully trusted callers can supply their <ph id="ph1">`evidence`</ph> when defining a dynamic <ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph>.</source>
          <target state="translated">Apenas chamadores totalmente confiáveis podem fornecer <ph id="ph1">`evidence`</ph> ao definir um <ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph> dinâmico.</target>       </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The runtime will map the <ph id="ph1">&lt;xref:System.Security.Policy.Evidence&gt;</ph> through the security policy to determine the granted permissions.</source>
          <target state="translated">O tempo de execução mapeará <ph id="ph1">&lt;xref:System.Security.Policy.Evidence&gt;</ph> pela política de segurança para determinar as permissões concedidas.</target>       </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>Partially trusted callers must supply a null <ph id="ph1">`evidence`</ph>.</source>
          <target state="translated">Os chamadores parcialmente confiáveis devem fornecer um <ph id="ph1">`evidence`</ph>nulo.</target>       </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>If <ph id="ph1">`evidence`</ph> is <ph id="ph2">`null`</ph>, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's <ph id="ph3">&lt;xref:System.Reflection.Assembly&gt;</ph> to the dynamic <ph id="ph4">&lt;xref:System.Reflection.Assembly&gt;</ph> being defined and marks policy as resolved.</source>
          <target state="translated">Caso <ph id="ph1">`evidence`</ph> seja <ph id="ph2">`null`</ph>, o tempo de execução copia os conjuntos de permissões, ou seja, os conjuntos de concessões e negações, do <ph id="ph3">&lt;xref:System.Reflection.Assembly&gt;</ph> do chamador para o <ph id="ph4">&lt;xref:System.Reflection.Assembly&gt;</ph> dinâmico definido e marca a política como resolvida.</target>       </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>If the dynamic <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph> is saved to disk, subsequent loads will get grants based on policies associated with the location where the <ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph> was saved.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph> dinâmico for salvo em disco, os carregamentos subsequentes obterão concessões com base em políticas associadas ao local no qual o <ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph> foi salvo.</target>       </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>This method should only be used to define a dynamic assembly in the current application domain.</source>
          <target state="translated">Este método só deve ser usado para definir um assembly dinâmico no domínio de aplicativo atual.</target>       </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph> method overload.</source>
          <target state="translated">Para obter mais informações, consulte a sobrecarga de método <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The following sample demonstrates the <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> method and <ph id="ph2">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph> event.</source>
          <target state="translated">O exemplo a seguir demonstra o método <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> e o evento <ph id="ph2">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>For this code example to run, you must provide the fully qualified assembly name.</source>
          <target state="translated">Para este exemplo de código ser executado, você deve fornecer o nome de assembly totalmente qualificado.</target>       </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>For information about how to obtain the fully qualified assembly name, see <bpt id="p1">[</bpt>Assembly Names<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</source>
          <target state="translated">Para obter informações sobre como obter o nome totalmente qualificado do assembly, consulte <bpt id="p1">[</bpt>nomes de Assembly<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</target>       </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The <ph id="ph1">&lt;see langword="Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="name" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="Name" /&gt;</ph> de <ph id="ph2">&lt;paramref name="name" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The <ph id="ph1">&lt;see langword="Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="name" /&gt;</ph> begins with white space, or contains a forward or backward slash.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="Name" /&gt;</ph> de <ph id="ph2">&lt;paramref name="name" /&gt;</ph> começa com espaço em branco ou contém uma barra ou uma barra invertida.</target>       </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>to load an assembly with evidence.</source>
          <target state="translated">para carregar um assembly com evidências.</target>       </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">A identidade exclusiva do assembly dinâmico.</target>       </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">O modo no qual o assembly dinâmico será acessado.</target>       </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>The name of the directory where the dynamic assembly will be saved.</source>
          <target state="translated">O nome do diretório no qual o assembly dinâmico será salvo.</target>       </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>dir<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the directory defaults to the current directory.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>dir<ept id="p1">&lt;/c&gt;</ept> for <ph id="ph1">&lt;see langword="null" /&gt;</ph>, o diretório usará como padrão o diretório atual.</target>       </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>The evidence supplied for the dynamic assembly.</source>
          <target state="translated">A evidência fornecida para o assembly dinâmico.</target>       </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>The evidence is used unaltered as the final set of evidence used for policy resolution.</source>
          <target state="translated">A evidência é usada inalterada como o conjunto final de evidências usado na resolução da política.</target>       </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>The required permissions request.</source>
          <target state="translated">A solicitação de permissões obrigatória.</target>       </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>The optional permissions request.</source>
          <target state="translated">A solicitação de permissões opcional.</target>       </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>The refused permissions request.</source>
          <target state="translated">A solicitação de permissões recusada.</target>       </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> para sincronizar a criação de módulos, tipos e membros no assembly dinâmico; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>Defines a dynamic assembly using the specified name, access mode, storage directory, evidence, permission requests, and synchronization option.</source>
          <target state="translated">Define um assembly dinâmico usando o nome, o modo de acesso, o diretório de armazenamento, a evidência, as solicitações de permissão e a opção de sincronização especificados.</target>       </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">Um assembly dinâmico com o nome e os recursos especificados.</target>       </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>The permission requests specified for <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, and <ph id="ph3">`refusedPermissions`</ph> are used only if <ph id="ph4">`evidence`</ph> is also supplied, or if the dynamic assembly is saved and reloaded into memory.</source>
          <target state="translated">As solicitações de permissão especificadas para <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, e <ph id="ph3">`refusedPermissions`</ph> são usados somente se <ph id="ph4">`evidence`</ph> também for fornecido, ou se o assembly dinâmico for salvo e recarregado na memória.</target>       </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>During the development of code that emits dynamic assemblies, it is recommended that you include <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType&gt;</ph> in <ph id="ph2">`refusedPermissions`</ph>.</source>
          <target state="translated">Durante o desenvolvimento de código que emite assemblies dinâmicos, é recomendável que você inclua <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType&gt;</ph> em <ph id="ph2">`refusedPermissions`</ph>.</target>       </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>Including <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification&gt;</ph> in the <ph id="ph2">`refusedPermissions`</ph> parameter ensures that the MSIL is verified.</source>
          <target state="translated">A inclusão de <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification&gt;</ph> no parâmetro de <ph id="ph2">`refusedPermissions`</ph> garante que o MSIL seja verificado.</target>       </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>A limitation of this technique is that it also causes <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> to be thrown when used with code that demands full trust.</source>
          <target state="translated">Uma limitação dessa técnica é que ela também faz <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> ser lançado quando usado com código que demanda confiança total.</target>       </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>Only fully trusted callers can supply their evidence when defining a dynamic <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph>.</source>
          <target state="translated">Somente os chamadores totalmente confiáveis podem fornecer seu evidência ao definir um dinâmico <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>The runtime will map the <ph id="ph1">&lt;xref:System.Security.Policy.Evidence&gt;</ph> through the security policy to determine the granted permissions.</source>
          <target state="translated">O tempo de execução mapeará <ph id="ph1">&lt;xref:System.Security.Policy.Evidence&gt;</ph> pela política de segurança para determinar as permissões concedidas.</target>       </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>Partially trusted callers must supply <ph id="ph1">`null`</ph> for the <ph id="ph2">`evidence`</ph> parameter.</source>
          <target state="translated">Parcialmente confiável chamadores devem fornecer <ph id="ph1">`null`</ph> para o <ph id="ph2">`evidence`</ph> parâmetro.</target>       </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>If <ph id="ph1">`evidence`</ph> is <ph id="ph2">`null`</ph>, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's <ph id="ph3">&lt;xref:System.Reflection.Assembly&gt;</ph> to the dynamic <ph id="ph4">&lt;xref:System.Reflection.Assembly&gt;</ph> being defined and marks policy as resolved.</source>
          <target state="translated">Caso <ph id="ph1">`evidence`</ph> seja <ph id="ph2">`null`</ph>, o tempo de execução copia os conjuntos de permissões, ou seja, os conjuntos de concessões e negações, do <ph id="ph3">&lt;xref:System.Reflection.Assembly&gt;</ph> do chamador para o <ph id="ph4">&lt;xref:System.Reflection.Assembly&gt;</ph> dinâmico definido e marca a política como resolvida.</target>       </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>If the dynamic <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph> is saved to disk, subsequent loads will get grants based on policies associated with the location where the <ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph> was saved.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph> dinâmico for salvo em disco, os carregamentos subsequentes obterão concessões com base em políticas associadas ao local no qual o <ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph> foi salvo.</target>       </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>If <ph id="ph1">`isSynchronized`</ph> is <ph id="ph2">`true`</ph>, the following methods of the resulting <ph id="ph3">&lt;xref:System.Reflection.Emit.AssemblyBuilder&gt;</ph> will be synchronized: <ph id="ph4">&lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A&gt;</ph>, and <ph id="ph9">&lt;xref:System.Reflection.Emit.AssemblyBuilder.Save%2A&gt;</ph>.</source>
          <target state="translated">Se <ph id="ph1">`isSynchronized`</ph> é <ph id="ph2">`true`</ph>, os seguintes métodos de resultante <ph id="ph3">&lt;xref:System.Reflection.Emit.AssemblyBuilder&gt;</ph> serão sincronizados: <ph id="ph4">&lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A&gt;</ph>, e <ph id="ph9">&lt;xref:System.Reflection.Emit.AssemblyBuilder.Save%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>If two of these methods are called on different threads, one will block until the other completes.</source>
          <target state="translated">Se dois desses métodos são chamados em threads diferentes, um será bloqueado até que outra seja concluída.</target>       </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>The following sample demonstrates the <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> method and <ph id="ph2">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph> event.</source>
          <target state="translated">O exemplo a seguir demonstra o método <ph id="ph1">&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</ph> e o evento <ph id="ph2">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>For this code example to run, you must provide the fully qualified assembly name.</source>
          <target state="translated">Para este exemplo de código ser executado, você deve fornecer o nome de assembly totalmente qualificado.</target>       </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>For information about how to obtain the fully qualified assembly name, see <bpt id="p1">[</bpt>Assembly Names<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</source>
          <target state="translated">Para obter informações sobre como obter o nome totalmente qualificado do assembly, consulte <bpt id="p1">[</bpt>nomes de Assembly<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</target>       </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>The <ph id="ph1">&lt;see langword="Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="name" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="Name" /&gt;</ph> de <ph id="ph2">&lt;paramref name="name" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>The <ph id="ph1">&lt;see langword="Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="name" /&gt;</ph> begins with white space, or contains a forward or backward slash.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="Name" /&gt;</ph> de <ph id="ph2">&lt;paramref name="name" /&gt;</ph> começa com espaço em branco ou contém uma barra ou uma barra invertida.</target>       </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>to load an assembly with evidence.</source>
          <target state="translated">para carregar um assembly com evidências.</target>       </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">A identidade exclusiva do assembly dinâmico.</target>       </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">O modo no qual o assembly dinâmico será acessado.</target>       </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The name of the directory where the dynamic assembly will be saved.</source>
          <target state="translated">O nome do diretório no qual o assembly dinâmico será salvo.</target>       </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>dir<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the current directory is used.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>dir<ept id="p1">&lt;/c&gt;</ept> for <ph id="ph1">&lt;see langword="null" /&gt;</ph>, o diretório atual será usado.</target>       </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The evidence that is supplied for the dynamic assembly.</source>
          <target state="translated">A evidência fornecida para o assembly dinâmico.</target>       </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The evidence is used unaltered as the final set of evidence used for policy resolution.</source>
          <target state="translated">A evidência é usada inalterada como o conjunto final de evidências usado na resolução da política.</target>       </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The required permissions request.</source>
          <target state="translated">A solicitação de permissões obrigatória.</target>       </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The optional permissions request.</source>
          <target state="translated">A solicitação de permissões opcional.</target>       </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The refused permissions request.</source>
          <target state="translated">A solicitação de permissões recusada.</target>       </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> para sincronizar a criação de módulos, tipos e membros no assembly dinâmico; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>An enumerable list of attributes to be applied to the assembly, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if there are no attributes.</source>
          <target state="translated">Uma lista de atributos enumeráveis a serem aplicados ao assembly ou <ph id="ph1">&lt;see langword="null" /&gt;</ph> caso não haja nenhum atributo.</target>       </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>Defines a dynamic assembly with the specified name, access mode, storage directory, evidence, permission requests, synchronization option, and custom attributes.</source>
          <target state="translated">Define um assembly dinâmico com o nome, o modo de acesso, o diretório de armazenamento, a evidência, as solicitações de permissão, a opção de sincronização e os atributos personalizados especificados.</target>       </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">Um assembly dinâmico com o nome e os recursos especificados.</target>       </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>Use this method overload to specify attributes that do not work correctly unless they are applied when a dynamic assembly is created.</source>
          <target state="translated">Use esta sobrecarga de método para especificar atributos que não funcionam corretamente, senão aplicados quando um assembly dinâmico é criado.</target>       </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>For example, security attributes such as <ph id="ph1">&lt;xref:System.Security.SecurityTransparentAttribute&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.SecurityCriticalAttribute&gt;</ph> do not work correctly if they are added after a dynamic assembly has been created.</source>
          <target state="translated">Por exemplo, os atributos de segurança como <ph id="ph1">&lt;xref:System.Security.SecurityTransparentAttribute&gt;</ph> e <ph id="ph2">&lt;xref:System.Security.SecurityCriticalAttribute&gt;</ph> não funcionam corretamente caso sejam adicionados após um assembly dinâmico ser criado.</target>       </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The permission requests specified for the <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, and <ph id="ph3">`refusedPermissions`</ph> parameters are used only if the <ph id="ph4">`evidence`</ph> parameter is also supplied, or if the dynamic assembly is saved and reloaded into memory.</source>
          <target state="translated">As solicitações de permissão especificadas para o <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, e <ph id="ph3">`refusedPermissions`</ph> parâmetros são usados somente se o <ph id="ph4">`evidence`</ph> parâmetro também é fornecido, ou se o assembly dinâmico for salvo e recarregado na memória.</target>       </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>When you develop code that emits dynamic assemblies, we recommend that you include the <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType&gt;</ph> flag in the <ph id="ph2">`refusedPermissions`</ph> parameter.</source>
          <target state="translated">Ao desenvolver o código que emite assemblies dinâmicos, recomendamos que você inclua o <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType&gt;</ph> sinalizador no <ph id="ph2">`refusedPermissions`</ph> parâmetro.</target>       </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The inclusion of this flag ensures that the Microsoft intermediate language (MSIL) will be verified.</source>
          <target state="translated">A inclusão do sinalizador garante que a Microsoft intermediate language (MSIL) será verificado.</target>       </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>This technique will detect the unintentional generation of unverifiable code, which otherwise is very difficult to detect.</source>
          <target state="translated">Essa técnica detectará a geração não intencional de código não verificado, o que, normalmente, é muito difícil de detectar.</target>       </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>A limitation of this technique is that it also causes <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> to be thrown when it is used with code that demands full trust.</source>
          <target state="translated">Uma limitação dessa técnica é que ele também faz com que <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> seja gerada quando é usado com o código que exige confiança total.</target>       </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>Only fully trusted callers can supply evidence when defining a dynamic <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph>.</source>
          <target state="translated">Somente os chamadores totalmente confiáveis podem fornecer evidências ao definir um dinâmico <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The runtime maps the <ph id="ph1">&lt;xref:System.Security.Policy.Evidence&gt;</ph> through the security policy to determine the granted permissions.</source>
          <target state="translated">O tempo de execução mapeia o <ph id="ph1">&lt;xref:System.Security.Policy.Evidence&gt;</ph> por meio da política de segurança para determinar as permissões concedidas.</target>       </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>Partially trusted callers must supply <ph id="ph1">`null`</ph> for the <ph id="ph2">`evidence`</ph> parameter.</source>
          <target state="translated">Parcialmente confiável chamadores devem fornecer <ph id="ph1">`null`</ph> para o <ph id="ph2">`evidence`</ph> parâmetro.</target>       </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>If <ph id="ph1">`evidence`</ph> is <ph id="ph2">`null`</ph>, the runtime copies the permission sets (that is, the current grant and deny sets) from the caller's assembly to the dynamic assembly that is being defined, and marks the policy as resolved.</source>
          <target state="translated">Se <ph id="ph1">`evidence`</ph> é <ph id="ph2">`null`</ph>, o tempo de execução copia os conjuntos de permissões (isto é, a concessão atual e negar conjuntos) do assembly do chamador para o assembly dinâmico que está sendo definido e marca a política como resolvido.</target>       </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>If the dynamic assembly is saved to disk, subsequent loads will get grants based on policies that are associated with the location where the dynamic assembly was saved.</source>
          <target state="translated">Se o assembly dinâmico é salvo em disco, subsequente cargas receberá concessões com base nas políticas que estão associadas com o local onde o assembly dinâmico foi salvo.</target>       </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>If <ph id="ph1">`isSynchronized`</ph> is <ph id="ph2">`true`</ph>, the following methods of the resulting <ph id="ph3">&lt;xref:System.Reflection.Emit.AssemblyBuilder&gt;</ph> will be synchronized: <ph id="ph4">&lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A&gt;</ph>, and <ph id="ph9">&lt;xref:System.Reflection.Emit.AssemblyBuilder.Save%2A&gt;</ph>.</source>
          <target state="translated">Se <ph id="ph1">`isSynchronized`</ph> é <ph id="ph2">`true`</ph>, os seguintes métodos de resultante <ph id="ph3">&lt;xref:System.Reflection.Emit.AssemblyBuilder&gt;</ph> serão sincronizados: <ph id="ph4">&lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A&gt;</ph>, e <ph id="ph9">&lt;xref:System.Reflection.Emit.AssemblyBuilder.Save%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>If two of these methods are called on different threads, one will block until the other is completed.</source>
          <target state="translated">Se dois desses métodos são chamados em threads diferentes, um será bloqueado até que o outro é concluído.</target>       </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>This method overload is introduced in the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph>.</source>
          <target state="translated">Essa sobrecarga de método foi introduzida no <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The <ph id="ph1">&lt;see langword="Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="name" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="Name" /&gt;</ph> de <ph id="ph2">&lt;paramref name="name" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The <ph id="ph1">&lt;see langword="Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="name" /&gt;</ph> starts with white space, or contains a forward or backward slash.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="Name" /&gt;</ph> de <ph id="ph2">&lt;paramref name="name" /&gt;</ph> começa com espaço em branco ou contém uma barra ou uma barra invertida.</target>       </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>to load an assembly with evidence.</source>
          <target state="translated">para carregar um assembly com evidências.</target>       </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DoCallBack(System.CrossAppDomainDelegate)">
          <source>A delegate that specifies a method to call.</source>
          <target state="translated">Um delegado que especifica um método a ser chamado.</target>       </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DoCallBack(System.CrossAppDomainDelegate)">
          <source>Executes the code in another application domain that is identified by the specified delegate.</source>
          <target state="translated">Executa o código em outro domínio de aplicativo que é identificado pelo delegado especificado.</target>       </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DoCallBack(System.CrossAppDomainDelegate)">
          <source><ph id="ph1">`callBackDelegate`</ph> can specify a marshal-by-value, <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, or <ph id="ph3">&lt;xref:System.ContextBoundObject&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`callBackDelegate`</ph> pode especificar um marshal-por-valor, <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, ou <ph id="ph3">&lt;xref:System.ContextBoundObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DoCallBack(System.CrossAppDomainDelegate)">
          <source>The following sample demonstrates using a static <ph id="ph1">&lt;xref:System.AppDomain.DoCallBack%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir demonstra como usar um estático <ph id="ph1">&lt;xref:System.AppDomain.DoCallBack%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DoCallBack(System.CrossAppDomainDelegate)">
          <source>The following sample demonstrates using the <ph id="ph1">&lt;xref:System.AppDomain.DoCallBack%2A&gt;</ph> method by value.</source>
          <target state="translated">O exemplo a seguir demonstra como usar o <ph id="ph1">&lt;xref:System.AppDomain.DoCallBack%2A&gt;</ph> método por valor.</target>       </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.DoCallBack(System.CrossAppDomainDelegate)">
          <source>The following sample demonstrates using the <ph id="ph1">&lt;xref:System.AppDomain.DoCallBack%2A&gt;</ph> method by reference.</source>
          <target state="translated">O exemplo a seguir demonstra como usar o <ph id="ph1">&lt;xref:System.AppDomain.DoCallBack%2A&gt;</ph> método por referência.</target>       </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve" uid="M:System.AppDomain.DoCallBack(System.CrossAppDomainDelegate)">
          <source><ph id="ph1">&lt;paramref name="callBackDelegate" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="callBackDelegate" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve" uid="P:System.AppDomain.DomainManager">
          <source>Gets the domain manager that was provided by the host when the application domain was initialized.</source>
          <target state="translated">Obtém o Gerenciador de domínio que foi fornecido pelo host quando o domínio do aplicativo foi inicializado.</target>       </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DomainManager">
          <source>An object that represents the domain manager provided by the host when the application domain was initialized, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no domain manager was provided.</source>
          <target state="translated">Um objeto que representa o gerenciador de domínio fornecido pelo host quando o domínio do aplicativo foi inicializado ou <ph id="ph1">&lt;see langword="null" /&gt;</ph> se nenhum gerenciador de domínio foi fornecido.</target>       </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DomainManager">
          <source>An unmanaged host of the common language runtime (CLR) can provide a domain manager.</source>
          <target state="translated">Um host não gerenciado do common language runtime (CLR) pode fornecer um Gerenciador de domínio.</target>       </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DomainManager">
          <source>The domain manager can participate in initializing the new application domain and supply other managers, such as a <ph id="ph1">&lt;xref:System.Security.HostSecurityManager&gt;</ph>, that participate in the operations of the application domain.</source>
          <target state="translated">O Gerenciador de domínio pode participar de inicializar o novo domínio de aplicativo e fornece outros gerentes, como um <ph id="ph1">&lt;xref:System.Security.HostSecurityManager&gt;</ph>, que participam de operações do domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DomainManager">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">Requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DomainManager">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve" uid="E:System.AppDomain.DomainUnload">
          <source>Occurs when an <ph id="ph1">&lt;see cref="T:System.AppDomain" /&gt;</ph> is about to be unloaded.</source>
          <target state="translated">Ocorre quando um <ph id="ph1">&lt;see cref="T:System.AppDomain" /&gt;</ph> está prestes a ser descarregado.</target>       </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.DomainUnload">
          <source>The <ph id="ph1">&lt;xref:System.EventHandler&gt;</ph> delegate for this event can perform any termination activities before the application domain is unloaded.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.EventHandler&gt;</ph> delegar para esse evento pode executar as atividades de encerramento antes que o domínio de aplicativo seja descarregado.</target>       </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.DomainUnload">
          <source>Each application domain that needs to perform processing when it is unloaded should register an event handler for this event.</source>
          <target state="translated">Cada domínio de aplicativo que precisa executar o processamento quando ela é descarregada deve registrar um manipulador de eventos para esse evento.</target>       </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.DomainUnload">
          <source>A shared event handler should not be used, because the <ph id="ph1">&lt;xref:System.EventHandler&gt;</ph> delegate does not identify the domain that is being unloaded.</source>
          <target state="translated">Um manipulador de eventos compartilhado não deve ser usado porque o <ph id="ph1">&lt;xref:System.EventHandler&gt;</ph> delegado não identifica o domínio que está sendo descarregado.</target>       </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.DomainUnload">
          <source>This event is never raised in the default application domain.</source>
          <target state="translated">Esse evento é gerado nunca no domínio de aplicativo padrão.</target>       </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.DomainUnload">
          <source>Do not make assumptions about the thread the event is raised on.</source>
          <target state="translated">Não faça suposições sobre o thread em que o evento é gerado em.</target>       </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.DomainUnload">
          <source>The event can be raised on a different thread than the one that called the <ph id="ph1">&lt;xref:System.AppDomain.Unload%2A&gt;</ph> method.</source>
          <target state="translated">O evento pode ser gerado em um thread diferente daquela que chamou o <ph id="ph1">&lt;xref:System.AppDomain.Unload%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.DomainUnload">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre a manipulação de eventos, consulte <bpt id="p1">[</bpt>tratamento e gerando eventos<ept id="p1">](~/docs/standard/events/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve" uid="P:System.AppDomain.DynamicDirectory">
          <source>Gets the directory that the assembly resolver uses to probe for dynamically created assemblies.</source>
          <target state="translated">Obtém o diretório que usa o resolvedor de assembly para sondar assemblies criados dinamicamente.</target>       </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DynamicDirectory">
          <source>The directory that the assembly resolver uses to probe for dynamically created assemblies.</source>
          <target state="translated">O diretório que usa o resolvedor de assembly para sondar assemblies criados dinamicamente.</target>       </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DynamicDirectory">
          <source>To set the dynamic directory, assign a base directory path to the <ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=nameWithType&gt;</ph> property of the <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> object that will be used to create the new application domain.</source>
          <target state="translated">Para definir o diretório dinâmico, atribua um caminho de diretório base para o <ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=nameWithType&gt;</ph> propriedade o <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> objeto que será usado para criar o novo domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DynamicDirectory">
          <source>The base directory path you assign to the property is modified by the addition of a subdirectory whose simple name is the hash code of the string you assign to the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=nameWithType&gt;</ph> property, so the format of the base directory is <bpt id="p1">*</bpt>original path<ept id="p1">*</ept><ph id="ph2">\\</ph><bpt id="p2">*</bpt>hash code<ept id="p2">*</ept>.</source>
          <target state="translated">O caminho do diretório base atribuído à propriedade é modificado pela adição de um subdiretório, cujo nome simple é o código hash da cadeia de caracteres que você atribui ao <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=nameWithType&gt;</ph> propriedade, portanto, o formato do diretório base é <bpt id="p1">*</bpt>caminho original<ept id="p1">*</ept><ph id="ph2">\\</ph><bpt id="p2">*</bpt>o código hash<ept id="p2">*</ept>.</target>       </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DynamicDirectory">
          <source>The dynamic directory is a subdirectory of this base directory.</source>
          <target state="translated">O diretório dinâmico é uma subpasta desta pasta base.</target>       </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DynamicDirectory">
          <source>Its simple name is the value of the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=nameWithType&gt;</ph> property, so its format is <bpt id="p1">*</bpt>original path<ept id="p1">*</ept><ph id="ph2">\\</ph><bpt id="p2">*</bpt>hash code<ept id="p2">*</ept><ph id="ph3">\\</ph><bpt id="p3">*</bpt>application name<ept id="p3">*</ept>.</source>
          <target state="translated">O nome simple é o valor da <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=nameWithType&gt;</ph> propriedade, portanto, seu formato é <bpt id="p1">*</bpt>caminho original<ept id="p1">*</ept><ph id="ph2">\\</ph><bpt id="p2">*</bpt>o código hash<ept id="p2">*</ept><ph id="ph3">\\</ph><bpt id="p3">*</bpt>nome do aplicativo<ept id="p3">*</ept>.</target>       </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DynamicDirectory">
          <source>The following example creates an application domain with a directory for dynamic assemblies, emits a dynamic assembly and stores it in the dynamic directory, and then loads the assembly into the new application domain and uses it.</source>
          <target state="translated">O exemplo a seguir cria um domínio de aplicativo com um diretório para assemblies dinâmicos, emite um assembly dinâmico e armazena-o no diretório dinâmico e, em seguida, carrega o assembly para o novo domínio de aplicativo e utiliza.</target>       </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DynamicDirectory">
          <source>The example creates an <ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph> object and sets its <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> property to "Example" and its <ph id="ph3">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph> property to "C:\DynamicAssemblyDir".</source>
          <target state="translated">O exemplo cria um <ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph> objeto e define seu <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> propriedade como "Exemplo" e seu <ph id="ph3">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph> propriedade como "C:\DynamicAssemblyDir".</target>       </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DynamicDirectory">
          <source>The example then displays the <ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph> property, to show that the hash code of the application name has been appended as a subdirectory of the path that was originally assigned.</source>
          <target state="translated">O exemplo, em seguida, exibe o <ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph> propriedade, para mostrar que o código hash do nome do aplicativo foi acrescentado como uma subpasta do caminho que foi atribuído originalmente.</target>       </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DynamicDirectory">
          <source>The base directory in this example is intended to be outside the probing path for the example application.</source>
          <target state="translated">O diretório base neste exemplo destina-se a estar fora do caminho de investigação para o aplicativo de exemplo.</target>       </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DynamicDirectory">
          <source>Be sure to compile the example in a different location.</source>
          <target state="translated">Certifique-se de compilar o exemplo em um local diferente.</target>       </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DynamicDirectory">
          <source>Delete the base directory and all its subdirectories each time you run the example.</source>
          <target state="translated">Exclua o diretório base e todos os seus subdiretórios cada vez que você executar o exemplo.</target>       </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DynamicDirectory">
          <source>The example creates a new application domain, using the <ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph> object.</source>
          <target state="translated">O exemplo cria um novo domínio de aplicativo, usando o <ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DynamicDirectory">
          <source>The example uses the <ph id="ph1">&lt;xref:System.AppDomain.DynamicDirectory%2A&gt;</ph> property to retrieve the name of the directory, so it can create the directory.</source>
          <target state="translated">O exemplo usa o <ph id="ph1">&lt;xref:System.AppDomain.DynamicDirectory%2A&gt;</ph> propriedade para recuperar o nome do diretório, para que ele possa criar o diretório.</target>       </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DynamicDirectory">
          <source>(The example could just as easily create the directory beforehand by concatenating the original path, the hash code of the application name, and the application name.)</source>
          <target state="translated">(O exemplo pode ser tão facilmente criar o diretório com antecedência concatenando o caminho original, o código hash do nome do aplicativo e o nome do aplicativo.)</target>       </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DynamicDirectory">
          <source>The example has a <ph id="ph1">`GenerateDynamicAssembly`</ph> method that emits an assembly named <ph id="ph2">`DynamicHelloWorld.dll`</ph> and stores it in the new application domain's dynamic directory.</source>
          <target state="translated">O exemplo tem uma <ph id="ph1">`GenerateDynamicAssembly`</ph> método que emite um assembly chamado <ph id="ph2">`DynamicHelloWorld.dll`</ph> e os armazena no diretório dinâmico do novo domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DynamicDirectory">
          <source>The dynamic assembly contains one type, <ph id="ph1">`HelloWorld`</ph>, that has a static method (<ph id="ph2">`Shared`</ph> method in Visual Basic) named <ph id="ph3">`HelloFromAD`</ph>.</source>
          <target state="translated">O assembly dinâmico contém um tipo, <ph id="ph1">`HelloWorld`</ph>, que tem um método estático (<ph id="ph2">`Shared`</ph> método no Visual Basic) denominada <ph id="ph3">`HelloFromAD`</ph>.</target>       </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DynamicDirectory">
          <source>Calling this method displays the name of the application domain.</source>
          <target state="translated">Chamar esse método exibe o nome do domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DynamicDirectory">
          <source>The <ph id="ph1">`Example`</ph> class derives from <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, so the example can create an instance of the class in the new application domain and call its <ph id="ph3">`Test`</ph> method.</source>
          <target state="translated">O <ph id="ph1">`Example`</ph> classe derivada de <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, portanto, o exemplo pode criar uma instância da classe no novo domínio de aplicativo e chamada seu <ph id="ph3">`Test`</ph> método.</target>       </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DynamicDirectory">
          <source>The <ph id="ph1">`Test`</ph> method loads the dynamic assembly by its display name and calls the static <ph id="ph2">`HelloFromAD`</ph> method.</source>
          <target state="translated">O <ph id="ph1">`Test`</ph> método carrega o assembly dinâmico por seu nome de exibição e chama estático <ph id="ph2">`HelloFromAD`</ph> método.</target>       </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DynamicDirectory">
          <source>You can show that the dynamic directory is searched after the normal probing paths by writing code for an assembly named <ph id="ph1">`DynamicHelloWorld.dll`</ph> and compiling it in the same directory as this example.</source>
          <target state="translated">Você pode mostrar que o diretório dinâmico é pesquisado após os caminhos de probing normais, escrevendo código para um assembly chamado <ph id="ph1">`DynamicHelloWorld.dll`</ph> e compilá-lo no mesmo diretório que este exemplo.</target>       </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DynamicDirectory">
          <source>The assembly must have a class named <ph id="ph1">`HelloWorld`</ph> with a static method named <ph id="ph2">`HelloFromAD`</ph>.</source>
          <target state="translated">O assembly deve ter uma classe denominada <ph id="ph1">`HelloWorld`</ph> com um método estático denominado <ph id="ph2">`HelloFromAD`</ph>.</target>       </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DynamicDirectory">
          <source>This method does not have to have the same functionality as the one in the example; it can simply display a string to the console.</source>
          <target state="translated">Esse método não precisam ter a mesma funcionalidade que o exemplo; ele simplesmente pode exibir uma cadeia de caracteres para o console.</target>       </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DynamicDirectory">
          <source>The assembly must also have an <ph id="ph1">&lt;xref:System.Reflection.AssemblyVersionAttribute&gt;</ph> attribute that sets its version to 1.0.0.0.</source>
          <target state="translated">O assembly deve ter também um <ph id="ph1">&lt;xref:System.Reflection.AssemblyVersionAttribute&gt;</ph> atributo que define a versão como 1.0.0.0.</target>       </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DynamicDirectory">
          <source>When you run the example, the assembly you compiled in the current directory is found before the dynamic directory is searched.</source>
          <target state="translated">Quando você executa o exemplo, o assembly compilado no diretório atual foi encontrado para que o diretório dinâmico é pesquisado.</target>       </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve" uid="P:System.AppDomain.DynamicDirectory">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DynamicDirectory">
          <source>for access to the path information.</source>
          <target state="translated">para acesso às informações de caminho.</target>       </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.DynamicDirectory">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve" uid="P:System.AppDomain.Evidence">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Security.Policy.Evidence" /&gt;</ph> associated with this application domain.</source>
          <target state="translated">Obtém a <ph id="ph1">&lt;see cref="T:System.Security.Policy.Evidence" /&gt;</ph> associada a esse domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.Evidence">
          <source>The evidence associated with this application domain.</source>
          <target state="translated">A evidência associada a esse domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve" uid="P:System.AppDomain.Evidence">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.Evidence">
          <source>to load an assembly with evidence.</source>
          <target state="translated">para carregar um assembly com evidências.</target>       </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.Evidence">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.Evidence">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.Demand" /&gt;</ph>.</source>
          <target state="translated">Ação de segurança: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.Demand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve" uid="T:System.AppDomain">
          <source>Executes the assembly contained in the specified file.</source>
          <target state="translated">Executa o assembly contido no arquivo especificado.</target>       </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String)">
          <source>The name of the file that contains the assembly to execute.</source>
          <target state="translated">O nome do arquivo que contém o assembly a ser executado.</target>       </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String)">
          <source>Executes the assembly contained in the specified file.</source>
          <target state="translated">Executa o assembly contido no arquivo especificado.</target>       </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String)">
          <source>The value returned by the entry point of the assembly.</source>
          <target state="translated">O valor retornado pelo ponto de entrada do assembly.</target>       </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String)">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">O assembly começa a ser executado no ponto de entrada especificado no cabeçalho do .NET Framework.</target>       </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String)">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">Este método não cria um novo processo ou um domínio de aplicativo e não executa o método de ponto de entrada em um novo thread.</target>       </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String)">
          <source>This method loads assemblies using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph> method.</source>
          <target state="translated">Este método carrega assemblies usando o método <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String)">
          <source>You can also execute assemblies using the <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> method, which loads assemblies using the <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method.</source>
          <target state="translated">Também é possível executar assemblies usando o método <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph>, que carrega assemblies usando o método <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String)">
          <source>To create the <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> to load and execute, use the <ph id="ph2">&lt;xref:System.AppDomain.CreateDomain%2A&gt;</ph> method.</source>
          <target state="translated">Para criar o <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> para carregar e executar, use o <ph id="ph2">&lt;xref:System.AppDomain.CreateDomain%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String)">
          <source>The following sample demonstrates using one of the overloads of <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph> on two different domains.</source>
          <target state="translated">O exemplo a seguir demonstra como usar uma das sobrecargas de <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph> em dois domínios diferentes.</target>       </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String)">
          <source>Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> was compiled with a later version.</source>
          <target state="translated">A versão 2,0 ou posterior do Common Language Runtime está carregada e <ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> foi compilada com uma versão posterior.</target>       </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String)">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String)">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">O assembly especificado não tem ponto de entrada.</target>       </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String)">
          <source>for access to read from a file or directory, and for access to the information in the path itself.</source>
          <target state="translated">para acesso de leitura de um arquivo ou um diretório, e para acesso às informações no próprio caminho.</target>       </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">Enumerações associadas: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String)">
          <source>for reading a URI that does not begin with "file://".</source>
          <target state="translated">para ler um URI que não começa com "file://".</target>       </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String)">
          <source>to execute a console application.</source>
          <target state="translated">para executar um aplicativo de console.</target>       </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
          <source>The name of the file that contains the assembly to execute.</source>
          <target state="translated">O nome do arquivo que contém o assembly a ser executado.</target>       </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
          <source>Evidence for loading the assembly.</source>
          <target state="translated">Evidência para carregar o assembly.</target>       </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
          <source>Executes the assembly contained in the specified file, using the specified evidence.</source>
          <target state="translated">Executa o assembly contido no arquivo especificado usando a evidência especificada.</target>       </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
          <source>The value returned by the entry point of the assembly.</source>
          <target state="translated">O valor retornado pelo ponto de entrada do assembly.</target>       </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">O assembly começa a ser executado no ponto de entrada especificado no cabeçalho do .NET Framework.</target>       </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
          <source>The <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph> method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph> método não cria um novo processo ou o domínio de aplicativo e o método de ponto de entrada não for executado em um novo thread.</target>       </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
          <source>This method loads assemblies using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph> method.</source>
          <target state="translated">Este método carrega assemblies usando o método <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
          <source>You can also execute assemblies using the <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> method, which loads assemblies using the <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method.</source>
          <target state="translated">Também é possível executar assemblies usando o método <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph>, que carrega assemblies usando o método <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
          <source>The following sample demonstrates using one of the overloads of <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph> on two different domains.</source>
          <target state="translated">O exemplo a seguir demonstra como usar uma das sobrecargas de <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph> em dois domínios diferentes.</target>       </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
          <source>Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> was compiled with a later version.</source>
          <target state="translated">A versão 2,0 ou posterior do Common Language Runtime está carregada e <ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> foi compilada com uma versão posterior.</target>       </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">O assembly especificado não tem ponto de entrada.</target>       </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
          <source>to load an assembly with evidence.</source>
          <target state="translated">para carregar um assembly com evidências.</target>       </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
          <source>for access to read from a file or directory, and for access to the information in the path itself.</source>
          <target state="translated">para acesso de leitura de um arquivo ou um diretório, e para acesso às informações no próprio caminho.</target>       </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">Enumerações associadas: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
          <source>for reading a URI that does not begin with "file://".</source>
          <target state="translated">para ler um URI que não começa com "file://".</target>       </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
          <source>to execute a console application.</source>
          <target state="translated">para executar um aplicativo de console.</target>       </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
          <source>The name of the file that contains the assembly to execute.</source>
          <target state="translated">O nome do arquivo que contém o assembly a ser executado.</target>       </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
          <source>The arguments to the entry point of the assembly.</source>
          <target state="translated">Os argumentos para o ponto de entrada do assembly.</target>       </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
          <source>Executes the assembly contained in the specified file, using the specified arguments.</source>
          <target state="translated">Executa o assembly contido no arquivo especificado usando argumentos especificados.</target>       </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
          <source>The value that is returned by the entry point of the assembly.</source>
          <target state="translated">O valor retornado pelo ponto de entrada do assembly.</target>       </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">O assembly começa a ser executado no ponto de entrada especificado no cabeçalho do .NET Framework.</target>       </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">Este método não cria um novo processo ou um domínio de aplicativo e não executa o método de ponto de entrada em um novo thread.</target>       </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
          <source>This method loads assemblies using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph> method.</source>
          <target state="translated">Este método carrega assemblies usando o método <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
          <source>You can also execute assemblies using the <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> method, which loads assemblies using the <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method.</source>
          <target state="translated">Também é possível executar assemblies usando o método <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph>, que carrega assemblies usando o método <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
          <source>The following sample demonstrates using one of the overloads of <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph> on two different domains.</source>
          <target state="translated">O exemplo a seguir demonstra como usar uma das sobrecargas de <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph> em dois domínios diferentes.</target>       </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> was compiled with a later version of the common language runtime than the version that is currently loaded.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> foi compilado com uma versão posterior do Common Language Runtime do que a versão carregada atualmente.</target>       </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">O assembly especificado não tem ponto de entrada.</target>       </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
          <source>for access to read from a file or directory, and for access to the information in the path itself.</source>
          <target state="translated">para acesso de leitura de um arquivo ou um diretório, e para acesso às informações no próprio caminho.</target>       </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">Enumerações associadas: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
          <source>for reading a URI that does not begin with "file://".</source>
          <target state="translated">para ler um URI que não começa com "file://".</target>       </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
          <source>to execute a console application.</source>
          <target state="translated">para executar um aplicativo de console.</target>       </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>The name of the file that contains the assembly to execute.</source>
          <target state="translated">O nome do arquivo que contém o assembly a ser executado.</target>       </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>The supplied evidence for the assembly.</source>
          <target state="translated">A evidência fornecida para o assembly.</target>       </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>The arguments to the entry point of the assembly.</source>
          <target state="translated">Os argumentos para o ponto de entrada do assembly.</target>       </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>Executes the assembly contained in the specified file, using the specified evidence and arguments.</source>
          <target state="translated">Executa o assembly contido no arquivo especificado, usando a evidência e os argumentos especificados.</target>       </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>The value returned by the entry point of the assembly.</source>
          <target state="translated">O valor retornado pelo ponto de entrada do assembly.</target>       </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">O assembly começa a ser executado no ponto de entrada especificado no cabeçalho do .NET Framework.</target>       </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">Este método não cria um novo processo ou um domínio de aplicativo e não executa o método de ponto de entrada em um novo thread.</target>       </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>This method loads assemblies using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph> method.</source>
          <target state="translated">Este método carrega assemblies usando o método <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>You can also execute assemblies using the <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> method, which loads assemblies using the <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method.</source>
          <target state="translated">Também é possível executar assemblies usando o método <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph>, que carrega assemblies usando o método <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>The following sample demonstrates using one of the overloads of <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph> on two different domains.</source>
          <target state="translated">O exemplo a seguir demonstra como usar uma das sobrecargas de <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph> em dois domínios diferentes.</target>       </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> was compiled with a later version.</source>
          <target state="translated">A versão 2,0 ou posterior do Common Language Runtime está carregada e <ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> foi compilada com uma versão posterior.</target>       </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
          <source><ph id="ph1">&lt;paramref name="assemblySecurity" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblySecurity" /&gt;</ph> não é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>When legacy CAS policy is not enabled, <ph id="ph1">&lt;paramref name="assemblySecurity" /&gt;</ph> should be <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Quando a política CAS herdada não está habilitada, <ph id="ph1">&lt;paramref name="assemblySecurity" /&gt;</ph> deve ser <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">O assembly especificado não tem ponto de entrada.</target>       </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>to load an assembly with evidence.</source>
          <target state="translated">para carregar um assembly com evidências.</target>       </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>for access to read from a file or directory, and for access to the information in the path itself.</source>
          <target state="translated">para acesso de leitura de um arquivo ou um diretório, e para acesso às informações no próprio caminho.</target>       </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">Enumerações associadas: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>for reading a URI that does not begin with "file://".</source>
          <target state="translated">para ler um URI que não começa com "file://".</target>       </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>to execute a console application.</source>
          <target state="translated">para executar um aplicativo de console.</target>       </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>The name of the file that contains the assembly to execute.</source>
          <target state="translated">O nome do arquivo que contém o assembly a ser executado.</target>       </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>The arguments to the entry point of the assembly.</source>
          <target state="translated">Os argumentos para o ponto de entrada do assembly.</target>       </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>Represents the value of the computed hash code.</source>
          <target state="translated">Representa o valor do código hash computado.</target>       </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>Represents the hash algorithm used by the assembly manifest.</source>
          <target state="translated">Representa o algoritmo de hash usado pelo manifesto do assembly.</target>       </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>Executes the assembly contained in the specified file, using the specified arguments, hash value, and hash algorithm.</source>
          <target state="translated">Executa o assembly contido no arquivo especificado usando os argumentos, o valor de hash e o algoritmo de hash especificados.</target>       </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>The value that is returned by the entry point of the assembly.</source>
          <target state="translated">O valor retornado pelo ponto de entrada do assembly.</target>       </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">O assembly começa a ser executado no ponto de entrada especificado no cabeçalho do .NET Framework.</target>       </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">Este método não cria um novo processo ou um domínio de aplicativo e não executa o método de ponto de entrada em um novo thread.</target>       </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>This method loads assemblies using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph> method.</source>
          <target state="translated">Este método carrega assemblies usando o método <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>You can also execute assemblies using the <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> method, which loads assemblies using the <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method.</source>
          <target state="translated">Também é possível executar assemblies usando o método <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph>, que carrega assemblies usando o método <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>The following sample demonstrates using one of the overloads of <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph> on two different domains.</source>
          <target state="translated">O exemplo a seguir demonstra como usar uma das sobrecargas de <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph> em dois domínios diferentes.</target>       </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> was compiled with a later version of the common language runtime than the version that is currently loaded.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> foi compilado com uma versão posterior do Common Language Runtime do que a versão carregada atualmente.</target>       </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">O assembly especificado não tem ponto de entrada.</target>       </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>for access to read from a file or directory, and for access to the information in the path itself.</source>
          <target state="translated">para acesso de leitura de um arquivo ou um diretório, e para acesso às informações no próprio caminho.</target>       </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">Enumerações associadas: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>for reading a URI that does not begin with "file://".</source>
          <target state="translated">para ler um URI que não começa com "file://".</target>       </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>to execute a console application.</source>
          <target state="translated">para executar um aplicativo de console.</target>       </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>The name of the file that contains the assembly to execute.</source>
          <target state="translated">O nome do arquivo que contém o assembly a ser executado.</target>       </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>The supplied evidence for the assembly.</source>
          <target state="translated">A evidência fornecida para o assembly.</target>       </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>The arguments to the entry point of the assembly.</source>
          <target state="translated">Os argumentos para o ponto de entrada do assembly.</target>       </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>Represents the value of the computed hash code.</source>
          <target state="translated">Representa o valor do código hash computado.</target>       </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>Represents the hash algorithm used by the assembly manifest.</source>
          <target state="translated">Representa o algoritmo de hash usado pelo manifesto do assembly.</target>       </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>Executes the assembly contained in the specified file, using the specified evidence, arguments, hash value, and hash algorithm.</source>
          <target state="translated">Executa o assembly contido no arquivo especificado usando a evidência, os argumentos, o valor de hash e o algoritmo de hash especificados.</target>       </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>The value returned by the entry point of the assembly.</source>
          <target state="translated">O valor retornado pelo ponto de entrada do assembly.</target>       </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">O assembly começa a ser executado no ponto de entrada especificado no cabeçalho do .NET Framework.</target>       </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">Este método não cria um novo processo ou um domínio de aplicativo e não executa o método de ponto de entrada em um novo thread.</target>       </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>This method loads assemblies using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph> method.</source>
          <target state="translated">Este método carrega assemblies usando o método <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>You can also execute assemblies using the <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> method, which loads assemblies using the <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method.</source>
          <target state="translated">Também é possível executar assemblies usando o método <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph>, que carrega assemblies usando o método <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>Thefollowing sample demonstrates using one of the overloads of <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph> on two different domains.</source>
          <target state="translated">Exemplo de asseguintes demonstra como usar uma das sobrecargas de <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph> em dois domínios diferentes.</target>       </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> was compiled with a later version.</source>
          <target state="translated">A versão 2,0 ou posterior do Common Language Runtime está carregada e <ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> foi compilada com uma versão posterior.</target>       </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source><ph id="ph1">&lt;paramref name="assemblySecurity" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblySecurity" /&gt;</ph> não é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>When legacy CAS policy is not enabled, <ph id="ph1">&lt;paramref name="assemblySecurity" /&gt;</ph> should be <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Quando a política CAS herdada não está habilitada, <ph id="ph1">&lt;paramref name="assemblySecurity" /&gt;</ph> deve ser <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">O assembly especificado não tem ponto de entrada.</target>       </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>to load an assembly with evidence.</source>
          <target state="translated">para carregar um assembly com evidências.</target>       </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>for access to read from a file or directory, and for access to the information in the path itself.</source>
          <target state="translated">para acesso de leitura de um arquivo ou um diretório, e para acesso às informações no próprio caminho.</target>       </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">Enumerações associadas: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>for reading a URI that does not begin with "file://".</source>
          <target state="translated">para ler um URI que não começa com "file://".</target>       </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>to execute a console application.</source>
          <target state="translated">para executar um aplicativo de console.</target>       </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve" uid="T:System.AppDomain">
          <source>Executes an assembly.</source>
          <target state="translated">Executa um assembly.</target>       </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
          <source>The display name of the assembly.</source>
          <target state="translated">O nome para exibição do assembly.</target>       </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
          <source>See <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
          <source>Executes an assembly given its display name.</source>
          <target state="translated">Executa um assembly dado seu nome de exibição.</target>       </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
          <source>The value returned by the entry point of the assembly.</source>
          <target state="translated">O valor retornado pelo ponto de entrada do assembly.</target>       </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> method provides similar functionality to the <ph id="ph2">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph> method, but specifies the assembly by display name or <ph id="ph3">&lt;xref:System.Reflection.AssemblyName&gt;</ph> rather than by file location.</source>
          <target state="translated">O método <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> fornece funcionalidade semelhante ao método <ph id="ph2">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph>, mas especifica o assembly por nome para exibição ou <ph id="ph3">&lt;xref:System.Reflection.AssemblyName&gt;</ph> em vez de pelo local do arquivo.</target>       </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
          <source>Therefore, <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> loads assemblies with the <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method rather than with the <ph id="ph3">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph> method.</source>
          <target state="translated">Por isso, <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> carrega assemblies com o método <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> em vez do método <ph id="ph3">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">O assembly começa a ser executado no ponto de entrada especificado no cabeçalho do .NET Framework.</target>       </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">Este método não cria um novo processo ou um domínio de aplicativo e não executa o método de ponto de entrada em um novo thread.</target>       </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
          <source>To create the <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> to load and execute, use the <ph id="ph2">&lt;xref:System.AppDomain.CreateDomain%2A&gt;</ph> method.</source>
          <target state="translated">Para criar o <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> para carregar e executar, use o <ph id="ph2">&lt;xref:System.AppDomain.CreateDomain%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
          <source>The assembly specified by <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is not found.</source>
          <target state="translated">O assembly especificado por <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
          <source>The assembly specified by <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated">O assembly especificado por <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
          <source>Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was compiled with a later version.</source>
          <target state="translated">A versão 2,0 ou posterior do Common Language Runtime está carregada e <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> foi compilada com uma versão posterior.</target>       </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
          <source>The assembly specified by <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was found, but could not be loaded.</source>
          <target state="translated">O assembly especificado por <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> foi encontrado, mas não foi possível carregá-lo.</target>       </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">O assembly especificado não tem ponto de entrada.</target>       </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
          <source>for access to read from a file or directory, for access to the information in the path itself, and for redirecting a display name to a path.</source>
          <target state="translated">para acesso de leitura de um arquivo ou um diretório, para acesso às informações no próprio caminho e para redirecionar um nome para exibição para um caminho.</target>       </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">Enumerações associadas: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
          <source>for access to a Web site, when a display name is redirected to a URL.</source>
          <target state="translated">para acesso a um site, quando um nome para exibição é redirecionado para uma URL.</target>       </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
          <source>to execute a console application.</source>
          <target state="translated">para executar um aplicativo de console.</target>       </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> object representing the name of the assembly.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> que representa o nome do assembly.</target>       </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])">
          <source>Command-line arguments to pass when starting the process.</source>
          <target state="translated">Argumentos de linha de comando a serem passados durante o início do processo.</target>       </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])">
          <source>Executes the assembly given an <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph>, using the specified arguments.</source>
          <target state="translated">Executa o assembly dado um <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> usando os argumentos especificados.</target>       </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])">
          <source>The value that is returned by the entry point of the assembly.</source>
          <target state="translated">O valor retornado pelo ponto de entrada do assembly.</target>       </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])">
          <source>The <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> method provides similar functionality to the <ph id="ph2">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph> method, but specifies the assembly by display name or <ph id="ph3">&lt;xref:System.Reflection.AssemblyName&gt;</ph> rather than by file location.</source>
          <target state="translated">O método <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> fornece funcionalidade semelhante ao método <ph id="ph2">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph>, mas especifica o assembly por nome para exibição ou <ph id="ph3">&lt;xref:System.Reflection.AssemblyName&gt;</ph> em vez de pelo local do arquivo.</target>       </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])">
          <source>Therefore, <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> loads assemblies with the <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method rather than with the <ph id="ph3">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph> method.</source>
          <target state="translated">Por isso, <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> carrega assemblies com o método <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> em vez do método <ph id="ph3">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">O assembly começa a ser executado no ponto de entrada especificado no cabeçalho do .NET Framework.</target>       </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">Este método não cria um novo processo ou um domínio de aplicativo e não executa o método de ponto de entrada em um novo thread.</target>       </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])">
          <source>The assembly specified by <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is not found.</source>
          <target state="translated">O assembly especificado por <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])">
          <source>The assembly specified by <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was found, but could not be loaded.</source>
          <target state="translated">O assembly especificado por <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> foi encontrado, mas não foi possível carregá-lo.</target>       </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])">
          <source>The assembly specified by <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated">O assembly especificado por <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was compiled with a later version of the common language runtime than the version that is currently loaded.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> foi compilado com uma versão posterior do Common Language Runtime do que a versão carregada atualmente.</target>       </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">O assembly especificado não tem ponto de entrada.</target>       </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])">
          <source>for access to read from a file or directory, for access to the information in the path itself, and for redirecting a display name to a path.</source>
          <target state="translated">para acesso de leitura de um arquivo ou um diretório, para acesso às informações no próprio caminho e para redirecionar um nome para exibição para um caminho.</target>       </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">Enumerações associadas: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])">
          <source>for access to a Web site, when a display name is redirected to a URL.</source>
          <target state="translated">para acesso a um site, quando um nome para exibição é redirecionado para uma URL.</target>       </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])">
          <source>to execute a console application.</source>
          <target state="translated">para executar um aplicativo de console.</target>       </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)">
          <source>The display name of the assembly.</source>
          <target state="translated">O nome para exibição do assembly.</target>       </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)">
          <source>See <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)">
          <source>Evidence for loading the assembly.</source>
          <target state="translated">Evidência para carregar o assembly.</target>       </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)">
          <source>Executes an assembly given its display name, using the specified evidence.</source>
          <target state="translated">Executa um assembly dado seu nome de exibição usando a evidência especificada.</target>       </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)">
          <source>The value returned by the entry point of the assembly.</source>
          <target state="translated">O valor retornado pelo ponto de entrada do assembly.</target>       </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)">
          <source>The <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> method provides similar functionality to the <ph id="ph2">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph> method, but specifies the assembly by display name or <ph id="ph3">&lt;xref:System.Reflection.AssemblyName&gt;</ph> rather than by file location.</source>
          <target state="translated">O método <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> fornece funcionalidade semelhante ao método <ph id="ph2">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph>, mas especifica o assembly por nome para exibição ou <ph id="ph3">&lt;xref:System.Reflection.AssemblyName&gt;</ph> em vez de pelo local do arquivo.</target>       </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)">
          <source>Therefore, <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> loads assemblies with the <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method rather than with the <ph id="ph3">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph> method.</source>
          <target state="translated">Por isso, <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> carrega assemblies com o método <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> em vez do método <ph id="ph3">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">O assembly começa a ser executado no ponto de entrada especificado no cabeçalho do .NET Framework.</target>       </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)">
          <source>The <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> método não cria um novo processo ou o domínio de aplicativo e o método de ponto de entrada não for executado em um novo thread.</target>       </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)">
          <source>When you use the <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> method with an <ph id="ph2">&lt;xref:System.Security.Policy.Evidence&gt;</ph> parameter, pieces of evidence are merged.</source>
          <target state="translated">Quando você usa o <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> método com um <ph id="ph2">&lt;xref:System.Security.Policy.Evidence&gt;</ph> parâmetros, partes de evidência são mesclados.</target>       </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)">
          <source>Pieces of evidence supplied as an argument to the <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> method supersede pieces of evidence supplied by the loader.</source>
          <target state="translated">Partes de evidência fornecida como um argumento para o <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> método substituir partes de evidência fornecida pelo carregador.</target>       </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)">
          <source>The assembly specified by <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is not found.</source>
          <target state="translated">O assembly especificado por <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)">
          <source>The assembly specified by <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was found, but could not be loaded.</source>
          <target state="translated">O assembly especificado por <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> foi encontrado, mas não foi possível carregá-lo.</target>       </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)">
          <source>The assembly specified by <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated">O assembly especificado por <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)">
          <source>Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was compiled with a later version.</source>
          <target state="translated">A versão 2,0 ou posterior do Common Language Runtime está carregada e <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> foi compilada com uma versão posterior.</target>       </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">O assembly especificado não tem ponto de entrada.</target>       </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)">
          <source>for access to read from a file or directory, for access to the information in the path itself, and for redirecting a display name to a path.</source>
          <target state="translated">para acesso de leitura de um arquivo ou um diretório, para acesso às informações no próprio caminho e para redirecionar um nome para exibição para um caminho.</target>       </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">Enumerações associadas: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)">
          <source>to load an assembly with evidence.</source>
          <target state="translated">para carregar um assembly com evidências.</target>       </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)">
          <source>for access to a Web site, when a display name is redirected to a URL.</source>
          <target state="translated">para acesso a um site, quando um nome para exibição é redirecionado para uma URL.</target>       </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)">
          <source>to execute a console application.</source>
          <target state="translated">para executar um aplicativo de console.</target>       </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
          <source>The display name of the assembly.</source>
          <target state="translated">O nome para exibição do assembly.</target>       </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
          <source>See <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
          <source>Command-line arguments to pass when starting the process.</source>
          <target state="translated">Argumentos de linha de comando a serem passados durante o início do processo.</target>       </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
          <source>Executes the assembly given its display name, using the specified arguments.</source>
          <target state="translated">Executa o assembly dado seu nome de exibição usando os argumentos especificados.</target>       </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
          <source>The value that is returned by the entry point of the assembly.</source>
          <target state="translated">O valor retornado pelo ponto de entrada do assembly.</target>       </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
          <source>The <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> method provides similar functionality to the <ph id="ph2">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph> method, but specifies the assembly by display name or <ph id="ph3">&lt;xref:System.Reflection.AssemblyName&gt;</ph> rather than by file location.</source>
          <target state="translated">O método <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> fornece funcionalidade semelhante ao método <ph id="ph2">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph>, mas especifica o assembly por nome para exibição ou <ph id="ph3">&lt;xref:System.Reflection.AssemblyName&gt;</ph> em vez de pelo local do arquivo.</target>       </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
          <source>Therefore, <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> loads assemblies with the <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method rather than with the <ph id="ph3">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph> method.</source>
          <target state="translated">Por isso, <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> carrega assemblies com o método <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> em vez do método <ph id="ph3">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">O assembly começa a ser executado no ponto de entrada especificado no cabeçalho do .NET Framework.</target>       </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">Este método não cria um novo processo ou um domínio de aplicativo e não executa o método de ponto de entrada em um novo thread.</target>       </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
          <source>The assembly specified by <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is not found.</source>
          <target state="translated">O assembly especificado por <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
          <source>The assembly specified by <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was found, but could not be loaded.</source>
          <target state="translated">O assembly especificado por <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> foi encontrado, mas não foi possível carregá-lo.</target>       </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
          <source>The assembly specified by <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated">O assembly especificado por <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was compiled with a later version of the common language runtime than the version that is currently loaded.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> foi compilado com uma versão posterior do Common Language Runtime do que a versão carregada atualmente.</target>       </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">O assembly especificado não tem ponto de entrada.</target>       </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
          <source>for access to read from a file or directory, for access to the information in the path itself, and for redirecting a display name to a path.</source>
          <target state="translated">para acesso de leitura de um arquivo ou um diretório, para acesso às informações no próprio caminho e para redirecionar um nome para exibição para um caminho.</target>       </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">Enumerações associadas: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
          <source>for access to a Web site, when a display name is redirected to a URL.</source>
          <target state="translated">para acesso a um site, quando um nome para exibição é redirecionado para uma URL.</target>       </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
          <source>to execute a console application.</source>
          <target state="translated">para executar um aplicativo de console.</target>       </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> object representing the name of the assembly.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> que representa o nome do assembly.</target>       </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])">
          <source>Evidence for loading the assembly.</source>
          <target state="translated">Evidência para carregar o assembly.</target>       </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])">
          <source>Command-line arguments to pass when starting the process.</source>
          <target state="translated">Argumentos de linha de comando a serem passados durante o início do processo.</target>       </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])">
          <source>Executes the assembly given an <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph>, using the specified evidence and arguments.</source>
          <target state="translated">Executa o assembly dado um <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> usando a evidência e os argumentos especificados.</target>       </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])">
          <source>The value returned by the entry point of the assembly.</source>
          <target state="translated">O valor retornado pelo ponto de entrada do assembly.</target>       </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])">
          <source>The <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> method provides similar functionality to the <ph id="ph2">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph> method, but specifies the assembly by display name or <ph id="ph3">&lt;xref:System.Reflection.AssemblyName&gt;</ph> rather than by file location.</source>
          <target state="translated">O método <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> fornece funcionalidade semelhante ao método <ph id="ph2">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph>, mas especifica o assembly por nome para exibição ou <ph id="ph3">&lt;xref:System.Reflection.AssemblyName&gt;</ph> em vez de pelo local do arquivo.</target>       </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])">
          <source>Therefore, <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> loads assemblies with the <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method rather than with the <ph id="ph3">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph> method.</source>
          <target state="translated">Por isso, <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> carrega assemblies com o método <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> em vez do método <ph id="ph3">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">O assembly começa a ser executado no ponto de entrada especificado no cabeçalho do .NET Framework.</target>       </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">Este método não cria um novo processo ou um domínio de aplicativo e não executa o método de ponto de entrada em um novo thread.</target>       </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])">
          <source>When you use the <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> method with an <ph id="ph2">&lt;xref:System.Security.Policy.Evidence&gt;</ph> parameter, pieces of evidence are merged.</source>
          <target state="translated">Quando você usa o <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> método com um <ph id="ph2">&lt;xref:System.Security.Policy.Evidence&gt;</ph> parâmetros, partes de evidência são mesclados.</target>       </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])">
          <source>Pieces of evidence supplied as an argument to the <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> method supersede pieces of evidence supplied by the loader.</source>
          <target state="translated">Partes de evidência fornecida como um argumento para o <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> método substituir partes de evidência fornecida pelo carregador.</target>       </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])">
          <source>The assembly specified by <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is not found.</source>
          <target state="translated">O assembly especificado por <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])">
          <source>The assembly specified by <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was found, but could not be loaded.</source>
          <target state="translated">O assembly especificado por <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> foi encontrado, mas não foi possível carregá-lo.</target>       </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])">
          <source>The assembly specified by <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated">O assembly especificado por <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])">
          <source>Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was compiled with a later version.</source>
          <target state="translated">A versão 2,0 ou posterior do Common Language Runtime está carregada e <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> foi compilada com uma versão posterior.</target>       </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])">
          <source><ph id="ph1">&lt;paramref name="assemblySecurity" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblySecurity" /&gt;</ph> não é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])">
          <source>When legacy CAS policy is not enabled, <ph id="ph1">&lt;paramref name="assemblySecurity" /&gt;</ph> should be <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Quando a política CAS herdada não está habilitada, <ph id="ph1">&lt;paramref name="assemblySecurity" /&gt;</ph> deve ser <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">O assembly especificado não tem ponto de entrada.</target>       </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])">
          <source>for access to read from a file or directory, for access to the information in the path itself, and for redirecting a display name to a path.</source>
          <target state="translated">para acesso de leitura de um arquivo ou um diretório, para acesso às informações no próprio caminho e para redirecionar um nome para exibição para um caminho.</target>       </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">Enumerações associadas: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])">
          <source>to load an assembly with evidence.</source>
          <target state="translated">para carregar um assembly com evidências.</target>       </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])">
          <source>for access to a Web site, when a display name is redirected to a URL.</source>
          <target state="translated">para acesso a um site, quando um nome para exibição é redirecionado para uma URL.</target>       </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])">
          <source>to execute a console application.</source>
          <target state="translated">para executar um aplicativo de console.</target>       </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>The display name of the assembly.</source>
          <target state="translated">O nome para exibição do assembly.</target>       </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>See <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>Evidence for loading the assembly.</source>
          <target state="translated">Evidência para carregar o assembly.</target>       </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>Command-line arguments to pass when starting the process.</source>
          <target state="translated">Argumentos de linha de comando a serem passados durante o início do processo.</target>       </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>Executes the assembly given its display name, using the specified evidence and arguments.</source>
          <target state="translated">Executa o assembly dado seu nome de exibição usando a evidência e os argumentos especificados.</target>       </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>The value returned by the entry point of the assembly.</source>
          <target state="translated">O valor retornado pelo ponto de entrada do assembly.</target>       </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>The <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> method provides similar functionality to the <ph id="ph2">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph> method, but specifies the assembly by display name or <ph id="ph3">&lt;xref:System.Reflection.AssemblyName&gt;</ph> rather than by file location.</source>
          <target state="translated">O método <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> fornece funcionalidade semelhante ao método <ph id="ph2">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph>, mas especifica o assembly por nome para exibição ou <ph id="ph3">&lt;xref:System.Reflection.AssemblyName&gt;</ph> em vez de pelo local do arquivo.</target>       </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>Therefore, <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> loads assemblies with the <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method rather than with the <ph id="ph3">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph> method.</source>
          <target state="translated">Por isso, <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> carrega assemblies com o método <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> em vez do método <ph id="ph3">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">O assembly começa a ser executado no ponto de entrada especificado no cabeçalho do .NET Framework.</target>       </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">Este método não cria um novo processo ou um domínio de aplicativo e não executa o método de ponto de entrada em um novo thread.</target>       </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>When you use the <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> method with an <ph id="ph2">&lt;xref:System.Security.Policy.Evidence&gt;</ph> parameter, pieces of evidence are merged.</source>
          <target state="translated">Quando você usa o <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> método com um <ph id="ph2">&lt;xref:System.Security.Policy.Evidence&gt;</ph> parâmetros, partes de evidência são mesclados.</target>       </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>Pieces of evidence supplied as an argument to the <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> method supersede pieces of evidence supplied by the loader.</source>
          <target state="translated">Partes de evidência fornecida como um argumento para o <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</ph> método substituir partes de evidência fornecida pelo carregador.</target>       </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>The assembly specified by <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is not found.</source>
          <target state="translated">O assembly especificado por <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>The assembly specified by <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was found, but could not be loaded.</source>
          <target state="translated">O assembly especificado por <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> foi encontrado, mas não foi possível carregá-lo.</target>       </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>The assembly specified by <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated">O assembly especificado por <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> was compiled with a later version.</source>
          <target state="translated">A versão 2,0 ou posterior do Common Language Runtime está carregada e <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> foi compilada com uma versão posterior.</target>       </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source><ph id="ph1">&lt;paramref name="assemblySecurity" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblySecurity" /&gt;</ph> não é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>When legacy CAS policy is not enabled, <ph id="ph1">&lt;paramref name="assemblySecurity" /&gt;</ph> should be <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Quando a política CAS herdada não está habilitada, <ph id="ph1">&lt;paramref name="assemblySecurity" /&gt;</ph> deve ser <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">O assembly especificado não tem ponto de entrada.</target>       </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>for access to read from a file or directory, for access to the information in the path itself, and for redirecting a display name to a path.</source>
          <target state="translated">para acesso de leitura de um arquivo ou um diretório, para acesso às informações no próprio caminho e para redirecionar um nome para exibição para um caminho.</target>       </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">Enumerações associadas: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>to load an assembly with evidence.</source>
          <target state="translated">para carregar um assembly com evidências.</target>       </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>for access to a Web site, when a display name is redirected to a URL.</source>
          <target state="translated">para acesso a um site, quando um nome para exibição é redirecionado para uma URL.</target>       </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>to execute a console application.</source>
          <target state="translated">para executar um aplicativo de console.</target>       </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve" uid="E:System.AppDomain.FirstChanceException">
          <source>Occurs when an exception is thrown in managed code, before the runtime searches the call stack for an exception handler in the application domain.</source>
          <target state="translated">Ocorre quando uma exceção é lançada no código gerenciado, antes que o tempo de execução procure na pilha de chamadas um manipulador de exceção no domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source>This event is only a notification.</source>
          <target state="translated">Esse evento é apenas uma notificação.</target>       </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source>Handling this event does not handle the exception or affect subsequent exception handling in any way.</source>
          <target state="translated">O evento não lidar com a exceção ou afetar de qualquer forma de tratamento de exceção subsequente.</target>       </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source>After the event has been raised and event handlers have been invoked, the common language runtime (CLR) begins to search for a handler for the exception.</source>
          <target state="translated">Depois que o evento foi gerado e manipuladores de eventos tiveram sido chamados, o common language runtime (CLR) começa a procurar por um manipulador para a exceção.</target>       </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source><ph id="ph1">&lt;xref:System.AppDomain.FirstChanceException&gt;</ph> provides the application domain with a first chance to examine any managed exception.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomain.FirstChanceException&gt;</ph> fornece o domínio de aplicativo com a primeira oportunidade de examinar qualquer exceção gerenciada.</target>       </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source>The event can be handled per application domain.</source>
          <target state="translated">O evento pode ser tratado por domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source>If a thread passes through multiple application domains while executing a call, the event is raised in each application domain that has registered an event handler, before the CLR begins searching for a matching exception handler in that application domain.</source>
          <target state="translated">Se um thread passa por vários domínios de aplicativo durante a execução de uma chamada, o evento é gerado em cada domínio de aplicativo que registrou um manipulador de eventos, antes do CLR começa a procurar por um manipulador de exceção correspondente no domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source>After the event has been handled, a search is made for a matching exception handler in that application domain.</source>
          <target state="translated">Depois que o evento foi tratado, uma pesquisa é feita para um manipulador de exceção correspondente no domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source>If none is found, the event is raised in the next application domain.</source>
          <target state="translated">Se nenhum for encontrado, o evento é gerado no próximo domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source>You must handle all exceptions that occur in the event handler for the <ph id="ph1">&lt;xref:System.AppDomain.FirstChanceException&gt;</ph> event.</source>
          <target state="translated">Você deve tratar todas as exceções que ocorrem no manipulador para o <ph id="ph1">&lt;xref:System.AppDomain.FirstChanceException&gt;</ph> evento.</target>       </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source>Otherwise, <ph id="ph1">&lt;xref:System.AppDomain.FirstChanceException&gt;</ph> is raised recursively.</source>
          <target state="translated">Caso contrário, <ph id="ph1">&lt;xref:System.AppDomain.FirstChanceException&gt;</ph> é gerado recursivamente.</target>       </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source>This could result in a stack overflow and termination of the application.</source>
          <target state="translated">Isso pode resultar em um estouro de pilha e o encerramento do aplicativo.</target>       </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source>We recommend that you implement event handlers for this event as constrained execution regions (CERs), to keep infrastructure-related exceptions such as out-of-memory or stack overflow from affecting the virtual machine while the exception notification is being processed.</source>
          <target state="translated">É recomendável que você implemente os manipuladores de eventos para esse evento como regiões de execução restrita (CERs), para evitar exceções relacionadas à infraestrutura, como o estouro de pilha ou falta de memória que afetam a máquina virtual enquanto a notificação de exceção está sendo processada.</target>       </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source>This event is not raised for exceptions that indicate corruption of process state, such as access violations, unless the event handler is security-critical and has the <ph id="ph1">&lt;xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute&gt;</ph> attribute.</source>
          <target state="translated">Esse evento não é gerado para exceções que indicam corrupção do estado do processo, como violações de acesso, a menos que o manipulador de eventos é crítico de segurança e tem o <ph id="ph1">&lt;xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute&gt;</ph> atributo.</target>       </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source>The common language runtime suspends thread aborts while this notification event is being handled.</source>
          <target state="translated">O common language runtime suspende anulações de thread enquanto este evento de notificação está sendo tratado.</target>       </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source>The following example creates a series of application domains named <ph id="ph1">`AD0`</ph> through <ph id="ph2">`AD3`</ph>, with a <ph id="ph3">`Worker`</ph> object in each application domain.</source>
          <target state="translated">O exemplo a seguir cria uma série de domínios de aplicativo chamada <ph id="ph1">`AD0`</ph> por meio de <ph id="ph2">`AD3`</ph>, com um <ph id="ph3">`Worker`</ph> objeto em cada domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source>Each <ph id="ph1">`Worker`</ph> object has a reference to the <ph id="ph2">`Worker`</ph> object in the next application domain, except for the <ph id="ph3">`Worker`</ph> in the last application domain.</source>
          <target state="translated">Cada <ph id="ph1">`Worker`</ph> objeto tem uma referência para o <ph id="ph2">`Worker`</ph> do objeto no próximo domínio de aplicativo, exceto para o <ph id="ph3">`Worker`</ph> no último domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source>The <ph id="ph1">&lt;xref:System.AppDomain.FirstChanceException&gt;</ph> event is handled in all application domains except <ph id="ph2">`AD1`</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.AppDomain.FirstChanceException&gt;</ph> evento é tratado em todos os domínios de aplicativo, exceto <ph id="ph2">`AD1`</ph>.</target>       </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source>In addition to this example, which demonstrates first-chance exception notifications in multiple application domains, you can find simple use cases in <bpt id="p1">[</bpt>How to: Receive First-Chance Exception Notifications<ept id="p1">](~/docs/framework/app-domains/how-to-receive-first-chance-exception-notifications.md)</ept>.</source>
          <target state="translated">Além de exemplo, que demonstra as notificações de exceção de primeira chance em vários domínios de aplicativo, você pode encontrar os casos de uso simples no <bpt id="p1">[</bpt>como: receber notificações de exceção de primeira Chance<ept id="p1">](~/docs/framework/app-domains/how-to-receive-first-chance-exception-notifications.md)</ept>.</target>       </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source>When the application domains have been created, the default application domain calls the <ph id="ph1">`TestException`</ph> method for the first application domain.</source>
          <target state="translated">Quando os domínios de aplicativo tiveram sido criados, o domínio de aplicativo padrão chama o <ph id="ph1">`TestException`</ph> método para o primeiro domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source>Each <ph id="ph1">`Worker`</ph> object calls the <ph id="ph2">`TestException`</ph> method for the next application domain, until the last <ph id="ph3">`Worker`</ph> throws an exception that is either handled or unhandled.</source>
          <target state="translated">Cada <ph id="ph1">`Worker`</ph> objeto chama o <ph id="ph2">`TestException`</ph> método para o próximo domínio de aplicativo, até o último <ph id="ph3">`Worker`</ph> lança uma exceção que é tratada ou não tratada.</target>       </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source>Thus, the current thread passes through all the application domains, and <ph id="ph1">`TestException`</ph> is added to the stack in each application domain.</source>
          <target state="translated">Portanto, o thread atual passa por todos os domínios de aplicativo, e <ph id="ph1">`TestException`</ph> é adicionada à pilha em cada domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source>When the last <ph id="ph1">`Worker`</ph> object handles the exception, the <ph id="ph2">&lt;xref:System.AppDomain.FirstChanceException&gt;</ph> event is raised only in the last application domain.</source>
          <target state="translated">Quando a última <ph id="ph1">`Worker`</ph> objeto lida com a exceção, o <ph id="ph2">&lt;xref:System.AppDomain.FirstChanceException&gt;</ph> é gerado apenas no último domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source>The other application domains never get a chance to handle the exception, so the event is not raised.</source>
          <target state="translated">Os outros domínios de aplicativo nunca obtém a oportunidade de lidar com a exceção, para que o evento não será gerado.</target>       </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source>When the last <ph id="ph1">`Worker`</ph> object does not handle the exception, the <ph id="ph2">&lt;xref:System.AppDomain.FirstChanceException&gt;</ph> event is raised in each application domain that has an event handler.</source>
          <target state="translated">Quando a última <ph id="ph1">`Worker`</ph> objeto não lida com a exceção, o <ph id="ph2">&lt;xref:System.AppDomain.FirstChanceException&gt;</ph> é gerado em cada domínio de aplicativo que tem um manipulador de eventos.</target>       </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source>After each event handler has finished, the stack continues to unwind until the exception is caught by the default application domain.</source>
          <target state="translated">Após cada manipulador de eventos, a pilha continua desenrolar até que a exceção é capturada por domínio de aplicativo padrão.</target>       </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source>To see how the stack display grows as the event is raised closer and closer to the default application domain, change <ph id="ph1">`e.Exception.Message`</ph> to <ph id="ph2">`e.Exception`</ph> in the <ph id="ph3">`FirstChanceHandler`</ph> event handlers.</source>
          <target state="translated">Para ver como a exibição de pilha aumenta à medida que o evento é gerado mais próximo e mais próximo domínio de aplicativo padrão, altere <ph id="ph1">`e.Exception.Message`</ph> para <ph id="ph2">`e.Exception`</ph> no <ph id="ph3">`FirstChanceHandler`</ph> manipuladores de eventos.</target>       </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source>Notice that when <ph id="ph1">`TestException`</ph> is called across application domain boundaries, it appears twice: once for the proxy and once for the stub.</source>
          <target state="translated">Observe que, quando <ph id="ph1">`TestException`</ph> é chamado nos limites do domínio de aplicativo, ele aparece duas vezes: uma vez para o proxy e outra para o stub.</target>       </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">Requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.FirstChanceException">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve" uid="P:System.AppDomain.FriendlyName">
          <source>Gets the friendly name of this application domain.</source>
          <target state="translated">Obtém o nome amigável desse domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.FriendlyName">
          <source>The friendly name of this application domain.</source>
          <target state="translated">O nome amigável desse domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.FriendlyName">
          <source>The friendly name of the default application domain is the file name of the process executable.</source>
          <target state="translated">O nome amigável do domínio de aplicativo padrão é o nome do arquivo do processo do executável.</target>       </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.FriendlyName">
          <source>For example, if the executable used to start the process is <ph id="ph1">`"c:\MyAppDirectory\MyAssembly.exe"`</ph>, the friendly name of the default application domain is <ph id="ph2">`"MyAssembly.exe"`</ph>.</source>
          <target state="translated">Por exemplo, se o executável usado para iniciar o processo é <ph id="ph1">`"c:\MyAppDirectory\MyAssembly.exe"`</ph>, o nome amigável do domínio de aplicativo padrão é <ph id="ph2">`"MyAssembly.exe"`</ph>.</target>       </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.FriendlyName">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.AppDomain.FriendlyName%2A&gt;</ph> property to get the friendly name of the current application domain.</source>
          <target state="translated">O seguinte exemplo de código usa o <ph id="ph1">&lt;xref:System.AppDomain.FriendlyName%2A&gt;</ph> propriedade para obter o nome amigável do domínio de aplicativo atual.</target>       </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.FriendlyName">
          <source>For the default application domain, the friendly name is the name of the application's executable file.</source>
          <target state="translated">Para o domínio de aplicativo padrão, o nome amigável é o nome do arquivo executável do aplicativo.</target>       </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.FriendlyName">
          <source>The code example also displays additional information about the application domain.</source>
          <target state="translated">O exemplo de código também exibe informações adicionais sobre o domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve" uid="P:System.AppDomain.FriendlyName">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve" uid="M:System.AppDomain.GetAssemblies">
          <source>Gets the assemblies that have been loaded into the execution context of this application domain.</source>
          <target state="translated">Obtém os assemblies que foram carregados no contexto de execução desse domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve" uid="M:System.AppDomain.GetAssemblies">
          <source>An array of assemblies in this application domain.</source>
          <target state="translated">Uma matriz de assemblies nesse domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetAssemblies">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.AppDomain.GetAssemblies%2A&gt;</ph> method to get a list of all assemblies that have been loaded into the application domain.</source>
          <target state="translated">O seguinte exemplo de código usa o <ph id="ph1">&lt;xref:System.AppDomain.GetAssemblies%2A&gt;</ph> método para obter uma lista de todos os assemblies que tiverem sido carregados no domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetAssemblies">
          <source>The assemblies are then displayed to the console.</source>
          <target state="translated">Os assemblies são exibidos no console.</target>       </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetAssemblies">
          <source>To run this code example, you need to create an assembly named <ph id="ph1">`CustomLibrary.dll`</ph>, or change the assembly name that is passed to the <ph id="ph2">&lt;xref:System.AppDomain.GetAssemblies%2A&gt;</ph> method.</source>
          <target state="translated">Para executar este exemplo de código, você precisa criar um assembly nomeado <ph id="ph1">`CustomLibrary.dll`</ph>, ou alterar o nome do assembly que é passado para o <ph id="ph2">&lt;xref:System.AppDomain.GetAssemblies%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve" uid="M:System.AppDomain.GetAssemblies">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve" uid="M:System.AppDomain.GetCurrentThreadId">
          <source>Gets the current thread identifier.</source>
          <target state="translated">Obtém o identificador atual de thread.</target>       </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve" uid="M:System.AppDomain.GetCurrentThreadId">
          <source>A 32-bit signed integer that is the identifier of the current thread.</source>
          <target state="translated">Um inteiro com sinal de 32 bits que é o identificador do thread atual.</target>       </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetCurrentThreadId">
          <source>Use the <ph id="ph1">&lt;xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType&gt;</ph> property, which is stable even when the .NET Framework is hosted by an environment that supports fibers (that is, lightweight threads).</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType&gt;</ph> propriedade, que é estável, mesmo quando o .NET Framework é hospedado por um ambiente que oferece suporte a fibras (ou seja, leve threads).</target>       </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetCurrentThreadId">
          <source>to call this method.</source>
          <target state="translated">para chamar esse método.</target>       </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetCurrentThreadId">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetCurrentThreadId">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.Demand" /&gt;</ph>.</source>
          <target state="translated">Ação de segurança: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.Demand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve" uid="M:System.AppDomain.GetData(System.String)">
          <source>The name of a predefined application domain property, or the name of an application domain property you have defined.</source>
          <target state="translated">O nome de uma propriedade de domínio de aplicativo predefinida ou o nome de uma propriedade de domínio de aplicativo que você definiu.</target>       </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve" uid="M:System.AppDomain.GetData(System.String)">
          <source>Gets the value stored in the current application domain for the specified name.</source>
          <target state="translated">Obtém o valor armazenado no domínio atual do aplicativo para o nome especificado.</target>       </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve" uid="M:System.AppDomain.GetData(System.String)">
          <source>The value of the <ph id="ph1">&lt;paramref name="name" /&gt;</ph> property, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the property does not exist.</source>
          <target state="translated">O valor da propriedade <ph id="ph1">&lt;paramref name="name" /&gt;</ph> ou <ph id="ph2">&lt;see langword="null" /&gt;</ph> se a propriedade não existir.</target>       </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>Use this method to retrieve the value of an entry in an internal cache of name-data pairs that describe properties of this instance of <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>.</source>
          <target state="translated">Use esse método para recuperar o valor de uma entrada em um cache interno de pares de nome de dados que descrevem as propriedades desta instância do <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>Note that the comparison of <ph id="ph1">`name`</ph> with the name of key-value pairs is case-sensitive.</source>
          <target state="translated">Observe que a comparação de <ph id="ph1">`name`</ph> com o nome de pares chave-valor diferencia maiusculas de minúsculas.</target>       </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>The cache automatically contains predefined system entries that are inserted when the application domain is created.</source>
          <target state="translated">O cache contém entradas de sistema predefinidos que são inseridas quando o domínio de aplicativo é criado automaticamente.</target>       </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>You can inspect their values with the <ph id="ph1">&lt;xref:System.AppDomain.GetData%2A&gt;</ph> method, or the equivalent <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> properties.</source>
          <target state="translated">Você pode inspecionar os valores com o <ph id="ph1">&lt;xref:System.AppDomain.GetData%2A&gt;</ph> método, ou equivalente <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> propriedades.</target>       </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>You can insert or modify your own user defined name-data pairs with the <ph id="ph1">&lt;xref:System.AppDomain.SetData%2A&gt;</ph> method and inspect their values with the <ph id="ph2">&lt;xref:System.AppDomain.GetData%2A&gt;</ph> method.</source>
          <target state="translated">Você pode inserir ou modificar seus próprios pares de dados de nome definido pelo usuário com o <ph id="ph1">&lt;xref:System.AppDomain.SetData%2A&gt;</ph> método e inspecionar os valores com o <ph id="ph2">&lt;xref:System.AppDomain.GetData%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>The following table describes the <ph id="ph1">`name`</ph> of each predefined system entry and its corresponding <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> property.</source>
          <target state="translated">A tabela a seguir descreve o <ph id="ph1">`name`</ph> de cada entrada do sistema e correspondente predefinidos <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>Value of 'name'</source>
          <target state="translated">Valor de 'name'</target>       </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>Property</source>
          <target state="translated">Propriedade</target>       </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>"APPBASE"</source>
          <target state="translated">"APPBASE"</target>       </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>"APP_CONFIG_FILE"</source>
          <target state="translated">"APP_CONFIG_FILE"</target>       </trans-unit>
        <trans-unit id="1733" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>"APP_LAUNCH_URL"</source>
          <target state="translated">"APP_LAUNCH_URL"</target>       </trans-unit>
        <trans-unit id="1734" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>(no property)</source>
          <target state="translated">(nenhuma propriedade)</target>       </trans-unit>
        <trans-unit id="1735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>"APP_LAUNCH_URL" represents the URL originally requested by the user, before any redirection.</source>
          <target state="translated">"APP_LAUNCH_URL" representa a URL solicitada originalmente pelo usuário, antes de qualquer redirecionamento.</target>       </trans-unit>
        <trans-unit id="1736" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>It is available only when the application has been launched with a browser such as Internet Explorer.</source>
          <target state="translated">Ele está disponível somente quando o aplicativo foi iniciado com um navegador como o Internet Explorer.</target>       </trans-unit>
        <trans-unit id="1737" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>Not all browsers provide this value.</source>
          <target state="translated">Nem todos os navegadores fornecem esse valor.</target>       </trans-unit>
        <trans-unit id="1738" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>"APP_NAME"</source>
          <target state="translated">"APP_NAME"</target>       </trans-unit>
        <trans-unit id="1739" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>"BINPATH_PROBE_ONLY"</source>
          <target state="translated">"BINPATH_PROBE_ONLY"</target>       </trans-unit>
        <trans-unit id="1740" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>"CACHE_BASE"</source>
          <target state="translated">"CACHE_BASE"</target>       </trans-unit>
        <trans-unit id="1741" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>"CODE_DOWNLOAD_DISABLED"</source>
          <target state="translated">"CODE_DOWNLOAD_DISABLED"</target>       </trans-unit>
        <trans-unit id="1742" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>"DEV_PATH"</source>
          <target state="translated">"DEV_PATH"</target>       </trans-unit>
        <trans-unit id="1743" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>(no property)</source>
          <target state="translated">(nenhuma propriedade)</target>       </trans-unit>
        <trans-unit id="1744" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>"DISALLOW_APP"</source>
          <target state="translated">"DISALLOW_APP"</target>       </trans-unit>
        <trans-unit id="1745" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>"DISALLOW_APP_BASE_PROBING"</source>
          <target state="translated">"DISALLOW_APP_BASE_PROBING"</target>       </trans-unit>
        <trans-unit id="1746" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>"DISALLOW_APP_REDIRECTS"</source>
          <target state="translated">"DISALLOW_APP_REDIRECTS"</target>       </trans-unit>
        <trans-unit id="1747" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>"DYNAMIC_BASE"</source>
          <target state="translated">"DYNAMIC_BASE"</target>       </trans-unit>
        <trans-unit id="1748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>"FORCE_CACHE_INSTALL"</source>
          <target state="translated">"FORCE_CACHE_INSTALL"</target>       </trans-unit>
        <trans-unit id="1749" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>"LICENSE_FILE", or an application-specific string</source>
          <target state="translated">"LICENSE_FILE" ou uma cadeia de caracteres específica do aplicativo</target>       </trans-unit>
        <trans-unit id="1750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>"LOADER_OPTIMIZATION"</source>
          <target state="translated">"LOADER_OPTIMIZATION"</target>       </trans-unit>
        <trans-unit id="1751" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>"LOCATION_URI"</source>
          <target state="translated">"LOCATION_URI"</target>       </trans-unit>
        <trans-unit id="1752" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>(no property)</source>
          <target state="translated">(nenhuma propriedade)</target>       </trans-unit>
        <trans-unit id="1753" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>"PRIVATE_BINPATH"</source>
          <target state="translated">"PRIVATE_BINPATH"</target>       </trans-unit>
        <trans-unit id="1754" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>"REGEX_DEFAULT_MATCH_TIMEOUT"</source>
          <target state="translated">"REGEX_DEFAULT_MATCH_TIMEOUT"</target>       </trans-unit>
        <trans-unit id="1755" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>"REGEX_DEFAULT_MATCH_TIMEOUT" is not a system entry, and its value can be set by calling the <ph id="ph1">&lt;xref:System.AppDomain.SetData%2A&gt;</ph> method.</source>
          <target state="translated">"REGEX_DEFAULT_MATCH_TIMEOUT" não é uma entrada de sistema e seu valor pode ser definido ao chamar o <ph id="ph1">&lt;xref:System.AppDomain.SetData%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1756" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>"SHADOW_COPY_DIRS"</source>
          <target state="translated">"SHADOW_COPY_DIRS"</target>       </trans-unit>
        <trans-unit id="1757" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>The following example creates a new application domain, sets a system-provided value for the domain, and adds a new value pair for the domain.</source>
          <target state="translated">O exemplo a seguir cria um novo domínio de aplicativo, define um valor fornecido pelo sistema para o domínio e adiciona um novo par de valor para o domínio.</target>       </trans-unit>
        <trans-unit id="1758" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>The example then demonstrates how to use the <ph id="ph1">&lt;xref:System.AppDomain.GetData%2A&gt;</ph> method to retrieve the data from these value pairs and display them to the console.</source>
          <target state="translated">O exemplo demonstra como usar o <ph id="ph1">&lt;xref:System.AppDomain.GetData%2A&gt;</ph> método para recuperar os dados desses pares de valor e exibi-los para o console.</target>       </trans-unit>
        <trans-unit id="1759" translate="yes" xml:space="preserve" uid="M:System.AppDomain.GetData(System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1760" translate="yes" xml:space="preserve" uid="M:System.AppDomain.GetData(System.String)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1761" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>for access to the information in the path itself, if the property applies to a path.</source>
          <target state="translated">para acessar as informações no caminho em si, se a propriedade se aplica a um caminho.</target>       </trans-unit>
        <trans-unit id="1762" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.GetData(System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1763" translate="yes" xml:space="preserve" uid="M:System.AppDomain.GetType">
          <source>Gets the type of the current instance.</source>
          <target state="translated">Obtém o tipo da instância atual.</target>       </trans-unit>
        <trans-unit id="1764" translate="yes" xml:space="preserve" uid="M:System.AppDomain.GetType">
          <source>The type of the current instance.</source>
          <target state="translated">O tipo da instância atual.</target>       </trans-unit>
        <trans-unit id="1765" translate="yes" xml:space="preserve" uid="P:System.AppDomain.Id">
          <source>Gets an integer that uniquely identifies the application domain within the process.</source>
          <target state="translated">Obtém um inteiro que identifica exclusivamente o domínio de aplicativo dentro do processo.</target>       </trans-unit>
        <trans-unit id="1766" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.Id">
          <source>An integer that identifies the application domain.</source>
          <target state="translated">Um inteiro que identifica o domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="1767" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.Id">
          <source>The following code example creates a second application domain and displays information about the default domain and the new domain.</source>
          <target state="translated">O exemplo de código a seguir cria um segundo domínio de aplicativo e exibe informações sobre o domínio padrão e o novo domínio.</target>       </trans-unit>
        <trans-unit id="1768" translate="yes" xml:space="preserve" uid="M:System.AppDomain.InitializeLifetimeService">
          <source>Gives the <ph id="ph1">&lt;see cref="T:System.AppDomain" /&gt;</ph> an infinite lifetime by preventing a lease from being created.</source>
          <target state="translated">Proporciona ao <ph id="ph1">&lt;see cref="T:System.AppDomain" /&gt;</ph> um tempo de vida infinito impedindo que uma concessão seja criada.</target>       </trans-unit>
        <trans-unit id="1769" translate="yes" xml:space="preserve" uid="M:System.AppDomain.InitializeLifetimeService">
          <source>Always <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Sempre <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1770" translate="yes" xml:space="preserve" uid="M:System.AppDomain.InitializeLifetimeService">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1771" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.InitializeLifetimeService">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="1772" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.InitializeLifetimeService">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="1773" translate="yes" xml:space="preserve" uid="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
          <source>The compatibility switch to test.</source>
          <target state="translated">A opção de compatibilidade a testar.</target>       </trans-unit>
        <trans-unit id="1774" translate="yes" xml:space="preserve" uid="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
          <source>Gets a nullable Boolean value that indicates whether any compatibility switches are set, and if so, whether the specified compatibility switch is set.</source>
          <target state="translated">Obtém um valor booliano anulável que indica se alguma a de compatibilidade está definida e, caso esteja, se a opção de compatibilidade especificada está definida.</target>       </trans-unit>
        <trans-unit id="1775" translate="yes" xml:space="preserve" uid="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
          <source>A null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) if no compatibility switches are set; otherwise, a Boolean value that indicates whether the compatibility switch that is specified by <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is set.</source>
          <target state="translated">Uma referência nula (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> no Visual Basic) se nenhuma opção de compatibilidade estiver definida; caso contrário, um valor booliano que indica se a opção de compatibilidade especificada por <ph id="ph2">&lt;paramref name="value" /&gt;</ph> está definida.</target>       </trans-unit>
        <trans-unit id="1776" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
          <source>This method tests whether the specified compatibility switch has been set for the current application domain.</source>
          <target state="translated">Este método testa se a opção de compatibilidade especificado tiver sido definida para o domínio de aplicativo atual.</target>       </trans-unit>
        <trans-unit id="1777" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
          <source>Compatibility switches typically restore a behavior (such as the way strings are sorted) that was changed between versions of the .NET Framework.</source>
          <target state="translated">Comutadores de compatibilidade normalmente restaura um comportamento (como as cadeias de caracteres de forma são classificadas) que foi alterado entre as versões do .NET Framework.</target>       </trans-unit>
        <trans-unit id="1778" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
          <source>They are set by calling the <ph id="ph1">&lt;xref:System.AppDomainSetup.SetCompatibilitySwitches%2A?displayProperty=nameWithType&gt;</ph> method before creating an application domain.</source>
          <target state="translated">Eles são definidos chamando o <ph id="ph1">&lt;xref:System.AppDomainSetup.SetCompatibilitySwitches%2A?displayProperty=nameWithType&gt;</ph> método antes de criar um domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="1779" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
          <source>The following table provides examples of compatibility switches that can be set to restore the behavior of earlier versions of the .NET Framework.</source>
          <target state="translated">A tabela a seguir fornece exemplos de comutadores de compatibilidade que podem ser definidas para restaurar o comportamento de versões anteriores do .NET Framework.</target>       </trans-unit>
        <trans-unit id="1780" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
          <source>Switch</source>
          <target state="translated">Alternar</target>       </trans-unit>
        <trans-unit id="1781" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
          <source>Meaning</source>
          <target state="translated">Significado</target>       </trans-unit>
        <trans-unit id="1782" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
          <source>"NetFx40_LegacySecurityPolicy"</source>
          <target state="translated">"NetFx40_LegacySecurityPolicy"</target>       </trans-unit>
        <trans-unit id="1783" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
          <source>Code access security (CAS) for the <ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> is enabled in this application domain.</source>
          <target state="translated">Código de segurança de acesso (ACS) para o <ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> está habilitada neste domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="1784" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
          <source>See <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>NetFx40_LegacySecurityPolicy<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)</ept>.</source>
          <target state="translated">Consulte <bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>NetFx40_LegacySecurityPolicy<ph id="ph2">&amp;gt;</ph> elemento<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)</ept>.</target>       </trans-unit>
        <trans-unit id="1785" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
          <source>"NetFx40_Legacy20SortingBehavior"</source>
          <target state="translated">"NetFx40_Legacy20SortingBehavior"</target>       </trans-unit>
        <trans-unit id="1786" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
          <source>String sorting defaults for the <ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> are enabled in this application domain.</source>
          <target state="translated">Cadeia de caracteres de classificação padrão para o <ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> são habilitados neste domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="1787" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
          <source>Its success requires sort00001000.dll to be installed.</source>
          <target state="translated">O sucesso requer o arquivo sort00001000.dll para ser instalado.</target>       </trans-unit>
        <trans-unit id="1788" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
          <source>See <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>CompatSortNLSVersion<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/compatsortnlsversion-element.md)</ept>.</source>
          <target state="translated">Consulte <bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>CompatSortNLSVersion<ph id="ph2">&amp;gt;</ph> elemento<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/compatsortnlsversion-element.md)</ept>.</target>       </trans-unit>
        <trans-unit id="1789" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
          <source>"NetFx40_Legacy40SortingBehavior"</source>
          <target state="translated">"NetFx40_Legacy40SortingBehavior"</target>       </trans-unit>
        <trans-unit id="1790" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
          <source>String sorting defaults for the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>and Unicode 5.0 are enabled in this application domain.</source>
          <target state="translated">Cadeia de caracteres de classificação padrão para o <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>e Unicode 5.0 são habilitados neste domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="1791" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
          <source>Its success requires sort00060101.dll to be installed.</source>
          <target state="translated">O sucesso requer sort00060101.dll para ser instalado.</target>       </trans-unit>
        <trans-unit id="1792" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
          <source>"NetFx40_TimeSpanLegacyFormatMode"</source>
          <target state="translated">"NetFx40_TimeSpanLegacyFormatMode"</target>       </trans-unit>
        <trans-unit id="1793" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
          <source><ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> formatting behavior for the <ph id="ph2">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> is enabled in this application domain.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> formatação de comportamento para o <ph id="ph2">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> está habilitada neste domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="1794" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
          <source>See <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>TimeSpan_LegacyFormatMode<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/timespan-legacyformatmode-element.md)</ept> and the "Restoring Legacy TimeSpan Formatting" section of the <ph id="ph3">&lt;xref:System.TimeSpan&gt;</ph> topic.</source>
          <target state="translated">Consulte <bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>TimeSpan_LegacyFormatMode<ph id="ph2">&amp;gt;</ph> elemento<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/timespan-legacyformatmode-element.md)</ept> e a seção "Restaurando herdado TimeSpan formatação" o <ph id="ph3">&lt;xref:System.TimeSpan&gt;</ph> tópico.</target>       </trans-unit>
        <trans-unit id="1795" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
          <source>"UseRandomizedStringHashAlgorithm"</source>
          <target state="translated">"UseRandomizedStringHashAlgorithm"</target>       </trans-unit>
        <trans-unit id="1796" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
          <source>The runtime calculates hash codes for strings on a per application domain basis instead of using a single hashing algorithm that produces a consistent hash code across application domains.</source>
          <target state="translated">O tempo de execução calcula os códigos de hash para cadeias de caracteres em um por cada domínio de aplicativo em vez de usar um único algoritmo de hash que gera um código hash consistente entre domínios de aplicativo.</target>       </trans-unit>
        <trans-unit id="1797" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
          <source>See <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>UseRandomizedStringHashAlgorithm<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md)</ept>.</source>
          <target state="translated">Consulte <bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>UseRandomizedStringHashAlgorithm<ph id="ph2">&amp;gt;</ph> elemento<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md)</ept>.</target>       </trans-unit>
        <trans-unit id="1798" translate="yes" xml:space="preserve" uid="M:System.AppDomain.IsDefaultAppDomain">
          <source>Returns a value that indicates whether the application domain is the default application domain for the process.</source>
          <target state="translated">Retorna um valor que indica se o domínio de aplicativo é o domínio de aplicativo padrão para o processo.</target>       </trans-unit>
        <trans-unit id="1799" translate="yes" xml:space="preserve" uid="M:System.AppDomain.IsDefaultAppDomain">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current <ph id="ph2">&lt;see cref="T:System.AppDomain" /&gt;</ph> object represents the default application domain for the process; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> caso o objeto <ph id="ph2">&lt;see cref="T:System.AppDomain" /&gt;</ph> atual represente o domínio de aplicativo padrão para o processo; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1800" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsDefaultAppDomain">
          <source>Every managed process has a default application domain.</source>
          <target state="translated">Cada processo gerenciado tem um domínio de aplicativo padrão.</target>       </trans-unit>
        <trans-unit id="1801" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsDefaultAppDomain">
          <source>Execution begins in the default domain.</source>
          <target state="translated">Início da execução do domínio padrão.</target>       </trans-unit>
        <trans-unit id="1802" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsDefaultAppDomain">
          <source>The following code example creates a second application domain and displays information about the default domain and the new domain.</source>
          <target state="translated">O exemplo de código a seguir cria um segundo domínio de aplicativo e exibe informações sobre o domínio padrão e o novo domínio.</target>       </trans-unit>
        <trans-unit id="1803" translate="yes" xml:space="preserve" uid="M:System.AppDomain.IsFinalizingForUnload">
          <source>Indicates whether this application domain is unloading, and the objects it contains are being finalized by the common language runtime.</source>
          <target state="translated">Indica se esse domínio de aplicativo está descarregando e os objetos que ele contém estão sendo finalizados pelo Common Language Runtime.</target>       </trans-unit>
        <trans-unit id="1804" translate="yes" xml:space="preserve" uid="M:System.AppDomain.IsFinalizingForUnload">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this application domain is unloading and the common language runtime has started invoking finalizers; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se esse domínio de aplicativo estiver descarregando e o Common Language Runtime tiver começado a chamar finalizadores; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1805" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsFinalizingForUnload">
          <source>The finalization method for an object provides you an opportunity to perform any necessary cleanup operations before the object is garbage collected.</source>
          <target state="translated">O método de finalização de um objeto fornece a oportunidade de executar quaisquer operações de limpeza necessária antes que o objeto é coletado como lixo.</target>       </trans-unit>
        <trans-unit id="1806" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsFinalizingForUnload">
          <source>After finalization, the object is accessible but in an invalid state and therefore unusable.</source>
          <target state="translated">Após a finalização, o objeto é acessível, mas em um estado inválido e, portanto, inutilizável.</target>       </trans-unit>
        <trans-unit id="1807" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsFinalizingForUnload">
          <source>Eventually, garbage collection completes and reclaims the object.</source>
          <target state="translated">Eventualmente, a coleta de lixo é concluída e recupera o objeto.</target>       </trans-unit>
        <trans-unit id="1808" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsFinalizingForUnload">
          <source>An object's finalization method is called in one of the following situations: during garbage collection, when the common language runtime is shutting down, or when the application domain that contains the object is unloaded.</source>
          <target state="translated">Método de finalização de um objeto é chamado em uma das seguintes situações: durante a coleta de lixo, quando o common language runtime está sendo desligado, ou quando o domínio de aplicativo que contém o objeto é descarregado.</target>       </trans-unit>
        <trans-unit id="1809" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsFinalizingForUnload">
          <source>The <ph id="ph1">&lt;xref:System.AppDomain.IsFinalizingForUnload%2A&gt;</ph> method returns <ph id="ph2">`true`</ph> only in the last case; it does not return <ph id="ph3">`true`</ph> if finalization results from routine garbage collection or from CLR shutdown.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.AppDomain.IsFinalizingForUnload%2A&gt;</ph> método <ph id="ph2">`true`</ph> somente no último caso; ele não retorna <ph id="ph3">`true`</ph> se finalização resulta da coleta de lixo de rotina ou do desligamento do CLR.</target>       </trans-unit>
        <trans-unit id="1810" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsFinalizingForUnload">
          <source>To determine whether finalization is due to CLR shutdown, use the <ph id="ph1">&lt;xref:System.Environment.HasShutdownStarted%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Para determinar se a finalização é devido ao desligamento do CLR, use o <ph id="ph1">&lt;xref:System.Environment.HasShutdownStarted%2A?displayProperty=nameWithType&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="1811" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsFinalizingForUnload">
          <source>It returns <ph id="ph1">`true`</ph> if finalization is due to an application domain being unloaded or to the CLR shutting down.</source>
          <target state="translated">Ele retorna <ph id="ph1">`true`</ph> se finalização é devido a um domínio de aplicativo que está sendo descarregado ou ao CLR que está sendo desligado.</target>       </trans-unit>
        <trans-unit id="1812" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsFinalizingForUnload">
          <source>While executing in your finalization method during domain unloading, you might want to access another object that is referenced by a static field and has a finalization method.</source>
          <target state="translated">Durante a execução em seu método de finalização durante descarregamento do domínio, você talvez queira acessar outro objeto que é referenciado por um campo estático e tem um método de finalização.</target>       </trans-unit>
        <trans-unit id="1813" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsFinalizingForUnload">
          <source>However, you cannot reliably do so because the accessed object might already have been finalized.</source>
          <target state="translated">No entanto, não é possível confiável porque o objeto acessado pode já ter foi finalizado.</target>       </trans-unit>
        <trans-unit id="1814" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsFinalizingForUnload">
          <source>An exception to this rule is the <ph id="ph1">&lt;xref:System.Console&gt;</ph> class, which contains static fields that reference stream objects, but is implemented specially so you can always write to the system console, even during domain unloading or system shutdown.</source>
          <target state="translated">Uma exceção a essa regra é o <ph id="ph1">&lt;xref:System.Console&gt;</ph> classe, que contém campos estáticos que fazem referência a objetos de fluxo, mas é implementada especialmente para você sempre pode gravar no console do sistema, mesmo durante o desligamento de descarregar ou sistema de domínio.</target>       </trans-unit>
        <trans-unit id="1815" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsFinalizingForUnload">
          <source>Use this method in an object's finalization method to determine whether the application domain that contains the object is unloading.</source>
          <target state="translated">Use esse método no método de finalização de um objeto para determinar se o domínio de aplicativo que contém o objeto está descarregando.</target>       </trans-unit>
        <trans-unit id="1816" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.IsFinalizingForUnload">
          <source>If that is the case, you cannot reliably access any object that has a finalization method and is referenced by a static field.</source>
          <target state="translated">Se esse for o caso, você não pode acessar com segurança qualquer objeto que tem um método de finalização e é referenciado por um campo estático.</target>       </trans-unit>
        <trans-unit id="1817" translate="yes" xml:space="preserve" uid="P:System.AppDomain.IsFullyTrusted">
          <source>Gets a value that indicates whether assemblies that are loaded into the current application domain execute with full trust.</source>
          <target state="translated">Obtém um valor que indica se os assemblies carregados no domínio de aplicativo atual são executados com confiança total.</target>       </trans-unit>
        <trans-unit id="1818" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.IsFullyTrusted">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if assemblies that are loaded into the current application domain execute with full trust; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se os assemblies carregados no domínio de aplicativo atual forem executados com confiança total; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1819" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.IsFullyTrusted">
          <source>This method always returns <ph id="ph1">`true`</ph> for the default application domain of an application that runs on the desktop.</source>
          <target state="translated">Esse método sempre retorna <ph id="ph1">`true`</ph> para o domínio de aplicativo padrão de um aplicativo que é executado na área de trabalho.</target>       </trans-unit>
        <trans-unit id="1820" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.IsFullyTrusted">
          <source>It returns <ph id="ph1">`false`</ph> for a sandboxed application domain that was created by using the <ph id="ph2">&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType&gt;</ph> method overload, unless the permissions that are granted to the application domain are equivalent to full trust.</source>
          <target state="translated">Ele retorna <ph id="ph1">`false`</ph> para um domínio de aplicativo na área restrita foi criado usando o <ph id="ph2">&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType&gt;</ph> sobrecarga do método, a menos que as permissões que são concedidas ao domínio do aplicativo são equivalentes a confiança total.</target>       </trans-unit>
        <trans-unit id="1821" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.IsFullyTrusted">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.AppDomain.IsFullyTrusted%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> property with fully trusted and partially trusted application domains.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.AppDomain.IsFullyTrusted%2A&gt;</ph> propriedade e o <ph id="ph2">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> propriedade com domínios de aplicativo totalmente confiável quanto o parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="1822" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.IsFullyTrusted">
          <source>The fully trusted application domain is the default application domain for the application.</source>
          <target state="translated">O domínio de aplicativo totalmente confiável é o domínio de aplicativo padrão para o aplicativo.</target>       </trans-unit>
        <trans-unit id="1823" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.IsFullyTrusted">
          <source>The partially trusted application domain is created by using the <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType&gt;</ph> method overload.</source>
          <target state="translated">O domínio de aplicativo parcialmente confiável é criado usando o <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType&gt;</ph> sobrecarga do método.</target>       </trans-unit>
        <trans-unit id="1824" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.IsFullyTrusted">
          <source>The example uses a <ph id="ph1">`Worker`</ph> class that derives from <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, so it can be marshaled across application domain boundaries.</source>
          <target state="translated">O exemplo usa um <ph id="ph1">`Worker`</ph> classe que deriva de <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, portanto, ele pode ser empacotado nos limites do domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="1825" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.IsFullyTrusted">
          <source>The example creates a <ph id="ph1">`Worker`</ph> object in the default application domain.</source>
          <target state="translated">O exemplo cria um <ph id="ph1">`Worker`</ph> objeto no domínio de aplicativo padrão.</target>       </trans-unit>
        <trans-unit id="1826" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.IsFullyTrusted">
          <source>It then calls the <ph id="ph1">`TestIsFullyTrusted`</ph> method to display the property value for the application domain and for two assemblies that are loaded into the application domain: mscorlib, which is part of the .NET Framework, and the example assembly.</source>
          <target state="translated">Depois, ele chama o <ph id="ph1">`TestIsFullyTrusted`</ph> método para exibir o valor da propriedade para o domínio de aplicativo em dois assemblies são carregados no domínio de aplicativo: mscorlib, que faz parte do .NET Framework e o assembly de exemplo.</target>       </trans-unit>
        <trans-unit id="1827" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.IsFullyTrusted">
          <source>The application domain is fully trusted, so both assemblies are fully trusted.</source>
          <target state="translated">O domínio de aplicativo é totalmente confiável, para que os dois assemblies forem totalmente confiáveis.</target>       </trans-unit>
        <trans-unit id="1828" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.IsFullyTrusted">
          <source>The example creates another <ph id="ph1">`Worker`</ph> object in a sandboxed application domain and again calls the <ph id="ph2">`TestIsFullyTrusted`</ph> method.</source>
          <target state="translated">O exemplo cria outro <ph id="ph1">`Worker`</ph> objeto em um domínio de aplicativo na área restrita e, novamente, chamadas de <ph id="ph2">`TestIsFullyTrusted`</ph> método.</target>       </trans-unit>
        <trans-unit id="1829" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.IsFullyTrusted">
          <source>Mscorlib is always trusted, even in a partially trusted application domain, but the example assembly is partially trusted.</source>
          <target state="translated">Mscorlib sempre é confiável, mesmo em um domínio de aplicativo parcialmente confiável, mas o assembly de exemplo é parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="1830" translate="yes" xml:space="preserve" uid="P:System.AppDomain.IsHomogenous">
          <source>Gets a value that indicates whether the current application domain has a set of permissions that is granted to all assemblies that are loaded into the application domain.</source>
          <target state="translated">Obtém um valor que indica se o domínio de aplicativo atual tem um conjunto de permissões concedido a todos os assemblies que são carregados no domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="1831" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.IsHomogenous">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current application domain has a homogenous set of permissions; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o domínio de aplicativo atual tiver um conjunto de permissões homogêneo; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1832" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.IsHomogenous">
          <source>This property returns <ph id="ph1">`true`</ph> for sandboxed application domains that were created by using the <ph id="ph2">&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType&gt;</ph> method overload.</source>
          <target state="translated">Essa propriedade retorna <ph id="ph1">`true`</ph> para domínios de aplicativo na área restrita que foram criados usando o <ph id="ph2">&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType&gt;</ph> sobrecarga do método.</target>       </trans-unit>
        <trans-unit id="1833" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.IsHomogenous">
          <source>Sandboxed application domains have a homogenous set of permissions; that is, the same set of permissions is granted to all partially trusted assemblies that are loaded into the application domain.</source>
          <target state="translated">Domínios de aplicativo na área restrita têm um homogêneo conjunto de permissões; Isto é, o mesmo conjunto de permissões é concedido a todos os assemblies parcialmente confiáveis que são carregados no domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="1834" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.IsHomogenous">
          <source>A sandboxed application domain optionally has a list of strong-named assemblies that are exempt from this permission set, and instead run with full trust.</source>
          <target state="translated">Opcionalmente, um domínio de aplicativo na área restrita tem uma lista de assemblies de nomes fortes que são isentos essa permissão definida e, em vez disso, é executado com confiança total.</target>       </trans-unit>
        <trans-unit id="1835" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.IsHomogenous">
          <source>Fully trusted code can use the <ph id="ph1">&lt;xref:System.AppDomain.PermissionSet%2A&gt;</ph> property to determine the homogenous grant set of a sandboxed application domain.</source>
          <target state="translated">Totalmente confiáveis pode usar o código de <ph id="ph1">&lt;xref:System.AppDomain.PermissionSet%2A&gt;</ph> propriedade para determinar o conjunto de concessão homogêneo de um domínio de aplicativo na área restrita.</target>       </trans-unit>
        <trans-unit id="1836" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.IsHomogenous">
          <source>This property also returns <ph id="ph1">`true`</ph> for the default application domain of a desktop application, because that application domain grants full trust to all assemblies.</source>
          <target state="translated">Essa propriedade também retorna <ph id="ph1">`true`</ph> para o domínio de aplicativo padrão de um aplicativo de área de trabalho, porque o domínio de aplicativo concede confiança total para todos os assemblies.</target>       </trans-unit>
        <trans-unit id="1837" translate="yes" xml:space="preserve" uid="T:System.AppDomain">
          <source>Loads an <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> into this application domain.</source>
          <target state="translated">Carrega um <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> para esse domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="1838" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[])">
          <source>An array of type <ph id="ph1">&lt;see langword="byte" /&gt;</ph> that is a COFF-based image containing an emitted assembly.</source>
          <target state="translated">Uma matriz do tipo <ph id="ph1">&lt;see langword="byte" /&gt;</ph> que é uma imagem baseada em COFF contendo um assembly emitido.</target>       </trans-unit>
        <trans-unit id="1839" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[])">
          <source>Loads the <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> with a common object file format (COFF) based image containing an emitted <ph id="ph2">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph>.</source>
          <target state="translated">Carrega o <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> com uma imagem baseada em formato COFF, contendo um <ph id="ph2">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> emitido.</target>       </trans-unit>
        <trans-unit id="1840" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[])">
          <source>The loaded assembly.</source>
          <target state="translated">O assembly carregado.</target>       </trans-unit>
        <trans-unit id="1841" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[])">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the trust level of an assembly that is loaded by using this method is the same as the trust level of the application domain.</source>
          <target state="translated">Começando com o <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, o nível de confiança de um assembly carregado usando esse método é o mesmo que o nível de confiança do domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="1842" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[])">
          <source>This method should be used only to load an assembly into the current application domain.</source>
          <target state="translated">Este método só deve ser usado para carregar um assembly no domínio de aplicativo atual.</target>       </trans-unit>
        <trans-unit id="1843" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[])">
          <source>This method is provided as a convenience for interoperability callers who cannot call the static <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Este método é fornecido como uma praticidade para chamadores de interoperabilidade que não possam chamar o método estático <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1844" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[])">
          <source>To load assemblies into other application domains, use a method such as <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</ph>.</source>
          <target state="translated">Para carregar assemblies em outros domínios de aplicativo, use um método como <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1845" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[])">
          <source>For information that is common to all overloads of this method, see the <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph> method overload.</source>
          <target state="translated">Para informações comuns a todas as sobrecargas desse método, consulte a sobrecarga do método <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1846" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[])">
          <source>The following sample demonstrates the use of loading a raw assembly.</source>
          <target state="translated">O exemplo a seguir demonstra o uso de carregar um assembly bruto.</target>       </trans-unit>
        <trans-unit id="1847" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[])">
          <source>For this code example to run, you must provide the fully qualified assembly name.</source>
          <target state="translated">Para este exemplo de código ser executado, você deve fornecer o nome de assembly totalmente qualificado.</target>       </trans-unit>
        <trans-unit id="1848" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[])">
          <source>For information about how to obtain the fully qualified assembly name, see <bpt id="p1">[</bpt>Assembly Names<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</source>
          <target state="translated">Para obter informações sobre como obter o nome totalmente qualificado do assembly, consulte <bpt id="p1">[</bpt>nomes de Assembly<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</target>       </trans-unit>
        <trans-unit id="1849" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="rawAssembly" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rawAssembly" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1850" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="rawAssembly" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rawAssembly" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="1851" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[])">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1852" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[])">
          <source>Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;paramref name="rawAssembly" /&gt;</ph> was compiled with a later version.</source>
          <target state="translated">A versão 2,0 ou posterior do Common Language Runtime está carregada e <ph id="ph1">&lt;paramref name="rawAssembly" /&gt;</ph> foi compilada com uma versão posterior.</target>       </trans-unit>
        <trans-unit id="1853" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[])">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1854" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[])">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="1855" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[])">
          <source>for access to read from a file or directory, and for access to the information in the path itself.</source>
          <target state="translated">para acesso de leitura de um arquivo ou um diretório, e para acesso às informações no próprio caminho.</target>       </trans-unit>
        <trans-unit id="1856" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[])">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">Enumerações associadas: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1857" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source>An object that describes the assembly to load.</source>
          <target state="translated">O objeto que descreve o assembly a ser carregado.</target>       </trans-unit>
        <trans-unit id="1858" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source>Loads an <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> given its <ph id="ph2">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph>.</source>
          <target state="translated">Carrega um <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> dado seu <ph id="ph2">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1859" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source>The loaded assembly.</source>
          <target state="translated">O assembly carregado.</target>       </trans-unit>
        <trans-unit id="1860" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source>This method should be used only to load an assembly into the current application domain.</source>
          <target state="translated">Este método só deve ser usado para carregar um assembly no domínio de aplicativo atual.</target>       </trans-unit>
        <trans-unit id="1861" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source>This method is provided as a convenience for interoperability callers who cannot call the static <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Este método é fornecido como uma praticidade para chamadores de interoperabilidade que não possam chamar o método estático <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1862" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source>To load assemblies into other application domains, use a method such as <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</ph>.</source>
          <target state="translated">Para carregar assemblies em outros domínios de aplicativo, use um método como <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1863" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source>If a version of the requested assembly is already loaded, this method returns the loaded assembly, even if a different version is requested.</source>
          <target state="translated">Se uma versão do assembly solicitado já está carregada, esse método retorna o assembly carregado, mesmo se for solicitada uma versão diferente.</target>       </trans-unit>
        <trans-unit id="1864" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source>Supplying a partial assembly name for <ph id="ph1">`assemblyRef`</ph> is not recommended.</source>
          <target state="translated">Fornecendo um nome de assembly parcial para <ph id="ph1">`assemblyRef`</ph> não é recomendado.</target>       </trans-unit>
        <trans-unit id="1865" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source>(A partial name omits one or more of culture, version, or public key token.</source>
          <target state="translated">(Um nome parcial omite um ou mais da cultura, versão ou token de chave pública.</target>       </trans-unit>
        <trans-unit id="1866" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source>For overloads that take a string instead of an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object, "MyAssembly, Version=1.0.0.0" is an example of a partial name and "MyAssembly, Version=1.0.0.0, Culture=neutral, PublicKeyToken=18ab3442da84b47" is an example of a full name.) Using partial names has a negative effect on performance.</source>
          <target state="translated">Para sobrecargas que têm uma cadeia de caracteres em vez de um <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> objeto, "MyAssembly, Version = 1.0.0.0" é um exemplo de um nome parcial e "MyAssembly, Version = 1.0.0.0, Culture = neutral, PublicKeyToken = 18ab3442da84b47" é um exemplo de um nome completo.) Usar nomes parciais tem um efeito negativo no desempenho.</target>       </trans-unit>
        <trans-unit id="1867" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source>In addition, a partial assembly name can load an assembly from the global assembly cache only if there is an exact copy of the assembly in the application base directory (<ph id="ph1">&lt;xref:System.AppDomain.BaseDirectory%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=nameWithType&gt;</ph>).</source>
          <target state="translated">Além disso, um nome de assembly parcial pode carregar um assembly do cache de assembly global somente se houver uma cópia exata do assembly no diretório base do aplicativo (<ph id="ph1">&lt;xref:System.AppDomain.BaseDirectory%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=nameWithType&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="1868" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source>If the current <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> object represents application domain <ph id="ph2">`A`</ph>, and the <ph id="ph3">&lt;xref:System.AppDomain.Load%2A&gt;</ph> method is called from application domain <ph id="ph4">`B`</ph>, the assembly is loaded into both application domains.</source>
          <target state="translated">Se o atual <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> objeto representa o domínio de aplicativo <ph id="ph2">`A`</ph>e o <ph id="ph3">&lt;xref:System.AppDomain.Load%2A&gt;</ph> método é chamado de domínio de aplicativo <ph id="ph4">`B`</ph>, o assembly é carregado em ambos os domínios de aplicativo.</target>       </trans-unit>
        <trans-unit id="1869" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source>For example, the following code loads <ph id="ph1">`MyAssembly`</ph> into the new application domain <ph id="ph2">`ChildDomain`</ph> and also into the application domain where the code executes:</source>
          <target state="translated">Por exemplo, o código a seguir carrega <ph id="ph1">`MyAssembly`</ph> no novo domínio de aplicativo <ph id="ph2">`ChildDomain`</ph> e também no domínio de aplicativo onde o código é executado:</target>       </trans-unit>
        <trans-unit id="1870" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source>The assembly is loaded into both domains because <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph> does not derive from <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, and therefore the return value of the <ph id="ph3">&lt;xref:System.AppDomain.Load%2A&gt;</ph> method cannot be marshaled.</source>
          <target state="translated">O assembly é carregado em ambos os domínios porque <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph> não deriva de <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>e, portanto, o valor de retorno de <ph id="ph3">&lt;xref:System.AppDomain.Load%2A&gt;</ph> método não pode ser empacotado.</target>       </trans-unit>
        <trans-unit id="1871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source>Instead, the common language runtime tries to load the assembly into the calling application domain.</source>
          <target state="translated">Em vez disso, o common language runtime tenta carregar o assembly no domínio de aplicativo de chamada.</target>       </trans-unit>
        <trans-unit id="1872" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source>The assemblies that are loaded into the two application domains might be different if the path settings for the two application domains are different.</source>
          <target state="translated">Os assemblies que são carregados nos domínios do duas aplicativo podem ser diferentes se as configurações de caminho para os domínios de dois aplicativo são diferentes.</target>       </trans-unit>
        <trans-unit id="1873" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source>If both the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType&gt;</ph> property and the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=nameWithType&gt;</ph> property are set, the first attempt to load the assembly uses the display name (including version, culture, and so on, as returned by the <ph id="ph3">&lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType&gt;</ph> property).</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType&gt;</ph> propriedade e o <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=nameWithType&gt;</ph> propriedade estiver definida, a primeira tentativa de carregar o assembly usa o nome de exibição (incluindo a versão, cultura e assim por diante, conforme retornado pelo <ph id="ph3">&lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType&gt;</ph> propriedade).</target>       </trans-unit>
        <trans-unit id="1874" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source>If the file is not found, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> property is used to search for the assembly.</source>
          <target state="translated">Se o arquivo não for encontrado, o <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> propriedade é usada para pesquisar o assembly.</target>       </trans-unit>
        <trans-unit id="1875" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source>If the assembly is found using <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph>, the display name is matched against the assembly.</source>
          <target state="translated">Se o assembly for encontrado usando <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph>, o nome de exibição é comparado com o assembly.</target>       </trans-unit>
        <trans-unit id="1876" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source>If the match fails, a <ph id="ph1">&lt;xref:System.IO.FileLoadException&gt;</ph> is thrown.</source>
          <target state="translated">Se a correspondência falhar, um <ph id="ph1">&lt;xref:System.IO.FileLoadException&gt;</ph> é gerada.</target>       </trans-unit>
        <trans-unit id="1877" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source><ph id="ph1">&lt;paramref name="assemblyRef" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyRef" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1878" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source><ph id="ph1">&lt;paramref name="assemblyRef" /&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyRef" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="1879" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source><ph id="ph1">&lt;paramref name="assemblyRef" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyRef" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="1880" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1881" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source>Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;paramref name="assemblyRef" /&gt;</ph> was compiled with a later version.</source>
          <target state="translated">A versão 2,0 ou posterior do Common Language Runtime está carregada e <ph id="ph1">&lt;paramref name="assemblyRef" /&gt;</ph> foi compilada com uma versão posterior.</target>       </trans-unit>
        <trans-unit id="1882" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1883" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="1884" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source>for access to read from a file or directory, and for access to the information in the path itself.</source>
          <target state="translated">para acesso de leitura de um arquivo ou um diretório, e para acesso às informações no próprio caminho.</target>       </trans-unit>
        <trans-unit id="1885" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">Enumerações associadas: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1886" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.String)">
          <source>The display name of the assembly.</source>
          <target state="translated">O nome para exibição do assembly.</target>       </trans-unit>
        <trans-unit id="1887" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.String)">
          <source>See <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1888" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.String)">
          <source>Loads an <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> given its display name.</source>
          <target state="translated">Carrega um <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> de acordo com seu nome de exibição.</target>       </trans-unit>
        <trans-unit id="1889" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.String)">
          <source>The loaded assembly.</source>
          <target state="translated">O assembly carregado.</target>       </trans-unit>
        <trans-unit id="1890" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.String)">
          <source>This method should be used only to load an assembly into the current application domain.</source>
          <target state="translated">Este método só deve ser usado para carregar um assembly no domínio de aplicativo atual.</target>       </trans-unit>
        <trans-unit id="1891" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.String)">
          <source>This method is provided as a convenience for interoperability callers who cannot call the static <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Este método é fornecido como uma praticidade para chamadores de interoperabilidade que não possam chamar o método estático <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1892" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.String)">
          <source>To load assemblies into other application domains, use a method such as <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</ph>.</source>
          <target state="translated">Para carregar assemblies em outros domínios de aplicativo, use um método como <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1893" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.String)">
          <source>For information that is common to all overloads of this method, see the <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph> method overload.</source>
          <target state="translated">Para informações comuns a todas as sobrecargas desse método, consulte a sobrecarga do método <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1894" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyString" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyString" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1895" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyString" /&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyString" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="1896" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyString" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyString" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="1897" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.String)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1898" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.String)">
          <source>Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;paramref name="assemblyString" /&gt;</ph> was compiled with a later version.</source>
          <target state="translated">A versão 2,0 ou posterior do Common Language Runtime está carregada e <ph id="ph1">&lt;paramref name="assemblyString" /&gt;</ph> foi compilada com uma versão posterior.</target>       </trans-unit>
        <trans-unit id="1899" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.String)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1900" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.String)">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="1901" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.String)">
          <source>for access to read from a file or directory, and for access to the information in the path itself.</source>
          <target state="translated">para acesso de leitura de um arquivo ou um diretório, e para acesso às informações no próprio caminho.</target>       </trans-unit>
        <trans-unit id="1902" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.String)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">Enumerações associadas: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1903" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.String)">
          <source>for the ability to access the location of the assembly if the assembly is not local.</source>
          <target state="translated">para a capacidade de acessar o local do conjunto caso o assembly não seja local.</target>       </trans-unit>
        <trans-unit id="1904" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
          <source>An array of type <ph id="ph1">&lt;see langword="byte" /&gt;</ph> that is a COFF-based image containing an emitted assembly.</source>
          <target state="translated">Uma matriz do tipo <ph id="ph1">&lt;see langword="byte" /&gt;</ph> que é uma imagem baseada em COFF contendo um assembly emitido.</target>       </trans-unit>
        <trans-unit id="1905" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
          <source>An array of type <ph id="ph1">&lt;see langword="byte" /&gt;</ph> containing the raw bytes representing the symbols for the assembly.</source>
          <target state="translated">Uma matriz do tipo <ph id="ph1">&lt;see langword="byte" /&gt;</ph> contendo os bytes brutos que representam os símbolos para o assembly.</target>       </trans-unit>
        <trans-unit id="1906" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
          <source>Loads the <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> with a common object file format (COFF) based image containing an emitted <ph id="ph2">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph>.</source>
          <target state="translated">Carrega o <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> com uma imagem baseada em formato COFF, contendo um <ph id="ph2">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> emitido.</target>       </trans-unit>
        <trans-unit id="1907" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
          <source>The raw bytes representing the symbols for the <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> are also loaded.</source>
          <target state="translated">Os bytes brutos que representam os símbolos para o <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> também são carregados.</target>       </trans-unit>
        <trans-unit id="1908" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
          <source>The loaded assembly.</source>
          <target state="translated">O assembly carregado.</target>       </trans-unit>
        <trans-unit id="1909" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the trust level of an assembly that is loaded by using this method is the same as the trust level of the application domain.</source>
          <target state="translated">Começando com o <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, o nível de confiança de um assembly carregado usando esse método é o mesmo que o nível de confiança do domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="1910" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
          <source>This method should be used only to load an assembly into the current application domain.</source>
          <target state="translated">Este método só deve ser usado para carregar um assembly no domínio de aplicativo atual.</target>       </trans-unit>
        <trans-unit id="1911" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
          <source>This method is provided as a convenience for interoperability callers who cannot call the static <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Este método é fornecido como uma praticidade para chamadores de interoperabilidade que não possam chamar o método estático <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1912" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
          <source>To load assemblies into other application domains, use a method such as <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</ph>.</source>
          <target state="translated">Para carregar assemblies em outros domínios de aplicativo, use um método como <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1913" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
          <source>For information that is common to all overloads of this method, see the <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph> method overload.</source>
          <target state="translated">Para informações comuns a todas as sobrecargas desse método, consulte a sobrecarga do método <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1914" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
          <source>The following sample demonstrates the use of loading a raw assembly.</source>
          <target state="translated">O exemplo a seguir demonstra o uso de carregar um assembly bruto.</target>       </trans-unit>
        <trans-unit id="1915" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
          <source>For this code example to run, you must provide the fully qualified assembly name.</source>
          <target state="translated">Para este exemplo de código ser executado, você deve fornecer o nome de assembly totalmente qualificado.</target>       </trans-unit>
        <trans-unit id="1916" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
          <source>For information about how to obtain the fully qualified assembly name, see <bpt id="p1">[</bpt>Assembly Names<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</source>
          <target state="translated">Para obter informações sobre como obter o nome totalmente qualificado do assembly, consulte <bpt id="p1">[</bpt>nomes de Assembly<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</target>       </trans-unit>
        <trans-unit id="1917" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="rawAssembly" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rawAssembly" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1918" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="rawAssembly" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rawAssembly" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="1919" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1920" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
          <source>Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;paramref name="rawAssembly" /&gt;</ph> was compiled with a later version.</source>
          <target state="translated">A versão 2,0 ou posterior do Common Language Runtime está carregada e <ph id="ph1">&lt;paramref name="rawAssembly" /&gt;</ph> foi compilada com uma versão posterior.</target>       </trans-unit>
        <trans-unit id="1921" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1922" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="1923" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
          <source>for reading a URI that does not begin with "file://".</source>
          <target state="translated">para ler um URI que não começa com "file://".</target>       </trans-unit>
        <trans-unit id="1924" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
          <source>for access to read from a file or directory, and for access to the information in the path itself.</source>
          <target state="translated">para acesso de leitura de um arquivo ou um diretório, e para acesso às informações no próprio caminho.</target>       </trans-unit>
        <trans-unit id="1925" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">Enumerações associadas: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1926" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)">
          <source>An object that describes the assembly to load.</source>
          <target state="translated">O objeto que descreve o assembly a ser carregado.</target>       </trans-unit>
        <trans-unit id="1927" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)">
          <source>Evidence for loading the assembly.</source>
          <target state="translated">Evidência para carregar o assembly.</target>       </trans-unit>
        <trans-unit id="1928" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)">
          <source>Loads an <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> given its <ph id="ph2">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph>.</source>
          <target state="translated">Carrega um <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> dado seu <ph id="ph2">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1929" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)">
          <source>The loaded assembly.</source>
          <target state="translated">O assembly carregado.</target>       </trans-unit>
        <trans-unit id="1930" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)">
          <source>This method should be used only to load an assembly into the current application domain.</source>
          <target state="translated">Este método só deve ser usado para carregar um assembly no domínio de aplicativo atual.</target>       </trans-unit>
        <trans-unit id="1931" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)">
          <source>This method is provided as a convenience for interoperability callers who cannot call the static <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Este método é fornecido como uma praticidade para chamadores de interoperabilidade que não possam chamar o método estático <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1932" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)">
          <source>To load assemblies into other application domains, use a method such as <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</ph>.</source>
          <target state="translated">Para carregar assemblies em outros domínios de aplicativo, use um método como <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1933" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)">
          <source>For information that is common to all overloads of this method, see the <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph> method overload.</source>
          <target state="translated">Para informações comuns a todas as sobrecargas desse método, consulte a sobrecarga do método <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1934" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="assemblyRef" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyRef" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1935" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="assemblyRef" /&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyRef" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="1936" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="assemblyRef" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyRef" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="1937" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1938" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)">
          <source>Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;paramref name="assemblyRef" /&gt;</ph> was compiled with a later version.</source>
          <target state="translated">A versão 2,0 ou posterior do Common Language Runtime está carregada e <ph id="ph1">&lt;paramref name="assemblyRef" /&gt;</ph> foi compilada com uma versão posterior.</target>       </trans-unit>
        <trans-unit id="1939" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1940" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="1941" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)">
          <source>for access to read from a file or directory, and for access to the information in the path itself.</source>
          <target state="translated">para acesso de leitura de um arquivo ou um diretório, e para acesso às informações no próprio caminho.</target>       </trans-unit>
        <trans-unit id="1942" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">Enumerações associadas: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1943" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)">
          <source>to load an assembly with evidence.</source>
          <target state="translated">para carregar um assembly com evidências.</target>       </trans-unit>
        <trans-unit id="1944" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1945" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)">
          <source>for reading a path that is not in the form "file://" or "<ph id="ph1">\\</ph>\UNC\dir<ph id="ph2">\\</ph>" or "c:<ph id="ph3">\\</ph>".</source>
          <target state="translated">para ler um caminho que não está no formato "file://" ou "<ph id="ph1">\\</ph>\UNC\dir<ph id="ph2">\\</ph>" ou "c:<ph id="ph3">\\</ph>".</target>       </trans-unit>
        <trans-unit id="1946" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.String,System.Security.Policy.Evidence)">
          <source>The display name of the assembly.</source>
          <target state="translated">O nome para exibição do assembly.</target>       </trans-unit>
        <trans-unit id="1947" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.String,System.Security.Policy.Evidence)">
          <source>See <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</source>
          <target state="translated">Consulte <ph id="ph1">&lt;see cref="P:System.Reflection.Assembly.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1948" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.String,System.Security.Policy.Evidence)">
          <source>Evidence for loading the assembly.</source>
          <target state="translated">Evidência para carregar o assembly.</target>       </trans-unit>
        <trans-unit id="1949" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.String,System.Security.Policy.Evidence)">
          <source>Loads an <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> given its display name.</source>
          <target state="translated">Carrega um <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> de acordo com seu nome de exibição.</target>       </trans-unit>
        <trans-unit id="1950" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.String,System.Security.Policy.Evidence)">
          <source>The loaded assembly.</source>
          <target state="translated">O assembly carregado.</target>       </trans-unit>
        <trans-unit id="1951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.String,System.Security.Policy.Evidence)">
          <source>This method should be used only to load an assembly into the current application domain.</source>
          <target state="translated">Este método só deve ser usado para carregar um assembly no domínio de aplicativo atual.</target>       </trans-unit>
        <trans-unit id="1952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.String,System.Security.Policy.Evidence)">
          <source>This method is provided as a convenience for interoperability callers who cannot call the static <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Este método é fornecido como uma praticidade para chamadores de interoperabilidade que não possam chamar o método estático <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1953" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.String,System.Security.Policy.Evidence)">
          <source>To load assemblies into other application domains, use a method such as <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</ph>.</source>
          <target state="translated">Para carregar assemblies em outros domínios de aplicativo, use um método como <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1954" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.String,System.Security.Policy.Evidence)">
          <source>For information that is common to all overloads of this method, see the <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph> method overload.</source>
          <target state="translated">Para informações comuns a todas as sobrecargas desse método, consulte a sobrecarga do método <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1955" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.String,System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="assemblyString" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyString" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1956" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.String,System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="assemblyString" /&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyString" /&gt;</ph> não foi encontrado.</target>       </trans-unit>
        <trans-unit id="1957" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.String,System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="assemblyString" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyString" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="1958" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.String,System.Security.Policy.Evidence)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1959" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.String,System.Security.Policy.Evidence)">
          <source>Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;paramref name="assemblyString" /&gt;</ph> was compiled with a later version.</source>
          <target state="translated">A versão 2,0 ou posterior do Common Language Runtime está carregada e <ph id="ph1">&lt;paramref name="assemblyString" /&gt;</ph> foi compilada com uma versão posterior.</target>       </trans-unit>
        <trans-unit id="1960" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.String,System.Security.Policy.Evidence)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1961" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.String,System.Security.Policy.Evidence)">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="1962" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.String,System.Security.Policy.Evidence)">
          <source>to load an assembly with evidence.</source>
          <target state="translated">para carregar um assembly com evidências.</target>       </trans-unit>
        <trans-unit id="1963" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.String,System.Security.Policy.Evidence)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1964" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.String,System.Security.Policy.Evidence)">
          <source>for access to read from a file or directory, and for access to the information in the path itself.</source>
          <target state="translated">para acesso de leitura de um arquivo ou um diretório, e para acesso às informações no próprio caminho.</target>       </trans-unit>
        <trans-unit id="1965" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.String,System.Security.Policy.Evidence)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">Enumerações associadas: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1966" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.String,System.Security.Policy.Evidence)">
          <source>for reading a path that is not in the form "file://" or "<ph id="ph1">\\</ph>\UNC\dir<ph id="ph2">\\</ph>" or "c:<ph id="ph3">\\</ph>".</source>
          <target state="translated">para ler um caminho que não está no formato "file://" ou "<ph id="ph1">\\</ph>\UNC\dir<ph id="ph2">\\</ph>" ou "c:<ph id="ph3">\\</ph>".</target>       </trans-unit>
        <trans-unit id="1967" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
          <source>An array of type <ph id="ph1">&lt;see langword="byte" /&gt;</ph> that is a COFF-based image containing an emitted assembly.</source>
          <target state="translated">Uma matriz do tipo <ph id="ph1">&lt;see langword="byte" /&gt;</ph> que é uma imagem baseada em COFF contendo um assembly emitido.</target>       </trans-unit>
        <trans-unit id="1968" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
          <source>An array of type <ph id="ph1">&lt;see langword="byte" /&gt;</ph> containing the raw bytes representing the symbols for the assembly.</source>
          <target state="translated">Uma matriz do tipo <ph id="ph1">&lt;see langword="byte" /&gt;</ph> contendo os bytes brutos que representam os símbolos para o assembly.</target>       </trans-unit>
        <trans-unit id="1969" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
          <source>Evidence for loading the assembly.</source>
          <target state="translated">Evidência para carregar o assembly.</target>       </trans-unit>
        <trans-unit id="1970" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
          <source>Loads the <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> with a common object file format (COFF) based image containing an emitted <ph id="ph2">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph>.</source>
          <target state="translated">Carrega o <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> com uma imagem baseada em formato COFF, contendo um <ph id="ph2">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> emitido.</target>       </trans-unit>
        <trans-unit id="1971" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
          <source>The raw bytes representing the symbols for the <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> are also loaded.</source>
          <target state="translated">Os bytes brutos que representam os símbolos para o <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> também são carregados.</target>       </trans-unit>
        <trans-unit id="1972" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
          <source>The loaded assembly.</source>
          <target state="translated">O assembly carregado.</target>       </trans-unit>
        <trans-unit id="1973" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the trust level of an assembly that is loaded by using this method is the same as the trust level of the application domain.</source>
          <target state="translated">Começando com o <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, o nível de confiança de um assembly carregado usando esse método é o mesmo que o nível de confiança do domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="1974" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
          <source>This method should be used only to load an assembly into the current application domain.</source>
          <target state="translated">Este método só deve ser usado para carregar um assembly no domínio de aplicativo atual.</target>       </trans-unit>
        <trans-unit id="1975" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
          <source>This method is provided as a convenience for interoperability callers who cannot call the static <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Este método é fornecido como uma praticidade para chamadores de interoperabilidade que não possam chamar o método estático <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1976" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
          <source>To load assemblies into other application domains, use a method such as <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</ph>.</source>
          <target state="translated">Para carregar assemblies em outros domínios de aplicativo, use um método como <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1977" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
          <source>For information that is common to all overloads of this method, see the <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph> method overload.</source>
          <target state="translated">Para informações comuns a todas as sobrecargas desse método, consulte a sobrecarga do método <ph id="ph1">&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1978" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
          <source>The following sample demonstrates the use of loading a raw assembly.</source>
          <target state="translated">O exemplo a seguir demonstra o uso de carregar um assembly bruto.</target>       </trans-unit>
        <trans-unit id="1979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
          <source>For this code example to run, you must provide the fully qualified assembly name.</source>
          <target state="translated">Para este exemplo de código ser executado, você deve fornecer o nome de assembly totalmente qualificado.</target>       </trans-unit>
        <trans-unit id="1980" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
          <source>For information about how to obtain the fully qualified assembly name, see <bpt id="p1">[</bpt>Assembly Names<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</source>
          <target state="translated">Para obter informações sobre como obter o nome totalmente qualificado do assembly, consulte <bpt id="p1">[</bpt>nomes de Assembly<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</target>       </trans-unit>
        <trans-unit id="1981" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="rawAssembly" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rawAssembly" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1982" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="rawAssembly" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rawAssembly" /&gt;</ph> não é um assembly válido.</target>       </trans-unit>
        <trans-unit id="1983" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1984" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
          <source>Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;paramref name="rawAssembly" /&gt;</ph> was compiled with a later version.</source>
          <target state="translated">A versão 2,0 ou posterior do Common Language Runtime está carregada e <ph id="ph1">&lt;paramref name="rawAssembly" /&gt;</ph> foi compilada com uma versão posterior.</target>       </trans-unit>
        <trans-unit id="1985" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="1986" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">Um assembly ou módulo foi carregado duas vezes em com duas evidências diferentes.</target>       </trans-unit>
        <trans-unit id="1987" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
          <source><ph id="ph1">&lt;paramref name="securityEvidence" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="securityEvidence" /&gt;</ph> não é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1988" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
          <source>When legacy CAS policy is not enabled, <ph id="ph1">&lt;paramref name="securityEvidence" /&gt;</ph> should be <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Quando a política CAS herdada não está habilitada, <ph id="ph1">&lt;paramref name="securityEvidence" /&gt;</ph> deve ser <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1989" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
          <source>to provide evidence.</source>
          <target state="translated">para fornecer evidência.</target>       </trans-unit>
        <trans-unit id="1990" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1991" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.Demand" /&gt;</ph>.</source>
          <target state="translated">Ação de segurança: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.Demand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1992" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
          <source>for access to read from a file or directory, and for access to the information in the path itself.</source>
          <target state="translated">para acesso de leitura de um arquivo ou um diretório, e para acesso às informações no próprio caminho.</target>       </trans-unit>
        <trans-unit id="1993" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">Enumerações associadas: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1994" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
          <source>for reading a path that is not in the form "file://" or "<ph id="ph1">\\</ph>\UNC\dir<ph id="ph2">\\</ph>" or "c:<ph id="ph3">\\</ph>".</source>
          <target state="translated">para ler um caminho que não está no formato "file://" ou "<ph id="ph1">\\</ph>\UNC\dir<ph id="ph2">\\</ph>" ou "c:<ph id="ph3">\\</ph>".</target>       </trans-unit>
        <trans-unit id="1995" translate="yes" xml:space="preserve" uid="P:System.AppDomain.MonitoringIsEnabled">
          <source>Gets or sets a value that indicates whether CPU and memory monitoring of application domains is enabled for the current process.</source>
          <target state="translated">Obtém ou define um valor que indica se o monitoramento de CPU e memória de domínios de aplicativo está habilitado para o processo atual.</target>       </trans-unit>
        <trans-unit id="1996" translate="yes" xml:space="preserve" uid="P:System.AppDomain.MonitoringIsEnabled">
          <source>Once monitoring is enabled for a process, it cannot be disabled.</source>
          <target state="translated">Depois que o monitoramento é habilitado para um processo, ele não pode ser desabilitado.</target>       </trans-unit>
        <trans-unit id="1997" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.MonitoringIsEnabled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if monitoring is enabled; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o monitoramento está habilitado; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1998" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.MonitoringIsEnabled">
          <source>This <ph id="ph1">`static`</ph> property (<ph id="ph2">`Shared`</ph> property in Visual Basic) controls CPU and memory monitoring of all the application domains in the process.</source>
          <target state="translated">Isso <ph id="ph1">`static`</ph> propriedade (<ph id="ph2">`Shared`</ph> propriedade no Visual Basic) controla a CPU e memória de monitoramento de todos os domínios de aplicativo no processo.</target>       </trans-unit>
        <trans-unit id="1999" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.MonitoringIsEnabled">
          <source>If you attempt to set this property to <ph id="ph1">`false`</ph>, a <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> exception is thrown, even if the current value of the property is <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Se você tentar definir essa propriedade como <ph id="ph1">`false`</ph>, um <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> exceção for lançada, mesmo se o valor atual da propriedade é <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="2000" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.MonitoringIsEnabled">
          <source>Once monitoring is enabled, you can use the <ph id="ph1">&lt;xref:System.AppDomain.MonitoringSurvivedMemorySize%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.AppDomain.MonitoringSurvivedProcessMemorySize%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.AppDomain.MonitoringTotalAllocatedMemorySize%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.AppDomain.MonitoringTotalProcessorTime%2A&gt;</ph> instance properties to monitor CPU and memory use of individual application domains.</source>
          <target state="translated">Depois que o monitoramento estiver habilitado, você pode usar o <ph id="ph1">&lt;xref:System.AppDomain.MonitoringSurvivedMemorySize%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.AppDomain.MonitoringSurvivedProcessMemorySize%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.AppDomain.MonitoringTotalAllocatedMemorySize%2A&gt;</ph>, e <ph id="ph4">&lt;xref:System.AppDomain.MonitoringTotalProcessorTime%2A&gt;</ph> propriedades para monitorar o uso de CPU e memória de domínios de aplicativos individuais da instância.</target>       </trans-unit>
        <trans-unit id="2001" translate="yes" xml:space="preserve" uid="P:System.AppDomain.MonitoringIsEnabled">
          <source>The current process attempted to assign the value <ph id="ph1">&lt;see langword="false" /&gt;</ph> to this property.</source>
          <target state="translated">O processo atual tentou atribuir o valor <ph id="ph1">&lt;see langword="false" /&gt;</ph> a esta propriedade.</target>       </trans-unit>
        <trans-unit id="2002" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.MonitoringIsEnabled">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">Requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="2003" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.MonitoringIsEnabled">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="2004" translate="yes" xml:space="preserve" uid="P:System.AppDomain.MonitoringSurvivedMemorySize">
          <source>Gets the number of bytes that survived the last collection and that are known to be referenced by the current application domain.</source>
          <target state="translated">Obtém o número de bytes que sobreviveram à última coleta e que são conhecidos por serem referenciados pelo domínio do aplicativo atual.</target>       </trans-unit>
        <trans-unit id="2005" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.MonitoringSurvivedMemorySize">
          <source>The number of surviving bytes.</source>
          <target state="translated">O número de bytes sobreviventes.</target>       </trans-unit>
        <trans-unit id="2006" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.MonitoringSurvivedMemorySize">
          <source>The statistics are updated with each garbage collection.</source>
          <target state="translated">As estatísticas são atualizadas com cada coleta de lixo.</target>       </trans-unit>
        <trans-unit id="2007" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.MonitoringSurvivedMemorySize">
          <source>However, they are guaranteed to be accurate only after a full, blocking collection; that is, a collection that includes all generations and that stops the application while collection occurs.</source>
          <target state="translated">No entanto, eles não têm garantia sejam precisos somente após um completo, bloqueio de uma coleção. ou seja, uma coleção que inclui todas as gerações e que interrompe o aplicativo durante a coleta ocorre.</target>       </trans-unit>
        <trans-unit id="2008" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.MonitoringSurvivedMemorySize">
          <source>For example, the <ph id="ph1">&lt;xref:System.GC.Collect?displayProperty=nameWithType&gt;</ph> method overload performs a full, blocking collection.</source>
          <target state="translated">Por exemplo, o <ph id="ph1">&lt;xref:System.GC.Collect?displayProperty=nameWithType&gt;</ph> sobrecarga do método executa um completo, bloqueio de coleta.</target>       </trans-unit>
        <trans-unit id="2009" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.MonitoringSurvivedMemorySize">
          <source>(Concurrent collection occurs in the background and does not block the application.)</source>
          <target state="translated">(Coleção simultânea ocorre em segundo plano e não bloqueia o aplicativo.)</target>       </trans-unit>
        <trans-unit id="2010" translate="yes" xml:space="preserve" uid="P:System.AppDomain.MonitoringSurvivedMemorySize">
          <source>The <ph id="ph1">&lt;see langword="static" /&gt;</ph> (<ph id="ph2">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) <ph id="ph3">&lt;see cref="P:System.AppDomain.MonitoringIsEnabled" /&gt;</ph> property is set to <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="static" /&gt;</ph> (<ph id="ph2">&lt;see langword="Shared" /&gt;</ph> no Visual Basic) <ph id="ph3">&lt;see cref="P:System.AppDomain.MonitoringIsEnabled" /&gt;</ph> é definida como <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2011" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.MonitoringSurvivedMemorySize">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">Requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="2012" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.MonitoringSurvivedMemorySize">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="2013" translate="yes" xml:space="preserve" uid="P:System.AppDomain.MonitoringSurvivedProcessMemorySize">
          <source>Gets the total bytes that survived from the last collection for all application domains in the process.</source>
          <target state="translated">Obtém o total de bytes que sobreviveram da última coleção para todos os domínios de aplicativo no processo.</target>       </trans-unit>
        <trans-unit id="2014" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.MonitoringSurvivedProcessMemorySize">
          <source>The total number of surviving bytes for the process.</source>
          <target state="translated">O número total de bytes restantes para o processo.</target>       </trans-unit>
        <trans-unit id="2015" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.MonitoringSurvivedProcessMemorySize">
          <source>After a full, blocking collection, this number represents the number of bytes currently held live on managed heaps.</source>
          <target state="translated">Depois de um conjunto completo, bloqueio, esse número representará o número de bytes contido em tempo real em heaps gerenciados.</target>       </trans-unit>
        <trans-unit id="2016" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.MonitoringSurvivedProcessMemorySize">
          <source>It should be close to the number reported by the <ph id="ph1">&lt;xref:System.GC.GetTotalMemory%2A&gt;</ph> method.</source>
          <target state="translated">Ele deve ser o próximo o número relatado pelo <ph id="ph1">&lt;xref:System.GC.GetTotalMemory%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="2017" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.MonitoringSurvivedProcessMemorySize">
          <source>After an ephemeral collection, this number represents the number of bytes currently held live in ephemeral generations.</source>
          <target state="translated">Depois de uma coleção efêmera, esse número representará o número de bytes que estão retidas ao vivo em gerações efêmeras.</target>       </trans-unit>
        <trans-unit id="2018" translate="yes" xml:space="preserve" uid="P:System.AppDomain.MonitoringSurvivedProcessMemorySize">
          <source>The <ph id="ph1">&lt;see langword="static" /&gt;</ph> (<ph id="ph2">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) <ph id="ph3">&lt;see cref="P:System.AppDomain.MonitoringIsEnabled" /&gt;</ph> property is set to <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="static" /&gt;</ph> (<ph id="ph2">&lt;see langword="Shared" /&gt;</ph> no Visual Basic) <ph id="ph3">&lt;see cref="P:System.AppDomain.MonitoringIsEnabled" /&gt;</ph> é definida como <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2019" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.MonitoringSurvivedProcessMemorySize">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">Requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="2020" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.MonitoringSurvivedProcessMemorySize">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="2021" translate="yes" xml:space="preserve" uid="P:System.AppDomain.MonitoringTotalAllocatedMemorySize">
          <source>Gets the total size, in bytes, of all memory allocations that have been made by the application domain since it was created, without subtracting memory that has been collected.</source>
          <target state="translated">Obtém o tamanho total, em bytes, de todas as alocações de memória que foram feitas pelo domínio do aplicativo desde que ele foi criado, sem subtrair a memória que foi coletada.</target>       </trans-unit>
        <trans-unit id="2022" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.MonitoringTotalAllocatedMemorySize">
          <source>The total size of all memory allocations.</source>
          <target state="translated">O tamanho total de todas as alocações de memória.</target>       </trans-unit>
        <trans-unit id="2023" translate="yes" xml:space="preserve" uid="P:System.AppDomain.MonitoringTotalAllocatedMemorySize">
          <source>The <ph id="ph1">&lt;see langword="static" /&gt;</ph> (<ph id="ph2">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) <ph id="ph3">&lt;see cref="P:System.AppDomain.MonitoringIsEnabled" /&gt;</ph> property is set to <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="static" /&gt;</ph> (<ph id="ph2">&lt;see langword="Shared" /&gt;</ph> no Visual Basic) <ph id="ph3">&lt;see cref="P:System.AppDomain.MonitoringIsEnabled" /&gt;</ph> é definida como <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2024" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.MonitoringTotalAllocatedMemorySize">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">Requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="2025" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.MonitoringTotalAllocatedMemorySize">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="2026" translate="yes" xml:space="preserve" uid="P:System.AppDomain.MonitoringTotalProcessorTime">
          <source>Gets the total processor time that has been used by all threads while executing in the current application domain, since the process started.</source>
          <target state="translated">Obtém o tempo total do processador usado por todos os threads durante a execução no domínio do aplicativo atual, desde o início do processo.</target>       </trans-unit>
        <trans-unit id="2027" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.MonitoringTotalProcessorTime">
          <source>Total processor time for the current application domain.</source>
          <target state="translated">Tempo total do processador para o domínio do aplicativo atual.</target>       </trans-unit>
        <trans-unit id="2028" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.MonitoringTotalProcessorTime">
          <source>The total time that is reported for an application domain includes the time each thread in the process spent executing in that application domain.</source>
          <target state="translated">O tempo total que é relatado para um domínio de aplicativo inclui o tempo gasto em cada thread no processo de execução no domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="2029" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.MonitoringTotalProcessorTime">
          <source>A thread that calls into unmanaged code is still associated with an application domain, and the processor time spent executing the unmanaged code is reported for the application domain where the call was made.</source>
          <target state="translated">Um thread que chamam o código não gerenciado ainda está associado com um domínio de aplicativo e o tempo do processador gasto na execução que de código não gerenciado é relatado para o domínio de aplicativo em que a chamada foi feita.</target>       </trans-unit>
        <trans-unit id="2030" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.MonitoringTotalProcessorTime">
          <source>When a thread is blocked or sleeping, it does not consume processor time.</source>
          <target state="translated">Quando um thread está bloqueado ou suspenso, ele não consome tempo do processador.</target>       </trans-unit>
        <trans-unit id="2031" translate="yes" xml:space="preserve" uid="P:System.AppDomain.MonitoringTotalProcessorTime">
          <source>The <ph id="ph1">&lt;see langword="static" /&gt;</ph> (<ph id="ph2">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) <ph id="ph3">&lt;see cref="P:System.AppDomain.MonitoringIsEnabled" /&gt;</ph> property is set to <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see langword="static" /&gt;</ph> (<ph id="ph2">&lt;see langword="Shared" /&gt;</ph> no Visual Basic) <ph id="ph3">&lt;see cref="P:System.AppDomain.MonitoringIsEnabled" /&gt;</ph> é definida como <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2032" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.MonitoringTotalProcessorTime">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">Requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="2033" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.MonitoringTotalProcessorTime">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="2034" translate="yes" xml:space="preserve" uid="P:System.AppDomain.PermissionSet">
          <source>Gets the permission set of a sandboxed application domain.</source>
          <target state="translated">Obtém o conjunto de permissões de um domínio de aplicativo em área restrita.</target>       </trans-unit>
        <trans-unit id="2035" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.PermissionSet">
          <source>The permission set of the sandboxed application domain.</source>
          <target state="translated">O conjunto de permissões de um domínio de aplicativo em área restrita.</target>       </trans-unit>
        <trans-unit id="2036" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.PermissionSet">
          <source>Sandboxed application domains that were created by using the <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType&gt;</ph> method overload have a homogenous set of permissions; that is, the same set of permissions is granted to all partially trusted assemblies that are loaded into the application domain.</source>
          <target state="translated">Domínios de aplicativo no modo seguro que foram criados usando o <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType&gt;</ph> sobrecarga de método tem um homogêneo conjunto de permissões; isto é, o mesmo conjunto de permissões é concedido a todos os assemblies parcialmente confiáveis que são carregados no domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="2037" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.PermissionSet">
          <source>A sandboxed application domain optionally has a list of strong-named assemblies that are exempt from this permission set, and instead run with full trust.</source>
          <target state="translated">Opcionalmente, um domínio de aplicativo na área restrita tem uma lista de assemblies de nomes fortes que são isentos essa permissão definida e, em vez disso, é executado com confiança total.</target>       </trans-unit>
        <trans-unit id="2038" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.PermissionSet">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">Requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="2039" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.PermissionSet">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="2040" translate="yes" xml:space="preserve" uid="E:System.AppDomain.ProcessExit">
          <source>Occurs when the default application domain's parent process exits.</source>
          <target state="translated">Ocorre quando o processo pai do domínio de aplicativo padrão é encerrado.</target>       </trans-unit>
        <trans-unit id="2041" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ProcessExit">
          <source>The <ph id="ph1">&lt;xref:System.EventHandler&gt;</ph> for this event can perform termination activities, such as closing files, releasing storage and so on, before the process ends.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.EventHandler&gt;</ph> para esse evento pode executar atividades de término, como fechar arquivos, liberação de armazenamento e assim por diante, antes do término do processo.</target>       </trans-unit>
        <trans-unit id="2042" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ProcessExit">
          <source>Beginning with the .NET Framework version 2.0, this event is raised in each application domain that registers an event handler.</source>
          <target state="translated">Começando com o .NET Framework versão 2.0, esse evento é gerado em cada domínio de aplicativo que registra um manipulador de eventos.</target>       </trans-unit>
        <trans-unit id="2043" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ProcessExit">
          <source>The total execution time of all <ph id="ph1">&lt;xref:System.AppDomain.ProcessExit&gt;</ph> event handlers is limited, just as the total execution time of all finalizers is limited at process shutdown.</source>
          <target state="translated">Tempo total de execução de todos os <ph id="ph1">&lt;xref:System.AppDomain.ProcessExit&gt;</ph> manipuladores de eventos é limitado, assim como o tempo de execução total de todos os finalizadores é limitado no encerramento do processo.</target>       </trans-unit>
        <trans-unit id="2044" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ProcessExit">
          <source>The default is two seconds.</source>
          <target state="translated">O padrão é dois segundos.</target>       </trans-unit>
        <trans-unit id="2045" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ProcessExit">
          <source>An unmanaged host can change this execution time by calling the <bpt id="p1">[</bpt>ICLRPolicyManager::SetTimeout<ept id="p1">](~/docs/framework/unmanaged-api/hosting/iclrpolicymanager-settimeout-method.md)</ept> method with the <bpt id="p2">[</bpt>OPR_ProcessExit<ept id="p2">](~/docs/framework/unmanaged-api/hosting/eclroperation-enumeration.md)</ept> enumeration value.</source>
          <target state="translated">Um host não gerenciado pode alterar esse tempo de execução chamando o <bpt id="p1">[</bpt>ICLRPolicyManager<ept id="p1">](~/docs/framework/unmanaged-api/hosting/iclrpolicymanager-settimeout-method.md)</ept> método com o <bpt id="p2">[</bpt>OPR_ProcessExit<ept id="p2">](~/docs/framework/unmanaged-api/hosting/eclroperation-enumeration.md)</ept> valor de enumeração.</target>       </trans-unit>
        <trans-unit id="2046" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ProcessExit">
          <source>In the .NET Framework versions 1.0 and 1.1, this event is raised only in the default application domain, and only if an event handler is registered in the default application domain.</source>
          <target state="translated">Nas versões do .NET Framework 1.0 e 1.1, esse evento é gerado apenas no domínio de aplicativo padrão e somente se um manipulador de eventos é registrado no domínio de aplicativo padrão.</target>       </trans-unit>
        <trans-unit id="2047" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ProcessExit">
          <source>To register an event handler for this event, you must have the required permissions, or a <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown.</source>
          <target state="translated">Para registrar um manipulador de eventos para esse evento, você deve ter as permissões necessárias, ou um <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> é lançado.</target>       </trans-unit>
        <trans-unit id="2048" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ProcessExit">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre a manipulação de eventos, consulte <bpt id="p1">[</bpt>tratamento e gerando eventos<ept id="p1">](~/docs/standard/events/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2049" translate="yes" xml:space="preserve" uid="E:System.AppDomain.ReflectionOnlyAssemblyResolve">
          <source>Occurs when the resolution of an assembly fails in the reflection-only context.</source>
          <target state="translated">Ocorre quando a resolução de um assembly falha no contexto somente para reflexão.</target>       </trans-unit>
        <trans-unit id="2050" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ReflectionOnlyAssemblyResolve">
          <source>In the reflection-only context, dependencies are not resolved automatically.</source>
          <target state="translated">No contexto exclusivo de reflexão, dependências não são resolvidas automaticamente.</target>       </trans-unit>
        <trans-unit id="2051" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ReflectionOnlyAssemblyResolve">
          <source>They must be preloaded or returned by the handler for this event.</source>
          <target state="translated">Eles devem ser pré-carregados ou retornados pelo manipulador para este evento.</target>       </trans-unit>
        <trans-unit id="2052" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ReflectionOnlyAssemblyResolve">
          <source>This event is raised when an assembly has a dependency that is not already loaded into the reflection-only context.</source>
          <target state="translated">Esse evento é gerado quando um assembly tem uma dependência que já não foi carregada no contexto exclusivo de reflexão.</target>       </trans-unit>
        <trans-unit id="2053" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ReflectionOnlyAssemblyResolve">
          <source>The missing dependency is specified by the <ph id="ph1">&lt;xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">A dependência ausente é especificada pelo <ph id="ph1">&lt;xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="2054" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ReflectionOnlyAssemblyResolve">
          <source>The <ph id="ph1">&lt;xref:System.ResolveEventHandler&gt;</ph> for this event must return an assembly that satisfies the dependency.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.ResolveEventHandler&gt;</ph> para esse evento deve retornar um assembly que satisfaz a dependência.</target>       </trans-unit>
        <trans-unit id="2055" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ReflectionOnlyAssemblyResolve">
          <source>The assembly that is returned must be loaded into the reflection-only context.</source>
          <target state="translated">O assembly que é retornado deve ser carregado no contexto exclusivo de reflexão.</target>       </trans-unit>
        <trans-unit id="2056" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ReflectionOnlyAssemblyResolve">
          <source>This event is raised only for missing dependencies of the assembly that you are loading into the reflection-only context (for example, by using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType&gt;</ph> method).</source>
          <target state="translated">Esse evento é gerado apenas para dependências ausentes do assembly que você está carregando no contexto de somente reflexão (por exemplo, usando o <ph id="ph1">&lt;xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType&gt;</ph> método).</target>       </trans-unit>
        <trans-unit id="2057" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ReflectionOnlyAssemblyResolve">
          <source>It is not raised if the assembly that you are loading cannot be found.</source>
          <target state="translated">Ele não será gerado se o assembly que você está carregando não pode ser encontrado.</target>       </trans-unit>
        <trans-unit id="2058" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ReflectionOnlyAssemblyResolve">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType&gt;</ph> property returns the assembly that requested the assembly load that could not be resolved.</source>
          <target state="translated">Começando com o <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, o <ph id="ph2">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType&gt;</ph> propriedade retorna o assembly que pediu a carga de assembly não pôde ser resolvida.</target>       </trans-unit>
        <trans-unit id="2059" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ReflectionOnlyAssemblyResolve">
          <source>Knowing the identity of the requesting assembly might be useful in identifying the correct version of the dependency, if more than one version is available.</source>
          <target state="translated">Saber a identidade do solicitante assembly pode ser útil para identificar a versão correta da dependência, se houver mais de uma versão.</target>       </trans-unit>
        <trans-unit id="2060" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ReflectionOnlyAssemblyResolve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Para obter mais informações, consulte <ph id="ph1">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2061" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ReflectionOnlyAssemblyResolve">
          <source>For this event, the <ph id="ph1">&lt;xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType&gt;</ph> property returns the assembly name before policy is applied.</source>
          <target state="translated">Para esse evento, o <ph id="ph1">&lt;xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType&gt;</ph> propriedade retorna o nome do assembly, antes da política é aplicada.</target>       </trans-unit>
        <trans-unit id="2062" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ReflectionOnlyAssemblyResolve">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre a manipulação de eventos, consulte <bpt id="p1">[</bpt>tratamento e gerando eventos<ept id="p1">](~/docs/standard/events/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2063" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ReflectionOnlyAssemblyResolve">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="2064" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ReflectionOnlyAssemblyResolve">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="2065" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ReflectionOnlyGetAssemblies">
          <source>Returns the assemblies that have been loaded into the reflection-only context of the application domain.</source>
          <target state="translated">Retorna os assemblies que foram carregados no contexto somente de reflexão do domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="2066" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ReflectionOnlyGetAssemblies">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> objects that represent the assemblies loaded into the reflection-only context of the application domain.</source>
          <target state="translated">Uma matriz de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> que representam os assemblies carregados no contexto de somente reflexão do domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="2067" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ReflectionOnlyGetAssemblies">
          <source>This method returns the assemblies that have been loaded into the reflection-only context.</source>
          <target state="translated">Esse método retorna os assemblies que tiverem sido carregados no contexto exclusivo de reflexão.</target>       </trans-unit>
        <trans-unit id="2068" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ReflectionOnlyGetAssemblies">
          <source>To get the assemblies that have been loaded for execution, use the <ph id="ph1">&lt;xref:System.AppDomain.GetAssemblies%2A&gt;</ph> method.</source>
          <target state="translated">Para obter os módulos que foram carregados para execução, use o <ph id="ph1">&lt;xref:System.AppDomain.GetAssemblies%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="2069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ReflectionOnlyGetAssemblies">
          <source>The following code example loads the System.dll assembly into the execution context and then into the reflection-only context.</source>
          <target state="translated">O exemplo de código a seguir carrega o assembly System. dll no contexto de execução e, em seguida, no contexto exclusivo de reflexão.</target>       </trans-unit>
        <trans-unit id="2070" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ReflectionOnlyGetAssemblies">
          <source>The <ph id="ph1">&lt;xref:System.AppDomain.GetAssemblies%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.AppDomain.ReflectionOnlyGetAssemblies%2A&gt;</ph> methods are used to display the assemblies loaded into each context.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.AppDomain.GetAssemblies%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.AppDomain.ReflectionOnlyGetAssemblies%2A&gt;</ph> métodos são usados para exibir os assemblies carregados em cada contexto.</target>       </trans-unit>
        <trans-unit id="2071" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ReflectionOnlyGetAssemblies">
          <source>An operation is attempted on an unloaded application domain.</source>
          <target state="translated">É feita uma tentativa de realizar uma operação em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="2072" translate="yes" xml:space="preserve" uid="P:System.AppDomain.RelativeSearchPath">
          <source>Gets the path under the base directory where the assembly resolver should probe for private assemblies.</source>
          <target state="translated">Obtém o caminho no diretório base em que o resolvedor do assembly deve investigar assemblies particulares.</target>       </trans-unit>
        <trans-unit id="2073" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.RelativeSearchPath">
          <source>The path under the base directory where the assembly resolver should probe for private assemblies.</source>
          <target state="translated">O caminho no diretório base em que o resolvedor do assembly deve investigar assemblies particulares.</target>       </trans-unit>
        <trans-unit id="2074" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.RelativeSearchPath">
          <source>Private assemblies are deployed in the same directory structure as the application.</source>
          <target state="translated">Assemblies privados são implantados na mesma estrutura de diretório do aplicativo.</target>       </trans-unit>
        <trans-unit id="2075" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.RelativeSearchPath">
          <source>If the path specified by the <ph id="ph1">&lt;xref:System.AppDomain.RelativeSearchPath%2A&gt;</ph> property is not under <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=nameWithType&gt;</ph>, it is ignored.</source>
          <target state="translated">Se o caminho especificado o <ph id="ph1">&lt;xref:System.AppDomain.RelativeSearchPath%2A&gt;</ph> propriedade não está sob <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=nameWithType&gt;</ph>, ele será ignorado.</target>       </trans-unit>
        <trans-unit id="2076" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.RelativeSearchPath">
          <source>This property returns the value set using <ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Essa propriedade retorna o valor definido usando <ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2077" translate="yes" xml:space="preserve" uid="P:System.AppDomain.RelativeSearchPath">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="2078" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.RelativeSearchPath">
          <source>for access to the path information.</source>
          <target state="translated">para acesso às informações de caminho.</target>       </trans-unit>
        <trans-unit id="2079" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.RelativeSearchPath">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2080" translate="yes" xml:space="preserve" uid="E:System.AppDomain.ResourceResolve">
          <source>Occurs when the resolution of a resource fails because the resource is not a valid linked or embedded resource in the assembly.</source>
          <target state="translated">Ocorre quando a resolução de um recurso falha devido ao recurso não ser um recurso vinculado ou inserido válido no assembly.</target>       </trans-unit>
        <trans-unit id="2081" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ResourceResolve">
          <source>The <ph id="ph1">&lt;xref:System.ResolveEventHandler&gt;</ph> for this event can attempt to locate the assembly containing the resource and return it.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.ResolveEventHandler&gt;</ph> para esse evento pode tentar localizar o assembly que contém o recurso e retorná-la.</target>       </trans-unit>
        <trans-unit id="2082" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ResourceResolve">
          <source>This event is not raised if resolution fails because no file can be found for a valid linked resource.</source>
          <target state="translated">Esse evento não será gerado se a resolução falhar porque o arquivo não pode ser encontrado para um recurso vinculado válido.</target>       </trans-unit>
        <trans-unit id="2083" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ResourceResolve">
          <source>It is raised if a manifest resource stream cannot be found, but it is not raised if an individual resource key cannot be found.</source>
          <target state="translated">Ele é gerado se um fluxo de recurso de manifesto não pode ser encontrado, mas não será gerado se uma chave de recurso individual não pode ser encontrada.</target>       </trans-unit>
        <trans-unit id="2084" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ResourceResolve">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType&gt;</ph> property contains the assembly that requested the resource.</source>
          <target state="translated">Começando com o <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, o <ph id="ph2">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType&gt;</ph> propriedade contém o assembly que o recurso solicitado.</target>       </trans-unit>
        <trans-unit id="2085" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ResourceResolve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Para obter mais informações, consulte <ph id="ph1">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2086" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ResourceResolve">
          <source>To register an event handler for this event, you must have the required permissions, or a <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown.</source>
          <target state="translated">Para registrar um manipulador de eventos para esse evento, você deve ter as permissões necessárias, ou um <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> é lançado.</target>       </trans-unit>
        <trans-unit id="2087" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ResourceResolve">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre a manipulação de eventos, consulte <bpt id="p1">[</bpt>tratamento e gerando eventos<ept id="p1">](~/docs/standard/events/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2088" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ResourceResolve">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="2089" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.ResourceResolve">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="2090" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetAppDomainPolicy(System.Security.Policy.PolicyLevel)">
          <source>The security policy level.</source>
          <target state="translated">O nível de política de segurança.</target>       </trans-unit>
        <trans-unit id="2091" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetAppDomainPolicy(System.Security.Policy.PolicyLevel)">
          <source>Establishes the security policy level for this application domain.</source>
          <target state="translated">Estabelece o nível de política de segurança para esse domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="2092" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetAppDomainPolicy(System.Security.Policy.PolicyLevel)">
          <source>Call this method before an assembly is loaded into the <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> in order for the security policy to have effect.</source>
          <target state="translated">Chamar esse método antes de um assembly é carregado para o <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> em ordem para a política de segurança para ter efeito.</target>       </trans-unit>
        <trans-unit id="2093" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetAppDomainPolicy(System.Security.Policy.PolicyLevel)">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.AppDomain.SetAppDomainPolicy%2A&gt;</ph> method to set the security policy level of an application domain.</source>
          <target state="translated">O exemplo a seguir demonstra como usar o <ph id="ph1">&lt;xref:System.AppDomain.SetAppDomainPolicy%2A&gt;</ph> método para definir o nível de política de segurança de um domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="2094" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetAppDomainPolicy(System.Security.Policy.PolicyLevel)">
          <source><ph id="ph1">&lt;paramref name="domainPolicy" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="domainPolicy" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2095" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetAppDomainPolicy(System.Security.Policy.PolicyLevel)">
          <source>The security policy level has already been set.</source>
          <target state="translated">O nível de política de segurança já foi definido.</target>       </trans-unit>
        <trans-unit id="2096" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetAppDomainPolicy(System.Security.Policy.PolicyLevel)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="2097" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetAppDomainPolicy(System.Security.Policy.PolicyLevel)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="2098" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetAppDomainPolicy(System.Security.Policy.PolicyLevel)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="2099" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetCachePath(System.String)">
          <source>The fully qualified path to the shadow copy location.</source>
          <target state="translated">O caminho totalmente qualificado para o local da cópia de sombra.</target>       </trans-unit>
        <trans-unit id="2100" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetCachePath(System.String)">
          <source>Establishes the specified directory path as the location where assemblies are shadow copied.</source>
          <target state="translated">Estabelece o caminho de diretório especificado como o local em que é feita cópia de sombra dos assemblies.</target>       </trans-unit>
        <trans-unit id="2101" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetCachePath(System.String)">
          <source>The cache path is ignored if the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> property is not set.</source>
          <target state="translated">O caminho do cache será ignorado se o <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> propriedade não está definida.</target>       </trans-unit>
        <trans-unit id="2102" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetCachePath(System.String)">
          <source>See the <ph id="ph1">&lt;xref:System.AppDomainSetup.CachePath%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Consulte a propriedade <ph id="ph1">&lt;xref:System.AppDomainSetup.CachePath%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2103" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetCachePath(System.String)">
          <source>For more information on shadow copying see <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre a cópia de sombra, consulte <bpt id="p1">[</bpt>cópia de sombra de Assemblies<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2104" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetCachePath(System.String)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="2105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetCachePath(System.String)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="2106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetCachePath(System.String)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="2107" translate="yes" xml:space="preserve" uid="T:System.AppDomain">
          <source>Assigns a value to an application domain property.</source>
          <target state="translated">Atribui um valor a uma propriedade de domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="2108" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetData(System.String,System.Object)">
          <source>The name of a user-defined application domain property to create or change.</source>
          <target state="translated">O nome de uma propriedade de domínio de aplicativo definida pelo usuário a ser criada ou alterada.</target>       </trans-unit>
        <trans-unit id="2109" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetData(System.String,System.Object)">
          <source>The value of the property.</source>
          <target state="translated">O valor da propriedade.</target>       </trans-unit>
        <trans-unit id="2110" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetData(System.String,System.Object)">
          <source>Assigns the specified value to the specified application domain property.</source>
          <target state="translated">Atribui o valor especificado para a propriedade de domínio do aplicativo especificado.</target>       </trans-unit>
        <trans-unit id="2111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetData(System.String,System.Object)">
          <source>Use this method to insert an entry, or modify the value of an entry in an internal cache of name-data pairs that describe properties of this instance of <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>.</source>
          <target state="translated">Use esse método para inserir uma entrada ou modificar o valor de uma entrada em um cache interno de pares de nome de dados que descrevem as propriedades desta instância do <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetData(System.String,System.Object)">
          <source>The cache automatically contains predefined system entries that are inserted when the application domain is created.</source>
          <target state="translated">O cache contém entradas de sistema predefinidos que são inseridas quando o domínio de aplicativo é criado automaticamente.</target>       </trans-unit>
        <trans-unit id="2113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetData(System.String,System.Object)">
          <source>You cannot insert or modify system entries with this method.</source>
          <target state="translated">Não é possível inserir ou modificar as entradas de sistema com esse método.</target>       </trans-unit>
        <trans-unit id="2114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetData(System.String,System.Object)">
          <source>A method call that attempts to modify a system entry has no effect; the method does not throw an exception.</source>
          <target state="translated">Uma chamada de método que tenta modificar uma entrada de sistema não tem nenhum efeito; o método não lançará uma exceção.</target>       </trans-unit>
        <trans-unit id="2115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetData(System.String,System.Object)">
          <source>You can inspect the values of system entries with the <ph id="ph1">&lt;xref:System.AppDomain.GetData%2A&gt;</ph> method, or the equivalent <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> properties described in <ph id="ph3">&lt;xref:System.AppDomain.GetData%2A&gt;</ph>.</source>
          <target state="translated">Você pode inspecionar os valores das entradas de sistema com o <ph id="ph1">&lt;xref:System.AppDomain.GetData%2A&gt;</ph> método, ou equivalente <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> propriedades descritas <ph id="ph3">&lt;xref:System.AppDomain.GetData%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetData(System.String,System.Object)">
          <source>You can call this method to set the value of the default timeout interval for evaluating regular expression patterns by supply "REGEX_DEFAULT_MATCH_TIMEOUT" as the value of the <ph id="ph1">`name`</ph> argument and a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph> value that represents the timeout interval as the value of the <ph id="ph3">`data`</ph> argument.</source>
          <target state="translated">Você pode chamar esse método para definir o valor do intervalo de tempo limite padrão para avaliar padrões de expressão regular pela fonte de "REGEX_DEFAULT_MATCH_TIMEOUT" como o valor da <ph id="ph1">`name`</ph> argumento e uma <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph> valor que representa o intervalo de tempo limite como o valor da <ph id="ph3">`data`</ph> argumento.</target>       </trans-unit>
        <trans-unit id="2117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetData(System.String,System.Object)">
          <source>You can also insert or modify your own user defined name-data pairs with this method and inspect their values with the <ph id="ph1">&lt;xref:System.AppDomain.GetData%2A&gt;</ph> method.</source>
          <target state="translated">Você também pode inserir ou modificar seus próprios pares de dados de nome definido pelo usuário com esse método e inspecionar os valores com o <ph id="ph1">&lt;xref:System.AppDomain.GetData%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="2118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetData(System.String,System.Object)">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.AppDomain.SetData%28System.String%2CSystem.Object%29&gt;</ph> method to create a new value pair.</source>
          <target state="translated">O exemplo a seguir demonstra como usar o <ph id="ph1">&lt;xref:System.AppDomain.SetData%28System.String%2CSystem.Object%29&gt;</ph> método para criar um novo par de valor.</target>       </trans-unit>
        <trans-unit id="2119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetData(System.String,System.Object)">
          <source>The example then uses the <ph id="ph1">&lt;xref:System.AppDomain.GetData%2A&gt;</ph> method to retrieve the value, and displays it to the console.</source>
          <target state="translated">O exemplo usa o <ph id="ph1">&lt;xref:System.AppDomain.GetData%2A&gt;</ph> método para recuperar o valor e o exibe no console.</target>       </trans-unit>
        <trans-unit id="2120" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetData(System.String,System.Object)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="2121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetData(System.String,System.Object)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="2122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetData(System.String,System.Object)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="2123" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetData(System.String,System.Object,System.Security.IPermission)">
          <source>The name of a user-defined application domain property to create or change.</source>
          <target state="translated">O nome de uma propriedade de domínio de aplicativo definida pelo usuário a ser criada ou alterada.</target>       </trans-unit>
        <trans-unit id="2124" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetData(System.String,System.Object,System.Security.IPermission)">
          <source>The value of the property.</source>
          <target state="translated">O valor da propriedade.</target>       </trans-unit>
        <trans-unit id="2125" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetData(System.String,System.Object,System.Security.IPermission)">
          <source>The permission to demand of the caller when the property is retrieved.</source>
          <target state="translated">A permissão para exigir do chamador quando a propriedade é recuperada.</target>       </trans-unit>
        <trans-unit id="2126" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetData(System.String,System.Object,System.Security.IPermission)">
          <source>Assigns the specified value to the specified application domain property, with a specified permission to demand of the caller when the property is retrieved.</source>
          <target state="translated">Atribui o valor especificado à propriedade de domínio de aplicativo especificada, com uma permissão especificada para exigir do chamador quando a propriedade for recuperada.</target>       </trans-unit>
        <trans-unit id="2127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetData(System.String,System.Object,System.Security.IPermission)">
          <source>Use this method to insert or modify your own user-defined entries in an internal cache of name/data pairs that describe properties of the application domain.</source>
          <target state="translated">Use esse método para inserir ou modificar suas próprias entradas definidas pelo usuário em um cache interno de pares de nome/dados que descrevem as propriedades do domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="2128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetData(System.String,System.Object,System.Security.IPermission)">
          <source>When you insert an entry, you can specify a permission demand to enforce when the entry is retrieved.In addition, you can call this method to set the value of the default timeout interval for evaluating regular expression patterns by supply "REGEX_DEFAULT_MATCH_TIMEOUT" as the value of the <ph id="ph1">`name`</ph> argument and a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph> value that represents the timeout interval as the value of the <ph id="ph3">`data`</ph> argument.</source>
          <target state="translated">Quando você insere uma entrada, você pode especificar uma demanda de permissão para impor quando a entrada é recuperada. Além disso, você pode chamar esse método para definir o valor do intervalo de tempo limite padrão para avaliar padrões de expressão regular pela fonte de "REGEX_DEFAULT_MATCH_TIMEOUT" como o valor da <ph id="ph1">`name`</ph> argumento e uma <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph> valor que representa o intervalo de tempo limite como o valor da <ph id="ph3">`data`</ph> argumento.</target>       </trans-unit>
        <trans-unit id="2129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetData(System.String,System.Object,System.Security.IPermission)">
          <source>You cannot use this method to assign a security demand to a system-defined property string.</source>
          <target state="translated">Você não pode usar esse método para atribuir uma exigência de segurança para uma cadeia de caracteres de propriedade definidos pelo sistema.</target>       </trans-unit>
        <trans-unit id="2130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetData(System.String,System.Object,System.Security.IPermission)">
          <source>The cache automatically contains predefined system entries that are inserted when the application domain is created.</source>
          <target state="translated">O cache contém entradas de sistema predefinidos que são inseridas quando o domínio de aplicativo é criado automaticamente.</target>       </trans-unit>
        <trans-unit id="2131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetData(System.String,System.Object,System.Security.IPermission)">
          <source>You cannot insert or modify system entries with this method.</source>
          <target state="translated">Não é possível inserir ou modificar as entradas de sistema com esse método.</target>       </trans-unit>
        <trans-unit id="2132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetData(System.String,System.Object,System.Security.IPermission)">
          <source>A method call that attempts to modify a system entry has no effect; the method does not throw an exception.</source>
          <target state="translated">Uma chamada de método que tenta modificar uma entrada de sistema não tem nenhum efeito; o método não lançará uma exceção.</target>       </trans-unit>
        <trans-unit id="2133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetData(System.String,System.Object,System.Security.IPermission)">
          <source>You can inspect the values of system entries with the <ph id="ph1">&lt;xref:System.AppDomain.GetData%2A&gt;</ph> method or the equivalent <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> properties described in the Remarks section for the <ph id="ph3">&lt;xref:System.AppDomain.GetData%2A&gt;</ph> method.</source>
          <target state="translated">Você pode inspecionar os valores das entradas de sistema com o <ph id="ph1">&lt;xref:System.AppDomain.GetData%2A&gt;</ph> método ou o equivalente <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> propriedades descritas na seção comentários para o <ph id="ph3">&lt;xref:System.AppDomain.GetData%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="2134" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetData(System.String,System.Object,System.Security.IPermission)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2135" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetData(System.String,System.Object,System.Security.IPermission)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> specifies a system-defined property string and <ph id="ph2">&lt;paramref name="permission" /&gt;</ph> is not <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> especifica uma cadeia de caracteres de propriedade definida pelo sistema e <ph id="ph2">&lt;paramref name="permission" /&gt;</ph> não é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetData(System.String,System.Object,System.Security.IPermission)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="2137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetData(System.String,System.Object,System.Security.IPermission)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="2138" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetDynamicBase(System.String)">
          <source>The fully qualified path that is the base directory for subdirectories where dynamic assemblies are stored.</source>
          <target state="translated">O caminho totalmente qualificado que é o diretório base para subdiretórios em que assemblies dinâmicos são armazenados.</target>       </trans-unit>
        <trans-unit id="2139" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetDynamicBase(System.String)">
          <source>Establishes the specified directory path as the base directory for subdirectories where dynamically generated files are stored and accessed.</source>
          <target state="translated">Estabelece o caminho de diretório especificado como o diretório base para subdiretórios em que os arquivos gerados dinamicamente são armazenados e acessados.</target>       </trans-unit>
        <trans-unit id="2140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetDynamicBase(System.String)">
          <source>This method sets the <ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph> property of the internal <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> associated with this instance.</source>
          <target state="translated">Esse método define o <ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph> propriedade interno <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> associado a esta instância.</target>       </trans-unit>
        <trans-unit id="2141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetDynamicBase(System.String)">
          <source>This method is now obsolete, and should not be used for new development.</source>
          <target state="translated">Este método agora está obsoleto e não deve ser usado no novo desenvolvimento.</target>       </trans-unit>
        <trans-unit id="2142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetDynamicBase(System.String)">
          <source>The following example shows how to use the non-obsolete alternative, the <ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">O exemplo a seguir mostra como usar a alternativa não obsoleta, o <ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=nameWithType&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="2143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetDynamicBase(System.String)">
          <source>For an explanation of this example, see the <ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=nameWithType&gt;</ph> property or the <ph id="ph2">&lt;xref:System.AppDomain.DynamicDirectory%2A&gt;</ph> property.</source>
          <target state="translated">Para obter uma explicação desse exemplo, consulte o <ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=nameWithType&gt;</ph> propriedade ou o <ph id="ph2">&lt;xref:System.AppDomain.DynamicDirectory%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="2144" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetDynamicBase(System.String)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="2145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetDynamicBase(System.String)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="2146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetDynamicBase(System.String)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="2147" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Security.Principal.PrincipalPolicy" /&gt;</ph> values that specifies the type of the principal object to attach to threads.</source>
          <target state="translated">Um dos valores <ph id="ph1">&lt;see cref="T:System.Security.Principal.PrincipalPolicy" /&gt;</ph> que especifica o tipo do objeto de entidade de segurança a ser anexado aos threads.</target>       </trans-unit>
        <trans-unit id="2148" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)">
          <source>Specifies how principal and identity objects should be attached to a thread if the thread attempts to bind to a principal while executing in this application domain.</source>
          <target state="translated">Especifica como objetos de identidade e de entidade de segurança devem ser anexados a um thread se a thread tenta se associar a uma entidade de segurança durante a execução nesse domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="2149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)">
          <source>Setting this value will only be effective if you set it before using the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Definir esse valor só será eficaz se você defini-lo antes de usar o <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="2150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)">
          <source>For example, if you set <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> to a given principal (for example, a generic principal) and then use the <ph id="ph2">&lt;xref:System.AppDomain.SetPrincipalPolicy%2A&gt;</ph> method to set the <ph id="ph3">&lt;xref:System.Security.Principal.PrincipalPolicy&gt;</ph> to <ph id="ph4">&lt;xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal&gt;</ph>, the current principal will remain the generic principal.</source>
          <target state="translated">Por exemplo, se você definir <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> para uma determinada entidade (por exemplo, uma entidade de segurança genérica) e, em seguida, use o <ph id="ph2">&lt;xref:System.AppDomain.SetPrincipalPolicy%2A&gt;</ph> método para definir o <ph id="ph3">&lt;xref:System.Security.Principal.PrincipalPolicy&gt;</ph> para <ph id="ph4">&lt;xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal&gt;</ph>, o principal atual permanecerá a entidade de segurança genérica.</target>       </trans-unit>
        <trans-unit id="2151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)">
          <source>The following example shows the effect on threads of using the <ph id="ph1">&lt;xref:System.AppDomain.SetPrincipalPolicy%2A&gt;</ph> method to change the principal policy of the application domain.</source>
          <target state="translated">O exemplo a seguir mostra o efeito em threads de usar o <ph id="ph1">&lt;xref:System.AppDomain.SetPrincipalPolicy%2A&gt;</ph> método para alterar a política de entidade de segurança do domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="2152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)">
          <source>It also shows the effect of using the <ph id="ph1">&lt;xref:System.AppDomain.SetThreadPrincipal%2A&gt;</ph> method to change the principal that is available for attaching to threads in the application domain.</source>
          <target state="translated">Ele também mostra o efeito de usar o <ph id="ph1">&lt;xref:System.AppDomain.SetThreadPrincipal%2A&gt;</ph> método para alterar a entidade que está disponível para anexar a threads no domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="2153" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="2154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)">
          <source>for ability to manipulate the principal object.</source>
          <target state="translated">para a capacidade de manipular o objeto principal.</target>       </trans-unit>
        <trans-unit id="2155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.Demand" /&gt;</ph>.</source>
          <target state="translated">Ação de segurança: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.Demand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2157" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetShadowCopyFiles">
          <source>Turns on shadow copying.</source>
          <target state="translated">Ativa a cópia de sombra.</target>       </trans-unit>
        <trans-unit id="2158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetShadowCopyFiles">
          <source>For more information on shadow copying, see <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre a cópia de sombra, consulte <bpt id="p1">[</bpt>cópia de sombra de Assemblies<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetShadowCopyFiles">
          <source>This method is now obsolete, and should not be used for new development.</source>
          <target state="translated">Este método agora está obsoleto e não deve ser usado no novo desenvolvimento.</target>       </trans-unit>
        <trans-unit id="2160" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetShadowCopyFiles">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="2161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetShadowCopyFiles">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="2162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetShadowCopyFiles">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="2163" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetShadowCopyPath(System.String)">
          <source>A list of directory names, where each name is separated by a semicolon.</source>
          <target state="translated">Uma lista de nomes de diretórios, em que cada nome é separado por ponto e vírgula.</target>       </trans-unit>
        <trans-unit id="2164" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetShadowCopyPath(System.String)">
          <source>Establishes the specified directory path as the location of assemblies to be shadow copied.</source>
          <target state="translated">Estabelece o caminho de diretório especificado como o lugar para o qual é feita cópia de sombra dos assemblies.</target>       </trans-unit>
        <trans-unit id="2165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetShadowCopyPath(System.String)">
          <source>By default, a shadow copy includes all assemblies found through probing.</source>
          <target state="translated">Por padrão, uma cópia de sombra inclui todos os assemblies localizados por meio de sondagem.</target>       </trans-unit>
        <trans-unit id="2166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetShadowCopyPath(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.AppDomain.SetShadowCopyPath%2A&gt;</ph> method restricts the shadow copy to the assemblies in the directories specified by <ph id="ph2">`path`</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.AppDomain.SetShadowCopyPath%2A&gt;</ph> método restringe a cópia de sombra para os assemblies nos diretórios especificados pelo <ph id="ph2">`path`</ph>.</target>       </trans-unit>
        <trans-unit id="2167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetShadowCopyPath(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.AppDomain.SetShadowCopyPath%2A&gt;</ph> method does not specify additional directories to be searched for assemblies.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.AppDomain.SetShadowCopyPath%2A&gt;</ph> método não especificar diretórios adicionais a serem pesquisadas para assemblies.</target>       </trans-unit>
        <trans-unit id="2168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetShadowCopyPath(System.String)">
          <source>Assemblies to be shadow-copied must already be located in the search path, for example under <ph id="ph1">&lt;xref:System.AppDomain.BaseDirectory%2A&gt;</ph>.</source>
          <target state="translated">Assemblies a serem copiados de sombra devem já estar localizados no caminho de pesquisa, por exemplo em <ph id="ph1">&lt;xref:System.AppDomain.BaseDirectory%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetShadowCopyPath(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.AppDomain.SetShadowCopyPath%2A&gt;</ph> method specifies which search paths are eligible to be shadow-copied.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.AppDomain.SetShadowCopyPath%2A&gt;</ph> método especifica quais caminhos de pesquisa são qualificados para ser sombra copiado.</target>       </trans-unit>
        <trans-unit id="2170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetShadowCopyPath(System.String)">
          <source>This method sets the <ph id="ph1">&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt;</ph> property of the internal <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> associated with this instance.</source>
          <target state="translated">Esse método define o <ph id="ph1">&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt;</ph> propriedade interno <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> associado a esta instância.</target>       </trans-unit>
        <trans-unit id="2171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetShadowCopyPath(System.String)">
          <source>For more information on shadow copying, see <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre a cópia de sombra, consulte <bpt id="p1">[</bpt>cópia de sombra de Assemblies<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetShadowCopyPath(System.String)">
          <source>This method is now obsolete, and should not be used for new development.</source>
          <target state="translated">Este método agora está obsoleto e não deve ser usado no novo desenvolvimento.</target>       </trans-unit>
        <trans-unit id="2173" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetShadowCopyPath(System.String)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="2174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetShadowCopyPath(System.String)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="2175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetShadowCopyPath(System.String)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="2176" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal)">
          <source>The principal object to attach to threads.</source>
          <target state="translated">O objeto de entidade de segurança a ser anexado aos threads.</target>       </trans-unit>
        <trans-unit id="2177" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal)">
          <source>Sets the default principal object to be attached to threads if they attempt to bind to a principal while executing in this application domain.</source>
          <target state="translated">Define o objeto de entidade de segurança padrão a ser anexado aos threads se eles tentam se associar a uma entidade de segurança durante a execução nesse domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="2178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal)">
          <source>The following example shows the effect of using the <ph id="ph1">&lt;xref:System.AppDomain.SetThreadPrincipal%2A&gt;</ph> method to change the principal that is available for attaching to threads that are executing in the application domain.</source>
          <target state="translated">O exemplo a seguir mostra o efeito de usar o <ph id="ph1">&lt;xref:System.AppDomain.SetThreadPrincipal%2A&gt;</ph> método para alterar a entidade que está disponível para anexar a threads que estão em execução no domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="2179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal)">
          <source>It also shows the effect on threads of using the <ph id="ph1">&lt;xref:System.AppDomain.SetPrincipalPolicy%2A&gt;</ph> method to change the principal policy of the application domain.</source>
          <target state="translated">Ele também mostra o efeito em threads de usar o <ph id="ph1">&lt;xref:System.AppDomain.SetPrincipalPolicy%2A&gt;</ph> método para alterar a política de entidade de segurança do domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="2180" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal)">
          <source><ph id="ph1">&lt;paramref name="principal" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="principal" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2181" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal)">
          <source>The thread principal has already been set.</source>
          <target state="translated">A entidade de segurança do thread já foi definida.</target>       </trans-unit>
        <trans-unit id="2182" translate="yes" xml:space="preserve" uid="M:System.AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal)">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="2183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal)">
          <source>for ability to manipulate the principal object.</source>
          <target state="translated">para a capacidade de manipular o objeto principal.</target>       </trans-unit>
        <trans-unit id="2184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal)">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.Demand" /&gt;</ph>.</source>
          <target state="translated">Ação de segurança: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.Demand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2186" translate="yes" xml:space="preserve" uid="P:System.AppDomain.SetupInformation">
          <source>Gets the application domain configuration information for this instance.</source>
          <target state="translated">Obtém as informações de configuração do domínio do aplicativo para essa instância.</target>       </trans-unit>
        <trans-unit id="2187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.SetupInformation">
          <source>The application domain initialization information.</source>
          <target state="translated">As informações de inicialização do domínio do aplicativo.</target>       </trans-unit>
        <trans-unit id="2188" translate="yes" xml:space="preserve" uid="P:System.AppDomain.SetupInformation">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="2189" translate="yes" xml:space="preserve" uid="P:System.AppDomain.ShadowCopyFiles">
          <source>Gets an indication whether the application domain is configured to shadow copy files.</source>
          <target state="translated">Obtém uma indicação se o domínio do aplicativo é configurado para arquivos de cópia de sombra.</target>       </trans-unit>
        <trans-unit id="2190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.ShadowCopyFiles">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the application domain is configured to shadow copy files; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o domínio do aplicativo for configurado para arquivos de cópia de sombra; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomain.ShadowCopyFiles">
          <source>For more information, see <ph id="ph1">&lt;xref:System.AppDomainSetup.ShadowCopyFiles%2A?displayProperty=nameWithType&gt;</ph> and <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <ph id="ph1">&lt;xref:System.AppDomainSetup.ShadowCopyFiles%2A?displayProperty=nameWithType&gt;</ph> e <bpt id="p1">[</bpt>cópia de sombra de Assemblies<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2192" translate="yes" xml:space="preserve" uid="P:System.AppDomain.ShadowCopyFiles">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">A operação é tentada em um domínio de aplicativo descarregado.</target>       </trans-unit>
        <trans-unit id="2193" translate="yes" xml:space="preserve" uid="M:System.AppDomain.System#_AppDomain#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Reservado para uso futuro.</target>       </trans-unit>
        <trans-unit id="2194" translate="yes" xml:space="preserve" uid="M:System.AppDomain.System#_AppDomain#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Deve ser IID_NULL.</target>       </trans-unit>
        <trans-unit id="2195" translate="yes" xml:space="preserve" uid="M:System.AppDomain.System#_AppDomain#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">Matriz passada de nomes a serem mapeados.</target>       </trans-unit>
        <trans-unit id="2196" translate="yes" xml:space="preserve" uid="M:System.AppDomain.System#_AppDomain#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">Contagem dos nomes a serem mapeados.</target>       </trans-unit>
        <trans-unit id="2197" translate="yes" xml:space="preserve" uid="M:System.AppDomain.System#_AppDomain#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">O contexto de localidade no qual interpretar os nomes.</target>       </trans-unit>
        <trans-unit id="2198" translate="yes" xml:space="preserve" uid="M:System.AppDomain.System#_AppDomain#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">Matriz alocada pelo chamador que recebe os IDs correspondentes aos nomes.</target>       </trans-unit>
        <trans-unit id="2199" translate="yes" xml:space="preserve" uid="M:System.AppDomain.System#_AppDomain#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">Mapeia um conjunto de nomes para um conjunto correspondente de identificadores de expedição.</target>       </trans-unit>
        <trans-unit id="2200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.System#_AppDomain#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</target>       </trans-unit>
        <trans-unit id="2201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.System#_AppDomain#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, consulte a Biblioteca MSDN.</target>       </trans-unit>
        <trans-unit id="2202" translate="yes" xml:space="preserve" uid="M:System.AppDomain.System#_AppDomain#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Não há suporte para acesso com associação tardia usando a interface <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> COM.</target>       </trans-unit>
        <trans-unit id="2203" translate="yes" xml:space="preserve" uid="M:System.AppDomain.System#_AppDomain#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">As informações de tipo a serem retornadas.</target>       </trans-unit>
        <trans-unit id="2204" translate="yes" xml:space="preserve" uid="M:System.AppDomain.System#_AppDomain#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">O identificador de localidade das informações do tipo.</target>       </trans-unit>
        <trans-unit id="2205" translate="yes" xml:space="preserve" uid="M:System.AppDomain.System#_AppDomain#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">Recebe um ponteiro para o objeto de informações de tipo solicitado.</target>       </trans-unit>
        <trans-unit id="2206" translate="yes" xml:space="preserve" uid="M:System.AppDomain.System#_AppDomain#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">Recupera as informações do tipo de um objeto, que podem ser usadas para obter informações de tipo para uma interface.</target>       </trans-unit>
        <trans-unit id="2207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.System#_AppDomain#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</target>       </trans-unit>
        <trans-unit id="2208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.System#_AppDomain#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, consulte a Biblioteca MSDN.</target>       </trans-unit>
        <trans-unit id="2209" translate="yes" xml:space="preserve" uid="M:System.AppDomain.System#_AppDomain#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Não há suporte para acesso com associação tardia usando a interface <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> COM.</target>       </trans-unit>
        <trans-unit id="2210" translate="yes" xml:space="preserve" uid="M:System.AppDomain.System#_AppDomain#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">Aponta para um local que recebe o número de interfaces de informações de tipo fornecido pelo objeto.</target>       </trans-unit>
        <trans-unit id="2211" translate="yes" xml:space="preserve" uid="M:System.AppDomain.System#_AppDomain#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">Retorna o número de interfaces de informações do tipo que um objeto fornece (0 ou 1).</target>       </trans-unit>
        <trans-unit id="2212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.System#_AppDomain#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</target>       </trans-unit>
        <trans-unit id="2213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.System#_AppDomain#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, consulte a Biblioteca MSDN.</target>       </trans-unit>
        <trans-unit id="2214" translate="yes" xml:space="preserve" uid="M:System.AppDomain.System#_AppDomain#GetTypeInfoCount(System.UInt32@)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Não há suporte para acesso com associação tardia usando a interface <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> COM.</target>       </trans-unit>
        <trans-unit id="2215" translate="yes" xml:space="preserve" uid="M:System.AppDomain.System#_AppDomain#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">Identifica o membro.</target>       </trans-unit>
        <trans-unit id="2216" translate="yes" xml:space="preserve" uid="M:System.AppDomain.System#_AppDomain#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Reservado para uso futuro.</target>       </trans-unit>
        <trans-unit id="2217" translate="yes" xml:space="preserve" uid="M:System.AppDomain.System#_AppDomain#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Deve ser IID_NULL.</target>       </trans-unit>
        <trans-unit id="2218" translate="yes" xml:space="preserve" uid="M:System.AppDomain.System#_AppDomain#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">O contexto de localidade no qual interpretar argumentos.</target>       </trans-unit>
        <trans-unit id="2219" translate="yes" xml:space="preserve" uid="M:System.AppDomain.System#_AppDomain#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">Sinalizadores que descrevem o contexto da chamada.</target>       </trans-unit>
        <trans-unit id="2220" translate="yes" xml:space="preserve" uid="M:System.AppDomain.System#_AppDomain#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">Ponteiro para uma estrutura contendo uma matriz de argumentos, uma matriz de DISPIDs de argumento para argumentos nomeados e contagens para o número de elementos nas matrizes.</target>       </trans-unit>
        <trans-unit id="2221" translate="yes" xml:space="preserve" uid="M:System.AppDomain.System#_AppDomain#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">Ponteiro para o local onde o resultado deve ser armazenado.</target>       </trans-unit>
        <trans-unit id="2222" translate="yes" xml:space="preserve" uid="M:System.AppDomain.System#_AppDomain#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">Ponteiro para uma estrutura que contém informações de exceção.</target>       </trans-unit>
        <trans-unit id="2223" translate="yes" xml:space="preserve" uid="M:System.AppDomain.System#_AppDomain#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">O índice do primeiro argumento que tem um erro.</target>       </trans-unit>
        <trans-unit id="2224" translate="yes" xml:space="preserve" uid="M:System.AppDomain.System#_AppDomain#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">Fornece acesso a propriedades e métodos expostos por um objeto.</target>       </trans-unit>
        <trans-unit id="2225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.System#_AppDomain#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</target>       </trans-unit>
        <trans-unit id="2226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.System#_AppDomain#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">`IDispatch::Invoke`</ph>, consulte a Biblioteca MSDN.</target>       </trans-unit>
        <trans-unit id="2227" translate="yes" xml:space="preserve" uid="M:System.AppDomain.System#_AppDomain#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Não há suporte para acesso com associação tardia usando a interface <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> COM.</target>       </trans-unit>
        <trans-unit id="2228" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ToString">
          <source>Obtains a string representation that includes the friendly name of the application domain and any context policies.</source>
          <target state="translated">Obtém uma representação de cadeia de caracteres que inclui o nome amigável do domínio do aplicativo e as políticas de contexto.</target>       </trans-unit>
        <trans-unit id="2229" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ToString">
          <source>A string formed by concatenating the literal string "Name:", the friendly name of the application domain, and either string representations of the context policies or the string "There are no context policies."</source>
          <target state="translated">Uma cadeia de caracteres é formada pela concatenação da cadeia de caracteres literal “Nome:”, o nome amigável do domínio do aplicativo e as representações de cadeia de caracteres das políticas de contexto ou a cadeia de caracteres “Não há políticas sem contexto”.</target>       </trans-unit>
        <trans-unit id="2230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.ToString">
          <source>The following code example displays the return value of the <ph id="ph1">&lt;xref:System.AppDomain.ToString%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo de código a seguir exibe o valor de retorno de <ph id="ph1">&lt;xref:System.AppDomain.ToString%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="2231" translate="yes" xml:space="preserve" uid="M:System.AppDomain.ToString">
          <source>The application domain represented by the current <ph id="ph1">&lt;see cref="T:System.AppDomain" /&gt;</ph> has been unloaded.</source>
          <target state="translated">O domínio de aplicativo representado pelo <ph id="ph1">&lt;see cref="T:System.AppDomain" /&gt;</ph> atual foi descarregado.</target>       </trans-unit>
        <trans-unit id="2232" translate="yes" xml:space="preserve" uid="E:System.AppDomain.TypeResolve">
          <source>Occurs when the resolution of a type fails.</source>
          <target state="translated">Ocorre quando a resolução de um tipo falha.</target>       </trans-unit>
        <trans-unit id="2233" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.TypeResolve">
          <source>The <ph id="ph1">&lt;xref:System.AppDomain.TypeResolve&gt;</ph> event occurs when the common language runtime is unable to determine the assembly that can create the requested type.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.AppDomain.TypeResolve&gt;</ph> evento ocorre quando o common language runtime não é possível determinar o assembly que pode criar o tipo solicitado.</target>       </trans-unit>
        <trans-unit id="2234" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.TypeResolve">
          <source>This can occur if the type is defined in a dynamic assembly, or the type is not defined in a dynamic assembly but the runtime does not know which assembly the type is defined in.</source>
          <target state="translated">Isso pode ocorrer se o tipo é definido em um assembly dinâmico, ou o tipo não está definido em um assembly dinâmico, mas o tempo de execução não sabe qual assembly o tipo é definido no.</target>       </trans-unit>
        <trans-unit id="2235" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.TypeResolve">
          <source>The latter situation can occur when <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> is called with a type name that is not qualified with the assembly name.</source>
          <target state="translated">A segunda situação pode ocorrer quando <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> é chamado com um nome de tipo que não está qualificado com o nome do assembly.</target>       </trans-unit>
        <trans-unit id="2236" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.TypeResolve">
          <source>The <ph id="ph1">&lt;xref:System.ResolveEventHandler&gt;</ph> for this event can attempt to locate and create the type.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.ResolveEventHandler&gt;</ph> para esse evento pode tentar localizar e criar o tipo.</target>       </trans-unit>
        <trans-unit id="2237" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.TypeResolve">
          <source>However, the <ph id="ph1">&lt;xref:System.AppDomain.TypeResolve&gt;</ph> event does not occur if the runtime knows it is not possible to find a type in certain assemblies.</source>
          <target state="translated">No entanto, o <ph id="ph1">&lt;xref:System.AppDomain.TypeResolve&gt;</ph> evento não ocorrerá se o tempo de execução sabe que não é possível encontrar um tipo em determinados assemblies.</target>       </trans-unit>
        <trans-unit id="2238" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.TypeResolve">
          <source>For example, this event does not occur if the type is not found in a static assembly because the runtime knows types cannot be added dynamically to static assemblies.</source>
          <target state="translated">Por exemplo, esse evento não ocorre se o tipo não é encontrado em um conjunto estático porque o tempo de execução sabe tipos não podem ser adicionados dinamicamente para assemblies estáticos.</target>       </trans-unit>
        <trans-unit id="2239" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.TypeResolve">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType&gt;</ph> property contains the assembly that requested the type.</source>
          <target state="translated">Começando com o <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, o <ph id="ph2">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType&gt;</ph> propriedade contém o assembly que o tipo solicitado.</target>       </trans-unit>
        <trans-unit id="2240" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.TypeResolve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Para obter mais informações, consulte <ph id="ph1">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2241" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.TypeResolve">
          <source>To register an event handler for this event, you must have the required permissions, or a <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown.</source>
          <target state="translated">Para registrar um manipulador de eventos para esse evento, você deve ter as permissões necessárias, ou um <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> é lançado.</target>       </trans-unit>
        <trans-unit id="2242" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.TypeResolve">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre a manipulação de eventos, consulte <bpt id="p1">[</bpt>tratamento e gerando eventos<ept id="p1">](~/docs/standard/events/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2243" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.TypeResolve">
          <source>The following sample demonstrates the <ph id="ph1">&lt;xref:System.AppDomain.TypeResolve&gt;</ph> event.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.AppDomain.TypeResolve&gt;</ph> evento.</target>       </trans-unit>
        <trans-unit id="2244" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.TypeResolve">
          <source>For this code example to run, you must provide the fully qualified assembly name.</source>
          <target state="translated">Para este exemplo de código ser executado, você deve fornecer o nome de assembly totalmente qualificado.</target>       </trans-unit>
        <trans-unit id="2245" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.TypeResolve">
          <source>For information about how to obtain the fully qualified assembly name, see <bpt id="p1">[</bpt>Assembly Names<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</source>
          <target state="translated">Para obter informações sobre como obter o nome totalmente qualificado do assembly, consulte <bpt id="p1">[</bpt>nomes de Assembly<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2246" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.TypeResolve">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="2247" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.TypeResolve">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="2248" translate="yes" xml:space="preserve" uid="E:System.AppDomain.UnhandledException">
          <source>Occurs when an exception is not caught.</source>
          <target state="translated">Ocorre quando uma exceção não é capturada.</target>       </trans-unit>
        <trans-unit id="2249" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>This event provides notification of uncaught exceptions.</source>
          <target state="translated">Esse evento fornece notificação de exceções não capturadas.</target>       </trans-unit>
        <trans-unit id="2250" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>It allows the application to log information about the exception before the system default handler reports the exception to the user and terminates the application.</source>
          <target state="translated">Ele permite que o aplicativo registrar informações sobre a exceção antes do manipulador padrão do sistema relata a exceção para o usuário e encerra o aplicativo.</target>       </trans-unit>
        <trans-unit id="2251" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>If sufficient information about the state of the application is available, other actions may be undertaken — such as saving program data for later recovery.</source>
          <target state="translated">Se houver informações suficientes sobre o estado do aplicativo, outras ações podem ser realizadas — como salvar dados de programa para recuperação posterior.</target>       </trans-unit>
        <trans-unit id="2252" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>Caution is advised, because program data can become corrupted when exceptions are not handled.</source>
          <target state="translated">Tenha cuidado, porque os dados de programa podem se tornar corrompidos quando são as exceções não tratadas.</target>       </trans-unit>
        <trans-unit id="2253" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>In the .NET Framework versions 1.0 and 1.1, application termination and debugging options are reported to the user before this event is raised, rather than after.</source>
          <target state="translated">Nas versões do .NET Framework 1.0 e 1.1, opções de depuração e encerramento de aplicativo são relatados para o usuário antes que esse evento é gerado, em vez de depois.</target>       </trans-unit>
        <trans-unit id="2254" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>This event can be handled in any application domain.</source>
          <target state="translated">Esse evento pode ser tratado em qualquer domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="2255" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>However, the event is not necessarily raised in the application domain where the exception occurred.</source>
          <target state="translated">No entanto, o evento não será necessariamente gerado no domínio do aplicativo onde ocorreu a exceção.</target>       </trans-unit>
        <trans-unit id="2256" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>An exception is unhandled only if the entire stack for the thread has been unwound without finding an applicable exception handler, so the first place the event can be raised is in the application domain where the thread originated.</source>
          <target state="translated">Uma exceção é sem tratamento somente se a pilha inteira para o thread foi organizada sem encontrar um manipulador de exceção aplicável, portanto, é o primeiro lugar em que o evento pode ser gerado no domínio do aplicativo em que o thread foi originado.</target>       </trans-unit>
        <trans-unit id="2257" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>In the .NET Framework versions 1.0 and 1.1, this event occurs only for the default application domain that is created by the system when an application is started.</source>
          <target state="translated">Nas versões do .NET Framework 1.0 e 1.1, esse evento ocorre somente para o domínio de aplicativo padrão que é criado pelo sistema quando um aplicativo é iniciado.</target>       </trans-unit>
        <trans-unit id="2258" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>If an application creates additional application domains, specifying a delegate for this event in those applications domains has no effect.</source>
          <target state="translated">Se um aplicativo cria domínios de aplicativo adicionais, especificar um delegado para esse evento nesses domínios de aplicativos não tem nenhum efeito.</target>       </trans-unit>
        <trans-unit id="2259" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>If the <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph> event is handled in the default application domain, it is raised there for any unhandled exception in any thread, no matter what application domain the thread started in.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph> evento é tratado no domínio de aplicativo padrão, ele é gerado existe para qualquer exceção sem tratamento em qualquer thread, independentemente de qual domínio de aplicativo o thread iniciado no.</target>       </trans-unit>
        <trans-unit id="2260" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>If the thread started in an application domain that has an event handler for <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph>, the event is raised in that application domain.</source>
          <target state="translated">Se o thread foi iniciado em um domínio de aplicativo que tem um manipulador de eventos <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph>, o evento é gerado no domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="2261" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>If that application domain is not the default application domain, and there is also an event handler in the default application domain, the event is raised in both application domains.</source>
          <target state="translated">Se o domínio de aplicativo não é o domínio de aplicativo padrão, e também há um manipulador de eventos no domínio de aplicativo padrão, o evento é gerado em ambos os domínios de aplicativo.</target>       </trans-unit>
        <trans-unit id="2262" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>For example, suppose a thread starts in application domain "AD1", calls a method in application domain "AD2", and from there calls a method in application domain "AD3", where it throws an exception.</source>
          <target state="translated">Por exemplo, suponha que um thread é iniciado no domínio de aplicativo "IA1", chama um método no domínio de aplicativo "AD2" e a partir daí chama um método no domínio de aplicativo "AD3", onde ele lança uma exceção.</target>       </trans-unit>
        <trans-unit id="2263" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>The first application domain in which the <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph> event can be raised is "AD1".</source>
          <target state="translated">O primeiro domínio de aplicativo no qual o <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph> pode ser gerado é "IA1".</target>       </trans-unit>
        <trans-unit id="2264" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>If that application domain is not the default application domain, the event can also be raised in the default application domain.</source>
          <target state="translated">Se o domínio de aplicativo não é o domínio de aplicativo padrão, o evento também pode ser gerado no domínio de aplicativo padrão.</target>       </trans-unit>
        <trans-unit id="2265" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>The common language runtime suspends thread aborts while event handlers for the <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph> event are executing.</source>
          <target state="translated">O common language runtime suspende anulações de thread enquanto manipuladores de eventos para o <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph> evento estão em execução.</target>       </trans-unit>
        <trans-unit id="2266" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>If the event handler has a <ph id="ph1">&lt;xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute&gt;</ph> attribute with the appropriate flags, the event handler is treated as a constrained execution region.</source>
          <target state="translated">Se o manipulador de eventos tem um <ph id="ph1">&lt;xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute&gt;</ph> atributo com os sinalizadores apropriados, o manipulador de eventos é tratado como uma região de execução restrita.</target>       </trans-unit>
        <trans-unit id="2267" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, this event is not raised for exceptions that corrupt the state of the process, such as stack overflows or access violations, unless the event handler is security-critical and has the <ph id="ph2">&lt;xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute&gt;</ph> attribute.</source>
          <target state="translated">Começando com o <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, esse evento não é gerado para exceções que corromper o estado do processo, como o estouro de pilha ou violações de acesso, a menos que o manipulador de eventos é crítico de segurança e tem o <ph id="ph2">&lt;xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute&gt;</ph> atributo.</target>       </trans-unit>
        <trans-unit id="2268" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>In the .NET Framework versions 1.0 and 1.1, an unhandled exception that occurs in a thread other than the main application thread is caught by the runtime and therefore does not cause the application to terminate.</source>
          <target state="translated">Nas versões do .NET Framework 1.0 e 1.1, uma exceção não tratada ocorre em um thread que não seja o thread principal do aplicativo é capturada pelo tempo de execução e, portanto, não faz com que o aplicativo seja finalizado.</target>       </trans-unit>
        <trans-unit id="2269" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>Thus, it is possible for the <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph> event to be raised without the application terminating.</source>
          <target state="translated">Portanto, é possível que o <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph> evento ser gerado sem encerramento do aplicativo.</target>       </trans-unit>
        <trans-unit id="2270" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>Starting with the .NET Framework version 2.0, this backstop for unhandled exceptions in child threads was removed, because the cumulative effect of such silent failures included performance degradation, corrupted data, and lockups, all of which were difficult to debug.</source>
          <target state="translated">Iniciando com o .NET Framework versão 2.0, esta barreira de exceções sem tratamento em threads de filho foi removida, porque o efeito cumulativo de tais falhas silenciosas incluído degradação de desempenho, dados corrompidos e travamentos, que eram difíceis de depurar.</target>       </trans-unit>
        <trans-unit id="2271" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>For more information, including a list of cases in which the runtime does not terminate, see <bpt id="p1">[</bpt>Exceptions in Managed Threads<ept id="p1">](~/docs/standard/threading/exceptions-in-managed-threads.md)</ept>.</source>
          <target state="translated">Para obter mais informações, incluindo uma lista de casos em que não encerra o tempo de execução, consulte <bpt id="p1">[</bpt>exceções em Threads gerenciados<ept id="p1">](~/docs/standard/threading/exceptions-in-managed-threads.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2272" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>To register an event handler for this event, you must have the required permissions, or a <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown.</source>
          <target state="translated">Para registrar um manipulador de eventos para esse evento, você deve ter as permissões necessárias, ou um <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> é lançado.</target>       </trans-unit>
        <trans-unit id="2273" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre a manipulação de eventos, consulte <bpt id="p1">[</bpt>tratamento e gerando eventos<ept id="p1">](~/docs/standard/events/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="2274" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>Other Events for Unhandled Exceptions</source>
          <target state="translated">Outros eventos para exceções não identificadas</target>       </trans-unit>
        <trans-unit id="2275" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>For certain application models, the <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph> event can be preempted by other events if the unhandled exception occurs in the main application thread.</source>
          <target state="translated">Para determinados modelos de aplicativo, o <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph> evento pode ser impedido por outros eventos se a exceção não tratada ocorrer no thread principal do aplicativo.</target>       </trans-unit>
        <trans-unit id="2276" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>In applications that use Windows Forms, unhandled exceptions in the main application thread cause the <ph id="ph1">&lt;xref:System.Windows.Forms.Application.ThreadException?displayProperty=nameWithType&gt;</ph> event to be raised.</source>
          <target state="translated">Em aplicativos que usam Windows Forms, exceções não tratadas na causa do thread principal do aplicativo a <ph id="ph1">&lt;xref:System.Windows.Forms.Application.ThreadException?displayProperty=nameWithType&gt;</ph> evento ser gerado.</target>       </trans-unit>
        <trans-unit id="2277" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>If this event is handled, the default behavior is that the unhandled exception does not terminate the application, although the application is left in an unknown state.</source>
          <target state="translated">Se esse evento é lida, o comportamento padrão é que a exceção não tratada não encerra o aplicativo, embora o aplicativo for deixado em um estado desconhecido.</target>       </trans-unit>
        <trans-unit id="2278" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>In that case, the <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph> event is not raised.</source>
          <target state="translated">Nesse caso, o <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph> não é gerado.</target>       </trans-unit>
        <trans-unit id="2279" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>This behavior can be changed by using the application configuration file, or by using the <ph id="ph1">&lt;xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A?displayProperty=nameWithType&gt;</ph> method to change the mode to <ph id="ph2">&lt;xref:System.Windows.Forms.UnhandledExceptionMode.ThrowException?displayProperty=nameWithType&gt;</ph> before the <ph id="ph3">&lt;xref:System.Windows.Forms.Application.ThreadException&gt;</ph> event handler is hooked up.</source>
          <target state="translated">Esse comportamento pode ser alterado usando o arquivo de configuração de aplicativo ou usando o <ph id="ph1">&lt;xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A?displayProperty=nameWithType&gt;</ph> método para alterar o modo para <ph id="ph2">&lt;xref:System.Windows.Forms.UnhandledExceptionMode.ThrowException?displayProperty=nameWithType&gt;</ph> antes do <ph id="ph3">&lt;xref:System.Windows.Forms.Application.ThreadException&gt;</ph> manipulador de eventos é conectado.</target>       </trans-unit>
        <trans-unit id="2280" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>This applies only to the main application thread.</source>
          <target state="translated">Isso se aplica somente ao thread principal do aplicativo.</target>       </trans-unit>
        <trans-unit id="2281" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>The <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph> event is raised for unhandled exceptions thrown in other threads.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph> é gerado para exceções sem tratamento lançadas em outros threads.</target>       </trans-unit>
        <trans-unit id="2282" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>Starting with Microsoft Visual Studio 2005, the Visual Basic application framework provides another event for unhandled exceptions in the main application thread.</source>
          <target state="translated">A partir do Microsoft Visual Studio 2005, a estrutura de aplicativo do Visual Basic fornece outro evento de exceções sem tratamento no thread principal do aplicativo.</target>       </trans-unit>
        <trans-unit id="2283" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>See the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">Consulte o <ph id="ph1">&lt;xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException?displayProperty=nameWithType&gt;</ph> evento.</target>       </trans-unit>
        <trans-unit id="2284" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>This event has an event arguments object with the same name as the event arguments object used by <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException?displayProperty=nameWithType&gt;</ph>, but with different properties.</source>
          <target state="translated">Esse evento possui um objeto de argumentos de evento com o mesmo nome que o objeto de argumentos de evento usado pelo <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException?displayProperty=nameWithType&gt;</ph>, mas com propriedades diferentes.</target>       </trans-unit>
        <trans-unit id="2285" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>In particular, this event arguments object has an <ph id="ph1">&lt;xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A&gt;</ph> property that allows the application to continue running, ignoring the unhandled exception (and leaving the application in an unknown state).</source>
          <target state="translated">Em particular, esse objeto de argumentos de evento tem um <ph id="ph1">&lt;xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A&gt;</ph> propriedade que permite que o aplicativo continue em execução, ignorando a exceção não tratada (e sair do aplicativo em um estado desconhecido).</target>       </trans-unit>
        <trans-unit id="2286" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>In that case, the <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException?displayProperty=nameWithType&gt;</ph> event is not raised.</source>
          <target state="translated">Nesse caso, o <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException?displayProperty=nameWithType&gt;</ph> não é gerado.</target>       </trans-unit>
        <trans-unit id="2287" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>The followingexample demonstrates the <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph> event.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph> evento.</target>       </trans-unit>
        <trans-unit id="2288" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>It defines an event handler, <ph id="ph1">`MyHandler`</ph>, that is invoked whenever an unhandled exception is thrown in the default application domain.</source>
          <target state="translated">Define um manipulador de eventos, <ph id="ph1">`MyHandler`</ph>, que é invocado sempre que é gerada uma exceção sem tratamento no domínio de aplicativo padrão.</target>       </trans-unit>
        <trans-unit id="2289" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>It then throws two exceptions.</source>
          <target state="translated">Em seguida, gera duas exceções.</target>       </trans-unit>
        <trans-unit id="2290" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>The first is handled by a <bpt id="p1">**</bpt>try/catch<ept id="p1">**</ept> block.</source>
          <target state="translated">A primeira é tratada por um <bpt id="p1">**</bpt>try/catch<ept id="p1">**</ept> bloco.</target>       </trans-unit>
        <trans-unit id="2291" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>The second is unhandled and invokes the <ph id="ph1">`MyHandle`</ph> routine before the application terminates.</source>
          <target state="translated">O segundo é sem tratamento e invoca o <ph id="ph1">`MyHandle`</ph> rotina antes do encerramento do aplicativo.</target>       </trans-unit>
        <trans-unit id="2292" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="2293" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.AppDomain.UnhandledException">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="2294" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Unload(System.AppDomain)">
          <source>An application domain to unload.</source>
          <target state="translated">Um domínio de aplicativo a ser descarregado.</target>       </trans-unit>
        <trans-unit id="2295" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Unload(System.AppDomain)">
          <source>Unloads the specified application domain.</source>
          <target state="translated">Descarrega o domínio de aplicativo especificado.</target>       </trans-unit>
        <trans-unit id="2296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Unload(System.AppDomain)">
          <source>In the .NET Framework version 2.0 there is a thread dedicated to unloading application domains.</source>
          <target state="translated">No .NET Framework versão 2.0 há um thread dedicado para o descarregamento de domínios de aplicativo.</target>       </trans-unit>
        <trans-unit id="2297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Unload(System.AppDomain)">
          <source>This improves reliability, especially when the .NET Framework is hosted.</source>
          <target state="translated">Isso melhora a confiabilidade, especialmente quando o .NET Framework está hospedado.</target>       </trans-unit>
        <trans-unit id="2298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Unload(System.AppDomain)">
          <source>When a thread calls <ph id="ph1">&lt;xref:System.AppDomain.Unload%2A&gt;</ph>, the target domain is marked for unloading.</source>
          <target state="translated">Quando um thread chama <ph id="ph1">&lt;xref:System.AppDomain.Unload%2A&gt;</ph>, o domínio de destino está marcado para descarregar.</target>       </trans-unit>
        <trans-unit id="2299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Unload(System.AppDomain)">
          <source>The dedicated thread attempts to unload the domain, and all threads in the domain are aborted.</source>
          <target state="translated">O thread dedicado tenta descarregar o domínio, e todos os threads no domínio serão anulados.</target>       </trans-unit>
        <trans-unit id="2300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Unload(System.AppDomain)">
          <source>If a thread does not abort, for example because it is executing unmanaged code, or because it is executing a <ph id="ph1">`finally`</ph> block, then after a period of time a <ph id="ph2">&lt;xref:System.CannotUnloadAppDomainException&gt;</ph> is thrown in the thread that originally called <ph id="ph3">&lt;xref:System.AppDomain.Unload%2A&gt;</ph>.</source>
          <target state="translated">Se um thread não cancelar, por exemplo, porque ele está executando o código não gerenciado, ou porque ele está sendo executado um <ph id="ph1">`finally`</ph> bloco, em seguida, após um período de tempo um <ph id="ph2">&lt;xref:System.CannotUnloadAppDomainException&gt;</ph> é lançada no thread que originalmente chamado <ph id="ph3">&lt;xref:System.AppDomain.Unload%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Unload(System.AppDomain)">
          <source>If the thread that could not be aborted eventually ends, the target domain is not unloaded.</source>
          <target state="translated">Se o thread que não puderam ser anulado eventualmente termina, o domínio de destino não é descarregado.</target>       </trans-unit>
        <trans-unit id="2302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Unload(System.AppDomain)">
          <source>Thus, in the .NET Framework version 2.0 <ph id="ph1">`domain`</ph> is not guaranteed to unload, because it might not be possible to terminate executing threads.</source>
          <target state="translated">Portanto, no .NET Framework versão 2.0 <ph id="ph1">`domain`</ph> não é garantido para descarregar, porque pode não ser possível encerrar threads em execução.</target>       </trans-unit>
        <trans-unit id="2303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Unload(System.AppDomain)">
          <source>In some cases, calling <ph id="ph1">&lt;xref:System.AppDomain.Unload%2A&gt;</ph> causes an immediate <ph id="ph2">&lt;xref:System.CannotUnloadAppDomainException&gt;</ph>, for example if it is called in a finalizer.</source>
          <target state="translated">Em alguns casos, chamando <ph id="ph1">&lt;xref:System.AppDomain.Unload%2A&gt;</ph> faz com que um imediata <ph id="ph2">&lt;xref:System.CannotUnloadAppDomainException&gt;</ph>, por exemplo se for chamado em um finalizador.</target>       </trans-unit>
        <trans-unit id="2304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Unload(System.AppDomain)">
          <source>The threads in <ph id="ph1">`domain`</ph> are terminated using the <ph id="ph2">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> method, which throws a <ph id="ph3">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> in the thread.</source>
          <target state="translated">Os threads nos <ph id="ph1">`domain`</ph> são encerradas usando o <ph id="ph2">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> método, que gera um <ph id="ph3">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> no thread.</target>       </trans-unit>
        <trans-unit id="2305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Unload(System.AppDomain)">
          <source>Although the thread should terminate promptly, it can continue executing for an unpredictable amount of time in a <ph id="ph1">`finally`</ph> clause.</source>
          <target state="translated">Embora o thread deve encerrar imediatamente, ele poderá continuar em execução por um período imprevisível em um <ph id="ph1">`finally`</ph> cláusula.</target>       </trans-unit>
        <trans-unit id="2306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Unload(System.AppDomain)">
          <source>Version Compatibility</source>
          <target state="translated">Compatibilidade de versões</target>       </trans-unit>
        <trans-unit id="2307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Unload(System.AppDomain)">
          <source>In the .NET Framework version 1.0 and 1.1 if the thread that calls <ph id="ph1">&lt;xref:System.AppDomain.Unload%2A&gt;</ph> is running in <ph id="ph2">`domain`</ph>, another thread is started to perform the unload operation.</source>
          <target state="translated">No .NET Framework versão 1.0 e 1.1 se o thread que chama <ph id="ph1">&lt;xref:System.AppDomain.Unload%2A&gt;</ph> está sendo executado no <ph id="ph2">`domain`</ph>, outro thread é iniciado para realizar a operação.</target>       </trans-unit>
        <trans-unit id="2308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Unload(System.AppDomain)">
          <source>If <ph id="ph1">`domain`</ph> cannot be unloaded, a <ph id="ph2">&lt;xref:System.CannotUnloadAppDomainException&gt;</ph> is thrown in that thread, not in the original thread that called <ph id="ph3">&lt;xref:System.AppDomain.Unload%2A&gt;</ph>.</source>
          <target state="translated">Se <ph id="ph1">`domain`</ph> não pode ser descarregado, um <ph id="ph2">&lt;xref:System.CannotUnloadAppDomainException&gt;</ph> é lançada nesse thread, não no thread original que chamou <ph id="ph3">&lt;xref:System.AppDomain.Unload%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Unload(System.AppDomain)">
          <source>However, if the thread that calls <ph id="ph1">&lt;xref:System.AppDomain.Unload%2A&gt;</ph> is running outside <ph id="ph2">`domain`</ph>, that thread receives the exception.</source>
          <target state="translated">No entanto, se o thread que chama <ph id="ph1">&lt;xref:System.AppDomain.Unload%2A&gt;</ph> está em execução fora <ph id="ph2">`domain`</ph>, thread recebe a exceção.</target>       </trans-unit>
        <trans-unit id="2310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Unload(System.AppDomain)">
          <source>The following code example shows how to unload an application domain.</source>
          <target state="translated">O exemplo de código a seguir mostra como descarregar um domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="2311" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Unload(System.AppDomain)">
          <source><ph id="ph1">&lt;paramref name="domain" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="domain" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2312" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Unload(System.AppDomain)">
          <source><ph id="ph1">&lt;paramref name="domain" /&gt;</ph> could not be unloaded.</source>
          <target state="translated">Não foi possível descarregar <ph id="ph1">&lt;paramref name="domain" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2313" translate="yes" xml:space="preserve" uid="M:System.AppDomain.Unload(System.AppDomain)">
          <source>An error occurred during the unload process.</source>
          <target state="translated">Ocorreu um erro durante o processo de descarregamento.</target>       </trans-unit>
        <trans-unit id="2314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Unload(System.AppDomain)">
          <source>to add an event handler for this event.</source>
          <target state="translated">Para adicionar um manipulador de eventos para esse evento.</target>       </trans-unit>
        <trans-unit id="2315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Unload(System.AppDomain)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" /&gt;</ph>.</source>
          <target state="translated">Enumeração associada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomain.Unload(System.AppDomain)">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.Demand" /&gt;</ph>.</source>
          <target state="translated">Ação de segurança: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.Demand" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>