<Type Name="Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;" FullName="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c5da4af93ad7b061e8a044bcad37e9192c6c78b1" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52610661" /></Metadata><TypeSignature Language="C#" Value="public class Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt; : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Tuple`8&lt;T1, T2, T3, T4, T5, T6, T7, TRest&gt; extends System.Object implements class System.Collections.IStructuralComparable, class System.Collections.IStructuralEquatable, class System.IComparable" />
  <TypeSignature Language="DocId" Value="T:System.Tuple`8" />
  <TypeSignature Language="VB.NET" Value="Public Class Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest)&#xA;Implements IComparable, IStructuralComparable, IStructuralEquatable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename TRest&gt;&#xA;public ref class Tuple : IComparable, System::Collections::IStructuralComparable, System::Collections::IStructuralEquatable" />
  <TypeSignature Language="F#" Value="type Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt; = class&#xA;    interface IStructuralEquatable&#xA;    interface IStructuralComparable&#xA;    interface IComparable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1" />
    <TypeParameter Name="T2" />
    <TypeParameter Name="T3" />
    <TypeParameter Name="T4" />
    <TypeParameter Name="T5" />
    <TypeParameter Name="T6" />
    <TypeParameter Name="T7" />
    <TypeParameter Name="TRest" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IStructuralComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IStructuralEquatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T1">O tipo do primeiro componente da tupla.</typeparam>
    <typeparam name="T2">O tipo do segundo componente da tupla.</typeparam>
    <typeparam name="T3">O tipo do terceiro componente da tupla.</typeparam>
    <typeparam name="T4">O tipo do quarto componente da tupla.</typeparam>
    <typeparam name="T5">O tipo do quinto componente da tupla.</typeparam>
    <typeparam name="T6">O tipo do sexto componente da tupla.</typeparam>
    <typeparam name="T7">O tipo do sétimo componente da tupla.</typeparam>
    <typeparam name="TRest">Qualquer objeto <see langword="Tuple" /> genérico que define os tipos dos componentes restantes da tupla.</typeparam>
    <summary>Representa uma tupla de *n*, em que *n* é 8 ou maior.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tupla é uma estrutura de dados que possui um número específico e uma sequência de valores. O <xref:System.Tuple%608> classe representa um *n*- tupla que tem oito ou mais componentes.  
  
 Você pode criar uma instância de um <xref:System.Tuple%608> objeto com exatamente oito componentes chamando estático <xref:System.Tuple.Create%2A?displayProperty=nameWithType> método. O exemplo a seguir cria uma tupla de 8 (octupla) que contém números primos de menor que 20. Observe que ele usa a inferência de tipo para determinar o tipo de cada componente.  
  
 [!code-csharp[System.Tuple.Create#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/createntuple.cs#17)]
 [!code-vb[System.Tuple.Create#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/createntuple.vb#17)]  
  
 Você também pode instanciar um objeto de tupla de n com oito ou mais componentes chamando o <xref:System.Tuple%608.%23ctor%2A> construtor. O exemplo a seguir usa o <xref:System.Tuple%608.%23ctor%2A> construtor para criar uma tupla de 8 que é equivalente à tupla criada no exemplo anterior.  
  
 [!code-csharp[System.Tuple\`8.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.class/cs/octuple1.cs#1)]
 [!code-vb[System.Tuple\`8.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.class/vb/octuple1.vb#1)]  
  
> [!NOTE]
>  Para criar uma tupla de n com nove ou mais componentes, você deve chamar o <xref:System.Tuple%608.%23ctor%2A> construtor. Os métodos de fábrica estáticos do <xref:System.Tuple> classe não dão suporte a criação de `Tuple` objetos com mais de oito componentes.  
  
 Para criar uma instância de uma tupla de n com oito ou mais componentes com o <xref:System.Tuple%608.%23ctor%2A> construtor, você fornecer um genérico `Tuple` do objeto como o `rest` parâmetro para definir o oitavo por meio *n*componentes th da tupla. Aninhando genérico `Tuple` objetos dessa forma, você pode criar uma tupla que não tem nenhuma limitação prática no número de seus componentes.  
  
 O exemplo a seguir cria uma tupla de 17 que contém dados de população da cidade de Detroit, Michigan, para cada censo nacional de 1860 a 2000. O primeiro componente da tupla é o nome da cidade. O segundo componente é a data de início da série de dados e o terceiro componente é a população na data de início. Cada componente subsequente fornece a população em intervalos década. A tupla com 17-é criada pelo aninhamento uma <xref:System.Tuple%603> do objeto dentro de um <xref:System.Tuple%608> objeto. (Que é, o <xref:System.Tuple%603> objeto é fornecido como o valor da `rest` parâmetro no <xref:System.Tuple%608> construtor de classe.) Isso <xref:System.Tuple%608> objeto é, por sua vez, aninhado em um outer <xref:System.Tuple%608> objeto. (Isso é, o <xref:System.Tuple%608> objeto é fornecido como o valor do `rest` parâmetro externo <xref:System.Tuple%608> construtor da classe do objeto.)  
  
 [!code-csharp[System.Tuple.Create#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/example.cs#19)]
 [!code-vb[System.Tuple.Create#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/example.vb#19)]  
  
 Você pode recuperar o valor dos componentes de sete primeiras da tupla, usando somente leitura <xref:System.Tuple%607.Item1%2A>, <xref:System.Tuple%607.Item2%2A>, <xref:System.Tuple%607.Item3%2A>, <xref:System.Tuple%607.Item4%2A>, <xref:System.Tuple%607.Item5%2A>, <xref:System.Tuple%607.Item6%2A>, e <xref:System.Tuple%607.Item7%2A> propriedades da instância. Todos os componentes adicionais que estão aninhados e pode ser recuperados do <xref:System.Tuple%608.Rest%2A> propriedade. No exemplo anterior, o <xref:System.Tuple%608.Item1%2A> por meio de <xref:System.Tuple%608.Item7%2A> propriedades recuperar o primeiro por meio de componentes sétimo da tupla. O oitavo por meio de componentes no décimo quarto estão contidos na tupla que está aninhada no segundo nível e são representados pela `Rest.Item1` por meio de `Rest.Item7` propriedades. Os componentes do décimo sétimo Décima quinta através de estão contidos na tupla que está aninhada no terceiro nível e são representados pela `Rest.Rest.Item1` Embora `Rest.Rest.Item3` propriedades.  
  
 As tuplas costumam ser usadas de quatro maneiras diferentes:  
  
-   Para representar um único conjunto de dados. Por exemplo, uma tupla pode representar um registro de banco de dados, e seus componentes podem representar campos individuais do registro.  
  
-   Para fornecer acesso fácil a, e a manipulação de um conjunto de dados.  
  
-   Para retornar vários valores de um método sem o uso de parâmetros `out` (no C#) ou de parâmetros `ByRef` (no Visual Basic). Por exemplo, o exemplo anterior retorna suas estatísticas computadas, juntamente com o nome da cidade, em um <xref:System.Tuple%607> objeto.  
  
-   Para passar vários valores para um método por meio de um parâmetro único. Por exemplo, o método <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> tem um único parâmetro que permite fornecer um valor ao método que o thread executa na inicialização. Se você fornecer um <xref:System.Tuple%607> do objeto como o argumento de método, você pode fornecer uma rotina de inicialização do thread com sete itens de dados.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Tuple" />
    <altmember cref="T:System.Tuple`1" />
    <altmember cref="T:System.Tuple`2" />
    <altmember cref="T:System.Tuple`3" />
    <altmember cref="T:System.Tuple`4" />
    <altmember cref="T:System.Tuple`5" />
    <altmember cref="T:System.Tuple`6" />
    <altmember cref="T:System.Tuple`7" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tuple (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T1 item1, !T2 item2, !T3 item3, !T4 item4, !T5 item5, !T6 item6, !T7 item7, !TRest rest) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5, item6 As T6, item7 As T7, rest As TRest)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);" />
      <MemberSignature Language="F#" Value="new Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt; : 'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7 * 'Rest -&gt; Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;" Usage="new System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt; (item1, item2, item3, item4, item5, item6, item7, rest)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
        <Parameter Name="item5" Type="T5" />
        <Parameter Name="item6" Type="T6" />
        <Parameter Name="item7" Type="T7" />
        <Parameter Name="rest" Type="TRest" />
      </Parameters>
      <Docs>
        <param name="item1">O valor do primeiro componente da tupla.</param>
        <param name="item2">O valor do segundo componente da tupla.</param>
        <param name="item3">O valor do terceiro componente da tupla.</param>
        <param name="item4">O valor do quarto componente da tupla</param>
        <param name="item5">O valor do quinto componente da tupla.</param>
        <param name="item6">O valor do sexto componente da tupla.</param>
        <param name="item7">O valor do sétimo componente da tupla.</param>
        <param name="rest">Qualquer objeto <see langword="Tuple" /> genérico que contém os valores dos componentes restantes da tupla.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Tuple`8" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você também pode usar o estático <xref:System.Tuple.Create%2A?displayProperty=nameWithType> método para instanciar um objeto de tupla de 8 (octupla) sem ter que especificar explicitamente os tipos de seus componentes. O exemplo a seguir usa o <xref:System.Tuple.Create%2A?displayProperty=nameWithType> método para instanciar um objeto de tupla de 8 que contém números primos de menor que 20.  
  
 [!code-csharp[System.Tuple.Create#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/createntuple.cs#17)]
 [!code-vb[System.Tuple.Create#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/createntuple.vb#17)]  
  
 Isso é equivalente a seguinte chamada para o <xref:System.Tuple%607.%23ctor%2A> construtor de classe.  
  
 [!code-csharp[System.Tuple\`8.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.class/cs/octuple1.cs#1)]
 [!code-vb[System.Tuple\`8.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.class/vb/octuple1.vb#1)]  
  
 No entanto, estático <xref:System.Tuple.Create%2A?displayProperty=nameWithType> método não pode ser usado para criar um objeto de tupla com mais de oito componentes.  
  
 Ao usar o <xref:System.Tuple%608.%23ctor%2A> construtor para criar uma tupla de n com oito ou mais componentes, você usa o `rest` parâmetro para criar uma n-tupla aninhada tem de um a sete componentes. Usando sucessivos níveis de aninhamento, você pode criar uma tupla de n que tem um número praticamente ilimitado de componentes. Por exemplo, para criar uma tupla de 25, você instancia um <xref:System.Tuple%608> do objeto com três níveis de aninhamento, da seguinte maneira:  
  
-   Mais externo <xref:System.Tuple%608> objeto contém o primeiro por meio de componentes sétimo. Sua <xref:System.Tuple%608.Rest%2A> propriedade fornece acesso a um <xref:System.Tuple%608> objeto no primeiro nível de aninhamento.  
  
-   Mais externa aninhados <xref:System.Tuple%608> objeto contém o oitavo por meio de componentes no décimo quarto e sua <xref:System.Tuple%608.Rest%2A> propriedade fornece acesso a um <xref:System.Tuple%608> objeto no segundo nível de aninhamento.  
  
-   O <xref:System.Tuple%608> objeto no segundo nível de aninhamento contém o décimo quinto por meio de componentes do vigésimo primeiro e sua <xref:System.Tuple%608.Rest%2A> propriedade fornece acesso a um <xref:System.Tuple%604> objeto no terceiro nível de aninhamento.  
  
-   A tupla mais interna é um <xref:System.Tuple%604> objeto que contém os componentes de 25 por meio do vigésimo segundo.  
  
   
  
## Examples  
 O exemplo a seguir cria uma tupla de 17 que contém dados de população da cidade de Detroit, Michigan, para cada censo de 1860 a 2000. O primeiro componente da tupla é o nome da cidade. O segundo componente é a data de início da série de dados e o terceiro componente é a população na data de início. Cada componente subsequente fornece a população em intervalos década. O exemplo usa duas camadas de aninhamento para criar a tupla de 17: ele define uma tupla de 7 cujo terceiro através do sétimo componentes contêm dados de população para 1860 por meio de 1900, uma aninhada 7 tupla que contém dados de população de 1910 por meio de 1970 e interna aninhados tupla de 3 que contém dados de população para 1980 a 2000.  
  
 [!code-csharp[System.Tuple.Create#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/example.cs#19)]
 [!code-vb[System.Tuple.Create#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/example.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="rest" /> não é um objeto <see langword="Tuple" /> genérico.</exception>
        <altmember cref="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="tuple.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">O objeto a ser comparado com essa instância.</param>
        <summary>Retorna um valor que indica se o objeto <see cref="T:System.Tuple`8" /> atual é igual a um objeto especificado.</summary>
        <returns><see langword="true" /> caso a instância atual seja igual ao objeto especificado; do contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `obj` parâmetro é considerado igual à instância atual se ele atender a todas as seguintes condições:  
  
-   É um <xref:System.Tuple%608> objeto.  
  
-   Ele tem o mesmo número total de componentes que são dos mesmos tipos que a instância atual.  
  
-   Seus componentes (incluindo seus componentes aninhados) são iguais da instância atual. Igualdade é determinada pelo comparador de igualdade padrão para cada componente.  
  
   
  
## Examples  
 O exemplo a seguir define cinco <xref:System.Tuple%608> objetos que contêm números primos. Em seguida, ele compara o primeiro objeto com cada um dos objetos restantes. Como mostra a saída, somente o primeiro e o último <xref:System.Tuple%608> objetos forem iguais, porque eles têm um número idêntico de componentes com valores idênticos.  
  
 [!code-csharp[System.Tuple\`8.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.equals/cs/equals1.cs#1)]
 [!code-vb[System.Tuple\`8.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="tuple.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Calcula o código hash do objeto <see cref="T:System.Tuple`8" /> atual.</summary>
        <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item1">
      <MemberSignature Language="C#" Value="public T1 Item1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T1 Item1" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item1" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item1 As T1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T1 Item1 { T1 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item1 : 'T1" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T1</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o valor do primeiro componente do objeto <see cref="T:System.Tuple`8" /> atual.</summary>
        <value>O valor do primeiro componente do objeto <see cref="T:System.Tuple`8" /> atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 É possível determinar dinamicamente o tipo do componente <xref:System.Tuple%608.Item1%2A> de duas maneiras:  
  
-   Chamando o método `GetType` no valor retornado pela propriedade <xref:System.Tuple%608.Item1%2A>.  
  
-   Recuperando o objeto <xref:System.Type> que representa o objeto <xref:System.Tuple%608> e recuperando o primeiro elemento da matriz que é retornada pelo método <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 O exemplo a seguir cria um objeto de 17 tuplas que contém dados de preenchimento da cidade de Detroit, Michigan, de 1860 a 2000. O primeiro componente da tupla 17 é o nome da cidade. O exemplo usa o <xref:System.Tuple%608.Item1%2A> propriedade para exibir o nome da cidade no cabeçalho da tabela antes de exibir os dados de população.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item2">
      <MemberSignature Language="C#" Value="public T2 Item2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T2 Item2" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item2" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item2 As T2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T2 Item2 { T2 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item2 : 'T2" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o valor do segundo componente do objeto <see cref="T:System.Tuple`8" /> atual.</summary>
        <value>O valor do atual <see cref="T:System.Tuple`8" /> segundo componente do objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 É possível determinar dinamicamente o tipo do componente <xref:System.Tuple%608.Item2%2A> de duas maneiras:  
  
-   Chamando o método `GetType` no valor retornado pela propriedade <xref:System.Tuple%608.Item2%2A>.  
  
-   Recuperando o objeto <xref:System.Type> que representa o objeto <xref:System.Tuple%608> e recuperando o segundo elemento da matriz retornada pelo método <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 O exemplo a seguir cria um objeto de 17 tuplas que contém dados de preenchimento da cidade de Detroit, Michigan, de 1860 a 2000. O segundo componente da tupla 17 é o primeiro ano da série de dados. O exemplo atribui o valor da <xref:System.Tuple%608.Item2%2A> propriedade a uma variável e, em seguida, usa essa variável para representar o ano cujos dados são exibidos.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item3">
      <MemberSignature Language="C#" Value="public T3 Item3 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T3 Item3" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item3" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item3 As T3" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T3 Item3 { T3 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item3 : 'T3" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item3" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o valor do terceiro componente do objeto <see cref="T:System.Tuple`8" /> atual.</summary>
        <value>O valor do atual <see cref="T:System.Tuple`8" /> terceiro componente do objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 É possível determinar dinamicamente o tipo do componente <xref:System.Tuple%608.Item3%2A> de duas maneiras:  
  
-   Chamando o método `GetType` no valor retornado pela propriedade <xref:System.Tuple%608.Item3%2A>.  
  
-   Recuperando a <xref:System.Type> objeto que representa o <xref:System.Tuple%608> do objeto e recuperando o terceiro elemento da matriz que é retornado pelo seu <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 O exemplo a seguir cria um objeto de 17 tuplas que contém dados de preenchimento da cidade de Detroit, Michigan, de 1860 a 2000. O terceiro componente da tupla 17 é a população de 1860. O exemplo usa o <xref:System.Tuple%608.Item3%2A> propriedade para exibir o valor de população e para calcular a taxa de alteração de preenchimento entre 1860 e 1870 anual.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item4">
      <MemberSignature Language="C#" Value="public T4 Item4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T4 Item4" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item4" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item4 As T4" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T4 Item4 { T4 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item4 : 'T4" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item4" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T4</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o valor do quarto componente do objeto <see cref="T:System.Tuple`8" /> atual.</summary>
        <value>O valor do atual <see cref="T:System.Tuple`8" /> quarto componente do objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 É possível determinar dinamicamente o tipo do componente <xref:System.Tuple%608.Item4%2A> de duas maneiras:  
  
-   Chamando o método `GetType` no valor retornado pela propriedade <xref:System.Tuple%608.Item4%2A>.  
  
-   Recuperando a <xref:System.Type> objeto que representa o <xref:System.Tuple%608> do objeto e recuperando o quarto elemento da matriz que é retornado pelo seu <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 O exemplo a seguir cria um objeto de 17 tuplas que contém dados de preenchimento da cidade de Detroit, Michigan, de 1860 a 2000. O quarto componente da tupla 17 é a população em 1870. O exemplo usa o <xref:System.Tuple%608.Item4%2A> propriedade para exibir o valor de população e para calcular a taxa de alteração de preenchimento entre 1870 e 1880 anual.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item5">
      <MemberSignature Language="C#" Value="public T5 Item5 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T5 Item5" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item5" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item5 As T5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T5 Item5 { T5 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item5 : 'T5" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item5" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T5</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o valor do quinto componente do objeto <see cref="T:System.Tuple`8" /> atual.</summary>
        <value>O valor do atual <see cref="T:System.Tuple`8" /> quinto componente do objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 É possível determinar dinamicamente o tipo do componente <xref:System.Tuple%608.Item5%2A> de duas maneiras:  
  
-   Chamando o método `GetType` no valor retornado pela propriedade <xref:System.Tuple%608.Item5%2A>.  
  
-   Recuperando a <xref:System.Type> objeto que representa o <xref:System.Tuple%608> do objeto e recuperando o quinto elemento da matriz que é retornado pelo seu <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 O exemplo a seguir cria um objeto de 17 tuplas que contém dados de preenchimento da cidade de Detroit, Michigan, de 1860 a 2000. O quinto componente da tupla 17 é a população em 1880. O exemplo usa o <xref:System.Tuple%608.Item5%2A> propriedade para exibir o valor de população e para calcular a taxa de alteração de preenchimento entre 1880 e 1890 anual.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item6">
      <MemberSignature Language="C#" Value="public T6 Item6 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T6 Item6" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item6" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item6 As T6" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T6 Item6 { T6 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item6 : 'T6" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item6" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T6</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o valor do sexto componente do objeto <see cref="T:System.Tuple`8" /> atual.</summary>
        <value>O valor do atual <see cref="T:System.Tuple`8" /> sexto componente do objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 É possível determinar dinamicamente o tipo do componente <xref:System.Tuple%608.Item6%2A> de duas maneiras:  
  
-   Chamando o método `GetType` no valor retornado pela propriedade <xref:System.Tuple%608.Item6%2A>.  
  
-   Recuperando a <xref:System.Type> objeto que representa o <xref:System.Tuple%608> do objeto e recuperando o sexto elemento da matriz que é retornado pelo seu <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 O exemplo a seguir cria um objeto de 17 tuplas que contém dados de preenchimento da cidade de Detroit, Michigan, de 1860 a 2000. O sexto componente da tupla 17 é a população em 1890. O exemplo usa o <xref:System.Tuple%608.Item6%2A> propriedade para exibir o valor de população e para calcular a taxa de alteração de preenchimento entre 1900 e o 1890 anual.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item7">
      <MemberSignature Language="C#" Value="public T7 Item7 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T7 Item7" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item7" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item7 As T7" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T7 Item7 { T7 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item7 : 'T7" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item7" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T7</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o valor do sétimo componente do objeto <see cref="T:System.Tuple`8" /> atual.</summary>
        <value>O valor do atual <see cref="T:System.Tuple`8" /> sétimo componente do objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 É possível determinar dinamicamente o tipo do componente <xref:System.Tuple%608.Item7%2A> de duas maneiras:  
  
-   Chamando o método `GetType` no valor retornado pela propriedade <xref:System.Tuple%608.Item7%2A>.  
  
-   Recuperando a <xref:System.Type> objeto que representa o <xref:System.Tuple%608> do objeto e recuperando o sétimo elemento da matriz que é retornado pelo seu <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 O exemplo a seguir cria um objeto de 17 tuplas que contém dados de preenchimento da cidade de Detroit, Michigan, de 1860 a 2000. O sétimo componente da tupla 17 é a população de 1900. O exemplo usa o <xref:System.Tuple%608.Item7%2A> propriedade para exibir o valor de população e para calcular a taxa de alteração de preenchimento entre 1900 e 1910 anual.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rest">
      <MemberSignature Language="C#" Value="public TRest Rest { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TRest Rest" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Rest" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rest As TRest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TRest Rest { TRest get(); };" />
      <MemberSignature Language="F#" Value="member this.Rest : 'Rest" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Rest" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém os componentes restantes do objeto <see cref="T:System.Tuple`8" /> atual.</summary>
        <value>O valor dos componentes restantes do objeto <see cref="T:System.Tuple`8" /> atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Tuple%608.Rest%2A> propriedade retorna um aninhados `Tuple` objeto que permite o acesso para o oitavo entanto *n*componentes th da tupla. Dependendo do número total de componentes na tupla, os valores do oitavo por meio de componentes no décimo quarto podem ser recuperados do aninhada `Tuple` do objeto <xref:System.Tuple%608.Item1%2A> por meio de <xref:System.Tuple%608.Item7%2A> propriedades. Em seguida, você pode usar o <xref:System.Tuple%608.Rest%2A> propriedade de um aninhados <xref:System.Tuple%608> o objeto para recuperar o `Tuple` objeto do próximo nível de aninhamento.  
  
 Você pode determinar dinamicamente o número de componentes em um aninhamento `Tuple` objeto que é retornado pelo <xref:System.Tuple%608.Rest%2A> propriedade por meio da extração de dígitos de seu nome de tipo. O exemplo a seguir fornece uma ilustração.  
  
 [!code-vb[System.Tuple\`8.Item1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/rest.vb#2)]  
  
   
  
## Examples  
 O exemplo a seguir cria um objeto de 17 tuplas que contém dados de preenchimento da cidade de Detroit, Michigan, de 1860 a 2000. O sétimo componente da tupla 17 é a população de 1900. O exemplo usa o <xref:System.Tuple%608.Rest%2A> propriedade para recuperar os valores do oitavo por meio de componentes no décimo quarto e ele usa o <xref:System.Tuple%608.Rest%2A> propriedade aninhada <xref:System.Tuple%608> objeto para recuperar os valores dos componentes restantes.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralComparable.CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralComparable.CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer) = System::Collections::IStructuralComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">Um objeto a ser comparado com a instância atual.</param>
        <param name="comparer">Um objeto que fornece regras personalizadas para comparação.</param>
        <summary>Compara o objeto <see cref="T:System.Tuple`8" /> atual com um objeto especificado usando um comparador especificado e retorna um inteiro que indica se o objeto atual está antes, depois ou na mesma posição do objeto especificado na ordem de classificação.</summary>
        <returns>Um inteiro assinado que indica a posição relativa dessa instância e <paramref name="other" /> na ordem de classificação, conforme mostrado na tabela a seguir.  
  
 <list type="table"><listheader><term> Valor 
 </term><description> Descrição 
 </description></listheader><item><term> Um inteiro negativo 
 </term><description> Esta instância precede <paramref name="other" />.  
  
 </description></item><item><term> Zero 
 </term><description> Esta instância e <paramref name="other" /> têm a mesma posição na ordem de classificação.  
  
 </description></item><item><term> Um inteiro positivo 
 </term><description> Esta instância segue <paramref name="other" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este membro é uma implementação de interface explícita. Ele só pode ser usado quando a instância de <xref:System.Tuple%608> é convertida em uma interface de <xref:System.Collections.IStructuralComparable>.  
  
 Esse método permite que você defina personalizadas comparações de <xref:System.Tuple%608> objetos. Por exemplo, você pode usar esse método para ordem <xref:System.Tuple%608> objetos com base no valor de um componente específico.  
  
 Embora possa ser chamado diretamente, esse método é mais comumente chamado pelos métodos de classificação de coleção que incluem parâmetros <xref:System.Collections.IComparer> para classificar os membros de uma coleção. Por exemplo, ele é chamado pelo método <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType> e pelo método <xref:System.Collections.SortedList.Add%2A> de um objeto <xref:System.Collections.SortedList> que é instanciado usando-se o construtor <xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType>.  
  
> [!CAUTION]
>  O <xref:System.Tuple%608.System%23Collections%23IStructuralComparable%23CompareTo%2A> método é destinado para uso em operações de classificação. Ele não deve ser usado quando a finalidade principal de uma comparação é determinar se dois objetos são iguais. Para determinar se dois objetos são iguais, chame o <xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%2A> método.  
  
   
  
## Examples  
 O exemplo a seguir cria uma matriz de <xref:System.Tuple%608> objetos que contém dados de preenchimento para quatro cidades dos EUA 1940 para 2000. Primeiro de componente do octupla é o nome da cidade. Os demais seis componentes representam a população em intervalos de 10 anos de 1940 a 2000.  
  
 O `PopulationComparer` classe fornece um <xref:System.Collections.IComparer> implementação que permite que a matriz de octuples seja classificada por qualquer um de seus componentes. Dois valores são fornecidos para o `PopulationComparer` classe em seu construtor: A posição do componente que define a ordem de classificação, e um <xref:System.Boolean> valor que indica se os objetos de tupla devem ser classificados em ordem crescente ou decrescente.  
  
 O exemplo, em seguida, exibe os elementos na matriz em ordem classificada, classifica-os pelo componente de terceiro (a população em 1950) e exibi-los e, em seguida, classifica-os pelo componente do oitavo (a população em 2000) e exibe-os.  
  
 [!code-csharp[System.Tuple\`8.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`8.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="other" /> não é um objeto <see cref="T:System.Tuple`8" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.Equals">
      <MemberSignature Language="C#" Value="bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IStructuralEquatable.Equals(object other, class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IStructuralEquatable.Equals(System::Object ^ other, System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="other">O objeto a ser comparado com essa instância.</param>
        <param name="comparer">Um objeto que define o método a ser usado para avaliar se dois objetos são iguais.</param>
        <summary>Retorna um valor que indica se o objeto <see cref="T:System.Tuple`8" /> atual é igual ao objeto especificado com base em um determinado método de comparação.</summary>
        <returns><see langword="true" /> caso a instância atual seja igual ao objeto especificado; do contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este membro é uma implementação do membro de interface explícita. Ele só pode ser usado quando a instância de <xref:System.Tuple%608> é convertida em uma interface de <xref:System.Collections.IStructuralEquatable>.  
  
 O <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> implementação é chamada somente se `other` não está `null`, e se ele pode ser com êxito convertido (em c#) ou convertido (no Visual Basic) em um <xref:System.Tuple%608> objeto que tem o mesmo número total de componentes (incluindo aquelas na aninhada `Tuple` objetos) dos mesmos tipos que a instância atual. O <xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29> método primeira passa a <xref:System.Tuple%608.Item1%2A> valores da <xref:System.Tuple%608> objetos a ser comparado com o <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> implementação. Se essa chamada de método retorna `true`, o método é chamado novamente e passado a <xref:System.Tuple%608.Item2%2A> valores dos dois <xref:System.Tuple%608> objetos. Isso continua até que a chamada de método retorna `false` quando ela compara um par específico de valores ou os dois <xref:System.Tuple%608.Rest%2A> valores são passados para o método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.GetHashCode">
      <MemberSignature Language="C#" Value="int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralEquatable.GetHashCode(class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralEquatable.GetHashCode(System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">Um objeto cujo método <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> calcula o código hash do objeto <see cref="T:System.Tuple`8" /> atual.</param>
        <summary>Calcula o código hash para o objeto <see cref="T:System.Tuple`8" /> atual usando um método de computação especificado.</summary>
        <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este membro é uma implementação do membro de interface explícita. Ele só pode ser usado quando a instância de <xref:System.Tuple%608> é convertida em uma interface de <xref:System.Collections.IStructuralEquatable>.  
  
 O método simplesmente encapsula uma chamada para o objeto `comparer` na implementação <xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType>.  
  
 O algoritmo usado para calcular o código hash deve retornar o mesmo código hash para dois <xref:System.Tuple%608> objetos que são considerados iguais.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Um objeto a ser comparado com a instância atual.</param>
        <summary>Compara o objeto <see cref="T:System.Tuple`8" /> atual a um objeto especificado e retorna um inteiro que indica se o objeto atual está antes, depois ou na mesma posição que o objeto especificado na ordem de classificação.</summary>
        <returns>Um inteiro assinado que indica a posição relativa dessa instância e <paramref name="obj" /> na ordem de classificação, conforme mostrado na tabela a seguir.  
  
 <list type="table"><listheader><term> Valor 
 </term><description> Descrição 
 </description></listheader><item><term> Um inteiro negativo 
 </term><description> Esta instância precede <paramref name="obj" />.  
  
 </description></item><item><term> Zero 
 </term><description> Esta instância e <paramref name="obj" /> têm a mesma posição na ordem de classificação.  
  
 </description></item><item><term> Um inteiro positivo 
 </term><description> Esta instância segue <paramref name="obj" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este membro é uma implementação do membro de interface explícita. Ele só pode ser usado quando a instância de <xref:System.Tuple%608> é convertida em uma interface de <xref:System.IComparable>.  
  
 Esse método fornece o <xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> implementação para o <xref:System.Tuple%608> classe. Embora possa ser chamado diretamente, o método é mais comumente chamado pelas sobrecargas padrão de métodos de classificação da coleção, como <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> e <xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType>, para classificar os membros de uma coleção.  
  
> [!CAUTION]
>  O <xref:System.Tuple%608.System%23IComparable%23CompareTo%2A> método é destinado para uso em operações de classificação. Ele não deve ser usado quando a finalidade principal de uma comparação é determinar se dois objetos são iguais. Para determinar se dois objetos são iguais, chame o <xref:System.Tuple%608.Equals%28System.Object%29?displayProperty=nameWithType> método.  
  
 Esse método usa o comparador de objeto padrão para comparar cada componente.  
  
   
  
## Examples  
 O exemplo a seguir cria uma matriz de octuples cujos componentes são inteiros que contêm um intervalo de números primos. O exemplo exibe os elementos da matriz em ordem classificada, classifica a matriz e, em seguida, exibe a matriz em ordem classificada. A saída mostra que a matriz foi classificada por <xref:System.Tuple%608.Item1%2A>, ou o primeiro componente da tupla. Observe que o exemplo não chama diretamente o <xref:System.Tuple%608.System%23IComparable%23CompareTo%28System.Object%29> método. Este método é chamado implicitamente pelo método <xref:System.Array.Sort%28System.Array%29> para cada elemento na matriz.  
  
 [!code-csharp[System.Tuple\`8.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.compareto/cs/compareto1.cs#1)]
 [!code-vb[System.Tuple\`8.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.compareto/vb/compareto1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="obj" /> não é um objeto <see cref="T:System.Tuple`8" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Item">
      <MemberSignature Language="C#" Value="object System.Runtime.CompilerServices.ITuple.Item[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Runtime.CompilerServices.ITuple.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Item(index As Integer) As Object Implements ITuple.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Runtime::CompilerServices::ITuple::Item[int] { System::Object ^ get(int index); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.CompilerServices.ITuple.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">O índice do elemento <see langword="Tuple" /> especificado. <paramref name="index" /> pode variar de 0 para <see langword="Item1" /> a um menos o número de elementos no <see langword="Tuple" />.</param>
        <summary>Obtém o valor do elemento <see langword="Tuple" /> especificado.</summary>
        <value>O valor do elemento <see langword="Tuple" /> na posição especificada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType> propriedade é uma implementação de interface explícita. Para chamá-lo, você deve converter ou converter o <xref:System.Tuple%608> do objeto para um <xref:System.Runtime.CompilerServices.ITuple> objeto de interface.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException"><paramref name="index" /> é menor que 0.  
  
- ou - 
 <paramref name="index" /> é maior ou igual a <see cref="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Length">
      <MemberSignature Language="C#" Value="int System.Runtime.CompilerServices.ITuple.Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Runtime.CompilerServices.ITuple.Length" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Length As Integer Implements ITuple.Length" />
      <MemberSignature Language="C++ CLI" Value="property int System::Runtime::CompilerServices::ITuple::Length { int get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.CompilerServices.ITuple.Length" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Length</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o número de elementos no <see langword="Tuple" />.</summary>
        <value>O número de elementos em <see langword="Tuple" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Length%2A> propriedade é uma implementação de interface explícita. Para chamá-lo, você deve converter ou converter o <xref:System.Tuple%608> de tipo para um <xref:System.Runtime.CompilerServices.ITuple> objeto de interface.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="tuple.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna uma cadeia de caracteres que representa o valor desta instância <see cref="T:System.Tuple`8" />.</summary>
        <returns>A representação de cadeia de caracteres desse objeto <see cref="T:System.Tuple`8" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres retornada por este método assume a forma (*Item1*, *Item2*, *Item3*, *Item4*, `Item5, Item6, Item7`,  *Item8*...), onde *Item1*, *Item2*, *Item3*, *Item4*, *Item5*, *Item6*, e *Item7* representam os valores da <xref:System.Tuple%608.Item1%2A>, <xref:System.Tuple%608.Item2%2A>, <xref:System.Tuple%608.Item3%2A>, <xref:System.Tuple%608.Item4%2A>, <xref:System.Tuple%608.Item5%2A>, <xref:System.Tuple%608.Item6%2A>, e <xref:System.Tuple%608.Item7%2A> propriedades. *Item8* representa o valor da <xref:System.Tuple%608> do objeto `Next.Item1` propriedade. O valor de todos os componentes aninhados adicionais siga *Item8*. Caso seja `null`, qualquer um dos valores de propriedade é representado como <xref:System.String.Empty?displayProperty=nameWithType>.  
  
   
  
## Examples  
 O exemplo a seguir cria uma tupla de 17 que contém dados de população da cidade de Detroit, Michigan, de 1860 a 1900. Ele usa o <xref:System.Tuple%608.ToString%2A> método para exibir dados da tupla.  
  
 [!code-csharp[System.Tuple\`8.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.Tuple\`8.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.tostring/vb/tostring1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>