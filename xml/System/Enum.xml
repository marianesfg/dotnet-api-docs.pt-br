<Type Name="Enum" FullName="System.Enum">
  <TypeSignature Language="C#" Value="public abstract class Enum : ValueType, IComparable, IConvertible, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Enum extends System.ValueType implements class System.IComparable, class System.IConvertible, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Enum" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Enum&#xA;Inherits ValueType&#xA;Implements IComparable, IConvertible, IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Enum abstract : ValueType, IComparable, IConvertible, IFormattable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="474b1-101">Fornece a classe base para enumerações.</span><span class="sxs-lookup"><span data-stu-id="474b1-101">Provides the base class for enumerations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-102">Uma enumeração é um conjunto de constantes nomeadas cujo tipo subjacente é qualquer tipo integral.</span><span class="sxs-lookup"><span data-stu-id="474b1-102">An enumeration is a set of named constants whose underlying type is any integral type.</span></span> <span data-ttu-id="474b1-103">Se nenhum tipo subjacente é explicitamente declarado, <xref:System.Int32> é usado.</span><span class="sxs-lookup"><span data-stu-id="474b1-103">If no underlying type is explicitly declared, <xref:System.Int32> is used.</span></span> <span data-ttu-id="474b1-104"><xref:System.Enum> é a classe base para todas as enumerações do .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="474b1-104"><xref:System.Enum> is the base class for all enumerations in the .NET Framework.</span></span> <span data-ttu-id="474b1-105">Tipos de enumeração são definidos pelo `enum` palavra-chave em c# e o `Enum`... `End Enum` construir no Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="474b1-105">Enumeration types are defined by the `enum` keyword in C# and the `Enum`...`End Enum` construct in Visual Basic.</span></span>  
  
 <span data-ttu-id="474b1-106"><xref:System.Enum> fornece métodos para comparar as instâncias dessa classe, converter o valor de uma instância em sua representação de cadeia de caracteres, converter a representação de cadeia de caracteres de um número em uma instância dessa classe e criar uma instância de uma enumeração especificado e o valor.</span><span class="sxs-lookup"><span data-stu-id="474b1-106"><xref:System.Enum> provides methods for comparing instances of this class, converting the value of an instance to its string representation, converting the string representation of a number to an instance of this class, and creating an instance of a specified enumeration and value.</span></span>  
  
 <span data-ttu-id="474b1-107">Você também pode tratar uma enumeração como um campo de bits.</span><span class="sxs-lookup"><span data-stu-id="474b1-107">You can also treat an enumeration as a bit field.</span></span> <span data-ttu-id="474b1-108">Para obter mais informações, consulte o [membros não-exclusivo e o atributo Flags](#Flags) seção e <xref:System.FlagsAttribute> tópico.</span><span class="sxs-lookup"><span data-stu-id="474b1-108">For more information, see the [Non-Exclusive Members and the Flags Attribute](#Flags) section and the <xref:System.FlagsAttribute> topic.</span></span>  
  
 <span data-ttu-id="474b1-109">Neste tópico:</span><span class="sxs-lookup"><span data-stu-id="474b1-109">In this topic:</span></span>  
  
 <span data-ttu-id="474b1-110">[Criando um tipo de enumeração](#Creating) </span><span class="sxs-lookup"><span data-stu-id="474b1-110">[Creating an enumeration type](#Creating) </span></span>  
 <span data-ttu-id="474b1-111">[Criando um tipo de enumeração](#Instantiating) </span><span class="sxs-lookup"><span data-stu-id="474b1-111">[Instantiating an enumeration type](#Instantiating) </span></span>  
 <span data-ttu-id="474b1-112">[Práticas recomendadas de enumeração](#BestPractices) </span><span class="sxs-lookup"><span data-stu-id="474b1-112">[Enumeration best practices](#BestPractices) </span></span>  
 <span data-ttu-id="474b1-113">[Executar operações com enumerações](#Operations) </span><span class="sxs-lookup"><span data-stu-id="474b1-113">[Performing operations with enumerations](#Operations) </span></span>  
 [<span data-ttu-id="474b1-114">Executar conversões</span><span class="sxs-lookup"><span data-stu-id="474b1-114">Performing conversions</span></span>](#conversions)  
 [<span data-ttu-id="474b1-115">Análise de valores de enumeração</span><span class="sxs-lookup"><span data-stu-id="474b1-115">Parsing enumeration values</span></span>](#parsing)  
 [<span data-ttu-id="474b1-116">Formatação de valores de enumeração</span><span class="sxs-lookup"><span data-stu-id="474b1-116">Formatting enumeration values</span></span>](#formatting)  
[<span data-ttu-id="474b1-117">Membros de enumeração de iteração</span><span class="sxs-lookup"><span data-stu-id="474b1-117">Iterating enumeration members</span></span>](#iterating)  
[<span data-ttu-id="474b1-118">Membros não-exclusivo e o atributo Flags</span><span class="sxs-lookup"><span data-stu-id="474b1-118">Non-exclusive members and the Flags attribute</span></span>](#Flags)  
[<span data-ttu-id="474b1-119">Adicionar métodos de enumeração</span><span class="sxs-lookup"><span data-stu-id="474b1-119">Adding enumeration methods</span></span>](#methods)  
  
<a name="Creating"></a>   
## <a name="creating-an-enumeration-type"></a><span data-ttu-id="474b1-120">Criando um tipo de enumeração</span><span class="sxs-lookup"><span data-stu-id="474b1-120">Creating an enumeration type</span></span>  
 <span data-ttu-id="474b1-121">Linguagens de programação normalmente fornecem a sintaxe para declarar uma enumeração que consiste em um conjunto de constantes nomeadas e seus valores.</span><span class="sxs-lookup"><span data-stu-id="474b1-121">Programming languages typically provide syntax to declare an enumeration that consists of a set of named constants and their values.</span></span> <span data-ttu-id="474b1-122">O exemplo a seguir ilustra a sintaxe usada por c# e Visual Basic para definir uma enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-122">The following example illustrates the syntax used by C# and Visual Basic to define an enumeration.</span></span> <span data-ttu-id="474b1-123">Ele cria uma enumeração denominada `ArrivalStatus` que tem três membros: `ArrivalStatus.Early`, `ArrivalStatus.OnTime`, e `ArrivalStatus.Late`.</span><span class="sxs-lookup"><span data-stu-id="474b1-123">It creates an enumeration named `ArrivalStatus` that has three members: `ArrivalStatus.Early`, `ArrivalStatus.OnTime`, and `ArrivalStatus.Late`.</span></span> <span data-ttu-id="474b1-124">Observe que em ambos os casos, a enumeração não explicitamente herda de <xref:System.Enum>; a relação de herança é tratada implicitamente pelo compilador.</span><span class="sxs-lookup"><span data-stu-id="474b1-124">Note that in both cases, the enumeration does not explicitly inherit from <xref:System.Enum>; the inheritance relationship is handled implicitly by the compiler.</span></span>  
  
 [!code-csharp[System.Enum.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class1.cs#1)]
 [!code-vb[System.Enum.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class1.vb#1)]  
  
> [!WARNING]
>  <span data-ttu-id="474b1-125">Você nunca deve criar um tipo de enumeração cujo tipo subjacente é não integral ou <xref:System.Char>.</span><span class="sxs-lookup"><span data-stu-id="474b1-125">You should never create an enumeration type whose underlying type is non-integral or <xref:System.Char>.</span></span> <span data-ttu-id="474b1-126">Embora você possa criar um tipo de enumeração tais por meio de reflexão, chamadas de método que usa o tipo resultante não são confiáveis e também podem lançar exceções adicionais.</span><span class="sxs-lookup"><span data-stu-id="474b1-126">Although you can create such an enumeration type by using reflection, method calls that use the resulting type are unreliable and may also throw additional exceptions.</span></span>  
  
<a name="Instantiating"></a>   
## <a name="instantiating-an-enumeration-type"></a><span data-ttu-id="474b1-127">Criando um tipo de enumeração</span><span class="sxs-lookup"><span data-stu-id="474b1-127">Instantiating an enumeration type</span></span>  
 <span data-ttu-id="474b1-128">Você pode instanciar um tipo de enumeração, assim como você cria uma instância em qualquer outro tipo de valor: declarando uma variável e atribuindo uma das constantes da enumeração a ele.</span><span class="sxs-lookup"><span data-stu-id="474b1-128">You can instantiate an enumeration type just as you instantiate any other value type: by declaring a variable and assigning one of the enumeration's constants to it.</span></span> <span data-ttu-id="474b1-129">O exemplo a seguir cria um `ArrivalStatus` cujo valor é `ArrivalStatus.OnTime`.</span><span class="sxs-lookup"><span data-stu-id="474b1-129">The following example instantiates an `ArrivalStatus` whose value is `ArrivalStatus.OnTime`.</span></span>  
  
 [!code-csharp[System.Enum.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class1.cs#2)]
 [!code-vb[System.Enum.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class1.vb#2)]  
  
 <span data-ttu-id="474b1-130">Você também pode instanciar um valor de enumeração das seguintes maneiras:</span><span class="sxs-lookup"><span data-stu-id="474b1-130">You can also instantiate an enumeration value in the following ways:</span></span>  
  
-   <span data-ttu-id="474b1-131">Usando recursos de uma determinada linguagem de programação cast (como em c#) ou converter um valor inteiro (como Visual Basic) para um valor de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-131">By using a particular programming language's features to cast (as in C#) or convert (as in Visual Basic) an integer value to an enumeration value.</span></span> <span data-ttu-id="474b1-132">O exemplo a seguir cria um `ArrivalStatus` objeto cujo valor é `ArrivalStatus.Early` dessa maneira.</span><span class="sxs-lookup"><span data-stu-id="474b1-132">The following example creates an `ArrivalStatus` object whose value is `ArrivalStatus.Early` in this way.</span></span>  
  
     [!code-csharp[System.Enum.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#4)]
     [!code-vb[System.Enum.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#4)]  
  
-   <span data-ttu-id="474b1-133">Chamando o construtor padrão implícito.</span><span class="sxs-lookup"><span data-stu-id="474b1-133">By calling its implicit default constructor.</span></span> <span data-ttu-id="474b1-134">Como mostra o exemplo a seguir, neste caso o valor subjacente da instância de enumeração é 0.</span><span class="sxs-lookup"><span data-stu-id="474b1-134">As the following example shows, in this case the underlying value of the enumeration instance is 0.</span></span> <span data-ttu-id="474b1-135">No entanto, isso não é necessariamente o valor de uma constante válido na enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-135">However, this is not necessarily the value of a valid constant in the enumeration.</span></span>  
  
     [!code-csharp[System.Enum.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#3)]
     [!code-vb[System.Enum.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#3)]  
  
-   <span data-ttu-id="474b1-136">Chamando o <xref:System.Enum.Parse%2A> ou <xref:System.Enum.TryParse%2A> método para analisar uma cadeia de caracteres que contém o nome de uma constante na enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-136">By calling the <xref:System.Enum.Parse%2A> or <xref:System.Enum.TryParse%2A> method to parse a string that contains the name of a constant in the enumeration.</span></span> <span data-ttu-id="474b1-137">Para obter mais informações, consulte o [análise valores de enumeração](#parsing) seção.</span><span class="sxs-lookup"><span data-stu-id="474b1-137">For more information, see the [Parsing Enumeration Values](#parsing) section.</span></span>  
  
-   <span data-ttu-id="474b1-138">Chamando o <xref:System.Enum.ToObject%2A> método para converter um valor inteiro para um tipo de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-138">By calling the <xref:System.Enum.ToObject%2A> method to convert an integral value to an enumeration type.</span></span> <span data-ttu-id="474b1-139">Para obter mais informações, consulte o [executar conversões](#conversions) seção.</span><span class="sxs-lookup"><span data-stu-id="474b1-139">For more information, see the [Performing Conversions](#conversions) section.</span></span>  
  
<a name="BestPractices"></a>   
## <a name="enumeration-best-practices"></a><span data-ttu-id="474b1-140">Práticas recomendadas de enumeração</span><span class="sxs-lookup"><span data-stu-id="474b1-140">Enumeration best practices</span></span>  
 <span data-ttu-id="474b1-141">É recomendável que você use as seguintes práticas recomendadas quando você define os tipos de enumeração:</span><span class="sxs-lookup"><span data-stu-id="474b1-141">We recommend that you use the following best practices when you define enumeration types:</span></span>  
  
-   <span data-ttu-id="474b1-142">Se você não tiver definido um membro de enumeração cujo valor é 0, considere a criação de um `None` constante enumerada.</span><span class="sxs-lookup"><span data-stu-id="474b1-142">If you have not defined an enumeration member whose value is 0, consider creating a `None` enumerated constant.</span></span> <span data-ttu-id="474b1-143">Por padrão, a memória usada para a enumeração é inicializada a zero, o common language runtime.</span><span class="sxs-lookup"><span data-stu-id="474b1-143">By default, the memory used for the enumeration is initialized to zero by the common language runtime.</span></span> <span data-ttu-id="474b1-144">Consequentemente, se você não definir uma constante cujo valor é zero, a enumeração conterá um valor ilegal quando ele é criado.</span><span class="sxs-lookup"><span data-stu-id="474b1-144">Consequently, if you do not define a constant whose value is zero, the enumeration will contain an illegal value when it is created.</span></span>  
  
-   <span data-ttu-id="474b1-145">Se houver um caso padrão óbvio que seu aplicativo precisa representar, considere o uso de um enumerada constante cujo valor é zero para representá-lo.</span><span class="sxs-lookup"><span data-stu-id="474b1-145">If there is an obvious default case that your application has to represent, consider using an enumerated constant whose value is zero to represent it.</span></span> <span data-ttu-id="474b1-146">Se não houver nenhum caso padrão, considere o uso de uma constante enumerada cujo valor é zero para especificar o caso em que não esteja representado por qualquer uma das outras constantes enumeradas.</span><span class="sxs-lookup"><span data-stu-id="474b1-146">If there is no default case, consider using an enumerated constant whose value is zero to specify the case that is not represented by any of the other enumerated constants.</span></span>  
  
-   <span data-ttu-id="474b1-147">Não especifique constantes enumeradas são reservados para uso futuro.</span><span class="sxs-lookup"><span data-stu-id="474b1-147">Do not specify enumerated constants that are reserved for future use.</span></span>  
  
-   <span data-ttu-id="474b1-148">Quando você define um método ou propriedade que utiliza uma constante enumerada como um valor, considere a possibilidade de validação do valor.</span><span class="sxs-lookup"><span data-stu-id="474b1-148">When you define a method or property that takes an enumerated constant as a value, consider validating the value.</span></span> <span data-ttu-id="474b1-149">O motivo é que você pode converter um valor numérico para o tipo de enumeração, mesmo se esse valor numérico não está definido na enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-149">The reason is that you can cast a numeric value to the enumeration type even if that numeric value is not defined in the enumeration.</span></span>  
  
 <span data-ttu-id="474b1-150">Práticas recomendadas adicionais para tipos de enumeração cujos constantes são campos de bits são listadas no [membros não-exclusivo e o atributo Flags](#Flags) seção.</span><span class="sxs-lookup"><span data-stu-id="474b1-150">Additional best practices for enumeration types whose constants are bit fields are listed in the [Non-Exclusive Members and the Flags Attribute](#Flags) section.</span></span>  
  
<a name="Operations"></a>   
## <a name="performing-operations-with-enumerations"></a><span data-ttu-id="474b1-151">Executar operações com enumerações</span><span class="sxs-lookup"><span data-stu-id="474b1-151">Performing operations with enumerations</span></span>  
 <span data-ttu-id="474b1-152">Não é possível definir novos métodos, quando você estiver criando uma enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-152">You cannot define new methods when you are creating an enumeration.</span></span> <span data-ttu-id="474b1-153">No entanto, um tipo de enumeração herda um conjunto completo de estático e métodos de instância do <xref:System.Enum> classe.</span><span class="sxs-lookup"><span data-stu-id="474b1-153">However, an enumeration type inherits a complete set of static and instance methods from the <xref:System.Enum> class.</span></span> <span data-ttu-id="474b1-154">As seções a seguir pesquisa a maioria desses métodos, além de vários outros métodos que são usados ao trabalhar com valores de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-154">The following sections survey most of these methods, in addition to several other methods that are commonly used when working with enumeration values.</span></span>  
  
<a name="conversions"></a>   
### <a name="performing-conversions"></a><span data-ttu-id="474b1-155">Executar conversões</span><span class="sxs-lookup"><span data-stu-id="474b1-155">Performing conversions</span></span>  
 <span data-ttu-id="474b1-156">Você pode converter entre um membro de enumeração e seu tipo subjacente usando uma conversão (em c#) ou o operador de conversão (no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="474b1-156">You can convert between an enumeration member and its underlying type by using a casting (in C#) or conversion (in Visual Basic) operator.</span></span> <span data-ttu-id="474b1-157">O exemplo a seguir usa os operadores de conversão ou para realizar conversões de um número inteiro para um valor de enumeração e de um valor de enumeração a um número inteiro.</span><span class="sxs-lookup"><span data-stu-id="474b1-157">The following example uses casting or conversion operators to perform conversions both from an integer to an enumeration value and from an enumeration value to an integer.</span></span>  
  
 [!code-csharp[System.Enum.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#5)]
 [!code-vb[System.Enum.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#5)]  
  
 <span data-ttu-id="474b1-158">O <xref:System.Enum> classe também inclui um <xref:System.Enum.ToObject%2A> método que converte um valor de qualquer tipo integral para um valor de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-158">The <xref:System.Enum> class also includes a <xref:System.Enum.ToObject%2A> method that converts a value of any integral type to an enumeration value.</span></span> <span data-ttu-id="474b1-159">O exemplo a seguir usa o <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> método para converter um <xref:System.Int32> para um `ArrivalStatus` valor.</span><span class="sxs-lookup"><span data-stu-id="474b1-159">The following example uses the <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> method to convert an <xref:System.Int32> to an `ArrivalStatus` value.</span></span> <span data-ttu-id="474b1-160">Observe que, como o <xref:System.Enum.ToObject%2A> retorna um valor do tipo <xref:System.Object>, o uso de um operador de conversão ou ainda pode ser necessário converter o objeto para o tipo de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-160">Note that, because the <xref:System.Enum.ToObject%2A> returns a value of type <xref:System.Object>, the use of a casting or conversion operator may still be necessary to cast the object to the enumeration type.</span></span>  
  
 [!code-csharp[System.Enum.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#6)]
 [!code-vb[System.Enum.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#6)]  
  
 <span data-ttu-id="474b1-161">Ao converter um inteiro para um valor de enumeração, é possível atribuir um valor que não é realmente um membro da enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-161">When converting an integer to an enumeration value, it is possible to assign a value that is not actually a member of the enumeration.</span></span> <span data-ttu-id="474b1-162">Para evitar isso, você pode passar o inteiro para o <xref:System.Enum.IsDefined%2A> método antes de executar a conversão.</span><span class="sxs-lookup"><span data-stu-id="474b1-162">To prevent this, you can pass the integer to the <xref:System.Enum.IsDefined%2A> method before performing the conversion.</span></span> <span data-ttu-id="474b1-163">O exemplo a seguir usa esse método para determinar se os elementos em uma matriz de valores de inteiro podem ser convertidos em `ArrivalStatus` valores.</span><span class="sxs-lookup"><span data-stu-id="474b1-163">The following example uses this method to determine whether the elements in an array of integer values can be converted to `ArrivalStatus` values.</span></span>  
  
 [!code-csharp[System.Enum.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classconversion1.cs#7)]
 [!code-vb[System.Enum.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classconversion1.vb#7)]  
  
 <span data-ttu-id="474b1-164">Embora o <xref:System.Enum> classe fornece implementações de interface explícita do <xref:System.IConvertible> interface para a conversão de um valor de enumeração para um tipo integral, você deve usar os métodos do <xref:System.Convert> classe, como <xref:System.Convert.ToInt32%2A>, para executar essas conversões.</span><span class="sxs-lookup"><span data-stu-id="474b1-164">Although the <xref:System.Enum> class provides explicit interface implementations of the <xref:System.IConvertible> interface for converting from an enumeration value to an integral type, you should use the methods of the <xref:System.Convert> class, such as <xref:System.Convert.ToInt32%2A>, to perform these conversions.</span></span> <span data-ttu-id="474b1-165">O exemplo a seguir ilustra como você pode usar o <xref:System.Enum.GetUnderlyingType%2A> método junto com o <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> método para converter um valor de enumeração para seu tipo subjacente.</span><span class="sxs-lookup"><span data-stu-id="474b1-165">The following example illustrates how you can use the <xref:System.Enum.GetUnderlyingType%2A> method along with the <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> method to convert an enumeration value to its underlying type.</span></span> <span data-ttu-id="474b1-166">Observe que este exemplo não requer que o tipo subjacente da enumeração conhecido em tempo de compilação.</span><span class="sxs-lookup"><span data-stu-id="474b1-166">Note that this example does not require the underlying type of the enumeration to be known at compile time.</span></span>  
  
 [!code-csharp[System.Enum.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classconversion2.cs#8)]
 [!code-vb[System.Enum.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classconversion2.vb#8)]  
  
<a name="parsing"></a>   
### <a name="parsing-enumeration-values"></a><span data-ttu-id="474b1-167">Análise de valores de enumeração</span><span class="sxs-lookup"><span data-stu-id="474b1-167">Parsing enumeration values</span></span>  
 <span data-ttu-id="474b1-168">O <xref:System.Enum.Parse%2A> e <xref:System.Enum.TryParse%2A> métodos permitem que você converta a representação de cadeia de caracteres de um valor de enumeração para o valor.</span><span class="sxs-lookup"><span data-stu-id="474b1-168">The <xref:System.Enum.Parse%2A> and <xref:System.Enum.TryParse%2A> methods allow you to convert the string representation of an enumeration value to that value.</span></span> <span data-ttu-id="474b1-169">A representação de cadeia de caracteres pode ser o nome ou o valor subjacente de uma constante de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-169">The string representation can be either the name or the underlying value of an enumeration constant.</span></span> <span data-ttu-id="474b1-170">Observe que os métodos de análise com êxito converterá representações de cadeia de caracteres de números que não são membros de uma enumeração específico se as cadeias de caracteres podem ser convertidas em um valor de tipo subjacente da enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-170">Note that the parsing methods will successfully convert string representations of numbers that are not members of a particular enumeration if the strings can be converted to a value of the enumeration's underlying type.</span></span> <span data-ttu-id="474b1-171">Para evitar isso, o <xref:System.Enum.IsDefined%2A> método pode ser chamado para garantir que o resultado do método de análise é um valor de enumeração válidos.</span><span class="sxs-lookup"><span data-stu-id="474b1-171">To prevent this, the <xref:System.Enum.IsDefined%2A> method can be called to ensure that the result of the parsing method is a valid enumeration value.</span></span> <span data-ttu-id="474b1-172">O exemplo ilustra essa abordagem e demonstra chamadas para ambos os <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> e <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29?displayProperty=nameWithType> métodos.</span><span class="sxs-lookup"><span data-stu-id="474b1-172">The example illustrates this approach and demonstrates calls to both the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> and <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="474b1-173">Observe que o método de análise não genérico retorna um objeto que talvez você precise cast (em c#) ou converta (no Visual Basic) para o tipo de enumeração apropriado.</span><span class="sxs-lookup"><span data-stu-id="474b1-173">Note that the non-generic parsing method returns an object that you may have to cast (in C#) or convert (in Visual Basic) to the appropriate enumeration type.</span></span>  
  
 [!code-csharp[System.Enum.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classparse1.cs#9)]
 [!code-vb[System.Enum.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classparse1.vb#9)]  
  
<a name="formatting"></a>   
### <a name="formatting-enumeration-values"></a><span data-ttu-id="474b1-174">Formatação de valores de enumeração</span><span class="sxs-lookup"><span data-stu-id="474b1-174">Formatting enumeration values</span></span>  
 <span data-ttu-id="474b1-175">Você pode converter valores de enumeração em suas representações de cadeia de caracteres chamando estático <xref:System.Enum.Format%2A> método, bem como as sobrecargas da instância <xref:System.Enum.ToString%2A> método.</span><span class="sxs-lookup"><span data-stu-id="474b1-175">You can convert enumeration values to their string representations by calling the static <xref:System.Enum.Format%2A> method, as well as the overloads of the instance <xref:System.Enum.ToString%2A> method.</span></span> <span data-ttu-id="474b1-176">Você pode usar uma cadeia de caracteres de formato para controlar o modo exato em que um valor de enumeração é representado como uma cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="474b1-176">You can use a format string to control the precise way in which an enumeration value is represented as a string.</span></span> <span data-ttu-id="474b1-177">Para obter mais informações, consulte [cadeias de caracteres de formato de enumeração](~/docs/standard/base-types/enumeration-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="474b1-177">For more information, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="474b1-178">O exemplo a seguir usa a cada uma das cadeias de caracteres de formato de enumeração com suporte ("G" ou "g", "D" ou "d", "X" ou "x" e "F" ou "f") para converter um membro do `ArrivalStatus` enumeração para suas representações de cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="474b1-178">The following example uses each of the supported enumeration format strings ("G" or "g", "D" or "d", "X" or "x", and "F" or "f" ) to convert a member of the `ArrivalStatus` enumeration to its string representations.</span></span>  
  
 [!code-csharp[System.Enum.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classformat1.cs#10)]
 [!code-vb[System.Enum.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classformat1.vb#10)]  
  
<a name="iterating"></a>   
### <a name="iterating-enumeration-members"></a><span data-ttu-id="474b1-179">Membros de enumeração de iteração</span><span class="sxs-lookup"><span data-stu-id="474b1-179">Iterating enumeration members</span></span>  
 <span data-ttu-id="474b1-180">O <xref:System.Enum> tipo não implementa o <xref:System.Collections.IEnumerable> ou <xref:System.Collections.Generic.IEnumerable%601> interface, que permitem que você iterar membros de uma coleção usando um `foreach` (em c#) ou `For Each` (no Visual Basic) construir.</span><span class="sxs-lookup"><span data-stu-id="474b1-180">The <xref:System.Enum> type does not implement the <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601> interface, which would enable you to iterate members of a collection by using a `foreach` (in C#) or `For Each` (in Visual Basic) construct.</span></span> <span data-ttu-id="474b1-181">No entanto, você pode enumerar os membros de duas maneiras.</span><span class="sxs-lookup"><span data-stu-id="474b1-181">However, you can enumerate members in either of two ways.</span></span>  
  
-   <span data-ttu-id="474b1-182">Você pode chamar o <xref:System.Enum.GetNames%2A> método para recuperar uma matriz de cadeia de caracteres que contém os nomes dos membros de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-182">You can call the <xref:System.Enum.GetNames%2A> method to retrieve a string array containing the names of the enumeration members.</span></span> <span data-ttu-id="474b1-183">Em seguida, para cada elemento da matriz de cadeia de caracteres, você pode chamar o <xref:System.Enum.Parse%2A> método para converter a cadeia de caracteres para seu valor de enumeração equivalente.</span><span class="sxs-lookup"><span data-stu-id="474b1-183">Next, for each element of the string array, you can call the <xref:System.Enum.Parse%2A> method to convert the string to its equivalent enumeration value.</span></span> <span data-ttu-id="474b1-184">O exemplo a seguir ilustra esta abordagem.</span><span class="sxs-lookup"><span data-stu-id="474b1-184">The following example illustrates this approach.</span></span>  
  
     [!code-csharp[System.Enum.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classiterate.cs#11)]
     [!code-vb[System.Enum.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classiterate.vb#11)]  
  
-   <span data-ttu-id="474b1-185">Você pode chamar o <xref:System.Enum.GetValues%2A> método para recuperar uma matriz que contém subjacente valores na enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-185">You can call the <xref:System.Enum.GetValues%2A> method to retrieve an array that contains the underlying values in the enumeration.</span></span> <span data-ttu-id="474b1-186">Em seguida, para cada elemento da matriz, você pode chamar o <xref:System.Enum.ToObject%2A> método para converter o valor inteiro para o valor de enumeração equivalente.</span><span class="sxs-lookup"><span data-stu-id="474b1-186">Next, for each element of the array, you can call the <xref:System.Enum.ToObject%2A> method to convert the integer to its equivalent enumeration value.</span></span> <span data-ttu-id="474b1-187">O exemplo a seguir ilustra esta abordagem.</span><span class="sxs-lookup"><span data-stu-id="474b1-187">The following example illustrates this approach.</span></span>  
  
     [!code-csharp[System.Enum.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classiterate.cs#12)]
     [!code-vb[System.Enum.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classiterate.vb#12)]  
  
<a name="Flags"></a>   
## <a name="non-exclusive-members-and-the-flags-attribute"></a><span data-ttu-id="474b1-188">Membros não-exclusivo e o atributo Flags</span><span class="sxs-lookup"><span data-stu-id="474b1-188">Non-exclusive members and the Flags attribute</span></span>  
 <span data-ttu-id="474b1-189">É um uso comum de uma enumeração representar um conjunto de valores mutuamente exclusivos.</span><span class="sxs-lookup"><span data-stu-id="474b1-189">One common use of an enumeration is to represent a set of mutually exclusive values.</span></span> <span data-ttu-id="474b1-190">Por exemplo, um `ArrivalStatus` instância pode ter um valor de `Early`, `OnTime`, ou `Late`.</span><span class="sxs-lookup"><span data-stu-id="474b1-190">For example, an `ArrivalStatus` instance can have a value of `Early`, `OnTime`, or `Late`.</span></span> <span data-ttu-id="474b1-191">Não faz sentido para o valor de um `ArrivalStatus` instância para refletir a mais de uma constante de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-191">It makes no sense for the value of an `ArrivalStatus` instance to reflect more than one enumeration constant.</span></span>  
  
 <span data-ttu-id="474b1-192">Em outros casos, no entanto, o valor de um objeto de enumeração pode incluir vários membros de enumeração, e cada membro representa um campo de bit no valor de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-192">In other cases, however, the value of an enumeration object can include multiple enumeration members, and each member represents a bit field in the enumeration value.</span></span> <span data-ttu-id="474b1-193">O <xref:System.FlagsAttribute> atributo pode ser usado para indicar que a enumeração consiste em campos de bits.</span><span class="sxs-lookup"><span data-stu-id="474b1-193">The <xref:System.FlagsAttribute> attribute can be used to indicate that the enumeration consists of bit fields.</span></span> <span data-ttu-id="474b1-194">Por exemplo, uma enumeração denominada `Pets` pode ser usado para indicar os tipos de animais de estimação em uma casa.</span><span class="sxs-lookup"><span data-stu-id="474b1-194">For example, an enumeration named `Pets` might be used to indicate the kinds of pets in a household.</span></span> <span data-ttu-id="474b1-195">Ela pode ser definida da seguinte maneira.</span><span class="sxs-lookup"><span data-stu-id="474b1-195">It can be defined as follows.</span></span>  
  
 [!code-csharp[System.Enum.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#13)]
 [!code-vb[System.Enum.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#13)]  
  
 <span data-ttu-id="474b1-196">O `Pets` enumeração pode ser usada como mostrado no exemplo a seguir.</span><span class="sxs-lookup"><span data-stu-id="474b1-196">The `Pets` enumeration can then be used as shown in the following example.</span></span>  
  
 [!code-csharp[System.Enum.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#14)]
 [!code-vb[System.Enum.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#14)]  
  
 <span data-ttu-id="474b1-197">Práticas recomendadas a seguir devem ser usadas ao definir um bit a bit de enumeração e aplicar o <xref:System.FlagsAttribute> atributo.</span><span class="sxs-lookup"><span data-stu-id="474b1-197">The following best practices should be used when defining a bitwise enumeration and applying the <xref:System.FlagsAttribute> attribute.</span></span>  
  
-   <span data-ttu-id="474b1-198">Use o <xref:System.FlagsAttribute> atributo personalizado para uma enumeração somente se for uma operação bit a bit (AND, OR exclusivo ou) a ser executada em um valor numérico.</span><span class="sxs-lookup"><span data-stu-id="474b1-198">Use the <xref:System.FlagsAttribute> custom attribute for an enumeration only if a bitwise operation (AND, OR, EXCLUSIVE OR) is to be performed on a numeric value.</span></span>  
  
-   <span data-ttu-id="474b1-199">Defina constantes de enumeração em potências de dois, ou seja, 1, 2, 4, 8 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="474b1-199">Define enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on.</span></span> <span data-ttu-id="474b1-200">Isso significa que os sinalizadores individuais em constantes de enumeração combinado não se sobrepõem.</span><span class="sxs-lookup"><span data-stu-id="474b1-200">This means the individual flags in combined enumeration constants do not overlap.</span></span>  
  
-   <span data-ttu-id="474b1-201">Considere a criação de uma constante enumerada para combinações de sinalizador usadas com frequência.</span><span class="sxs-lookup"><span data-stu-id="474b1-201">Consider creating an enumerated constant for commonly used flag combinations.</span></span> <span data-ttu-id="474b1-202">Por exemplo, se você tiver uma enumeração usada para operações de e/s de arquivo que contém as constantes enumeradas `Read = 1` e `Write = 2`, considere a criação de constante enumerada `ReadWrite = Read OR Write`, que combina o `Read` e `Write` sinalizadores.</span><span class="sxs-lookup"><span data-stu-id="474b1-202">For example, if you have an enumeration used for file I/O operations that contains the enumerated constants `Read = 1` and `Write = 2`, consider creating the enumerated constant `ReadWrite = Read OR Write`, which combines the `Read` and `Write` flags.</span></span> <span data-ttu-id="474b1-203">Além disso, a operação OR bit a bit usada para combinar os sinalizadores pode ser considerada um conceito avançado em algumas circunstâncias que não devem ser necessários para tarefas simples.</span><span class="sxs-lookup"><span data-stu-id="474b1-203">In addition, the bitwise OR operation used to combine the flags might be considered an advanced concept in some circumstances that should not be required for simple tasks.</span></span>  
  
-   <span data-ttu-id="474b1-204">Tenha cuidado se você definir um número negativo como uma constante enumerada sinalizador porque várias posições de sinalizador podem ser definidas como 1, o que pode tornar o código confuso e incentivar erros de codificação.</span><span class="sxs-lookup"><span data-stu-id="474b1-204">Use caution if you define a negative number as a flag enumerated constant because many flag positions might be set to 1, which might make your code confusing and encourage coding errors.</span></span>  
  
-   <span data-ttu-id="474b1-205">Uma maneira conveniente para testar se um sinalizador é definido em um valor numérico é chamar a instância <xref:System.Enum.HasFlag%2A> método, conforme mostrado no exemplo a seguir.</span><span class="sxs-lookup"><span data-stu-id="474b1-205">A convenient way to test whether a flag is set in a numeric value is to call the instance <xref:System.Enum.HasFlag%2A> method, as shown in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#15)]
     [!code-vb[System.Enum.Class#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#15)]  
  
     <span data-ttu-id="474b1-206">É equivalente a executar uma operação AND de bit a bit entre o valor numérico e a constante enumerada sinalizador, que define todos os bits no valor numérico para zero não corresponde ao sinalizador, e, em seguida, teste se o resultado dessa operação é igual a constante enumerada de sinalizador.</span><span class="sxs-lookup"><span data-stu-id="474b1-206">It is equivalent to performing a bitwise AND operation between the numeric value and the flag enumerated constant, which sets all bits in the numeric value to zero that do not correspond to the flag, and then testing whether the result of that operation is equal to the flag enumerated constant.</span></span> <span data-ttu-id="474b1-207">Isso é ilustrado no exemplo a seguir.</span><span class="sxs-lookup"><span data-stu-id="474b1-207">This is illustrated in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#16)]
     [!code-vb[System.Enum.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#16)]  
  
-   <span data-ttu-id="474b1-208">Use `None` o nome do sinalizador enumerados constante cujo valor é zero.</span><span class="sxs-lookup"><span data-stu-id="474b1-208">Use `None` as the name of the flag enumerated constant whose value is zero.</span></span> <span data-ttu-id="474b1-209">Não é possível usar o `None` constante enumerada em uma operação AND bit a bit para testar um sinalizador porque o resultado sempre será zero.</span><span class="sxs-lookup"><span data-stu-id="474b1-209">You cannot use the `None` enumerated constant in a bitwise AND operation to test for a flag because the result is always zero.</span></span> <span data-ttu-id="474b1-210">No entanto, você pode executar uma operação lógica, não uma comparação bit a bit entre o valor numérico e `None` constante enumerado para determinar se qualquer bit no valor numérico está definida.</span><span class="sxs-lookup"><span data-stu-id="474b1-210">However, you can perform a logical, not a bitwise, comparison between the numeric value and the `None` enumerated constant to determine whether any bits in the numeric value are set.</span></span> <span data-ttu-id="474b1-211">Isso é ilustrado no exemplo a seguir.</span><span class="sxs-lookup"><span data-stu-id="474b1-211">This is illustrated in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#17)]
     [!code-vb[System.Enum.Class#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#17)]  
  
-   <span data-ttu-id="474b1-212">Não defina um valor de enumeração exclusivamente para espelhar o estado de enumeração em si.</span><span class="sxs-lookup"><span data-stu-id="474b1-212">Do not define an enumeration value solely to mirror the state of the enumeration itself.</span></span> <span data-ttu-id="474b1-213">Por exemplo, não definem uma constante enumerada que simplesmente marca o fim da enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-213">For example, do not define an enumerated constant that merely marks the end of the enumeration.</span></span> <span data-ttu-id="474b1-214">Se você precisar determinar o último valor da enumeração, verificar esse valor explicitamente.</span><span class="sxs-lookup"><span data-stu-id="474b1-214">If you need to determine the last value of the enumeration, check for that value explicitly.</span></span> <span data-ttu-id="474b1-215">Além disso, você pode executar uma verificação de intervalo para a constante enumerada primeira e o última se todos os valores dentro do intervalo válidos.</span><span class="sxs-lookup"><span data-stu-id="474b1-215">In addition, you can perform a range check for the first and last enumerated constant if all values within the range are valid.</span></span>  
  
<a name="methods"></a>   
## <a name="adding-enumeration-methods"></a><span data-ttu-id="474b1-216">Adicionar métodos de enumeração</span><span class="sxs-lookup"><span data-stu-id="474b1-216">Adding enumeration methods</span></span>  
 <span data-ttu-id="474b1-217">Como tipos de enumeração são definidos pelas estruturas de idioma, como `enum` (c#) e `Enum` (Visual Basic), você não pode definir métodos personalizados para um tipo de enumeração que não sejam os métodos herdados do <xref:System.Enum> classe.</span><span class="sxs-lookup"><span data-stu-id="474b1-217">Because enumeration types are defined by language structures, such as `enum` (C#) and `Enum` (Visual Basic), you cannot define custom methods for an enumeration type other than those methods inherited from the <xref:System.Enum> class.</span></span>  <span data-ttu-id="474b1-218">No entanto, você pode usar métodos de extensão para adicionar funcionalidade a um tipo de enumeração específico.</span><span class="sxs-lookup"><span data-stu-id="474b1-218">However, you can use extension methods to add functionality to a particular enumeration type.</span></span>  
  
 <span data-ttu-id="474b1-219">No exemplo a seguir, a enumeração `Grades` representa as letras possíveis que um aluno pode receber em uma classe.</span><span class="sxs-lookup"><span data-stu-id="474b1-219">In the following example, the `Grades` enumeration represents the possible letter grades that a student may receive in a class.</span></span> <span data-ttu-id="474b1-220">Um método de extensão chamado `Passing` é adicionado ao tipo `Grades` de forma que cada instância desse tipo agora "sabe" se ele representa uma nota de aprovação ou não.</span><span class="sxs-lookup"><span data-stu-id="474b1-220">An extension method named `Passing` is added to the `Grades` type so that each instance of that type now "knows" whether it represents a passing grade or not.</span></span>       <span data-ttu-id="474b1-221">O `Extensions` classe também contém uma variável estática de leitura / gravação que define o nível mínimo de passagem.</span><span class="sxs-lookup"><span data-stu-id="474b1-221">The `Extensions` class also contains a static read-write variable that defines the minimum passing grade.</span></span> <span data-ttu-id="474b1-222">O valor de retorno de `Passing` método de extensão reflete o valor atual da variável.</span><span class="sxs-lookup"><span data-stu-id="474b1-222">The return value of the `Passing` extension method reflects the current value of that variable.</span></span>  
  
 [!code-csharp[System.Enum.Class#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/Extensions.cs#18)]
 [!code-vb[System.Enum.Class#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/Extensions.vb#18)]  
  
   
  
## Examples  
 <span data-ttu-id="474b1-223">O exemplo a seguir demonstra como usar uma enumeração para representar valores nomeados e outra enumeração para representar os campos de bits nomeado.</span><span class="sxs-lookup"><span data-stu-id="474b1-223">The following example demonstrates using an enumeration to represent named values and another enumeration to represent named bit fields.</span></span>  
  
 [!code-cpp[enummain#1](~/samples/snippets/cpp/VS_Snippets_CLR/enummain/CPP/EnumMain.cpp#1)]
 [!code-csharp[enummain#1](~/samples/snippets/csharp/VS_Snippets_CLR/enummain/CS/EnumMain.cs#1)]
 [!code-vb[enummain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enummain/VB/EnumMain.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="474b1-224">Este tipo é thread-safe.</span><span class="sxs-lookup"><span data-stu-id="474b1-224">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.ValueType" />
    <altmember cref="T:System.FlagsAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Enum ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Enum();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="474b1-225">Inicializa uma nova instância da classe <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-225">Initializes a new instance of the <see cref="T:System.Enum" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (target As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ target);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="474b1-226">Um objeto a ser comparado ou <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-226">An object to compare, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="474b1-227">Compara essa instância com um objeto especificado e retorna uma indicação dos valores relativos.</span><span class="sxs-lookup"><span data-stu-id="474b1-227">Compares this instance to a specified object and returns an indication of their relative values.</span></span></summary>
        <returns><span data-ttu-id="474b1-228">Um número com sinal que indica os valores relativos dessa instância e <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-228">A signed number that indicates the relative values of this instance and <paramref name="target" />.</span></span>  
  
 <span data-ttu-id="474b1-229"><list type="table"><listheader><term> Valor</span><span class="sxs-lookup"><span data-stu-id="474b1-229"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="474b1-230"></term><description> Significado</span><span class="sxs-lookup"><span data-stu-id="474b1-230"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="474b1-231"></description></listheader><item><term> Menor que zero</span><span class="sxs-lookup"><span data-stu-id="474b1-231"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="474b1-232"></term><description> O valor desta instância é menor que o valor de <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-232"></term><description> The value of this instance is less than the value of <paramref name="target" />.</span></span>  
  
 <span data-ttu-id="474b1-233"></description></item><item><term> Zero</span><span class="sxs-lookup"><span data-stu-id="474b1-233"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="474b1-234"></term><description> O valor desta instância é igual ao valor de <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-234"></term><description> The value of this instance is equal to the value of <paramref name="target" />.</span></span>  
  
 <span data-ttu-id="474b1-235"></description></item><item><term> Maior que zero</span><span class="sxs-lookup"><span data-stu-id="474b1-235"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="474b1-236"></term><description> O valor desta instância é maior que o valor de <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-236"></term><description> The value of this instance is greater than the value of <paramref name="target" />.</span></span>  
  
 <span data-ttu-id="474b1-237">- ou -</span><span class="sxs-lookup"><span data-stu-id="474b1-237">-or-</span></span>  
  
 <span data-ttu-id="474b1-238"><paramref name="target" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-238"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="474b1-239">O exemplo a seguir ilustra o uso de `CompareTo` no contexto de `Enum`.</span><span class="sxs-lookup"><span data-stu-id="474b1-239">The following example illustrates the use of `CompareTo` in the context of `Enum`.</span></span>  
  
 [!code-cpp[enumcompareto#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumcompareto/CPP/EnumCompareTo.cpp#1)]
 [!code-csharp[enumcompareto#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumcompareto/CS/EnumCompareTo.cs#1)]
 [!code-vb[enumcompareto#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumcompareto/VB/EnumCompareTo.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474b1-240"><paramref name="target" /> e esta instância não são do mesmo tipo.</span><span class="sxs-lookup"><span data-stu-id="474b1-240"><paramref name="target" /> and this instance are not the same type.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="474b1-241">Esta instância não é do tipo <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" /> ou <see cref="T:System.UInt64" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-241">This instance is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />.</span></span></exception>
        <altmember cref="M:System.Enum.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="474b1-242">Um objeto a ser comparado com essa instância ou <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-242">An object to compare with this instance, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="474b1-243">Retorna um valor que indica se essa instância é igual a um objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="474b1-243">Returns a value indicating whether this instance is equal to a specified object.</span></span></summary>
        <returns>
          <span data-ttu-id="474b1-244"><see langword="true" /> se <paramref name="obj" /> for um valor de enumeração do mesmo tipo e com o mesmo valor subjacente que essa instância; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-244"><see langword="true" /> if <paramref name="obj" /> is an enumeration value of the same type and with the same underlying value as this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-245">O <xref:System.Enum.Equals%28System.Object%29?displayProperty=nameWithType> substituições de método <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> para definir como os membros de enumeração são avaliados quanto à igualdade.</span><span class="sxs-lookup"><span data-stu-id="474b1-245">The <xref:System.Enum.Equals%28System.Object%29?displayProperty=nameWithType> method overrides <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> to define how enumeration members are evaluated for equality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474b1-246">O exemplo a seguir ilustra o uso do método <xref:System.Enum.Equals%2A>.</span><span class="sxs-lookup"><span data-stu-id="474b1-246">The following example illustrates the use of the <xref:System.Enum.Equals%2A> method.</span></span>  
  
 [!code-cpp[enumequals#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumequals/CPP/EnumEquals.cpp#1)]
 [!code-csharp[enumequals#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumequals/CS/EnumEquals.cs#1)]
 [!code-vb[enumequals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumequals/VB/EnumEquals.vb#1)]  
  
 <span data-ttu-id="474b1-247">O exemplo a seguir define dois tipos de enumeração, `SledDog` e `WorkDog`.</span><span class="sxs-lookup"><span data-stu-id="474b1-247">The following example defines two enumeration types, `SledDog` and `WorkDog`.</span></span> <span data-ttu-id="474b1-248">O `SledDog` enumeração tem dois membros, `SledDog.AlaskanMalamute` e `SledDog.Malamute`, que têm o mesmo valor subjacente.</span><span class="sxs-lookup"><span data-stu-id="474b1-248">The `SledDog` enumeration has two members, `SledDog.AlaskanMalamute` and `SledDog.Malamute`, that have the same underlying value.</span></span> <span data-ttu-id="474b1-249">A chamada para o <xref:System.Enum.Equals%2A> método indica que esses valores são iguais porque seus valores subjacentes são os mesmos.</span><span class="sxs-lookup"><span data-stu-id="474b1-249">The call to the <xref:System.Enum.Equals%2A> method indicates that these values are equal because their underlying values are the same.</span></span> <span data-ttu-id="474b1-250">O `SledDog.Malamute` e `WorkDog.Newfoundland` os membros têm o mesmo valor subjacente, embora eles representam tipos diferentes de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-250">The `SledDog.Malamute` and `WorkDog.Newfoundland` members have the same underlying value, although they represent different enumeration types.</span></span> <span data-ttu-id="474b1-251">Uma chamada para o <xref:System.Enum.Equals%2A> método indica que esses valores não são iguais.</span><span class="sxs-lookup"><span data-stu-id="474b1-251">A call to the <xref:System.Enum.Equals%2A> method indicates that these values are not equal.</span></span>  
  
 [!code-csharp[System.Enum.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.equals/cs/enumequals.cs#1)]
 [!code-vb[System.Enum.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.equals/vb/enumequals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Enum.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (Type enumType, object value, string format);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.Type enumType, object value, string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Format(System.Type,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (enumType As Type, value As Object, format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(Type ^ enumType, System::Object ^ value, System::String ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="474b1-252">O tipo de enumeração do valor a ser convertido.</span><span class="sxs-lookup"><span data-stu-id="474b1-252">The enumeration type of the value to convert.</span></span></param>
        <param name="value"><span data-ttu-id="474b1-253">O valor a ser convertido.</span><span class="sxs-lookup"><span data-stu-id="474b1-253">The value to convert.</span></span></param>
        <param name="format"><span data-ttu-id="474b1-254">O formato de saída a ser usado.</span><span class="sxs-lookup"><span data-stu-id="474b1-254">The output format to use.</span></span></param>
        <summary><span data-ttu-id="474b1-255">Converte o valor especificado de um tipo enumerado especificado em sua representação de cadeia de caracteres equivalente de acordo com o formato especificado.</span><span class="sxs-lookup"><span data-stu-id="474b1-255">Converts the specified value of a specified enumerated type to its equivalent string representation according to the specified format.</span></span></summary>
        <returns><span data-ttu-id="474b1-256">Uma representação da cadeia de caracteres de <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-256">A string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-257">A tabela a seguir mostra os valores válidos para o `format` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="474b1-257">The following table shows the valid values for the `format` parameter.</span></span>  
  
|<span data-ttu-id="474b1-258">Formatar</span><span class="sxs-lookup"><span data-stu-id="474b1-258">Format</span></span>|<span data-ttu-id="474b1-259">Descrição</span><span class="sxs-lookup"><span data-stu-id="474b1-259">Description</span></span>|  
|------------|-----------------|  
|<span data-ttu-id="474b1-260">"G" ou "g"</span><span class="sxs-lookup"><span data-stu-id="474b1-260">"G" or "g"</span></span>|<span data-ttu-id="474b1-261">Se `value` é igual a uma constante enumerada nomeada, o nome do que a constante é retornado; caso contrário, o decimal equivalente de `value` é retornado.</span><span class="sxs-lookup"><span data-stu-id="474b1-261">If `value` is equal to a named enumerated constant, the name of that constant is returned; otherwise, the decimal equivalent of `value` is returned.</span></span><br /><br /> <span data-ttu-id="474b1-262">Por exemplo, suponha que a constante enumerada apenas chama vermelho e seu valor é 1.</span><span class="sxs-lookup"><span data-stu-id="474b1-262">For example, suppose the only enumerated constant is named Red, and its value is 1.</span></span> <span data-ttu-id="474b1-263">Se `value` é especificada como 1, esse formato retorna "Vermelho".</span><span class="sxs-lookup"><span data-stu-id="474b1-263">If `value` is specified as 1, this format returns "Red".</span></span> <span data-ttu-id="474b1-264">No entanto, se `value` é especificado como 2, esse formato retorna "2".</span><span class="sxs-lookup"><span data-stu-id="474b1-264">However, if `value` is specified as 2, this format returns "2".</span></span><br /><br /> <span data-ttu-id="474b1-265">- ou -</span><span class="sxs-lookup"><span data-stu-id="474b1-265">-or-</span></span><br /><br /> <span data-ttu-id="474b1-266">Se o <xref:System.FlagsAttribute> atributo personalizado é aplicado para a enumeração `value` é tratado como um campo de bits que contém um ou mais sinalizadores que consistem em um ou mais bits.</span><span class="sxs-lookup"><span data-stu-id="474b1-266">If the <xref:System.FlagsAttribute> custom attribute is applied to the enumeration, `value` is treated as a bit field that contains one or more flags that consist of one or more bits.</span></span><br /><br /> <span data-ttu-id="474b1-267">Se `value` é igual a uma combinação de chamada constantes enumeradas, uma lista separada por delimitador dos nomes dessas constantes é retornada.</span><span class="sxs-lookup"><span data-stu-id="474b1-267">If `value` is equal to a combination of named enumerated constants, a delimiter-separated list of the names of those constants is returned.</span></span> <span data-ttu-id="474b1-268">`value` é procurado sinalizadores, indo de sinalizador com o maior valor para o menor valor.</span><span class="sxs-lookup"><span data-stu-id="474b1-268">`value` is searched for flags, going from the flag with the largest value to the smallest value.</span></span> <span data-ttu-id="474b1-269">Para cada sinalizador que corresponde a um campo de bits em `value`, o nome da constante é concatenado a lista separada por delimitador.</span><span class="sxs-lookup"><span data-stu-id="474b1-269">For each flag that corresponds to a bit field in `value`, the name of the constant is concatenated to the delimiter-separated list.</span></span> <span data-ttu-id="474b1-270">O valor do sinalizador é excluído da consideração adicional e continua a pesquisa para o sinalizador Avançar.</span><span class="sxs-lookup"><span data-stu-id="474b1-270">The value of that flag is then excluded from further consideration, and the search continues for the next flag.</span></span><br /><br /> <span data-ttu-id="474b1-271">Se `value` não é igual a uma combinação de chamada constantes enumeradas, o decimal equivalente de `value` é retornado.</span><span class="sxs-lookup"><span data-stu-id="474b1-271">If `value` is not equal to a combination of named enumerated constants, the decimal equivalent of `value` is returned.</span></span>|  
|<span data-ttu-id="474b1-272">"X" ou "x"</span><span class="sxs-lookup"><span data-stu-id="474b1-272">"X" or "x"</span></span>|<span data-ttu-id="474b1-273">Representa `value` em formato hexadecimal sem um principal "0x".</span><span class="sxs-lookup"><span data-stu-id="474b1-273">Represents `value` in hexadecimal format without a leading "0x".</span></span>|  
|<span data-ttu-id="474b1-274">"D" ou "d"</span><span class="sxs-lookup"><span data-stu-id="474b1-274">"D" or "d"</span></span>|<span data-ttu-id="474b1-275">Representa `value` em formato decimal.</span><span class="sxs-lookup"><span data-stu-id="474b1-275">Represents `value` in decimal form.</span></span>|  
|<span data-ttu-id="474b1-276">"F" ou "f"</span><span class="sxs-lookup"><span data-stu-id="474b1-276">"F" or "f"</span></span>|<span data-ttu-id="474b1-277">Se comporta de forma idêntica a "G" ou "g", exceto pelo fato do <xref:System.FlagsAttribute> não precisa estar presente no <xref:System.Enum> declaração.</span><span class="sxs-lookup"><span data-stu-id="474b1-277">Behaves identically to "G" or "g", except that the <xref:System.FlagsAttribute> is not required to be present on the <xref:System.Enum> declaration.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="474b1-278">O exemplo a seguir ilustra o uso de `Format` no contexto de `Enum`.</span><span class="sxs-lookup"><span data-stu-id="474b1-278">The following example illustrates the use of `Format` in the context of `Enum`.</span></span>  
  
 [!code-cpp[enumformat#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumformat/CPP/EnumFormat.cpp#1)]
 [!code-csharp[enumformat#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumformat/CS/EnumFormat.cs#1)]
 [!code-vb[enumformat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumformat/VB/EnumFormat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="474b1-279">O parâmetro <paramref name="enumType" />, <paramref name="value" /> ou <paramref name="format" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-279">The <paramref name="enumType" />, <paramref name="value" />, or <paramref name="format" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="474b1-280">O parâmetro <paramref name="enumType" /> não é um tipo <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-280">The <paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" /> type.</span></span>  
  
 <span data-ttu-id="474b1-281">- ou -</span><span class="sxs-lookup"><span data-stu-id="474b1-281">-or-</span></span>  
  
 <span data-ttu-id="474b1-282">O <paramref name="value" /> é de uma enumeração que difere no tipo de <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-282">The <paramref name="value" /> is from an enumeration that differs in type from <paramref name="enumType" />.</span></span>  
  
 <span data-ttu-id="474b1-283">- ou -</span><span class="sxs-lookup"><span data-stu-id="474b1-283">-or-</span></span>  
  
 <span data-ttu-id="474b1-284">O tipo de <paramref name="value" /> não é um tipo subjacente de <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-284">The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="474b1-285">O parâmetro <paramref name="format" /> contém um valor inválido.</span><span class="sxs-lookup"><span data-stu-id="474b1-285">The <paramref name="format" /> parameter contains an invalid value.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="474b1-286"><paramref name="format" /> igual a "X", mas o tipo de enumeração é desconhecido.</span><span class="sxs-lookup"><span data-stu-id="474b1-286"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span></span></exception>
        <altmember cref="M:System.Enum.ToString(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="474b1-287">Retorna o código hash para o valor dessa instância.</span><span class="sxs-lookup"><span data-stu-id="474b1-287">Returns the hash code for the value of this instance.</span></span></summary>
        <returns><span data-ttu-id="474b1-288">Um código de hash do inteiro assinado de 32 bits.</span><span class="sxs-lookup"><span data-stu-id="474b1-288">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public static string GetName (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetName(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetName(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetName (enumType As Type, value As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetName(Type ^ enumType, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="474b1-289">Um tipo de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-289">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="474b1-290">O valor de uma constante enumerada específica em termos de seu tipo subjacente.</span><span class="sxs-lookup"><span data-stu-id="474b1-290">The value of a particular enumerated constant in terms of its underlying type.</span></span></param>
        <summary><span data-ttu-id="474b1-291">Recupera o nome da constante na enumeração especificada que tem o valor especificado.</span><span class="sxs-lookup"><span data-stu-id="474b1-291">Retrieves the name of the constant in the specified enumeration that has the specified value.</span></span></summary>
        <returns><span data-ttu-id="474b1-292">Uma cadeia de caracteres que contém o nome da constante enumerada no <paramref name="enumType" /> cujo valor é <paramref name="value" />, ou <see langword="null" />, se tal constante não for encontrada.</span><span class="sxs-lookup"><span data-stu-id="474b1-292">A string containing the name of the enumerated constant in <paramref name="enumType" /> whose value is <paramref name="value" />; or <see langword="null" /> if no such constant is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-293">Se vários membros de enumeração têm o mesmo valor subjacente, o <xref:System.Enum.GetName%2A> método garante que ele retornará o nome de um dos membros de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-293">If multiple enumeration members have the same underlying value, the <xref:System.Enum.GetName%2A> method guarantees that it will return the name of one of those enumeration members.</span></span> <span data-ttu-id="474b1-294">No entanto, ele não garante que ele sempre retornará o nome do membro de enumeração mesmo.</span><span class="sxs-lookup"><span data-stu-id="474b1-294">However, it does not guarantee that it will always return the name of the same enumeration member.</span></span> <span data-ttu-id="474b1-295">Como resultado, quando vários membros de enumeração têm o mesmo valor, o código do aplicativo deve nunca dependem do método retornando o nome do membro específico.</span><span class="sxs-lookup"><span data-stu-id="474b1-295">As a result, when multiple enumeration members have the same value, your application code should never depend on the method returning a particular member's name.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474b1-296">O exemplo a seguir ilustra o uso de `GetName`.</span><span class="sxs-lookup"><span data-stu-id="474b1-296">The following example illustrates the use of `GetName`.</span></span>  
  
 [!code-cpp[enumgetname#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetname/CPP/EnumGetName.cpp#1)]
 [!code-csharp[enumgetname#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetname/CS/EnumGetName.cs#1)]
 [!code-vb[enumgetname#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetname/VB/EnumGetName.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="474b1-297"><paramref name="enumType" /> ou <paramref name="value" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-297"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474b1-298"><paramref name="enumType" /> não é um <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-298"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
 <span data-ttu-id="474b1-299">- ou -</span><span class="sxs-lookup"><span data-stu-id="474b1-299">-or-</span></span>  
  
 <span data-ttu-id="474b1-300"><paramref name="value" /> não é do tipo <paramref name="enumType" /> e não tem o mesmo tipo subjacente que <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-300"><paramref name="value" /> is neither of type <paramref name="enumType" /> nor does it have the same underlying type as <paramref name="enumType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetNames">
      <MemberSignature Language="C#" Value="public static string[] GetNames (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetNames(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetNames(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNames (enumType As Type) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetNames(Type ^ enumType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="474b1-301">Um tipo de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-301">An enumeration type.</span></span></param>
        <summary><span data-ttu-id="474b1-302">Recupera uma matriz de nomes de constantes em uma enumeração especificada.</span><span class="sxs-lookup"><span data-stu-id="474b1-302">Retrieves an array of the names of the constants in a specified enumeration.</span></span></summary>
        <returns><span data-ttu-id="474b1-303">Uma matriz de cadeia de caracteres dos nomes das constantes em <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-303">A string array of the names of the constants in <paramref name="enumType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-304">Os elementos da matriz de valores de retorno são classificados pelos valores binários das constantes enumeradas (isto é, por sua magnitude sem sinal).</span><span class="sxs-lookup"><span data-stu-id="474b1-304">The elements of the return value array are sorted by the binary values of the enumerated constants (that is, by their unsigned magnitude).</span></span> <span data-ttu-id="474b1-305">O exemplo a seguir fornece exibe informações sobre a matriz retornada pelo <xref:System.Enum.GetNames%2A> método para uma enumeração que inclui um valor positivo, negativo e zero.</span><span class="sxs-lookup"><span data-stu-id="474b1-305">The following example provides displays information about the array returned by the <xref:System.Enum.GetNames%2A> method for an enumeration that includes a negative, zero, and a positive value.</span></span>  
  
 [!code-csharp[System.Enum.GetNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getnames/cs/getnames1.cs#1)]
 [!code-vb[System.Enum.GetNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getnames/vb/getnames1.vb#1)]  
  
 <span data-ttu-id="474b1-306">Se houver constantes enumeradas com o mesmo valor, a ordem de seus nomes correspondentes é especificada.</span><span class="sxs-lookup"><span data-stu-id="474b1-306">If there are enumerated constants with same value, the order of their corresponding names is unspecified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474b1-307">O exemplo a seguir ilustra o uso do método <xref:System.Enum.GetNames%2A>.</span><span class="sxs-lookup"><span data-stu-id="474b1-307">The following example illustrates the use of the <xref:System.Enum.GetNames%2A> method.</span></span>  
  
 [!code-cpp[enumgetnames#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetnames/CPP/EnumGetNames.cpp#1)]
 [!code-csharp[enumgetnames#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetnames/CS/EnumGetNames.cs#1)]
 [!code-vb[enumgetnames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetnames/VB/EnumGetNames.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="474b1-308"><paramref name="enumType" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-308"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474b1-309">O parâmetro <paramref name="enumType" /> não é um <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-309"><paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="474b1-310">Retorna o código de tipo do tipo subjacente desse membro de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-310">Returns the type code of the underlying type of this enumeration member.</span></span></summary>
        <returns><span data-ttu-id="474b1-311">O código de tipo do tipo subjacente desta instância.</span><span class="sxs-lookup"><span data-stu-id="474b1-311">The type code of the underlying type of this instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="474b1-312">O tipo de enumeração é desconhecido.</span><span class="sxs-lookup"><span data-stu-id="474b1-312">The enumeration type is unknown.</span></span></exception>
        <altmember cref="M:System.Enum.GetUnderlyingType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetUnderlyingType">
      <MemberSignature Language="C#" Value="public static Type GetUnderlyingType (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetUnderlyingType(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetUnderlyingType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnderlyingType (enumType As Type) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetUnderlyingType(Type ^ enumType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="474b1-313">A enumeração cujo tipo subjacente será recuperada.</span><span class="sxs-lookup"><span data-stu-id="474b1-313">The enumeration whose underlying type will be retrieved.</span></span></param>
        <summary><span data-ttu-id="474b1-314">Retorna o tipo subjacente da enumeração especificada.</span><span class="sxs-lookup"><span data-stu-id="474b1-314">Returns the underlying type of the specified enumeration.</span></span></summary>
        <returns><span data-ttu-id="474b1-315">O tipo subjacente de <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-315">The underlying type of <paramref name="enumType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-316">O <xref:System.Enum> estrutura permite que os valores sejam representadas como constantes nomeadas.</span><span class="sxs-lookup"><span data-stu-id="474b1-316">The <xref:System.Enum> structure enables values to be represented as named constants.</span></span> <span data-ttu-id="474b1-317">O tipo de dados dos valores da enumeração é conhecido como seu tipo subjacente.</span><span class="sxs-lookup"><span data-stu-id="474b1-317">The data type of the enumeration's values is known as its underlying type.</span></span> <span data-ttu-id="474b1-318">Por exemplo, o tipo subjacente do <xref:System.DayOfWeek> enumeração, que consiste em constantes que representam cada dia da semana (<xref:System.DayOfWeek.Monday?displayProperty=nameWithType>, <xref:System.DayOfWeek.Tuesday?displayProperty=nameWithType>, e assim por diante), é <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="474b1-318">For example, the underlying type of the <xref:System.DayOfWeek> enumeration, which consists of constants that represent each day of the week (<xref:System.DayOfWeek.Monday?displayProperty=nameWithType>, <xref:System.DayOfWeek.Tuesday?displayProperty=nameWithType>, and so on), is <xref:System.Int32>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474b1-319">A exemplo a seguir chama o <xref:System.Enum.GetUnderlyingType%2A> método para exibir o tipo subjacente de alguns membros de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-319">The following example calls the <xref:System.Enum.GetUnderlyingType%2A> method to display the underlying type of some enumeration members.</span></span>  
  
 [!code-csharp[System.Enum.GetUnderlyingType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getunderlyingtype/cs/getunderlyingtype1.cs#1)]
 [!code-vb[System.Enum.GetUnderlyingType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getunderlyingtype/vb/getunderlyingtype1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="474b1-320"><paramref name="enumType" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-320"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474b1-321"><paramref name="enumType" /> não é um <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-321"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.GetTypeCode" />
      </Docs>
    </Member>
    <Member MemberName="GetValues">
      <MemberSignature Language="C#" Value="public static Array GetValues (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Array GetValues(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetValues(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetValues (enumType As Type) As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Array ^ GetValues(Type ^ enumType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="474b1-322">Um tipo de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-322">An enumeration type.</span></span></param>
        <summary><span data-ttu-id="474b1-323">Recupera uma matriz de valores de constantes em uma enumeração especificada.</span><span class="sxs-lookup"><span data-stu-id="474b1-323">Retrieves an array of the values of the constants in a specified enumeration.</span></span></summary>
        <returns><span data-ttu-id="474b1-324">Uma matriz que contém os valores das constantes em <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-324">An array that contains the values of the constants in <paramref name="enumType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-325">Os elementos da matriz são classificados pelos valores binários das constantes de enumeração (isto é, por sua magnitude sem sinal).</span><span class="sxs-lookup"><span data-stu-id="474b1-325">The elements of the array are sorted by the binary values of the enumeration constants (that is, by their unsigned magnitude).</span></span> <span data-ttu-id="474b1-326">O exemplo a seguir exibe informações sobre a matriz retornada pelo <xref:System.Enum.GetValues%2A> método para uma enumeração que inclui um valor negativo, zero e um valor positivo.</span><span class="sxs-lookup"><span data-stu-id="474b1-326">The following example displays information about the array returned by the <xref:System.Enum.GetValues%2A> method for an enumeration that includes a negative value, zero, and a positive value.</span></span>  
  
 [!code-csharp[System.Enum.GetValues#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues1.cs#1)]
 [!code-vb[System.Enum.GetValues#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues1.vb#1)]  
  
 <span data-ttu-id="474b1-327">O <xref:System.Enum.GetValues%2A> método retorna uma matriz que contém um valor para cada membro de `enumType` enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-327">The <xref:System.Enum.GetValues%2A> method returns an array that contains a value for each member of the `enumType` enumeration.</span></span> <span data-ttu-id="474b1-328">Se vários membros têm o mesmo valor, a matriz retornada inclui valores duplicados.</span><span class="sxs-lookup"><span data-stu-id="474b1-328">If multiple members have the same value, the returned array includes duplicate values.</span></span> <span data-ttu-id="474b1-329">Nesse caso, chamando o <xref:System.Enum.GetName%2A> método com cada valor na matriz retornada não restaura os nomes exclusivos atribuídos aos membros que têm valores duplicados.</span><span class="sxs-lookup"><span data-stu-id="474b1-329">In this case, calling the <xref:System.Enum.GetName%2A> method with each value in the returned array does not restore the unique names assigned to members that have duplicate values.</span></span> <span data-ttu-id="474b1-330">Para recuperar todos os nomes de membros de enumeração com êxito, chame o <xref:System.Enum.GetNames%2A> método.</span><span class="sxs-lookup"><span data-stu-id="474b1-330">To retrieve all the names of enumeration members successfully, call the <xref:System.Enum.GetNames%2A> method.</span></span>  
  
 <span data-ttu-id="474b1-331">O <xref:System.Enum.GetValues%2A> método não pode ser chamado por meio de reflexão em um contexto exclusivo de reflexão.</span><span class="sxs-lookup"><span data-stu-id="474b1-331">The <xref:System.Enum.GetValues%2A> method cannot be invoked by using reflection in a reflection-only context.</span></span> <span data-ttu-id="474b1-332">Em vez disso, você pode recuperar o valor de todos os membros de enumeração usando o <xref:System.Type.GetFields%2A?displayProperty=nameWithType> método para obter uma matriz de <xref:System.Reflection.FieldInfo> objetos que representam os membros de enumeração e, em seguida, chamar o <xref:System.Reflection.FieldInfo.GetRawConstantValue%2A?displayProperty=nameWithType> método em cada elemento da matriz.</span><span class="sxs-lookup"><span data-stu-id="474b1-332">Instead, you can retrieve the value of all enumeration members by using the <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method to get an array of <xref:System.Reflection.FieldInfo> objects that represent enumeration members and then call the <xref:System.Reflection.FieldInfo.GetRawConstantValue%2A?displayProperty=nameWithType> method on each element of the array.</span></span> <span data-ttu-id="474b1-333">O exemplo a seguir ilustra essa técnica.</span><span class="sxs-lookup"><span data-stu-id="474b1-333">The following example illustrates this technique.</span></span> <span data-ttu-id="474b1-334">Ele requer que você defina a enumeração a seguir em um assembly chamado Enumerations.dll:</span><span class="sxs-lookup"><span data-stu-id="474b1-334">It requires that you define the following enumeration in an assembly named Enumerations.dll:</span></span>  
  
 [!code-csharp[System.Enum.GetValues#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues_reflectiononly.cs#2)]
 [!code-vb[System.Enum.GetValues#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues_reflectiononly.vb#2)]  
  
 <span data-ttu-id="474b1-335">O assembly é carregado em um contexto exclusivo de reflexão, um <xref:System.Type> objeto que representa o `Pets` enumeração é instanciada, uma matriz de <xref:System.Reflection.FieldInfo> objetos são recuperados e os valores de campo são exibidos no console.</span><span class="sxs-lookup"><span data-stu-id="474b1-335">The assembly is loaded in a reflection-only context, a <xref:System.Type> object that represents the `Pets` enumeration is instantiated, an array of <xref:System.Reflection.FieldInfo> objects is retrieved, and the field values are displayed to the console.</span></span>  
  
 [!code-csharp[System.Enum.GetValues#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues_reflectiononly.cs#3)]
 [!code-vb[System.Enum.GetValues#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues_reflectiononly.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="474b1-336">O exemplo a seguir ilustra o uso de <xref:System.Enum.GetValues%2A>.</span><span class="sxs-lookup"><span data-stu-id="474b1-336">The following example illustrates the use of <xref:System.Enum.GetValues%2A>.</span></span>  
  
 [!code-cpp[enumgetvalues#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetvalues/CPP/EnumGetValues.cpp#1)]
 [!code-csharp[enumgetvalues#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetvalues/CS/EnumGetValues.cs#1)]
 [!code-vb[enumgetvalues#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetvalues/VB/EnumGetValues.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="474b1-337"><paramref name="enumType" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-337"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474b1-338"><paramref name="enumType" /> não é um <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-338"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="474b1-339">O método é invocado por reflexão em um contexto de somente reflexão,</span><span class="sxs-lookup"><span data-stu-id="474b1-339">The method is invoked by reflection in a reflection-only context,</span></span>  
  
 <span data-ttu-id="474b1-340">- ou -</span><span class="sxs-lookup"><span data-stu-id="474b1-340">-or-</span></span>  
  
 <span data-ttu-id="474b1-341"><paramref name="enumType" /> é um tipo de um assembly carregado em um contexto de somente reflexão.</span><span class="sxs-lookup"><span data-stu-id="474b1-341"><paramref name="enumType" /> is a type from an assembly loaded in a reflection-only context.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="HasFlag">
      <MemberSignature Language="C#" Value="public bool HasFlag (Enum flag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasFlag(class System.Enum flag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.HasFlag(System.Enum)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasFlag (flag As Enum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasFlag(Enum ^ flag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Enum" />
      </Parameters>
      <Docs>
        <param name="flag"><span data-ttu-id="474b1-342">Um valor de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-342">An enumeration value.</span></span></param>
        <summary><span data-ttu-id="474b1-343">Determina se um ou mais campos de bits são definidos na instância atual.</span><span class="sxs-lookup"><span data-stu-id="474b1-343">Determines whether one or more bit fields are set in the current instance.</span></span></summary>
        <returns>
          <span data-ttu-id="474b1-344"><see langword="true" /> se os campos de bits definidos no <paramref name="flag" /> também forem definidos na instância atual; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-344"><see langword="true" /> if the bit field or bit fields that are set in <paramref name="flag" /> are also set in the current instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-345">O <xref:System.Enum.HasFlag%2A> retorna o resultado da expressão booliana seguinte.</span><span class="sxs-lookup"><span data-stu-id="474b1-345">The <xref:System.Enum.HasFlag%2A> method returns the result of the following Boolean expression.</span></span>  
  
```  
thisInstance And flag = flag   
```  
  
 <span data-ttu-id="474b1-346">Se o valor subjacente do `flag` for zero, o método retornará `true`.</span><span class="sxs-lookup"><span data-stu-id="474b1-346">If the underlying value of `flag` is zero, the method returns `true`.</span></span> <span data-ttu-id="474b1-347">Se esse comportamento não é desejável, você pode usar o <xref:System.Enum.Equals%2A> método para testar a igualdade com zero e chame <xref:System.Enum.HasFlag%2A> somente se o valor subjacente do `flag` é diferente de zero, como mostra o exemplo a seguir.</span><span class="sxs-lookup"><span data-stu-id="474b1-347">If this behavior is not desirable, you can use the <xref:System.Enum.Equals%2A> method to test for equality with zero and call <xref:System.Enum.HasFlag%2A> only if the underlying value of `flag` is non-zero, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Enum.HasFlag#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.hasflag/cs/hasflag0.cs#1)]
 [!code-vb[System.Enum.HasFlag#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.hasflag/vb/hasflag0.vb#1)]  
  
 <span data-ttu-id="474b1-348">O <xref:System.Enum.HasFlag%2A> método foi projetado para ser usado com tipos de enumeração que são marcados com o <xref:System.FlagsAttribute> de atributos e pode ser usado para determinar se os vários campos de bits são definidos.</span><span class="sxs-lookup"><span data-stu-id="474b1-348">The <xref:System.Enum.HasFlag%2A> method is designed to be used with enumeration types that are marked with the <xref:System.FlagsAttribute> attribute and can be used to determine whether multiple bit fields are set.</span></span> <span data-ttu-id="474b1-349">Para tipos de enumeração que não são marcados com o <xref:System.FlagsAttribute> atributo, chame o <xref:System.Enum.Equals%2A> método ou o <xref:System.Enum.CompareTo%2A> método.</span><span class="sxs-lookup"><span data-stu-id="474b1-349">For enumeration types that are not marked with the <xref:System.FlagsAttribute> attribute, call either the <xref:System.Enum.Equals%2A> method or the <xref:System.Enum.CompareTo%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474b1-350">O exemplo a seguir define um `ItemsOrdered` enumeração que reflete as categorias de itens que um cliente pode classificar em um restaurante.</span><span class="sxs-lookup"><span data-stu-id="474b1-350">The following example defines an `ItemsOrdered` enumeration that reflects categories of items that a customer can order in a restaurant.</span></span> <span data-ttu-id="474b1-351">O exemplo testa se o cliente tem solicitou uma entrada e uma bebidas.</span><span class="sxs-lookup"><span data-stu-id="474b1-351">The example tests whether the customer has ordered both an entrée and a beverage.</span></span>  
  
 [!code-csharp[System.Enum.HasFlag#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.hasflag/cs/hasflag1.cs#2)]
 [!code-vb[System.Enum.HasFlag#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.hasflag/vb/hasflag1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474b1-352"><paramref name="flag" /> é um tipo diferente da instância atual.</span><span class="sxs-lookup"><span data-stu-id="474b1-352"><paramref name="flag" /> is a different type than the current instance.</span></span></exception>
        <altmember cref="T:System.FlagsAttribute" />
        <altmember cref="M:System.Enum.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public static bool IsDefined (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.IsDefined(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefined (enumType As Type, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefined(Type ^ enumType, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="474b1-353">Um tipo de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-353">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="474b1-354">O valor ou o nome de uma constante em <c>enumType</c>.</span><span class="sxs-lookup"><span data-stu-id="474b1-354">The value or name of a constant in <c>enumType</c>.</span></span></param>
        <summary><span data-ttu-id="474b1-355">Retorna uma indicação se existe uma constante com um valor especificado em uma enumeração especificada.</span><span class="sxs-lookup"><span data-stu-id="474b1-355">Returns an indication whether a constant with a specified value exists in a specified enumeration.</span></span></summary>
        <returns>
          <span data-ttu-id="474b1-356"><see langword="true" /> se uma constante no <paramref name="enumType" /> tiver um valor igual a <paramref name="value" />; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-356"><see langword="true" /> if a constant in <paramref name="enumType" /> has a value equal to <paramref name="value" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-357">O parâmetro `value` pode ser um dos seguintes:</span><span class="sxs-lookup"><span data-stu-id="474b1-357">The `value` parameter can be any of the following:</span></span>  
  
-   <span data-ttu-id="474b1-358">Qualquer membro do tipo `enumType`.</span><span class="sxs-lookup"><span data-stu-id="474b1-358">Any member of type `enumType`.</span></span>  
  
-   <span data-ttu-id="474b1-359">Uma variável cujo valor é um membro de enumeração do tipo `enumType`.</span><span class="sxs-lookup"><span data-stu-id="474b1-359">A variable whose value is an enumeration member of type `enumType`.</span></span>  
  
-   <span data-ttu-id="474b1-360">A representação de cadeia de caracteres do nome de um membro de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-360">The string representation of the name of an enumeration member.</span></span> <span data-ttu-id="474b1-361">Os caracteres na cadeia de caracteres devem ter o mesmo caso como o nome do membro de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-361">The characters in the string must have the same case as the enumeration member name.</span></span>  
  
-   <span data-ttu-id="474b1-362">Um valor do tipo subjacente de `enumType`.</span><span class="sxs-lookup"><span data-stu-id="474b1-362">A value of the underlying type of `enumType`.</span></span>  
  
 <span data-ttu-id="474b1-363">Se as constantes em `enumType` definir um conjunto de campos de bits e `value` contém os valores, nomes ou valores subjacentes de vários campos de bits, o <xref:System.Enum.IsDefined%2A> método retornará `false`.</span><span class="sxs-lookup"><span data-stu-id="474b1-363">If the constants in `enumType` define a set of bit fields and `value` contains the values, names, or underlying values of multiple bit fields, the <xref:System.Enum.IsDefined%2A> method returns `false`.</span></span> <span data-ttu-id="474b1-364">Em outras palavras, para enumerações que definem um conjunto de campos de bits, o método determina apenas se um campo de bits única pertence à enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-364">In other words, for enumerations that define a set of bit fields, the method determines only whether a single bit field belongs to the enumeration.</span></span> <span data-ttu-id="474b1-365">Para determinar se os vários campos de bits são definidos em um tipo de enumeração que é marcado com o <xref:System.FlagsAttribute> atributo, você pode chamar o <xref:System.Enum.HasFlag%2A> método.</span><span class="sxs-lookup"><span data-stu-id="474b1-365">To determine whether multiple bit fields are set in an enumeration type that is tagged with the <xref:System.FlagsAttribute> attribute, you can call the <xref:System.Enum.HasFlag%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474b1-366">O exemplo a seguir define uma enumeração denominada `PetType` que consiste em campos de bits individuais.</span><span class="sxs-lookup"><span data-stu-id="474b1-366">The following example defines an enumeration named `PetType` that consists of individual bit fields.</span></span> <span data-ttu-id="474b1-367">Depois, ele chama o <xref:System.Enum.IsDefined%2A> método com possíveis valores de enumeração, nomes de cadeia de caracteres e valores compostos que resultam da definição de vários campos de bit de base.</span><span class="sxs-lookup"><span data-stu-id="474b1-367">It then calls the <xref:System.Enum.IsDefined%2A> method with possible underlying enumeration values, string names, and composite values that result from setting multiple bit fields.</span></span>  
  
 [!code-csharp[System.Enum.IsDefined#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.IsDefined/cs/isdefined1.cs#1)]
 [!code-vb[System.Enum.IsDefined#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.IsDefined/vb/IsDefined1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="474b1-368"><paramref name="enumType" /> ou <paramref name="value" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-368"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474b1-369"><paramref name="enumType" /> não é um <see langword="Enum" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-369"><paramref name="enumType" /> is not an <see langword="Enum" />.</span></span>  
  
 <span data-ttu-id="474b1-370">- ou -</span><span class="sxs-lookup"><span data-stu-id="474b1-370">-or-</span></span>  
  
 <span data-ttu-id="474b1-371">O tipo de <paramref name="value" /> é uma enumeração, mas não é uma enumeração de tipo <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-371">The type of <paramref name="value" /> is an enumeration, but it is not an enumeration of type <paramref name="enumType" />.</span></span>  
  
 <span data-ttu-id="474b1-372">- ou -</span><span class="sxs-lookup"><span data-stu-id="474b1-372">-or-</span></span>  
  
 <span data-ttu-id="474b1-373">O tipo de <paramref name="value" /> não é um tipo subjacente de <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-373">The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="474b1-374">O <paramref name="value" /> não é o tipo <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" /> ou <see cref="T:System.UInt64" /> ou <see cref="T:System.String" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-374"><paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />, or <see cref="T:System.String" />.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="474b1-375">Se <paramref name="enumType" /> é uma enumeração que é definida usando o <see cref="T:System.FlagsAttribute" /> de atributo, o método retorna <see langword="false" /> se campos de bits múltiplas na <paramref name="value" /> são definidos, mas <paramref name="value" /> não corresponde a um valor de enumeração composto, ou se <paramref name="value" /> é uma concatenação de cadeia de caracteres de nomes de vários sinalizadores de bit.</span><span class="sxs-lookup"><span data-stu-id="474b1-375">If <paramref name="enumType" /> is an enumeration that is defined by using the <see cref="T:System.FlagsAttribute" /> attribute, the method returns <see langword="false" /> if multiple bit fields in <paramref name="value" /> are set but <paramref name="value" /> does not correspond to a composite enumeration value, or if <paramref name="value" /> is a string concatenation of the names of multiple bit flags.</span></span> <span data-ttu-id="474b1-376">No exemplo a seguir, uma <c>animais de estimação</c> enumeração está definida com o <see cref="T:System.FlagsAttribute" /> atributo.</span><span class="sxs-lookup"><span data-stu-id="474b1-376">In the following example, a <c>Pets</c> enumeration is defined with the <see cref="T:System.FlagsAttribute" /> attribute.</span></span> <span data-ttu-id="474b1-377">O <see cref="M:System.Enum.IsDefined(System.Type,System.Object)" /> método retorna <see langword="false" /> quando você passa-um valor de enumeração que tem o bit de dois campos (<c>Pets.Dog</c> e <c>Pets.Cat</c>) definida, e quando você passá-lo a representação de cadeia de caracteres do que valor de enumeração ("Dog, Cat").</span><span class="sxs-lookup"><span data-stu-id="474b1-377">The <see cref="M:System.Enum.IsDefined(System.Type,System.Object)" /> method returns <see langword="false" /> when you pass it an enumeration value that has two bit fields (<c>Pets.Dog</c> and <c>Pets.Cat</c>) set, and when you pass it the string representation of that enumeration value ("Dog, Cat").</span></span>  
  
 [!code-csharp[System.Enum.IsDefined#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.IsDefined/cs/isdefined2.cs#2)]
 [!code-vb[System.Enum.IsDefined#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.IsDefined/vb/isdefined2.vb#2)]  
  
 <span data-ttu-id="474b1-378">Você pode determinar se vários campos de bits são definidos chamando o <see cref="M:System.Enum.HasFlag(System.Enum)" /> método.</span><span class="sxs-lookup"><span data-stu-id="474b1-378">You can determine whether multiple bit fields are set by calling the <see cref="M:System.Enum.HasFlag(System.Enum)" /> method.</span></span></para>
        </block>
        <altmember cref="M:System.Enum.GetName(System.Type,System.Object)" />
        <altmember cref="M:System.Enum.GetNames(System.Type)" />
        <altmember cref="M:System.Enum.GetValues(System.Type)" />
        <altmember cref="M:System.Enum.HasFlag(System.Enum)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="474b1-379">Converte a representação da cadeia de caracteres do nome ou do valor numérico de uma ou mais constantes enumeradas em um objeto enumerado equivalente.</span><span class="sxs-lookup"><span data-stu-id="474b1-379">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span></summary>
        <altmember cref="M:System.Enum.TryParse``1(System.String,``0@)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (Type enumType, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(class System.Type enumType, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (enumType As Type, value As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(Type ^ enumType, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="474b1-380">Um tipo de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-380">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="474b1-381">Uma cadeia de caracteres que contém o nome ou o valor a ser convertido.</span><span class="sxs-lookup"><span data-stu-id="474b1-381">A string containing the name or value to convert.</span></span></param>
        <summary><span data-ttu-id="474b1-382">Converte a representação da cadeia de caracteres do nome ou do valor numérico de uma ou mais constantes enumeradas em um objeto enumerado equivalente.</span><span class="sxs-lookup"><span data-stu-id="474b1-382">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span></summary>
        <returns><span data-ttu-id="474b1-383">Um objeto do tipo <paramref name="enumType" /> cujo valor é representado por <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-383">An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-384">O `value` parâmetro contém a representação de cadeia de caracteres do valor subjacente de um membro de enumeração ou constante nomeada ou uma lista de chamada constantes delimitadas por vírgulas (,).</span><span class="sxs-lookup"><span data-stu-id="474b1-384">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,).</span></span> <span data-ttu-id="474b1-385">Um ou mais espaços em branco podem preceder ou execute cada valor, um nome ou uma vírgula na `value`.</span><span class="sxs-lookup"><span data-stu-id="474b1-385">One or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="474b1-386">Se `value` é uma lista, o valor de retorno é o valor dos nomes especificados combinado com um bit a bit `OR` operação.</span><span class="sxs-lookup"><span data-stu-id="474b1-386">If `value` is a list, the return value is the value of the specified names combined with a bitwise `OR` operation.</span></span>  
  
 <span data-ttu-id="474b1-387">Se `value` é um nome que não corresponde a uma constante nomeada de `enumType`, o método gera uma <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="474b1-387">If `value` is a name that does not correspond to a named constant of `enumType`, the method throws an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="474b1-388">Se `value` é a representação de cadeia de caracteres de um número inteiro que representa um valor subjacente do `enumType` enumeração, o método retorna um membro de enumeração cujo valor subjacente for `value` convertido em um tipo integral.</span><span class="sxs-lookup"><span data-stu-id="474b1-388">If `value` is the string representation of an integer that does not represent an underlying value of the `enumType` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="474b1-389">Se esse comportamento é desejável, chame o <xref:System.Enum.IsDefined%2A> método para garantir que uma representação de cadeia de caracteres específica de um inteiro, na verdade, um membro de `enumType`.</span><span class="sxs-lookup"><span data-stu-id="474b1-389">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `enumType`.</span></span> <span data-ttu-id="474b1-390">O exemplo a seguir define uma `Colors` enumeração, chamadas a <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> método para converter cadeias de caracteres para seus valores de enumeração correspondente e chama o <xref:System.Enum.IsDefined%2A> método para garantir a base de valores integrais específicos de valores no `Colors` enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-390">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample1.cs#1)]
 [!code-vb[System.Enum.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample1.vb#1)]  
  
 <span data-ttu-id="474b1-391">Essa operação diferencia maiusculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="474b1-391">This operation is case-sensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474b1-392">O exemplo a seguir usa o <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> método para analisar uma matriz de cadeias de caracteres que são criadas chamando o <xref:System.Enum.GetNames%2A> método.</span><span class="sxs-lookup"><span data-stu-id="474b1-392">The following example uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an array of strings that are created by calling the <xref:System.Enum.GetNames%2A> method.</span></span> <span data-ttu-id="474b1-393">Ele também usa o <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> método para analisar um valor de enumeração que consiste em um campo de bits.</span><span class="sxs-lookup"><span data-stu-id="474b1-393">It also uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an enumeration value that consists of a bit field.</span></span>  
  
 [!code-cpp[enumparse#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumparse/CPP/EnumParse.cpp#1)]
 [!code-csharp[enumparse#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumparse/CS/EnumParse.cs#1)]
 [!code-vb[enumparse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumparse/VB/EnumParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="474b1-394"><paramref name="enumType" /> ou <paramref name="value" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-394"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474b1-395"><paramref name="enumType" /> não é um <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-395"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
 <span data-ttu-id="474b1-396">- ou -</span><span class="sxs-lookup"><span data-stu-id="474b1-396">-or-</span></span>  
  
 <span data-ttu-id="474b1-397"><paramref name="value" /> é uma cadeia de caracteres vazia ou contém apenas espaços em branco.</span><span class="sxs-lookup"><span data-stu-id="474b1-397"><paramref name="value" /> is either an empty string or only contains white space.</span></span>  
  
 <span data-ttu-id="474b1-398">- ou -</span><span class="sxs-lookup"><span data-stu-id="474b1-398">-or-</span></span>  
  
 <span data-ttu-id="474b1-399"><paramref name="value" /> é um nome, mas não uma das constantes nomeadas definidas para a enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-399"><paramref name="value" /> is a name, but not one of the named constants defined for the enumeration.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="474b1-400"><paramref name="value" /> está fora do intervalo do tipo subjacente de <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-400"><paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (Type enumType, string value, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(class System.Type enumType, string value, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse(System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (enumType As Type, value As String, ignoreCase As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(Type ^ enumType, System::String ^ value, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="474b1-401">Um tipo de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-401">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="474b1-402">Uma cadeia de caracteres que contém o nome ou o valor a ser convertido.</span><span class="sxs-lookup"><span data-stu-id="474b1-402">A string containing the name or value to convert.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="474b1-403"><see langword="true" /> para ignorar maiúsculas e minúsculas; <see langword="false" /> levar maiúsculas e minúsculas em consideração.</span><span class="sxs-lookup"><span data-stu-id="474b1-403"><see langword="true" /> to ignore case; <see langword="false" /> to regard case.</span></span></param>
        <summary><span data-ttu-id="474b1-404">Converte a representação da cadeia de caracteres do nome ou do valor numérico de uma ou mais constantes enumeradas em um objeto enumerado equivalente.</span><span class="sxs-lookup"><span data-stu-id="474b1-404">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="474b1-405">Um parâmetro especifica se a operação não diferencia maiúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="474b1-405">A parameter specifies whether the operation is case-insensitive.</span></span></summary>
        <returns><span data-ttu-id="474b1-406">Um objeto do tipo <paramref name="enumType" /> cujo valor é representado por <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-406">An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-407">O `value` parâmetro contém a representação de cadeia de caracteres do valor subjacente de um membro de enumeração ou constante nomeada ou uma lista de chamada constantes delimitadas por vírgulas (,).</span><span class="sxs-lookup"><span data-stu-id="474b1-407">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,).</span></span> <span data-ttu-id="474b1-408">Um ou mais espaços em branco podem preceder ou execute cada valor, um nome ou uma vírgula na `value`.</span><span class="sxs-lookup"><span data-stu-id="474b1-408">One or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="474b1-409">Se `value` é uma lista, o valor de retorno é o valor dos nomes especificados combinado com um bit a bit `OR` operação.</span><span class="sxs-lookup"><span data-stu-id="474b1-409">If `value` is a list, the return value is the value of the specified names combined with a bitwise `OR` operation.</span></span>  
  
 <span data-ttu-id="474b1-410">Se `value` é um nome que não corresponde a uma constante nomeada de `enumType`, o método gera uma <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="474b1-410">If `value` is a name that does not correspond to a named constant of `enumType`, the method throws an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="474b1-411">Se `value` é a representação de cadeia de caracteres de um número inteiro que representa um valor subjacente do `enumType` enumeração, o método retorna um membro de enumeração cujo valor subjacente for `value` convertido em um tipo integral.</span><span class="sxs-lookup"><span data-stu-id="474b1-411">If `value` is the string representation of an integer that does not represent an underlying value of the `enumType` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="474b1-412">Se esse comportamento é desejável, chame o <xref:System.Enum.IsDefined%2A> método para garantir que uma representação de cadeia de caracteres específica de um inteiro, na verdade, um membro de `enumType`.</span><span class="sxs-lookup"><span data-stu-id="474b1-412">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `enumType`.</span></span> <span data-ttu-id="474b1-413">O exemplo a seguir define uma `Colors` enumeração, chamadas a <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> método para converter cadeias de caracteres para seus valores de enumeração correspondente e chama o <xref:System.Enum.IsDefined%2A> método para garantir a base de valores integrais específicos de valores no `Colors` enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-413">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample2.cs#2)]
 [!code-vb[System.Enum.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample2.vb#2)]  
  
 <span data-ttu-id="474b1-414">O `ignoreCase` parâmetro especifica se essa operação diferencia maiusculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="474b1-414">The `ignoreCase` parameter specifies whether this operation is case-sensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474b1-415">O exemplo a seguir usa o <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> método para analisar uma matriz de cadeias de caracteres que são criadas chamando o <xref:System.Enum.GetNames%2A> método.</span><span class="sxs-lookup"><span data-stu-id="474b1-415">The following example uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method to parse an array of strings that are created by calling the <xref:System.Enum.GetNames%2A> method.</span></span> <span data-ttu-id="474b1-416">Ele também usa o <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> método para analisar um valor de enumeração que consiste em um campo de bits.</span><span class="sxs-lookup"><span data-stu-id="474b1-416">It also uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an enumeration value that consists of a bit field.</span></span>  
  
 [!code-csharp[System.Enum.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample2.cs#2)]
 [!code-vb[System.Enum.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="474b1-417"><paramref name="enumType" /> ou <paramref name="value" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-417"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474b1-418"><paramref name="enumType" /> não é um <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-418"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
 <span data-ttu-id="474b1-419">- ou -</span><span class="sxs-lookup"><span data-stu-id="474b1-419">-or-</span></span>  
  
 <span data-ttu-id="474b1-420"><paramref name="value" /> é uma cadeia de caracteres vazia ("") ou contém apenas espaços em branco.</span><span class="sxs-lookup"><span data-stu-id="474b1-420"><paramref name="value" /> is either an empty string ("") or only contains white space.</span></span>  
  
 <span data-ttu-id="474b1-421">- ou -</span><span class="sxs-lookup"><span data-stu-id="474b1-421">-or-</span></span>  
  
 <span data-ttu-id="474b1-422"><paramref name="value" /> é um nome, mas não uma das constantes nomeadas definidas para a enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-422"><paramref name="value" /> is a name, but not one of the named constants defined for the enumeration.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="474b1-423"><paramref name="value" /> está fora do intervalo do tipo subjacente de <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-423"><paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Parse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static TEnum Parse&lt;TEnum&gt; (string value) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TEnum Parse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse(Of TEnum As Structure) (value As String) As TEnum" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static TEnum Parse(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEnum</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum">To be added.</typeparam>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static TEnum Parse&lt;TEnum&gt; (string value, bool ignoreCase) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TEnum Parse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse``1(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse(Of TEnum As Structure) (value As String, ignoreCase As Boolean) As TEnum" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static TEnum Parse(System::String ^ value, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEnum</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum">To be added.</typeparam>
        <param name="value">To be added.</param>
        <param name="ignoreCase">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="474b1-424">Um objeto que fornece informações de formatação específicas de cultura.</span><span class="sxs-lookup"><span data-stu-id="474b1-424">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="474b1-425">Converte o valor atual em um valor booliano com base no tipo subjacente.</span><span class="sxs-lookup"><span data-stu-id="474b1-425">Converts the current value to a Boolean value based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="474b1-426">Este membro sempre lança uma exceção.</span><span class="sxs-lookup"><span data-stu-id="474b1-426">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-427">Atualmente não implementado.</span><span class="sxs-lookup"><span data-stu-id="474b1-427">Currently not implemented.</span></span> <span data-ttu-id="474b1-428">Sempre lança uma exceção.</span><span class="sxs-lookup"><span data-stu-id="474b1-428">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="474b1-429">Em todos os casos.</span><span class="sxs-lookup"><span data-stu-id="474b1-429">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="474b1-430">Um objeto que fornece informações de formatação específicas de cultura.</span><span class="sxs-lookup"><span data-stu-id="474b1-430">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="474b1-431">Converte o valor atual em um inteiro sem sinal de 8 bits com base no tipo subjacente.</span><span class="sxs-lookup"><span data-stu-id="474b1-431">Converts the current value to an 8-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="474b1-432">O valor convertido.</span><span class="sxs-lookup"><span data-stu-id="474b1-432">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-433">Usa <xref:System.Convert> para realizar a conversão.</span><span class="sxs-lookup"><span data-stu-id="474b1-433">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="474b1-434">Um objeto que fornece informações de formatação específicas de cultura.</span><span class="sxs-lookup"><span data-stu-id="474b1-434">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="474b1-435">Converte o valor atual em um caractere Unicode com base no tipo subjacente.</span><span class="sxs-lookup"><span data-stu-id="474b1-435">Converts the current value to a Unicode character based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="474b1-436">Este membro sempre lança uma exceção.</span><span class="sxs-lookup"><span data-stu-id="474b1-436">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-437">Atualmente não implementado.</span><span class="sxs-lookup"><span data-stu-id="474b1-437">Currently not implemented.</span></span> <span data-ttu-id="474b1-438">Sempre lança uma exceção.</span><span class="sxs-lookup"><span data-stu-id="474b1-438">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="474b1-439">Em todos os casos.</span><span class="sxs-lookup"><span data-stu-id="474b1-439">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="474b1-440">Um objeto que fornece informações de formatação específicas de cultura.</span><span class="sxs-lookup"><span data-stu-id="474b1-440">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="474b1-441">Converte o valor atual em um <see cref="T:System.DateTime" /> com base no tipo subjacente.</span><span class="sxs-lookup"><span data-stu-id="474b1-441">Converts the current value to a <see cref="T:System.DateTime" /> based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="474b1-442">Este membro sempre lança uma exceção.</span><span class="sxs-lookup"><span data-stu-id="474b1-442">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-443">Atualmente não implementado.</span><span class="sxs-lookup"><span data-stu-id="474b1-443">Currently not implemented.</span></span> <span data-ttu-id="474b1-444">Sempre lança uma exceção.</span><span class="sxs-lookup"><span data-stu-id="474b1-444">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="474b1-445">Em todos os casos.</span><span class="sxs-lookup"><span data-stu-id="474b1-445">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="474b1-446">Um objeto que fornece informações de formatação específicas de cultura.</span><span class="sxs-lookup"><span data-stu-id="474b1-446">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="474b1-447">Converte o valor atual em um <see cref="T:System.Decimal" /> com base no tipo subjacente.</span><span class="sxs-lookup"><span data-stu-id="474b1-447">Converts the current value to a <see cref="T:System.Decimal" /> based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="474b1-448">Este membro sempre lança uma exceção.</span><span class="sxs-lookup"><span data-stu-id="474b1-448">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-449">Atualmente não implementado.</span><span class="sxs-lookup"><span data-stu-id="474b1-449">Currently not implemented.</span></span> <span data-ttu-id="474b1-450">Sempre lança uma exceção.</span><span class="sxs-lookup"><span data-stu-id="474b1-450">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="474b1-451">Em todos os casos.</span><span class="sxs-lookup"><span data-stu-id="474b1-451">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="474b1-452">Um objeto que fornece informações de formatação específicas de cultura.</span><span class="sxs-lookup"><span data-stu-id="474b1-452">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="474b1-453">Converte o valor atual em um número de ponto flutuante de precisão dupla com base no tipo subjacente.</span><span class="sxs-lookup"><span data-stu-id="474b1-453">Converts the current value to a double-precision floating point number based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="474b1-454">Este membro sempre lança uma exceção.</span><span class="sxs-lookup"><span data-stu-id="474b1-454">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-455">Atualmente não implementado.</span><span class="sxs-lookup"><span data-stu-id="474b1-455">Currently not implemented.</span></span> <span data-ttu-id="474b1-456">Sempre lança uma exceção.</span><span class="sxs-lookup"><span data-stu-id="474b1-456">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="474b1-457">Em todos os casos.</span><span class="sxs-lookup"><span data-stu-id="474b1-457">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="474b1-458">Um objeto que fornece informações de formatação específicas de cultura.</span><span class="sxs-lookup"><span data-stu-id="474b1-458">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="474b1-459">Converte o valor atual em um inteiro com sinal de 16 bits com base no tipo subjacente.</span><span class="sxs-lookup"><span data-stu-id="474b1-459">Converts the current value to a 16-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="474b1-460">O valor convertido.</span><span class="sxs-lookup"><span data-stu-id="474b1-460">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-461">Usa <xref:System.Convert> para realizar a conversão.</span><span class="sxs-lookup"><span data-stu-id="474b1-461">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="474b1-462">Um objeto que fornece informações de formatação específicas de cultura.</span><span class="sxs-lookup"><span data-stu-id="474b1-462">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="474b1-463">Converte o valor atual em um inteiro com sinal de 32 bits com base no tipo subjacente.</span><span class="sxs-lookup"><span data-stu-id="474b1-463">Converts the current value to a 32-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="474b1-464">O valor convertido.</span><span class="sxs-lookup"><span data-stu-id="474b1-464">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-465">Usa <xref:System.Convert> para realizar a conversão.</span><span class="sxs-lookup"><span data-stu-id="474b1-465">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="474b1-466">Um objeto que fornece informações de formatação específicas de cultura.</span><span class="sxs-lookup"><span data-stu-id="474b1-466">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="474b1-467">Converte o valor atual em um inteiro com sinal de 64 bits com base no tipo subjacente.</span><span class="sxs-lookup"><span data-stu-id="474b1-467">Converts the current value to a 64-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="474b1-468">O valor convertido.</span><span class="sxs-lookup"><span data-stu-id="474b1-468">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-469">Usa <xref:System.Convert> para realizar a conversão.</span><span class="sxs-lookup"><span data-stu-id="474b1-469">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="474b1-470">Um objeto que fornece informações de formatação específicas de cultura.</span><span class="sxs-lookup"><span data-stu-id="474b1-470">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="474b1-471">Converte o valor atual em um inteiro com sinal de 8 bits com base no tipo subjacente.</span><span class="sxs-lookup"><span data-stu-id="474b1-471">Converts the current value to an 8-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="474b1-472">O valor convertido.</span><span class="sxs-lookup"><span data-stu-id="474b1-472">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-473">Usa <xref:System.Convert> para realizar a conversão.</span><span class="sxs-lookup"><span data-stu-id="474b1-473">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="474b1-474">Um objeto que fornece informações de formatação específicas de cultura.</span><span class="sxs-lookup"><span data-stu-id="474b1-474">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="474b1-475">Converte o valor atual em um número de ponto flutuante de precisão simples com base no tipo subjacente.</span><span class="sxs-lookup"><span data-stu-id="474b1-475">Converts the current value to a single-precision floating-point number based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="474b1-476">Este membro sempre lança uma exceção.</span><span class="sxs-lookup"><span data-stu-id="474b1-476">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-477">Atualmente não implementado.</span><span class="sxs-lookup"><span data-stu-id="474b1-477">Currently not implemented.</span></span> <span data-ttu-id="474b1-478">Sempre lança uma exceção.</span><span class="sxs-lookup"><span data-stu-id="474b1-478">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="474b1-479">Em todos os casos.</span><span class="sxs-lookup"><span data-stu-id="474b1-479">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToString">
      <MemberSignature Language="C#" Value="string IConvertible.ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IConvertible.ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (provider As IFormatProvider) As String Implements IConvertible.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IConvertible.ToString(IFormatProvider ^ provider) = IConvertible::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString().")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="474b1-480">O tipo para o qual converter.</span><span class="sxs-lookup"><span data-stu-id="474b1-480">The type to convert to.</span></span></param>
        <param name="provider"><span data-ttu-id="474b1-481">Um objeto que fornece informações de formatação específicas de cultura.</span><span class="sxs-lookup"><span data-stu-id="474b1-481">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="474b1-482">Converte o valor atual em um tipo especificado com base no tipo subjacente.</span><span class="sxs-lookup"><span data-stu-id="474b1-482">Converts the current value to a specified type based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="474b1-483">O valor convertido.</span><span class="sxs-lookup"><span data-stu-id="474b1-483">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-484">Usa <xref:System.Convert> para realizar a conversão.</span><span class="sxs-lookup"><span data-stu-id="474b1-484">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="474b1-485">Um objeto que fornece informações de formatação específicas de cultura.</span><span class="sxs-lookup"><span data-stu-id="474b1-485">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="474b1-486">Converte o valor atual em um inteiro sem sinal de 16 bits com base no tipo subjacente.</span><span class="sxs-lookup"><span data-stu-id="474b1-486">Converts the current value to a 16-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="474b1-487">O valor convertido.</span><span class="sxs-lookup"><span data-stu-id="474b1-487">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-488">Usa <xref:System.Convert> para realizar a conversão.</span><span class="sxs-lookup"><span data-stu-id="474b1-488">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="474b1-489">Um objeto que fornece informações de formatação específicas de cultura.</span><span class="sxs-lookup"><span data-stu-id="474b1-489">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="474b1-490">Converte o valor atual em um inteiro sem sinal de 32 bits com base no tipo subjacente.</span><span class="sxs-lookup"><span data-stu-id="474b1-490">Converts the current value to a 32-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="474b1-491">O valor convertido.</span><span class="sxs-lookup"><span data-stu-id="474b1-491">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-492">Usa <xref:System.Convert> para realizar a conversão.</span><span class="sxs-lookup"><span data-stu-id="474b1-492">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="474b1-493">Um objeto que fornece informações de formatação específicas de cultura.</span><span class="sxs-lookup"><span data-stu-id="474b1-493">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="474b1-494">Converte o valor atual em um inteiro sem sinal de 64 bits com base no tipo subjacente.</span><span class="sxs-lookup"><span data-stu-id="474b1-494">Converts the current value to a 64-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="474b1-495">O valor convertido.</span><span class="sxs-lookup"><span data-stu-id="474b1-495">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-496">Usa <xref:System.Convert> para realizar a conversão.</span><span class="sxs-lookup"><span data-stu-id="474b1-496">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IFormattable#ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (format As String, provider As IFormatProvider) As String Implements IFormattable.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IFormattable.ToString(System::String ^ format, IFormatProvider ^ provider) = IFormattable::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString(String).")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="474b1-497">Converte um valor inteiro especificado em membro de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-497">Converts a specified integer value to an enumeration member.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Byte) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="474b1-498">O tipo de enumeração a ser retornado.</span><span class="sxs-lookup"><span data-stu-id="474b1-498">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="474b1-499">O valor a ser convertido em um membro de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-499">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="474b1-500">Converte o inteiro sem sinal de 8 bits especificado para um membro de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-500">Converts the specified 8-bit unsigned integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="474b1-501">Uma instância da enumeração definida como <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-501">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-502">O <xref:System.Enum.ToObject%28System.Type%2CSystem.Byte%29> método converte `value` para um membro de enumeração cujo valor subjacente for `value`.</span><span class="sxs-lookup"><span data-stu-id="474b1-502">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Byte%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="474b1-503">A conversão é bem-sucedida mesmo se o valor está fora dos limites de membros `enumType`.</span><span class="sxs-lookup"><span data-stu-id="474b1-503">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="474b1-504">Para garantir que `value` seja um valor válido subjacente da enumeração `enumType`, passe-o para o método <xref:System.Enum.IsDefined%2A>.</span><span class="sxs-lookup"><span data-stu-id="474b1-504">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="474b1-505">Este método de conversão retorna um valor do tipo <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="474b1-505">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="474b1-506">Em seguida, é possível convertê-lo em um objeto do tipo `enumType`.</span><span class="sxs-lookup"><span data-stu-id="474b1-506">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="474b1-507"><paramref name="enumType" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-507"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474b1-508"><paramref name="enumType" /> não é um <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-508"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Short) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="474b1-509">O tipo de enumeração a ser retornado.</span><span class="sxs-lookup"><span data-stu-id="474b1-509">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="474b1-510">O valor a ser convertido em um membro de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-510">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="474b1-511">Converte o inteiro com sinal de 16 bits especificado em um membro de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-511">Converts the specified 16-bit signed integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="474b1-512">Uma instância da enumeração definida como <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-512">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-513">O <xref:System.Enum.ToObject%28System.Type%2CSystem.Int16%29> método converte `value` para um membro de enumeração cujo valor subjacente for `value`.</span><span class="sxs-lookup"><span data-stu-id="474b1-513">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int16%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="474b1-514">A conversão é bem-sucedida mesmo se o valor está fora dos limites de membros `enumType`.</span><span class="sxs-lookup"><span data-stu-id="474b1-514">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="474b1-515">Para garantir que `value` seja um valor válido subjacente da enumeração `enumType`, passe-o para o método <xref:System.Enum.IsDefined%2A>.</span><span class="sxs-lookup"><span data-stu-id="474b1-515">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="474b1-516">Este método de conversão retorna um valor do tipo <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="474b1-516">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="474b1-517">Em seguida, é possível convertê-lo em um objeto do tipo `enumType`.</span><span class="sxs-lookup"><span data-stu-id="474b1-517">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="474b1-518"><paramref name="enumType" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-518"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474b1-519"><paramref name="enumType" /> não é um <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-519"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="474b1-520">O tipo de enumeração a ser retornado.</span><span class="sxs-lookup"><span data-stu-id="474b1-520">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="474b1-521">O valor a ser convertido em um membro de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-521">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="474b1-522">Converte o inteiro com sinal de 32 bits especificado para um membro de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-522">Converts the specified 32-bit signed integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="474b1-523">Uma instância da enumeração definida como <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-523">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-524">O <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> método converte `value` para um membro de enumeração cujo valor subjacente for `value`.</span><span class="sxs-lookup"><span data-stu-id="474b1-524">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="474b1-525">A conversão é bem-sucedida mesmo se o valor está fora dos limites de membros `enumType`.</span><span class="sxs-lookup"><span data-stu-id="474b1-525">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="474b1-526">Para garantir que `value` seja um valor válido subjacente da enumeração `enumType`, passe-o para o método <xref:System.Enum.IsDefined%2A>.</span><span class="sxs-lookup"><span data-stu-id="474b1-526">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="474b1-527">Este método de conversão retorna um valor do tipo <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="474b1-527">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="474b1-528">Em seguida, é possível convertê-lo em um objeto do tipo `enumType`.</span><span class="sxs-lookup"><span data-stu-id="474b1-528">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="474b1-529"><paramref name="enumType" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-529"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474b1-530"><paramref name="enumType" /> não é um <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-530"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Long) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="474b1-531">O tipo de enumeração a ser retornado.</span><span class="sxs-lookup"><span data-stu-id="474b1-531">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="474b1-532">O valor a ser convertido em um membro de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-532">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="474b1-533">Converte o inteiro com sinal de 64 bits especificado em um membro de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-533">Converts the specified 64-bit signed integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="474b1-534">Uma instância da enumeração definida como <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-534">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-535">O <xref:System.Enum.ToObject%28System.Type%2CSystem.Int64%29> método converte `value` para um membro de enumeração cujo valor subjacente for `value`.</span><span class="sxs-lookup"><span data-stu-id="474b1-535">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int64%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="474b1-536">A conversão é bem-sucedida mesmo se o valor está fora dos limites de membros `enumType`.</span><span class="sxs-lookup"><span data-stu-id="474b1-536">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="474b1-537">Para garantir que `value` seja um valor válido subjacente da enumeração `enumType`, passe-o para o método <xref:System.Enum.IsDefined%2A>.</span><span class="sxs-lookup"><span data-stu-id="474b1-537">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="474b1-538">Este método de conversão retorna um valor do tipo <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="474b1-538">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="474b1-539">Em seguida, é possível convertê-lo em um objeto do tipo `enumType`.</span><span class="sxs-lookup"><span data-stu-id="474b1-539">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="474b1-540"><paramref name="enumType" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-540"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474b1-541"><paramref name="enumType" /> não é um <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-541"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="474b1-542">O tipo de enumeração a ser retornado.</span><span class="sxs-lookup"><span data-stu-id="474b1-542">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="474b1-543">O valor a ser convertido em um membro da enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-543">The value convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="474b1-544">Converte o objeto especificado com um valor inteiro em um membro da enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-544">Converts the specified object with an integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="474b1-545">Um objeto de enumeração cujo valor é <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-545">An enumeration object whose value is <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-546">O <xref:System.Enum.ToObject%28System.Type%2CSystem.Object%29> método converte o valor integral `value` para um membro de enumeração cujo valor subjacente for `value`.</span><span class="sxs-lookup"><span data-stu-id="474b1-546">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Object%29> method converts the integral value `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="474b1-547">A conversão é bem-sucedida mesmo se o valor está fora dos limites de membros `enumType`.</span><span class="sxs-lookup"><span data-stu-id="474b1-547">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="474b1-548">Para garantir que `value` seja um valor válido subjacente da enumeração `enumType`, passe-o para o método <xref:System.Enum.IsDefined%2A>.</span><span class="sxs-lookup"><span data-stu-id="474b1-548">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="474b1-549">Este método de conversão retorna um valor do tipo <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="474b1-549">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="474b1-550">Em seguida, é possível convertê-lo em um objeto do tipo `enumType`.</span><span class="sxs-lookup"><span data-stu-id="474b1-550">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="474b1-551"><paramref name="enumType" /> ou <paramref name="value" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-551"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474b1-552"><paramref name="enumType" /> não é um <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-552"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
 <span data-ttu-id="474b1-553">- ou -</span><span class="sxs-lookup"><span data-stu-id="474b1-553">-or-</span></span>  
  
 <span data-ttu-id="474b1-554"><paramref name="value" /> não é do tipo <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" /> ou <see cref="T:System.UInt64" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-554"><paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As SByte) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="474b1-555">O tipo de enumeração a ser retornado.</span><span class="sxs-lookup"><span data-stu-id="474b1-555">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="474b1-556">O valor a ser convertido em um membro de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-556">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="474b1-557">Converte o valor inteiro com sinal de 8 bits especificado em um membro de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-557">Converts the specified 8-bit signed integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="474b1-558">Uma instância da enumeração definida como <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-558">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-559">O <xref:System.Enum.ToObject%28System.Type%2CSystem.SByte%29> método converte `value` para um membro de enumeração cujo valor subjacente for `value`.</span><span class="sxs-lookup"><span data-stu-id="474b1-559">The <xref:System.Enum.ToObject%28System.Type%2CSystem.SByte%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="474b1-560">A conversão é bem-sucedida mesmo se o valor está fora dos limites de membros `enumType`.</span><span class="sxs-lookup"><span data-stu-id="474b1-560">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="474b1-561">Para garantir que `value` seja um valor válido subjacente da enumeração `enumType`, passe-o para o método <xref:System.Enum.IsDefined%2A>.</span><span class="sxs-lookup"><span data-stu-id="474b1-561">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="474b1-562">Este método de conversão retorna um valor do tipo <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="474b1-562">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="474b1-563">Em seguida, é possível convertê-lo em um objeto do tipo `enumType`.</span><span class="sxs-lookup"><span data-stu-id="474b1-563">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="474b1-564"><paramref name="enumType" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-564"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474b1-565"><paramref name="enumType" /> não é um <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-565"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As UShort) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt16 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="474b1-566">O tipo de enumeração a ser retornado.</span><span class="sxs-lookup"><span data-stu-id="474b1-566">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="474b1-567">O valor a ser convertido em um membro de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-567">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="474b1-568">Converte o valor inteiro sem sinal de 16 bits especificado em um membro de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-568">Converts the specified 16-bit unsigned integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="474b1-569">Uma instância da enumeração definida como <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-569">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-570">O <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt16%29> método converte `value` para um membro de enumeração cujo valor subjacente for `value`.</span><span class="sxs-lookup"><span data-stu-id="474b1-570">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt16%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="474b1-571">A conversão é bem-sucedida mesmo se o valor está fora dos limites de membros `enumType`.</span><span class="sxs-lookup"><span data-stu-id="474b1-571">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="474b1-572">Para garantir que `value` seja um valor válido subjacente da enumeração `enumType`, passe-o para o método <xref:System.Enum.IsDefined%2A>.</span><span class="sxs-lookup"><span data-stu-id="474b1-572">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="474b1-573">Este método de conversão retorna um valor do tipo <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="474b1-573">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="474b1-574">Em seguida, é possível convertê-lo em um objeto do tipo `enumType`.</span><span class="sxs-lookup"><span data-stu-id="474b1-574">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="474b1-575"><paramref name="enumType" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-575"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474b1-576"><paramref name="enumType" /> não é um <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-576"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As UInteger) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="474b1-577">O tipo de enumeração a ser retornado.</span><span class="sxs-lookup"><span data-stu-id="474b1-577">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="474b1-578">O valor a ser convertido em um membro de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-578">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="474b1-579">Converte o valor inteiro sem sinal de 32 bits especificado em um membro de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-579">Converts the specified 32-bit unsigned integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="474b1-580">Uma instância da enumeração definida como <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-580">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-581">O <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt32%29> método converte `value` para um membro de enumeração cujo valor subjacente for `value`.</span><span class="sxs-lookup"><span data-stu-id="474b1-581">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt32%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="474b1-582">A conversão é bem-sucedida mesmo se o valor está fora dos limites de membros `enumType`.</span><span class="sxs-lookup"><span data-stu-id="474b1-582">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="474b1-583">Para garantir que `value` seja um valor válido subjacente da enumeração `enumType`, passe-o para o método <xref:System.Enum.IsDefined%2A>.</span><span class="sxs-lookup"><span data-stu-id="474b1-583">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="474b1-584">Este método de conversão retorna um valor do tipo <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="474b1-584">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="474b1-585">Em seguida, é possível convertê-lo em um objeto do tipo `enumType`.</span><span class="sxs-lookup"><span data-stu-id="474b1-585">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="474b1-586"><paramref name="enumType" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-586"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474b1-587"><paramref name="enumType" /> não é um <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-587"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As ULong) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="474b1-588">O tipo de enumeração a ser retornado.</span><span class="sxs-lookup"><span data-stu-id="474b1-588">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="474b1-589">O valor a ser convertido em um membro de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-589">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="474b1-590">Converte o valor inteiro sem sinal de 64 bits especificado em um membro de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-590">Converts the specified 64-bit unsigned integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="474b1-591">Uma instância da enumeração definida como <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-591">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-592">O <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt64%29> método converte `value` para um membro de enumeração cujo valor subjacente for `value`.</span><span class="sxs-lookup"><span data-stu-id="474b1-592">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt64%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="474b1-593">A conversão é bem-sucedida mesmo se o valor está fora dos limites de membros `enumType`.</span><span class="sxs-lookup"><span data-stu-id="474b1-593">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="474b1-594">Para garantir que `value` seja um valor válido subjacente da enumeração `enumType`, passe-o para o método <xref:System.Enum.IsDefined%2A>.</span><span class="sxs-lookup"><span data-stu-id="474b1-594">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="474b1-595">Este método de conversão retorna um valor do tipo <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="474b1-595">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="474b1-596">Em seguida, é possível convertê-lo em um objeto do tipo `enumType`.</span><span class="sxs-lookup"><span data-stu-id="474b1-596">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="474b1-597"><paramref name="enumType" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-597"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474b1-598"><paramref name="enumType" /> não é um <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-598"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="474b1-599">Converte o valor dessa instância na representação da cadeia de caracteres equivalente.</span><span class="sxs-lookup"><span data-stu-id="474b1-599">Converts the value of this instance to its equivalent string representation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="474b1-600">Converte o valor dessa instância na representação da cadeia de caracteres equivalente.</span><span class="sxs-lookup"><span data-stu-id="474b1-600">Converts the value of this instance to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="474b1-601">A representação da cadeia de caracteres do valor dessa instância.</span><span class="sxs-lookup"><span data-stu-id="474b1-601">The string representation of the value of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-602">O valor de retorno é formatado com o especificador de formato geral ("G").</span><span class="sxs-lookup"><span data-stu-id="474b1-602">The return value is formatted with the general format specifier ("G").</span></span> <span data-ttu-id="474b1-603">Ou seja, se o <xref:System.FlagsAttribute> não é aplicado a este tipo enumerado e há uma constante nomeada igual ao valor desta instância, o valor de retorno é uma cadeia de caracteres que contém o nome da constante.</span><span class="sxs-lookup"><span data-stu-id="474b1-603">That is, if the <xref:System.FlagsAttribute> is not applied to this enumerated type and there is a named constant equal to the value of this instance, then the return value is a string containing the name of the constant.</span></span> <span data-ttu-id="474b1-604">Se o <xref:System.FlagsAttribute> é aplicada e uma combinação de uma ou mais constantes nomeadas é igual ao valor desta instância, em seguida, o valor de retorno é uma cadeia de caracteres contendo uma lista separada por delimitador de nomes de constantes.</span><span class="sxs-lookup"><span data-stu-id="474b1-604">If the <xref:System.FlagsAttribute> is applied and there is a combination of one or more named constants equal to the value of this instance, then the return value is a string containing a delimiter-separated list of the names of the constants.</span></span> <span data-ttu-id="474b1-605">Caso contrário, o valor de retorno é a representação de cadeia de caracteres do valor numérico dessa instância.</span><span class="sxs-lookup"><span data-stu-id="474b1-605">Otherwise, the return value is the string representation of the numeric value of this instance.</span></span> <span data-ttu-id="474b1-606">Para obter mais informações sobre formatação de valores de enumeração, consulte [cadeias de caracteres de formato de enumeração](~/docs/standard/base-types/enumeration-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="474b1-606">For more information about formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="474b1-607">Para obter mais informações sobre formatação em geral, consulte [tipos de formatação](~/docs/standard/base-types/formatting-types.md).</span><span class="sxs-lookup"><span data-stu-id="474b1-607">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474b1-608">O exemplo a seguir demonstra como converter um valor enumerado em uma cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="474b1-608">The following example demonstrates converting an enumerated value to a string.</span></span>  
  
 [!code-cpp[Classic Enum.ToString2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Enum.ToString2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/CS/source.cs#1)]
 [!code-vb[Classic Enum.ToString2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="474b1-609">Se vários membros de enumeração têm o mesmo valor subjacente e você tentar recuperar a representação de cadeia de caracteres do nome de um membro de enumeração com base em seu valor subjacente, seu código não deve fazer suposições sobre qual nome do método será retornado.</span><span class="sxs-lookup"><span data-stu-id="474b1-609">If multiple enumeration members have the same underlying value and you attempt to retrieve the string representation of an enumeration member's name based on its underlying value, your code should not make any assumptions about which name the method will return.</span></span> <span data-ttu-id="474b1-610">Por exemplo, a enumeração a seguir define dois membros, <c>Shade.Gray</c> e <c>Shade.Grey</c>, que têm o mesmo valor subjacente.</span><span class="sxs-lookup"><span data-stu-id="474b1-610">For example, the following enumeration defines two members, <c>Shade.Gray</c> and <c>Shade.Grey</c>, that have the same underlying value.</span></span>  
  
 [!code-csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)]
 [!code-vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)]  
  
 <span data-ttu-id="474b1-611">A chamada de método a seguir tenta recuperar o nome de um membro do <c>tonalidade</c> enumeração cujo valor subjacente é 1.</span><span class="sxs-lookup"><span data-stu-id="474b1-611">The following method call attempts to retrieve the name of a member of the <c>Shade</c> enumeration whose underlying value is 1.</span></span> <span data-ttu-id="474b1-612">O método pode retornar "Cinza" ou "Cinza" e seu código não deve fazer suposições sobre qual cadeia de caracteres será retornada.</span><span class="sxs-lookup"><span data-stu-id="474b1-612">The method can return either "Gray" or "Grey", and your code should not make any assumptions about which string will be returned.</span></span>  
  
 [!code-csharp[System.Enum.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#2)]
 [!code-vb[System.Enum.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#2)]</para>
        </block>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString().")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="474b1-613">(obsoleto)</span><span class="sxs-lookup"><span data-stu-id="474b1-613">(obsolete)</span></span></param>
        <summary><span data-ttu-id="474b1-614">Essa sobrecarga de método é obsoleta; use <see cref="M:System.Enum.ToString" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-614">This method overload is obsolete; use <see cref="M:System.Enum.ToString" />.</span></span></summary>
        <returns><span data-ttu-id="474b1-615">A representação da cadeia de caracteres do valor dessa instância.</span><span class="sxs-lookup"><span data-stu-id="474b1-615">The string representation of the value of this instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="474b1-616">Uma cadeia de caracteres de formato.</span><span class="sxs-lookup"><span data-stu-id="474b1-616">A format string.</span></span></param>
        <summary><span data-ttu-id="474b1-617">Converte o valor dessa instância para sua representação de cadeia de caracteres equivalente usando o formato especificado.</span><span class="sxs-lookup"><span data-stu-id="474b1-617">Converts the value of this instance to its equivalent string representation using the specified format.</span></span></summary>
        <returns><span data-ttu-id="474b1-618">A representação da cadeia de caracteres do valor dessa instância conforme especificado por <paramref name="format" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-618">The string representation of the value of this instance as specified by <paramref name="format" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-619">O `format` parâmetro pode conter a "G" ou "g", "D" ou "d", "X" ou "x" e "F" ou "f" cadeias de caracteres de formato (a cadeia de caracteres de formato não diferencia maiusculas de minúsculas).</span><span class="sxs-lookup"><span data-stu-id="474b1-619">The `format` parameter can contain the "G" or "g", "D" or "d", "X" or "x", and "F" or "f" format strings (the format string is not case-sensitive).</span></span> <span data-ttu-id="474b1-620">Se `format` é `null` ou uma cadeia de caracteres vazia (""), o especificador de formato geral ("G") é usado.</span><span class="sxs-lookup"><span data-stu-id="474b1-620">If `format` is `null` or an empty string (""), the general format specifier ("G") is used.</span></span> <span data-ttu-id="474b1-621">Para obter mais informações sobre as cadeias de caracteres de formato de enumeração e os valores de enumeração de formatação, consulte [cadeias de caracteres de formato de enumeração](~/docs/standard/base-types/enumeration-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="474b1-621">For more information about the enumeration format strings and formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="474b1-622">Para obter mais informações sobre formatação em geral, consulte [tipos de formatação](~/docs/standard/base-types/formatting-types.md).</span><span class="sxs-lookup"><span data-stu-id="474b1-622">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474b1-623">O exemplo a seguir demonstra como converter um valor enumerado em uma cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="474b1-623">The following example demonstrates how to convert an enumerated value to a string.</span></span>  
  
 [!code-cpp[enum.tostring#1](~/samples/snippets/cpp/VS_Snippets_CLR/enum.tostring/CPP/tostr.cpp#1)]
 [!code-csharp[enum.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/enum.tostring/CS/tostr.cs#1)]
 [!code-vb[enum.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enum.tostring/VB/tostr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="474b1-624"><paramref name="format" /> contém uma especificação inválida.</span><span class="sxs-lookup"><span data-stu-id="474b1-624"><paramref name="format" /> contains an invalid specification.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="474b1-625"><paramref name="format" /> igual a "X", mas o tipo de enumeração é desconhecido.</span><span class="sxs-lookup"><span data-stu-id="474b1-625"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="474b1-626">Se vários membros de enumeração têm o mesmo valor subjacente e você tentar recuperar a representação de cadeia de caracteres do nome de um membro de enumeração com base em seu valor subjacente, seu código não deve fazer suposições sobre qual nome do método será retornado.</span><span class="sxs-lookup"><span data-stu-id="474b1-626">If multiple enumeration members have the same underlying value and you attempt to retrieve the string representation of an enumeration member's name based on its underlying value, your code should not make any assumptions about which name the method will return.</span></span> <span data-ttu-id="474b1-627">Por exemplo, a enumeração a seguir define dois membros, <c>Shade.Gray</c> e <c>Shade.Grey</c>, que têm o mesmo valor subjacente.</span><span class="sxs-lookup"><span data-stu-id="474b1-627">For example, the following enumeration defines two members, <c>Shade.Gray</c> and <c>Shade.Grey</c>, that have the same underlying value.</span></span>  
  
 [!code-csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)]
 [!code-vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)]  
  
 <span data-ttu-id="474b1-628">A chamada de método a seguir tenta recuperar o nome de um membro do <c>tonalidade</c> enumeração cujo valor subjacente é 1.</span><span class="sxs-lookup"><span data-stu-id="474b1-628">The following method call attempts to retrieve the name of a member of the <c>Shade</c> enumeration whose underlying value is 1.</span></span> <span data-ttu-id="474b1-629">O método pode retornar "Cinza" ou "Cinza" e seu código não deve fazer suposições sobre qual cadeia de caracteres será retornada.</span><span class="sxs-lookup"><span data-stu-id="474b1-629">The method can return either "Gray" or "Grey", and your code should not make any assumptions about which string will be returned.</span></span>  
  
 [!code-csharp[System.Enum.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#3)]
 [!code-vb[System.Enum.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#3)]</para>
        </block>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
        <altmember cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString(String).")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="474b1-630">Uma especificação do formato.</span><span class="sxs-lookup"><span data-stu-id="474b1-630">A format specification.</span></span></param>
        <param name="provider"><span data-ttu-id="474b1-631">(Obsoleto.)</span><span class="sxs-lookup"><span data-stu-id="474b1-631">(Obsolete.)</span></span></param>
        <summary><span data-ttu-id="474b1-632">Essa sobrecarga de método é obsoleta; use <see cref="M:System.Enum.ToString(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-632">This method overload is obsolete; use <see cref="M:System.Enum.ToString(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="474b1-633">A representação da cadeia de caracteres do valor dessa instância conforme especificado por <paramref name="format" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-633">The string representation of the value of this instance as specified by <paramref name="format" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-634">O `format` parâmetro pode conter a "G" ou "g", "D" ou "d", "X" ou "x" e "F" ou "f" cadeias de caracteres de formato (a cadeia de caracteres de formato não diferencia maiusculas de minúsculas).</span><span class="sxs-lookup"><span data-stu-id="474b1-634">The `format` parameter can contain the "G" or "g", "D" or "d", "X" or "x", and "F" or "f" format strings (the format string is not case-sensitive).</span></span> <span data-ttu-id="474b1-635">Se `format` é `null` ou uma cadeia de caracteres vazia (""), o especificador de formato geral ("G") é usado.</span><span class="sxs-lookup"><span data-stu-id="474b1-635">If `format` is `null` or an empty string (""), the general format specifier ("G") is used.</span></span> <span data-ttu-id="474b1-636">Para obter mais informações sobre as cadeias de caracteres de formato de enumeração e os valores de enumeração de formatação, consulte [cadeias de caracteres de formato de enumeração](~/docs/standard/base-types/enumeration-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="474b1-636">For more information about the enumeration format strings and formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="474b1-637">Para obter mais informações sobre formatação em geral, consulte [tipos de formatação](~/docs/standard/base-types/formatting-types.md).</span><span class="sxs-lookup"><span data-stu-id="474b1-637">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="474b1-638">Especifique apenas `format`; o `provider` parâmetro está obsoleto.</span><span class="sxs-lookup"><span data-stu-id="474b1-638">Specify only `format`; the `provider` parameter is obsolete.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="474b1-639"><paramref name="format" /> não contém uma especificação de formato válida.</span><span class="sxs-lookup"><span data-stu-id="474b1-639"><paramref name="format" /> does not contain a valid format specification.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="474b1-640"><paramref name="format" /> igual a "X", mas o tipo de enumeração é desconhecido.</span><span class="sxs-lookup"><span data-stu-id="474b1-640"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span></span></exception>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="474b1-641">Converte a representação da cadeia de caracteres do nome ou do valor numérico de uma ou mais constantes enumeradas em um objeto enumerado equivalente.</span><span class="sxs-lookup"><span data-stu-id="474b1-641">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="474b1-642">O valor de retorno indica se a conversão foi bem-sucedida.</span><span class="sxs-lookup"><span data-stu-id="474b1-642">The return value indicates whether the conversion succeeded.</span></span></summary>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (Type enumType, string value, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(class System.Type enumType, string value, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse(System.Type,System.String,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (enumType As Type, value As String, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(Type ^ enumType, System::String ^ value, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="enumType">To be added.</param>
        <param name="value">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (Type enumType, string value, bool ignoreCase, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(class System.Type enumType, string value, bool ignoreCase, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse(System.Type,System.String,System.Boolean,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (enumType As Type, value As String, ignoreCase As Boolean, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(Type ^ enumType, System::String ^ value, bool ignoreCase, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="enumType">To be added.</param>
        <param name="value">To be added.</param>
        <param name="ignoreCase">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static bool TryParse&lt;TEnum&gt; (string value, out TEnum result) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, [out] !!TEnum&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse``1(System.String,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse(Of TEnum As Structure) (value As String, ByRef result As TEnum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static bool TryParse(System::String ^ value, [Runtime::InteropServices::Out] TEnum % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="result" Type="TEnum&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum"><span data-ttu-id="474b1-643">O tipo de enumeração para o qual converter <c>valor</c>.</span><span class="sxs-lookup"><span data-stu-id="474b1-643">The enumeration type to which to convert <c>value</c>.</span></span></typeparam>
        <param name="value"><span data-ttu-id="474b1-644">A representação de cadeia de caracteres do nome de enumeração ou do valor subjacente a ser convertido.</span><span class="sxs-lookup"><span data-stu-id="474b1-644">The string representation of the enumeration name or underlying value to convert.</span></span></param>
        <param name="result"><span data-ttu-id="474b1-645">Quando este método retorna, <c>resultado</c> contém um objeto do tipo <c>TEnum</c> cujo valor é representado por <c>valor</c> se a operação de análise for bem-sucedida.</span><span class="sxs-lookup"><span data-stu-id="474b1-645">When this method returns, <c>result</c> contains an object of type <c>TEnum</c> whose value is represented by <c>value</c> if the parse operation succeeds.</span></span> <span data-ttu-id="474b1-646">Se a operação de análise falhar, <c>resultado</c> conterá o valor padrão do tipo subjacente de <c>TEnum</c>.</span><span class="sxs-lookup"><span data-stu-id="474b1-646">If the parse operation fails, <c>result</c> contains the default value of the underlying type of <c>TEnum</c>.</span></span> <span data-ttu-id="474b1-647">Observe que esse valor não precisa ser membro da enumeração <c>TEnum</c>.</span><span class="sxs-lookup"><span data-stu-id="474b1-647">Note that this value need not be a member of the <c>TEnum</c> enumeration.</span></span> <span data-ttu-id="474b1-648">Este parâmetro é passado não inicializado.</span><span class="sxs-lookup"><span data-stu-id="474b1-648">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="474b1-649">Converte a representação da cadeia de caracteres do nome ou do valor numérico de uma ou mais constantes enumeradas em um objeto enumerado equivalente.</span><span class="sxs-lookup"><span data-stu-id="474b1-649">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="474b1-650">O valor de retorno indica se a conversão foi bem-sucedida.</span><span class="sxs-lookup"><span data-stu-id="474b1-650">The return value indicates whether the conversion succeeded.</span></span></summary>
        <returns>
          <span data-ttu-id="474b1-651"><see langword="true" /> caso o parâmetro <paramref name="value" /> tenha sido convertido com êxito; do contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-651"><see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-652"><xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> é idêntico de <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> método, exceto que, em vez de gerar uma exceção, ele retorna `false` se a conversão falhar.</span><span class="sxs-lookup"><span data-stu-id="474b1-652"><xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> is identical to the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method, except that instead of throwing an exception, it returns `false` if the conversion fails.</span></span> <span data-ttu-id="474b1-653">Elimina a necessidade de ao analisar a representação de cadeia de caracteres de um valor de enumeração de tratamento de exceção.</span><span class="sxs-lookup"><span data-stu-id="474b1-653">It eliminates the need for exception handling when parsing the string representation of an enumeration value.</span></span>  
  
 <span data-ttu-id="474b1-654">O `value` parâmetro contém a representação de cadeia de caracteres do valor subjacente de um membro de enumeração ou constante nomeada ou uma lista de constantes nomeadas ou subjacente de valores delimitados por vírgulas (,).</span><span class="sxs-lookup"><span data-stu-id="474b1-654">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,).</span></span> <span data-ttu-id="474b1-655">Se `value` inclui vários denominado constantes ou valores, um ou mais espaços em branco podem preceder ou execute cada valor, um nome ou uma vírgula na `value`.</span><span class="sxs-lookup"><span data-stu-id="474b1-655">If `value` includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="474b1-656">Se `value` é uma lista, `result` reflete o valor dos nomes especificados ou valores, combinados com um bit a bit de base `OR` operação.</span><span class="sxs-lookup"><span data-stu-id="474b1-656">If `value` is a list, `result` reflects the value of the specified names or underlying values combined with a bitwise `OR` operation.</span></span> <span data-ttu-id="474b1-657">Se `value` é a representação de cadeia de caracteres do nome de um valor de enumeração, a comparação de `value` com a enumeração de nomes diferencia maiusculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="474b1-657">If `value` is the string representation of the name of an enumeration value, the comparison of `value` with enumeration names is case-sensitive.</span></span>  
  
 <span data-ttu-id="474b1-658">Se `value` é um nome que não corresponde a uma constante nomeada de `TEnum`, o método retornará `false`.</span><span class="sxs-lookup"><span data-stu-id="474b1-658">If `value` is a name that does not correspond to a named constant of `TEnum`, the method returns `false`.</span></span> <span data-ttu-id="474b1-659">Se `value` é a representação de cadeia de caracteres de um número inteiro que representa um valor subjacente do `TEnum` enumeração, o método retorna um membro de enumeração cujo valor subjacente for `value` convertido em um tipo integral.</span><span class="sxs-lookup"><span data-stu-id="474b1-659">If `value` is the string representation of an integer that does not represent an underlying value of the `TEnum` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="474b1-660">Se esse comportamento é desejável, chame o <xref:System.Enum.IsDefined%2A> método para garantir que uma representação de cadeia de caracteres específica de um inteiro, na verdade, um membro de `TEnum`.</span><span class="sxs-lookup"><span data-stu-id="474b1-660">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `TEnum`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474b1-661">O exemplo a seguir define uma `Colors` enumeração, chamadas a <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> método para converter cadeias de caracteres para seus valores de enumeração correspondente e chama o <xref:System.Enum.IsDefined%2A> método para garantir a base de valores integrais específicos de valores no `Colors` enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-661">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tryparse/cs/tryparse1.cs#1)]
 [!code-vb[System.Enum.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tryparse/vb/tryparse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474b1-662"><paramref name="TEnum" /> não é um tipo de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-662"><paramref name="TEnum" /> is not an enumeration type.</span></span></exception>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TryParse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static bool TryParse&lt;TEnum&gt; (string value, bool ignoreCase, out TEnum result) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, bool ignoreCase, [out] !!TEnum&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse(Of TEnum As Structure) (value As String, ignoreCase As Boolean, ByRef result As TEnum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static bool TryParse(System::String ^ value, bool ignoreCase, [Runtime::InteropServices::Out] TEnum % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="result" Type="TEnum&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum"><span data-ttu-id="474b1-663">O tipo de enumeração para o qual converter <c>valor</c>.</span><span class="sxs-lookup"><span data-stu-id="474b1-663">The enumeration type to which to convert <c>value</c>.</span></span></typeparam>
        <param name="value"><span data-ttu-id="474b1-664">A representação de cadeia de caracteres do nome de enumeração ou do valor subjacente a ser convertido.</span><span class="sxs-lookup"><span data-stu-id="474b1-664">The string representation of the enumeration name or underlying value to convert.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="474b1-665"><see langword="true" /> para ignorar as maiúsculas e minúsculas, <see langword="false" /> considerar as maiúsculas e minúsculas.</span><span class="sxs-lookup"><span data-stu-id="474b1-665"><see langword="true" /> to ignore case; <see langword="false" /> to consider case.</span></span></param>
        <param name="result"><span data-ttu-id="474b1-666">Quando este método retorna, <c>resultado</c> contém um objeto do tipo <c>TEnum</c> cujo valor é representado por <c>valor</c> se a operação de análise for bem-sucedida.</span><span class="sxs-lookup"><span data-stu-id="474b1-666">When this method returns, <c>result</c> contains an object of type <c>TEnum</c> whose value is represented by <c>value</c> if the parse operation succeeds.</span></span> <span data-ttu-id="474b1-667">Se a operação de análise falhar, <c>resultado</c> conterá o valor padrão do tipo subjacente de <c>TEnum</c>.</span><span class="sxs-lookup"><span data-stu-id="474b1-667">If the parse operation fails, <c>result</c> contains the default value of the underlying type of <c>TEnum</c>.</span></span> <span data-ttu-id="474b1-668">Observe que esse valor não precisa ser membro da enumeração <c>TEnum</c>.</span><span class="sxs-lookup"><span data-stu-id="474b1-668">Note that this value need not be a member of the <c>TEnum</c> enumeration.</span></span> <span data-ttu-id="474b1-669">Este parâmetro é passado não inicializado.</span><span class="sxs-lookup"><span data-stu-id="474b1-669">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="474b1-670">Converte a representação da cadeia de caracteres do nome ou do valor numérico de uma ou mais constantes enumeradas em um objeto enumerado equivalente.</span><span class="sxs-lookup"><span data-stu-id="474b1-670">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="474b1-671">Um parâmetro especifica se a operação diferencia maiúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="474b1-671">A parameter specifies whether the operation is case-sensitive.</span></span> <span data-ttu-id="474b1-672">O valor de retorno indica se a conversão foi bem-sucedida.</span><span class="sxs-lookup"><span data-stu-id="474b1-672">The return value indicates whether the conversion succeeded.</span></span></summary>
        <returns>
          <span data-ttu-id="474b1-673"><see langword="true" /> caso o parâmetro <paramref name="value" /> tenha sido convertido com êxito; do contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="474b1-673"><see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474b1-674"><xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> é idêntico de <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> método, exceto que, em vez de gerar uma exceção, ele retorna `false` se a conversão falhar.</span><span class="sxs-lookup"><span data-stu-id="474b1-674"><xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> is identical to the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method, except that instead of throwing an exception, it returns `false` if the conversion fails.</span></span> <span data-ttu-id="474b1-675">Elimina a necessidade de ao analisar a representação de cadeia de caracteres de um valor de enumeração de tratamento de exceção.</span><span class="sxs-lookup"><span data-stu-id="474b1-675">It eliminates the need for exception handling when parsing the string representation of an enumeration value.</span></span>  
  
 <span data-ttu-id="474b1-676">O `value` parâmetro contém a representação de cadeia de caracteres do valor subjacente de um membro de enumeração ou constante nomeada ou uma lista de constantes nomeadas ou subjacente de valores delimitados por vírgulas (,).</span><span class="sxs-lookup"><span data-stu-id="474b1-676">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,).</span></span> <span data-ttu-id="474b1-677">Se `value` inclui vários denominado constantes ou valores, um ou mais espaços em branco podem preceder ou execute cada valor, um nome ou uma vírgula na `value`.</span><span class="sxs-lookup"><span data-stu-id="474b1-677">If `value` includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="474b1-678">Se `value` é uma lista, `result` reflete o valor dos nomes especificados ou valores, combinados com um bit a bit de base `OR` operação.</span><span class="sxs-lookup"><span data-stu-id="474b1-678">If `value` is a list, `result` reflects the value of the specified names or underlying values combined with a bitwise `OR` operation.</span></span> <span data-ttu-id="474b1-679">Se `value` é a representação de cadeia de caracteres do nome de um valor de enumeração, a comparação de `value` com a enumeração nomes depende do `ignoreCase` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="474b1-679">If `value` is the string representation of the name of an enumeration value, the comparison of `value` with enumeration names depends on the `ignoreCase` parameter.</span></span> <span data-ttu-id="474b1-680">Se `true`, a comparação diferencia maiusculas de minúsculas; se `false`, diferencia maiusculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="474b1-680">If `true`, the comparison is case-insensitive; if `false`, it is case-sensitive.</span></span>  
  
 <span data-ttu-id="474b1-681">Se `value` é um nome que não corresponde a uma constante nomeada de `TEnum`, o método retornará `false`.</span><span class="sxs-lookup"><span data-stu-id="474b1-681">If `value` is a name that does not correspond to a named constant of `TEnum`, the method returns `false`.</span></span> <span data-ttu-id="474b1-682">Se `value` é a representação de cadeia de caracteres de um número inteiro que representa um valor subjacente do `TEnum` enumeração, o método retorna um membro de enumeração cujo valor subjacente for `value` convertido em um tipo integral.</span><span class="sxs-lookup"><span data-stu-id="474b1-682">If `value` is the string representation of an integer that does not represent an underlying value of the `TEnum` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="474b1-683">Se esse comportamento é desejável, chame o <xref:System.Enum.IsDefined%2A> método para garantir que uma representação de cadeia de caracteres específica de um inteiro, na verdade, um membro de `TEnum`.</span><span class="sxs-lookup"><span data-stu-id="474b1-683">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `TEnum`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474b1-684">O exemplo a seguir define uma `Colors` enumeração, chamadas a <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> método para converter cadeias de caracteres para seus valores de enumeração correspondente e chama o <xref:System.Enum.IsDefined%2A> método para garantir a base de valores integrais específicos de valores no `Colors` enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-684">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span> <span data-ttu-id="474b1-685">O <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> método usa a comparação diferencia maiusculas de minúsculas ao tentar converter as representações de cadeia de caracteres de nome constantes para os valores de enumeração equivalente.</span><span class="sxs-lookup"><span data-stu-id="474b1-685">The <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> method uses case-insensitive comparison when trying to convert the string representations of named constants to their equivalent enumeration values.</span></span>  
  
 [!code-csharp[System.Enum.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tryparse/cs/tryparse2.cs#2)]
 [!code-vb[System.Enum.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tryparse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474b1-686"><paramref name="TEnum" /> não é um tipo de enumeração.</span><span class="sxs-lookup"><span data-stu-id="474b1-686"><paramref name="TEnum" /> is not an enumeration type.</span></span></exception>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String,System.Boolean)" />
      </Docs>
    </Member>
  </Members>
</Type>