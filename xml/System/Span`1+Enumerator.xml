<Type Name="Span&lt;T&gt;+Enumerator" FullName="System.Span&lt;T&gt;+Enumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="51216179ec9275cfab02d5dad557c501cd38affc" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58729769" /></Metadata><TypeSignature Language="C#" Value="public struct Span&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit Span`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Span`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure Span(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class Span&lt;T&gt;::Enumerator" />
  <TypeSignature Language="F#" Value="type Span&lt;'T&gt;.Enumerator = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fornece um enumerador para os elementos de um <see cref="T:System.Span`1" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

O c# [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) da linguagem c# e o [para cada um... Próxima](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) construção no Visual Basic oculta a complexidade de enumeradores. Em vez de manipular diretamente o enumerador, usando `foreach` ou `For Each...Next` é recomendado. 

Inicialmente, o enumerador está posicionado antes do primeiro elemento a <xref:System.Span%601>. Nesta posição, <xref:System.Span%601.Enumerator.Current> está indefinido. Você deve chamar <xref:System.Span%601.Enumerator.MoveNext%2A> para avançar o enumerador para o primeiro item a <xref:System.Span%601> antes de ler o valor de <xref:System.Span%601.Enumerator.Current>.

<xref:System.Span%601.Enumerator.Current> Retorna o mesmo valor até <xref:System.Span%601.Enumerator.MoveNext%2A> é chamado. <xref:System.Span%601.Enumerator.MoveNext%2A> define <xref:System.Span%601.Enumerator.Current> para o próximo item no <xref:System.Span%601>.

Se <xref:System.Span%601.Enumerator.MoveNext%2A> passa o final dos <xref:System.Span%601>, <xref:System.Span%601.Enumerator.MoveNext%2A> retorna `false`. Quando o enumerador está neste estado, chamadas subsequentes para <xref:System.Span%601.Enumerator.MoveNext%2A> também retornam `false` e <xref:System.Span%601.Enumerator.Current> é indefinido. Não é possível definir <xref:System.Span%601.Enumerator.Current> para o primeiro item no <xref:System.Span%601> novamente; você deve criar uma nova instância de enumerador em vez disso. 

O enumerador não tem acesso exclusivo para o <xref:System.Span%601>. Além disso, os dados subjacentes na qual se baseia o alcance também podem ser modificados. Portanto, enumerar ao longo de um período intrinsecamente não é um procedimento thread-safe. Para garantir acesso thread-safe durante a enumeração, você deve implementar sua própria sincronização. Por exemplo, o código a seguir tem uma condição de corrida. Ele não garante que o período será enumerado antes do `ClearContents` método é executado. Como resultado, a matriz subjacente é apagada durante a enumeração da extensão:

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/nosync/program.cs)]

Se você sincronizar o acesso à matriz de antes do período, como a versão revisada de enumerar os `EnumerateSpan` método faz, no exemplo a seguir, o `ClearContents` método não modifica dados span de subjacentes durante a enumeração. Observe que o exemplo bloqueia a matriz subjacente no qual a extensão se baseia.  

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/sync/program.cs#1)]

Ao contrário de algumas outras estruturas de enumerador no .NET, o <xref:System.Span%601.Enumerator>:

- Não implementa o <xref:System.Collections.IEnumerator> ou <xref:System.Collections.Generic.IEnumerator%601> interface. Isso ocorre porque <xref:System.Span%601.Enumerator> é um [ref struct](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type).

- Não inclui um `Reset` método, que pode definir o enumerador como sua posição inicial antes do primeiro elemento no período. (O <xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType> método deve ser implementado como parte da interface, mas a maioria das implementações lançarem uma exceção ou não fornecem nenhuma implementação.) 
 
      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Span`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T % Current { T % get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : " Usage="System.Span&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém uma referência ao item na posição atual do enumerador.</summary>
        <value>O elemento no <see cref="T:System.Span`1" /> na posição atual do enumerador.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

`Current` o não está definida em qualquer uma das seguintes condições: 

- Imediatamente depois que o enumerador é criado, o enumerador está posicionado antes do primeiro elemento no período. <xref:System.Span%601.Enumerator.MoveNext%2A> deve ser chamado para avançar o enumerador para o primeiro elemento da extensão antes de ler o valor de `Current`.

- A última chamada para <xref:System.Span%601.Enumerator.MoveNext%2A> retornou `false`, que indica o final do alcance. 

`Current` Retorna o mesmo valor até <xref:System.Span%601.Enumerator.MoveNext%2A> é chamado. <xref:System.Span%601.Enumerator.MoveNext%2A> define `Current` para o próximo item na extensão. 

      ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Avança o enumerador para o próximo item do <see cref="System.Span`1" />.</summary>
        <returns>`true` se o enumerador foi avançado com êxito para o próximo item; `false` se o final do intervalo foi passado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Depois que um enumerador é criado, ele está posicionado antes do primeiro elemento no intervalo de e a primeira chamada para `MoveNext` avança o enumerador para o primeiro item na extensão. 

Se `MoveNext` passa o final do alcance, `MoveNext` retorna `false`. Quando o enumerador está neste estado, chamadas subsequentes para `MoveNext` também retornar `false`.

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>