<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Tuple`1.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53044bd444e3a6c2f61f4d017885cb26a95364fae.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3044bd444e3a6c2f61f4d017885cb26a95364fae</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`1">
          <source>The type of the tuple's only component.</source>
          <target state="translated">O tipo do componente único da tupla.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Tuple`1">
          <source>Represents a 1-tuple, or singleton.</source>
          <target state="translated">Representa uma tupla de 1 ou unitária.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`1">
          <source>A tuple is a data structure that has a specific number and sequence of values.</source>
          <target state="translated">Tupla é uma estrutura de dados que possui um número específico e uma sequência de valores.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`1">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%601&gt;</ph> class represents a 1-tuple, or singleton, which is a tuple that has a single component.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Tuple%601&gt;</ph> classe representa uma tupla de 1 ou singleton, que é uma tupla que tem um único componente.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`1">
          <source>A singleton is used comparatively rarely in application development.</source>
          <target state="translated">Um singleton é usado raramente comparativamente no desenvolvimento de aplicativos.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`1">
          <source>You can instantiate a <ph id="ph1">&lt;xref:System.Tuple%601&gt;</ph> object by calling either the <ph id="ph2">&lt;xref:System.Tuple%601.%23ctor%2A&gt;</ph> constructor or the static <ph id="ph3">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Você pode instanciar uma <ph id="ph1">&lt;xref:System.Tuple%601&gt;</ph> objeto chamando o <ph id="ph2">&lt;xref:System.Tuple%601.%23ctor%2A&gt;</ph> construtor ou estático <ph id="ph3">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`1">
          <source>You can retrieve the value of the tuple's single component by using the read-only <ph id="ph1">&lt;xref:System.Tuple%601.Item1%2A&gt;</ph> instance property.</source>
          <target state="translated">Você pode recuperar o valor de componente único da tupla usando somente leitura <ph id="ph1">&lt;xref:System.Tuple%601.Item1%2A&gt;</ph> propriedade de instância.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.#ctor(`0)">
          <source>The value of the tuple's only component.</source>
          <target state="translated">O valor do único componente da tupla.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.#ctor(`0)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Tuple`1" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Tuple`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.#ctor(`0)">
          <source>You can also use the static <ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> method to instantiate a 1-tuple object without having to explicitly specify the type of its component.</source>
          <target state="translated">Você também pode usar o static <ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> método para instanciar um objeto de tupla de 1 sem a necessidade de especificar explicitamente o tipo do seu componente.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.#ctor(`0)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph> method to instantiate a 1-tuple whose component is of type <ph id="ph2">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">&lt;xref:System.Tuple.Create%2A&gt;</ph> método para instanciar uma tupla de 1 cujo componente é do tipo <ph id="ph2">&lt;xref:System.Int32&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.#ctor(`0)">
          <source>This is equivalent to the following call to the <ph id="ph1">&lt;xref:System.Tuple%601.%23ctor%2A&gt;</ph> class constructor.</source>
          <target state="translated">Isso é equivalente à seguinte chamada para o <ph id="ph1">&lt;xref:System.Tuple%601.%23ctor%2A&gt;</ph> construtor de classe.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.Equals(System.Object)">
          <source>The object to compare with this instance.</source>
          <target state="translated">O objeto a ser comparado com essa instância.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.Equals(System.Object)">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;see cref="T:System.Tuple`1" /&gt;</ph> object is equal to a specified object.</source>
          <target state="translated">Retorna um valor que indica se o objeto <ph id="ph1">&lt;see cref="T:System.Tuple`1" /&gt;</ph> atual é igual a um objeto especificado.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance is equal to the specified object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> caso a instância atual seja igual ao objeto especificado; do contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.Equals(System.Object)">
          <source>The <ph id="ph1">`obj`</ph> parameter is considered to be equal to the current instance under the following conditions:</source>
          <target state="translated">O parâmetro <ph id="ph1">`obj`</ph> deve ser considerado igual à instância atual nas seguintes circunstâncias:</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.Equals(System.Object)">
          <source>It is a <ph id="ph1">&lt;xref:System.Tuple%601&gt;</ph> object.</source>
          <target state="translated">É um <ph id="ph1">&lt;xref:System.Tuple%601&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.Equals(System.Object)">
          <source>Its single component is of the same type as the current instance.</source>
          <target state="translated">É o único componente do mesmo tipo que a instância atual.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.Equals(System.Object)">
          <source>Its single component is equal to that of the current instance.</source>
          <target state="translated">O único componente é igual da instância atual.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.Equals(System.Object)">
          <source>Equality is determined by the default object equality comparer for each component.</source>
          <target state="translated">A igualdade é determinada pela comparação de igualdade do objeto padrão para cada componente.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.Equals(System.Object)">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Tuple%601.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method to compare a <ph id="ph2">&lt;xref:System.Tuple%601&gt;</ph> object whose component is a <ph id="ph3">&lt;xref:System.Double&gt;</ph> value with three <ph id="ph4">&lt;xref:System.Tuple%601&gt;</ph> objects whose components have the following characteristics:</source>
          <target state="translated">A exemplo a seguir chama o <ph id="ph1">&lt;xref:System.Tuple%601.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> método para comparar um <ph id="ph2">&lt;xref:System.Tuple%601&gt;</ph> objeto cujo componente é um <ph id="ph3">&lt;xref:System.Double&gt;</ph> valor com três <ph id="ph4">&lt;xref:System.Tuple%601&gt;</ph> objetos cujos componentes têm as seguintes características:</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.Equals(System.Object)">
          <source>Same type (<ph id="ph1">&lt;xref:System.Double&gt;</ph>) and same value.</source>
          <target state="translated">Mesmo tipo (<ph id="ph1">&lt;xref:System.Double&gt;</ph>) e o mesmo valor.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.Equals(System.Object)">
          <source>Same type (<ph id="ph1">&lt;xref:System.Double&gt;</ph>), but different value.</source>
          <target state="translated">Mesmo tipo (<ph id="ph1">&lt;xref:System.Double&gt;</ph>), mas outro valor.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.Equals(System.Object)">
          <source>Different type (<ph id="ph1">&lt;xref:System.Single&gt;</ph>), but same value.</source>
          <target state="translated">Tipo diferente (<ph id="ph1">&lt;xref:System.Single&gt;</ph>), mas o mesmo valor.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.GetHashCode">
          <source>Returns the hash code for the current <ph id="ph1">&lt;see cref="T:System.Tuple`1" /&gt;</ph> object.</source>
          <target state="translated">Retorna o código hash para o objeto <ph id="ph1">&lt;see cref="T:System.Tuple`1" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">Um código de hash do inteiro assinado de 32 bits.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="P:System.Tuple`1.Item1">
          <source>Gets the value of the <ph id="ph1">&lt;see cref="T:System.Tuple`1" /&gt;</ph> object's single component.</source>
          <target state="translated">Obtém o valor do componente único do objeto <ph id="ph1">&lt;see cref="T:System.Tuple`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`1.Item1">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`1" /&gt;</ph> object's single component.</source>
          <target state="translated">O valor do componente único do objeto <ph id="ph1">&lt;see cref="T:System.Tuple`1" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`1.Item1">
          <source>You can determine the type of the <ph id="ph1">&lt;xref:System.Tuple%601.Item1%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">Você pode determinar o tipo do <ph id="ph1">&lt;xref:System.Tuple%601.Item1%2A&gt;</ph> componente em uma de duas maneiras:</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`1.Item1">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%601.Item1%2A&gt;</ph> property.</source>
          <target state="translated">Chamando o método <ph id="ph1">`GetType`</ph> no valor retornado pela propriedade <ph id="ph2">&lt;xref:System.Tuple%601.Item1%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`1.Item1">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%601&gt;</ph> object, and retrieving the first element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Recuperando o objeto <ph id="ph1">&lt;xref:System.Type&gt;</ph> que representa o objeto <ph id="ph2">&lt;xref:System.Tuple%601&gt;</ph> e recuperando o primeiro elemento da matriz que é retornada pelo método <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`1.Item1">
          <source>The example illustrates both approaches.</source>
          <target state="translated">O exemplo ilustra as duas abordagens.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`1.Item1">
          <source>The following example displays information about two singletons and their components.</source>
          <target state="translated">O exemplo a seguir exibe informações sobre duas singletons e seus componentes.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>An object to compare with the current instance.</source>
          <target state="translated">Um objeto a ser comparado com a instância atual.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>An object that provides custom rules for comparison.</source>
          <target state="translated">Um objeto que fornece regras personalizadas para comparação.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Compares the current <ph id="ph1">&lt;see cref="T:System.Tuple`1" /&gt;</ph> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</source>
          <target state="translated">Compara o objeto <ph id="ph1">&lt;see cref="T:System.Tuple`1" /&gt;</ph> atual com um objeto especificado usando um comparador especificado e retorna um inteiro que indica se o objeto atual está antes, depois ou na mesma posição do objeto especificado na ordem de classificação.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>A signed integer that indicates the relative position of this instance and <ph id="ph1">&lt;paramref name="other" /&gt;</ph> in the sort order, as shown in the following table.</source>
          <target state="translated">Um inteiro assinado que indica a posição relativa dessa instância e <ph id="ph1">&lt;paramref name="other" /&gt;</ph> na ordem de classificação, conforme mostrado na tabela a seguir.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Valor</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Description</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Descrição</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A negative integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Um inteiro negativo</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Esta instância precede <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance and <ph id="ph3">&lt;paramref name="other" /&gt;</ph> have the same position in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Esta instância e <ph id="ph3">&lt;paramref name="other" /&gt;</ph> têm a mesma posição na ordem de classificação.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A positive integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Um inteiro positivo</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Esta instância segue <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Although this method can be called directly, it is most commonly called by collection sorting methods that include <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> parameters to order the members of a collection.</source>
          <target state="translated">Embora esse método pode ser chamado diretamente, geralmente é chamado pela coleção de métodos que incluem a classificação <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> parâmetros para ordenar os membros de uma coleção.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>For example, it is called by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph> method of a <ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph> object that is instantiated by using the <ph id="ph4">&lt;xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> constructor.</source>
          <target state="translated">Por exemplo, ele é chamado pelo método <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> e pelo método <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph> de um objeto <ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph> que é instanciado usando-se o construtor <ph id="ph4">&lt;xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%601.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph> method is intended for use in sorting operations.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Tuple%601.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph> método destina-se ao uso em operações de classificação.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</source>
          <target state="translated">Ele não deve ser usado quando a finalidade principal de uma comparação é determinar se dois objetos são iguais.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>To determine whether two objects are equal, call the <ph id="ph1">&lt;xref:System.Tuple%601.System%23Collections%23IStructuralEquatable%23Equals%2A&gt;</ph> method.</source>
          <target state="translated">Para determinar se dois objetos são iguais, chame o <ph id="ph1">&lt;xref:System.Tuple%601.System%23Collections%23IStructuralEquatable%23Equals%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The following example defines a generic class named <ph id="ph1">`DescendingComparer`</ph> that implements the <ph id="ph2">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> interface.</source>
          <target state="translated">O exemplo a seguir define uma classe genérica denominada <ph id="ph1">`DescendingComparer`</ph> que implementa o <ph id="ph2">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">`DescendingComparer`</ph> sorts objects in descending rather than ascending order by reversing the value returned by the default comparer for a particular type.</source>
          <target state="translated"><ph id="ph1">`DescendingComparer`</ph> classifica os objetos em ordem decrescente, em vez de ordem crescente por Revertendo o valor retornado pelo comparador padrão para um tipo específico.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>An instance of the generic <ph id="ph1">`DescendingComparer`</ph> class is then passed to the <ph id="ph2">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> method to sort an array of <ph id="ph3">&lt;xref:System.Tuple%601&gt;</ph> objects in descending order.</source>
          <target state="translated">Uma instância do genérica <ph id="ph1">`DescendingComparer`</ph> classe é então passada para o <ph id="ph2">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> método para classificar uma matriz de <ph id="ph3">&lt;xref:System.Tuple%601&gt;</ph> objetos em ordem decrescente.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Note that the example does not directly call the <ph id="ph1">&lt;xref:System.Tuple%601.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph> method.</source>
          <target state="translated">Observe que o exemplo não chama diretamente o <ph id="ph1">&lt;xref:System.Tuple%601.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>This method is called implicitly by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> method for each element in the array.</source>
          <target state="translated">Este método é chamado implicitamente pelo método <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> para cada elemento na matriz.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;paramref name="other" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Tuple`1" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="other" /&gt;</ph> não é um objeto <ph id="ph2">&lt;see cref="T:System.Tuple`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The object to compare with this instance.</source>
          <target state="translated">O objeto a ser comparado com essa instância.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>An object that defines the method to use to evaluate whether the two objects are equal.</source>
          <target state="translated">Um objeto que define o método a ser usado para avaliar se dois objetos são iguais.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;see cref="T:System.Tuple`1" /&gt;</ph> object is equal to a specified object based on a specified comparison method.</source>
          <target state="translated">Retorna um valor que indica se o objeto <ph id="ph1">&lt;see cref="T:System.Tuple`1" /&gt;</ph> atual é igual ao objeto especificado com base em um determinado método de comparação.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance is equal to the specified object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> caso a instância atual seja igual ao objeto especificado; do contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Este membro é uma implementação do membro de interface explícita.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.</source>
          <target state="translated">Ele só pode ser usado quando a instância de <ph id="ph1">&lt;xref:System.Tuple%601&gt;</ph> é convertida em uma interface de <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementation is called only if <ph id="ph2">`other`</ph> is not <ph id="ph3">`null`</ph>, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <ph id="ph4">&lt;xref:System.Tuple%601&gt;</ph> object whose single component is of the same type as the current instance.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementação é chamada somente se <ph id="ph2">`other`</ph> não é <ph id="ph3">`null`</ph>, e se ele pode ser com êxito cast (em c#) ou convertido (no Visual Basic) em um <ph id="ph4">&lt;xref:System.Tuple%601&gt;</ph> cujo único componente é do mesmo tipo que a instância atual do objeto.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The method is passed the <ph id="ph1">&lt;xref:System.Tuple%601.Item1%2A&gt;</ph> component of the current instance and the <ph id="ph2">&lt;xref:System.Tuple%601.Item1%2A&gt;</ph> component of the <ph id="ph3">&lt;xref:System.Tuple%601&gt;</ph> object represented by the <ph id="ph4">`other`</ph> parameter.</source>
          <target state="translated">É passado para o método de <ph id="ph1">&lt;xref:System.Tuple%601.Item1%2A&gt;</ph> componente da instância atual e o <ph id="ph2">&lt;xref:System.Tuple%601.Item1%2A&gt;</ph> componente do <ph id="ph3">&lt;xref:System.Tuple%601&gt;</ph> objeto representado pelo <ph id="ph4">`other`</ph> parâmetro.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The following example defines an <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer&gt;</ph> implementation that considers two floating-point values to be equal if they are approximately equal to each other (that is, if one value is within .01 percent of the other).</source>
          <target state="translated">O exemplo a seguir define um <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer&gt;</ph> implementação que considera dois valores de ponto flutuante são iguais se forem aproximadamente iguais ao outro (ou seja, se um valor está dentro de.01% das outras).</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>An object whose <ph id="ph1">&lt;see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /&gt;</ph> method calculates the hash code of the current <ph id="ph2">&lt;see cref="T:System.Tuple`1" /&gt;</ph> object.</source>
          <target state="translated">Um objeto cujo método <ph id="ph1">&lt;see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /&gt;</ph> calcula o código hash do objeto <ph id="ph2">&lt;see cref="T:System.Tuple`1" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>Calculates the hash code for the current <ph id="ph1">&lt;see cref="T:System.Tuple`1" /&gt;</ph> object by using a specified computation method.</source>
          <target state="translated">Calcula o código hash para o objeto <ph id="ph1">&lt;see cref="T:System.Tuple`1" /&gt;</ph> atual usando um método de computação especificado.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">Um código de hash do inteiro assinado de 32 bits.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Este membro é uma implementação do membro de interface explícita.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.</source>
          <target state="translated">Ele só pode ser usado quando a instância de <ph id="ph1">&lt;xref:System.Tuple%601&gt;</ph> é convertida em uma interface de <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>The method simply wraps a call to the <ph id="ph1">`comparer`</ph> object's <ph id="ph2">&lt;xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">O método simplesmente encapsula uma chamada para o objeto <ph id="ph1">`comparer`</ph> na implementação <ph id="ph2">&lt;xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>The algorithm used to compute the hash code should return the same hash code for two <ph id="ph1">&lt;xref:System.Tuple%601&gt;</ph> objects that are considered to be equal.</source>
          <target state="translated">O algoritmo usado para calcular o código hash deve retornar o mesmo código hash para duas <ph id="ph1">&lt;xref:System.Tuple%601&gt;</ph> objetos que são considerados iguais.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
          <source>An object to compare with the current instance.</source>
          <target state="translated">Um objeto a ser comparado com a instância atual.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
          <source>Compares the current <ph id="ph1">&lt;see cref="T:System.Tuple`1" /&gt;</ph> object to a specified object, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</source>
          <target state="translated">Compara o objeto <ph id="ph1">&lt;see cref="T:System.Tuple`1" /&gt;</ph> atual a um objeto especificado e retorna um inteiro que indica se o objeto atual está antes, depois ou na mesma posição que o objeto especificado na ordem de classificação.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
          <source>A signed integer that indicates the relative position of this instance and <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> in the sort order, as shown in the following table.</source>
          <target state="translated">Um inteiro assinado que indica a posição relativa dessa instância e <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> na ordem de classificação, conforme mostrado na tabela a seguir.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Valor</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Description</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Descrição</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A negative integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Um inteiro negativo</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Esta instância precede <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance and <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> have the same position in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Esta instância e <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> têm a mesma posição na ordem de classificação.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A positive integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Um inteiro positivo</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Esta instância segue <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Este membro é uma implementação do membro de interface explícita.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">Ele só pode ser usado quando a instância de <ph id="ph1">&lt;xref:System.Tuple%601&gt;</ph> é convertida em uma interface de <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
          <source>This method provides the <ph id="ph1">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType&gt;</ph> implementation for the <ph id="ph2">&lt;xref:System.Tuple%601&gt;</ph> class.</source>
          <target state="translated">Esse método fornece o <ph id="ph1">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType&gt;</ph> implementação para o <ph id="ph2">&lt;xref:System.Tuple%601&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
          <source>Although the method can be called directly, it is most commonly called by the default overloads of collection sorting methods, such as <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType&gt;</ph>, to order the members of a collection.</source>
          <target state="translated">Embora possa ser chamado diretamente, o método é mais comumente chamado pelas sobrecargas padrão de métodos de classificação da coleção, como <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph> e <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType&gt;</ph>, para classificar os membros de uma coleção.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%601.System%23IComparable%23CompareTo%2A?displayProperty=nameWithType&gt;</ph> method is intended for use in sorting operations.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Tuple%601.System%23IComparable%23CompareTo%2A?displayProperty=nameWithType&gt;</ph> método destina-se ao uso em operações de classificação.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
          <source>It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</source>
          <target state="translated">Ele não deve ser usado quando a finalidade principal de uma comparação é determinar se dois objetos são iguais.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
          <source>To determine whether two objects are equal, call the <ph id="ph1">&lt;xref:System.Tuple%601.Equals%2A&gt;</ph> method.</source>
          <target state="translated">Para determinar se dois objetos são iguais, chame o <ph id="ph1">&lt;xref:System.Tuple%601.Equals%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%601.System%23IComparable%23CompareTo%2A?displayProperty=nameWithType&gt;</ph> method uses the default object  comparer.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Tuple%601.System%23IComparable%23CompareTo%2A?displayProperty=nameWithType&gt;</ph> método usa o comparador de objeto padrão.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
          <source>The following example creates an array of singletons whose component is a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir cria uma matriz de singletons cujo componente é um <ph id="ph1">&lt;xref:System.Double&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
          <source>It displays the value of each tuple component in unsorted order, sorts the array, and then displays the values in sorted order.</source>
          <target state="translated">Exibe o valor de cada componente de tupla na ordem não classificado, classifica a matriz e, em seguida, exibe os valores em ordem classificada.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
          <source>Note that the example does not directly call the <ph id="ph1">&lt;xref:System.Tuple%601.System%23IComparable%23CompareTo%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Observe que o exemplo não chama diretamente o <ph id="ph1">&lt;xref:System.Tuple%601.System%23IComparable%23CompareTo%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
          <source>This method is called implicitly by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29&gt;</ph> method for each element in the array.</source>
          <target state="translated">Este método é chamado implicitamente pelo método <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29&gt;</ph> para cada elemento na matriz.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Tuple`1" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> não é um objeto <ph id="ph2">&lt;see cref="T:System.Tuple`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="P:System.Tuple`1.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The index of the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element.</source>
          <target state="translated">O índice do elemento <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="P:System.Tuple`1.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> must be 0.</source>
          <target state="translated">O <bpt id="p1">&lt;c&gt;</bpt>índice<ept id="p1">&lt;/c&gt;</ept> deve ser 0.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="P:System.Tuple`1.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>Gets the value of the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element.</source>
          <target state="translated">Obtém o valor do elemento <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`1.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The value of the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element.</source>
          <target state="translated">O valor do elemento <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`1.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%601.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType&gt;</ph> property is an explicit interface implementation.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Tuple%601.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType&gt;</ph> propriedade é uma implementação de interface explícita.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`1.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>To call it, you must cast or convert the <ph id="ph1">&lt;xref:System.Tuple%601&gt;</ph> object to an <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> interface object.</source>
          <target state="translated">Para chamá-lo, você deve lançar ou converter o <ph id="ph1">&lt;xref:System.Tuple%601&gt;</ph> o objeto para um <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> objeto de interface.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="P:System.Tuple`1.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0 or greater than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é menor que 0 ou maior que 0.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="P:System.Tuple`1.System#Runtime#CompilerServices#ITuple#Length">
          <source>Gets the number of elements in the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</source>
          <target state="translated">Obtém o número de elementos no <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`1.System#Runtime#CompilerServices#ITuple#Length">
          <source>1, the number of elements in a <ph id="ph1">&lt;see cref="T:System.Tuple`1" /&gt;</ph> object.</source>
          <target state="translated">1, o número de elementos em um objeto <ph id="ph1">&lt;see cref="T:System.Tuple`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`1.System#Runtime#CompilerServices#ITuple#Length">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%601.System%23Runtime%23CompilerServices%23ITuple%23Length%2A&gt;</ph> property is an explicit interface implementation.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Tuple%601.System%23Runtime%23CompilerServices%23ITuple%23Length%2A&gt;</ph> propriedade é uma implementação de interface explícita.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`1.System#Runtime#CompilerServices#ITuple#Length">
          <source>To call it, you must cast or convert the <ph id="ph1">&lt;xref:System.Tuple%601&gt;</ph> object to an <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> interface object.</source>
          <target state="translated">Para chamá-lo, você deve lançar ou converter o <ph id="ph1">&lt;xref:System.Tuple%601&gt;</ph> o objeto para um <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> objeto de interface.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.ToString">
          <source>Returns a string that represents the value of this <ph id="ph1">&lt;see cref="T:System.Tuple`1" /&gt;</ph> instance.</source>
          <target state="translated">Retorna uma cadeia de caracteres que representa o valor desta instância <ph id="ph1">&lt;see cref="T:System.Tuple`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Tuple`1.ToString">
          <source>The string representation of this <ph id="ph1">&lt;see cref="T:System.Tuple`1" /&gt;</ph> object.</source>
          <target state="translated">A representação de cadeia de caracteres desse objeto <ph id="ph1">&lt;see cref="T:System.Tuple`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.ToString">
          <source>The string returned by this method takes the form (<bpt id="p1">*</bpt>Item1<ept id="p1">*</ept>), where <bpt id="p2">*</bpt>Item1<ept id="p2">*</ept> represents the value of the <ph id="ph1">&lt;xref:System.Tuple%601.Item1%2A&gt;</ph> property.</source>
          <target state="translated">A cadeia de caracteres retornada por este método assume a forma (<bpt id="p1">*</bpt>Item1<ept id="p1">*</ept>), onde <bpt id="p2">*</bpt>Item1<ept id="p2">*</ept> representa o valor da <ph id="ph1">&lt;xref:System.Tuple%601.Item1%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.ToString">
          <source>If the value of <ph id="ph1">&lt;xref:System.Tuple%601.Item1%2A&gt;</ph> is <ph id="ph2">`null`</ph>, it is represented as <ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Se o valor de <ph id="ph1">&lt;xref:System.Tuple%601.Item1%2A&gt;</ph> é <ph id="ph2">`null`</ph>, ela é representada como <ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`1.ToString">
          <source>The following example illustrates the <ph id="ph1">&lt;xref:System.Tuple%601.ToString%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir ilustra o <ph id="ph1">&lt;xref:System.Tuple%601.ToString%2A&gt;</ph> método.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>