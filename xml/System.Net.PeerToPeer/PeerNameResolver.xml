<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="PeerNameResolver.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac58fbb46569ea8c3e2c36d884eb360682eca12794a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8fbb46569ea8c3e2c36d884eb360682eca12794a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>Specifies the values that resolve a <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph> using the PNRP Namespace Provider API protocol.</source>
          <target state="translated">Especifica os valores que resolvem um <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> para um <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph> usando o protocolo da API do Provedor de Namespace PNRP.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>A <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameRecord&gt;</ph> which contains all the information for the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph> that was published in the <ph id="ph3">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> or cloud(s) that were queried during the resolve process.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameRecord&gt;</ph> que contém todas as informações para o <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph> que foi publicado no <ph id="ph3">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> ou cloud(s) que foram consultados durante o processo de resolução.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.#ctor">
          <source>Initializes a new default instance of the <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameResolver" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância padrão da classe <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameResolver" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.#ctor">
          <source>After successfully resolving a <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph>, the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameRecord&gt;</ph> contains all the information for the specified <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A&gt;</ph> that was published in the cloud(s) that were queried during the <ph id="ph4">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> operation.</source>
          <target state="translated">Depois de resolver com êxito um <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph>, o <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameRecord&gt;</ph> contém todas as informações de especificado <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A&gt;</ph> que foram publicada a cloud(s) foram consultados durante a <ph id="ph4">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> operação.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted(System.Net.PeerToPeer.ResolveCompletedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.ResolveCompletedEventArgs" /&gt;</ph> object that contains the data returned by the <ph id="ph2">&lt;see cref="E:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted" /&gt;</ph> event.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.ResolveCompletedEventArgs" /&gt;</ph> que contém os dados retornados pelo evento <ph id="ph2">&lt;see cref="E:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted(System.Net.PeerToPeer.ResolveCompletedEventArgs)">
          <source>Returns peer resolution data after the <ph id="ph1">&lt;see cref="E:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted" /&gt;</ph> event is raised.</source>
          <target state="translated">Retorna dados de resolução de pares depois que o evento <ph id="ph1">&lt;see cref="E:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted" /&gt;</ph> é acionado.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted(System.Net.PeerToPeer.ResolveCompletedEventArgs)">
          <source>This method is an asynchronous callback used to process peer name resolution data after peer resolution has completed.</source>
          <target state="translated">Esse método é um retorno de chamada assíncrono usado para processar os dados de resolução de nome de ponto a ponto, após a resolução de ponto a ponto.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted(System.Net.PeerToPeer.ResolveCompletedEventArgs)">
          <source>Derived types can override this method to perform additional tasks when the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event is raised by the peer resolver object.</source>
          <target state="translated">Tipos derivados podem substituir esse método para executar mais tarefas quando a <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> é gerado pelo objeto resolvedor peer.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged(System.Net.PeerToPeer.ResolveProgressChangedEventArgs)">
          <source><ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.ResolveProgressChangedEventArgs" /&gt;</ph> object that contains peer name resolution progress information returned by the <ph id="ph2">&lt;see cref="E:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged" /&gt;</ph> event.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.ResolveProgressChangedEventArgs" /&gt;</ph> que contém informações de progresso da resolução de nomes de par retornadas pelo evento <ph id="ph2">&lt;see cref="E:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged(System.Net.PeerToPeer.ResolveProgressChangedEventArgs)">
          <source>Returns peer resolution progress data when the <ph id="ph1">&lt;see cref="E:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged" /&gt;</ph> event is raised.</source>
          <target state="translated">Retorna dados de andamento da resolução de pares quando o <ph id="ph1">&lt;see cref="E:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged" /&gt;</ph> é acionado.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged(System.Net.PeerToPeer.ResolveProgressChangedEventArgs)">
          <source>This method is an asynchronous callback used to process peer resolution data after peer resolution progress has been requested.</source>
          <target state="translated">Esse método é um retorno de chamada assíncrono usado para processar os dados de resolução de pares após a solicitação do progresso de resolução de ponto a ponto.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged(System.Net.PeerToPeer.ResolveProgressChangedEventArgs)">
          <source>Derived types can override this method to perform additional tasks when the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> event occurs.</source>
          <target state="translated">Tipos derivados podem substituir esse método para executar mais tarefas quando a <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> evento ocorre.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged(System.Net.PeerToPeer.ResolveProgressChangedEventArgs)">
          <source>When overriding this method in a derived type, be sure to call the base type's <ph id="ph1">&lt;see cref="M:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged(System.Net.PeerToPeer.ResolveProgressChangedEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">Ao substituir este método em um tipo derivado, certifique-se de chamar o tipo base <ph id="ph1">&lt;see cref="M:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged(System.Net.PeerToPeer.ResolveProgressChangedEventArgs)" /&gt;</ph> método para que registrado delegados receber o evento.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>Resolves a <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> object to a <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph> using the PNRP protocol.</source>
          <target state="translated">Resolve um objeto <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> para um <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph> usando o protocolo PNRP.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>This method associates peer names to clouds.</source>
          <target state="translated">Esse método associa nomes de ponto a ponto para nuvens.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>Calling the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt;</ph> method is similar to calling the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method for each peer name record in the <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameRecordCollection&gt;</ph>.</source>
          <target state="translated">Chamando o <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt;</ph> método é semelhante a chamar o <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> método para cada registro de nome de ponto a ponto no <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameRecordCollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>Note that using the Resolve method on an individual peer name record does not invalidate resolving multiple peer names.</source>
          <target state="translated">Observe que usando o método de resolução em um registro de nome de ponto a ponto individuais não invalidará resolver vários nomes de ponto a ponto.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>For every <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method, there is an equivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method.</source>
          <target state="translated">Para cada <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> método, há um equivalente <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>They are identical in the parameters they are passed, except that the ResolveAsync method includes a system token in its parameter list for asynchronous event handling.</source>
          <target state="translated">Eles são idênticos nos parâmetros, que eles são passados, exceto que o método ResolveAsync inclui um token do sistema em sua lista de parâmetro para manipulação de eventos assíncrono.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>If the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> parameter is not supplied, the method uses the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> shortcut to fill in cloud parameters.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> parâmetro não for fornecido, o método usa o <ph id="ph2">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> atalho para preencher os parâmetros de nuvem.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>If the <ph id="ph1">`maxRecords`</ph> parameter is missing, the default value of zero causes an <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception to be thrown.</source>
          <target state="translated">Se o <ph id="ph1">`maxRecords`</ph> parâmetro estiver ausente, o valor padrão de zero faz com que um <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exceção seja lançada.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>This event will also be raised if the resolve operation completes in error or is canceled.</source>
          <target state="translated">Esse evento também será gerado se a operação resolver é concluído em erro ou for cancelada.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> to resolve.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> a ser resolvido.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>Resolves the specified <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> in all clouds known to the calling peer.</source>
          <target state="translated">Resolve o <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> especificado em todas as nuvens conhecidas para o par de chamada.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecordCollection" /&gt;</ph> that contains all peer name records (represented as <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph> objects) associated with the specified peer name.</source>
          <target state="translated">Uma <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecordCollection" /&gt;</ph> que contém todos os registros de nomes de par (representados como objetos <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph>) associados ao nome de par especificado.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>For unsecured peer names, the same <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> can be registered by different users in the same <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph>, and associated with different endpoints.</source>
          <target state="translated">Para nomes de par não seguros, o mesmo <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> pode ser registrado por usuários diferentes na mesma <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph> e associado a diferentes pontos de extremidade.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>This method associates a peer name to clouds.</source>
          <target state="translated">Esse método associa um nome de ponto a ponto para nuvens.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>All clouds are queried for the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph>.</source>
          <target state="translated">Todas as nuvens são consultadas para o <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>If the peer name cannot be resolved or is <ph id="ph1">`null`</ph>, an <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> is thrown.</source>
          <target state="translated">Se o nome de ponto a ponto não pode ser resolvido ou é <ph id="ph1">`null`</ph>, uma <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> é gerada.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.</source>
          <target state="translated">Para nomes de ponto a ponto segura, o mesmo nome pode ser registrado (e associado a diferentes pontos de extremidade) por diferentes pares na mesma nuvem.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>Calling the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt;</ph> method is similar to calling the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method for each peer name record in the <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameRecordCollection&gt;</ph>.</source>
          <target state="translated">Chamando o <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt;</ph> método é semelhante a chamar o <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> método para cada registro de nome de ponto a ponto no <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameRecordCollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>Note that using the Resolve method on an individual peer name record does not invalidate resolving multiple peer names.</source>
          <target state="translated">Observe que usando o método de resolução em um registro de nome de ponto a ponto individuais não invalidará resolver vários nomes de ponto a ponto.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>For every <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method, there is an equivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method.</source>
          <target state="translated">Para cada <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> método, há um equivalente <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling.</source>
          <target state="translated">Suas listas de parâmetros são idênticas, exceto que o método ResolveAsync inclui um token do sistema para manipulação de eventos assíncrono.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>If the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> parameter is not supplied, the method uses the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> shortcut to fill in cloud parameters.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> parâmetro não for fornecido, o método usa o <ph id="ph2">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> atalho para preencher os parâmetros de nuvem.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>The <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event will be raised if the resolve operation completes in error or is canceled.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> evento será gerado se a operação resolver é concluído em erro ou for cancelada.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>The following code example illustrates how to resolve a <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph> published in any <ph id="ph2">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph>.</source>
          <target state="translated">O exemplo de código a seguir ilustra como resolver um <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph> publicados em qualquer <ph id="ph2">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>The <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> parameter is set to <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O parâmetro <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> é definido como <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>The peer name specified cannot be resolved.</source>
          <target state="translated">O nome do par especificado não pode ser resolvido.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> to resolve.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> a ser resolvido.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>The maximum number of <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph> objects to obtain from all <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph> objects for the supplied <bpt id="p1">&lt;c&gt;</bpt>peerName<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O número máximo de objetos <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph> a ser obtido de todos os objetos <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph> para o <bpt id="p1">&lt;c&gt;</bpt>peerName<ept id="p1">&lt;/c&gt;</ept> fornecido.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>Resolves the specified peer name in all clouds known to the calling peer, returning no more than the specified number of <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph> objects.</source>
          <target state="translated">Resolve o nome do par especificado em todas as nuvens conhecidas para o par de chamada, retornando não mais do que o número especificado de objetos <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecordCollection" /&gt;</ph> whose size is less than or equal to <ph id="ph2">&lt;paramref name="maxRecords" /&gt;</ph> entries.</source>
          <target state="translated">Uma <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecordCollection" /&gt;</ph> cujo tamanho é menor ou igual a entradas <ph id="ph2">&lt;paramref name="maxRecords" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>This collection contains peer name records associated with the <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> that was resolved.</source>
          <target state="translated">Esta coleção contém registros de nome de par associados ao <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> que foi resolvido.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>This method associates a peer name to clouds.</source>
          <target state="translated">Esse método associa um nome de ponto a ponto para nuvens.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>All clouds are queried for the peer name.</source>
          <target state="translated">Todas as nuvens são consultadas para o nome do par.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>For unsecured peer names, the same peer name can be registered by different users in the same <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph>, and associated with different endpoints.</source>
          <target state="translated">Para nomes de ponto a ponto segura, o mesmo nome de ponto a ponto pode ser registrado por usuários diferentes no mesmo <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph>e associados a diferentes pontos de extremidade.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>If the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph> cannot be resolved (for example, the peer name is not published) an <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> is thrown.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph> não pode ser resolvido (por exemplo, o nome de ponto a ponto não está publicado) um <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> é gerada.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>For every <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method, there is an equivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method.</source>
          <target state="translated">Para cada <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> método, há um equivalente <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling.</source>
          <target state="translated">Suas listas de parâmetros são idênticas, exceto que o método ResolveAsync inclui um token do sistema para manipulação de eventos assíncrono.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event will be raised if the resolve operation completes in error or is canceled.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> evento será gerado se a operação resolver é concluído em erro ou for cancelada.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> parameter is set to <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O parâmetro <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> é definido como <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="maxRecords" /&gt;</ph> parameter is less than or equal to zero.</source>
          <target state="translated">O parâmetro <ph id="ph1">&lt;paramref name="maxRecords" /&gt;</ph> é menor ou igual a zero.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>The supplied peer name cannot be resolved.</source>
          <target state="translated">O nome do par fornecido não pode ser resolvido.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> to resolve.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> a ser resolvido.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph> in which to resolve the peer name.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph> na qual resolver o nome do par.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)">
          <source>Resolves the specified <ph id="ph1">&lt;see cref="P:System.Net.PeerToPeer.PeerNameRecord.PeerName" /&gt;</ph> in the specified <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph>.</source>
          <target state="translated">Resolve o <ph id="ph1">&lt;see cref="P:System.Net.PeerToPeer.PeerNameRecord.PeerName" /&gt;</ph> especificado na <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph> especificada.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)">
          <source><ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecordCollection" /&gt;</ph> that contains all peer name records (represented as <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph> objects) associated with the specified peer name.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecordCollection" /&gt;</ph> que contém todos os registros de nomes de par (representados como objetos <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph>) associados ao nome de par especificado.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)">
          <source>For unsecured peer names, the same <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> can be registered by different users in the same <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph>, and associated with different endpoints.</source>
          <target state="translated">Para nomes de par não seguros, o mesmo <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> pode ser registrado por usuários diferentes na mesma <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph> e associado a diferentes pontos de extremidade.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)">
          <source>If the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph> cannot be resolved (i.e., the peer name is not published) an <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> is thrown.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph> não pode ser resolvido (ou seja, o nome do par não está publicado) um <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> é gerada.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)">
          <source>For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.</source>
          <target state="translated">Para nomes de ponto a ponto segura, o mesmo nome pode ser registrado (e associado a diferentes pontos de extremidade) por diferentes pares na mesma nuvem.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)">
          <source>For every <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method, there is an equivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method.</source>
          <target state="translated">Para cada <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> método, há um equivalente <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)">
          <source>Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling.</source>
          <target state="translated">Suas listas de parâmetros são idênticas, exceto que o método ResolveAsync inclui um token do sistema para manipulação de eventos assíncrono.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)">
          <source>If the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> parameter is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt;</ph> uses the <ph id="ph4">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> shortcut to fill in the <ph id="ph5">&lt;xref:System.Net.PeerToPeer.Cloud.Name%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Net.PeerToPeer.Cloud.Scope%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Net.PeerToPeer.Cloud.ScopeId%2A&gt;</ph>.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> parâmetro é <ph id="ph2">`null`</ph>, o <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt;</ph> usa o <ph id="ph4">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> atalho para preencher o <ph id="ph5">&lt;xref:System.Net.PeerToPeer.Cloud.Name%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Net.PeerToPeer.Cloud.Scope%2A&gt;</ph>, e <ph id="ph7">&lt;xref:System.Net.PeerToPeer.Cloud.ScopeId%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)">
          <source>The <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event will be raised if the resolve operation completes in error or is canceled.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> evento será gerado se a operação resolver é concluído em erro ou for cancelada.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)">
          <source>The <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> parameter is set to <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O parâmetro <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> é definido como <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)">
          <source>The supplied peer name cannot be resolved.</source>
          <target state="translated">O nome do par fornecido não pode ser resolvido.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> to resolve.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> a ser resolvido.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph> in which to resolve the <bpt id="p1">&lt;c&gt;</bpt>peerName<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph> na qual resolver o <bpt id="p1">&lt;c&gt;</bpt>peerName<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>The maximum number of peer name record objects to obtain from the specified cloud for the specified <bpt id="p1">&lt;c&gt;</bpt>peerName<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">O número máximo de objetos de registro de nomes de par a ser obtido na nuvem especificada para o <bpt id="p1">&lt;c&gt;</bpt>peerName<ept id="p1">&lt;/c&gt;</ept> especificado.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>Resolves the specified <ph id="ph1">&lt;see cref="P:System.Net.PeerToPeer.PeerNameRecord.PeerName" /&gt;</ph> in the specified <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph>, returning no more than the specified number of <ph id="ph3">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph> objects.</source>
          <target state="translated">Resolve o <ph id="ph1">&lt;see cref="P:System.Net.PeerToPeer.PeerNameRecord.PeerName" /&gt;</ph> especificado na <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph> especificada, retornando não mais do que o número especificado de objetos <ph id="ph3">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecordCollection" /&gt;</ph> whose size is less than or equal to <ph id="ph2">&lt;paramref name="maxRecords" /&gt;</ph> entries.</source>
          <target state="translated">Uma <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecordCollection" /&gt;</ph> cujo tamanho é menor ou igual a entradas <ph id="ph2">&lt;paramref name="maxRecords" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>This collection contains peer name records associated with the <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> that was resolved.</source>
          <target state="translated">Esta coleção contém registros de nome de par associados ao <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> que foi resolvido.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.</source>
          <target state="translated">Para nomes de ponto a ponto segura, o mesmo nome pode ser registrado (e associado a diferentes pontos de extremidade) por diferentes pares na mesma nuvem.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>If the peer name cannot be resolved, an <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> is thrown.</source>
          <target state="translated">Se o nome de ponto a ponto não pode ser resolvido, um <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> é gerada.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>For every <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method, there is an equivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method.</source>
          <target state="translated">Para cada <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> método, há um equivalente <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling.</source>
          <target state="translated">Suas listas de parâmetros são idênticas, exceto que o método ResolveAsync inclui um token do sistema para manipulação de eventos assíncrono.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>If the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> parameter is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt;</ph> uses the <ph id="ph4">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> shortcut to fill in the <ph id="ph5">&lt;xref:System.Net.PeerToPeer.Cloud.Name%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Net.PeerToPeer.Cloud.Scope%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Net.PeerToPeer.Cloud.ScopeId%2A&gt;</ph>.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> parâmetro é <ph id="ph2">`null`</ph>, o <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt;</ph> usa o <ph id="ph4">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> atalho para preencher o <ph id="ph5">&lt;xref:System.Net.PeerToPeer.Cloud.Name%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Net.PeerToPeer.Cloud.Scope%2A&gt;</ph>, e <ph id="ph7">&lt;xref:System.Net.PeerToPeer.Cloud.ScopeId%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event will be raised if the resolve operation completes in error or is canceled.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> evento será gerado se a operação resolver é concluído em erro ou for cancelada.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> parameter is set to <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O parâmetro <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> é definido como <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="maxRecords" /&gt;</ph> parameter is less than or equal to zero.</source>
          <target state="translated">O parâmetro <ph id="ph1">&lt;paramref name="maxRecords" /&gt;</ph> é menor ou igual a zero.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>The supplied peer name cannot be resolved.</source>
          <target state="translated">O nome do par fornecido não pode ser resolvido.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>These methods begin an asynchronous resolution operation for the specified <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> in all clouds known to the calling peer.</source>
          <target state="translated">Estes métodos iniciam uma operação assíncrona de resolução para o <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> especificado em todas as nuvens conhecidas para o par de chamada.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>For every <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method, there is an equivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method, which is used when asynchronous processing is required.</source>
          <target state="translated">Para cada <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> método, há um equivalente <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> método, que é usado quando o processamento assíncrono é necessário.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>They are identical in the parameters they are passed, except that ResolveAsync includes a system token in its parameter list for event handling.</source>
          <target state="translated">Eles são idênticos nos parâmetros, que eles são passados, exceto que ResolveAsync inclui um token do sistema em sua lista de parâmetro para manipulação de eventos.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>If a parameter mismatch occurs between the Resolve method and the ResolveAsync method, and the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> parameter is not supplied, the method uses the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> shortcut to fill in cloud parameters.</source>
          <target state="translated">Se ocorrer uma incompatibilidade de parâmetro entre o método de resolução e o método ResolveAsync e o <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> parâmetro não for fornecido, o método usa o <ph id="ph2">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> atalho para preencher os parâmetros de nuvem.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> to resolve.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> a ser resolvido.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>A user-defined object that contains state information about the peer name resolution operation.</source>
          <target state="translated">Um objeto definido pelo usuário que contém informações de estado sobre a operação de resolução de nomes de par.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>Begins an asynchronous peer name resolution operation for the specified <ph id="ph1">&lt;see cref="P:System.Net.PeerToPeer.PeerNameRecord.PeerName" /&gt;</ph> in all clouds known to the calling peer.</source>
          <target state="translated">Inicia uma operação assíncrona de resolução de nomes de par para o <ph id="ph1">&lt;see cref="P:System.Net.PeerToPeer.PeerNameRecord.PeerName" /&gt;</ph> especificado em todas as nuvens conhecidas para o par de chamada.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>This method asynchronously associates a peer name to clouds.</source>
          <target state="translated">Esse método assincronamente associa um nome de ponto a ponto para nuvens.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>All clouds are queried for the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph>.</source>
          <target state="translated">Todas as nuvens são consultadas para o <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>It raises the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event, which calls back to the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A&gt;</ph> method.</source>
          <target state="translated">Ele gera o <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> evento, que chama o <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>Or, it raises the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> event, which calls back to the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A&gt;</ph> method.</source>
          <target state="translated">Ou, ele gera o <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> evento, que chama o <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>If the peer name cannot be resolved, an <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> is thrown.</source>
          <target state="translated">Se o nome de ponto a ponto não pode ser resolvido, um <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> é gerada.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.</source>
          <target state="translated">Para nomes de ponto a ponto segura, o mesmo nome pode ser registrado (e associado a diferentes pontos de extremidade) por diferentes pares na mesma nuvem.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>Calling the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt;</ph> method is similar to calling the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method for each peer name record in the <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameRecordCollection&gt;</ph>.</source>
          <target state="translated">Chamando o <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt;</ph> método é semelhante a chamar o <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> método para cada registro de nome de ponto a ponto no <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameRecordCollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>Note that using the Resolve method on an individual peer name record does not invalidate resolving multiple peer names.</source>
          <target state="translated">Observe que usando o método de resolução em um registro de nome de ponto a ponto individuais não invalidará resolver vários nomes de ponto a ponto.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>For every <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method, there is an equivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method.</source>
          <target state="translated">Para cada <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> método, há um equivalente <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling, and the Resolve method is intended for synchronous processing.</source>
          <target state="translated">Suas listas de parâmetros são idênticas, exceto que o método ResolveAsync inclui um token do sistema para manipulação de eventos assíncrono e o método de solução destina-se ao processamento síncrono.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>All asynchronous references to the resolver object are coordinated with a unique identifier token.</source>
          <target state="translated">Todas as referências assíncronas para o objeto de resolvedor sejam coordenadas com um token de identificador exclusivo.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>This <ph id="ph1">`userState`</ph> token or message identifier allows an operating system to deliver a message to a single receiving process after the message has been placed on the message queue.</source>
          <target state="translated">Isso <ph id="ph1">`userState`</ph> identificador de token ou mensagem permite que um sistema operacional para entregar uma mensagem para um único processo de recebimento depois que a mensagem foi colocada na fila de mensagens.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event will be raised if the resolve operation completes in error or is canceled.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> evento será gerado se a operação resolver é concluído em erro ou for cancelada.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>One or both of the <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> and <ph id="ph2">&lt;paramref name="userState" /&gt;</ph> parameters are set to <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um ou ambos os parâmetros <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> e <ph id="ph2">&lt;paramref name="userState" /&gt;</ph> são definidos como <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> to resolve.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> a ser resolvido.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>The maximum number of records to obtain for the Peer Name.</source>
          <target state="translated">O número máximo de registros a ser obtido para o Nome do Par.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>A user-defined object that contains information about the resolve operation.</source>
          <target state="translated">Um objeto definido pelo usuário que contém informações sobre a operação de resolução.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>Begins an asynchronous peer name resolution operation for the specified <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> in all clouds known to the calling peer, returning no more than <ph id="ph2">&lt;paramref name="maxRecords" /&gt;</ph> entries for the peer name.</source>
          <target state="translated">Inicia uma operação assíncrona de resolução de nomes de par para o <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> especificado em todas as nuvens conhecidas para o par de chamada, retornando não mais que <ph id="ph2">&lt;paramref name="maxRecords" /&gt;</ph> entradas para o nome do par.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>This method asynchronously associates a peer name to clouds.</source>
          <target state="translated">Esse método assincronamente associa um nome de ponto a ponto para nuvens.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>All clouds are queried for the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph>.</source>
          <target state="translated">Todas as nuvens são consultadas para o <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.</source>
          <target state="translated">Para nomes de ponto a ponto segura, o mesmo nome pode ser registrado (e associado a diferentes pontos de extremidade) por diferentes pares na mesma nuvem.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>If the peer name cannot be resolved or is <ph id="ph1">`null`</ph>, an <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> is thrown.</source>
          <target state="translated">Se o nome de ponto a ponto não pode ser resolvido ou é <ph id="ph1">`null`</ph>, uma <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> é gerada.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>This method raises the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event, which calls back to the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A&gt;</ph> method.</source>
          <target state="translated">Este método gera o <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> evento, que chama o <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>Or, it raises the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> event, which calls back to the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A&gt;</ph> method.</source>
          <target state="translated">Ou, ele gera o <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> evento, que chama o <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>For every <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method, there is an equivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method.</source>
          <target state="translated">Para cada <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> método, há um equivalente <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling, and the Resolve method is intended for synchronous processing.</source>
          <target state="translated">Suas listas de parâmetros são idênticas, exceto que o método ResolveAsync inclui um token do sistema para manipulação de eventos assíncrono e o método de solução destina-se ao processamento síncrono.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>All asynchronous references to the resolver object are coordinated with a unique identifier token <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Todas as referências assíncronas para o objeto de resolvedor sejam coordenadas com um token de identificador exclusivo <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>This <ph id="ph1">`userState`</ph> token or message identifier allows an operating system to deliver a message to a single receiving process after the message has been placed on the message queue.</source>
          <target state="translated">Isso <ph id="ph1">`userState`</ph> identificador de token ou mensagem permite que um sistema operacional para entregar uma mensagem para um único processo de recebimento depois que a mensagem foi colocada na fila de mensagens.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event will be raised if the resolve operation completes in error or is canceled.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> evento será gerado se a operação resolver é concluído em erro ou for cancelada.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>One or both of the <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> and <ph id="ph2">&lt;paramref name="userState" /&gt;</ph> parameters are set to <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um ou ambos os parâmetros <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> e <ph id="ph2">&lt;paramref name="userState" /&gt;</ph> são definidos como <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="maxRecords" /&gt;</ph> parameter is less than or equal to zero.</source>
          <target state="translated">O parâmetro <ph id="ph1">&lt;paramref name="maxRecords" /&gt;</ph> é menor ou igual a zero.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> to resolve.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> a ser resolvido.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph> in which to resolve the <bpt id="p1">&lt;c&gt;</bpt>peerName<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph> na qual resolver o <bpt id="p1">&lt;c&gt;</bpt>peerName<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
          <source>A user-defined <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that contains information about the peer name resolution operation.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> definido pelo usuário que contém informações sobre a operação de resolução de nomes de par.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
          <source>Begins an asynchronous peer name resolution operation for the specified <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> in the specified <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph>.</source>
          <target state="translated">Inicia uma operação assíncrona de resolução de nomes de par para o <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> especificado na <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph> especificada.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
          <source>This method raises the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event, which calls back to the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A&gt;</ph> method.</source>
          <target state="translated">Este método gera o <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> evento, que chama o <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
          <source>Or, it raises the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> event, which calls back to the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A&gt;</ph> method.</source>
          <target state="translated">Ou, ele gera o <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> evento, que chama o <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
          <source>For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.</source>
          <target state="translated">Para nomes de ponto a ponto segura, o mesmo nome pode ser registrado (e associado a diferentes pontos de extremidade) por diferentes pares na mesma nuvem.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
          <source>If the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> parameter is <ph id="ph2">`null`</ph>, the name is resolved using the <ph id="ph3">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> shortcut, which initializes default values for the <ph id="ph4">&lt;xref:System.Net.PeerToPeer.Cloud.Name%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Net.PeerToPeer.Cloud.Scope%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.Net.PeerToPeer.Cloud.ScopeId%2A&gt;</ph> properties.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> parâmetro é <ph id="ph2">`null`</ph>, o nome é resolvido usando o <ph id="ph3">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> atalho, que inicializa valores padrão para o <ph id="ph4">&lt;xref:System.Net.PeerToPeer.Cloud.Name%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Net.PeerToPeer.Cloud.Scope%2A&gt;</ph>, e <ph id="ph6">&lt;xref:System.Net.PeerToPeer.Cloud.ScopeId%2A&gt;</ph> propriedades.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
          <source>For every <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method, there is an equivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method.</source>
          <target state="translated">Para cada <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> método, há um equivalente <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
          <source>Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling, and the Resolve method is intended for synchronous processing.</source>
          <target state="translated">Suas listas de parâmetros são idênticas, exceto que o método ResolveAsync inclui um token do sistema para manipulação de eventos assíncrono e o método de solução destina-se ao processamento síncrono.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
          <source>All asynchronous references to the resolver object are coordinated with a unique identifier token.</source>
          <target state="translated">Todas as referências assíncronas para o objeto de resolvedor sejam coordenadas com um token de identificador exclusivo.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
          <source>This <ph id="ph1">`userState`</ph> token or message identifier allows an operating system to deliver a message to a single receiving process after the message has been placed on the message queue.</source>
          <target state="translated">Isso <ph id="ph1">`userState`</ph> identificador de token ou mensagem permite que um sistema operacional para entregar uma mensagem para um único processo de recebimento depois que a mensagem foi colocada na fila de mensagens.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event will be raised if the resolve operation completes in error or is canceled.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> evento será gerado se a operação resolver é concluído em erro ou for cancelada.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
          <source>One or both of the <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> and <ph id="ph2">&lt;paramref name="userState" /&gt;</ph> parameters are set to <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um ou ambos os parâmetros <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> e <ph id="ph2">&lt;paramref name="userState" /&gt;</ph> são definidos como <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>peerName<ept id="p1">&lt;/c&gt;</ept> to resolve.</source>
          <target state="translated">O <bpt id="p1">&lt;c&gt;</bpt>peerName<ept id="p1">&lt;/c&gt;</ept> a ser resolvido.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>cloud<ept id="p1">&lt;/c&gt;</ept> in which to resolve <bpt id="p2">&lt;c&gt;</bpt>peerName<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;c&gt;</bpt>cloud<ept id="p1">&lt;/c&gt;</ept> na qual resolver <bpt id="p2">&lt;c&gt;</bpt>peerName<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>The maximum number of records to obtain from <bpt id="p1">&lt;c&gt;</bpt>cloud<ept id="p1">&lt;/c&gt;</ept> for <bpt id="p2">&lt;c&gt;</bpt>peerName<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated">O número máximo de registros a serem obtidos da <bpt id="p1">&lt;c&gt;</bpt>cloud<ept id="p1">&lt;/c&gt;</ept> para <bpt id="p2">&lt;c&gt;</bpt>peerName<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>A user-defined object that contains information about the peer name resolution operation.</source>
          <target state="translated">Um objeto definido pelo usuário que contém informações sobre a operação de resolução de nomes de par.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>Begins an asynchronous peer name resolution operation for the specified <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> in the specified <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph>.</source>
          <target state="translated">Inicia uma operação assíncrona de resolução de nomes de par para o <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> especificado na <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph> especificada.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>The resolution operation will resolve no more than <ph id="ph1">&lt;paramref name="maxRecords" /&gt;</ph> entries for the specified peer name.</source>
          <target state="translated">A operação de resolução resolverá não mais de <ph id="ph1">&lt;paramref name="maxRecords" /&gt;</ph> entradas para o nome do par especificado.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.</source>
          <target state="translated">Para nomes de ponto a ponto segura, o mesmo nome pode ser registrado (e associado a diferentes pontos de extremidade) por diferentes pares na mesma nuvem.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>This method raises the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event, which calls back to the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A&gt;</ph> method.</source>
          <target state="translated">Este método gera o <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> evento, que chama o <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>Or, it raises the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> event, which calls back to the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A&gt;</ph> method.</source>
          <target state="translated">Ou, ele gera o <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> evento, que chama o <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>If the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> parameter is <ph id="ph2">`null`</ph>, the name is resolved using the <ph id="ph3">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> shortcut, which initializes default values for the <ph id="ph4">&lt;xref:System.Net.PeerToPeer.Cloud.Name%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Net.PeerToPeer.Cloud.Scope%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.Net.PeerToPeer.Cloud.ScopeId%2A&gt;</ph> properties.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> parâmetro é <ph id="ph2">`null`</ph>, o nome é resolvido usando o <ph id="ph3">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> atalho, que inicializa valores padrão para o <ph id="ph4">&lt;xref:System.Net.PeerToPeer.Cloud.Name%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Net.PeerToPeer.Cloud.Scope%2A&gt;</ph>, e <ph id="ph6">&lt;xref:System.Net.PeerToPeer.Cloud.ScopeId%2A&gt;</ph> propriedades.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>For every <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method, there is an equivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method.</source>
          <target state="translated">Para cada <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> método, há um equivalente <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling, and the Resolve method is intended for synchronous processing.</source>
          <target state="translated">Suas listas de parâmetros são idênticas, exceto que o método ResolveAsync inclui um token do sistema para manipulação de eventos assíncrono e o método de solução destina-se ao processamento síncrono.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>All asynchronous references to the peer resolver object are coordinated with a unique identifier token <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Todas as referências assíncronas para o objeto de resolvedor peer sejam coordenadas com um token de identificador exclusivo <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>This <ph id="ph1">`userState`</ph> token or message identifier allows an operating system to deliver a message to a single receiving process after the message has been placed on the message queue.</source>
          <target state="translated">Isso <ph id="ph1">`userState`</ph> identificador de token ou mensagem permite que um sistema operacional para entregar uma mensagem para um único processo de recebimento depois que a mensagem foi colocada na fila de mensagens.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event will be raised if the resolve operation completes in error or is canceled.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> evento será gerado se a operação resolver é concluído em erro ou for cancelada.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>One or both of the <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> and <ph id="ph2">&lt;paramref name="userState" /&gt;</ph> parameters are set to <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um ou ambos os parâmetros <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> e <ph id="ph2">&lt;paramref name="userState" /&gt;</ph> são definidos como <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>One or more supplied parameters are invalid.</source>
          <target state="translated">Um ou mais parâmetros fornecidos são inválidos.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>Successful completion of this operation requires at least one event handler.</source>
          <target state="translated">A conclusão bem-sucedida desta operação exige, pelo menos, um manipulador de eventos.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="maxRecords" /&gt;</ph> parameter is less than or equal to zero.</source>
          <target state="translated">O parâmetro <ph id="ph1">&lt;paramref name="maxRecords" /&gt;</ph> é menor ou igual a zero.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsyncCancel(System.Object)">
          <source>The object provided to the <ph id="ph1">&lt;see cref="Overload:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync" /&gt;</ph> method instance which started the resolve operation.</source>
          <target state="translated">O objeto fornecido para a instância de método <ph id="ph1">&lt;see cref="Overload:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync" /&gt;</ph> que iniciou a operação de resolução.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsyncCancel(System.Object)">
          <source>Cancels the specified asynchronous peer name resolution request.</source>
          <target state="translated">Cancelar a solicitação assíncrona de resolução de nomes de par especificada.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsyncCancel(System.Object)">
          <source>Calling this method guarantees the system will not attempt to obtain additional records for the specified <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph>.</source>
          <target state="translated">Chamar esse método garante que o sistema não tentará obter registros adicionais especificado <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsyncCancel(System.Object)">
          <source>If this method is called when an asynchronous peer name resolution operation is not outstanding, it acts as a "no operation" (NO OP).</source>
          <target state="translated">Se esse método é chamado quando uma operação de resolução de nome do par assíncrona não estiver pendente, ele atua como uma "nenhuma operação" (não operações).</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsyncCancel(System.Object)">
          <source>The <ph id="ph1">`userState`</ph> object must be provided since it is used to track a specific asynchronous call when multiple calls are in progress.</source>
          <target state="translated">O <ph id="ph1">`userState`</ph> objeto deve ser fornecido, pois ele é usado para rastrear uma chamada assíncrona específica quando várias chamadas estão em andamento.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsyncCancel(System.Object)">
          <source>This caller-supplied object is unique for each peer name resolution request.</source>
          <target state="translated">Esse objeto fornecido pelo chamador é exclusivo para cada solicitação de resolução de nome de ponto a ponto.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsyncCancel(System.Object)">
          <source>This method will return immediately, but the operation may or may not immediately cancel.</source>
          <target state="translated">Esse método retornará imediatamente, mas a operação pode ou não pode cancelar imediatamente.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsyncCancel(System.Object)">
          <source>The event arguments returned by the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event contains a field which can be polled by clients to determine whether cancellation occurred.</source>
          <target state="translated">Os argumentos do evento retornados pelo <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> evento contém um campo que pode ser controlado por clientes para determinar se o cancelamento tenha ocorrido.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsyncCancel(System.Object)">
          <source>Calling this method ensures the ResolveCompleted event will be signaled as soon as possible with the event argument <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Chamar esse método garante que o evento ResolveCompleted será sinalizado assim que possível com o argumento do evento <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> definido como <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsyncCancel(System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="userState" /&gt;</ph> parameters cannot be <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Os parâmetros <ph id="ph1">&lt;paramref name="userState" /&gt;</ph> não podem ser <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="E:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted">
          <source>The <ph id="ph1">&lt;see cref="E:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted" /&gt;</ph> event is signaled when a peer name resolution request for a specific <ph id="ph2">&lt;see cref="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" /&gt;</ph> has completed.</source>
          <target state="translated">O evento <ph id="ph1">&lt;see cref="E:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted" /&gt;</ph> é sinalizado quando uma solicitação de resolução de nomes de par para um <ph id="ph2">&lt;see cref="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" /&gt;</ph> específico foi concluída.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted">
          <source>The <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> event will be raised once for each endpoint found, and this event will be raised only once when all endpoints have been found.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> evento será gerado uma vez para cada ponto de extremidade encontrado e esse evento será gerado apenas uma vez quando todos os pontos de extremidade foram encontrados.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted">
          <source>This event will also be raised if the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> operation completes in error or is canceled.</source>
          <target state="translated">Esse evento também será gerado se o <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> operação realizada em erro ou for cancelada.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="E:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged">
          <source>This event is signaled whenever a <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph> object is found in response to a <ph id="ph2">&lt;see cref="Overload:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync" /&gt;</ph> operation for a specific <ph id="ph3">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph>.</source>
          <target state="translated">Este evento é sinalizado sempre que um objeto <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph> é localizado em resposta a uma operação <ph id="ph2">&lt;see cref="Overload:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync" /&gt;</ph> para um <ph id="ph3">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> específico.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged">
          <source>If multiple <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph> objects exist in the cloud(s) being queried, this event is signaled once for each <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameRecord&gt;</ph> found.</source>
          <target state="translated">Se vários <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph> objetos existem no cloud(s) que está sendo consultada, esse evento é sinalizado uma vez para cada <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameRecord&gt;</ph> encontrado.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>