<Type Name="ContactManager" FullName="System.Net.PeerToPeer.Collaboration.ContactManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="888a57c1b5b5f3b014818199051212ccbf93a23c" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37644882" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ContactManager : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ContactManager extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.PeerToPeer.Collaboration.ContactManager" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ContactManager&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ContactManager sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type ContactManager = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents a collection of <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> objects which persist in a Windows Address Book.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa classe não tem nenhum construtor público, como uma referência a ele é retornada pelo <xref:System.Net.PeerToPeer.Collaboration.PeerCollaboration> classe.  
  
 Que são associados com catálogos de endereços <xref:System.Net.PeerToPeer.Collaboration.PeerContact> gerenciamento incluem os associados com o par de host e um par remoto.  Qualquer computador pode colaborar com os outros pares; Quando um par é local para o par remoto, mas não o par de host, ele pode ser adicionado ao <xref:System.Net.PeerToPeer.Collaboration.ContactManager> do par de host. Determinadas operações na <xref:System.Net.PeerToPeer.Collaboration.ContactManager> classe, como <xref:System.Net.PeerToPeer.Collaboration.ContactManager.AddContact%2A> e <xref:System.Net.PeerToPeer.Collaboration.ContactManager.DeleteContact%2A>, correlacionar para as operações associadas, que está sendo executadas no catálogo de endereços do Windows do par remoto.  
  
 O par de host tem acesso a esse armazenamento persistente para <xref:System.Net.PeerToPeer.Collaboration.PeerContact> informações, que podem ser associadas com os aplicativos em que um par pretende participar. Um <xref:System.Net.PeerToPeer.Collaboration.PeerApplication> podem se identificar como um usuário de um <xref:System.Net.PeerToPeer.Collaboration.ContactManager> repositório persistente em um computador.  
  
   
  
## Examples  
 O exemplo de código a seguir ilustra como enumerar uma <xref:System.Net.PeerToPeer.Collaboration.PeerNearMe> e adicione-o como uma <xref:System.Net.PeerToPeer.Collaboration.PeerContact> local <xref:System.Net.PeerToPeer.Collaboration.ContactManager>:  
  
 [!code-csharp[NCLPNRPContacts#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPNRPContacts/CS/NCLPNRPContacts.cs#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.GetContact(System.Net.PeerToPeer.PeerName)" />
    <altmember cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.CreateContact(System.Net.PeerToPeer.Collaboration.PeerNearMe)" />
    <altmember cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.UpdateContact(System.Net.PeerToPeer.Collaboration.PeerContact)" />
  </Docs>
  <Members>
    <Member MemberName="AddContact">
      <MemberSignature Language="C#" Value="public void AddContact (System.Net.PeerToPeer.Collaboration.PeerContact peerContact);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddContact(class System.Net.PeerToPeer.Collaboration.PeerContact peerContact) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.Collaboration.ContactManager.AddContact(System.Net.PeerToPeer.Collaboration.PeerContact)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddContact(System::Net::PeerToPeer::Collaboration::PeerContact ^ peerContact);" />
      <MemberSignature Language="F#" Value="member this.AddContact : System.Net.PeerToPeer.Collaboration.PeerContact -&gt; unit" Usage="contactManager.AddContact peerContact" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peerContact" Type="System.Net.PeerToPeer.Collaboration.PeerContact" />
      </Parameters>
      <Docs>
        <param name="peerContact">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> instance to add to <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" />.</param>
        <summary>Adds the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> to the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" /> of the local peer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamar esse método requer um <xref:System.Security.Permissions.PermissionState> de <xref:System.Security.Permissions.PermissionState.Unrestricted>.  
  
   
  
## Examples  
 O exemplo de código a seguir ilustra como enumerar uma <xref:System.Net.PeerToPeer.Collaboration.PeerNearMe> e adicione-o como uma <xref:System.Net.PeerToPeer.Collaboration.PeerContact> local <xref:System.Net.PeerToPeer.Collaboration.ContactManager>:  
  
 [!code-csharp[NCLPNRPContacts#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPNRPContacts/CS/NCLPNRPContacts.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> specified by <paramref name="peerContact" /> already exists.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="peerContact" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">The specified <paramref name="peerContact" /> has been disposed.</exception>
        <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">-   The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> specified by <paramref name="peerContact" /> could not be reconstituted from its serialized XML format.  -   Unable to add the local peer to the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" /> instance being constructed.</exception>
        <altmember cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.CreateContactAsync(System.Net.PeerToPeer.Collaboration.PeerNearMe,System.Object)" />
        <altmember cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.GetContacts" />
      </Docs>
    </Member>
    <Member MemberName="ApplicationChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Net.PeerToPeer.Collaboration.ApplicationChangedEventArgs&gt; ApplicationChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Net.PeerToPeer.Collaboration.ApplicationChangedEventArgs&gt; ApplicationChanged" />
      <MemberSignature Language="DocId" Value="E:System.Net.PeerToPeer.Collaboration.ContactManager.ApplicationChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ApplicationChanged As EventHandler(Of ApplicationChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Net::PeerToPeer::Collaboration::ApplicationChangedEventArgs ^&gt; ^ ApplicationChanged;" />
      <MemberSignature Language="F#" Value="member this.ApplicationChanged : EventHandler&lt;System.Net.PeerToPeer.Collaboration.ApplicationChangedEventArgs&gt; " Usage="member this.ApplicationChanged : System.EventHandler&lt;System.Net.PeerToPeer.Collaboration.ApplicationChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Net.PeerToPeer.Collaboration.ApplicationChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised whenever a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> associated with a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> in the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" /> has changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método retorna apenas os aplicativos publicados pelo contatos do par de chamada.  
  
 Antes desse evento pode ser gerado, o usuário atual do par remoto deve assinar os eventos de colaboração do par remoto. Assinatura é realizada por meio de <xref:System.Net.PeerToPeer.Collaboration.PeerContact.Subscribe%2A> método.  
  
 Esse evento requer uma <xref:System.Security.Permissions.PermissionState> de <xref:System.Security.Permissions.PermissionState.Unrestricted>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The calling object has been disposed.</exception>
        <altmember cref="T:System.Net.PeerToPeer.Collaboration.ApplicationChangedEventArgs" />
        <altmember cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" />
        <altmember cref="M:System.Net.PeerToPeer.Collaboration.PeerContact.Subscribe" />
      </Docs>
    </Member>
    <Member MemberName="CreateContact">
      <MemberSignature Language="C#" Value="public System.Net.PeerToPeer.Collaboration.PeerContact CreateContact (System.Net.PeerToPeer.Collaboration.PeerNearMe peerNearMe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.PeerToPeer.Collaboration.PeerContact CreateContact(class System.Net.PeerToPeer.Collaboration.PeerNearMe peerNearMe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.Collaboration.ContactManager.CreateContact(System.Net.PeerToPeer.Collaboration.PeerNearMe)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::PeerToPeer::Collaboration::PeerContact ^ CreateContact(System::Net::PeerToPeer::Collaboration::PeerNearMe ^ peerNearMe);" />
      <MemberSignature Language="F#" Value="member this.CreateContact : System.Net.PeerToPeer.Collaboration.PeerNearMe -&gt; System.Net.PeerToPeer.Collaboration.PeerContact" Usage="contactManager.CreateContact peerNearMe" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.PeerToPeer.Collaboration.PeerContact</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peerNearMe" Type="System.Net.PeerToPeer.Collaboration.PeerNearMe" />
      </Parameters>
      <Docs>
        <param name="peerNearMe">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> to associate with the new <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> instance.</param>
        <summary>Creates a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> instance for the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> object.</summary>
        <returns>A <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> instance for the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamar esse método requer um <xref:System.Security.Permissions.PermissionState> de <xref:System.Security.Permissions.PermissionState.Unrestricted>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="peerNearMe" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> object has been disposed.</exception>
        <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">-   The contact manager of the remote peer passed in <paramref name="peerNearMe" /> could not be reached, or the contact could not be read from it.  -   The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> instance passed in <paramref name="peerNearMe" /> has no endpoints set on it.</exception>
        <altmember cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.AddContact(System.Net.PeerToPeer.Collaboration.PeerContact)" />
      </Docs>
    </Member>
    <Member MemberName="CreateContactAsync">
      <MemberSignature Language="C#" Value="public void CreateContactAsync (System.Net.PeerToPeer.Collaboration.PeerNearMe peerNearMe, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateContactAsync(class System.Net.PeerToPeer.Collaboration.PeerNearMe peerNearMe, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.Collaboration.ContactManager.CreateContactAsync(System.Net.PeerToPeer.Collaboration.PeerNearMe,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateContactAsync(System::Net::PeerToPeer::Collaboration::PeerNearMe ^ peerNearMe, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.CreateContactAsync : System.Net.PeerToPeer.Collaboration.PeerNearMe * obj -&gt; unit" Usage="contactManager.CreateContactAsync (peerNearMe, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peerNearMe" Type="System.Net.PeerToPeer.Collaboration.PeerNearMe" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="peerNearMe">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> to associate with the new <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> instance.</param>
        <param name="userToken">A user-defined <see cref="T:System.Object" /> that contains information about the <see cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.CreateContactAsync(System.Net.PeerToPeer.Collaboration.PeerNearMe,System.Object)" /> operation. It will be passed to the callback of the asynchronous operation for identification.</param>
        <summary>Creates a contact instance for the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamar esse método requer um <xref:System.Security.Permissions.PermissionState> de <xref:System.Security.Permissions.PermissionState.Unrestricted>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="userToken" /> already exists and is in use.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="peerNearMe" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> object has been disposed.</exception>
        <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">-   The specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> instance has no endpoints set on it.</exception>
        <altmember cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.AddContact(System.Net.PeerToPeer.Collaboration.PeerContact)" />
      </Docs>
    </Member>
    <Member MemberName="CreateContactCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Net.PeerToPeer.Collaboration.CreateContactCompletedEventArgs&gt; CreateContactCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Net.PeerToPeer.Collaboration.CreateContactCompletedEventArgs&gt; CreateContactCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.PeerToPeer.Collaboration.ContactManager.CreateContactCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CreateContactCompleted As EventHandler(Of CreateContactCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Net::PeerToPeer::Collaboration::CreateContactCompletedEventArgs ^&gt; ^ CreateContactCompleted;" />
      <MemberSignature Language="F#" Value="member this.CreateContactCompleted : EventHandler&lt;System.Net.PeerToPeer.Collaboration.CreateContactCompletedEventArgs&gt; " Usage="member this.CreateContactCompleted : System.EventHandler&lt;System.Net.PeerToPeer.Collaboration.CreateContactCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Net.PeerToPeer.Collaboration.CreateContactCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised whenever a <see cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.CreateContact(System.Net.PeerToPeer.Collaboration.PeerNearMe)" /> method has completed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento é gerado quando o <xref:System.Net.PeerToPeer.Collaboration.ContactManager.CreateContactAsync%2A> método for concluído. Ele também será gerado se o <xref:System.Net.PeerToPeer.Collaboration.ContactManager> operação é concluída em erro ou é cancelada.  
  
 Esse evento requer uma <xref:System.Security.Permissions.PermissionState> de <xref:System.Security.Permissions.PermissionState.Unrestricted>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The calling object has been disposed.</exception>
        <altmember cref="T:System.Net.PeerToPeer.Collaboration.CreateContactCompletedEventArgs" />
        <altmember cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.GetContact(System.Net.PeerToPeer.PeerName)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteContact">
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Removes a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> or <see cref="P:System.Net.PeerToPeer.Collaboration.PeerContact.PeerName" /> from the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" /> of the local peer.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteContact">
      <MemberSignature Language="C#" Value="public void DeleteContact (System.Net.PeerToPeer.Collaboration.PeerContact peerContact);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteContact(class System.Net.PeerToPeer.Collaboration.PeerContact peerContact) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.Collaboration.ContactManager.DeleteContact(System.Net.PeerToPeer.Collaboration.PeerContact)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteContact(System::Net::PeerToPeer::Collaboration::PeerContact ^ peerContact);" />
      <MemberSignature Language="F#" Value="member this.DeleteContact : System.Net.PeerToPeer.Collaboration.PeerContact -&gt; unit" Usage="contactManager.DeleteContact peerContact" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peerContact" Type="System.Net.PeerToPeer.Collaboration.PeerContact" />
      </Parameters>
      <Docs>
        <param name="peerContact">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> to remove from the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" />.</param>
        <summary>Removes the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> from the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" /> of the local peer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamar esse método requer um <xref:System.Security.Permissions.PermissionState> de <xref:System.Security.Permissions.PermissionState.Unrestricted>.  
  
   
  
## Examples  
 O exemplo de código a seguir ilustra como excluir uma <xref:System.Net.PeerToPeer.Collaboration.PeerContact> do local <xref:System.Net.PeerToPeer.Collaboration.ContactManager>:  
  
 [!code-csharp[NCLPNRPContacts#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPNRPContacts/CS/NCLPNRPContacts.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="peerContact" /> is <see langword="null" />.</exception>
        <altmember cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.GetContact(System.Net.PeerToPeer.PeerName)" />
      </Docs>
    </Member>
    <Member MemberName="DeleteContact">
      <MemberSignature Language="C#" Value="public void DeleteContact (System.Net.PeerToPeer.PeerName peerName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteContact(class System.Net.PeerToPeer.PeerName peerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.Collaboration.ContactManager.DeleteContact(System.Net.PeerToPeer.PeerName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteContact(System::Net::PeerToPeer::PeerName ^ peerName);" />
      <MemberSignature Language="F#" Value="member this.DeleteContact : System.Net.PeerToPeer.PeerName -&gt; unit" Usage="contactManager.DeleteContact peerName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peerName" Type="System.Net.PeerToPeer.PeerName" />
      </Parameters>
      <Docs>
        <param name="peerName">The <see cref="P:System.Net.PeerToPeer.Collaboration.PeerContact.PeerName" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> to remove from the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" />.</param>
        <summary>Removes the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> associated with the specified <see cref="P:System.Net.PeerToPeer.Collaboration.PeerContact.PeerName" /> from the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" /> of the local peer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamar esse método requer um <xref:System.Security.Permissions.PermissionState> de <xref:System.Security.Permissions.PermissionState.Unrestricted>.  
  
   
  
## Examples  
 O exemplo de código a seguir ilustra como excluir uma <xref:System.Net.PeerToPeer.Collaboration.PeerContact> do local <xref:System.Net.PeerToPeer.Collaboration.ContactManager>:  
  
 [!code-csharp[NCLPNRPContacts#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPNRPContacts/CS/NCLPNRPContacts.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> associated with <see cref="P:System.Net.PeerToPeer.Collaboration.PeerContact.PeerName" /> could not be found in the contact manager.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="peerName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has had <see cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.Dispose" /> previously called on it and cannot be used for future operations.</exception>
        <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">Unable to complete <see cref="Overload:System.Net.PeerToPeer.Collaboration.ContactManager.DeleteContact" /> operation.</exception>
        <altmember cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.Collaboration.ContactManager.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="contactManager.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases all resources used by the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" /> object.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContact">
      <MemberSignature Language="C#" Value="public System.Net.PeerToPeer.Collaboration.PeerContact GetContact (System.Net.PeerToPeer.PeerName peerName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.PeerToPeer.Collaboration.PeerContact GetContact(class System.Net.PeerToPeer.PeerName peerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.Collaboration.ContactManager.GetContact(System.Net.PeerToPeer.PeerName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::PeerToPeer::Collaboration::PeerContact ^ GetContact(System::Net::PeerToPeer::PeerName ^ peerName);" />
      <MemberSignature Language="F#" Value="member this.GetContact : System.Net.PeerToPeer.PeerName -&gt; System.Net.PeerToPeer.Collaboration.PeerContact" Usage="contactManager.GetContact peerName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.PeerToPeer.Collaboration.PeerContact</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peerName" Type="System.Net.PeerToPeer.PeerName" />
      </Parameters>
      <Docs>
        <param name="peerName">The <see cref="P:System.Net.PeerToPeer.Collaboration.PeerContact.PeerName" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> to be retrieved.</param>
        <summary>Returns the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object for the specified <see cref="P:System.Net.PeerToPeer.Collaboration.PeerContact.PeerName" />.</summary>
        <returns>
          <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> associated with the supplied <see cref="P:System.Net.PeerToPeer.Collaboration.PeerContact.PeerName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamar esse método requer um <xref:System.Security.Permissions.PermissionState> de <xref:System.Security.Permissions.PermissionState.Unrestricted>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="peerName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">This <see cref="P:System.Net.PeerToPeer.Collaboration.PeerContact.PeerName" /> object has been disposed.</exception>
        <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">-   Contact not found in <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" />.  -   Unable to obtain the contact for the supplied <see cref="P:System.Net.PeerToPeer.Collaboration.PeerContact.PeerName" />.</exception>
        <altmember cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.CreateContact(System.Net.PeerToPeer.Collaboration.PeerNearMe)" />
        <altmember cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.GetContacts" />
        <altmember cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.UpdateContact(System.Net.PeerToPeer.Collaboration.PeerContact)" />
      </Docs>
    </Member>
    <Member MemberName="GetContacts">
      <MemberSignature Language="C#" Value="public System.Net.PeerToPeer.Collaboration.PeerContactCollection GetContacts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.PeerToPeer.Collaboration.PeerContactCollection GetContacts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.Collaboration.ContactManager.GetContacts" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContacts () As PeerContactCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::PeerToPeer::Collaboration::PeerContactCollection ^ GetContacts();" />
      <MemberSignature Language="F#" Value="member this.GetContacts : unit -&gt; System.Net.PeerToPeer.Collaboration.PeerContactCollection" Usage="contactManager.GetContacts " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.PeerToPeer.Collaboration.PeerContactCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContactCollection" /> that contains all contacts within the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" /> of the remote peer.</summary>
        <returns>
          <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContactCollection" /> that contains all contacts within the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" /> of the remote peer.  If the contact manager is empty, then a collection of size zero (0) is returned.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamar esse método requer um <xref:System.Security.Permissions.PermissionState> de <xref:System.Security.Permissions.PermissionState.Unrestricted>.  
  
   
  
## Examples  
 O exemplo de código a seguir ilustra como recuperar um <xref:System.Net.PeerToPeer.Collaboration.PeerContactCollection> que representa os contatos contidos no local <xref:System.Net.PeerToPeer.Collaboration.ContactManager>:  
  
 [!code-csharp[NCLPNRPContacts#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPNRPContacts/CS/NCLPNRPContacts.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" /> object has been disposed.</exception>
        <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">An invalid value was returned when this method attempted to enumerate a <see cref="T:System.Net.PeerToPeer.Collaboration.Peer" /> in this peer contact collection.</exception>
        <altmember cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.CreateContact(System.Net.PeerToPeer.Collaboration.PeerNearMe)" />
        <altmember cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.CreateContactAsync(System.Net.PeerToPeer.Collaboration.PeerNearMe,System.Object)" />
        <altmember cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.UpdateContact(System.Net.PeerToPeer.Collaboration.PeerContact)" />
      </Docs>
    </Member>
    <Member MemberName="LocalContact">
      <MemberSignature Language="C#" Value="public static System.Net.PeerToPeer.Collaboration.PeerContact LocalContact { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.PeerToPeer.Collaboration.PeerContact LocalContact" />
      <MemberSignature Language="DocId" Value="P:System.Net.PeerToPeer.Collaboration.ContactManager.LocalContact" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LocalContact As PeerContact" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Net::PeerToPeer::Collaboration::PeerContact ^ LocalContact { System::Net::PeerToPeer::Collaboration::PeerContact ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalContact : System.Net.PeerToPeer.Collaboration.PeerContact" Usage="System.Net.PeerToPeer.Collaboration.ContactManager.LocalContact" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.PeerToPeer.Collaboration.PeerContact</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> representing the local peer.</summary>
        <value>O <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> instância que representa o par local.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A menos que especificado, o valor padrão desta propriedade é `null`.  
  
 Usar esta propriedade requer um <xref:System.Security.Permissions.PermissionState> de <xref:System.Security.Permissions.PermissionState.Unrestricted>.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Net.PeerToPeer.Collaboration.ContactManager.DeleteContact" />
        <altmember cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.GetContacts" />
        <altmember cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.UpdateContact(System.Net.PeerToPeer.Collaboration.PeerContact)" />
      </Docs>
    </Member>
    <Member MemberName="NameChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Net.PeerToPeer.Collaboration.NameChangedEventArgs&gt; NameChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Net.PeerToPeer.Collaboration.NameChangedEventArgs&gt; NameChanged" />
      <MemberSignature Language="DocId" Value="E:System.Net.PeerToPeer.Collaboration.ContactManager.NameChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event NameChanged As EventHandler(Of NameChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Net::PeerToPeer::Collaboration::NameChangedEventArgs ^&gt; ^ NameChanged;" />
      <MemberSignature Language="F#" Value="member this.NameChanged : EventHandler&lt;System.Net.PeerToPeer.Collaboration.NameChangedEventArgs&gt; " Usage="member this.NameChanged : System.EventHandler&lt;System.Net.PeerToPeer.Collaboration.NameChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Net.PeerToPeer.Collaboration.NameChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised whenever the <see cref="P:System.Net.PeerToPeer.Collaboration.PeerContact.PeerName" /> associated with a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> in the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" /> has changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O retorno de chamada associado fornece uma referência para o novo <xref:System.Net.PeerToPeer.Collaboration.PeerContact.PeerName%2A>.  
  
 Esse evento requer uma <xref:System.Security.Permissions.PermissionState> de <xref:System.Security.Permissions.PermissionState.Unrestricted>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The calling object has been disposed.</exception>
        <altmember cref="E:System.Net.PeerToPeer.Collaboration.PeerCollaboration.LocalNameChanged" />
        <altmember cref="M:System.Net.PeerToPeer.Collaboration.PeerEndPoint.OnNameChanged(System.Net.PeerToPeer.Collaboration.NameChangedEventArgs)" />
        <altmember cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />
      </Docs>
    </Member>
    <Member MemberName="ObjectChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Net.PeerToPeer.Collaboration.ObjectChangedEventArgs&gt; ObjectChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Net.PeerToPeer.Collaboration.ObjectChangedEventArgs&gt; ObjectChanged" />
      <MemberSignature Language="DocId" Value="E:System.Net.PeerToPeer.Collaboration.ContactManager.ObjectChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ObjectChanged As EventHandler(Of ObjectChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Net::PeerToPeer::Collaboration::ObjectChangedEventArgs ^&gt; ^ ObjectChanged;" />
      <MemberSignature Language="F#" Value="member this.ObjectChanged : EventHandler&lt;System.Net.PeerToPeer.Collaboration.ObjectChangedEventArgs&gt; " Usage="member this.ObjectChanged : System.EventHandler&lt;System.Net.PeerToPeer.Collaboration.ObjectChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Net.PeerToPeer.Collaboration.ObjectChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised whenever an object within a contact’s registered <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> objects has changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Antes desse evento pode ser gerado, o usuário atual do par remoto deve assinar os eventos de colaboração de par de host. Assinatura é realizada por meio de PeerContact <xref:System.Net.PeerToPeer.Collaboration.PeerContact.Subscribe%2A> métodos.  
  
 Esse evento requer uma <xref:System.Security.Permissions.PermissionState> de <xref:System.Security.Permissions.PermissionState.Unrestricted>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> object has been disposed.</exception>
        <altmember cref="E:System.Net.PeerToPeer.Collaboration.PeerContact.ObjectChanged" />
        <altmember cref="T:System.Net.PeerToPeer.Collaboration.ObjectChangedEventArgs" />
        <altmember cref="M:System.Net.PeerToPeer.Collaboration.PeerContact.OnObjectChanged(System.Net.PeerToPeer.Collaboration.ObjectChangedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="PresenceChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Net.PeerToPeer.Collaboration.PresenceChangedEventArgs&gt; PresenceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Net.PeerToPeer.Collaboration.PresenceChangedEventArgs&gt; PresenceChanged" />
      <MemberSignature Language="DocId" Value="E:System.Net.PeerToPeer.Collaboration.ContactManager.PresenceChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PresenceChanged As EventHandler(Of PresenceChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Net::PeerToPeer::Collaboration::PresenceChangedEventArgs ^&gt; ^ PresenceChanged;" />
      <MemberSignature Language="F#" Value="member this.PresenceChanged : EventHandler&lt;System.Net.PeerToPeer.Collaboration.PresenceChangedEventArgs&gt; " Usage="member this.PresenceChanged : System.EventHandler&lt;System.Net.PeerToPeer.Collaboration.PresenceChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Net.PeerToPeer.Collaboration.PresenceChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised whenever the presence status of a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> in the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" /> has changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Antes desse evento pode ser gerado, o usuário atual do par remoto deve assinar os eventos de colaboração de par de host. Assinatura é realizada por meio de <xref:System.Net.PeerToPeer.Collaboration.PeerContact.Subscribe%2A> método.  
  
 Esse evento requer uma <xref:System.Security.Permissions.PermissionState> de <xref:System.Security.Permissions.PermissionState.Unrestricted>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object has been disposed.</exception>
        <altmember cref="M:System.Net.PeerToPeer.Collaboration.Peer.GetPresenceInfo(System.Net.PeerToPeer.Collaboration.PeerEndPoint)" />
        <altmember cref="T:System.Net.PeerToPeer.Collaboration.PeerPresenceInfo" />
        <altmember cref="T:System.Net.PeerToPeer.Collaboration.PresenceChangedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="SubscriptionListChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Net.PeerToPeer.Collaboration.SubscriptionListChangedEventArgs&gt; SubscriptionListChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Net.PeerToPeer.Collaboration.SubscriptionListChangedEventArgs&gt; SubscriptionListChanged" />
      <MemberSignature Language="DocId" Value="E:System.Net.PeerToPeer.Collaboration.ContactManager.SubscriptionListChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SubscriptionListChanged As EventHandler(Of SubscriptionListChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Net::PeerToPeer::Collaboration::SubscriptionListChangedEventArgs ^&gt; ^ SubscriptionListChanged;" />
      <MemberSignature Language="F#" Value="member this.SubscriptionListChanged : EventHandler&lt;System.Net.PeerToPeer.Collaboration.SubscriptionListChangedEventArgs&gt; " Usage="member this.SubscriptionListChanged : System.EventHandler&lt;System.Net.PeerToPeer.Collaboration.SubscriptionListChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Net.PeerToPeer.Collaboration.SubscriptionListChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised when the list of subscribed contacts changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Como as assinaturas são por usuário e não por processo ou por domínio de aplicativo, o outro aplicativo em execução no host também pode causar esse evento seja acionado.  
  
 Esse evento requer uma <xref:System.Security.Permissions.PermissionState> de <xref:System.Security.Permissions.PermissionState.Unrestricted>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
        <altmember cref="M:System.Net.PeerToPeer.Collaboration.PeerContact.OnSubscribeCompleted(System.Net.PeerToPeer.Collaboration.SubscribeCompletedEventArgs)" />
        <altmember cref="T:System.Net.PeerToPeer.Collaboration.SubscriptionListChangedEventArgs" />
        <altmember cref="M:System.Net.PeerToPeer.Collaboration.PeerContact.Unsubscribe" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.Net.PeerToPeer.Collaboration.ContactManager.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizingObject : System.ComponentModel.ISynchronizeInvoke with get, set" Usage="System.Net.PeerToPeer.Collaboration.ContactManager.SynchronizingObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Description("SynchronizingObject")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When this property value is set, all events not fired as the result of an asynchronous operation will have the associated event handlers called back on the thread that created the specific <see cref="P:System.Net.PeerToPeer.Collaboration.PeerEndPoint.SynchronizingObject" />.</summary>
        <value>Objeto que implementa o <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> de interface e é usada pelas instâncias desse tipo para a sincronização de manipulador de eventos no thread que criou.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor do conjunto padrão para essa propriedade é `null`, indicando que todos os manipuladores de eventos são chamados em um pool de threads de sistema.  
  
 Essa propriedade normalmente é definida para um elemento de interface do usuário, como um <xref:System.Windows.Forms.Form> instância.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The calling object has been disposed.</exception>
        <altmember cref="N:System.Windows.Forms" />
      </Docs>
    </Member>
    <Member MemberName="UpdateContact">
      <MemberSignature Language="C#" Value="public void UpdateContact (System.Net.PeerToPeer.Collaboration.PeerContact peerContact);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateContact(class System.Net.PeerToPeer.Collaboration.PeerContact peerContact) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.Collaboration.ContactManager.UpdateContact(System.Net.PeerToPeer.Collaboration.PeerContact)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateContact(System::Net::PeerToPeer::Collaboration::PeerContact ^ peerContact);" />
      <MemberSignature Language="F#" Value="member this.UpdateContact : System.Net.PeerToPeer.Collaboration.PeerContact -&gt; unit" Usage="contactManager.UpdateContact peerContact" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peerContact" Type="System.Net.PeerToPeer.Collaboration.PeerContact" />
      </Parameters>
      <Docs>
        <param name="peerContact">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> to be updated.</param>
        <summary>Updates the data associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamar esse método requer um <xref:System.Security.Permissions.PermissionState> de <xref:System.Security.Permissions.PermissionState.Unrestricted>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-   <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> not found in <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="peerContact" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object has been disposed.</exception>
        <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">Unable to complete <see cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.UpdateContact(System.Net.PeerToPeer.Collaboration.PeerContact)" /> operation.</exception>
        <altmember cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.AddContact(System.Net.PeerToPeer.Collaboration.PeerContact)" />
        <altmember cref="Overload:System.Net.PeerToPeer.Collaboration.ContactManager.DeleteContact" />
        <altmember cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.Dispose" />
        <altmember cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.GetContact(System.Net.PeerToPeer.PeerName)" />
      </Docs>
    </Member>
  </Members>
</Type>