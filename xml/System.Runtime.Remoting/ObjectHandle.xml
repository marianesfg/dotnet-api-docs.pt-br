<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ObjectHandle.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5200f7ccaece3b89464b033bc5a53624a5053e211.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">200f7ccaece3b89464b033bc5a53624a5053e211</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.Remoting.ObjectHandle">
          <source>Wraps marshal-by-value object references, allowing them to be returned through an indirection.</source>
          <target state="translated">Encapsula as referências de objeto de marshaling por valor, permitindo que elas sejam retornadas por meio de uma indireção.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.ObjectHandle">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjectHandle&gt;</ph> class is used to pass an object (in a wrapped state) between multiple application domains without loading the metadata for the wrapped object in each <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> through which the <ph id="ph3">&lt;xref:System.Runtime.Remoting.ObjectHandle&gt;</ph> travels.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjectHandle&gt;</ph> classe é usada para passar um objeto (em um estado encapsulado) entre vários domínios de aplicativo sem carregar os metadados para o objeto encapsulado em cada <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> por meio do qual o <ph id="ph3">&lt;xref:System.Runtime.Remoting.ObjectHandle&gt;</ph> viaja.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.ObjectHandle">
          <source>Thus, the <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjectHandle&gt;</ph> class gives the caller control of when the <ph id="ph2">&lt;xref:System.Type&gt;</ph> of the remote object is loaded into a domain.</source>
          <target state="translated">Portanto, o <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjectHandle&gt;</ph> classe permite o controle de chamador de quando o <ph id="ph2">&lt;xref:System.Type&gt;</ph> do objeto remoto é carregado em um domínio.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.ObjectHandle">
          <source>The following code example shows how to create an object in another <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>, and retrieve a proxy to the object from a <ph id="ph2">&lt;xref:System.Runtime.Remoting.ObjectHandle&gt;</ph>.</source>
          <target state="translated">O exemplo de código a seguir mostra como criar um objeto em outro <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>e recuperar um proxy para o objeto de um <ph id="ph2">&lt;xref:System.Runtime.Remoting.ObjectHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.ObjectHandle">
          <source>In this example, you can assume that the code of the <ph id="ph1">`MyType`</ph> class is compiled into an assembly called "ObjectHandleAssembly".</source>
          <target state="translated">Neste exemplo, suponha que o código do <ph id="ph1">`MyType`</ph> classe é compilada em um assembly chamado "ObjectHandleAssembly".</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.ObjectHandle.#ctor(System.Object)">
          <source>The object that is wrapped by the new <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.ObjectHandle" /&gt;</ph>.</source>
          <target state="translated">O objeto que é encapsulado pelo novo <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.ObjectHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.ObjectHandle.#ctor(System.Object)">
          <source>Initializes an instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.ObjectHandle" /&gt;</ph> class, wrapping the given object <ph id="ph2">&lt;paramref name="o" /&gt;</ph>.</source>
          <target state="translated">Inicializa uma instância da classe <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.ObjectHandle" /&gt;</ph>, encapsulando o objeto <ph id="ph2">&lt;paramref name="o" /&gt;</ph> fornecido.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService">
          <source>Initializes the lifetime lease of the wrapped object.</source>
          <target state="translated">Inicializa a concessão de tempo de vida do objeto encapsulado.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService">
          <source>An initialized <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Lifetime.ILease" /&gt;</ph> that allows you to control the lifetime of the wrapped object.</source>
          <target state="translated">Uma <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Lifetime.ILease" /&gt;</ph> inicializado que permite que você controle o tempo de vida do objeto encapsulado.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.ObjectHandle.Unwrap">
          <source>Returns the wrapped object.</source>
          <target state="translated">Retorna o objeto encapsulado.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.ObjectHandle.Unwrap">
          <source>The wrapped object.</source>
          <target state="translated">O objeto encapsulado.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.ObjectHandle.Unwrap">
          <source>The following code example demonstrates how to activate an object in another <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>, retrieve a proxy to it with the <ph id="ph2">&lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A&gt;</ph> method, and use the proxy to access the remote object.</source>
          <target state="translated">O exemplo de código a seguir demonstra como ativar um objeto em outro <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>, recuperar um proxy para ela com o <ph id="ph2">&lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A&gt;</ph> método e use o proxy para acessar o objeto remoto.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.ObjectHandle.Unwrap">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.ObjectHandle" /&gt;</ph> is a remoted <ph id="ph2">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> that is tracked by the remoting lifetime service.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.ObjectHandle" /&gt;</ph> é um remota <ph id="ph2">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> que é controlado pelo serviço de tempo de vida de comunicação remota.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.ObjectHandle.Unwrap">
          <source>A call to the current method can fail if the lifetime lease on the <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.ObjectHandle" /&gt;</ph> expires.</source>
          <target state="translated">Uma chamada para o método atual pode falhar se o tempo de vida da concessão no <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.ObjectHandle" /&gt;</ph> expira.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>