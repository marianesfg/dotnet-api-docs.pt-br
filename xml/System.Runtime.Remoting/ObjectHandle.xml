<Type Name="ObjectHandle" FullName="System.Runtime.Remoting.ObjectHandle">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6366617d3cddd82ff50860ea37e90c30317f1f0f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36629816" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ObjectHandle : MarshalByRefObject, System.Runtime.Remoting.IObjectHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectHandle extends System.MarshalByRefObject implements class System.Runtime.Remoting.IObjectHandle" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.ObjectHandle" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectHandle&#xA;Inherits MarshalByRefObject&#xA;Implements IObjectHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObjectHandle : MarshalByRefObject, System::Runtime::Remoting::IObjectHandle" />
  <TypeSignature Language="F#" Value="type ObjectHandle = class&#xA;    inherit MarshalByRefObject&#xA;    interface IObjectHandle" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.IObjectHandle</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="62074-101">Encapsula as referências de objeto de marshaling por valor, permitindo que elas sejam retornadas por meio de uma indireção.</span>
      <span class="sxs-lookup">
        <span data-stu-id="62074-101">Wraps marshal-by-value object references, allowing them to be returned through an indirection.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62074-102">O <xref:System.Runtime.Remoting.ObjectHandle> classe é usada para passar um objeto (em um estado encapsulado) entre vários domínios de aplicativo sem carregar os metadados para o objeto encapsulado em cada <xref:System.AppDomain> por meio do qual o <xref:System.Runtime.Remoting.ObjectHandle> viaja.</span><span class="sxs-lookup"><span data-stu-id="62074-102">The <xref:System.Runtime.Remoting.ObjectHandle> class is used to pass an object (in a wrapped state) between multiple application domains without loading the metadata for the wrapped object in each <xref:System.AppDomain> through which the <xref:System.Runtime.Remoting.ObjectHandle> travels.</span></span> <span data-ttu-id="62074-103">Portanto, o <xref:System.Runtime.Remoting.ObjectHandle> classe permite o controle de chamador de quando o <xref:System.Type> do objeto remoto é carregado em um domínio.</span><span class="sxs-lookup"><span data-stu-id="62074-103">Thus, the <xref:System.Runtime.Remoting.ObjectHandle> class gives the caller control of when the <xref:System.Type> of the remote object is loaded into a domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62074-104">O exemplo de código a seguir mostra como criar um objeto em outro <xref:System.AppDomain>e recuperar um proxy para o objeto de um <xref:System.Runtime.Remoting.ObjectHandle>.</span><span class="sxs-lookup"><span data-stu-id="62074-104">The following code example shows how to create an object in another <xref:System.AppDomain>, and retrieve a proxy to the object from a <xref:System.Runtime.Remoting.ObjectHandle>.</span></span> <span data-ttu-id="62074-105">Neste exemplo, suponha que o código do `MyType` classe é compilada em um assembly chamado "ObjectHandleAssembly".</span><span class="sxs-lookup"><span data-stu-id="62074-105">In this example, you can assume that the code of the `MyType` class is compiled into an assembly called "ObjectHandleAssembly".</span></span>  
  
 [!code-cpp[ObjectHandle#1](~/samples/snippets/cpp/VS_Snippets_Remoting/ObjectHandle/CPP/objecthandleassembly.cpp#1)]
 [!code-csharp[ObjectHandle#1](~/samples/snippets/csharp/VS_Snippets_Remoting/ObjectHandle/CS/objecthandleassembly.cs#1)]
 [!code-vb[ObjectHandle#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ObjectHandle/VB/objecthandleassembly.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectHandle (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.ObjectHandle.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (o As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectHandle(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Remoting.ObjectHandle : obj -&gt; System.Runtime.Remoting.ObjectHandle" Usage="new System.Runtime.Remoting.ObjectHandle o" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="62074-106">O objeto que é encapsulado pelo novo <see cref="T:System.Runtime.Remoting.ObjectHandle" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62074-106">The object that is wrapped by the new <see cref="T:System.Runtime.Remoting.ObjectHandle" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62074-107">Inicializa uma instância da classe <see cref="T:System.Runtime.Remoting.ObjectHandle" />, encapsulando o objeto <paramref name="o" /> fornecido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62074-107">Initializes an instance of the <see cref="T:System.Runtime.Remoting.ObjectHandle" /> class, wrapping the given object <paramref name="o" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeLifetimeService">
      <MemberSignature Language="C#" Value="public override object InitializeLifetimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InitializeLifetimeService() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function InitializeLifetimeService () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ InitializeLifetimeService();" />
      <MemberSignature Language="F#" Value="override this.InitializeLifetimeService : unit -&gt; obj" Usage="objectHandle.InitializeLifetimeService " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="62074-108">Inicializa a concessão de tempo de vida do objeto encapsulado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62074-108">Initializes the lifetime lease of the wrapped object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62074-109">Uma <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> inicializado que permite que você controle o tempo de vida do objeto encapsulado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62074-109">An initialized <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> that allows you to control the lifetime of the wrapped object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unwrap">
      <MemberSignature Language="C#" Value="public object Unwrap ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Unwrap() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.ObjectHandle.Unwrap" />
      <MemberSignature Language="VB.NET" Value="Public Function Unwrap () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Unwrap();" />
      <MemberSignature Language="F#" Value="abstract member Unwrap : unit -&gt; obj&#xA;override this.Unwrap : unit -&gt; obj" Usage="objectHandle.Unwrap " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Remoting.IObjectHandle.Unwrap</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="62074-110">Retorna o objeto encapsulado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62074-110">Returns the wrapped object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62074-111">O objeto encapsulado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62074-111">The wrapped object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62074-112">O exemplo de código a seguir demonstra como ativar um objeto em outro <xref:System.AppDomain>, recuperar um proxy para ela com o <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A> método e use o proxy para acessar o objeto remoto.</span><span class="sxs-lookup"><span data-stu-id="62074-112">The following code example demonstrates how to activate an object in another <xref:System.AppDomain>, retrieve a proxy to it with the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A> method, and use the proxy to access the remote object.</span></span>  
  
 [!code-cpp[ObjectHandle#2](~/samples/snippets/cpp/VS_Snippets_Remoting/ObjectHandle/CPP/objecthandleassembly.cpp#2)]
 [!code-csharp[ObjectHandle#2](~/samples/snippets/csharp/VS_Snippets_Remoting/ObjectHandle/CS/objecthandleassembly.cs#2)]
 [!code-vb[ObjectHandle#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ObjectHandle/VB/objecthandleassembly.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <span data-ttu-id="62074-113">
            <para>Um <see cref="T:System.Runtime.Remoting.ObjectHandle" /> é um remota <see cref="T:System.MarshalByRefObject" /> que é controlado pelo serviço de tempo de vida de comunicação remota. Uma chamada para o método atual pode falhar se o tempo de vida da concessão no <see cref="T:System.Runtime.Remoting.ObjectHandle" /> expira.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="62074-113">
              <para>A <see cref="T:System.Runtime.Remoting.ObjectHandle" /> is a remoted <see cref="T:System.MarshalByRefObject" /> that is tracked by the remoting lifetime service. A call to the current method can fail if the lifetime lease on the <see cref="T:System.Runtime.Remoting.ObjectHandle" /> expires.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>