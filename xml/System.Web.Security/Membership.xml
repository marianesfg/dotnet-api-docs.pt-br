<Type Name="Membership" FullName="System.Web.Security.Membership">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2a836f4057bc6bc438b9dfd085e7d6d677be8366" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36597222" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Membership" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Membership extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.Membership" />
  <TypeSignature Language="VB.NET" Value="Public Class Membership" />
  <TypeSignature Language="C++ CLI" Value="public ref class Membership abstract sealed" />
  <TypeSignature Language="F#" Value="type Membership = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Validates user credentials and manages user settings. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.Membership> em aplicativos ASP.NET, a classe é usada para validar as credenciais do usuário e gerenciar configurações de usuário, como senhas e endereços de email. O <xref:System.Web.Security.Membership> classe pode ser usada sozinha ou em conjunto com o <xref:System.Web.Security.FormsAuthentication> para criar um sistema completo para autenticar usuários de um aplicativo Web ou site. O <xref:System.Web.UI.WebControls.Login> controle encapsula o <xref:System.Web.Security.Membership> classe para fornecer um mecanismo prático para validar usuários.  
  
> [!NOTE]
>  Se você não estiver familiarizado com os recursos de associação do ASP.NET, consulte [Introdução a associação](http://msdn.microsoft.com/library/79184d17-f4c7-4c9f-a073-cec4f5543980) antes de continuar. Para obter uma lista de outros tópicos relacionados a associação, consulte [Gerenciando usuários com o uso de associações](http://msdn.microsoft.com/library/824c3a24-f0af-427c-a652-0d2d1e9397cd).  
  
 O <xref:System.Web.Security.Membership> classe fornece recursos para:  
  
-   Criar novos usuários.  
  
-   Armazenar informações de associação (nomes de usuário, senhas, endereços de email e dados de suporte) no Microsoft SQL Server ou em um repositório de dados alternativo.  
  
-   Autenticação de usuários que visitam seu site. Você pode autenticar os usuários programaticamente, ou você pode usar o <xref:System.Web.UI.WebControls.Login> controle para criar um sistema completo de autenticação que exige pouco ou nenhum código.  
  
-   Gerenciamento de senhas, que inclui criar, alterar, recuperando e redefini-los e assim por diante. Opcionalmente, você pode configurar a associação ASP.NET para exigir uma pergunta de senha e resposta para autenticar solicitações de recuperação ou redefinição de senha para usuários que esqueceram suas senhas.  
  
 Embora a associação do ASP.NET é um recurso independentes do ASP.NET para autenticação, ele pode ser integrado com o gerenciamento de função ASP.NET para fornecer serviços de autorização para seu site. Associação também pode ser integrada com o usuário do ASP.NET <xref:System.Web.Profile> para fornecer personalização específica do aplicativo que pode ser ajustada para usuários individuais. Para obter detalhes, consulte [Noções básicas sobre gerenciamento de função](http://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6) e [visão geral de propriedades de perfil ASP.NET](http://msdn.microsoft.com/library/89439440-92ea-48c3-a4bd-dea40307899d).  
  
 O <xref:System.Web.Security.Membership> classe depende de provedores de associação para se comunicar com uma fonte de dados. O .NET Framework inclui uma <xref:System.Web.Security.SqlMembershipProvider>, que armazena informações de usuário em um banco de dados do Microsoft SQL Server e um <xref:System.Web.Security.ActiveDirectoryMembershipProvider>, que permite que você armazene informações de usuário em um servidor do Active Directory ou aplicativo modo ADAM (Active Directory). Você também pode implementar um provedor de associação personalizado para se comunicar com uma fonte de dados alternativo que pode ser usada pela <xref:System.Web.Security.Membership> classe. Provedores de associação personalizada herdam o <xref:System.Web.Security.MembershipProvider> classe abstrata. Para obter mais informações, consulte [implementando um provedor de associação](http://msdn.microsoft.com/library/d8658b8e-c962-4f64-95e1-4acce35e4582).  
  
 Por padrão, a associação ASP.NET está habilitada para todos os aplicativos ASP.NET. O provedor de associação padrão é o <xref:System.Web.Security.SqlMembershipProvider> e é especificado na configuração do computador com o nome `AspNetSqlProvider`. A instância padrão do <xref:System.Web.Security.SqlMembershipProvider> está configurado para se conectar a uma instância local do Microsoft SQL Server.  
  
 Você pode modificar as configurações padrão para especificar um <xref:System.Web.Security.SqlMembershipProvider> que o `AspNetSqlProvider` a instância como o provedor padrão ou especificar uma instância de um provedor personalizado como o provedor padrão para seu aplicativo ASP.NET usando o arquivo Web. config. Você pode especificar a configuração de associação do ASP.NET para o aplicativo Web usando a seção de configuração no arquivo Web. config. Você pode usar o `providers` a subseção para especificar um provedor de associação que não seja um dos provedores padrão. Por exemplo, a seção a seguir remove os provedores de associação padrão da configuração do aplicativo atual e adiciona um novo provedor com um nome de `SqlProvider` que se conecta a uma instância do SQL Server denominada `AspSqlServer`.  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=AspSqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  <system.web>  
    <membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
      <providers>  
        <remove name="AspNetSqlProvider" />  
        <add name="SqlProvider"  
          type="System.Web.Security.SqlMembershipProvider"  
          connectionStringName="SqlServices"  
          enablePasswordRetrieval="false"  
          enablePasswordReset="true"  
          requiresQuestionAndAnswer="true"  
          passwordFormat="Hashed"  
          applicationName="/" />  
      </providers>  
    </membership>  
  </system.web>  
</configuration>  
```  
  
   
  
## Examples  
 O exemplo de código a seguir mostra a página de logon para um aplicativo ASP.NET configurado para usar autenticação de formulários e a associação do ASP.NET. Se as credenciais de usuário fornecidas são inválidas, será exibida uma mensagem para o usuário. Caso contrário, o usuário é redirecionado para a URL solicitada originalmente usando o <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> método.  
  
> [!NOTE]
>  Os controles de logon ASP.NET (<xref:System.Web.UI.WebControls.Login>, <xref:System.Web.UI.WebControls.LoginView>, <xref:System.Web.UI.WebControls.LoginStatus>, <xref:System.Web.UI.WebControls.LoginName>, e <xref:System.Web.UI.WebControls.PasswordRecovery>) encapsulam praticamente toda a lógica necessária para solicitar aos usuários as credenciais e validar as credenciais no sistema de associação e pode ser usado em vez de usar verificação programático o <xref:System.Web.Security.Membership> classe.  
  
> [!IMPORTANT]
>  Este exemplo contém uma caixa de texto que aceita a entrada do usuário, que é uma possível ameaça à segurança. Por padrão, a páginas da Web ASP.NET validam a entrada do usuário não inclui elementos HTML ou script. Para obter mais informações, consulte [Visão geral de explorações de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/logincs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/loginvb.aspx#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public static string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ ApplicationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationName : string with get, set" Usage="System.Web.Security.Membership.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the application.</summary>
        <value>O nome do aplicativo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.Membership.ApplicationName%2A> é usado para identificar usuários específicos a um aplicativo. Ou seja, o mesmo nome de usuário pode existir no banco de dados para vários aplicativos ASP.NET que especifique outro <xref:System.Web.Security.Membership.ApplicationName%2A>. Isso permite que vários aplicativos usar o mesmo banco de dados para armazenar informações do usuário sem exibir conflitos de nome de usuário duplicado. Como alternativa, vários aplicativos ASP.NET podem usar o mesmo banco de dados de usuário, especificando o mesmo <xref:System.Web.Security.Membership.ApplicationName%2A>. O <xref:System.Web.Security.Membership.ApplicationName%2A> pode ser definido programaticamente ou declarativamente na configuração para o aplicativo Web.  
  
> [!CAUTION]
>  Como uma instância do provedor de associação padrão único é usada para todas as solicitações atendidas por um <xref:System.Web.HttpApplication> do objeto, você pode ter várias solicitações de execução simultaneamente e a tentativa de definir o <xref:System.Web.Security.Membership.ApplicationName%2A> o valor da propriedade. O <xref:System.Web.Security.Membership.ApplicationName%2A> propriedade não é thread safe para várias gravações e alterando o <xref:System.Web.Security.Membership.ApplicationName%2A> o valor da propriedade pode resultar em comportamento inesperado para vários usuários de um aplicativo. É recomendável que você evite escrever código que permite aos usuários definir o <xref:System.Web.Security.Membership.ApplicationName%2A> propriedade, a menos que você precisa. Um exemplo de um aplicativo em que a configuração de <xref:System.Web.Security.Membership.ApplicationName%2A> propriedade pode ser necessária é um aplicativo administrativo que gerencia os dados de associação para vários aplicativos. Esse aplicativo deve ser um aplicativo de usuário único e não é um aplicativo Web.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra o elemento de `system.web` seção do arquivo Web. config para um aplicativo ASP.NET. Especifica que o aplicativo use uma <xref:System.Web.Security.SqlMembershipProvider> instância e conjuntos de <xref:System.Web.Security.Membership.ApplicationName%2A> para `MyApplication`.  
  
```  
<membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      enablePasswordRetrieval="true"  
      enablePasswordReset="false"  
      requiresQuestionAndAnswer="true"  
      passwordFormat="Encrypted"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateUser">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Adds a new user to the data store.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser CreateUser (string username, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser CreateUser(string username, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.CreateUser(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateUser (username As String, password As String) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ CreateUser(System::String ^ username, System::String ^ password);" />
      <MemberSignature Language="F#" Value="static member CreateUser : string * string -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.CreateUser (username, password)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">The user name for the new user.</param>
        <param name="password">The password for the new user.</param>
        <summary>Adds a new user to the data store.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> object for the newly created user.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.CreateUser%2A> Adiciona um novo usuário para o armazenamento de dados e retorna um <xref:System.Web.Security.MembershipUser> objeto para o usuário recém-criado. Se a criação de usuário falhar, um <xref:System.Web.Security.MembershipCreateUserException> é gerada. Você pode recuperar um <xref:System.Web.Security.MembershipCreateStatus> valor o <xref:System.Web.Security.MembershipCreateUserException.StatusCode%2A> propriedade do <xref:System.Web.Security.MembershipCreateUserException> que indica por que falha na criação do usuário.  
  
 Depois que um usuário associado foi criado e se você tem uma referência a um <xref:System.Web.Security.MembershipUser> do objeto para o usuário, você pode modificar as configurações para o usuário com o <xref:System.Web.Security.MembershipUser> métodos públicos, como <xref:System.Web.Security.MembershipUser.ChangePasswordQuestionAndAnswer%2A> para aplicativos onde <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> é `true`, ou definindo os valores de propriedade de <xref:System.Web.Security.MembershipUser> objeto e transmiti-los para o <xref:System.Web.Security.Membership.UpdateUser%2A> método.  
  
 Se um usuário já existe na fonte de dados para o aplicativo, você pode obter um <xref:System.Web.Security.MembershipUser> objeto para o usuário existente com o <xref:System.Web.Security.Membership.GetUser%2A> método.  
  
 O <xref:System.Web.Security.SqlMembershipProvider> fornece uma opção para exigir um endereço de email exclusivo para cada usuário. Se o <xref:System.Web.Security.SqlMembershipProvider.RequiresUniqueEmail%2A> é de propriedade `true`, você precisará usar uma da <xref:System.Web.Security.Membership.CreateUser%2A> sobrecargas que permite que você especifique um endereço de email para o usuário que está sendo criado. Caso contrário, um <xref:System.Web.Security.MembershipCreateUserException> será lançada.  
  
 Espaços iniciais e finais são cortados de todos os valores de parâmetro.  
  
   
  
## Examples  
 O exemplo de código a seguir cria um novo usuário para um aplicativo ASP.NET configurado para usar autenticação de formulários e a associação do ASP.NET. Se o usuário não é criado com êxito, será exibida uma mensagem para o usuário. Caso contrário, o usuário é redirecionado para a página de logon para o aplicativo.  
  
> [!IMPORTANT]
>  Este exemplo contém uma caixa de texto que aceita a entrada do usuário, que é uma possível ameaça à segurança. Por padrão, a páginas da Web ASP.NET validam a entrada do usuário não inclui elementos HTML ou script. Para obter mais informações, consulte [Visão geral de explorações de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.Membership#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/createuser2cs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.Membership#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/createuser2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Security.MembershipCreateUserException">The user was not created. Check the <see cref="P:System.Web.Security.MembershipCreateUserException.StatusCode" /> property for a <see cref="T:System.Web.Security.MembershipCreateStatus" /> value.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser CreateUser (string username, string password, string email);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser CreateUser(string username, string password, string email) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.CreateUser(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateUser (username As String, password As String, email As String) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ CreateUser(System::String ^ username, System::String ^ password, System::String ^ email);" />
      <MemberSignature Language="F#" Value="static member CreateUser : string * string * string -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.CreateUser (username, password, email)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="email" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">The user name for the new user.</param>
        <param name="password">The password for the new user.</param>
        <param name="email">The email address for the new user.</param>
        <summary>Adds a new user with a specified email address to the data store.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> object for the newly created user.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.CreateUser%2A> Adiciona um novo usuário para o armazenamento de dados e retorna um <xref:System.Web.Security.MembershipUser> objeto para o usuário recém-criado. Se a criação de usuário falhar, um <xref:System.Web.Security.MembershipCreateUserException> é gerada. Você pode recuperar um <xref:System.Web.Security.MembershipCreateStatus> valor o <xref:System.Web.Security.MembershipCreateUserException.StatusCode%2A> propriedade do <xref:System.Web.Security.MembershipCreateUserException> que indica por que falha na criação do usuário.  
  
 Depois que um usuário associado foi criado e se você tem uma referência a um <xref:System.Web.Security.MembershipUser> do objeto para o usuário, você pode modificar as configurações para o usuário com o <xref:System.Web.Security.MembershipUser> métodos públicos, como <xref:System.Web.Security.MembershipUser.ChangePasswordQuestionAndAnswer%2A> para aplicativos onde <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> é `true`, ou definindo os valores de propriedade de <xref:System.Web.Security.MembershipUser> objeto e transmiti-los para o <xref:System.Web.Security.Membership.UpdateUser%2A> método.  
  
 Se um usuário já existe na fonte de dados para o aplicativo, você pode obter um <xref:System.Web.Security.MembershipUser> objeto para o usuário existente com o <xref:System.Web.Security.Membership.GetUser%2A> método.  
  
 Espaços iniciais e finais são cortados de todos os valores de parâmetro.  
  
   
  
## Examples  
 O exemplo de código a seguir cria um novo usuário para um aplicativo ASP.NET configurado para usar autenticação de formulários e a associação do ASP.NET. Se o usuário não é criado com êxito, será exibida uma mensagem para o usuário. Caso contrário, o usuário é redirecionado para a página de logon para o aplicativo.  
  
> [!IMPORTANT]
>  Este exemplo contém uma caixa de texto que aceita a entrada do usuário, que é uma possível ameaça à segurança. Por padrão, a páginas da Web ASP.NET validam a entrada do usuário não inclui elementos HTML ou script. Para obter mais informações, consulte [Visão geral de explorações de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.Membership#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/createuser1cs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.Membership#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/createuser1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Security.MembershipCreateUserException">The user was not created. Check the <see cref="P:System.Web.Security.MembershipCreateUserException.StatusCode" /> property for a <see cref="T:System.Web.Security.MembershipCreateStatus" /> value.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser CreateUser (string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, out System.Web.Security.MembershipCreateStatus status);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, [out] valuetype System.Web.Security.MembershipCreateStatus&amp; status) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Web.Security.MembershipCreateStatus@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateUser (username As String, password As String, email As String, passwordQuestion As String, passwordAnswer As String, isApproved As Boolean, ByRef status As MembershipCreateStatus) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ CreateUser(System::String ^ username, System::String ^ password, System::String ^ email, System::String ^ passwordQuestion, System::String ^ passwordAnswer, bool isApproved, [Runtime::InteropServices::Out] System::Web::Security::MembershipCreateStatus % status);" />
      <MemberSignature Language="F#" Value="static member CreateUser : string * string * string * string * string * bool *  -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.CreateUser (username, password, email, passwordQuestion, passwordAnswer, isApproved, status)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="email" Type="System.String" />
        <Parameter Name="passwordQuestion" Type="System.String" />
        <Parameter Name="passwordAnswer" Type="System.String" />
        <Parameter Name="isApproved" Type="System.Boolean" />
        <Parameter Name="status" Type="System.Web.Security.MembershipCreateStatus&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="username">The user name for the new user.</param>
        <param name="password">The password for the new user.</param>
        <param name="email">The email address for the new user.</param>
        <param name="passwordQuestion">The password-question value for the membership user.</param>
        <param name="passwordAnswer">The password-answer value for the membership user.</param>
        <param name="isApproved">A Boolean that indicates whether the new user is approved to log on.</param>
        <param name="status">A <see cref="T:System.Web.Security.MembershipCreateStatus" /> indicating that the user was created successfully or the reason that creation failed.</param>
        <summary>Adds a new user with specified property values to the data store and returns a status parameter indicating that the user was successfully created or the reason the user creation failed.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> object for the newly created user. If no user was created, this method returns <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.CreateUser%2A> Adiciona um novo usuário para o armazenamento de dados e retorna um <xref:System.Web.Security.MembershipUser> objeto para o usuário recém-criado. Se a criação de usuário falhar, você pode recuperar um <xref:System.Web.Security.MembershipCreateStatus> valor o `status` parâmetro de saída que indica por que falha na criação do usuário.  
  
 O <xref:System.Web.Security.Membership.CreateUser%2A> método retornará `null` se `password` é uma cadeia de caracteres vazia ou `null`, `username` é uma cadeia de caracteres vazia ou `null` ou contiver uma vírgula (,), `passwordQuestion` não é `null` e é uma cadeia de caracteres vazia, ou `passwordAnswer` não é `null` e contém uma cadeia de caracteres vazia.  
  
 Depois que um usuário associado foi criado e se você tem uma referência a um <xref:System.Web.Security.MembershipUser> do objeto para o usuário, você pode modificar as configurações para o usuário com o <xref:System.Web.Security.MembershipUser> métodos públicos e definindo os valores de propriedade a <xref:System.Web.Security.MembershipUser> objeto e, em seguida, passando o <xref:System.Web.Security.MembershipUser> o objeto para o <xref:System.Web.Security.Membership.UpdateUser%2A> método.  
  
 Se um usuário já existe na fonte de dados para o aplicativo, você pode obter um <xref:System.Web.Security.MembershipUser> objeto para o usuário existente com o <xref:System.Web.Security.Membership.GetUser%2A> método.  
  
 Espaços iniciais e finais são cortados de todos os valores de parâmetro de cadeia de caracteres.  
  
   
  
## Examples  
 O exemplo de código a seguir cria um novo usuário para um aplicativo ASP.NET configurado para usar autenticação de formulários e a associação do ASP.NET. Se o usuário não é criado com êxito, será exibida uma mensagem para o usuário. Caso contrário, o usuário é redirecionado para a página de logon para o aplicativo.  
  
> [!IMPORTANT]
>  Este exemplo contém uma caixa de texto que aceita a entrada do usuário, que é uma possível ameaça à segurança. Por padrão, a páginas da Web ASP.NET validam a entrada do usuário não inclui elementos HTML ou script. Para obter mais informações, consulte [Visão geral de explorações de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/CreateUsercs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/CreateUservb.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser CreateUser (string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, out System.Web.Security.MembershipCreateStatus status);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, [out] valuetype System.Web.Security.MembershipCreateStatus&amp; status) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateUser (username As String, password As String, email As String, passwordQuestion As String, passwordAnswer As String, isApproved As Boolean, providerUserKey As Object, ByRef status As MembershipCreateStatus) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ CreateUser(System::String ^ username, System::String ^ password, System::String ^ email, System::String ^ passwordQuestion, System::String ^ passwordAnswer, bool isApproved, System::Object ^ providerUserKey, [Runtime::InteropServices::Out] System::Web::Security::MembershipCreateStatus % status);" />
      <MemberSignature Language="F#" Value="static member CreateUser : string * string * string * string * string * bool * obj *  -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.CreateUser (username, password, email, passwordQuestion, passwordAnswer, isApproved, providerUserKey, status)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="email" Type="System.String" />
        <Parameter Name="passwordQuestion" Type="System.String" />
        <Parameter Name="passwordAnswer" Type="System.String" />
        <Parameter Name="isApproved" Type="System.Boolean" />
        <Parameter Name="providerUserKey" Type="System.Object" />
        <Parameter Name="status" Type="System.Web.Security.MembershipCreateStatus&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="username">The user name for the new user.</param>
        <param name="password">The password for the new user.</param>
        <param name="email">The email address for the new user.</param>
        <param name="passwordQuestion">The password-question value for the membership user.</param>
        <param name="passwordAnswer">The password-answer value for the membership user.</param>
        <param name="isApproved">A Boolean that indicates whether the new user is approved to log on.</param>
        <param name="providerUserKey">The user identifier for the user that should be stored in the membership data store.</param>
        <param name="status">A <see cref="T:System.Web.Security.MembershipCreateStatus" /> indicating that the user was created successfully or the reason creation failed.</param>
        <summary>Adds a new user with specified property values and a unique identifier to the data store and returns a status parameter indicating that the user was successfully created or the reason the user creation failed.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> object for the newly created user. If no user was created, this method returns <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.CreateUser%2A> Adiciona um novo usuário para o armazenamento de dados e retorna um <xref:System.Web.Security.MembershipUser> objeto para o usuário recém-criado. Se a criação de usuário falhar, você pode recuperar um <xref:System.Web.Security.MembershipCreateStatus> valor o `status` parâmetro de saída que indica por que falha na criação do usuário. Você pode especificar um identificador exclusivo para o usuário, como um valor de chave primária para um banco de dados usando o `providerUserKey` parâmetro.  
  
 O <xref:System.Web.Security.Membership.CreateUser%2A> método retornará `null` se `password` é uma cadeia de caracteres vazia ou `null`, `username` é uma cadeia de caracteres vazia ou `null` ou contiver uma vírgula (,), `passwordQuestion` não é `null` e contém vazio cadeia de caracteres, ou `passwordAnswer` não é `null` e contém uma cadeia de caracteres vazia.  
  
 Depois que um usuário associado foi criado e se você tem uma referência a um <xref:System.Web.Security.MembershipUser> do objeto para o usuário, você pode modificar as configurações para o usuário com o <xref:System.Web.Security.MembershipUser> métodos públicos e definindo os valores de propriedade a <xref:System.Web.Security.MembershipUser> objeto e, em seguida, passando o <xref:System.Web.Security.MembershipUser> o objeto para o <xref:System.Web.Security.Membership.UpdateUser%2A> método.  
  
 Se um usuário já existe na fonte de dados para o aplicativo, você pode obter um <xref:System.Web.Security.MembershipUser> objeto para o usuário existente com o <xref:System.Web.Security.Membership.GetUser%2A> método.  
  
 Espaços iniciais e finais são cortados de todos os valores de parâmetro de cadeia de caracteres.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteUser">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Deletes a user from the database.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteUser">
      <MemberSignature Language="C#" Value="public static bool DeleteUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.DeleteUser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeleteUser (username As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeleteUser(System::String ^ username);" />
      <MemberSignature Language="F#" Value="static member DeleteUser : string -&gt; bool" Usage="System.Web.Security.Membership.DeleteUser username" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">The name of the user to delete.</param>
        <summary>Deletes a user and any related user data from the database.</summary>
        <returns>
          <see langword="true" /> if the user was deleted; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dados de usuário armazenados no banco de dados para o <xref:System.Web.Security.Roles>, <xref:System.Web.HttpContext.Profile%2A>, ou <xref:System.Web.UI.WebControls.WebParts.WebPart> personalização também é excluída quando você estiver usando o <xref:System.Web.Security.SqlRoleProvider>, <xref:System.Web.Profile.SqlProfileProvider>, e <xref:System.Web.UI.WebControls.WebParts.SqlPersonalizationProvider> objetos para armazenamento de dados.  
  
   
  
## Examples  
 O exemplo de código a seguir exclui o usuário conectado no momento e todos os dados relacionados.  
  
 [!code-aspx-csharp[System.Web.Security.Membership#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/DeleteUsercs.aspx#8)]
 [!code-aspx-vb[System.Web.Security.Membership#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/DeleteUservb.aspx#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="username" /> is an empty string or contains a comma (,).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="username" /> is <see langword="null." /></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteUser">
      <MemberSignature Language="C#" Value="public static bool DeleteUser (string username, bool deleteAllRelatedData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteUser(string username, bool deleteAllRelatedData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.DeleteUser(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeleteUser (username As String, deleteAllRelatedData As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeleteUser(System::String ^ username, bool deleteAllRelatedData);" />
      <MemberSignature Language="F#" Value="static member DeleteUser : string * bool -&gt; bool" Usage="System.Web.Security.Membership.DeleteUser (username, deleteAllRelatedData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="deleteAllRelatedData" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="username">The name of the user to delete.</param>
        <param name="deleteAllRelatedData">
          <see langword="true" /> to delete data related to the user from the database; <see langword="false" /> to leave data related to the user in the database.</param>
        <summary>Deletes a user from the database.</summary>
        <returns>
          <see langword="true" /> if the user was deleted; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usuários excluídos do banco de dados só são excluídos do configurado `applicationName`.  
  
 Se `deleteAllRelatedData` é `true`, dados de usuário armazenados no banco de dados para o <xref:System.Web.Security.Roles>, <xref:System.Web.HttpContext.Profile%2A>, ou <xref:System.Web.UI.WebControls.WebParts.WebPart> personalização também é excluída quando você estiver usando o <xref:System.Web.Security.SqlRoleProvider>, <xref:System.Web.Profile.SqlProfileProvider>, e <xref:System.Web.UI.WebControls.WebParts.SqlPersonalizationProvider> objetos para armazenamento de dados.  
  
   
  
## Examples  
 O exemplo de código a seguir exclui o usuário conectado no momento e todos os dados relacionados.  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/DeleteUsercs.aspx#6)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/DeleteUservb.aspx#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="username" /> is an empty string or contains a comma (,).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="username" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="EnablePasswordReset">
      <MemberSignature Language="C#" Value="public static bool EnablePasswordReset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool EnablePasswordReset" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.EnablePasswordReset" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnablePasswordReset As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool EnablePasswordReset { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EnablePasswordReset : bool" Usage="System.Web.Security.Membership.EnablePasswordReset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the current membership provider is configured to allow users to reset their passwords.</summary>
        <value>
          <see langword="true" /> se o provedor de associação der suporte à redefinição de senha; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Senha é a capacidade de associação do ASP.NET substituir a senha atual de senha para um nome de usuário com uma nova gerada aleatoriamente quando um usuário tiver esquecido sua senha ou a senha atual não é mais válida. Isso é especialmente útil quando o formato da senha é definido como <xref:System.Web.Security.MembershipPasswordFormat.Hashed>, conforme os usuários não podem recuperar valores de hash de senha.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra o elemento de `system.web` seção do arquivo Web. config para um aplicativo ASP.NET. Especifica que o aplicativo use uma instância das <xref:System.Web.Security.SqlMembershipProvider> e permite a redefinição de senha.  
  
```  
<membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      enablePasswordRetrieval="false"  
      enablePasswordReset="true"  
      requiresQuestionAndAnswer="true"  
      passwordFormat="Hashed"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 O exemplo de código a seguir primeiro verifica se <xref:System.Web.Security.Membership.EnablePasswordReset%2A> é `true`, em seguida, redefine a senha do usuário e retorna a nova senha gerada automaticamente.  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/ResetPasswordcs.aspx#8)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/ResetPasswordvb.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnablePasswordRetrieval">
      <MemberSignature Language="C#" Value="public static bool EnablePasswordRetrieval { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool EnablePasswordRetrieval" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.EnablePasswordRetrieval" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnablePasswordRetrieval As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool EnablePasswordRetrieval { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EnablePasswordRetrieval : bool" Usage="System.Web.Security.Membership.EnablePasswordRetrieval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the current membership provider is configured to allow users to retrieve their passwords.</summary>
        <value>
          <see langword="true" /> se o provedor de associação dá suporte à recuperação de senha; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se <xref:System.Web.Security.Membership.EnablePasswordRetrieval%2A> é `false`, o provedor de associação subjacente pode gerar um <xref:System.Web.HttpException>.  
  
 Os provedores que são incluídos com o .NET Framework oferecem suporte a vários formatos de senha para aumentar a segurança de senha. Se o formato da senha for definido como <xref:System.Web.Security.MembershipPasswordFormat.Hashed>, em seguida, os usuários não poderão recuperar sua senha existente do banco de dados. O <xref:System.Web.Security.MembershipPasswordFormat.Hashed> formato de senha fornece codificação unidirecional de valores de senha. As senhas são "hash" e comparadas aos valores armazenados no banco de dados para autenticação. "Hash" valores não podem ser decodificados para recuperar o valor da senha original. Para obter mais informações, consulte <xref:System.Web.Security.MembershipPasswordFormat>.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra o elemento de `system.web` seção do arquivo Web. config para um aplicativo ASP.NET. Especifica que o aplicativo use uma instância das <xref:System.Web.Security.SqlMembershipProvider> e permite a recuperação de senha.  
  
```  
<membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      enablePasswordRetrieval="true"  
      enablePasswordReset="false"  
      requiresQuestionAndAnswer="false"  
      passwordFormat="Encrypted"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 O exemplo de código a seguir primeiro verifica se <xref:System.Web.Security.Membership.EnablePasswordRetrieval%2A> é `true`, em seguida, recupera a senha para um nome de usuário especificado e envia para o endereço de email para o usuário especificado.  
  
> [!IMPORTANT]
>  Retornar uma senha em texto não criptografado usando o email não é recomendado para sites que exigem um alto nível de segurança. Para sites de alta segurança, é recomendável que você retorne senhas usando criptografia, como SSL.  
>   
>  Este exemplo inclui uma caixa de texto que aceita a entrada do usuário, que é uma possível ameaça à segurança. Por padrão, a páginas da Web ASP.NET validam a entrada do usuário não inclui elementos HTML ou script. Para obter mais informações, consulte [Visão geral de explorações de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/RetrievePasswordcs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/RetrievePasswordvb.aspx#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FindUsersByEmail">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets a collection of membership users where the email address contains the specified email address to match.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindUsersByEmail">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection FindUsersByEmail (string emailToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection FindUsersByEmail(string emailToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.FindUsersByEmail(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindUsersByEmail (emailToMatch As String) As MembershipUserCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUserCollection ^ FindUsersByEmail(System::String ^ emailToMatch);" />
      <MemberSignature Language="F#" Value="static member FindUsersByEmail : string -&gt; System.Web.Security.MembershipUserCollection" Usage="System.Web.Security.Membership.FindUsersByEmail emailToMatch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="emailToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="emailToMatch">The email address to search for.</param>
        <summary>Gets a collection of membership users where the email address contains the specified email address to match.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUserCollection" /> that contains all users that match the <paramref name="emailToMatch" /> parameter.  Leading and trailing spaces are trimmed from the <paramref name="emailToMatch" /> parameter value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.FindUsersByEmail%2A> Retorna uma lista de usuários de associação onde o endereço de email corresponde fornecido `emailToMatch` configurado `applicationName`.  
  
 O <xref:System.Web.Security.SqlMembershipProvider> executa a pesquisa usando uma cláusula LIKE em relação a `emailToMatch` parâmetro. Todos os curingas são suportados pelo SQL Server em que as cláusulas podem ser usadas no `emailToMatch` o valor do parâmetro.  
  
   
  
## Examples  
 O seguinte exemplo de código usa o <xref:System.Web.Security.Membership.FindUsersByEmail%2A> método para recuperar informações de usuário de associação do banco de dados de associação com base na entrada do usuário e exibe os resultados em páginas de dados.  
  
> [!IMPORTANT]
>  Este exemplo contém uma caixa de texto que aceita a entrada do usuário, que é uma possível ameaça à segurança. Por padrão, a páginas da Web ASP.NET validam a entrada do usuário não inclui elementos HTML ou script. Para obter mais informações, consulte [Visão geral de explorações de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.Membership#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/FindUsersByEmailcs.aspx#9)]
 [!code-aspx-vb[System.Web.Security.Membership#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/FindUsersByEmailvb.aspx#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindUsersByEmail">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection FindUsersByEmail (string emailToMatch, int pageIndex, int pageSize, out int totalRecords);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection FindUsersByEmail(string emailToMatch, int32 pageIndex, int32 pageSize, [out] int32&amp; totalRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindUsersByEmail (emailToMatch As String, pageIndex As Integer, pageSize As Integer, ByRef totalRecords As Integer) As MembershipUserCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUserCollection ^ FindUsersByEmail(System::String ^ emailToMatch, int pageIndex, int pageSize, [Runtime::InteropServices::Out] int % totalRecords);" />
      <MemberSignature Language="F#" Value="static member FindUsersByEmail : string * int * int *  -&gt; System.Web.Security.MembershipUserCollection" Usage="System.Web.Security.Membership.FindUsersByEmail (emailToMatch, pageIndex, pageSize, totalRecords)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="emailToMatch" Type="System.String" />
        <Parameter Name="pageIndex" Type="System.Int32" />
        <Parameter Name="pageSize" Type="System.Int32" />
        <Parameter Name="totalRecords" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="emailToMatch">The email address to search for.</param>
        <param name="pageIndex">The index of the page of results to return. <c>pageIndex</c> is zero-based.</param>
        <param name="pageSize">The size of the page of results to return.</param>
        <param name="totalRecords">The total number of matched users.</param>
        <summary>Gets a collection of membership users, in a page of data, where the email address contains the specified email address to match.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUserCollection" /> that contains a page of <paramref name="pageSize" /><see cref="T:System.Web.Security.MembershipUser" /> objects beginning at the page specified by <paramref name="pageIndex" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.FindUsersByEmail%2A> Retorna uma lista de usuários de associação onde o endereço de email corresponde fornecido `emailToMatch` configurado `applicationName`.  
  
 O <xref:System.Web.Security.SqlMembershipProvider> executa a pesquisa usando uma cláusula LIKE em relação a `emailToMatch` parâmetro. Todos os curingas são suportados pelo SQL Server em que as cláusulas podem ser usadas no `emailToMatch` o valor do parâmetro.  
  
 Os resultados retornados por <xref:System.Web.Security.Membership.FindUsersByEmail%2A> são restritas pelo `pageIndex` e `pageSize` parâmetros. O `pageSize` parâmetro identifica o número máximo de <xref:System.Web.Security.MembershipUser> objetos para retornar o <xref:System.Web.Security.MembershipUserCollection>. O `pageIndex` parâmetro identifica qual página de resultados a serem retornados, onde 0 identifica a primeira página. O `totalRecords` parâmetro é um `out` parâmetro que é definido como o número total de usuários associados que corresponderam a `emailToMatch` valor. Por exemplo, se forem encontrados 13 usuários onde `emailToMatch` corresponde a parte ou o endereço de email inteira e o `pageIndex` valor era 1 com um `pageSize` de 5, o <xref:System.Web.Security.MembershipUserCollection> retornado conteria o sexto ao décimo usuário retornado. `totalRecords` deve ser definido como 13.  
  
 Os espaços à esquerda e à direita são cortados do valor de parâmetro `emailToMatch`.  
  
   
  
## Examples  
 O seguinte exemplo de código usa o <xref:System.Web.Security.Membership.FindUsersByEmail%2A> método para recuperar informações de usuário de associação do banco de dados de associação com base na entrada do usuário e exibe os resultados em páginas de dados.  
  
> [!IMPORTANT]
>  Este exemplo contém uma caixa de texto que aceita a entrada do usuário, que é uma possível ameaça à segurança. Por padrão, a páginas da Web ASP.NET validam a entrada do usuário não inclui elementos HTML ou script. Para obter mais informações, consulte [Visão geral de explorações de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#13](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/FindUsersByEmailcs.aspx#13)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/FindUsersByEmailvb.aspx#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="pageIndex" /> is less than zero.  -or-  <paramref name="pageSize" /> is less than 1.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FindUsersByName">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets a collection of membership users where the user name contains the specified user name to match.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindUsersByName">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection FindUsersByName (string usernameToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection FindUsersByName(string usernameToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.FindUsersByName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindUsersByName (usernameToMatch As String) As MembershipUserCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUserCollection ^ FindUsersByName(System::String ^ usernameToMatch);" />
      <MemberSignature Language="F#" Value="static member FindUsersByName : string -&gt; System.Web.Security.MembershipUserCollection" Usage="System.Web.Security.Membership.FindUsersByName usernameToMatch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernameToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="usernameToMatch">The user name to search for.</param>
        <summary>Gets a collection of membership users where the user name contains the specified user name to match.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUserCollection" /> that contains all users that match the <paramref name="usernameToMatch" /> parameter.  Leading and trailing spaces are trimmed from the <paramref name="usernameToMatch" /> parameter value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.SqlMembershipProvider.FindUsersByName%2A> Retorna uma lista de usuários de associação onde o nome de usuário corresponde fornecido `usernameToMatch` configurado `applicationName`.  
  
 O <xref:System.Web.Security.SqlMembershipProvider> executa a pesquisa usando uma cláusula LIKE em relação a `usernameToMatch` parâmetro. Todos os curingas são suportados pelo SQL Server em que as cláusulas podem ser usadas no `usernameToMatch` o valor do parâmetro.  
  
 Espaços iniciais e finais são cortados de todos os valores de parâmetro.  
  
   
  
## Examples  
 O seguinte exemplo de código usa o <xref:System.Web.Security.Membership.FindUsersByName%2A> método para recuperar informações de usuário de associação do banco de dados de associação com base na entrada do usuário e exibe os resultados em páginas de dados.  
  
> [!IMPORTANT]
>  Este exemplo contém uma caixa de texto que aceita a entrada do usuário, que é uma possível ameaça à segurança. Por padrão, a páginas da Web ASP.NET validam a entrada do usuário não inclui elementos HTML ou script. Para obter mais informações, consulte [Visão geral de explorações de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.Membership#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/FindUsersByNamecs.aspx#10)]
 [!code-aspx-vb[System.Web.Security.Membership#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/FindUsersByNamevb.aspx#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="usernameToMatch" /> is an empty string.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="usernameToMatch" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FindUsersByName">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection FindUsersByName (string usernameToMatch, int pageIndex, int pageSize, out int totalRecords);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection FindUsersByName(string usernameToMatch, int32 pageIndex, int32 pageSize, [out] int32&amp; totalRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindUsersByName (usernameToMatch As String, pageIndex As Integer, pageSize As Integer, ByRef totalRecords As Integer) As MembershipUserCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUserCollection ^ FindUsersByName(System::String ^ usernameToMatch, int pageIndex, int pageSize, [Runtime::InteropServices::Out] int % totalRecords);" />
      <MemberSignature Language="F#" Value="static member FindUsersByName : string * int * int *  -&gt; System.Web.Security.MembershipUserCollection" Usage="System.Web.Security.Membership.FindUsersByName (usernameToMatch, pageIndex, pageSize, totalRecords)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernameToMatch" Type="System.String" />
        <Parameter Name="pageIndex" Type="System.Int32" />
        <Parameter Name="pageSize" Type="System.Int32" />
        <Parameter Name="totalRecords" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="usernameToMatch">The user name to search for.</param>
        <param name="pageIndex">The index of the page of results to return. <c>pageIndex</c> is zero-based.</param>
        <param name="pageSize">The size of the page of results to return.</param>
        <param name="totalRecords">The total number of matched users.</param>
        <summary>Gets a collection of membership users, in a page of data, where the user name contains the specified user name to match.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUserCollection" /> that contains a page of <paramref name="pageSize" /><see cref="T:System.Web.Security.MembershipUser" /> objects beginning at the page specified by <paramref name="pageIndex" />.  Leading and trailing spaces are trimmed from the <paramref name="usernameToMatch" /> parameter value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.SqlMembershipProvider.FindUsersByName%2A> Retorna uma lista de usuários de associação onde o nome de usuário corresponde fornecido `usernameToMatch` configurado `applicationName`.  
  
 O <xref:System.Web.Security.SqlMembershipProvider> executa a pesquisa usando uma cláusula LIKE em relação a `usernameToMatch` parâmetro. Todos os curingas são suportados pelo SQL Server em que as cláusulas podem ser usadas no `usernameToMatch` o valor do parâmetro.  
  
 Os resultados retornados por <xref:System.Web.Security.Membership.FindUsersByName%2A> são restritas pelo `pageIndex` e `pageSize` parâmetros. O `pageSize` parâmetro identifica o número máximo de <xref:System.Web.Security.MembershipUser> objetos para retornar o <xref:System.Web.Security.MembershipUserCollection>. O `pageIndex` parâmetro identifica qual página de resultados a serem retornados, onde 0 identifica a primeira página. O `totalRecords` parâmetro é um `out` parâmetro que é definido como o número total de usuários associados que corresponderam a `usernameToMatch` valor. Por exemplo, se forem encontrados 13 usuários onde `usernameToMatch` corresponde a parte ou o nome de usuário inteiro e o `pageIndex` valor era 1 com um `pageSize` de 5, o <xref:System.Web.Security.MembershipUserCollection> retornado conteria o sexto ao décimo usuário retornado. `totalRecords` deve ser definido como 13.  
  
   
  
## Examples  
 O seguinte exemplo de código usa o <xref:System.Web.Security.Membership.FindUsersByName%2A> método para recuperar informações de usuário de associação do banco de dados de associação com base na entrada do usuário e exibe os resultados em páginas de dados.  
  
> [!IMPORTANT]
>  Este exemplo contém uma caixa de texto que aceita a entrada do usuário, que é uma possível ameaça à segurança. Por padrão, a páginas da Web ASP.NET validam a entrada do usuário não inclui elementos HTML ou script. Para obter mais informações, consulte [Visão geral de explorações de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#12](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/FindUsersByNamecs.aspx#12)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/FindUsersByNamevb.aspx#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="usernameToMatch" /> is an empty string.  -or-  <paramref name="pageIndex" /> is less than zero.  -or-  <paramref name="pageSize" /> is less than 1.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="usernameToMatch" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GeneratePassword">
      <MemberSignature Language="C#" Value="public static string GeneratePassword (int length, int numberOfNonAlphanumericCharacters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GeneratePassword(int32 length, int32 numberOfNonAlphanumericCharacters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GeneratePassword(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GeneratePassword (length As Integer, numberOfNonAlphanumericCharacters As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GeneratePassword(int length, int numberOfNonAlphanumericCharacters);" />
      <MemberSignature Language="F#" Value="static member GeneratePassword : int * int -&gt; string" Usage="System.Web.Security.Membership.GeneratePassword (length, numberOfNonAlphanumericCharacters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="numberOfNonAlphanumericCharacters" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="length">The number of characters in the generated password. The length must be between 1 and 128 characters.</param>
        <param name="numberOfNonAlphanumericCharacters">The minimum number of non-alphanumeric characters (such as @, #, !, %, &amp;, and so on) in the generated password.</param>
        <summary>Generates a random password of the specified length.</summary>
        <returns>A random password of the specified length.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.Membership.GeneratePassword%2A> método é usado para gerar uma senha aleatória e é mais comumente usado pelo <xref:System.Web.Security.MembershipProvider.ResetPassword%2A> método implementado por um provedor de associação para redefinir a senha para um usuário com uma nova senha temporária.  
  
 A senha gerada contém apenas caracteres alfanuméricos e as seguintes marcas de pontuação: `!@#$%^&*()_-+=[{]};:<>|./?`. Nenhum caractere de controle oculto ou não imprimíveis é incluído na senha gerada.  
  
> [!NOTE]
>  A senha aleatória criada pelo <xref:System.Web.Security.Membership.GeneratePassword%2A> método não é garantido para passar a expressão regular a <xref:System.Web.Security.Membership.PasswordStrengthRegularExpression%2A> propriedade. No entanto, a senha aleatória atenderá aos critérios estabelecidos pelo <xref:System.Web.Security.Membership.MinRequiredPasswordLength%2A> propriedade e o `numberOfNonAlphanumericCharacters` parâmetro.  
  
   
  
## Examples  
 O exemplo de código a seguir cria um novo usuário de associação e usa o <xref:System.Web.Security.Membership.GeneratePassword%2A> método para inicializar a senha para o novo usuário para um valor aleatório, que é exibido ao usuário.  
  
> [!IMPORTANT]
>  Este exemplo contém uma caixa de texto que aceita a entrada do usuário, que é uma possível ameaça à segurança. Por padrão, a páginas da Web ASP.NET validam a entrada do usuário não inclui elementos HTML ou script. Para obter mais informações, consulte [Visão geral de explorações de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.Membership#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/GeneratePasswordcs.aspx#5)]
 [!code-aspx-vb[System.Web.Security.Membership#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/GeneratePasswordvb.aspx#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="length" /> is less than 1 or greater than 128 -or-  <paramref name="numberOfNonAlphanumericCharacters" /> is less than 0 or greater than <paramref name="length" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAllUsers">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets a collection of the users in the database.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAllUsers">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection GetAllUsers ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection GetAllUsers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetAllUsers" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllUsers () As MembershipUserCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUserCollection ^ GetAllUsers();" />
      <MemberSignature Language="F#" Value="static member GetAllUsers : unit -&gt; System.Web.Security.MembershipUserCollection" Usage="System.Web.Security.Membership.GetAllUsers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a collection of all the users in the database.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUserCollection" /> of <see cref="T:System.Web.Security.MembershipUser" /> objects representing all of the users in the database.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.GetAllUsers%2A> Retorna as informações para todos os usuários de associação para um aplicativo como uma coleção de <xref:System.Web.Security.MembershipUser> objetos. Tenha cuidado ao usar o <xref:System.Web.Security.Membership.GetAllUsers%2A> método com bancos de dados de usuário muito grandes, como resultante <xref:System.Web.Security.MembershipUserCollection> no ASP.NET página pode degradar o desempenho do seu aplicativo.  
  
   
  
## Examples  
 O exemplo de código a seguir retorna uma lista de usuários com uma contagem do número de usuários online no momento.  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/ShowUserscs.aspx#5)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/ShowUsersvb.aspx#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllUsers">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection GetAllUsers (int pageIndex, int pageSize, out int totalRecords);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection GetAllUsers(int32 pageIndex, int32 pageSize, [out] int32&amp; totalRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetAllUsers(System.Int32,System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllUsers (pageIndex As Integer, pageSize As Integer, ByRef totalRecords As Integer) As MembershipUserCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUserCollection ^ GetAllUsers(int pageIndex, int pageSize, [Runtime::InteropServices::Out] int % totalRecords);" />
      <MemberSignature Language="F#" Value="static member GetAllUsers : int * int *  -&gt; System.Web.Security.MembershipUserCollection" Usage="System.Web.Security.Membership.GetAllUsers (pageIndex, pageSize, totalRecords)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pageIndex" Type="System.Int32" />
        <Parameter Name="pageSize" Type="System.Int32" />
        <Parameter Name="totalRecords" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pageIndex">The index of the page of results to return. Use 0 to indicate the first page.</param>
        <param name="pageSize">The size of the page of results to return. <c>pageIndex</c> is zero-based.</param>
        <param name="totalRecords">The total number of users.</param>
        <summary>Gets a collection of all the users in the database in pages of data.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUserCollection" /> of <see cref="T:System.Web.Security.MembershipUser" /> objects representing all the users in the database for the configured <see langword="applicationName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os resultados retornados por <xref:System.Web.Security.Membership.GetAllUsers%2A> são restritas pelo `pageIndex` e `pageSize` parâmetros. O `pageSize` parâmetro identifica o número máximo de <xref:System.Web.Security.MembershipUser> objetos para retornar o <xref:System.Web.Security.MembershipUserCollection>. O `pageIndex` parâmetro identifica qual página de resultados a serem retornados, onde 0 identifica a primeira página. O `totalRecords` parâmetro é um `out` parâmetro que é definido como o número total de usuários de associação configurado `applicationName`. Por exemplo, se houver 13 usuários configurado `applicationName`e o `pageIndex` valor era 1 com um `pageSize` de 5, o <xref:System.Web.Security.MembershipUserCollection> retornado conteria o sexto ao décimo usuário retornado. `totalRecords` deve ser definido como 13.  
  
   
  
## Examples  
 O exemplo de código a seguir retorna uma lista de usuários em páginas de dados com uma contagem do número de usuários online no momento.  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/ShowUserscs.aspx#5)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/ShowUsersvb.aspx#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="pageIndex" /> is less than zero.  -or-  <paramref name="pageSize" /> is less than 1.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetNumberOfUsersOnline">
      <MemberSignature Language="C#" Value="public static int GetNumberOfUsersOnline ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetNumberOfUsersOnline() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetNumberOfUsersOnline" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumberOfUsersOnline () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetNumberOfUsersOnline();" />
      <MemberSignature Language="F#" Value="static member GetNumberOfUsersOnline : unit -&gt; int" Usage="System.Web.Security.Membership.GetNumberOfUsersOnline " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the number of users currently accessing an application.</summary>
        <returns>The number of users currently accessing an application.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.SqlMembershipProvider.GetNumberOfUsersOnline%2A> Retorna o número de usuários atual <xref:System.Web.Security.Membership.ApplicationName%2A> onde a data da última atividade é maior que a hora atual menos o <xref:System.Web.Security.Membership.UserIsOnlineTimeWindow%2A>. A atividade mais recente carimbo de data/hora é atualizado para a data atual e a hora quando as credenciais do usuário são validadas por meio do <xref:System.Web.Security.Membership.ValidateUser%2A> ou <xref:System.Web.Security.Membership.UpdateUser%2A> método ou quando uma chamada para um <xref:System.Web.Security.Membership.GetUser%2A> sobrecarga que utiliza sem parâmetros ou um que usa o `userIsOnline`parâmetro para especificar que o carimbo de data/hora deve ser atualizado.  
  
   
  
## Examples  
 O exemplo de código a seguir retorna uma lista de usuários com uma contagem do número de usuários online no momento.  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/ShowUserscs.aspx#5)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/ShowUsersvb.aspx#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUser">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets the information for a membership user from the data source.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUser () As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ GetUser();" />
      <MemberSignature Language="F#" Value="static member GetUser : unit -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.GetUser " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the information from the data source and updates the last-activity date/time stamp for the current logged-on membership user.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> object representing the current logged-on user.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.GetUser> recupera as informações de usuário da fonte de dados e cria um <xref:System.Web.Security.MembershipUser> objeto preenchido com os dados retornados. Se você usar uma da <xref:System.Web.Security.Membership.GetUser%2A> sobrecargas que não têm um `username` parâmetro <xref:System.Web.Security.Membership.GetUser%2A> retorna as informações do usuário da associação do logon atual. O usuário da associação de logon atual é identificado pelo <xref:System.Security.Principal.IIdentity.Name%2A> do usuário atual <xref:System.Web.HttpContext>.  
  
 Você também pode especificar se deseja <xref:System.Web.Security.Membership.GetUser%2A> para atualizar a atividade mais recente carimbo de data/hora para o usuário que está sendo recuperado usando o `userIsOnline` parâmetro. Do <xref:System.Web.Security.Membership.GetUser%2A> sobrecargas que não têm um `userIsOnline` parâmetro `GetUser()` implicitamente o carimbo de data/hora de atividade mais recente de atualizações para o usuário. `GetUser(System.String)` e `GetUser(System.Object)` não.  
  
   
  
## Examples  
 O seguinte código exemplo atualizações a atividade mais recente carimbo data/hora para o usuário de logon associado atual e exibe o nome de usuário na página ASP.NET.  
  
 [!code-aspx-csharp[System.Web.Security.Membership#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/default1cs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.Membership#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/default1vb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">No membership user is currently logged in.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser (bool userIsOnline);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser(bool userIsOnline) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUser (userIsOnline As Boolean) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ GetUser(bool userIsOnline);" />
      <MemberSignature Language="F#" Value="static member GetUser : bool -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.GetUser userIsOnline" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userIsOnline" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="userIsOnline">If <see langword="true" />, updates the last-activity date/time stamp for the specified user.</param>
        <summary>Gets the information from the data source for the current logged-on membership user. Updates the last-activity date/time stamp for the current logged-on membership user, if specified.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> object representing the current logged-on user.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.Membership.GetUser%2A> método recupera as informações de usuário da fonte de dados e cria um <xref:System.Web.Security.MembershipUser> objeto preenchido com os dados retornados. Se você usar uma da <xref:System.Web.Security.Membership.GetUser%2A> sobrecargas que não têm um `username` parâmetro <xref:System.Web.Security.Membership.GetUser%2A> retorna as informações do usuário da associação do logon atual. O usuário da associação de logon atual é identificado pelo <xref:System.Security.Principal.IIdentity.Name%2A> do usuário atual <xref:System.Web.HttpContext>.  
  
 Você também pode especificar se deseja <xref:System.Web.Security.Membership.GetUser%2A> para atualizar a atividade mais recente carimbo de data/hora para o usuário que está sendo recuperado usando o `userIsOnline` parâmetro. Do <xref:System.Web.Security.Membership.GetUser%2A> sobrecargas que não têm um `userIsOnline` parâmetro `GetUser()` implicitamente o carimbo de data/hora de atividade mais recente de atualizações para o usuário. `GetUser(System.String)` e `GetUser(System.Object)` não.  
  
   
  
## Examples  
 O exemplo a seguir código exibe o nome de usuário para o usuário de logon da associação atual na página ASP.NET sem atualizar a atividade de última data/hora carimbo para o usuário.  
  
 [!code-aspx-csharp[System.Web.Security.Membership#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/default2cs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.Membership#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/default2vb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">No membership user is currently logged in.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser (object providerUserKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser(object providerUserKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUser (providerUserKey As Object) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ GetUser(System::Object ^ providerUserKey);" />
      <MemberSignature Language="F#" Value="static member GetUser : obj -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.GetUser providerUserKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerUserKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="providerUserKey">The unique user identifier from the membership data source for the user.</param>
        <summary>Gets the information from the data source for the membership user associated with the specified unique identifier.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> object representing the user associated with the specified unique identifier.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.Membership.GetUser%2A> método recupera as informações de usuário da fonte de dados e cria um <xref:System.Web.Security.MembershipUser> objeto preenchido com os dados retornados. O usuário é identificado usando o identificador exclusivo da fonte de dados especificado usando o `providerUserKey` parâmetro.  
  
 Você também pode especificar se deseja <xref:System.Web.Security.Membership.GetUser%2A> para atualizar a atividade mais recente carimbo de data/hora para o usuário que está sendo recuperado com o `userIsOnline` parâmetro. Do <xref:System.Web.Security.Membership.GetUser%2A> sobrecargas que não têm um `userIsOnline` parâmetro `GetUser()` implicitamente o carimbo de data/hora de atividade mais recente de atualizações para o usuário. `GetUser(System.String)` e `GetUser(System.Object)` não  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="providerUserKey" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUser (username As String) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ GetUser(System::String ^ username);" />
      <MemberSignature Language="F#" Value="static member GetUser : string -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.GetUser username" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">The name of the user to retrieve.</param>
        <summary>Gets the information from the data source for the specified membership user.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> object representing the specified user. If the <paramref name="username" /> parameter does not correspond to an existing user, this method returns <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.Membership.GetUser%2A> método recupera as informações de usuário da fonte de dados e cria um <xref:System.Web.Security.MembershipUser> objeto preenchido com os dados retornados. Se você usar uma da <xref:System.Web.Security.Membership.GetUser%2A> sobrecargas que não têm um `username` parâmetro <xref:System.Web.Security.Membership.GetUser%2A> retorna as informações do usuário da associação do logon atual. O usuário da associação de logon atual é identificado pelo <xref:System.Security.Principal.IIdentity.Name%2A> do usuário atual <xref:System.Web.HttpContext>.  
  
 Você também pode especificar se deseja <xref:System.Web.Security.Membership.GetUser%2A> para atualizar a atividade mais recente carimbo de data/hora para o usuário que está sendo recuperado com o `userIsOnline` parâmetro. Do <xref:System.Web.Security.Membership.GetUser%2A> sobrecargas que não têm um `userIsOnline` parâmetro <xref:System.Web.Security.Membership.GetUser%2A?displayProperty=nameWithType> implicitamente o carimbo de data/hora de atividade mais recente de atualizações para o usuário. <xref:System.Web.Security.Membership.GetUser%2A?displayProperty=nameWithType> e <xref:System.Web.Security.Membership.GetUser%2A> não.  
  
   
  
## Examples  
 O seguinte exemplo de código usa o <xref:System.Web.Security.Membership.GetUser%2A> método para retornar um <xref:System.Web.Security.MembershipUser> objeto para o usuário conectado no momento e as atualizações para o endereço de email para o usuário.  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/UpdateEmailcs.aspx#11)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/UpdateEmailvb.aspx#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="username" /> contains a comma (,).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="username" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser (object providerUserKey, bool userIsOnline);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser(object providerUserKey, bool userIsOnline) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUser (providerUserKey As Object, userIsOnline As Boolean) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ GetUser(System::Object ^ providerUserKey, bool userIsOnline);" />
      <MemberSignature Language="F#" Value="static member GetUser : obj * bool -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.GetUser (providerUserKey, userIsOnline)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerUserKey" Type="System.Object" />
        <Parameter Name="userIsOnline" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="providerUserKey">The unique user identifier from the membership data source for the user.</param>
        <param name="userIsOnline">If <see langword="true" />, updates the last-activity date/time stamp for the specified user.</param>
        <summary>Gets the information from the data source for the membership user associated with the specified unique identifier. Updates the last-activity date/time stamp for the user, if specified.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> object representing the user associated with the specified unique identifier.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.Membership.GetUser%2A> método recupera as informações de usuário da fonte de dados e cria um <xref:System.Web.Security.MembershipUser> objeto preenchido com os dados retornados. O usuário é identificado com o identificador exclusivo da fonte de dados especificado no `providerUserKey` parâmetro.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="providerUserKey" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser (string username, bool userIsOnline);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser(string username, bool userIsOnline) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUser (username As String, userIsOnline As Boolean) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ GetUser(System::String ^ username, bool userIsOnline);" />
      <MemberSignature Language="F#" Value="static member GetUser : string * bool -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.GetUser (username, userIsOnline)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="userIsOnline" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="username">The name of the user to retrieve.</param>
        <param name="userIsOnline">If <see langword="true" />, updates the last-activity date/time stamp for the specified user.</param>
        <summary>Gets the information from the data source for the specified membership user. Updates the last-activity date/time stamp for the user, if specified.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> object representing the specified user. If the <paramref name="username" /> parameter does not correspond to an existing user, this method returns <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.Membership.GetUser%2A> método recupera as informações de usuário da fonte de dados e cria um <xref:System.Web.Security.MembershipUser> objeto preenchido com os dados retornados.  
  
 Se você usar uma da <xref:System.Web.Security.Membership.GetUser%2A> sobrecargas que não têm um `username` parâmetro <xref:System.Web.Security.Membership.GetUser%2A> retorna as informações do usuário da associação do logon atual. O usuário da associação de logon atual é identificado pelo <xref:System.Security.Principal.IIdentity.Name%2A> do usuário atual <xref:System.Web.HttpContext>.  
  
 Você também pode especificar se deseja <xref:System.Web.Security.Membership.GetUser%2A> para atualizar a atividade mais recente carimbo de data/hora para o usuário que está sendo recuperado com o `userIsOnline` parâmetro. Do <xref:System.Web.Security.Membership.GetUser%2A> sobrecargas que não têm um `userIsOnline` parâmetro <xref:System.Web.Security.Membership.GetUser%2A?displayProperty=nameWithType> implicitamente o carimbo de data/hora de atividade mais recente de atualizações para o usuário. <xref:System.Web.Security.Membership.GetUser%2A?displayProperty=nameWithType> e <xref:System.Web.Security.Membership.GetUser%2A> não.  
  
   
  
## Examples  
 O exemplo de código a seguir recupera a senha para um nome de usuário especificado e o envia para o endereço de email para o usuário especificado. A chamada para <xref:System.Web.Security.Membership.GetUser%2A> Especifica que a atividade mais recente de carimbo de data/hora para o usuário não ser atualizado.  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/RetrievePasswordcs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/RetrievePasswordvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="username" /> contains a comma (,).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="username" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUserNameByEmail">
      <MemberSignature Language="C#" Value="public static string GetUserNameByEmail (string emailToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetUserNameByEmail(string emailToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUserNameByEmail(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUserNameByEmail (emailToMatch As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetUserNameByEmail(System::String ^ emailToMatch);" />
      <MemberSignature Language="F#" Value="static member GetUserNameByEmail : string -&gt; string" Usage="System.Web.Security.Membership.GetUserNameByEmail emailToMatch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="emailToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="emailToMatch">The email address to search for.</param>
        <summary>Gets a user name where the email address for the user matches the specified email address.</summary>
        <returns>The user name where the email address for the user matches the specified email address. If no match is found, <see langword="null" /> is returned.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.GetUserNameByEmail%2A> pode ser usado para recuperar o nome de usuário para um usuário de associação no caso em que um usuário não souber o nome de usuário, mas souber seu endereço de email. Se mais de um usuário no repositório de dados tem o mesmo endereço de email, o primeiro nome de usuário encontrado será retornado.  
  
 Espaços iniciais e finais são cortados de todos os valores de parâmetro.  
  
   
  
## Examples  
 O exemplo de código a seguir recupera o nome de usuário para um endereço de email especificado.  
  
> [!IMPORTANT]
>  Este exemplo contém uma caixa de texto que aceita a entrada do usuário, que é uma possível ameaça à segurança. Por padrão, a páginas da Web ASP.NET validam a entrada do usuário não inclui elementos HTML ou script. Para obter mais informações, consulte [Visão geral de explorações de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/GetUserByEmailcs.aspx#7)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/GetUserByEmailvb.aspx#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithmType">
      <MemberSignature Language="C#" Value="public static string HashAlgorithmType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string HashAlgorithmType" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.HashAlgorithmType" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property HashAlgorithmType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ HashAlgorithmType { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HashAlgorithmType : string" Usage="System.Web.Security.Membership.HashAlgorithmType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The identifier of the algorithm used to hash passwords.</summary>
        <value>O identificador do algoritmo usado para aplicar hash em senhas ou em branco para usar o algoritmo de hash padrão.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.Membership.HashAlgorithmType%2A> propriedade identifica o algoritmo de hash personalizado usado pelo <xref:System.Web.Security.Membership> classe. Definir o <xref:System.Web.Security.Membership.HashAlgorithmType%2A> propriedade usando o `hashAlgorithmType` atributo do elemento.  
  
 O .NET Framework permite que você configurar classes de criptografia personalizadas usando a seção de configuração do elemento. O <xref:System.Web.Security.Membership.HashAlgorithmType%2A> propriedade deve corresponder a `name` atributo do elemento em um elemento. Para obter mais informações, consulte [mapeamento de nomes de algoritmo para Classes de criptografia](~/docs/framework/configure-apps/map-algorithm-names-to-cryptography-classes.md).  
  
 Se o <xref:System.Web.Security.Membership.HashAlgorithmType%2A> propriedade não for definida, o <xref:System.Web.Security.Membership> classe usa o algoritmo de hash definido `validation` atributo do elemento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxInvalidPasswordAttempts">
      <MemberSignature Language="C#" Value="public static int MaxInvalidPasswordAttempts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxInvalidPasswordAttempts" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.MaxInvalidPasswordAttempts" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxInvalidPasswordAttempts As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MaxInvalidPasswordAttempts { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxInvalidPasswordAttempts : int" Usage="System.Web.Security.Membership.MaxInvalidPasswordAttempts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of invalid password or password-answer attempts allowed before the membership user is locked out.</summary>
        <value>O número de tentativas de senhas inválidas ou de respostas de senha permitidas antes do usuário associado ser bloqueado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> propriedade funciona em conjunto com o <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> propriedade para se proteger contra uma fonte indesejada usando repetidas tentativas de adivinhar a senha ou resposta de senha de um usuário da associação.  
  
 Se o número de senhas inválidas ou respostas de senha inserida para um usuário de associação é maior que ou igual ao valor da <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> propriedade dentro do número de minutos especificado pelo <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> propriedade e, em seguida, o usuário está bloqueada para o site Definindo o <xref:System.Web.Security.MembershipUser.IsLockedOut%2A> propriedade `true` até que o usuário está desbloqueado por uma chamada para o <xref:System.Web.Security.MembershipUser.UnlockUser%2A> método.  
  
 Se uma senha válida ou uma resposta de senha é fornecida antes do valor da <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> propriedade for atingida, o contador que rastreia o número de tentativas inválidas é definido como zero.  
  
 Tentativas de senha e resposta de senha inválidas é rastreadas separadamente. Por exemplo, se o <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> estiver definida como 5, o usuário tem até cinco tentativas de inserir uma senha correta e até cinco tentativas de inserir uma resposta de senha correta sem bloqueio.  
  
 O <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> valor da propriedade é definido na configuração do aplicativo usando o `maxInvalidPasswordAttempts` atributo do elemento de configuração.  
  
 Se o <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> é de propriedade `false`, não são rastreadas tentativas de resposta de senha inválida.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra o elemento de `system.web` seção do arquivo Web. config de um aplicativo. Especifica que o aplicativo use uma instância do <xref:System.Web.Security.SqlMembershipProvider> classe para fornecer serviços de associação e define o `maxInvalidPasswordAttempts` para cinco tentativas inválidas de atributo e o `passwordAttemptWindow` para 30 minutos.  
  
```  
<membership defaultProvider="SqlProvider"  
  userIsOnlineTimeWindow = "20>  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      requiresQuestionAndAnswer="true"  
      maxInvalidPasswordAttempts="5"  
      passwordAttemptWindow="30"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinRequiredNonAlphanumericCharacters">
      <MemberSignature Language="C#" Value="public static int MinRequiredNonAlphanumericCharacters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MinRequiredNonAlphanumericCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MinRequiredNonAlphanumericCharacters As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MinRequiredNonAlphanumericCharacters { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MinRequiredNonAlphanumericCharacters : int" Usage="System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the minimum number of special characters that must be present in a valid password.</summary>
        <value>O número mínimo de caracteres especiais que devem estar presentes em uma senha válida.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters%2A> propriedade retorna o número mínimo de caracteres não alfanuméricos, especiais que devem ser inseridos para criar uma senha válida para o provedor de associação especificado no <xref:System.Web.Security.Membership.Provider%2A> propriedade.  
  
 O <xref:System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters%2A> valor da propriedade é definido na configuração do aplicativo usando o `minRequiredNonAlphanumericCharacters` atributo do elemento de configuração.  
  
 Um caractere não alfanumérico é um caractere para a qual o <xref:System.Char.IsLetterOrDigit%2A> método retornará `false`.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra o elemento de configuração de `system.web` seção do arquivo de Web. config do aplicativo. Especifica que o aplicativo use uma instância do <xref:System.Web.Security.SqlMembershipProvider> classe para fornecer serviços de associação e conjuntos de `minRequiredNonAlphanumericCharacters` atributo 1 caractere.  
  
```  
<membership defaultProvider="SqlProvider"  
  userIsOnlineTimeWindow = "20>  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      requiresQuestionAndAnswer="true"  
      minRequiredNonAlphanumericCharacters="1"  
      />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinRequiredPasswordLength">
      <MemberSignature Language="C#" Value="public static int MinRequiredPasswordLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MinRequiredPasswordLength" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.MinRequiredPasswordLength" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MinRequiredPasswordLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MinRequiredPasswordLength { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MinRequiredPasswordLength : int" Usage="System.Web.Security.Membership.MinRequiredPasswordLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the minimum length required for a password.</summary>
        <value>O comprimento mínimo necessário para uma senha.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.Membership.MinRequiredPasswordLength%2A> propriedade obtém o número mínimo de caracteres que deve ser inserido para criar uma senha válida para o provedor de associação especificado no <xref:System.Web.Security.Membership.Provider%2A> propriedade.  
  
 O <xref:System.Web.Security.Membership.MinRequiredPasswordLength%2A> valor da propriedade é definido na configuração do aplicativo usando o `minRequiredPasswordLength` atributo do elemento de configuração.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra o elemento de configuração de `system.web` seção do arquivo de Web. config do aplicativo. Especifica que o aplicativo use uma instância do <xref:System.Web.Security.SqlMembershipProvider> classe para fornecer serviços de associação e conjuntos de `minRequiredPasswordLength` atributo sete caracteres.  
  
```  
<membership defaultProvider="SqlProvider"  
  userIsOnlineTimeWindow = "20>  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      requiresQuestionAndAnswer="true"  
      minRequiredPasswordLength="7"  
      />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PasswordAttemptWindow">
      <MemberSignature Language="C#" Value="public static int PasswordAttemptWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 PasswordAttemptWindow" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.PasswordAttemptWindow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property PasswordAttemptWindow As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int PasswordAttemptWindow { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PasswordAttemptWindow : int" Usage="System.Web.Security.Membership.PasswordAttemptWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the time window between which consecutive failed attempts to provide a valid password or password answer are tracked.</summary>
        <value>A janela de tempo, em minutos, durante a qual as tentativas com falha consecutivas de fornecer uma senha ou uma resposta de senha válida são rastreadas. O padrão é 10 minutos. Se o intervalo entre a tentativa com falha atual e a última tentativa com falha for maior que a configuração da propriedade <see cref="P:System.Web.Security.Membership.PasswordAttemptWindow" />, cada tentativa com falha será tratada como se fosse a primeira tentativa com falha.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> propriedade funciona em conjunto com o <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> propriedade para ajudar a proteger contra uma fonte indesejada adivinhe a senha ou resposta de senha de um usuário da associação por meio de repetidas tentativas. Quando um usuário tenta fazer login, alterar ou redefinir sua senha, somente um determinado número de tentativas consecutivas é permitido dentro de uma janela de tempo especificado. O comprimento da janela de tempo é especificado no <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> propriedade que identifica o número de minutos permitidos entre tentativas inválidas.  
  
 Se o número de tentativas com falha consecutivas que um usuário faz a redefinir sua ou a senha é igual ao valor armazenado na <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> propriedade e o tempo decorrido desde a última tentativa inválida é menor que o número de minutos especificado no <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> propriedade e, em seguida, o usuário associado está bloqueada. O usuário é bloqueado definindo o <xref:System.Web.Security.MembershipUser.IsLockedOut%2A> propriedade `true` até que o usuário está desbloqueado por uma chamada para o <xref:System.Web.Security.MembershipUser.UnlockUser%2A> método.  
  
 Se o intervalo entre a falha na tentativa atual e a última tentativa com falha for maior que o <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> configuração, da propriedade atual tentativa inválida é contabilizada como o primeiro. Se uma resposta de senha válida for fornecida antes de atingir o número máximo de tentativas inválidas permitidas, a contagem de tentativas inválidas de resposta de senha está definida como 0 (zero). Se uma senha válida for fornecida antes que o número máximo de permissão inválido tentativas for atingido, a contagem de tentativas inválidas de senha e a contagem de tentativas de resposta de senha inválidas são definidos como 0 (zero).  
  
 Tentativas de senha e resposta de senha inválidas são acumuladas independentemente uma da outra. Por exemplo, se o <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> é definido como 5 e três tentativas de senha inválidas são feitas seguidas por duas tentativas de resposta de senha inválidas, mais duas tentativas de senha inválida (ou mais três tentativas de resposta de senha inválidas) devem ser feitas em <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> para o usuário da associação a ser bloqueada.  
  
 O <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> o valor da propriedade é definido na configuração do aplicativo usando o `passwordAttemptWindow` atributo da seção do elemento de configuração.  
  
 Se o <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> está definida como `false`, não são rastreadas tentativas de resposta de senha inválida.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra o elemento de `system.web` seção do arquivo Web. config para um aplicativo ASP.NET. Especifica que o aplicativo use uma instância do <xref:System.Web.Security.SqlMembershipProvider> e define o `maxInvalidPasswordAttempts` para cinco tentativas inválidas de atributo e o `passwordAttemptWindow` a 30 minutos.  
  
```  
<membership defaultProvider="SqlProvider"   
  userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      requiresQuestionAndAnswer="true"  
      maxInvalidPasswordAttempts="5"  
      passwordAttemptWindow="30"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PasswordStrengthRegularExpression">
      <MemberSignature Language="C#" Value="public static string PasswordStrengthRegularExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string PasswordStrengthRegularExpression" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.PasswordStrengthRegularExpression" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property PasswordStrengthRegularExpression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ PasswordStrengthRegularExpression { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PasswordStrengthRegularExpression : string" Usage="System.Web.Security.Membership.PasswordStrengthRegularExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the regular expression used to evaluate a password.</summary>
        <value>Uma expressão regular usada para avaliar uma senha.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.Membership.PasswordStrengthRegularExpression%2A> propriedade obtém a expressão regular usada para avaliar a complexidade de senha do provedor especificado no <xref:System.Web.Security.Membership.Provider%2A> propriedade.  
  
 O <xref:System.Web.Security.Membership.PasswordStrengthRegularExpression%2A> propriedade é definida na configuração do aplicativo usando o `passwordStrengthRegularExpression` atributo do elemento de configuração.  
  
 Para obter mais informações sobre expressões regulares, consulte [expressões regulares do .NET Framework](~/docs/standard/base-types/regular-expressions.md).  
  
   
  
## Examples  
 O exemplo de código a seguir mostra o elemento de configuração de `system.web` seção do arquivo de Web. config do aplicativo. Especifica que o aplicativo use uma instância do <xref:System.Web.Security.SqlMembershipProvider> classe para fornecer serviços de associação e conjuntos de `passwordStrengthRegularExpression` atributo a uma expressão regular que valida a senha atenda aos seguintes critérios:  
  
-   É maior do que 7 caracteres.  
  
-   Contém pelo menos um dígito.  
  
-   Contém pelo menos um caractere especial de (não alfanuméricos).  
  
 Se a senha não atender a esses critérios, a senha não é aceito pelo provedor de associação.  
  
```  
<membership defaultProvider="SqlProvider"  
  userIsOnlineTimeWindow = "20>  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      requiresQuestionAndAnswer="true"  
      passwordStrengthRegularExpression=" @\"(?=.{6,})(?=(.*\d){1,})(?=(.*\W){1,})"  
      />  
   </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipProvider Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.MembershipProvider Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.Provider" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Provider As MembershipProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::MembershipProvider ^ Provider { System::Web::Security::MembershipProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Provider : System.Web.Security.MembershipProvider" Usage="System.Web.Security.Membership.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the default membership provider for the application.</summary>
        <value>O provedor de associação padrão para o aplicativo exposto usando a classe base abstrata <see cref="T:System.Web.Security.MembershipProvider" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.Membership.Provider%2A> propriedade permite que você referenciar o provedor de associação padrão para um aplicativo diretamente. Isso é normalmente usado para acessar membros personalizados do provedor de associação que não são parte do <xref:System.Web.Security.MembershipProvider> classe base abstrata.  
  
   
  
## Examples  
 O exemplo de código a seguir acessa o padrão <xref:System.Web.Security.SqlMembershipProvider> habilitado para o aplicativo usando o <xref:System.Web.Security.Membership.Provider%2A> propriedade para determinar o valor personalizado <xref:System.Web.Security.SqlMembershipProvider.RequiresUniqueEmail%2A> propriedade.  
  
 [!code-aspx-csharp[System.Web.Security.Membership#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/Providercs.aspx#6)]
 [!code-aspx-vb[System.Web.Security.Membership#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/Providervb.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Providers">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipProviderCollection Providers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.MembershipProviderCollection Providers" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.Providers" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Providers As MembershipProviderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::MembershipProviderCollection ^ Providers { System::Web::Security::MembershipProviderCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Providers : System.Web.Security.MembershipProviderCollection" Usage="System.Web.Security.Membership.Providers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipProviderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of the membership providers for the ASP.NET application.</summary>
        <value>Um <see cref="T:System.Web.Security.MembershipProviderCollection" /> dos provedores de associação configurados para o aplicativo ASP.NET.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.Membership.Providers%2A> propriedade faz referência a todos os provedores de associação habilitados para um aplicativo, incluindo provedores adicionados no arquivo Web. config para o aplicativo e o arquivo Machine. config para todos os aplicativos. Você pode controlar quais membros provedores estão disponíveis para um aplicativo usando o `providers` elemento da seção de configuração de seu aplicativo. Por exemplo, o exemplo a seguir mostra a seção no arquivo Web. config para um aplicativo que remove o <xref:System.Web.Security.SqlMembershipProvider> instância (`AspNetSqlProvider`) especificado no arquivo de configuração da máquina e adiciona um <xref:System.Web.Security.SqlMembershipProvider> instância denominada `SqlProvider` como o provedor de associação padrão para o aplicativo.  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  <system.web>  
    <membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
      <providers>  
        <remove name="AspNetSqlProvider" />  
          <add name="SqlProvider"  
            type="System.Web.Security.SqlMembershipProvider"  
            connectionStringName="SqlServices"  
            enablePasswordRetrieval="false"  
            enablePasswordReset="true"  
            requiresQuestionAndAnswer="true"  
            passwordFormat="Hashed"  
            applicationName="/" />  
      </providers>  
    </membership>  
  </system.web>  
</configuration>  
```  
  
 Ao especificar o [associação Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/library/b9c1ee8f-33ca-4361-8666-b42a0fe86049) seção, você deve especificar o `defaultProvider` atributo. Se você não especificar um [associação Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/library/b9c1ee8f-33ca-4361-8666-b42a0fe86049) são usados no seu Web. config, os valores de configuração do computador e o <xref:System.Web.Security.SqlMembershipProvider> instância nomeada `AspNetSqlProvider` for estabelecido como o `defaultProvider`.  
  
 Você pode obter uma referência para um provedor de digitada o <xref:System.Web.Security.Membership.Providers%2A> coleção por indexação o provedor de associação por nome e convertê-la como o tipo desejado.  
  
   
  
## Examples  
 O exemplo de código a seguir lista os provedores habilitados para um aplicativo e seus respectivos tipos.  
  
 [!code-aspx-csharp[System.Web.Security.Membership#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/Providerscs.aspx#7)]
 [!code-aspx-vb[System.Web.Security.Membership#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/Providersvb.aspx#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequiresQuestionAndAnswer">
      <MemberSignature Language="C#" Value="public static bool RequiresQuestionAndAnswer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool RequiresQuestionAndAnswer" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.RequiresQuestionAndAnswer" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property RequiresQuestionAndAnswer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool RequiresQuestionAndAnswer { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RequiresQuestionAndAnswer : bool" Usage="System.Web.Security.Membership.RequiresQuestionAndAnswer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the default membership provider requires the user to answer a password question for password reset and retrieval.</summary>
        <value>
          <see langword="true" /> se uma resposta de senha é necessária para a recuperação e redefinição de senha; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exigir uma pergunta de senha e resposta fornece uma camada adicional de segurança ao recuperar ou redefinir a senha do usuário. Os usuários podem fornecer uma pergunta e resposta quando seu nome de usuário é criado que eles podem usar mais tarde para recuperar ou redefinir uma senha esquecida.  
  
 <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> é verificada quando <xref:System.Web.Security.MembershipUser.ResetPassword%2A> ou <xref:System.Web.Security.MembershipUser.GetPassword%2A> é chamado. O provedor fornecido com o .NET Framework lança uma <xref:System.NotSupportedException> se <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> é `true` e a resposta de senha fornecida é `null`.  
  
 Se <xref:System.Web.Security.Membership.EnablePasswordReset%2A> e <xref:System.Web.Security.Membership.EnablePasswordRetrieval%2A> são ambos `false`, <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> ainda podem ser usadas para impor a criação de perguntas e respostas quando novos usuários são criados; no entanto, a pergunta e resposta serão não usados. Você poderá recuperar a pergunta usando o <xref:System.Web.Security.MembershipUser> classe.  
  
 Para obter mais informações, consulte <xref:System.Web.Security.MembershipUser.ResetPassword%2A> e <xref:System.Web.Security.MembershipUser.GetPassword%2A>.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra o elemento de `system.web` seção do arquivo Web. config para um aplicativo ASP.NET. Especifica que o aplicativo use uma instância das <xref:System.Web.Security.SqlMembershipProvider>, permite a redefinição de senha e requer uma resposta de senha ao executar uma redefinição.  
  
```  
<membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      enablePasswordRetrieval="false"  
      enablePasswordReset="true"  
      requiresQuestionAndAnswer="true"  
      passwordFormat="Hashed"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 O exemplo de código a seguir verifica o valor de <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> e adiciona os controles necessários para uma pergunta de senha e resposta a ser fornecido ao criar um usuário.  
  
> [!IMPORTANT]
>  Este exemplo inclui uma caixa de texto que aceita a entrada do usuário, que é uma possível ameaça à segurança. Por padrão, a páginas da Web ASP.NET validam a entrada do usuário não inclui elementos HTML ou script. Para obter mais informações, consulte [Visão geral de explorações de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/CreateUsercs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/CreateUservb.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateUser">
      <MemberSignature Language="C#" Value="public static void UpdateUser (System.Web.Security.MembershipUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UpdateUser(class System.Web.Security.MembershipUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.UpdateUser(System.Web.Security.MembershipUser)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UpdateUser (user As MembershipUser)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UpdateUser(System::Web::Security::MembershipUser ^ user);" />
      <MemberSignature Language="F#" Value="static member UpdateUser : System.Web.Security.MembershipUser -&gt; unit" Usage="System.Web.Security.Membership.UpdateUser user" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="System.Web.Security.MembershipUser" />
      </Parameters>
      <Docs>
        <param name="user">A <see cref="T:System.Web.Security.MembershipUser" /> object that represents the user to be updated and the updated information for the user.</param>
        <summary>Updates the database with the information for the specified user.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.UpdateUser%2A> usa como entrada, um <xref:System.Web.Security.MembershipUser> populada com informações atuais do usuário da associação de objeto e atualiza a fonte de dados com os valores de propriedade de <xref:System.Web.Security.MembershipUser> objeto. Você pode construir uma nova <xref:System.Web.Security.MembershipUser>, ou recuperar um <xref:System.Web.Security.MembershipUser> objeto preenchido com valores atuais na fonte de dados usando o <xref:System.Web.Security.Membership.GetUser%2A>, <xref:System.Web.Security.Membership.GetAllUsers%2A>, <xref:System.Web.Security.Membership.FindUsersByName%2A>, ou <xref:System.Web.Security.Membership.FindUsersByEmail%2A> métodos.  
  
   
  
## Examples  
 O exemplo de código a seguir atualiza o endereço de email para o usuário de logon atual.  
  
> [!IMPORTANT]
>  Este exemplo contém uma caixa de texto que aceita a entrada do usuário, que é uma possível ameaça à segurança. Por padrão, a páginas da Web ASP.NET validam a entrada do usuário não inclui elementos HTML ou script. Para obter mais informações, consulte [Visão geral de explorações de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/UpdateEmailcs.aspx#11)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/UpdateEmailvb.aspx#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="user" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UserIsOnlineTimeWindow">
      <MemberSignature Language="C#" Value="public static int UserIsOnlineTimeWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 UserIsOnlineTimeWindow" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.UserIsOnlineTimeWindow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UserIsOnlineTimeWindow As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int UserIsOnlineTimeWindow { int get(); };" />
      <MemberSignature Language="F#" Value="member this.UserIsOnlineTimeWindow : int" Usage="System.Web.Security.Membership.UserIsOnlineTimeWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies the number of minutes after the last-activity date/time stamp for a user during which the user is considered online.</summary>
        <value>O número de minutos em que o usuário é considerado online após o carimbo de data/hora de sua última atividade.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.Membership.UserIsOnlineTimeWindow%2A> o valor da propriedade é verificado durante a chamada para <xref:System.Web.Security.Membership.GetNumberOfUsersOnline%2A>. Se o <xref:System.Web.Security.MembershipUser.LastActivityDate%2A> para um usuário é maior que a data e hora atuais menos a <xref:System.Web.Security.Membership.UserIsOnlineTimeWindow%2A> valor em minutos, em seguida, o usuário é considerado online. Você pode determinar se um usuário de associação é considerado online com o <xref:System.Web.Security.MembershipUser.IsOnline%2A> propriedade o <xref:System.Web.Security.MembershipUser> classe.  
  
 O <xref:System.Web.Security.MembershipUser.LastActivityDate%2A> para um usuário é atualizado quando as credenciais do usuário são validadas com êxito pelo <xref:System.Web.Security.Membership.ValidateUser%2A> método. Você também pode atualizar o <xref:System.Web.Security.MembershipUser.LastActivityDate%2A> para um usuário associado ao chamar um do <xref:System.Web.Security.Membership.GetUser%2A> sobrecargas. Se você chamar um <xref:System.Web.Security.Membership.GetUser%2A> sobrecarga que utiliza um `userIsOnline` parâmetro, especifique um valor de `true` para atualizar o <xref:System.Web.Security.MembershipUser.LastActivityDate%2A> para o usuário.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra o elemento de `system.web` seção do arquivo Web. config para um aplicativo ASP.NET. Especifica que o aplicativo use uma instância do <xref:System.Web.Security.SqlMembershipProvider> e define o `userIsOnlineTimeWindow` de atributo para 20 minutos.  
  
```  
<membership defaultProvider="SqlProvider"  
  userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      enablePasswordRetrieval="true"  
      enablePasswordReset="false"  
      requiresQuestionAndAnswer="true"  
      passwordFormat="Encrypted"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateUser">
      <MemberSignature Language="C#" Value="public static bool ValidateUser (string username, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ValidateUser(string username, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.ValidateUser(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ValidateUser (username As String, password As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ValidateUser(System::String ^ username, System::String ^ password);" />
      <MemberSignature Language="F#" Value="static member ValidateUser : string * string -&gt; bool" Usage="System.Web.Security.Membership.ValidateUser (username, password)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">The name of the user to be validated.</param>
        <param name="password">The password for the specified user.</param>
        <summary>Verifies that the supplied user name and password are valid.</summary>
        <returns>
          <see langword="true" /> if the supplied user name and password are valid; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.ValidateUser%2A> Fornece uma maneira fácil de verificar um nome de usuário e senha da fonte de dados. Observe que, se o `username` parâmetro está vazio ou `null`, uma <xref:System.Web.HttpException> é gerada.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra a página de logon para um aplicativo ASP.NET configurado para usar autenticação de formulários e a <xref:System.Web.Security.Membership> classe. Se as credenciais de usuário fornecidas são inválidas, será exibida uma mensagem para o usuário. Caso contrário, o usuário é redirecionado para a URL solicitada originalmente pelo <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> método.  
  
> [!IMPORTANT]
>  Este exemplo contém uma caixa de texto que aceita a entrada do usuário, que é uma possível ameaça à segurança. Por padrão, a páginas da Web ASP.NET validam a entrada do usuário não inclui elementos HTML ou script. Para obter mais informações, consulte [Visão geral de explorações de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/logincs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/loginvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidatingPassword">
      <MemberSignature Language="C#" Value="public static event System.Web.Security.MembershipValidatePasswordEventHandler ValidatingPassword;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.Security.MembershipValidatePasswordEventHandler ValidatingPassword" />
      <MemberSignature Language="DocId" Value="E:System.Web.Security.Membership.ValidatingPassword" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event ValidatingPassword As MembershipValidatePasswordEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event System::Web::Security::MembershipValidatePasswordEventHandler ^ ValidatingPassword;" />
      <MemberSignature Language="F#" Value="member this.ValidatingPassword : System.Web.Security.MembershipValidatePasswordEventHandler " Usage="member this.ValidatingPassword : System.Web.Security.MembershipValidatePasswordEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipValidatePasswordEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a user is created, a password is changed, or a password is reset.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.MembershipProvider.ValidatingPassword> é gerado quando o <xref:System.Web.Security.MembershipProvider.CreateUser%2A> método, o <xref:System.Web.Security.MembershipProvider.ChangePassword%2A> método, ou o <xref:System.Web.Security.MembershipProvider.ResetPassword%2A> é chamado de método de um provedor de associação.  
  
 Você pode usar o <xref:System.Web.Security.MembershipProvider.ValidatingPassword> evento para validar valores de associação para usuários e formatos de senha.  
  
 Você pode cancelar atual <xref:System.Web.Security.MembershipProvider.CreateUser%2A>, <xref:System.Web.Security.MembershipProvider.ChangePassword%2A>, ou <xref:System.Web.Security.MembershipProvider.ResetPassword%2A> ação definindo o <xref:System.Web.Security.ValidatePasswordEventArgs.Cancel%2A> propriedade fornecido <xref:System.Web.Security.ValidatePasswordEventArgs> para `true` durante o <xref:System.Web.Security.MembershipProvider.ValidatingPassword> evento.  
  
 Se você cancelar a ação atual, definindo o <xref:System.Web.Security.ValidatePasswordEventArgs.Cancel%2A> propriedade `true`, você pode definir o <xref:System.Web.Security.ValidatePasswordEventArgs.FailureInformation%2A> propriedade fornecido <xref:System.Web.Security.ValidatePasswordEventArgs> a uma exceção que descreve o motivo da falha de validação de senha. O método de chamada lançará a exceção que o <xref:System.Web.Security.ValidatePasswordEventArgs.FailureInformation%2A> estiver definida como. Se o <xref:System.Web.Security.ValidatePasswordEventArgs.FailureInformation%2A> é de propriedade `null`, o chamador lançará uma exceção genérica de falha de validação de senha.  
  
   
  
## Examples  
 O seguinte exemplo de código mostra um <xref:System.Web.Security.MembershipProvider.ValidatingPassword> evento que valida o formato da senha de um usuário e cancela a ação se a senha não coincide com o formato necessário.  
  
 [!code-csharp[System.Web.Security.Membership#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/CreateUser3cs.aspx#11)]
 [!code-vb[System.Web.Security.Membership#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/CreateUser3vb.aspx#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>