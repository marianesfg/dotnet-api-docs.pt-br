<Type Name="SqlRoleProvider" FullName="System.Web.Security.SqlRoleProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d555023d319f49211f2a3b1a31cace7cb962d5c6" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36596637" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SqlRoleProvider : System.Web.Security.RoleProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlRoleProvider extends System.Web.Security.RoleProvider" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.SqlRoleProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlRoleProvider&#xA;Inherits RoleProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlRoleProvider : System::Web::Security::RoleProvider" />
  <TypeSignature Language="F#" Value="type SqlRoleProvider = class&#xA;    inherit RoleProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Security.RoleProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Manages storage of role membership information for an ASP.NET application in a SQL Server database.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa classe é usada pelo <xref:System.Web.Security.Roles> e <xref:System.Web.Security.RolePrincipal> classes para fornecer serviços de gerenciamento de função para um aplicativo ASP.NET usando um banco de dados do SQL Server. Você pode usar o gerenciamento de função para especificar diferentes níveis de autorização para seu aplicativo.  
  
 Para usar o <xref:System.Web.Security.SqlRoleProvider> classe, você deve primeiro criar o banco de dados do SQL Server usado pelo <xref:System.Web.Security.SqlRoleProvider>. Para criar o banco de dados usado pelo <xref:System.Web.Security.SqlRoleProvider> classe, execute o `aspnet_regsql.exe` executável encontrado na C:\WINDOWS\Microsoft.NET\Framework\ `versionNumber` pasta e especifique o `-Ar` opção (por exemplo, `aspnet_regsql.exe -Ar`). O banco de dados criado é chamado Aspnetdb. Como alternativa, execute o aspnet_regsql.exe para consultar o modo de configuração de GUI e escolha configurar todos os recursos do ASP.NET.  
  
 Se o provedor de função é configurado com uma cadeia de caracteres de conexão que usa segurança integrada, a conta de processo do aplicativo ASP.NET deve ter direitos para se conectar ao banco de dados do SQL Server.  
  
 O arquivo Machine. config é configurado com um <xref:System.Web.Security.SqlRoleProvider> instância nomeada AspNetSqlProvider que se conecta ao SQL Server no computador local. Você pode usar essa instância do provedor ou especificar sua própria no arquivo Web. config para seu aplicativo ASP.NET. Para usar a instância AspNetSqlProvider, especifique AspNetSqlProvider como o `defaultProvider` em sua configuração.  
  
 Você pode configurar o <xref:System.Web.Security.SqlRoleProvider> para usar as mesmas informações de banco de dados e o usuário que o <xref:System.Web.Security.SqlMembershipProvider> para usar um único banco de dados para obter informações de autenticação e autorização. Para usar o mesmo banco de dados de associação e informações de função, execute o aspnet_regsql.exe e instale o recurso de associação. Em seguida, especifique a mesma cadeia de conexão em sua configuração para os seus <xref:System.Web.Security.SqlRoleProvider> e <xref:System.Web.Security.SqlMembershipProvider> instâncias. Além disso, certifique-se de que ambas as instâncias do provedor estão configuradas com o mesmo <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A>.  
  
   
  
## Examples  
 O exemplo a seguir mostra o arquivo Web. config para um aplicativo ASP.NET configurado para usar um <xref:System.Web.Security.SqlRoleProvider> objeto e o <xref:System.Web.Security.SqlMembershipProvider>. O elemento é configurado para permitir acesso aos usuários autenticados somente à função Administradores.  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=localhost;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  <system.web>  
    <authentication mode="Forms" >  
      <forms loginUrl="logincs.aspx"  
      name=".ASPXFORMSAUTH" />  
    </authentication>  
    <authorization>  
      <deny users="?" />  
         <allow roles="Administrators" />  
         <deny users="*" />  
    </authorization>  
    <membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="15">  
      <providers>  
        <add   
          name="SqlProvider"   
          type="System.Web.Security.SqlMembershipProvider"   
          connectionStringName="SqlServices"  
          enablePasswordRetrieval="false"  
          enablePasswordReset="false"  
          requiresQuestionAndAnswer="false"   
          passwordFormat="Hashed"   
          applicationName="SampleApplication" />  
      </providers>  
    </membership>  
    <roleManager defaultProvider="SqlProvider"   
      enabled="true"  
      cacheRolesInCookie="true"  
      cookieName=".ASPROLES"  
      cookieTimeout="30"  
      cookiePath="/"  
      cookieRequireSSL="true"  
      cookieSlidingExpiration="true"  
      cookieProtection="All" >  
      <providers>  
        <add  
          name="SqlProvider"  
          type="System.Web.Security.SqlRoleProvider"  
          connectionStringName="SqlServices"   
          applicationName="SampleApplication" />  
      </providers>  
    </roleManager>  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlRoleProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlRoleProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates an instance of the <see cref="T:System.Web.Security.SqlRoleProvider" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.SqlRoleProvider.%23ctor%2A> construtor é chamado pelo ASP.NET para criar uma instância do <xref:System.Web.Security.SqlRoleProvider> classe conforme especificado na configuração do aplicativo. Este construtor não se destina a ser usado em seu código.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddUsersToRoles">
      <MemberSignature Language="C#" Value="public override void AddUsersToRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void AddUsersToRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.AddUsersToRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub AddUsersToRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void AddUsersToRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="override this.AddUsersToRoles : string[] * string[] -&gt; unit" Usage="sqlRoleProvider.AddUsersToRoles (usernames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">A string array of user names to be added to the specified roles.</param>
        <param name="roleNames">A string array of role names to add the specified user names to.</param>
        <summary>Adds the specified user names to each of the specified roles.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> método é chamado pelo <xref:System.Web.Security.Roles> classe para associar um ou mais usuários uma ou mais funções no banco de dados do SQL Server especificado no arquivo de configuração do aplicativo ASP.NET (Web. config). Este método é chamado pelo <xref:System.Web.Security.Roles.AddUserToRole%2A>, <xref:System.Web.Security.Roles.AddUserToRoles%2A>, <xref:System.Web.Security.Roles.AddUsersToRole%2A>, e <xref:System.Web.Security.Roles.AddUsersToRoles%2A> métodos de <xref:System.Web.Security.Roles> classe.  
  
 As atualizações de banco de dados que são executadas durante a chamada para o <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> método são feitas em uma transação. Se um erro for encontrado, como um nome de usuário que já está em uma função especificada, a transação é revertida e nenhuma atualização será executada.  
  
 Se o <xref:System.Web.Security.SqlRoleProvider> está sendo usado com o <xref:System.Web.Security.SqlMembershipProvider>e um dos nomes de usuário especificado não existe no banco de dados, o nome de usuário será adicionado automaticamente ao banco de dados.  
  
 Nomes de usuário e nomes de função não podem conter vírgulas.  
  
   
  
## Examples  
 O exemplo de código a seguir adiciona um ou mais usuários a uma função ou remove um usuário de uma função. Para obter um exemplo de um arquivo Web. config que permita o gerenciamento de função, consulte <xref:System.Web.Security.SqlRoleProvider>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">One of the roles in <paramref name="roleNames" /> is <see langword="null" />.  -or-  One of the users in <paramref name="usernames" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">One of the roles in <paramref name="roleNames" /> is an empty string or contains a comma.  -or-  One of the users in <paramref name="usernames" /> is an empty string or contains a comma.  -or-  One of the roles in <paramref name="roleNames" /> is longer than 256 characters.  -or-  One of the users in <paramref name="usernames" /> is longer than 256 characters.  -or-  <paramref name="roleNames" /> contains a duplicate element.  -or-  <paramref name="usernames" /> contains a duplicate element.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">One or more of the specified role names was not found.  -or-  One or more of the specified user names was not found.  -or-  One or more of the specified user names is already associated with one or more of the specified role names.  -or-  An unknown error occurred while communicating with the database.</exception>
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public override string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.SqlRoleProvider.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ApplicationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationName : string with get, set" Usage="System.Web.Security.SqlRoleProvider.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the application for which to store and retrieve role information.</summary>
        <value>O nome do aplicativo para armazenar e recuperar informações de função. O padrão é o <see cref="P:System.Web.HttpRequest.ApplicationPath" /> valor da propriedade atual <see cref="P:System.Web.HttpContext.Request" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A> é usado pelo <xref:System.Web.Security.SqlRoleProvider> para associar usuários e funções diferentes aplicativos. Isso permite que vários aplicativos usar o mesmo banco de dados para armazenar informações de usuário e função sem exibir conflitos entre nomes duplicados ou nomes de função. Vários aplicativos ASP.NET podem usar o mesmo banco de dados, especificando o mesmo valor no <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A> propriedade. O <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A> propriedade pode ser definida programaticamente, ou pode ser definida declarativamente no arquivo de configuração para o aplicativo Web usando o `applicationName` atributo.  
  
 Se um valor não for especificado para o `applicationName` atributo no arquivo de configuração para o aplicativo Web, em seguida, o <xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=nameWithType> valor da propriedade atual <xref:System.Web.HttpContext.Request%2A?displayProperty=nameWithType> objeto é usado.  
  
> [!CAUTION]
>  Como uma instância do provedor de função única padrão é usada para todas as solicitações atendidas por um <xref:System.Web.HttpApplication> do objeto, você pode ter várias solicitações de execução simultaneamente e a tentativa de definir o <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A> o valor da propriedade. O <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A> propriedade não é thread safe para várias gravações e alterando o <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A> o valor da propriedade pode resultar em comportamento inesperado para vários usuários de um aplicativo. É recomendável que você evite escrever código que permite aos usuários definir o <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A> propriedade, a menos que você precisa. Um exemplo de um aplicativo em que a configuração de <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A> propriedade pode ser necessária é um aplicativo administrativo que gerencia os dados de função para vários aplicativos. Esse aplicativo deve ser um aplicativo de usuário único e não é um aplicativo Web.  
  
   
  
## Examples  
 O exemplo a seguir mostra o elemento de `system.web` seção do arquivo Web. config para um aplicativo ASP.NET. Especifica o aplicativo <xref:System.Web.Security.SqlRoleProvider> instância e conjuntos de <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A> propriedade `MyApplication`.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">An attempt was made to set the <see cref="P:System.Web.Security.SqlRoleProvider.ApplicationName" /> property by a caller that does not have <see cref="F:System.Web.AspNetHostingPermissionLevel.High" /> ASP.NET hosting permission.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">An attempt was made to set the <see cref="P:System.Web.Security.SqlRoleProvider.ApplicationName" /> to a string that is longer than 256 characters.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateRole">
      <MemberSignature Language="C#" Value="public override void CreateRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CreateRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.CreateRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CreateRole (roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CreateRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="override this.CreateRole : string -&gt; unit" Usage="sqlRoleProvider.CreateRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">The name of the role to create.</param>
        <summary>Adds a new role to the role database.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.SqlRoleProvider.CreateRole%2A> método é chamado pelo <xref:System.Web.Security.Roles> classe para criar uma função no banco de dados do SQL Server especificado no arquivo de configuração do aplicativo ASP.NET (Web. config).  
  
 O comprimento máximo para o nome da função é de 256 caracteres. Os nomes de função não diferenciam maiusculas de minúsculas. Vírgulas não são permitidas em nomes de função.  
  
   
  
## Examples  
 O exemplo de código a seguir cria uma nova função no banco de dados. Para obter um exemplo de um arquivo Web. config que permita o gerenciamento de função, consulte <xref:System.Web.Security.SqlRoleProvider>.  
  
> [!IMPORTANT]
>  Este exemplo contém uma caixa de texto que aceita a entrada do usuário, que é uma possível ameaça à segurança. Por padrão, a páginas da Web ASP.NET validam a entrada do usuário não inclui elementos HTML ou script. Para obter mais informações, consulte [Visão geral de explorações de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> is an empty string or contains a comma.  -or-  <paramref name="roleName" /> is longer than 256 characters.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">
          <paramref name="roleName" /> already exists in the database.  -or-  An unknown error occurred while communicating with the database.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public override bool DeleteRole (string roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool DeleteRole(string roleName, bool throwOnPopulatedRole) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.DeleteRole(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeleteRole (roleName As String, throwOnPopulatedRole As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool DeleteRole(System::String ^ roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="F#" Value="override this.DeleteRole : string * bool -&gt; bool" Usage="sqlRoleProvider.DeleteRole (roleName, throwOnPopulatedRole)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="throwOnPopulatedRole" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="roleName">The name of the role to delete.</param>
        <param name="throwOnPopulatedRole">If <see langword="true" />, throws an exception if <c>roleName</c> has one or more members.</param>
        <summary>Removes a role from the role database.</summary>
        <returns>
          <see langword="true" /> if the role was successfully deleted; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.SqlRoleProvider.DeleteRole%2A> método é chamado pelo <xref:System.Web.Security.Roles> classe para excluir uma função de banco de dados do SQL Server especificado no arquivo de configuração do aplicativo ASP.NET (Web. config). Quando uma função é excluída, a lista de usuários associados a essa função também é excluída do banco de dados. As informações do usuário no banco de dados não são afetadas.  
  
 Se `throwOnPopulatedRole` é `true`, em seguida, uma exceção será lançada e a função não será excluída se a função identificado pelo `roleName` parâmetro tem um ou mais membros. Se `throwOnPopulatedRole` é `false`, em seguida, a função será excluída se ela estiver vazia ou não.  
  
   
  
## Examples  
 O exemplo a seguir exclui uma função do banco de dados. Para obter um exemplo de um arquivo Web. config que permita o gerenciamento de função, consulte <xref:System.Web.Security.SqlRoleProvider>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> is <see langword="null" /> (<see langword="Nothing" /> in Visual Basic).</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> is an empty string or contains a comma.  -or-  <paramref name="roleName" /> is longer than 256 characters.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">
          <paramref name="roleName" /> has one or more members and <paramref name="throwOnPopulatedRole" /> is <see langword="true" />.  -or-  An unknown error occurred while communicating with the database.</exception>
      </Docs>
    </Member>
    <Member MemberName="FindUsersInRole">
      <MemberSignature Language="C#" Value="public override string[] FindUsersInRole (string roleName, string usernameToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] FindUsersInRole(string roleName, string usernameToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.FindUsersInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function FindUsersInRole (roleName As String, usernameToMatch As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ FindUsersInRole(System::String ^ roleName, System::String ^ usernameToMatch);" />
      <MemberSignature Language="F#" Value="override this.FindUsersInRole : string * string -&gt; string[]" Usage="sqlRoleProvider.FindUsersInRole (roleName, usernameToMatch)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="usernameToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">The role to search in.</param>
        <param name="usernameToMatch">The user name to search for.</param>
        <summary>Gets an array of user names in a role where the user name contains the specified user name to match.</summary>
        <returns>A string array containing the names of all the users where the user name matches <paramref name="usernameToMatch" /> and the user is a member of the specified role.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.SqlRoleProvider.FindUsersInRole%2A> método é chamado pelo <xref:System.Web.Security.Roles> classe e retorna uma lista de usuários em uma função onde o nome de usuário contém uma correspondência de fornecido `usernameToMatch` configurado `applicationName`. O <xref:System.Web.Security.SqlRoleProvider> procura um nome de usuário que corresponda a `usernameToMatch` valor de parâmetro usando os LIKE palavra-chave e oferece suporte ao SQL Server curingas. Por exemplo, se o `usernameToMatch` parâmetro for definido como "Usuário1", informações de associação para o usuário com o nome de usuário de "Usuário1" são retornadas, se ele existir. Se o `usernameToMatch` parâmetro for definido como "usuário %", em seguida, as informações de associação para usuários com o nome de usuário de "Usuário1", "Usuário2", "usuário_admin" e assim por diante são retornados.  
  
   
  
## Examples  
 O seguinte exemplo de código usa o <xref:System.Web.Security.Roles.FindUsersInRole%2A> método para exibir a associação de função com base na entrada do usuário. Para obter um exemplo de um arquivo Web. config que permita o gerenciamento de função, consulte <xref:System.Web.Security.Roles>.  
  
> [!IMPORTANT]
>  Este exemplo contém uma caixa de texto que aceita a entrada do usuário, que é uma possível ameaça à segurança. Por padrão, a páginas da Web ASP.NET validam a entrada do usuário não inclui elementos HTML ou script. Para obter mais informações, consulte [Visão geral de explorações de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.Roles#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/FindUsersInRolecs.aspx#11)]
 [!code-aspx-vb[System.Web.Security.Roles#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/FindUsersInRolevb.aspx#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> is <see langword="null" /> (<see langword="Nothing" /> in Visual Basic).  -or-  <paramref name="usernameToMatch" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> is an empty string or contains a comma.  -or-  <paramref name="usernameToMatch" /> is an empty string.  -or-  <paramref name="roleName" /> is longer than 256 characters.  -or-  <paramref name="usernameToMatch" /> is longer than 256 characters.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">
          <paramref name="roleName" /> was not found in the database.  -or-  An unknown error occurred while communicating with the database.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllRoles">
      <MemberSignature Language="C#" Value="public override string[] GetAllRoles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] GetAllRoles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.GetAllRoles" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAllRoles () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetAllRoles();" />
      <MemberSignature Language="F#" Value="override this.GetAllRoles : unit -&gt; string[]" Usage="sqlRoleProvider.GetAllRoles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a list of all the roles for the application.</summary>
        <returns>A string array containing the names of all the roles stored in the database for a particular application.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.SqlRoleProvider.GetAllRoles%2A> método é chamado pelo <xref:System.Web.Security.Roles> classe para recuperar uma lista de todas as funções no banco de dados do SQL Server especificado no arquivo de configuração do aplicativo ASP.NET (Web. config).  
  
   
  
## Examples  
 O seguinte exemplo de código usa o <xref:System.Web.Security.Roles.GetAllRoles%2A> método para obter a lista de funções para um aplicativo e associar os resultados para um <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> controle. Para obter um exemplo de um arquivo Web. config que permita o gerenciamento de função, consulte <xref:System.Web.Security.SqlRoleProvider>.  
  
> [!IMPORTANT]
>  Este exemplo contém uma caixa de texto que aceita a entrada do usuário, que é uma possível ameaça à segurança. Por padrão, a páginas da Web ASP.NET validam a entrada do usuário não inclui elementos HTML ou script. Para obter mais informações, consulte [Visão geral de explorações de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">An unknown error occurred while communicating with the database.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public override string[] GetRolesForUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] GetRolesForUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.GetRolesForUser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetRolesForUser (username As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetRolesForUser(System::String ^ username);" />
      <MemberSignature Language="F#" Value="override this.GetRolesForUser : string -&gt; string[]" Usage="sqlRoleProvider.GetRolesForUser username" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">The user to return a list of roles for.</param>
        <summary>Gets a list of the roles that a user is in.</summary>
        <returns>A string array containing the names of all the roles that the specified user is in.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.SqlRoleProvider.GetRolesForUser%2A> método é chamado pelo <xref:System.Web.Security.Roles> classe para recuperar uma lista de funções de usuário especificado do banco de dados do SQL Server especificado no arquivo de configuração do aplicativo ASP.NET (Web. config).  
  
   
  
## Examples  
 O seguinte exemplo de código usa o <xref:System.Web.Security.Roles.GetRolesForUser%2A> método para recuperar uma lista de funções para um usuário especificado e o associa a um <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> controle. Para obter um exemplo de um arquivo Web. config que permita o gerenciamento de função, consulte <xref:System.Web.Security.SqlRoleProvider>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="username" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="username" /> contains a comma.  -or-  <paramref name="username" /> is longer than 256 characters.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">An unknown error occurred while communicating with the database.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUsersInRole">
      <MemberSignature Language="C#" Value="public override string[] GetUsersInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] GetUsersInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.GetUsersInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetUsersInRole (roleName As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetUsersInRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="override this.GetUsersInRole : string -&gt; string[]" Usage="sqlRoleProvider.GetUsersInRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">The name of the role to get the list of users for.</param>
        <summary>Gets a list of users in the specified role.</summary>
        <returns>A string array containing the names of all the users who are members of the specified role.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.SqlRoleProvider.GetUsersInRole%2A> método é chamado pelo <xref:System.Web.Security.Roles> classe para recuperar a lista de usuários associados com a função especificada no banco de dados do SQL Server especificado no arquivo de configuração do aplicativo ASP.NET (Web. config).  
  
   
  
## Examples  
 O seguinte exemplo de código usa o <xref:System.Web.Security.Roles.GetUsersInRole%2A> método para obter uma lista de usuários em uma função específica e associar os resultados para um <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> controle. Para obter um exemplo de um arquivo Web. config que permita o gerenciamento de função, consulte <xref:System.Web.Security.SqlRoleProvider>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> is an empty string or contains a comma.  -or-  <paramref name="roleName" /> is longer than 256 characters.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">
          <paramref name="rolename" /> was not found in the database.  -or-  An unknown error occurred while communicating with the database.</exception>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override void Initialize (string name, System.Collections.Specialized.NameValueCollection config);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Initialize(string name, class System.Collections.Specialized.NameValueCollection config) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Initialize (name As String, config As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Initialize(System::String ^ name, System::Collections::Specialized::NameValueCollection ^ config);" />
      <MemberSignature Language="F#" Value="override this.Initialize : string * System.Collections.Specialized.NameValueCollection -&gt; unit" Usage="sqlRoleProvider.Initialize (name, config)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="config" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="name">The name of the <see cref="T:System.Web.Security.SqlRoleProvider" /> instance to initialize.</param>
        <param name="config">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> that contains the names and values of configuration options for the role provider.</param>
        <summary>Initializes the SQL Server role provider with the property values specified in the ASP.NET application's configuration file. This method is not intended to be used directly from your code.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método inicializa a <xref:System.Web.Security.SqlRoleProvider> com a propriedade de valores especificados no arquivo de configuração do aplicativo ASP.NET (Web. config) e não se destina a ser usado diretamente no seu código.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">The ASP.NET application is not running at <see cref="F:System.Web.AspNetHostingPermissionLevel.Medium" /> trust or higher.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="config" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">The <see langword="connectionStringName" /> attribute is empty or does not exist in the application configuration file for this <see cref="T:System.Web.Security.SqlRoleProvider" /> instance.  -or-  The <see langword="applicationName" /> attribute exceeds 256 characters.  -or-  The application configuration file for this <see cref="T:System.Web.Security.SqlRoleProvider" /> instance contains an unrecognized attribute.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public override bool IsUserInRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsUserInRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.IsUserInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsUserInRole (username As String, roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsUserInRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="override this.IsUserInRole : string * string -&gt; bool" Usage="sqlRoleProvider.IsUserInRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">The user name to search for.</param>
        <param name="roleName">The role to search in.</param>
        <summary>Gets a value indicating whether the specified user is in the specified role.</summary>
        <returns>
          <see langword="true" /> if the specified user name is in the specified role; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.SqlRoleProvider.IsUserInRole%2A> método é chamado pelo <xref:System.Web.Security.Roles> classe e o <xref:System.Security.Principal.IPrincipal.IsInRole%2A> método o <xref:System.Web.UI.Page.User%2A?displayProperty=nameWithType> propriedade para determinar se um usuário está associado uma função no banco de dados do SQL Server especificado no arquivo de configuração do aplicativo ASP.NET (Web. config).  
  
   
  
## Examples  
 O exemplo de código a seguir programaticamente verifica se o logon do usuário está na função de administradores antes de permitir que o usuário exibir as funções de usuário. Para obter um exemplo de um arquivo Web. config que permita o gerenciamento de função, consulte <xref:System.Web.Security.SqlRoleProvider>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> is <see langword="null" />.  -or-  <paramref name="username" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> is an empty string or contains a comma.  -or-  <paramref name="username" /> is contains a comma.  -or-  <paramref name="roleName" /> is longer than 256 characters.  -or-  <paramref name="username" /> is longer than 256 characters.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">An unknown error occurred while communicating with the database.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRoles">
      <MemberSignature Language="C#" Value="public override void RemoveUsersFromRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RemoveUsersFromRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub RemoveUsersFromRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void RemoveUsersFromRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="override this.RemoveUsersFromRoles : string[] * string[] -&gt; unit" Usage="sqlRoleProvider.RemoveUsersFromRoles (usernames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">A string array of user names to be removed from the specified roles.</param>
        <param name="roleNames">A string array of role names to remove the specified user names from.</param>
        <summary>Removes the specified user names from the specified roles.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> método é chamado pelo <xref:System.Web.Security.Roles> classe para remover um ou mais usuários de uma ou mais funções no banco de dados do SQL Server especificado no arquivo de configuração do aplicativo ASP.NET (Web. config). Este método é chamado pelo <xref:System.Web.Security.Roles.RemoveUserFromRole%2A>, <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A>, <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A>, e <xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> métodos de <xref:System.Web.Security.Roles> classe.  
  
 As atualizações de banco de dados que são executadas durante a chamada para <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> são feitas em uma transação. Se um erro for encontrado, como um nome de usuário que não existe ou um nome de usuário que já está em uma função especificada, a transação é revertida e nenhuma atualização será executada.  
  
 Nomes de usuário e nomes de função não podem conter vírgulas.  
  
   
  
## Examples  
 O exemplo de código a seguir adiciona um ou mais usuários a uma função ou remove um usuário de uma função. Para obter um exemplo de um arquivo Web. config que permita o gerenciamento de função, consulte <xref:System.Web.Security.SqlRoleProvider>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">One of the roles in <paramref name="roleNames" /> is <see langword="null" />.  -or-  One of the users in <paramref name="usernames" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">One of the roles in <paramref name="roleNames" /> is an empty string or contains a comma.  -or-  One of the users in <paramref name="usernames" /> is an empty string or contains a comma.  -or-  One of the roles in <paramref name="roleNames" /> is longer than 256 characters.  -or-  One of the users in <paramref name="usernames" /> is longer than 256 characters.  -or-  <paramref name="roleNames" /> contains a duplicate element.  -or-  <paramref name="usernames" /> contains a duplicate element.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">One or more of the specified user names was not found.  -or-  One or more of the specified role names was not found.  -or-  One or more of the specified user names is not associated with one or more of the specified role names.  -or-  An unknown error occurred while communicating with the database.</exception>
      </Docs>
    </Member>
    <Member MemberName="RoleExists">
      <MemberSignature Language="C#" Value="public override bool RoleExists (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool RoleExists(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.RoleExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function RoleExists (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool RoleExists(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="override this.RoleExists : string -&gt; bool" Usage="sqlRoleProvider.RoleExists roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">The name of the role to search for in the database.</param>
        <summary>Gets a value indicating whether the specified role name already exists in the role database.</summary>
        <returns>
          <see langword="true" /> if the role name already exists in the database; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Security.SqlRoleProvider.RoleExists%2A> método é chamado pelo <xref:System.Web.Security.Roles> classe para determinar se um nome de função existe no banco de dados do SQL Server especificado no arquivo de configuração do aplicativo ASP.NET (Web. config).  
  
   
  
## Examples  
 O seguinte exemplo de código usa o <xref:System.Web.Security.Roles.RoleExists%2A> método para determinar se um nome de função já existe antes de criar a função. Para obter um exemplo de um arquivo Web. config que permita o gerenciamento de função, consulte <xref:System.Web.Security.SqlRoleProvider>.  
  
> [!IMPORTANT]
>  Este exemplo contém uma caixa de texto que aceita a entrada do usuário, que é uma possível ameaça à segurança. Por padrão, a páginas da Web ASP.NET validam a entrada do usuário não inclui elementos HTML ou script. Para obter mais informações, consulte [Visão geral de explorações de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> is an empty string or contains a comma.  -or-  <paramref name="roleName" /> is longer than 256 characters.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">An unknown error occurred while communicating with the database.</exception>
      </Docs>
    </Member>
  </Members>
</Type>