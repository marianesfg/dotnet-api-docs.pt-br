<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Stream.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac54568f892f5b7d17d7b27e180e0f3f0087bd2650b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4568f892f5b7d17d7b27e180e0f3f0087bd2650b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Provides a generic view of a sequence of bytes.</source>
          <target state="translated">Fornece uma exibição genérica de uma sequência de bytes.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>This is an abstract class.</source>
          <target state="translated">Esta é uma classe abstrata.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source><ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> is the abstract base class of all streams.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> é a classe base abstrata de todos os fluxos.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>A stream is an abstraction of a sequence of bytes, such as a file, an input/output device, an inter-process communication pipe, or a TCP/IP socket.</source>
          <target state="translated">Um fluxo é uma abstração de uma sequência de bytes, como um arquivo, um dispositivo de arquivos entrada/saída, um pipe de comunicação de inter- processo, ou um soquete TCP/IP.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> class and its derived classes provide a generic view of these different types of input and output, and isolate the programmer from the specific details of the operating system and the underlying devices.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> classe e suas classes derivadas fornecem uma exibição genérica desses tipos diferentes de entrada e saída e isolar o programador de detalhes específicos do sistema operacional e os dispositivos subjacentes.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Streams involve three fundamental operations:</source>
          <target state="translated">Fluxos envolvem estas três operações fundamentais:</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>You can read from streams.</source>
          <target state="translated">Você pode ler a partir de fluxos.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Reading is the transfer of data from a stream into a data structure, such as an array of bytes.</source>
          <target state="translated">Leitura é a transferência de dados de um fluxo em uma estrutura de dados, como uma matriz de bytes.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>You can write to streams.</source>
          <target state="translated">Você pode escrever fluxos.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Writing is the transfer of data from a data structure into a stream.</source>
          <target state="translated">A gravação é a transferência de dados de uma estrutura de dados em um fluxo.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Streams can support seeking.</source>
          <target state="translated">Fluxos podem suportar busca.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Seeking refers to querying and modifying the current position within a stream.</source>
          <target state="translated">Busca refere-se a consulta e a modificação da posição atual dentro de um fluxo.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Seek capability depends on the kind of backing store a stream has.</source>
          <target state="translated">Busca de recurso depende do tipo de repositório de backup tem um fluxo.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For example, network streams have no unified concept of a current position, and therefore typically do not support seeking.</source>
          <target state="translated">Por exemplo, fluxos de rede não têm unificado conceito de uma posição atual e, portanto, normalmente não oferecem suporte a busca.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Some of the more commonly used streams that inherit from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> are <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.MemoryStream&gt;</ph>.</source>
          <target state="translated">Algumas das mais comumente usado fluxos que herdam de <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> são <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>, e <ph id="ph3">&lt;xref:System.IO.MemoryStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Depending on the underlying data source or repository, streams might support only some of these capabilities.</source>
          <target state="translated">Dependendo da fonte de dados subjacente ou o repositório, os fluxos podem suportar apenas alguns desses recursos.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>You can query a stream for its capabilities by using the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> properties of the <ph id="ph4">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
          <target state="translated">Você pode consultar um fluxo para seus recursos usando o <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph>, e <ph id="ph3">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> propriedades da <ph id="ph4">&lt;xref:System.IO.Stream&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph> methods read and write data in a variety of formats.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph> métodos ler e gravar dados em uma variedade de formatos.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For streams that support seeking, use the <ph id="ph1">&lt;xref:System.IO.Stream.Seek%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph> methods and the <ph id="ph3">&lt;xref:System.IO.Stream.Position%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.IO.Stream.Length%2A&gt;</ph> properties to query and modify the current position and length of a stream.</source>
          <target state="translated">Para fluxos de suporte para busca, use o <ph id="ph1">&lt;xref:System.IO.Stream.Seek%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph> métodos e <ph id="ph3">&lt;xref:System.IO.Stream.Position%2A&gt;</ph> e <ph id="ph4">&lt;xref:System.IO.Stream.Length%2A&gt;</ph> propriedades para consultar e modificar a posição atual e o comprimento de um fluxo.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">Este tipo implementa o <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">Quando você terminar de usar o tipo, descarte-direta ou indiretamente.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">Para descartar o tipo diretamente, chame seu <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> método em um <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> bloco.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">Para descartar indiretamente dele, use uma construção de linguagem, como <ph id="ph1">`using`</ph> (em c#) ou <ph id="ph2">`Using`</ph> (no Visual Basic).</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">Para obter mais informações, consulte a seção "Usando um objeto que implementa IDisposable" o <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> tópico de interface.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Disposing a <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object flushes any buffered data, and essentially calls the <ph id="ph2">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> method for you.</source>
          <target state="translated">Descartando um <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> objeto libera todos os dados armazenados em buffer e chama essencialmente o <ph id="ph2">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> método para você.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> also releases operating system resources such as file handles, network connections, or memory used for any internal buffering.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> também libera recursos do sistema operacional, como identificadores de arquivos, conexões de rede ou memória usada para qualquer buffer interno.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> class provides the capability of wrapping a buffered stream around another stream in order to improve read and write performance.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> classe fornece a capacidade de quebra automática de um fluxo em buffer em torno de outro fluxo para melhorar a leitura e gravação de desempenho.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class includes async methods to simplify asynchronous operations.</source>
          <target state="translated">Começando com o <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, o <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> classe inclui métodos assíncronos para simplificar as operações assíncronas.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>An async method contains <ph id="ph1">`Async`</ph> in its name, such as <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>.</source>
          <target state="translated">Contém um método assíncrono <ph id="ph1">`Async`</ph> em seu nome, como <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, e <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>These methods enable you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated">Esses métodos permitem executar operações de e/s de uso intensivo de recursos sem bloquear o thread principal.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">Essa consideração sobre o desempenho é particularmente importante em um aplicativo <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> ou <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> em que uma operação demorada de fluxo pode bloquear o thread de interface do usuário e fazer seu aplicativo parecer como se não estivesse funcionando.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">Os métodos assíncronos são usados em conjunto com o <ph id="ph1">`async`</ph> e <ph id="ph2">`await`</ph> palavras-chave no Visual Basic e c#.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>When used in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app, <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> includes two extension methods: <ph id="ph3">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A&gt;</ph>.</source>
          <target state="translated">Quando usado em uma <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> aplicativo, <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> inclui dois métodos de extensão: <ph id="ph3">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A&gt;</ph> e <ph id="ph4">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>These methods convert a <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object to a stream in the <ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph>.</source>
          <target state="translated">Esses métodos convertem um <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> objeto em um fluxo no <ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>You can also convert a stream in the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> to a <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> object by using the <ph id="ph3">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A&gt;</ph> methods.</source>
          <target state="translated">Você também pode converter um fluxo no <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> para um <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> objeto usando o <ph id="ph3">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A&gt;</ph> e <ph id="ph4">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Convert Between .NET Framework Streams and Windows Runtime Streams<ept id="p1">](~/docs/standard/io/how-to-convert-between-dotnet-streams-and-winrt-streams.md)</ept></source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>como: converter entre fluxos do .NET Framework e tempo de execução do Windows<ept id="p1">](~/docs/standard/io/how-to-convert-between-dotnet-streams-and-winrt-streams.md)</ept></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Some stream implementations perform local buffering of the underlying data to improve performance.</source>
          <target state="translated">Algumas implementações de fluxo executam buffer local dos dados subjacentes para melhorar o desempenho.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For such streams, you can use the <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> method to clear any internal buffers and ensure that all data has been written to the underlying data source or repository.</source>
          <target state="translated">Para tais fluxos, você pode usar o <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> método para limpar qualquer buffers internos e certifique-se de que todos os dados foram gravados para a fonte de dados ou o repositório subjacente.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>If you need a stream with no backing store (also known as a bit bucket), use the <ph id="ph1">&lt;xref:System.IO.Stream.Null&gt;</ph> field to retrieve an instance of a stream that is designed for this purpose.</source>
          <target state="translated">Se você precisar de um fluxo com nenhum armazenamento de backup (também conhecido como um bloco de bits), use o <ph id="ph1">&lt;xref:System.IO.Stream.Null&gt;</ph> campo a recuperar uma instância de um fluxo que foi projetado para essa finalidade.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The following example demonstrates how to use two <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> objects to asynchronously copy the files from one directory to another directory.</source>
          <target state="translated">O exemplo a seguir demonstra como usar duas <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> objetos de forma assíncrona copiar os arquivos de um diretório para outro diretório.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> class derives from the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> classe deriva de <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button.Click&gt;</ph> event handler for the <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> control is marked with the <ph id="ph3">`async`</ph> modifier because it calls an asynchronous method.</source>
          <target state="translated">Observe que o manipulador de eventos <ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button.Click&gt;</ph> para o controle <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> está marcado com o modificador <ph id="ph3">`async`</ph>, pois ele chama um método assíncrono.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>When you implement a derived class of <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>, you must provide implementations for the <ph id="ph2">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> methods.</source>
          <target state="translated">Quando você implementa uma classe derivada de <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>, você deve fornecer implementações para o <ph id="ph2">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> e <ph id="ph3">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The asynchronous methods <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>, and <ph id="ph3">&lt;see cref="M:System.IO.Stream.CopyToAsync(System.IO.Stream)" /&gt;</ph> use the synchronous methods <ph id="ph4">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> and <ph id="ph5">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> in their implementations.</source>
          <target state="translated">Os métodos assíncronos <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>, e <ph id="ph3">&lt;see cref="M:System.IO.Stream.CopyToAsync(System.IO.Stream)" /&gt;</ph> usar os métodos síncronos <ph id="ph4">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> e <ph id="ph5">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> em suas implementações.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Therefore, your implementations of <ph id="ph1">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> will work correctly with the asynchronous methods.</source>
          <target state="translated">Portanto, suas implementações de <ph id="ph1">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> e <ph id="ph2">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> funcionarão corretamente com os métodos assíncronos.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The default implementations of <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadByte" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.IO.Stream.WriteByte(System.Byte)" /&gt;</ph> create a new single-element byte array, and then call your implementations of <ph id="ph3">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> and <ph id="ph4">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</source>
          <target state="translated">As implementações padrão de <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadByte" /&gt;</ph> e <ph id="ph2">&lt;see cref="M:System.IO.Stream.WriteByte(System.Byte)" /&gt;</ph> criar uma nova matriz de byte único elemento e, em seguida, chamar as implementações de <ph id="ph3">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> e <ph id="ph4">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>When you derive from <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>, we recommend that you override these methods to access your internal buffer, if you have one, for substantially better performance.</source>
          <target state="translated">Quando você deriva de <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>, recomendamos que você substitua esses métodos para acessar o buffer interno, se você tiver um, para um desempenho significativamente melhor.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>You must also provide implementations of <ph id="ph1">&lt;see cref="P:System.IO.Stream.CanRead" /&gt;</ph>, <ph id="ph2">&lt;see cref="P:System.IO.Stream.CanSeek" /&gt;</ph>, <ph id="ph3">&lt;see cref="P:System.IO.Stream.CanWrite" /&gt;</ph>, <ph id="ph4">&lt;see cref="M:System.IO.Stream.Flush" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.IO.Stream.Length" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.IO.Stream.Position" /&gt;</ph>, <ph id="ph7">&lt;see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)" /&gt;</ph>, and <ph id="ph8">&lt;see cref="M:System.IO.Stream.SetLength(System.Int64)" /&gt;</ph>.</source>
          <target state="translated">Você também deve fornecer implementações de <ph id="ph1">&lt;see cref="P:System.IO.Stream.CanRead" /&gt;</ph>, <ph id="ph2">&lt;see cref="P:System.IO.Stream.CanSeek" /&gt;</ph>, <ph id="ph3">&lt;see cref="P:System.IO.Stream.CanWrite" /&gt;</ph>, <ph id="ph4">&lt;see cref="M:System.IO.Stream.Flush" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.IO.Stream.Length" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.IO.Stream.Position" /&gt;</ph>, <ph id="ph7">&lt;see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)" /&gt;</ph>, e <ph id="ph8">&lt;see cref="M:System.IO.Stream.SetLength(System.Int64)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Do not override the <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph> method, instead, put all the <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph> cleanup logic in the <ph id="ph3">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> method.</source>
          <target state="translated">Não substituir o <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph> método, em vez disso, colocar todos o <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph> lógica de limpeza no <ph id="ph3">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For more information, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>implementar um método Dispose<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.#ctor">
          <source><ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> is the abstract base class of all streams.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> é a classe base abstrata de todos os fluxos.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.#ctor">
          <source>Some of the more commonly used streams that inherit from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> are <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.MemoryStream&gt;</ph>.</source>
          <target state="translated">Algumas das mais comumente usado fluxos que herdam de <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> são <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>, e <ph id="ph3">&lt;xref:System.IO.MemoryStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The buffer to read the data into.</source>
          <target state="translated">O buffer para ler os dados.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing data read from the stream.</source>
          <target state="translated">O deslocamento de bytes no <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> em que se começa a gravar os dados lidos do fluxo.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">O número máximo de bytes a serem lidos.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An optional asynchronous callback, to be called when the read is complete.</source>
          <target state="translated">Um retorno de chamada assíncrono opcional, a ser chamado quando a leitura for concluída.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous read request from other requests.</source>
          <target state="translated">Um objeto fornecido pelo usuário que distingue essa solicitação de leitura assíncrona específica de outras solicitações.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous read operation.</source>
          <target state="translated">Inicia uma operação de leitura assíncrona.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> instead.)</source>
          <target state="translated">(Considere o uso de <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> em seu lugar.)</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents the asynchronous read, which could still be pending.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> que representa a operação de leitura assíncrona, que ainda pode estar pendente.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> to implement asynchronous I/O operations.</source>
          <target state="translated">No .NET Framework 4, e em versões anteriores, você precisa usar métodos como <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> para implementar operações de E/S assíncronas.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, help you implement asynchronous I/O operations more easily.</source>
          <target state="translated">Esses métodos ainda estão disponíveis no <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> para dar suporte a código herdado; no entanto, os novos métodos assíncronos, tais como <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, e <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, ajudam a implementar operações de e/s assíncronas mais facilmente.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The default implementation of <ph id="ph1">`BeginRead`</ph> on a stream calls the <ph id="ph2">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> method synchronously, which means that <ph id="ph3">`Read`</ph> might block on some streams.</source>
          <target state="translated">A implementação padrão de <ph id="ph1">`BeginRead`</ph> em um fluxo de chamadas a <ph id="ph2">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> método de forma síncrona, o que significa que <ph id="ph3">`Read`</ph> podem bloquear em alguns fluxos.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>However, instances of classes such as <ph id="ph1">`FileStream`</ph> and <ph id="ph2">`NetworkStream`</ph> fully support asynchronous operations if the instances have been opened asynchronously.</source>
          <target state="translated">No entanto, instâncias de classes, como <ph id="ph1">`FileStream`</ph> e <ph id="ph2">`NetworkStream`</ph> suporte para operações assíncronas totalmente se as instâncias de tem sido abertas assincronamente.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Therefore, calls to <ph id="ph1">`BeginRead`</ph> will not block on those streams.</source>
          <target state="translated">Portanto, chamadas para <ph id="ph1">`BeginRead`</ph> não bloqueará esses fluxos.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>You can override <ph id="ph1">`BeginRead`</ph> (by using async delegates, for example) to provide asynchronous behavior.</source>
          <target state="translated">Você pode substituir <ph id="ph1">`BeginRead`</ph> (usando delegados assíncronos, por exemplo) para fornecer o comportamento assíncrono.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Pass the <ph id="ph1">`IAsyncResult`</ph> return value to the <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> method of the stream to determine how many bytes were read and to release operating system resources used for reading.</source>
          <target state="translated">Passar o <ph id="ph1">`IAsyncResult`</ph> retornar o valor para o <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> método do fluxo para determinar o número de bytes foram lidas e para liberar recursos do sistema operacional usados para leitura.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> must be called once for every call to <ph id="ph2">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> deve ser chamado uma vez para cada chamada a <ph id="ph2">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>You can do this either by using the same code that called <ph id="ph1">`BeginRead`</ph> or in a callback passed to <ph id="ph2">`BeginRead`</ph>.</source>
          <target state="translated">Você pode fazer isso usando o mesmo código que chamou <ph id="ph1">`BeginRead`</ph> ou em um retorno de chamada transmitido para <ph id="ph2">`BeginRead`</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The current position in the stream is updated when the asynchronous read or write is issued, not when the I/O operation completes.</source>
          <target state="translated">A posição atual no fluxo é atualizada quando a gravação ou leitura assíncrona é emitida, não quando a operação de e/s é concluída.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Multiple simultaneous asynchronous requests render the request completion order uncertain.</source>
          <target state="translated">Várias solicitações assíncronas simultâneas renderizam a ordem de conclusão de solicitação indefinido.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> propriedade para determinar se a instância atual oferece suporte à leitura.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <ph id="ph1">`BeginRead`</ph>.</source>
          <target state="translated">Se um fluxo está fechado ou se você passar um argumento inválido, as exceções são geradas imediatamente de <ph id="ph1">`BeginRead`</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Errors that occur during an asynchronous read request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling <ph id="ph1">`EndRead`</ph>.</source>
          <target state="translated">Erros que ocorrem durante uma solicitação de leitura assíncrona, como uma falha de disco durante a solicitação de e/s, ocorrer no thread de pool de thread e lançam exceções ao chamar <ph id="ph1">`EndRead`</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Attempted an asynchronous read past the end of the stream, or a disk error occurs.</source>
          <target state="translated">Tentativa de uma leitura assíncrona após o final do fluxo ou ocorre um erro de disco.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">Um ou mais argumentos são inválidos.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Foram chamados métodos depois que o fluxo foi fechado.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The current <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> implementation does not support the read operation.</source>
          <target state="translated">A implementação <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> atual não dá suporte à operação de leitura.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The buffer to write data from.</source>
          <target state="translated">O buffer do qual os dados serão gravados.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> from which to begin writing.</source>
          <target state="translated">O deslocamento de bytes no <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> do qual iniciar a gravação.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">O número máximo de bytes a serem gravados.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An optional asynchronous callback, to be called when the write is complete.</source>
          <target state="translated">Um retorno de chamada assíncrona opcional, a ser chamada quando a operação de gravação for concluída.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous write request from other requests.</source>
          <target state="translated">Um objeto fornecido pelo usuário que distingue essa solicitação de gravação assíncrona específica de outras solicitações.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous write operation.</source>
          <target state="translated">Inicia uma operação de gravação assíncrona.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> instead.)</source>
          <target state="translated">(Considere o uso de <ph id="ph1">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> em seu lugar.)</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see langword="IAsyncResult" /&gt;</ph> that represents the asynchronous write, which could still be pending.</source>
          <target state="translated">Um <ph id="ph1">&lt;see langword="IAsyncResult" /&gt;</ph> que representa a gravação assíncrona, que ainda pode estar pendente.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> to implement asynchronous I/O operations.</source>
          <target state="translated">No .NET Framework 4, e em versões anteriores, você precisa usar métodos como <ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> para implementar operações de E/S assíncronas.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, help you implement asynchronous I/O operations more easily.</source>
          <target state="translated">Esses métodos ainda estão disponíveis no <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> para dar suporte a código herdado; no entanto, os novos métodos assíncronos, tais como <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, e <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, ajudam a implementar operações de e/s assíncronas mais facilmente.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The default implementation of <ph id="ph1">`BeginWrite`</ph> on a stream calls the <ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph> method synchronously, which means that <ph id="ph3">`Write`</ph> might block on some streams.</source>
          <target state="translated">A implementação padrão de <ph id="ph1">`BeginWrite`</ph> em um fluxo de chamadas a <ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph> método de forma síncrona, o que significa que <ph id="ph3">`Write`</ph> podem bloquear em alguns fluxos.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>However, instances of classes such as <ph id="ph1">`FileStream`</ph> and <ph id="ph2">`NetworkStream`</ph> fully support asynchronous operations if the instances have been opened asynchronously.</source>
          <target state="translated">No entanto, instâncias de classes, como <ph id="ph1">`FileStream`</ph> e <ph id="ph2">`NetworkStream`</ph> suporte para operações assíncronas totalmente se as instâncias de tem sido abertas assincronamente.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Therefore, calls to <ph id="ph1">`BeginWrite`</ph> will not block on those streams.</source>
          <target state="translated">Portanto, chamadas para <ph id="ph1">`BeginWrite`</ph> não bloqueará esses fluxos.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>You can override <ph id="ph1">`BeginWrite`</ph> (by using async delegates, for example) to provide asynchronous behavior.</source>
          <target state="translated">Você pode substituir <ph id="ph1">`BeginWrite`</ph> (usando delegados assíncronos, por exemplo) para fornecer o comportamento assíncrono.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Pass the <ph id="ph1">`IAsyncResult`</ph> returned by the current method to <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> to ensure that the write completes and frees resources appropriately.</source>
          <target state="translated">Passar o <ph id="ph1">`IAsyncResult`</ph> retornado pelo método atual para <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> para garantir que a gravação é concluída e libera recursos adequadamente.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> must be called once for every call to <ph id="ph2">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> deve ser chamado uma vez para cada chamada a <ph id="ph2">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>You can do this either by using the same code that called <ph id="ph1">`BeginWrite`</ph> or in a callback passed to <ph id="ph2">`BeginWrite`</ph>.</source>
          <target state="translated">Você pode fazer isso usando o mesmo código que chamou <ph id="ph1">`BeginWrite`</ph> ou em um retorno de chamada transmitido para <ph id="ph2">`BeginWrite`</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If an error occurs during an asynchronous write, an exception will not be thrown until <ph id="ph1">`EndWrite`</ph> is called with the <ph id="ph2">`IAsyncResult`</ph> returned by this method.</source>
          <target state="translated">Se ocorrer um erro durante uma gravação assíncrona, uma exceção será lançada não até <ph id="ph1">`EndWrite`</ph> é chamado com o <ph id="ph2">`IAsyncResult`</ph> retornado por esse método.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If a stream is writable, writing at the end of the stream expands the stream.</source>
          <target state="translated">Se um fluxo gravável, gravando no final do fluxo expande o fluxo.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The current position in the stream is updated when you issue the asynchronous read or write, not when the I/O operation completes.</source>
          <target state="translated">A posição atual no fluxo é atualizada quando você emitir a gravação ou leitura assíncrona não quando a operação de e/s é concluída.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Multiple simultaneous asynchronous requests render the request completion order uncertain.</source>
          <target state="translated">Várias solicitações assíncronas simultâneas renderizam a ordem de conclusão de solicitação indefinido.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> propriedade para determinar se a instância atual oferece suporte à gravação.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <ph id="ph1">`BeginWrite`</ph>.</source>
          <target state="translated">Se um fluxo está fechado ou se você passar um argumento inválido, as exceções são geradas imediatamente de <ph id="ph1">`BeginWrite`</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling <ph id="ph1">`EndWrite`</ph>.</source>
          <target state="translated">Erros que ocorrem durante uma solicitação de gravação assíncrona, como uma falha de disco durante a solicitação de e/s, ocorrer no thread de pool de thread e lançam exceções ao chamar <ph id="ph1">`EndWrite`</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Attempted an asynchronous write past the end of the stream, or a disk error occurs.</source>
          <target state="translated">Houve uma tentativa de gravação assíncrona após o final do fluxo ou ocorreu um erro de disco.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">Um ou mais argumentos são inválidos.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Foram chamados métodos depois que o fluxo foi fechado.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The current <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> implementation does not support the write operation.</source>
          <target state="translated">A implementação <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> atual não dá suporte à operação de gravação.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.CanRead">
          <source>When overridden in a derived class, gets a value indicating whether the current stream supports reading.</source>
          <target state="translated">Quando substituído em uma classe derivada, obtém um valor que indica se o fluxo atual dá suporte à leitura.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanRead">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports reading; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o fluxo der suporte à leitura; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanRead">
          <source>If a class derived from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> does not support reading, calls to the <ph id="ph2">&lt;xref:System.IO.Stream.Read%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.ReadByte%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> methods throw a <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">Se uma classe derivada de <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> não dá suporte para leitura, chamadas para o <ph id="ph2">&lt;xref:System.IO.Stream.Read%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.ReadByte%2A&gt;</ph>, e <ph id="ph4">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> métodos lançam uma <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanRead">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Se o fluxo está fechado, essa propriedade retornará <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanRead">
          <source>The following is an example of using the <ph id="ph1">`CanRead`</ph> property.</source>
          <target state="translated">A seguir está um exemplo de como usar o <ph id="ph1">`CanRead`</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.CanSeek">
          <source>When overridden in a derived class, gets a value indicating whether the current stream supports seeking.</source>
          <target state="translated">Quando substituído em uma classe derivada, obtém um valor que indica se o fluxo atual dá suporte à busca.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanSeek">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports seeking; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o fluxo der suporte à busca, caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanSeek">
          <source>If a class derived from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> does not support seeking, calls to <ph id="ph2">&lt;xref:System.IO.Stream.Length%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.Position%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.Seek%2A&gt;</ph> throw a <ph id="ph6">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">Se uma classe derivada de <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> não dá suporte para busca, chamadas para <ph id="ph2">&lt;xref:System.IO.Stream.Length%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.Position%2A&gt;</ph>, e <ph id="ph5">&lt;xref:System.IO.Stream.Seek%2A&gt;</ph> lançar um <ph id="ph6">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanSeek">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Se o fluxo está fechado, essa propriedade retornará <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.CanTimeout">
          <source>Gets a value that determines whether the current stream can time out.</source>
          <target state="translated">Obtém um valor que determina se o fluxo atual pode atingir o tempo limite.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanTimeout">
          <source>A value that determines whether the current stream can time out.</source>
          <target state="translated">Um valor que determina se o fluxo atual pode atingir o tempo limite.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanTimeout">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.CanTimeout%2A&gt;</ph> property always returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IO.Stream.CanTimeout%2A&gt;</ph> propriedade sempre retorna <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanTimeout">
          <source>Some stream implementations require different behavior, such as <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, which times out if network connectivity is interrupted or lost.</source>
          <target state="translated">Algumas implementações de fluxo exigem um comportamento diferente, como <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, que o tempo limite se a conectividade de rede for interrompida ou perdida.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanTimeout">
          <source>If you are implementing a stream that must be able to time out, this property should be overridden to return <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Se você estiver implementando um fluxo que deve ser capaz de atingir o tempo limite, essa propriedade deve ser substituída para retornar <ph id="ph1">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.CanWrite">
          <source>When overridden in a derived class, gets a value indicating whether the current stream supports writing.</source>
          <target state="translated">Quando substituído em uma classe derivada, obtém um valor que indica se o fluxo atual dá suporte à gravação.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanWrite">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports writing; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o fluxo der suporte à gravação; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanWrite">
          <source>If a class derived from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> does not support writing, a call to <ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>, or <ph id="ph4">&lt;xref:System.IO.Stream.WriteByte%2A&gt;</ph> throws a <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">Se uma classe derivada de <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> não oferece suporte à gravação, uma chamada para <ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>, ou <ph id="ph4">&lt;xref:System.IO.Stream.WriteByte%2A&gt;</ph> lança um <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanWrite">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Se o fluxo está fechado, essa propriedade retornará <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanWrite">
          <source>The following is an example of using the <ph id="ph1">`CanWrite`</ph> property.</source>
          <target state="translated">A seguir está um exemplo de como usar o <ph id="ph1">`CanWrite`</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Close">
          <source>Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.</source>
          <target state="translated">Fecha o fluxo atual e libera todos os recursos (como soquetes e identificadores de arquivos) associados ao fluxo atual.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Close">
          <source>Instead of calling this method, ensure that the stream is properly disposed.</source>
          <target state="translated">Em vez de chamar esse método, verifique se o fluxo é descartado corretamente.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>This method calls <ph id="ph1">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph>, specifying <ph id="ph2">`true`</ph> to release all resources.</source>
          <target state="translated">Este método chama <ph id="ph1">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph>, especificando <ph id="ph2">`true`</ph> para liberar todos os recursos.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>You do not have to specifically call the <ph id="ph1">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> method.</source>
          <target state="translated">Você não precisa chamar especificamente a <ph id="ph1">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>Instead, ensure that every <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object is properly disposed.</source>
          <target state="translated">Em vez disso, verifique se cada <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> objeto seja corretamente descartado.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>You can declare <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> objects within a <ph id="ph2">`using`</ph> block (or <ph id="ph3">`Using`</ph> block in Visual Basic) to ensure that the stream and all of its resources are disposed, or you can explicitly call the <ph id="ph4">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">Você pode declarar <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> objetos dentro de um <ph id="ph2">`using`</ph> bloco (ou <ph id="ph3">`Using`</ph> bloquear no Visual Basic) para garantir que o fluxo e todos os seus recursos são descartados, ou você pode chamar explicitamente o <ph id="ph4">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>Flushing the stream will not flush its underlying encoder unless you explicitly call an implementation of <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> or <ph id="ph2">`Close`</ph>.</source>
          <target state="translated">Liberando o fluxo não liberar seu codificador subjacente, a menos que você chamar explicitamente uma implementação de <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> ou <ph id="ph2">`Close`</ph>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>Setting <ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph> to <ph id="ph2">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</source>
          <target state="translated">Configuração <ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph> para <ph id="ph2">`true`</ph> significa que os dados serão liberados do buffer no fluxo, mas o estado de codificador não será liberado.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</source>
          <target state="translated">Isso permite que o codificador deve manter o estado (parcial caracteres) para que ele pode codificar o próximo bloco de caracteres corretamente.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>This scenario affects UTF8 and UTF7 where certain characters can be encoded only after the encoder receives the adjacent character or characters.</source>
          <target state="translated">Este cenário afeta UTF8 e UTF7 onde determinados caracteres podem ser codificados somente depois que o codificador recebe adjacentes ou mais caracteres.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>Attempts to manipulate the stream after the stream has been closed might throw an <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph>.</source>
          <target state="translated">Tentativas de manipular o fluxo após o fluxo foi fechado podem acionar um <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>In derived classes, do not override the <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph> method, instead, put all of the <ph id="ph2">&lt;see langword="Stream" /&gt;</ph> cleanup logic in the <ph id="ph3">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> method.</source>
          <target state="translated">Em classes derivadas, não substituem o <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph> método, em vez disso, colocar todos os <ph id="ph2">&lt;see langword="Stream" /&gt;</ph> lógica de limpeza no <ph id="ph3">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>For more information, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>implementar um método Dispose<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Reads the bytes from the current stream and writes them to another stream.</source>
          <target state="translated">Lê os bytes do fluxo atual e os grava em outro fluxo.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>The stream to which the contents of the current stream will be copied.</source>
          <target state="translated">O fluxo para o qual o conteúdo do fluxo atual será copiado.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>Reads the bytes from the current stream and writes them to another stream.</source>
          <target state="translated">Lê os bytes do fluxo atual e os grava em outro fluxo.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.</source>
          <target state="translated">A cópia começa na posição atual no fluxo atual e não redefinir a posição do fluxo de destino após a conclusão da operação de cópia.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>The following example copies the contents of a <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> to a <ph id="ph2">&lt;xref:System.IO.MemoryStream&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir copia o conteúdo de um <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> para um <ph id="ph2">&lt;xref:System.IO.MemoryStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>The current stream does not support reading.</source>
          <target state="translated">Não há suporte para a leitura no fluxo atual.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> does not support writing.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> não dá suporte à gravação.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>Either the current stream or <ph id="ph1">&lt;paramref name="destination" /&gt;</ph> were closed before the <ph id="ph2">&lt;see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /&gt;</ph> method was called.</source>
          <target state="translated">O fluxo atual ou <ph id="ph1">&lt;paramref name="destination" /&gt;</ph> foram fechados antes do método <ph id="ph2">&lt;see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /&gt;</ph> ser chamado.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>An I/O error occurred.</source>
          <target state="translated">Ocorreu um erro de E/S.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>The stream to which the contents of the current stream will be copied.</source>
          <target state="translated">O fluxo para o qual o conteúdo do fluxo atual será copiado.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>The size of the buffer.</source>
          <target state="translated">O tamanho do buffer.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>This value must be greater than zero.</source>
          <target state="translated">Esse valor deve ser maior que zero.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>The default size is 81920.</source>
          <target state="translated">O tamanho padrão é 81920.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>Reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</source>
          <target state="translated">Lê os bytes do fluxo atual e os grava em outro fluxo usando um tamanho do buffer especificado.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.</source>
          <target state="translated">A cópia começa na posição atual no fluxo atual e não redefinir a posição do fluxo de destino após a conclusão da operação de cópia.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> is negative or zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> é negativo ou zero.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>The current stream does not support reading.</source>
          <target state="translated">Não há suporte para a leitura no fluxo atual.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> does not support writing.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> não dá suporte à gravação.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>Either the current stream or <ph id="ph1">&lt;paramref name="destination" /&gt;</ph> were closed before the <ph id="ph2">&lt;see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /&gt;</ph> method was called.</source>
          <target state="translated">O fluxo atual ou <ph id="ph1">&lt;paramref name="destination" /&gt;</ph> foram fechados antes do método <ph id="ph2">&lt;see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /&gt;</ph> ser chamado.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>An I/O error occurred.</source>
          <target state="translated">Ocorreu um erro de E/S.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Asynchronously reads the bytes from the current stream and writes them to another stream.</source>
          <target state="translated">Lê de forma assíncrona os bytes do fluxo atual e os grava em outro fluxo.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The stream to which the contents of the current stream will be copied.</source>
          <target state="translated">O fluxo para o qual o conteúdo do fluxo atual será copiado.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>Asynchronously reads the bytes from the current stream and writes them to another stream.</source>
          <target state="translated">Lê de forma assíncrona os bytes do fluxo atual e os grava em outro fluxo.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>A task that represents the asynchronous copy operation.</source>
          <target state="translated">Uma tarefa que representa a operação de cópia assíncrona.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> método permite que você execute operações de e/s de uso intensivo de recursos sem bloquear o thread principal.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">Essa consideração sobre o desempenho é particularmente importante em um aplicativo <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> ou <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> em que uma operação demorada de fluxo pode bloquear o thread de interface do usuário e fazer seu aplicativo parecer como se não estivesse funcionando.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">Os métodos assíncronos são usados em conjunto com o <ph id="ph1">`async`</ph> e <ph id="ph2">`await`</ph> palavras-chave no Visual Basic e c#.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>Copying begins at the current position in the current stream.</source>
          <target state="translated">A cópia começa na posição atual no fluxo atual.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The following example demonstrates how to use two <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> objects to asynchronously copy the files from one directory to another.</source>
          <target state="translated">O exemplo a seguir demonstra como usar duas <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> objetos de forma assíncrona copiar os arquivos de um diretório para outro.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> class derives from the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> classe deriva de <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button.Click&gt;</ph> event handler for the <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> control is marked with the <ph id="ph3">`async`</ph> modifier because it calls an asynchronous method</source>
          <target state="translated">Observe que o <ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button.Click&gt;</ph> manipulador de eventos para o <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> controle está marcado com o <ph id="ph3">`async`</ph> modificador porque chama um método assíncrono</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>Either the current stream or the destination stream is disposed.</source>
          <target state="translated">O fluxo atual ou o fluxo de destino é descartado.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The current stream does not support reading, or the destination stream does not support writing.</source>
          <target state="translated">O fluxo atual não dá suporte à leitura ou o fluxo de destino não dá suporte à gravação.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The stream to which the contents of the current stream will be copied.</source>
          <target state="translated">O fluxo para o qual o conteúdo do fluxo atual será copiado.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The size, in bytes, of the buffer.</source>
          <target state="translated">O tamanho do buffer, em bytes.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>This value must be greater than zero.</source>
          <target state="translated">Esse valor deve ser maior que zero.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The default size is 81920.</source>
          <target state="translated">O tamanho padrão é 81920.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</source>
          <target state="translated">Lê de maneira assíncrona os bytes do fluxo atual e os grava em outro fluxo usando um tamanho do buffer especificado.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>A task that represents the asynchronous copy operation.</source>
          <target state="translated">Uma tarefa que representa a operação de cópia assíncrona.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> método permite que você execute operações de e/s de uso intensivo de recursos sem bloquear o thread principal.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">Essa consideração sobre o desempenho é particularmente importante em um aplicativo <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> ou <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> em que uma operação demorada de fluxo pode bloquear o thread de interface do usuário e fazer seu aplicativo parecer como se não estivesse funcionando.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">Os métodos assíncronos são usados em conjunto com o <ph id="ph1">`async`</ph> e <ph id="ph2">`await`</ph> palavras-chave no Visual Basic e c#.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>Copying begins at the current position in the current stream.</source>
          <target state="translated">A cópia começa na posição atual no fluxo atual.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>For an example of copying between two streams, see the <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29&gt;</ph> overload.</source>
          <target state="translated">Para obter um exemplo de copiar entre dois fluxos, consulte o <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29&gt;</ph> de sobrecarga.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffersize" /&gt;</ph> is negative or zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffersize" /&gt;</ph> é negativo ou zero.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>Either the current stream or the destination stream is disposed.</source>
          <target state="translated">O fluxo atual ou o fluxo de destino é descartado.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The current stream does not support reading, or the destination stream does not support writing.</source>
          <target state="translated">O fluxo atual não dá suporte à leitura ou o fluxo de destino não dá suporte à gravação.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The stream to which the contents of the current stream will be copied.</source>
          <target state="translated">O fluxo para o qual o conteúdo do fluxo atual será copiado.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The size, in bytes, of the buffer.</source>
          <target state="translated">O tamanho do buffer, em bytes.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>This value must be greater than zero.</source>
          <target state="translated">Esse valor deve ser maior que zero.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The default size is 81920.</source>
          <target state="translated">O tamanho padrão é 81.920.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">O token a se monitorar para solicitações de cancelamento.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">O valor padrão é <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.</source>
          <target state="translated">Lê de forma assíncrona os bytes do fluxo atual e os grava em outro fluxo usando um tamanho do buffer especificado e um token de cancelamento.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous copy operation.</source>
          <target state="translated">Uma tarefa que representa a operação de cópia assíncrona.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> método permite que você execute operações de e/s de uso intensivo de recursos sem bloquear o thread principal.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">Essa consideração sobre o desempenho é particularmente importante em um aplicativo <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> ou <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> em que uma operação demorada de fluxo pode bloquear o thread de interface do usuário e fazer seu aplicativo parecer como se não estivesse funcionando.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">Os métodos assíncronos são usados em conjunto com o <ph id="ph1">`async`</ph> e <ph id="ph2">`await`</ph> palavras-chave no Visual Basic e c#.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>If the operation is canceled before it completes, the returned task contains the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.</source>
          <target state="translated">Se a operação foi cancelada antes da conclusão, a tarefa retornada contém o <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> valor para o <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>Copying begins at the current position in the current stream.</source>
          <target state="translated">A cópia começa na posição atual no fluxo atual.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>For an example of copying between two streams, see the <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29&gt;</ph> overload.</source>
          <target state="translated">Para obter um exemplo de copiar entre dois fluxos, consulte o <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29&gt;</ph> de sobrecarga.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="buffersize" /&gt;</ph> is negative or zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffersize" /&gt;</ph> é negativo ou zero.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>Either the current stream or the destination stream is disposed.</source>
          <target state="translated">O fluxo atual ou o fluxo de destino é descartado.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The current stream does not support reading, or the destination stream does not support writing.</source>
          <target state="translated">O fluxo atual não dá suporte à leitura ou o fluxo de destino não dá suporte à gravação.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CreateWaitHandle">
          <source>Allocates a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> object.</source>
          <target state="translated">Aloca um objeto <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CreateWaitHandle">
          <source>A reference to the allocated <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph>.</source>
          <target state="translated">Uma referência ao <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph> alocado.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CreateWaitHandle">
          <source>When called for the first time, the current method creates a <ph id="ph1">`WaitHandle`</ph> object and returns it.</source>
          <target state="translated">Quando chamado pela primeira vez, o método atual cria um <ph id="ph1">`WaitHandle`</ph> do objeto e o retorna.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CreateWaitHandle">
          <source>On subsequent calls, <ph id="ph1">`CreateWaitHandle`</ph> returns a reference to a new wait handle.</source>
          <target state="translated">Em chamadas subsequentes, <ph id="ph1">`CreateWaitHandle`</ph> retorna uma referência a um novo identificador de espera.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CreateWaitHandle">
          <source>Use this method if you implement the asynchronous methods and require a way of blocking in <ph id="ph1">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> until the asynchronous operation is complete.</source>
          <target state="translated">Use este método se você implementa os métodos assíncronos e requer um modo de bloqueio no <ph id="ph1">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> até que a operação assíncrona é concluída.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> object.</source>
          <target state="translated">Libera todos os recursos usados pelo objeto <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Dispose">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>.</source>
          <target state="translated">Libera todos os recursos usados pelo <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>This method disposes the stream, by writing any changes to the backing store and closing the stream to release resources.</source>
          <target state="translated">Esse método descarta o fluxo, escrevendo as alterações ao repositório de backup e fechar o fluxo para liberar recursos.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>Calling <ph id="ph1">`Dispose`</ph> allows the resources used by the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> to be reallocated for other purposes.</source>
          <target state="translated">Chamando <ph id="ph1">`Dispose`</ph> permite que os recursos usados pelo <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> para ser realocada para outros fins.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>For more information about <ph id="ph1">`Dispose`</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">`Dispose`</ph>, consulte <bpt id="p1">[</bpt>limpeza de recursos não gerenciados<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>Place all cleanup logic for your stream object in <ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>.</source>
          <target state="translated">Colocar toda a lógica de limpeza para seu objeto de fluxo em <ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>Do not override <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph>.</source>
          <target state="translated">Não substitua <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>Note that because of backward compatibility requirements, this method's implementation differs from the recommended guidance for the Dispose pattern.</source>
          <target state="translated">Observe que, devido aos requisitos de compatibilidade com versões anteriores, implementação desse método diferente com as diretrizes recomendadas para o padrão Dispose.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>This method calls <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph>, which then calls <ph id="ph2">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>.</source>
          <target state="translated">Este método chama <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph>, que, em seguida, chama <ph id="ph2">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> para liberar recursos gerenciados e não gerenciados; <ph id="ph2">&lt;see langword="false" /&gt;</ph> para liberar apenas recursos não gerenciados.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated">Libera os recursos não gerenciados usados pelo <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> e opcionalmente libera os recursos gerenciados.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>You should release all resources by specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`disposing`</ph>.</source>
          <target state="translated">Você deve liberar todos os recursos especificando <ph id="ph1">`true`</ph> para <ph id="ph2">`disposing`</ph>.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>When <ph id="ph1">`disposing`</ph> is <ph id="ph2">`true`</ph>, the stream can also ensure data is flushed to the underlying buffer, and access other finalizable objects.</source>
          <target state="translated">Quando <ph id="ph1">`disposing`</ph> é <ph id="ph2">`true`</ph>, o fluxo também pode garantir dados seja liberados para o buffer subjacente e acessarem outros objetos finalizáveis.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>This may not be possible when called from a finalizer due a lack of ordering among finalizers.</source>
          <target state="translated">Isso talvez não seja possível quando chamado a partir de um finalizador devido à falta de ordenação entre finalizadores.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>If your stream is using an operating system handle to communicate with its source, consider using a subclass of <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> for this purpose.</source>
          <target state="translated">Se o fluxo está usando um identificador de sistema operacional para se comunicar com sua fonte, considere o uso de uma subclasse de <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> para essa finalidade.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">Este método é chamado pelo método público <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> e pelo método <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> invokes the protected <ph id="ph2">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> invoca o método <ph id="ph2">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> protegido com o parâmetro <ph id="ph3">`disposing`</ph> definido como <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invoca <ph id="ph2">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> com <ph id="ph3">`disposing`</ph> definido como <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>In derived classes, do not override the <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph> method, instead, put all of the Stream cleanup logic in the <ph id="ph2">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> method.</source>
          <target state="translated">Em classes derivadas, não substituem o <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph> método, em vez disso, colocar toda a lógica de limpeza de fluxo no <ph id="ph2">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> pode ser chamado várias vezes por outros objetos.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>, be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>.</source>
          <target state="translated">Ao substituir <ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>, tome cuidado para não referenciar objetos que tenham sido descartados anteriormente em uma chamada anterior para <ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre como implementar <ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>, consulte <bpt id="p1">[</bpt>implementar um método Dispose<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre <ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> e <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, consulte <bpt id="p1">[</bpt>limpeza de recursos não gerenciados<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>The reference to the pending asynchronous request to finish.</source>
          <target state="translated">A referência à solicitação assíncrona pendente a ser concluída.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>Waits for the pending asynchronous read to complete.</source>
          <target state="translated">Espera a leitura assíncrona pendente ser concluída.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> instead.)</source>
          <target state="translated">(Considere o uso de <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> em seu lugar.)</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>The number of bytes read from the stream, between zero (0) and the number of bytes you requested.</source>
          <target state="translated">O número de bytes lidos do fluxo, entre zero (0) e o número de bytes solicitado.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.</source>
          <target state="translated">Os fluxos retornam zero (0) somente no final do fluxo, caso contrário, eles devem ser bloqueados até que pelo menos um byte esteja disponível.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> to implement asynchronous I/O operations.</source>
          <target state="translated">No .NET Framework 4, e em versões anteriores, você precisa usar métodos como <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> para implementar operações de E/S assíncronas.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, help you implement asynchronous I/O operations more easily.</source>
          <target state="translated">Esses métodos ainda estão disponíveis no <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> para dar suporte a código herdado; no entanto, os novos métodos assíncronos, tais como <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, e <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, ajudam a implementar operações de e/s assíncronas mais facilmente.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>Call <ph id="ph1">`EndRead`</ph> to determine how many bytes were read from the stream.</source>
          <target state="translated">Chamar <ph id="ph1">`EndRead`</ph> para determinar o número de bytes que foram lidos do fluxo.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">`EndRead`</ph> can be called once on every <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> from <ph id="ph3">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`EndRead`</ph> pode ser chamado uma vez em cada <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> de <ph id="ph3">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>This method blocks until the I/O operation has completed.</source>
          <target state="translated">Esse método bloqueia até que a operação de e/s foi concluída.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>A handle to the pending read operation is not available.</source>
          <target state="translated">Um identificador para a operação de leitura pendente não está disponível.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>The pending operation does not support reading.</source>
          <target state="translated">A operação pendente não dá suporte à leitura.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> did not originate from a <ph id="ph2">&lt;see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> method on the current stream.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> não é proveniente de um método <ph id="ph2">&lt;see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> no fluxo atual.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>The stream is closed or an internal error has occurred.</source>
          <target state="translated">O fluxo está fechado ou ocorreu um erro interno.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>A reference to the outstanding asynchronous I/O request.</source>
          <target state="translated">Uma referência à solicitação de E/S assíncrona pendente.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>Ends an asynchronous write operation.</source>
          <target state="translated">Encerra uma operação de gravação assíncrona.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> instead.)</source>
          <target state="translated">(Considere o uso de <ph id="ph1">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> em seu lugar.)</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> to implement asynchronous I/O operations.</source>
          <target state="translated">No .NET Framework 4, e em versões anteriores, você precisa usar métodos como <ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> para implementar operações de E/S assíncronas.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, help you implement asynchronous I/O operations more easily.</source>
          <target state="translated">Esses métodos ainda estão disponíveis no <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> para dar suporte a código herdado; no entanto, os novos métodos assíncronos, tais como <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, e <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, ajudam a implementar operações de e/s assíncronas mais facilmente.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">`EndWrite`</ph> must be called exactly once on every <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> from <ph id="ph3">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`EndWrite`</ph> deve ser chamado apenas uma vez em cada <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> de <ph id="ph3">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>This method blocks until the I/O operation has completed.</source>
          <target state="translated">Esse método bloqueia até que a operação de e/s foi concluída.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and become visible upon a call to <ph id="ph1">`EndWrite`</ph>.</source>
          <target state="translated">Erros que ocorrem durante uma solicitação de gravação assíncrona, como uma falha de disco durante a solicitação de e/s, ocorrem no thread do pool e ficam visíveis após uma chamada para <ph id="ph1">`EndWrite`</ph>.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>Exceptions thrown by the thread pool thread will not be visible when calling <ph id="ph1">`EndWrite`</ph>.</source>
          <target state="translated">Exceções geradas pelo thread do pool não estarão visíveis ao chamar <ph id="ph1">`EndWrite`</ph>.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>A handle to the pending write operation is not available.</source>
          <target state="translated">Não há um identificador disponível para a operação de gravação pendente.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>The pending operation does not support writing.</source>
          <target state="translated">A operação pendente não dá suporte à gravação.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> did not originate from a <ph id="ph2">&lt;see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> method on the current stream.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> não é proveniente de um método <ph id="ph2">&lt;see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> no fluxo atual.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>The stream is closed or an internal error has occurred.</source>
          <target state="translated">O fluxo está fechado ou ocorreu um erro interno.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Flush">
          <source>When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.</source>
          <target state="translated">Quando é substituído em uma classe derivada, limpa todos os buffers nesse fluxo e faz com que todos os dados armazenados em buffer sejam gravados no dispositivo subjacente.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>Override <ph id="ph1">`Flush`</ph> on streams that implement a buffer.</source>
          <target state="translated">Substituir <ph id="ph1">`Flush`</ph> em fluxos que implementam um buffer.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>Use this method to move any information from an underlying buffer to its destination, clear the buffer, or both.</source>
          <target state="translated">Use esse método para mover todas as informações de um buffer de base para seu destino, limpe o buffer, ou ambos.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>Depending upon the state of the object, you might have to modify the current position within the stream (for example, if the underlying stream supports seeking).</source>
          <target state="translated">Dependendo do estado do objeto, você talvez precise modificar a posição atual dentro do fluxo (por exemplo, se dá suporte à busca de fluxo subjacente).</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>For additional information see <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>.</source>
          <target state="translated">Para obter mais informações, consulte <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>When using the <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.BinaryWriter&gt;</ph> class, do not flush the base <ph id="ph3">&lt;xref:System.IO.Stream&gt;</ph> object.</source>
          <target state="translated">Ao usar o <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph> ou <ph id="ph2">&lt;xref:System.IO.BinaryWriter&gt;</ph> da classe, não liberar a base <ph id="ph3">&lt;xref:System.IO.Stream&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>Instead, use the class's <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> method, which makes sure that the data is flushed to the underlying stream first and then written to the file.</source>
          <target state="translated">Em vez disso, use a classe <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> método, que garante que os dados são liberados para o fluxo subjacente primeiro e, em seguida, gravados no arquivo.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Flush">
          <source>An I/O error occurs.</source>
          <target state="translated">Ocorre um erro de E/S.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.</source>
          <target state="translated">Limpa de forma assíncrona todos os buffers nesse fluxo e faz com que os dados armazenados em buffer sejam gravados no dispositivo subjacente.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync">
          <source>Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.</source>
          <target state="translated">Limpa de forma assíncrona todos os buffers nesse fluxo e faz com que os dados armazenados em buffer sejam gravados no dispositivo subjacente.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync">
          <source>A task that represents the asynchronous flush operation.</source>
          <target state="translated">Uma tarefa que representa a operação de liberação assíncrona.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.FlushAsync">
          <source>If a derived class, such as <ph id="ph1">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream&gt;</ph>, does not flush the buffer in its implementation of the <ph id="ph3">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> method, the <ph id="ph4">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> method will not flush the buffer.</source>
          <target state="translated">Se uma classe derivada, como <ph id="ph1">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> ou <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream&gt;</ph>, não liberar o buffer em sua implementação do <ph id="ph3">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> método, o <ph id="ph4">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> método não liberará o buffer.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync">
          <source>The stream has been disposed.</source>
          <target state="translated">O fluxo foi descartado.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">O token a se monitorar para solicitações de cancelamento.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">O valor padrão é <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.</source>
          <target state="translated">Limpa todos os buffers nesse fluxo de forma assíncrona, faz com que os dados armazenados em buffer sejam gravados no dispositivo subjacente e monitora as solicitações de cancelamento.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous flush operation.</source>
          <target state="translated">Uma tarefa que representa a operação de liberação assíncrona.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>If the operation is canceled before it completes, the returned task contains the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.</source>
          <target state="translated">Se a operação foi cancelada antes da conclusão, a tarefa retornada contém o <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> valor para o <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>If a derived class, such as <ph id="ph1">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream&gt;</ph>, does not flush the buffer in its implementation of the <ph id="ph3">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> method, the <ph id="ph4">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> method will not flush the buffer.</source>
          <target state="translated">Se uma classe derivada, como <ph id="ph1">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> ou <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream&gt;</ph>, não liberar o buffer em sua implementação do <ph id="ph3">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> método, o <ph id="ph4">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> método não liberará o buffer.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>The stream has been disposed.</source>
          <target state="translated">O fluxo foi descartado.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Length">
          <source>When overridden in a derived class, gets the length in bytes of the stream.</source>
          <target state="translated">Quando substituído em uma classe derivada, obtém o tamanho em bytes do fluxo.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Length">
          <source>A long value representing the length of the stream in bytes.</source>
          <target state="translated">Um valor longo que representa o tamanho do fluxo em bytes.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Length">
          <source>A class derived from <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> does not support seeking.</source>
          <target state="translated">Uma classe derivada de <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> não dá suporte à busca.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Length">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Foram chamados métodos depois que o fluxo foi fechado.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="F:System.IO.Stream.Null">
          <source>A <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> with no backing store.</source>
          <target state="translated">Um <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> sem repositório de backup.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.Stream.Null">
          <source>Use <ph id="ph1">`Null`</ph> to redirect output to a stream that will not consume any operating system resources.</source>
          <target state="translated">Use <ph id="ph1">`Null`</ph> para redirecionar a saída para um fluxo que não consumirá quaisquer recursos do sistema operacional.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.Stream.Null">
          <source>When the methods of <ph id="ph1">`Stream`</ph> that provide writing are invoked on <ph id="ph2">`Null`</ph>, the call simply returns, and no data is written.</source>
          <target state="translated">Quando os métodos de <ph id="ph1">`Stream`</ph> que fornecem a gravação são chamados em <ph id="ph2">`Null`</ph>, simplesmente retorna a chamada e nenhum dado seja gravado.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.Stream.Null">
          <source><ph id="ph1">`Null`</ph> also implements a <ph id="ph2">`Read`</ph> method that returns zero without reading data.</source>
          <target state="translated"><ph id="ph1">`Null`</ph> também implementa um <ph id="ph2">`Read`</ph> método que retorna zero sem ler dados.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ObjectInvariant">
          <source>Provides support for a <ph id="ph1">&lt;see cref="T:System.Diagnostics.Contracts.Contract" /&gt;</ph>.</source>
          <target state="translated">Oferece suporte a um <ph id="ph1">&lt;see cref="T:System.Diagnostics.Contracts.Contract" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Position">
          <source>When overridden in a derived class, gets or sets the position within the current stream.</source>
          <target state="translated">Quando substituído em uma classe derivada, obtém ou define a posição dentro do fluxo atual.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Position">
          <source>The current position within the stream.</source>
          <target state="translated">A posição atual no fluxo.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Position">
          <source>The stream must support seeking to get or set the position.</source>
          <target state="translated">O fluxo deve oferecer suporte a busca obter ou definir a posição.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Position">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> property to determine whether the stream supports seeking.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> propriedade para determinar se o fluxo oferece suporte à busca.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Position">
          <source>Seeking to any location beyond the length of the stream is supported.</source>
          <target state="translated">Há suporte para busca em qualquer local além do comprimento do fluxo.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Position">
          <source>The <ph id="ph1">`Position`</ph> property does not keep track of the number of bytes from the stream that have been consumed, skipped, or both.</source>
          <target state="translated">O <ph id="ph1">`Position`</ph> propriedade não manter o controle do número de bytes do fluxo que tiverem sido consumidos, ignorado, ou ambos.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Position">
          <source>An I/O error occurs.</source>
          <target state="translated">Ocorre um erro de E/S.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Position">
          <source>The stream does not support seeking.</source>
          <target state="translated">O fluxo não dá suporte à busca.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Position">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Foram chamados métodos depois que o fluxo foi fechado.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An array of bytes.</source>
          <target state="translated">Uma matriz de bytes.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>When this method returns, the buffer contains the specified byte array with the values between <bpt id="p1">&lt;c&gt;</bpt>offset<ept id="p1">&lt;/c&gt;</ept> and (<bpt id="p2">&lt;c&gt;</bpt>offset<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) replaced by the bytes read from the current source.</source>
          <target state="translated">Quando esse método é retornado, o buffer conterá a matriz de bytes especificada com os valores entre <bpt id="p1">&lt;c&gt;</bpt>deslocamento<ept id="p1">&lt;/c&gt;</ept> e (<bpt id="p2">&lt;c&gt;</bpt>deslocamento<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>contagem<ept id="p3">&lt;/c&gt;</ept> - 1) substituídos pelos bytes lidos da origem atual.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin storing the data read from the current stream.</source>
          <target state="translated">O deslocamento de bytes baseado em zero no <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> em que se começa a armazenar os dados lidos do fluxo atual.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to be read from the current stream.</source>
          <target state="translated">O número máximo de bytes a serem lidos no fluxo atual.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</source>
          <target state="translated">Quando for substituído em uma classe derivada, lê uma sequência de bytes do fluxo atual e avança a posição dentro do fluxo até o número de bytes lidos.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The total number of bytes read into the buffer.</source>
          <target state="translated">O número total de bytes lidos do buffer.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</source>
          <target state="translated">Isso poderá ser menor que o número de bytes solicitado se esses muitos bytes não estiverem disponíveis no momento, ou zero (0) se o final do fluxo tiver sido atingido.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> propriedade para determinar se a instância atual oferece suporte à leitura.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> method to read asynchronously from the current stream.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> método de leitura assíncrona no fluxo atual.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Implementations of this method read a maximum of <ph id="ph1">`count`</ph> bytes from the current stream and store them in <ph id="ph2">`buffer`</ph> beginning at <ph id="ph3">`offset`</ph>.</source>
          <target state="translated">As implementações desse método ler um máximo de <ph id="ph1">`count`</ph> bytes do atual fluxo e armazená-los em <ph id="ph2">`buffer`</ph> começando no <ph id="ph3">`offset`</ph>.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The current position within the stream is advanced by the number of bytes read; however, if an exception occurs, the current position within the stream remains unchanged.</source>
          <target state="translated">A posição atual dentro do fluxo for avançada pelo número de bytes lido; No entanto, se ocorrer uma exceção, a posição atual dentro do fluxo permanece inalterada.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Implementations return the number of bytes read.</source>
          <target state="translated">Implementações de retornam o número de bytes lidos.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The implementation will block until at least one byte of data can be read, in the event that no data is available.</source>
          <target state="translated">A implementação será bloqueado até que pelo menos um byte de dados podem ser lidos, que não há dados disponíveis.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> returns 0 only when there is no more data in the stream and no more is expected (such as a closed socket or end of file).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> Retorna 0 somente quando não houver nenhuma mais dados no fluxo e não mais é esperado (como um soquete fechado ou o final do arquivo).</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.</source>
          <target state="translated">Uma implementação está livre para retornar menos bytes que solicitado, mesmo que não foi atingido o fim do fluxo.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Use <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> for reading primitive data types.</source>
          <target state="translated">Use <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> para ler tipos de dados primitivos.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The following example shows how to use <ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> to read a block of data.</source>
          <target state="translated">O exemplo a seguir mostra como usar <ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> para ler um bloco de dados.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated">A soma de <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> e <ph id="ph2">&lt;paramref name="count" /&gt;</ph> é maior que o tamanho do buffer.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="count" /&gt;</ph> é negativo.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">Ocorre um erro de E/S.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The stream does not support reading.</source>
          <target state="translated">Não há suporte para leitura no fluxo.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Foram chamados métodos depois que o fluxo foi fechado.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</source>
          <target state="translated">Lê uma sequência de bytes do fluxo atual de forma assíncrona e avança a posição no fluxo até o número de bytes lidos.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer to write the data into.</source>
          <target state="translated">O buffer no qual os dados serão gravados.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing data from the stream.</source>
          <target state="translated">O deslocamento de bytes no <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> em que será iniciada a gravação de dados do fluxo.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">O número máximo de bytes a serem lidos.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</source>
          <target state="translated">Lê uma sequência de bytes do fluxo atual de forma assíncrona e avança a posição no fluxo até o número de bytes lidos.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">Uma tarefa que representa a operação de leitura assíncrona.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The value of the <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> parameter contains the total number of bytes read into the buffer.</source>
          <target state="translated">O valor do parâmetro <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> contém o número total de bytes lidos no buffer.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</source>
          <target state="translated">O valor do resultado poderá ser menor que o número de bytes solicitados se o número de bytes disponíveis no momento for menor que o número solicitado ou poderá ser 0 (zero) se o final do fluxo foi atingido.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> método permite que você execute operações de e/s de uso intensivo de recursos sem bloquear o thread principal.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">Essa consideração sobre o desempenho é particularmente importante em um aplicativo <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> ou <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> em que uma operação demorada de fluxo pode bloquear o thread de interface do usuário e fazer seu aplicativo parecer como se não estivesse funcionando.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">Os métodos assíncronos são usados em conjunto com o <ph id="ph1">`async`</ph> e <ph id="ph2">`await`</ph> palavras-chave no Visual Basic e c#.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> propriedade para determinar se a instância atual oferece suporte à leitura.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The following example shows how to read from a file asynchronously.</source>
          <target state="translated">O exemplo a seguir mostra como ler de um arquivo de forma assíncrona.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> class, which derives from the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
          <target state="translated">O exemplo usa o <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> classe que deriva de <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="count" /&gt;</ph> é negativo.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated">A soma de <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> e <ph id="ph2">&lt;paramref name="count" /&gt;</ph> é maior que o tamanho do buffer.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream does not support reading.</source>
          <target state="translated">Não há suporte para leitura no fluxo.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream has been disposed.</source>
          <target state="translated">O fluxo foi descartado.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream is currently in use by a previous read operation.</source>
          <target state="translated">O fluxo está sendo usado no momento por uma operação de leitura anterior.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The buffer to write the data into.</source>
          <target state="translated">O buffer no qual os dados serão gravados.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing data from the stream.</source>
          <target state="translated">O deslocamento de bytes no <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> em que será iniciada a gravação de dados do fluxo.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">O número máximo de bytes a serem lidos.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">O token a se monitorar para solicitações de cancelamento.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">O valor padrão é <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</source>
          <target state="translated">Lê de forma assíncrona uma sequência de bytes do fluxo atual, avança a posição no fluxo até o número de bytes lidos e monitora as solicitações de cancelamento.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">Uma tarefa que representa a operação de leitura assíncrona.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The value of the <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> parameter contains the total number of bytes read into the buffer.</source>
          <target state="translated">O valor do parâmetro <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> contém o número total de bytes lidos no buffer.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</source>
          <target state="translated">O valor do resultado poderá ser menor que o número de bytes solicitados se o número de bytes disponíveis no momento for menor que o número solicitado ou poderá ser 0 (zero) se o final do fluxo foi atingido.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> método permite que você execute operações de e/s de uso intensivo de recursos sem bloquear o thread principal.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">Essa consideração sobre o desempenho é particularmente importante em um aplicativo <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> ou <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> em que uma operação demorada de fluxo pode bloquear o thread de interface do usuário e fazer seu aplicativo parecer como se não estivesse funcionando.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">Os métodos assíncronos são usados em conjunto com o <ph id="ph1">`async`</ph> e <ph id="ph2">`await`</ph> palavras-chave no Visual Basic e c#.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> propriedade para determinar se a instância atual oferece suporte à leitura.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>If the operation is canceled before it completes, the returned task contains the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.</source>
          <target state="translated">Se a operação foi cancelada antes da conclusão, a tarefa retornada contém o <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> valor para o <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>For an example, see the <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> overload.</source>
          <target state="translated">Para obter um exemplo, consulte o <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> de sobrecarga.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="count" /&gt;</ph> é negativo.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated">A soma de <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> e <ph id="ph2">&lt;paramref name="count" /&gt;</ph> é maior que o tamanho do buffer.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream does not support reading.</source>
          <target state="translated">Não há suporte para leitura no fluxo.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream has been disposed.</source>
          <target state="translated">O fluxo foi descartado.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream is currently in use by a previous read operation.</source>
          <target state="translated">O fluxo está sendo usado no momento por uma operação de leitura anterior.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadByte">
          <source>Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</source>
          <target state="translated">Lê um byte do fluxo e avança a posição no fluxo em um byte ou retorna -1 caso esteja no final do fluxo.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadByte">
          <source>The unsigned byte cast to an <ph id="ph1">&lt;see langword="Int32" /&gt;</ph>, or -1 if at the end of the stream.</source>
          <target state="translated">O byte sem sinal convertido em um <ph id="ph1">&lt;see langword="Int32" /&gt;</ph> ou -1 se o final do fluxo for atingido.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadByte">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> propriedade para determinar se a instância atual oferece suporte à leitura.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadByte">
          <source>Attempts to manipulate the stream after the stream has been closed could throw an <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph>.</source>
          <target state="translated">Tentativas de manipular o fluxo após o fluxo foi fechado podem gerar um <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadByte">
          <source>The stream does not support reading.</source>
          <target state="translated">Não há suporte para leitura no fluxo.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadByte">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Foram chamados métodos depois que o fluxo foi fechado.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadByte">
          <source>The default implementation on <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> creates a new single-byte array and then calls <ph id="ph2">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</source>
          <target state="translated">A implementação padrão em <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> cria uma nova matriz de byte único e, em seguida, chama <ph id="ph2">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadByte">
          <source>While this is formally correct, it is inefficient.</source>
          <target state="translated">Enquanto estiver formalmente correto, é ineficiente.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadByte">
          <source>Any stream with an internal buffer should override this method and provide a much more efficient version that reads the buffer directly, avoiding the extra array allocation on every call.</source>
          <target state="translated">Qualquer fluxo com um buffer interno deve substituir este método e fornecer uma versão muito mais eficiente do que lê o buffer diretamente, evitando a alocação de matriz extra em cada chamada.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.ReadTimeout">
          <source>Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.</source>
          <target state="translated">Obtém ou define um valor, em milissegundos, que determina quanto tempo o fluxo tentará realizar a leitura antes do tempo limite.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.ReadTimeout">
          <source>A value, in miliseconds, that determines how long the stream will attempt to read before timing out.</source>
          <target state="translated">Um valor, em milissegundos, que determina quanto tempo o fluxo tentará realizar a leitura antes do tempo limite.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.ReadTimeout">
          <source>The <ph id="ph1">&lt;see cref="P:System.IO.Stream.ReadTimeout" /&gt;</ph> method always throws an <ph id="ph2">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</source>
          <target state="translated">O método <ph id="ph1">&lt;see cref="P:System.IO.Stream.ReadTimeout" /&gt;</ph> sempre gera um <ph id="ph2">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.ReadTimeout">
          <source>The <ph id="ph1">&lt;see cref="P:System.IO.Stream.ReadTimeout" /&gt;</ph> property should be overridden to provide the appropriate behavior for the stream.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="P:System.IO.Stream.ReadTimeout" /&gt;</ph> propriedade deve ser substituída para fornecer o comportamento apropriado para o fluxo.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.ReadTimeout">
          <source>If the stream does not support timing out, this property should raise an <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</source>
          <target state="translated">Se o fluxo não oferece suporte para o tempo limite, essa propriedade deve gerar um <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>A byte offset relative to the <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated">Um deslocamento de bytes relativo ao parâmetro <bpt id="p1">&lt;c&gt;</bpt>origem<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>A value of type <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph> indicating the reference point used to obtain the new position.</source>
          <target state="translated">Um valor do tipo <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph> indicando o ponto de referência usado para obter a nova posição.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>When overridden in a derived class, sets the position within the current stream.</source>
          <target state="translated">Quando substituído em uma classe derivada, define a posição dentro do fluxo atual.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The new position within the current stream.</source>
          <target state="translated">A nova posição dentro do fluxo atual.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> property to determine whether the current instance supports seeking.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> propriedade para determinar se a instância atual oferece suporte à busca.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>If <ph id="ph1">`offset`</ph> is negative, the new position is required to precede the position specified by <ph id="ph2">`origin`</ph> by the number of bytes specified by <ph id="ph3">`offset`</ph>.</source>
          <target state="translated">Se <ph id="ph1">`offset`</ph> é negativo, a nova posição deve preceder a posição especificada pelo <ph id="ph2">`origin`</ph> pelo número de bytes especificado por <ph id="ph3">`offset`</ph>.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>If <ph id="ph1">`offset`</ph> is zero (0), the new position is required to be the position specified by <ph id="ph2">`origin`</ph>.</source>
          <target state="translated">Se <ph id="ph1">`offset`</ph> é zero (0), a nova posição é necessária para ser a posição especificada pelo <ph id="ph2">`origin`</ph>.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>If <ph id="ph1">`offset`</ph> is positive, the new position is required to follow the position specified by <ph id="ph2">`origin`</ph> by the number of bytes specified by <ph id="ph3">`offset`</ph>.</source>
          <target state="translated">Se <ph id="ph1">`offset`</ph> for positivo, a nova posição é necessária para acompanhar a posição especificada pelo <ph id="ph2">`origin`</ph> pelo número de bytes especificado por <ph id="ph3">`offset`</ph>.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Classes derived from <ph id="ph1">`Stream`</ph> that support seeking must override this method to provide the functionality described above.</source>
          <target state="translated">Classes derivadas de <ph id="ph1">`Stream`</ph> suporte busca deve substituir esse método para fornecer a funcionalidade descrita acima.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Seeking to any location beyond the length of the stream is supported.</source>
          <target state="translated">Há suporte para busca em qualquer local além do comprimento do fluxo.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>An I/O error occurs.</source>
          <target state="translated">Ocorre um erro de E/S.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The stream does not support seeking, such as if the stream is constructed from a pipe or console output.</source>
          <target state="translated">O fluxo não dá suporte à busca, como se o fluxo fosse construído por meio de uma saída do console ou pipe.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Foram chamados métodos depois que o fluxo foi fechado.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>The desired length of the current stream in bytes.</source>
          <target state="translated">O tamanho desejado do fluxo atual em bytes.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>When overridden in a derived class, sets the length of the current stream.</source>
          <target state="translated">Quando substituído em uma classe derivada, define o tamanho do fluxo atual.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>If the specified value is less than the current length of the stream, the stream is truncated.</source>
          <target state="translated">Se o valor especificado é menor que o tamanho atual do fluxo, o fluxo é truncado.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>If the specified value is larger than the current length of the stream, the stream is expanded.</source>
          <target state="translated">Se o valor especificado é maior do que o tamanho atual do fluxo, o fluxo é expandido.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>If the stream is expanded, the contents of the stream between the old and the new length are not defined.</source>
          <target state="translated">Se o fluxo é expandido, o conteúdo do fluxo entre o antigo e o novo tamanho não está definido.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>A stream must support both writing and seeking for <ph id="ph1">`SetLength`</ph> to work.</source>
          <target state="translated">Um fluxo deve dão suporte a gravação e busca de <ph id="ph1">`SetLength`</ph> para trabalhar.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing, and the <ph id="ph2">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> property to determine whether seeking is supported.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> propriedade para determinar se a instância atual oferece suporte à gravação e o <ph id="ph2">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> propriedade para determinar se a busca é suportada.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>An I/O error occurs.</source>
          <target state="translated">Ocorre um erro de E/S.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output.</source>
          <target state="translated">O fluxo não dá suporte à gravação nem à busca, como se o fluxo fosse construído por meio de uma saída do console ou pipe.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Foram chamados métodos depois que o fluxo foi fechado.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> object to synchronize.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> a ser sincronizado.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source>Creates a thread-safe (synchronized) wrapper around the specified <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> object.</source>
          <target state="translated">Cria um wrapper thread-safe (sincronizado) em torno do objeto <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source>A thread-safe <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> object.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> thread-safe.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source>This method returns a class that wraps the specified <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object and restricts access to it from multiple threads.</source>
          <target state="translated">Esse método retorna uma classe que encapsula especificado <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> do objeto e restringe o acesso a ele de vários threads.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source>All access to the <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object will be thread safe.</source>
          <target state="translated">Todos os acessos para o <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> objeto será thread-safe.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An array of bytes.</source>
          <target state="translated">Uma matriz de bytes.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>This method copies <bpt id="p1">&lt;c&gt;</bpt>count<ept id="p1">&lt;/c&gt;</ept> bytes from <bpt id="p2">&lt;c&gt;</bpt>buffer<ept id="p2">&lt;/c&gt;</ept> to the current stream.</source>
          <target state="translated">Esse método copia os bytes de <bpt id="p1">&lt;c&gt;</bpt>contagem<ept id="p1">&lt;/c&gt;</ept> do <bpt id="p2">&lt;c&gt;</bpt>buffer<ept id="p2">&lt;/c&gt;</ept> para o fluxo atual.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin copying bytes to the current stream.</source>
          <target state="translated">O deslocamento de bytes baseado em zero no <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> no qual será iniciada a cópia de bytes para o fluxo atual.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to be written to the current stream.</source>
          <target state="translated">O número de bytes a serem gravados no fluxo atual.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</source>
          <target state="translated">Quando for substituído em uma classe derivada, grava uma sequência de bytes no fluxo atual e avança a posição atual dentro desse fluxo até o número de bytes gravados.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> propriedade para determinar se a instância atual oferece suporte à gravação.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> method to write asynchronously to the current stream.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> método para gravar de forma assíncrona para o fluxo atual.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If the write operation is successful, the position within the stream advances by the number of bytes written.</source>
          <target state="translated">Se a operação de gravação for bem-sucedida, a posição dentro do fluxo avança pelo número de bytes gravados.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If an exception occurs, the position within the stream remains unchanged.</source>
          <target state="translated">Se ocorrer uma exceção, a posição dentro do fluxo permanecerá inalterada.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is greater than the buffer length.</source>
          <target state="translated">A soma de <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> e <ph id="ph2">&lt;paramref name="count" /&gt;</ph> é maior que o comprimento do buffer.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="count" /&gt;</ph> é negativo.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An I/O error occured, such as the specified file cannot be found.</source>
          <target state="translated">Ocorreu um erro de E/S, como não ser possível encontrar o arquivo especificado.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The stream does not support writing.</source>
          <target state="translated">Não há suporte para gravação no fluxo.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> was called after the stream was closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> foi chamado depois que o fluxo foi fechado.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</source>
          <target state="translated">Grava assincronamente uma sequência de bytes no fluxo atual e avança a posição atual dentro desse fluxo no número de bytes gravados.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer to write data from.</source>
          <target state="translated">O buffer do qual os dados serão gravados.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> from which to begin copying bytes to the stream.</source>
          <target state="translated">O deslocamento de bytes baseado em zero no <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> do qual será iniciada a cópia de bytes para o fluxo.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">O número máximo de bytes a serem gravados.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</source>
          <target state="translated">Grava assincronamente uma sequência de bytes no fluxo atual e avança a posição atual dentro desse fluxo no número de bytes gravados.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>A task that represents the asynchronous write operation.</source>
          <target state="translated">Uma tarefa que representa a operação de gravação assíncrona.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> método permite que você execute operações de e/s de uso intensivo de recursos sem bloquear o thread principal.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">Essa consideração sobre o desempenho é particularmente importante em um aplicativo <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> ou <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> em que uma operação demorada de fluxo pode bloquear o thread de interface do usuário e fazer seu aplicativo parecer como se não estivesse funcionando.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">Os métodos assíncronos são usados em conjunto com o <ph id="ph1">`async`</ph> e <ph id="ph2">`await`</ph> palavras-chave no Visual Basic e c#.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> propriedade para determinar se a instância atual oferece suporte à gravação.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The following example shows how to write asynchronously to a file.</source>
          <target state="translated">O exemplo a seguir mostra como gravar em um arquivo de forma assíncrona.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> class, which derives from the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
          <target state="translated">O exemplo usa o <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> classe que deriva de <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="count" /&gt;</ph> é negativo.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated">A soma de <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> e <ph id="ph2">&lt;paramref name="count" /&gt;</ph> é maior que o tamanho do buffer.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream does not support writing.</source>
          <target state="translated">Não há suporte para gravação no fluxo.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream has been disposed.</source>
          <target state="translated">O fluxo foi descartado.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream is currently in use by a previous write operation.</source>
          <target state="translated">O fluxo está em uso no momento por uma operação de gravação anterior.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The buffer to write data from.</source>
          <target state="translated">O buffer do qual os dados serão gravados.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> from which to begin copying bytes to the stream.</source>
          <target state="translated">O deslocamento de bytes baseado em zero no <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> do qual será iniciada a cópia de bytes para o fluxo.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">O número máximo de bytes a serem gravados.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">O token a se monitorar para solicitações de cancelamento.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">O valor padrão é <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</source>
          <target state="translated">Grava uma sequência de bytes no fluxo atual assincronamente, avança a posição atual dentro desse fluxo pelo número de bytes gravados e monitora as solicitações de cancelamento.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous write operation.</source>
          <target state="translated">Uma tarefa que representa a operação de gravação assíncrona.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> método permite que você execute operações de e/s de uso intensivo de recursos sem bloquear o thread principal.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">Essa consideração sobre o desempenho é particularmente importante em um aplicativo <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> ou <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> em que uma operação demorada de fluxo pode bloquear o thread de interface do usuário e fazer seu aplicativo parecer como se não estivesse funcionando.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">Os métodos assíncronos são usados em conjunto com o <ph id="ph1">`async`</ph> e <ph id="ph2">`await`</ph> palavras-chave no Visual Basic e c#.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> propriedade para determinar se a instância atual oferece suporte à gravação.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>If the operation is canceled before it completes, the returned task contains the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.</source>
          <target state="translated">Se a operação foi cancelada antes da conclusão, a tarefa retornada contém o <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> valor para o <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>For an example, see the <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> overload.</source>
          <target state="translated">Para obter um exemplo, consulte o <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> de sobrecarga.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="count" /&gt;</ph> é negativo.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated">A soma de <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> e <ph id="ph2">&lt;paramref name="count" /&gt;</ph> é maior que o tamanho do buffer.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream does not support writing.</source>
          <target state="translated">Não há suporte para gravação no fluxo.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream has been disposed.</source>
          <target state="translated">O fluxo foi descartado.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream is currently in use by a previous write operation.</source>
          <target state="translated">O fluxo está em uso no momento por uma operação de gravação anterior.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>The byte to write to the stream.</source>
          <target state="translated">O byte a ser gravado no fluxo.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>Writes a byte to the current position in the stream and advances the position within the stream by one byte.</source>
          <target state="translated">Grava um byte na posição atual no fluxo e avança a posição dentro no fluxo em um byte.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> propriedade para determinar se a instância atual oferece suporte à gravação.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>An I/O error occurs.</source>
          <target state="translated">Ocorre um erro de E/S.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>The stream does not support writing, or the stream is already closed.</source>
          <target state="translated">O fluxo não dá suporte à gravação ou o fluxo já foi fechado.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Foram chamados métodos depois que o fluxo foi fechado.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>The default implementation on <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> creates a new single-byte array and then calls <ph id="ph2">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</source>
          <target state="translated">A implementação padrão em <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> cria uma nova matriz de byte único e, em seguida, chama <ph id="ph2">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>While this is formally correct, it is inefficient.</source>
          <target state="translated">Enquanto estiver formalmente correto, é ineficiente.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>Any stream with an internal buffer should override this method and provide a much more efficient version that writes to the buffer directly, avoiding the extra array allocation on every call.</source>
          <target state="translated">Qualquer fluxo com um buffer interno deve substituir este método e fornecer uma versão muito mais eficiente do que grava no buffer diretamente, evitando a alocação de matriz extra em cada chamada.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.WriteTimeout">
          <source>Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out.</source>
          <target state="translated">Obtém ou define um valor, em milissegundos, que determina quanto tempo o fluxo tentará realizar a gravação antes do tempo limite.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.WriteTimeout">
          <source>A value, in miliseconds, that determines how long the stream will attempt to write before timing out.</source>
          <target state="translated">Um valor, em milissegundos, que determina quanto tempo o fluxo tentará realizar a gravação antes do tempo limite.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.WriteTimeout">
          <source>The <ph id="ph1">&lt;see cref="P:System.IO.Stream.WriteTimeout" /&gt;</ph> method always throws an <ph id="ph2">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</source>
          <target state="translated">O método <ph id="ph1">&lt;see cref="P:System.IO.Stream.WriteTimeout" /&gt;</ph> sempre gera um <ph id="ph2">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.WriteTimeout">
          <source>The <ph id="ph1">&lt;see cref="P:System.IO.Stream.WriteTimeout" /&gt;</ph> property should be overridden to provide the appropriate behavior for the stream.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="P:System.IO.Stream.WriteTimeout" /&gt;</ph> propriedade deve ser substituída para fornecer o comportamento apropriado para o fluxo.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.WriteTimeout">
          <source>If the stream does not support timing out, this property should raise an <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</source>
          <target state="translated">Se o fluxo não oferece suporte para o tempo limite, essa propriedade deve gerar um <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>