<Type Name="XmlReadMode" FullName="System.Data.XmlReadMode">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0f5b44937f66979262138121888b988fb88a1eda" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36677046" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum XmlReadMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed XmlReadMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Data.XmlReadMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum XmlReadMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class XmlReadMode" />
  <TypeSignature Language="F#" Value="type XmlReadMode = " />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
      <span data-ttu-id="4aa23-101">Especifica como ler dados XML e um esquema relacional em um <see cref="T:System.Data.DataSet" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4aa23-101">Specifies how to read XML data and a relational schema into a <see cref="T:System.Data.DataSet" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4aa23-102">Use os membros dessa enumeração ao definir o `ReadMode` parâmetro o <xref:System.Data.DataSet.ReadXml%2A> método.</span><span class="sxs-lookup"><span data-stu-id="4aa23-102">Use the members of this enumeration when setting the `ReadMode` parameter of the <xref:System.Data.DataSet.ReadXml%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4aa23-103">`Auto` o modo pode ser mais lento do que a configuração <xref:System.Data.XmlReadMode> como uma opção explícita.</span><span class="sxs-lookup"><span data-stu-id="4aa23-103">`Auto` mode may be slower than setting <xref:System.Data.XmlReadMode> to an explicit option.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Auto">
      <MemberSignature Language="C#" Value="Auto" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.XmlReadMode Auto = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Data.XmlReadMode.Auto" />
      <MemberSignature Language="VB.NET" Value="Auto" />
      <MemberSignature Language="C++ CLI" Value="Auto" />
      <MemberSignature Language="F#" Value="Auto = 0" Usage="System.Data.XmlReadMode.Auto" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="4aa23-104">Padrão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4aa23-104">Default.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4aa23-105">Executa o mais apropriado das seguintes ações:</span><span class="sxs-lookup"><span data-stu-id="4aa23-105">Performs the most appropriate of these actions:</span></span>  
  
 <span data-ttu-id="4aa23-106">Define se os dados forem um DiffGram, `XmlReadMode` para `DiffGram`.</span><span class="sxs-lookup"><span data-stu-id="4aa23-106">If the data is a DiffGram, sets `XmlReadMode` to `DiffGram`.</span></span>  
  
 <span data-ttu-id="4aa23-107">- ou -</span><span class="sxs-lookup"><span data-stu-id="4aa23-107">-or-</span></span>  
  
 <span data-ttu-id="4aa23-108">Define se o conjunto de dados já tem um esquema ou o documento contém um esquema embutido, `XmlReadMode` para `ReadSchema`.</span><span class="sxs-lookup"><span data-stu-id="4aa23-108">If the dataset already has a schema, or the document contains an in-line schema, sets `XmlReadMode` to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="4aa23-109">- ou -</span><span class="sxs-lookup"><span data-stu-id="4aa23-109">-or-</span></span>  
  
 <span data-ttu-id="4aa23-110">Define se o conjunto de dados ainda não tiver um esquema e o documento não contém um esquema embutido, `XmlReadMode` para `InferSchema`.</span><span class="sxs-lookup"><span data-stu-id="4aa23-110">If the dataset does not already have a schema and the document does not contain an in-line schema, sets `XmlReadMode` to `InferSchema`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DiffGram">
      <MemberSignature Language="C#" Value="DiffGram" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.XmlReadMode DiffGram = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Data.XmlReadMode.DiffGram" />
      <MemberSignature Language="VB.NET" Value="DiffGram" />
      <MemberSignature Language="C++ CLI" Value="DiffGram" />
      <MemberSignature Language="F#" Value="DiffGram = 4" Usage="System.Data.XmlReadMode.DiffGram" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="4aa23-111">Lê um DiffGram, aplicando alterações de DiffGram ao <see cref="T:System.Data.DataSet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4aa23-111">Reads a DiffGram, applying changes from the DiffGram to the <see cref="T:System.Data.DataSet" />.</span>
          </span>
          <span data-ttu-id="4aa23-112">A semântica é idêntica às de uma operação de <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4aa23-112">The semantics are identical to those of a <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> operation.</span>
          </span>
          <span data-ttu-id="4aa23-113">Assim como acontece com a operação de <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />, os valores de <see cref="P:System.Data.DataRow.RowState" /> são preservados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4aa23-113">As with the <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> operation, <see cref="P:System.Data.DataRow.RowState" /> values are preserved.</span>
          </span>
          <span data-ttu-id="4aa23-114">A entrada para <see cref="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)" /> com DiffGrams deve apenas ser obtida usando a saída do <see cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" />, como um DiffGram.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4aa23-114">Input to <see cref="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)" /> with DiffGrams should only be obtained using the output from <see cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" /> as a DiffGram.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4aa23-115">O destino <xref:System.Data.DataSet> devem ter o mesmo esquema de <xref:System.Data.DataSet> no qual <xref:System.Data.DataSet.WriteXml%2A> como DiffGram é chamado.</span><span class="sxs-lookup"><span data-stu-id="4aa23-115">The target <xref:System.Data.DataSet> must have the same schema as the <xref:System.Data.DataSet> on which <xref:System.Data.DataSet.WriteXml%2A> as DiffGram is called.</span></span> <span data-ttu-id="4aa23-116">Caso contrário, a operação de mesclagem de DiffGram falhará e uma exceção será lançada.</span><span class="sxs-lookup"><span data-stu-id="4aa23-116">Otherwise the DiffGram merge operation fails, and an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fragment">
      <MemberSignature Language="C#" Value="Fragment" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.XmlReadMode Fragment = int32(5)" />
      <MemberSignature Language="DocId" Value="F:System.Data.XmlReadMode.Fragment" />
      <MemberSignature Language="VB.NET" Value="Fragment" />
      <MemberSignature Language="C++ CLI" Value="Fragment" />
      <MemberSignature Language="F#" Value="Fragment = 5" Usage="System.Data.XmlReadMode.Fragment" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="4aa23-117">Lê os fragmentos XML, como aqueles gerados por consultas FOR XML, em uma instância do SQL Server em execução.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4aa23-117">Reads XML fragments, such as those generated by executing FOR XML queries, against an instance of SQL Server.</span>
          </span>
          <span data-ttu-id="4aa23-118">Quando <see cref="T:System.Data.XmlReadMode" /> é definido como <see langword="Fragment" />, o namespace padrão é lido como o esquema embutido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4aa23-118">When <see cref="T:System.Data.XmlReadMode" /> is set to <see langword="Fragment" />, the default namespace is read as the inline schema.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="IgnoreSchema">
      <MemberSignature Language="C#" Value="IgnoreSchema" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.XmlReadMode IgnoreSchema = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Data.XmlReadMode.IgnoreSchema" />
      <MemberSignature Language="VB.NET" Value="IgnoreSchema" />
      <MemberSignature Language="C++ CLI" Value="IgnoreSchema" />
      <MemberSignature Language="F#" Value="IgnoreSchema = 2" Usage="System.Data.XmlReadMode.IgnoreSchema" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="4aa23-119">Ignora qualquer esquema embutido e carrega os dados no esquema <see cref="T:System.Data.DataSet" /> existente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4aa23-119">Ignores any inline schema and reads data into the existing <see cref="T:System.Data.DataSet" /> schema.</span>
          </span>
          <span data-ttu-id="4aa23-120">Se os dados não coincidem com o esquema existente, eles serão descartados (incluindo dados de diferentes namespaces definidos para o <see cref="T:System.Data.DataSet" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="4aa23-120">If any data does not match the existing schema, it is discarded (including data from differing namespaces defined for the <see cref="T:System.Data.DataSet" />).</span>
          </span>
          <span data-ttu-id="4aa23-121">Se os dados forem um DiffGram, <see langword="IgnoreSchema" /> tem a funcionalidade que <see langword="DiffGram" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4aa23-121">If the data is a DiffGram, <see langword="IgnoreSchema" /> has the same functionality as <see langword="DiffGram" />.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="InferSchema">
      <MemberSignature Language="C#" Value="InferSchema" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.XmlReadMode InferSchema = int32(3)" />
      <MemberSignature Language="DocId" Value="F:System.Data.XmlReadMode.InferSchema" />
      <MemberSignature Language="VB.NET" Value="InferSchema" />
      <MemberSignature Language="C++ CLI" Value="InferSchema" />
      <MemberSignature Language="F#" Value="InferSchema = 3" Usage="System.Data.XmlReadMode.InferSchema" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="4aa23-122">Ignora qualquer esquema embutido, infere o esquema dos dados e carrega-os.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4aa23-122">Ignores any inline schema, infers schema from the data and loads the data.</span>
          </span>
          <span data-ttu-id="4aa23-123">Se o <see cref="T:System.Data.DataSet" /> já contiver um esquema, o esquema atual será estendido, adicionando colunas às tabelas existentes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4aa23-123">If the <see cref="T:System.Data.DataSet" /> already contains a schema, the current schema is extended by adding new tables or adding columns to existing tables.</span>
          </span>
          <span data-ttu-id="4aa23-124">Uma exceção será lançada se uma tabela inferida já existir com um namespace diferente ou se qualquer coluna inferida estiver em conflito com colunas existentes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4aa23-124">An exception is thrown if the inferred table already exists but with a different namespace, or if any of the inferred columns conflict with existing columns.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="InferTypedSchema">
      <MemberSignature Language="C#" Value="InferTypedSchema" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.XmlReadMode InferTypedSchema = int32(6)" />
      <MemberSignature Language="DocId" Value="F:System.Data.XmlReadMode.InferTypedSchema" />
      <MemberSignature Language="VB.NET" Value="InferTypedSchema" />
      <MemberSignature Language="C++ CLI" Value="InferTypedSchema" />
      <MemberSignature Language="F#" Value="InferTypedSchema = 6" Usage="System.Data.XmlReadMode.InferTypedSchema" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <MemberValue>6</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="4aa23-125">Ignora qualquer esquema embutido, infere o esquema digitado dos dados e carrega-os.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4aa23-125">Ignores any inline schema, infers a strongly typed schema from the data, and loads the data.</span>
          </span>
          <span data-ttu-id="4aa23-126">Se o tipo não pode ser inferido dos dados, ele é interpretado como dados de cadeia de caracteres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4aa23-126">If the type cannot be inferred from the data, it is interpreted as string data.</span>
          </span>
          <span data-ttu-id="4aa23-127">Se o <see cref="T:System.Data.DataSet" /> já contiver um esquema, o esquema atual é estendido, adicionando novas colunas ou adicionando colunas às tabelas existentes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4aa23-127">If the <see cref="T:System.Data.DataSet" /> already contains a schema, the current schema is extended, either by adding new tables or by adding columns to existing tables.</span>
          </span>
          <span data-ttu-id="4aa23-128">Uma exceção será lançada se uma tabela inferida já existir com um namespace diferente ou se qualquer coluna inferida estiver em conflito com colunas existentes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4aa23-128">An exception is thrown if the inferred table already exists but with a different namespace, or if any of the inferred columns conflict with existing columns.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ReadSchema">
      <MemberSignature Language="C#" Value="ReadSchema" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.XmlReadMode ReadSchema = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Data.XmlReadMode.ReadSchema" />
      <MemberSignature Language="VB.NET" Value="ReadSchema" />
      <MemberSignature Language="C++ CLI" Value="ReadSchema" />
      <MemberSignature Language="F#" Value="ReadSchema = 1" Usage="System.Data.XmlReadMode.ReadSchema" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="4aa23-129">Lê qualquer esquema embutido e carrega os dados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4aa23-129">Reads any inline schema and loads the data.</span>
          </span>
          <span data-ttu-id="4aa23-130">Se o <see cref="T:System.Data.DataSet" /> já contém o esquema, novas tabelas podem ser adicionadas ao esquema, mas uma exceção é lançada se todas as tabelas no esquema embutido já existirem no <see cref="T:System.Data.DataSet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4aa23-130">If the <see cref="T:System.Data.DataSet" /> already contains schema, new tables may be added to the schema, but an exception is thrown if any tables in the inline schema already exist in the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>