<Type Name="DataTableExtensions" FullName="System.Data.DataTableExtensions">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8f08958ecd6928721c61e8f8c6e0b2acfd700a86" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36678235" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class DataTableExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DataTableExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataTableExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module DataTableExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTableExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type DataTableExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Defines the extension methods to the <see cref="T:System.Data.DataTable" /> class. <see cref="T:System.Data.DataTableExtensions" /> is a static class.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsDataView">
      <MemberSignature Language="C#" Value="public static System.Data.DataView AsDataView (this System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataView AsDataView(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsDataView(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsDataView (table As DataTable) As DataView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataView ^ AsDataView(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="static member AsDataView : System.Data.DataTable -&gt; System.Data.DataView" Usage="System.Data.DataTableExtensions.AsDataView table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" RefType="this" />
      </Parameters>
      <Docs>
        <param name="table">The source <see cref="T:System.Data.DataTable" /> from which the LINQ-enabled <see cref="T:System.Data.DataView" /> is created.</param>
        <summary>Creates and returns a LINQ-enabled <see cref="T:System.Data.DataView" /> object.</summary>
        <returns>A LINQ-enabled <see cref="T:System.Data.DataView" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataView> permite cenários de associação de dados de [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] e pode ser criado de um tipo ou sem-tipo <xref:System.Data.DataTable>, fornecendo um modo de exibição padrão da tabela. A filtragem e a classificação podem ser definidas em <xref:System.Data.DataView> depois que foi criado de <xref:System.Data.DataTable>. O <xref:System.Data.DataView> , em seguida, é associado a um controle de interface do usuário, como um <xref:System.Windows.Forms.DataGrid> ou <xref:System.Windows.Forms.DataGridView>, fornecendo um modelo de associação de dados simples.  
  
 Para obter mais informações e exemplos, consulte [criando um objeto de DataView](~/docs/framework/data/adonet/creating-a-dataview-object-linq-to-dataset.md).  
  
   
  
## Examples  
 O exemplo a seguir cria um <xref:System.Data.DataView> o SalesOrderDetail de tabela e define-a como a fonte de dados de um <xref:System.Windows.Forms.BindingSource> objeto, que atua como um proxy para um <xref:System.Windows.Forms.DataGridView> controle:  
  
 [!code-csharp[DP DataView Samples#CreateLDVFromTable](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#createldvfromtable)]
 [!code-vb[DP DataView Samples#CreateLDVFromTable](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#createldvfromtable)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsDataView&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Data.DataView AsDataView&lt;T&gt; (this System.Data.EnumerableRowCollection&lt;T&gt; source) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataView AsDataView&lt;(class System.Data.DataRow) T&gt;(class System.Data.EnumerableRowCollection`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsDataView``1(System.Data.EnumerableRowCollection{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsDataView(Of T As DataRow) (source As EnumerableRowCollection(Of T)) As DataView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataView ^ AsDataView(System::Data::EnumerableRowCollection&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsDataView : System.Data.EnumerableRowCollection&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; -&gt; System.Data.DataView (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.AsDataView source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataView</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Data.EnumerableRowCollection&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">O tipo de objetos na sequência de origem, normalmente <see cref="T:System.Data.DataRow" />.</typeparam>
        <param name="source">The source [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] query from which the LINQ-enabled <see cref="T:System.Data.DataView" /> is created.</param>
        <summary>Creates and returns a LINQ-enabled <see cref="T:System.Data.DataView" /> object representing the [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] query.</summary>
        <returns>A LINQ-enabled <see cref="T:System.Data.DataView" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataView> habilita cenários de associação de dados para [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] e pode ser criado de um [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] consulta. O <xref:System.Data.DataView> representa a consulta em si, e não é um modo de exibição na parte superior da consulta. Recém-criado <xref:System.Data.DataView> infere a filtragem e classificação de informações da consulta é criado a partir. O <xref:System.Data.DataView> , em seguida, é associado a um controle de interface do usuário, como um <xref:System.Windows.Forms.DataGrid> ou <xref:System.Windows.Forms.DataGridView>, fornecendo um modelo de associação de dados simples.  
  
 O parâmetro `T` de parâmetro de entrada `source` só pode ser do tipo <xref:System.Data.DataRow> ou um tipo derivado de <xref:System.Data.DataRow>.  
  
 Os seguintes operadores de consulta, têm suporte apenas em uma consulta usada para criar <xref:System.Data.DataView>:  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Cast%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.OrderBy%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.OrderByDescending%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Select%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.ThenBy%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.ThenByDescending%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Where%2A>  
  
 Para obter mais informações e exemplos, consulte [criando um objeto de DataView](~/docs/framework/data/adonet/creating-a-dataview-object-linq-to-dataset.md).  
  
   
  
## Examples  
 O exemplo a seguir cria um <xref:System.Data.DataView> de pedidos online ordenados pelo total devido:  
  
 [!code-csharp[DP DataView Samples#CreateLDVFromQuery1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#createldvfromquery1)]
 [!code-vb[DP DataView Samples#CreateLDVFromQuery1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#createldvfromquery1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsEnumerable">
      <MemberSignature Language="C#" Value="public static System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt; AsEnumerable (this System.Data.DataTable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.EnumerableRowCollection`1&lt;class System.Data.DataRow&gt; AsEnumerable(class System.Data.DataTable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsEnumerable (source As DataTable) As EnumerableRowCollection(Of DataRow)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::EnumerableRowCollection&lt;System::Data::DataRow ^&gt; ^ AsEnumerable(System::Data::DataTable ^ source);" />
      <MemberSignature Language="F#" Value="static member AsEnumerable : System.Data.DataTable -&gt; System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt;" Usage="System.Data.DataTableExtensions.AsEnumerable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.DataTable" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">The source <see cref="T:System.Data.DataTable" /> to make enumerable.</param>
        <summary>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> object, where the generic parameter <paramref name="T" /> is <see cref="T:System.Data.DataRow" />. This object can be used in a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] expression or method query.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> object, where the generic parameter <paramref name="T" /> is <see cref="T:System.Data.DataRow" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)] as consultas funcionam em fontes de dados que implementam o <xref:System.Collections.Generic.IEnumerable%601> interface ou <xref:System.Linq.IQueryable> interface.  O <xref:System.Data.DataTable> a classe não implementa a interface, portanto você deve chamar o <xref:System.Data.DataTableExtensions.AsEnumerable%2A> método a ser usado o <xref:System.Data.DataTable> como uma fonte no `From` cláusula de um [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] consulta. Você também pode obter personalizadas, específicas de domínio, operadores, como <xref:System.Data.DataTableExtensions.CopyToDataTable%2A>, retornando um <xref:System.Collections.Generic.IEnumerable%601> objeto.  
  
 O objeto enumerável retornado pelo <xref:System.Data.DataTableExtensions.AsEnumerable%2A> método permanentemente está associado ao <xref:System.Data.DataTable> que produziu. Diversas chamadas para o <xref:System.Data.DataTableExtensions.AsEnumerable%2A> método será múltiplo de retorno, independente de objetos que podem ser consultados são associadas à fonte de <xref:System.Data.DataTable>.  
  
   
  
## Examples  
 No exemplo a seguir, o `DisplayProducts` método recebe um DataTable que contém uma coluna de dados denominada `ProductName`, extrai o `ProductName` valores e, em seguida, imprime os valores.  
  
 [!code-csharp[system.data.DataTableExtensions.AsEnumerable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.data.datatableextensions.asenumerable/cs/source.cs#1)]
 [!code-vb[system.data.DataTableExtensions.AsEnumerable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.data.datatableextensions.asenumerable/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The source <see cref="T:System.Data.DataTable" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyToDataTable&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a <see cref="T:System.Data.DataTable" /> that contains copies of the <see cref="T:System.Data.DataRow" /> objects, given an input <see cref="T:System.Collections.Generic.IEnumerable`1" /> object.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Data.DataTable CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataTable CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T)) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataTable ^ CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; -&gt; System.Data.DataTable (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">O tipo de objetos na sequência de origem, normalmente <see cref="T:System.Data.DataRow" />.</typeparam>
        <param name="source">The source <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequence.</param>
        <summary>Returns a <see cref="T:System.Data.DataTable" /> that contains copies of the <see cref="T:System.Data.DataRow" /> objects, given an input <see cref="T:System.Collections.Generic.IEnumerable`1" /> object where the generic parameter <paramref name="T" /> is <see cref="T:System.Data.DataRow" />.</summary>
        <returns>A <see cref="T:System.Data.DataTable" /> that contains the input sequence as the type of <see cref="T:System.Data.DataRow" /> objects.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O parâmetro `T` de parâmetro de entrada `source` só pode ser do tipo <xref:System.Data.DataRow> ou um tipo derivado de <xref:System.Data.DataRow>.  
  
 A sequência de entrada pode ser qualquer <xref:System.Collections.Generic.IEnumerable%601> de origem, não apenas uma consulta ou uma consulta em um <xref:System.Data.DataTable>. Observe que se a sequência de origem é uma consulta, chamar este operador forçará a execução imediata. Enumeração de sequência de origem também pode causar exceções seja gerada.  
  
 O esquema da tabela de destino é baseado no esquema do primeiro <xref:System.Data.DataRow> linha na sequência de origem. Os metadados da tabela é extraído do <xref:System.Data.DataRow> metadados e a tabela de valores dos valores de coluna a <xref:System.Data.DataRow>. Para um tipo <xref:System.Data.DataTable>, os tipos não são preservados. O esquema e os dados são transferidos, mas as linhas resultantes da tabela de saída não serão de tipado <xref:System.Data.DataRow> tipo. O <xref:System.Data.DataRow.RowState%2A> e <xref:System.Data.DataRow.RowError%2A> propriedades não são preservadas durante a cópia da origem <xref:System.Data.DataRow> para retornado <xref:System.Data.DataTable>.  
  
 Quando um **nulo** referência ou anulável com um valor de **nulo** é encontrado em uma fonte de <xref:System.Data.DataRow>, esse método substitui o valor no destino <xref:System.Data.DataTable> com um valor de <xref:System.DBNull.Value>.  
  
 A tabela gerada retornada pelo método tem o nome de tabela padrão. Se você deseja nomear o <xref:System.Data.DataTable>, anexá-lo para um <xref:System.Data.DataSet>, ou executar qualquer outra <xref:System.Data.DataTable> operação específica, você deve fazer isso depois que a tabela é criada e retornada.  
  
 Para obter mais informações, consulte [criando um DataTable de uma consulta](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md).  
  
   
  
## Examples  
 O exemplo a seguir consulta a tabela SalesOrderHeader para pedidos após 8 de agosto de 2001 e usa o <xref:System.Data.DataTableExtensions.CopyToDataTable%2A> método para criar um <xref:System.Data.DataTable> dessa consulta. O <xref:System.Data.DataTable> é então associado a um <xref:System.Windows.Forms.BindingSource>, que age como o proxy para um <xref:System.Windows.Forms.DataGridView>.  
  
 [!code-csharp[DP LINQ to DataSet Examples#CopyToDataTable1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP LINQ to DataSet Examples/CS/Program.cs#copytodatatable1)]
 [!code-vb[DP LINQ to DataSet Examples#CopyToDataTable1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP LINQ to DataSet Examples/VB/Module1.vb#copytodatatable1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The source <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequence is <see langword="null" /> and a new table cannot be created.</exception>
        <exception cref="T:System.InvalidOperationException">A <see cref="T:System.Data.DataRow" /> in the source sequence has a state of <see cref="F:System.Data.DataRowState.Deleted" />.  The source sequence does not contain any <see cref="T:System.Data.DataRow" /> objects.  A <see cref="T:System.Data.DataRow" /> in the source sequence is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Data.DataTable table, System.Data.LoadOption options) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Data.DataTable table, valuetype System.Data.LoadOption options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T), table As DataTable, options As LoadOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static void CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Data::DataTable ^ table, System::Data::LoadOption options);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; * System.Data.DataTable * System.Data.LoadOption -&gt; unit (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable (source, table, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="options" Type="System.Data.LoadOption" />
      </Parameters>
      <Docs>
        <typeparam name="T">O tipo de objetos na sequência de origem, normalmente <see cref="T:System.Data.DataRow" />.</typeparam>
        <param name="source">The source <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequence.</param>
        <param name="table">The destination <see cref="T:System.Data.DataTable" />.</param>
        <param name="options">A <see cref="T:System.Data.LoadOption" /> enumeration that specifies the <see cref="T:System.Data.DataTable" /> load options.</param>
        <summary>Copies <see cref="T:System.Data.DataRow" /> objects to the specified <see cref="T:System.Data.DataTable" />, given an input <see cref="T:System.Collections.Generic.IEnumerable`1" /> object where the generic parameter <paramref name="T" /> is <see cref="T:System.Data.DataRow" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O parâmetro `T` de parâmetro de entrada `source` só pode ser do tipo <xref:System.Data.DataRow>, ou um tipo derivado de <xref:System.Data.DataRow>.  
  
 A sequência de entrada pode ser qualquer <xref:System.Collections.Generic.IEnumerable%601> de origem, não apenas uma consulta em um <xref:System.Data.DataTable>. Observe que se a sequência de origem é uma consulta, chamar este operador forçará a execução imediata. Enumeração de sequência de origem também pode causar exceções seja gerada.  
  
 O esquema da tabela de destino é baseado no esquema do primeiro <xref:System.Data.DataRow> linha na sequência de origem. Os metadados da tabela é extraído do <xref:System.Data.DataRow> metadados e a tabela de valores dos valores de coluna a <xref:System.Data.DataRow>. Para um tipo <xref:System.Data.DataTable>, os tipos não são preservados. O esquema e os dados são transferidos, mas as linhas resultantes da tabela de saída não serão de tipado <xref:System.Data.DataRow> tipo. O <xref:System.Data.DataRow.RowState%2A> e <xref:System.Data.DataRow.RowError%2A> propriedades não são preservadas durante a cópia da origem <xref:System.Data.DataRow> para retornado <xref:System.Data.DataTable>.  
  
 Quando um **nulo** referência ou anulável com um valor de **nulo** é encontrado em uma fonte de <xref:System.Data.DataRow>, esse método substitui o valor no destino <xref:System.Data.DataTable> com um valor de <xref:System.DBNull.Value>.  
  
 A tabela gerada retornada pelo método tem o nome de tabela padrão. Se você deseja nomear o <xref:System.Data.DataTable>, anexá-lo para um <xref:System.Data.DataSet>, ou executar qualquer outra <xref:System.Data.DataTable> operação específica, você deve fazer isso depois que a tabela é criada e retornada.  
  
 Para obter mais informações, consulte [criando um DataTable de uma consulta](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The copied <see cref="T:System.Data.DataRow" /> objects do not fit the schema of the destination <see cref="T:System.Data.DataTable" />.</exception>
        <exception cref="T:System.ArgumentNullException">The source <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequence is <see langword="null" /> or the destination <see cref="T:System.Data.DataTable" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">A <see cref="T:System.Data.DataRow" /> in the source sequence has a state of <see cref="F:System.Data.DataRowState.Deleted" />.  The source sequence does not contain any <see cref="T:System.Data.DataRow" /> objects.  A <see cref="T:System.Data.DataRow" /> in the source sequence is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Data.DataTable table, System.Data.LoadOption options, System.Data.FillErrorEventHandler errorHandler) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Data.DataTable table, valuetype System.Data.LoadOption options, class System.Data.FillErrorEventHandler errorHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T), table As DataTable, options As LoadOption, errorHandler As FillErrorEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static void CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Data::DataTable ^ table, System::Data::LoadOption options, System::Data::FillErrorEventHandler ^ errorHandler);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; * System.Data.DataTable * System.Data.LoadOption * System.Data.FillErrorEventHandler -&gt; unit (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable (source, table, options, errorHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="options" Type="System.Data.LoadOption" />
        <Parameter Name="errorHandler" Type="System.Data.FillErrorEventHandler" />
      </Parameters>
      <Docs>
        <typeparam name="T">O tipo de objetos na sequência de origem, normalmente <see cref="T:System.Data.DataRow" />.</typeparam>
        <param name="source">The source <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequence.</param>
        <param name="table">The destination <see cref="T:System.Data.DataTable" />.</param>
        <param name="options">A <see cref="T:System.Data.LoadOption" /> enumeration that specifies the <see cref="T:System.Data.DataTable" /> load options.</param>
        <param name="errorHandler">A <see cref="T:System.Data.FillErrorEventHandler" /> delegate that represents the method that will handle an error.</param>
        <summary>Copies <see cref="T:System.Data.DataRow" /> objects to the specified <see cref="T:System.Data.DataTable" />, given an input <see cref="T:System.Collections.Generic.IEnumerable`1" /> object where the generic parameter <paramref name="T" /> is <see cref="T:System.Data.DataRow" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O parâmetro `T` de parâmetro de entrada `source` só pode ser do tipo <xref:System.Data.DataRow>, ou um tipo derivado de <xref:System.Data.DataRow>.  
  
 A sequência de entrada pode ser qualquer <xref:System.Collections.Generic.IEnumerable%601> de origem, não apenas uma consulta em um <xref:System.Data.DataTable>. Observe que se a sequência de origem é uma consulta, chamar este operador forçará a execução imediata. Enumeração de sequência de origem também pode causar exceções seja gerada.  
  
 O esquema da tabela de destino é baseado no esquema do primeiro <xref:System.Data.DataRow> linha na sequência de origem. Os metadados da tabela é extraído do <xref:System.Data.DataRow> metadados e a tabela de valores dos valores de coluna a <xref:System.Data.DataRow>. Para um tipo <xref:System.Data.DataTable>, os tipos não são preservados. O esquema e os dados são transferidos, mas as linhas resultantes da tabela de saída não serão de tipado <xref:System.Data.DataRow> tipo. O <xref:System.Data.DataRow.RowState%2A> e <xref:System.Data.DataRow.RowError%2A> propriedades não são preservadas durante a cópia da origem <xref:System.Data.DataRow> para retornado <xref:System.Data.DataTable>.  
  
 Quando um **nulo** referência ou anulável com um valor de **nulo** é encontrado em uma fonte de <xref:System.Data.DataRow>, esse método substitui o valor no destino <xref:System.Data.DataTable> com um valor de <xref:System.DBNull.Value>.  
  
 A tabela gerada retornada pelo método tem o nome de tabela padrão. Se você deseja nomear o <xref:System.Data.DataTable>, anexá-lo para um <xref:System.Data.DataSet>, ou executar qualquer outra <xref:System.Data.DataTable> operação específica, você deve fazer isso depois que a tabela é criada e retornada.  
  
 Se uma exceção é lançada durante a cópia de uma linha de dados na tabela de destino, como uma exceção de restrição, o `errorHandler` delegado é chamado. Um <xref:System.Data.FillErrorEventArgs> é passado para o `errorHandler` delegar com os seguintes valores:  
  
-   O <xref:System.Data.FillErrorEventArgs.Values%2A> está definida como uma cópia dos dados de origem.  
  
-   O <xref:System.Data.FillErrorEventArgs.DataTable%2A> está definida como o destino <xref:System.Data.DataTable>.  
  
-   O <xref:System.Data.FillErrorEventArgs.Errors%2A> estiver definida como a exceção capturada.  
  
 O <xref:System.Data.FillErrorEventArgs.Continue%2A> propriedade é lida depois retorna a chamada do delegado. Se o <xref:System.Data.FillErrorEventArgs.Continue%2A> é de propriedade `true`, a sequência de origem continua a ser enumerado e carregados na tabela de dados. Se o <xref:System.Data.FillErrorEventArgs.Continue%2A> é de propriedade `false`, a exceção original é lançada a <xref:System.Data.DataTableExtensions.CopyToDataTable%2A> método.  
  
 Para obter mais informações, consulte [criando um DataTable de uma consulta](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The copied <see cref="T:System.Data.DataRow" /> objects do not fit the schema of the destination <see cref="T:System.Data.DataTable" />.</exception>
        <exception cref="T:System.ArgumentNullException">The source <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequence is <see langword="null" /> or the destination <see cref="T:System.Data.DataTable" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">A <see cref="T:System.Data.DataRow" /> in the source sequence has a state of <see cref="F:System.Data.DataRowState.Deleted" />.  -or-  The source sequence does not contain any <see cref="T:System.Data.DataRow" /> objects.  -or-  A <see cref="T:System.Data.DataRow" /> in the source sequence is <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>