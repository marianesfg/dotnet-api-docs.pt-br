<Type Name="IDesignerFilter" FullName="System.ComponentModel.Design.IDesignerFilter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="240f72dd2638187f7f384e3fa7c4053213d1ff96" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63899076" /></Metadata><TypeSignature Language="C#" Value="public interface IDesignerFilter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDesignerFilter" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.IDesignerFilter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDesignerFilter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDesignerFilter" />
  <TypeSignature Language="F#" Value="type IDesignerFilter = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Fornece uma interface que permite que um designer acesse e filtre os dicionários de um <see cref="T:System.ComponentModel.TypeDescriptor" /> que armazena os descritores de evento, atributo e propriedade que um componente de designer pode expor para o ambiente em tempo de design.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.IDesignerFilter> permite que um designer filtrar o conjunto de descritores de propriedade, atributo e eventos que seu componente associado expõe por meio de um <xref:System.ComponentModel.TypeDescriptor>. Os métodos dessa interface cujos nomes começam com `Pre` são chamados imediatamente antes dos métodos cujos nomes começam com `Post`.  
  
 Se você quiser adicionar descritores de propriedade, evento ou atributo, use uma <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A>, <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A>, ou <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A> método.  
  
 Se você quiser alterar ou remover o atributo, evento ou descritores de propriedade, use uma <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A>, <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A>, ou <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A> método.  
  
   
  
## Examples  
 O exemplo a seguir demonstra uma substituição do <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A> que adiciona uma propriedade do designer para a janela Propriedades quando o controle do designer é selecionado em tempo de design. Consulte o exemplo para o <xref:System.Windows.Forms.Design.ControlDesigner> classe para um exemplo completo de designer que usa o <xref:System.ComponentModel.Design.IDesignerFilter> interface.  
  
 [!code-cpp[ControlDesignerExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlDesignerExample/CPP/controldesignerexample.cpp#2)]
 [!code-csharp[ControlDesignerExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlDesignerExample/CS/controldesignerexample.cs#2)]
 [!code-vb[ControlDesignerExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlDesignerExample/VB/controldesignerexample.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.ITypeDescriptorFilterService" />
    <altmember cref="T:System.ComponentModel.TypeDescriptor" />
  </Docs>
  <Members>
    <Member MemberName="PostFilterAttributes">
      <MemberSignature Language="C#" Value="public void PostFilterAttributes (System.Collections.IDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostFilterAttributes(class System.Collections.IDictionary attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostFilterAttributes (attributes As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostFilterAttributes(System::Collections::IDictionary ^ attributes);" />
      <MemberSignature Language="F#" Value="abstract member PostFilterAttributes : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PostFilterAttributes attributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="attributes">Os objetos <see cref="T:System.Attribute" /> para a classe do componente. As chaves no dicionário de atributos são os valores <see cref="P:System.Attribute.TypeId" /> dos atributos.</param>
        <summary>Quando substituído em uma classe derivada, permite que um designer altere ou remova itens do conjunto de atributos que ele expõe por meio de um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método fornece uma maneira de alterar ou remover itens no dicionário de atributos que o componente associado do designer que implementa essa interface expõe por meio de um <xref:System.ComponentModel.TypeDescriptor>.  
  
 As chaves no dicionário de atributos são as IDs de tipo dos atributos. Os objetos são do tipo <xref:System.Attribute>. Esse método é chamado imediatamente após <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A>.  
  
 A ID de tipo de um atributo pode ser qualquer objeto. Por padrão, <xref:System.Attribute> retorna seu <xref:System.Type> como o valor do seu <xref:System.Attribute.TypeId%2A> propriedade. Você pode verificar a <xref:System.Attribute.TypeId%2A> de um atributo no dicionário quanto à equivalência com um conhecido <xref:System.Attribute.TypeId%2A> para um atributo para identificá-lo ou usar <xref:System.Reflection> para identificar o objeto de atributo.  
  
 Quando um atributo que tem o mesmo <xref:System.Attribute.TypeId%2A> como um atributo existente ou herdado é adicionado a um componente, o novo atributo substitui o atributo antigo. Para muitos atributos, um novo atributo do mesmo tipo substituirá qualquer atributo anterior do tipo. No entanto, alguns tipos de atributos retornam um <xref:System.Attribute.TypeId%2A> que distingue o atributo de forma seletiva. Por exemplo, para fornecer diferentes tipos de designers ativos simultâneos para um tipo, como um <xref:System.ComponentModel.Design.IRootDesigner> e uma <xref:System.ComponentModel.Design.IDesigner>, o <xref:System.ComponentModel.DesignerAttribute> classe retorna uma <xref:System.Attribute.TypeId%2A> que identifica exclusivamente o atributo e o designer base tipo. O <xref:System.ComponentModel.DesignerAttribute> construtor permite que você especifique o tipo de designer base do designer, além de seu tipo específico, e <xref:System.ComponentModel.DesignerAttribute> retorna um <xref:System.Attribute.TypeId%2A> que reflete isso. Portanto, quando você adiciona um novo <xref:System.ComponentModel.DesignerAttribute> com um tipo de designer base do mesmo tipo como o tipo de designer base de existente <xref:System.ComponentModel.DesignerAttribute>, o atributo antigo é substituído pelo novo atributo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Você pode filtrar diretamente o dicionário que é acessível por meio de <paramref name="attributes" /> parâmetro, ou você pode deixá-lo inalterado. Se você está substituindo esse método, chame a implementação base depois de realizar sua própria filtragem.</para></block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PostFilterEvents">
      <MemberSignature Language="C#" Value="public void PostFilterEvents (System.Collections.IDictionary events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostFilterEvents(class System.Collections.IDictionary events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostFilterEvents (events As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostFilterEvents(System::Collections::IDictionary ^ events);" />
      <MemberSignature Language="F#" Value="abstract member PostFilterEvents : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PostFilterEvents events" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="events">Os objetos <see cref="T:System.ComponentModel.EventDescriptor" /> que representam os eventos da classe do componente. As chaves no dicionário de eventos são nomes de evento.</param>
        <summary>Quando substituído em uma classe derivada, permite que um designer altere ou remova itens do conjunto de eventos que ele expõe por meio de um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método fornece uma maneira de alterar ou remover itens no dicionário de eventos que são expostos por meio de um <xref:System.ComponentModel.TypeDescriptor>.  
  
 As chaves no dicionário de eventos são os nomes dos eventos. Os objetos são do tipo <xref:System.ComponentModel.EventDescriptor>. Esse método é chamado imediatamente após <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Você pode filtrar diretamente o dicionário que é acessível por meio de <paramref name="events" /> parâmetro, ou você pode deixá-lo inalterado. Se você está substituindo esse método, chame a implementação base depois de realizar sua própria filtragem.</para></block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PostFilterProperties">
      <MemberSignature Language="C#" Value="public void PostFilterProperties (System.Collections.IDictionary properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostFilterProperties(class System.Collections.IDictionary properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostFilterProperties (properties As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostFilterProperties(System::Collections::IDictionary ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member PostFilterProperties : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PostFilterProperties properties" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="properties">Os objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> que representam as propriedades da classe do componente. As chaves no dicionário de propriedades são nomes de propriedade.</param>
        <summary>Quando substituído em uma classe derivada, permite que um designer altere ou remova itens do conjunto de propriedades que ele expõe por meio de um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método fornece uma maneira de alterar ou remover itens no dicionário de propriedades que são expostas por meio de um <xref:System.ComponentModel.TypeDescriptor>.  
  
 As chaves no dicionário de propriedades são os nomes das propriedades. Os objetos são do tipo <xref:System.ComponentModel.PropertyDescriptor>. Esse método é chamado imediatamente após <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Você pode filtrar diretamente o dicionário que é acessível por meio de <paramref name="properties" /> parâmetro, ou você pode deixá-lo inalterado. Se você está substituindo esse método, chame a implementação base depois de realizar sua própria filtragem.</para></block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PreFilterAttributes">
      <MemberSignature Language="C#" Value="public void PreFilterAttributes (System.Collections.IDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PreFilterAttributes(class System.Collections.IDictionary attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PreFilterAttributes (attributes As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PreFilterAttributes(System::Collections::IDictionary ^ attributes);" />
      <MemberSignature Language="F#" Value="abstract member PreFilterAttributes : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PreFilterAttributes attributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="attributes">Os objetos <see cref="T:System.Attribute" /> para a classe do componente. As chaves no dicionário de atributos são os valores <see cref="P:System.Attribute.TypeId" /> dos atributos.</param>
        <summary>Quando substituído em uma classe derivada, permite que um designer adicione itens ao conjunto de atributos que ele expõe por meio de um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método fornece uma maneira de adicionar itens ao dicionário de atributos que o componente associado do designer que implementa essa interface expõe por meio de um <xref:System.ComponentModel.TypeDescriptor>.  
  
 As chaves no dicionário de atributos são as IDs de tipo dos atributos. Os objetos são do tipo <xref:System.Attribute>. Esse método é chamado imediatamente antes do <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A>.  
  
 A ID de tipo de um atributo pode ser qualquer objeto. Por padrão, <xref:System.Attribute> retorna seu <xref:System.Type> como o valor do seu <xref:System.Attribute.TypeId%2A> propriedade. Você pode verificar a <xref:System.Attribute.TypeId%2A> de um atributo no dicionário quanto à equivalência com um conhecido <xref:System.Attribute.TypeId%2A> para um atributo para identificá-lo ou usar <xref:System.Reflection> para identificar o objeto de atributo.  
  
 Quando um atributo que tem o mesmo <xref:System.Attribute.TypeId%2A> como um atributo existente ou herdado é adicionado a um componente, o novo atributo substitui o atributo antigo. Para muitos atributos, um novo atributo do mesmo tipo substituirá qualquer atributo anterior do tipo. No entanto, alguns tipos de atributos retornam um <xref:System.Attribute.TypeId%2A> que distingue o atributo de forma seletiva. Por exemplo, para fornecer diferentes tipos de designers ativos simultâneos para um tipo, como um <xref:System.ComponentModel.Design.IRootDesigner> e uma <xref:System.ComponentModel.Design.IDesigner>, o <xref:System.ComponentModel.DesignerAttribute> classe retorna uma <xref:System.Attribute.TypeId%2A> que identifica exclusivamente o atributo e o designer base tipo. O <xref:System.ComponentModel.DesignerAttribute> construtor permite que você especifique o tipo de designer base do designer, além de seu tipo específico, e <xref:System.ComponentModel.DesignerAttribute> retorna um <xref:System.Attribute.TypeId%2A> que reflete isso. Portanto, quando você adiciona um novo <xref:System.ComponentModel.DesignerAttribute> com um tipo de designer base do mesmo tipo como o tipo de designer base de existente <xref:System.ComponentModel.DesignerAttribute>, o atributo antigo é substituído pelo novo atributo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Você pode filtrar diretamente o dicionário que é acessível por meio de <paramref name="attributes" /> parâmetro, ou você pode deixá-lo inalterado. Se você está substituindo esse método, chame a implementação base depois de realizar sua própria filtragem.</para></block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PreFilterEvents">
      <MemberSignature Language="C#" Value="public void PreFilterEvents (System.Collections.IDictionary events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PreFilterEvents(class System.Collections.IDictionary events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PreFilterEvents (events As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PreFilterEvents(System::Collections::IDictionary ^ events);" />
      <MemberSignature Language="F#" Value="abstract member PreFilterEvents : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PreFilterEvents events" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="events">Os objetos <see cref="T:System.ComponentModel.EventDescriptor" /> que representam os eventos da classe do componente. As chaves no dicionário de eventos são nomes de evento.</param>
        <summary>Quando substituído em uma classe derivada, permite que um designer adicione itens ao conjunto de eventos que ele expõe por meio de um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método fornece uma maneira de adicionar itens ao dicionário de eventos que um designer expõe por meio de um <xref:System.ComponentModel.TypeDescriptor>.  
  
 As chaves no dicionário de eventos são os nomes dos eventos. Os objetos são do tipo <xref:System.ComponentModel.EventDescriptor>. Esse método é chamado imediatamente antes do <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Você pode modificar diretamente o dicionário que é acessível por meio de <paramref name="events" /> parâmetro, ou você pode deixá-lo inalterado. Se você está substituindo esse método, chame a implementação base antes de executar seus próprios recursos de filtragem.</para></block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PreFilterProperties">
      <MemberSignature Language="C#" Value="public void PreFilterProperties (System.Collections.IDictionary properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PreFilterProperties(class System.Collections.IDictionary properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PreFilterProperties (properties As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PreFilterProperties(System::Collections::IDictionary ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member PreFilterProperties : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PreFilterProperties properties" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="properties">Os objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> que representam as propriedades da classe do componente. As chaves no dicionário de propriedades são nomes de propriedade.</param>
        <summary>Quando substituído em uma classe derivada, permite que um designer adicione itens ao conjunto de propriedades que ele expõe por meio de um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método fornece uma maneira de adicionar itens ao dicionário de propriedades que um designer expõe por meio de um <xref:System.ComponentModel.TypeDescriptor>.  
  
 As chaves no dicionário de propriedades são os nomes das propriedades. Os objetos são do tipo <xref:System.ComponentModel.PropertyDescriptor>. Esse método é chamado imediatamente antes do <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Você pode modificar diretamente o dicionário que é acessível por meio de <paramref name="properties" /> parâmetro, ou você pode deixá-lo inalterado. Se você está substituindo esse método, chame a implementação base antes de executar seus próprios recursos de filtragem.</para></block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
  </Members>
</Type>