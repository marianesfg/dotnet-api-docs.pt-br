<Type Name="UndoEngine" FullName="System.ComponentModel.Design.UndoEngine">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="921558fdca96cca1a39d4c27af1a37fb89d55b6c" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39837097" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class UndoEngine : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit UndoEngine extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.UndoEngine" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class UndoEngine&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class UndoEngine abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type UndoEngine = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Especifica a funcionalidade genérica de desfazer/refazer em tempo de design.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.ComponentModel.Design.UndoEngine> classe abstrata fornece uma implementação padrão da funcionalidade de desfazer em tempo de design. Uma unidade de desfazer representa uma única unidade de trabalho que podem ser desfeita. Essa unidade é adicionada a uma pilha e o usuário, em seguida, pode movimentar a pilha para cada ação de desfazer. Unidades de desfazer normalmente são projetadas para ativar/desativar, que significa que a função desfazer chamada retorna duas vezes o aplicativo ao seu estado inicial.  
  
 O <xref:System.ComponentModel.Design.UndoEngine> classe aproveita as seguintes características de objetos que são executados dentro do designer:  
  
-   Todos os objetos interessantes podem ser mantidos em algum formato, o carregador do designer.  
  
-   Todos os objetos acionar notificações de alteração de propriedade quando uma propriedade é alterada.  
  
-   <xref:System.ComponentModel.Design.IDesignerHost> oferece a ideia de transações, que podem ser usados para fabricar uma ação de desfazer que abrange várias ações menores.  
  
 Com esses recursos, <xref:System.ComponentModel.Design.UndoEngine> pode fabricar quaisquer unidades de desfazer que ele precisa automaticamente.  
  
> [!NOTE]
>  Não altere os valores de propriedade diretamente. O <xref:System.ComponentModel.Design.UndoEngine> classe exige que você use apropriado <xref:System.ComponentModel.TypeDescriptor> para alterar os valores de propriedade.  
  
 <xref:System.ComponentModel.Design.UndoEngine> monitora as notificações de alteração criar unidades de desfazer, e as unidades próprias consistem em estados do objeto serializado. A tabela a seguir mostra os serviços que devem estar disponíveis quando <xref:System.ComponentModel.Design.UndoEngine> é criado.  
  
|Serviço|Descrição|  
|-------------|-----------------|  
|<xref:System.ComponentModel.Design.Serialization.ComponentSerializationService>|Salva os valores de propriedade e o objeto para um componente antes e depois que uma alteração é feita.|  
|<xref:System.ComponentModel.Design.IComponentChangeService>|Notifica o mecanismo de desfazer alterações feitas nos componentes.|  
|<xref:System.ComponentModel.Design.IDesignerHost>|Usado para controlar transações.|  
  
> [!NOTE]
>  Porque o <xref:System.ComponentModel.Design.UndoEngine> classe requer <xref:System.ComponentModel.Design.Serialization.ComponentSerializationService> e <xref:System.ComponentModel.Design.IComponentChangeService>, está disponível somente em tempo de design.  
  
 O mecanismo de desfazer rastreia as transações e cria uma unidade de desfazer única que abrange uma transação. Como resultado, o mecanismo de desfazer tem controle sobre a duração de uma ação que pode ser desfeita. Além disso, porque as transações podem ser nomeadas, ações podem ser desfeitas herdam seus nomes a transação atual. Se nenhuma transação está disponível e uma alteração é relatada, o mecanismo de desfazer cria um nome de desfazer com base no tipo de alteração (por exemplo, "alterar propriedade 'Text'").  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />
    <altmember cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" />
    <altmember cref="T:System.ComponentModel.Design.IDesignerHost" />
    <altmember cref="T:System.ComponentModel.Design.IComponentChangeService" />
    <altmember cref="T:System.IServiceProvider" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UndoEngine (IServiceProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.UndoEngine.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (provider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; UndoEngine(IServiceProvider ^ provider);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.UndoEngine : IServiceProvider -&gt; System.ComponentModel.Design.UndoEngine" Usage="new System.ComponentModel.Design.UndoEngine provider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="provider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Um provedor de serviço de gerenciamento do domínio pai.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.UndoEngine" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.ComponentModel.Design.UndoEngine> exige vários serviços do `provider` parâmetro seja útil.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="provider" /> é <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">Um serviço necessário não foi encontrado. Consulte <see cref="T:System.ComponentModel.Design.UndoEngine" /> para ver os serviços necessários. Se você tiver removido esse serviço, lembre-se de substituí-lo.</exception>
        <altmember cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />
        <altmember cref="T:System.ComponentModel.Design.IDesignerHost" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="AddUndoUnit">
      <MemberSignature Language="C#" Value="protected abstract void AddUndoUnit (System.ComponentModel.Design.UndoEngine.UndoUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddUndoUnit(class System.ComponentModel.Design.UndoEngine/UndoUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.UndoEngine.AddUndoUnit(System.ComponentModel.Design.UndoEngine.UndoUnit)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub AddUndoUnit (unit As UndoEngine.UndoUnit)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void AddUndoUnit(System::ComponentModel::Design::UndoEngine::UndoUnit ^ unit);" />
      <MemberSignature Language="F#" Value="abstract member AddUndoUnit : System.ComponentModel.Design.UndoEngine.UndoUnit -&gt; unit" Usage="undoEngine.AddUndoUnit unit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="System.ComponentModel.Design.UndoEngine+UndoUnit" />
      </Parameters>
      <Docs>
        <param name="unit">A unidade de desfazer a ser adicionada</param>
        <summary>Adiciona um <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" /> à pilha de desfazer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Criar o `unit` parâmetro ao chamar o <xref:System.ComponentModel.Design.UndoEngine.CreateUndoUnit%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />
      </Docs>
    </Member>
    <Member MemberName="CreateUndoUnit">
      <MemberSignature Language="C#" Value="protected virtual System.ComponentModel.Design.UndoEngine.UndoUnit CreateUndoUnit (string name, bool primary);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.ComponentModel.Design.UndoEngine/UndoUnit CreateUndoUnit(string name, bool primary) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.UndoEngine.CreateUndoUnit(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateUndoUnit (name As String, primary As Boolean) As UndoEngine.UndoUnit" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::ComponentModel::Design::UndoEngine::UndoUnit ^ CreateUndoUnit(System::String ^ name, bool primary);" />
      <MemberSignature Language="F#" Value="abstract member CreateUndoUnit : string * bool -&gt; System.ComponentModel.Design.UndoEngine.UndoUnit&#xA;override this.CreateUndoUnit : string * bool -&gt; System.ComponentModel.Design.UndoEngine.UndoUnit" Usage="undoEngine.CreateUndoUnit (name, primary)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.UndoEngine+UndoUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="primary" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">O nome da unidade a ser criada.</param>
        <param name="primary">
          <see langword="true" /> para criar a primeira de uma série de unidades aninhadas; <see langword="false" /> para criar as unidades aninhadas subsequentes.</param>
        <summary>Cria um novo <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />.</summary>
        <returns>Um novo <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" /> com um nome especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A implementação padrão do <xref:System.ComponentModel.Design.UndoEngine.CreateUndoUnit%2A> método simplesmente retorna um novo <xref:System.ComponentModel.Design.UndoEngine.UndoUnit>.  
  
 Por padrão, <xref:System.ComponentModel.Design.UndoEngine> não faz nada com o `primary` parâmetro, mas algumas implementações de desfazer, como aquelas que envolvem o COM `Microsoft.VisualStudio.OLE.Interop.IOleParentUndoUnit` padrão de design, talvez seja necessário identificar a diferença entre uma unidade principal e seus filhos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DiscardUndoUnit">
      <MemberSignature Language="C#" Value="protected virtual void DiscardUndoUnit (System.ComponentModel.Design.UndoEngine.UndoUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DiscardUndoUnit(class System.ComponentModel.Design.UndoEngine/UndoUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.UndoEngine.DiscardUndoUnit(System.ComponentModel.Design.UndoEngine.UndoUnit)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DiscardUndoUnit (unit As UndoEngine.UndoUnit)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DiscardUndoUnit(System::ComponentModel::Design::UndoEngine::UndoUnit ^ unit);" />
      <MemberSignature Language="F#" Value="abstract member DiscardUndoUnit : System.ComponentModel.Design.UndoEngine.UndoUnit -&gt; unit&#xA;override this.DiscardUndoUnit : System.ComponentModel.Design.UndoEngine.UndoUnit -&gt; unit" Usage="undoEngine.DiscardUndoUnit unit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="System.ComponentModel.Design.UndoEngine+UndoUnit" />
      </Parameters>
      <Docs>
        <param name="unit">A unidade a ser descartada.</param>
        <summary>Descarta um <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Antes do <xref:System.ComponentModel.Design.UndoEngine.DiscardUndoUnit%2A> método é chamado, a unidade de desfazer é fechada e, em seguida, desfeita.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Libera os recursos usados pelo <see cref="T:System.ComponentModel.Design.UndoEngine" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.UndoEngine.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="undoEngine.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera todos os recursos usados pelo <see cref="T:System.ComponentModel.Design.UndoEngine" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.UndoEngine.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="undoEngine.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
        <summary>Libera os recursos não gerenciados usados pelo <see cref="T:System.ComponentModel.Design.UndoEngine" /> e opcionalmente libera os recursos gerenciados.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.UndoEngine.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.ComponentModel.Design.UndoEngine.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Habilita ou desabilita o <see cref="T:System.ComponentModel.Design.UndoEngine" />.</summary>
        <value>
          <see langword="true" /> se o <see cref="T:System.ComponentModel.Design.UndoEngine" /> estiver habilitado; caso contrário, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRequiredService">
      <MemberSignature Language="C#" Value="protected object GetRequiredService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object GetRequiredService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.UndoEngine.GetRequiredService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetRequiredService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Object ^ GetRequiredService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="member this.GetRequiredService : Type -&gt; obj" Usage="undoEngine.GetRequiredService serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">O tipo de serviço a ser recuperado.</param>
        <summary>Obtém o serviço solicitado.</summary>
        <returns>O serviço solicitado, se encontrado.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> é <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="serviceType" /> é necessário, mas não pode ser encontrado. Se você tiver removido esse serviço, lembre-se de substituí-lo.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="protected object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.UndoEngine.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Object ^ GetService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="member this.GetService : Type -&gt; obj" Usage="undoEngine.GetService serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">O tipo de serviço a ser recuperado.</param>
        <summary>Obtém o serviço solicitado.</summary>
        <returns>O serviço solicitado ou <see langword="null" /> se o serviço solicitado não for encontrado.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="OnUndoing">
      <MemberSignature Language="C#" Value="protected virtual void OnUndoing (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUndoing(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.UndoEngine.OnUndoing(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUndoing (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUndoing(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUndoing : EventArgs -&gt; unit&#xA;override this.OnUndoing : EventArgs -&gt; unit" Usage="undoEngine.OnUndoing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Um <see cref="T:System.EventArgs" /> que contém os dados do evento.</param>
        <summary>Aciona o evento <see cref="E:System.ComponentModel.Design.UndoEngine.Undoing" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUndone">
      <MemberSignature Language="C#" Value="protected virtual void OnUndone (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUndone(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.UndoEngine.OnUndone(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUndone (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUndone(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUndone : EventArgs -&gt; unit&#xA;override this.OnUndone : EventArgs -&gt; unit" Usage="undoEngine.OnUndone e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Um <see cref="T:System.EventArgs" /> que contém os dados do evento.</param>
        <summary>Aciona o evento <see cref="E:System.ComponentModel.Design.UndoEngine.Undone" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Undoing">
      <MemberSignature Language="C#" Value="public event EventHandler Undoing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Undoing" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.UndoEngine.Undoing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Undoing As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Undoing;" />
      <MemberSignature Language="F#" Value="member this.Undoing : EventHandler " Usage="member this.Undoing : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre imediatamente antes de uma ação de desfazer ser executada.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UndoInProgress">
      <MemberSignature Language="C#" Value="public bool UndoInProgress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UndoInProgress" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.UndoEngine.UndoInProgress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UndoInProgress As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UndoInProgress { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UndoInProgress : bool" Usage="System.ComponentModel.Design.UndoEngine.UndoInProgress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indica se uma ação de desfazer está em andamento.</summary>
        <value>
          <see langword="true" /> Se uma ação de desfazer está em andamento. Caso contrário, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Undone">
      <MemberSignature Language="C#" Value="public event EventHandler Undone;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Undone" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.UndoEngine.Undone" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Undone As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Undone;" />
      <MemberSignature Language="F#" Value="member this.Undone : EventHandler " Usage="member this.Undone : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre imediatamente depois de uma ação de desfazer ser executada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.ComponentModel.Design.UndoEngine.Undone> é sempre gerado, mesmo se uma exceção é lançada.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>