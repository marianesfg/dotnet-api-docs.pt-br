<Type Name="ITypeDescriptorFilterService" FullName="System.ComponentModel.Design.ITypeDescriptorFilterService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dde13c6623bf839a58865ff79bd94fd5c045fa19" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63898742" /></Metadata><TypeSignature Language="C#" Value="public interface ITypeDescriptorFilterService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITypeDescriptorFilterService" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.ITypeDescriptorFilterService" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITypeDescriptorFilterService" />
  <TypeSignature Language="C++ CLI" Value="public interface class ITypeDescriptorFilterService" />
  <TypeSignature Language="F#" Value="type ITypeDescriptorFilterService = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Fornece uma interface para modificar o conjunto de descritores de membro de um componente no modo de design.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.ComponentModel.Design.ITypeDescriptorFilterService> interface fornece uma interface que permite a modificação de propriedades, eventos e os atributos de nível de classe de um componente em tempo de design. Essa modificação ocorre por meio do conjunto de descritores de que um componente fornece por meio de um <xref:System.ComponentModel.TypeDescriptor>. O descritor de tipo consultará o site de um componente para o <xref:System.ComponentModel.Design.ITypeDescriptorFilterService> de serviço e, se ele existir, o descritor de tipo passará todos os metadados coletados para esse serviço. O serviço pode modificar os metadados ao adicionar, remover e alterar características existentes do componente.  
  
 Por exemplo, as propriedades de um componente podem ser modificadas por meio de uma chamada para o <xref:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties%2A> método. O serviço de filtro obtém um dicionário que contém os nomes de propriedade e seus descritores de propriedade do tipo <xref:System.ComponentModel.PropertyDescriptor>. As modificações são implementadas usando a seguinte lógica.  
  
|Modificação|Implementação|  
|------------------|--------------------|  
|Remoção|Exclua a entrada correspondente no dicionário.|  
|Adição|Adicione a entrada apropriada ao dicionário.|  
|Alteração|Chamar métodos de descritor de propriedade existente, substitua a entrada do descritor de propriedade associada ou substituir o par chave/valor de propriedade de inteiro no dicionário.|  
  
 O valor de retorno <xref:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties%2A> determina se este conjunto de propriedades é fixo. Se esse método retornar `true`, o <xref:System.ComponentModel.TypeDescriptor> para esse componente pode armazenar em cache os resultados. Esse cache é mantido até que o componente é coletado como lixo ou a <xref:System.ComponentModel.TypeDescriptor.Refresh%2A> método do descritor de tipo é chamado.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra um designer que usa o <xref:System.ComponentModel.Design.ITypeDescriptorFilterService> para filtrar a coleção de atributos de qualquer novo ou existente <xref:System.Windows.Forms.Button> para adicionar um atributo do designer para um novo designer antes de carregar ou recarregar o designer para o botão.  
  
 Para usar o exemplo, adicione o código para um projeto do Windows Forms e carregam os componentes da biblioteca de classes para a caixa de ferramentas.  
  
 Consulte também [passo a passo: Preenchendo automaticamente a caixa de ferramentas com componentes personalizados](https://msdn.microsoft.com/library/fw694kde\(v=vs.110\).aspx).  
  
 Adicione alguns botões ao seu formulário. Adicionar um `ButtonDesignerFilterComponent` ao formulário, e ele será exibido na bandeja de componentes. O `ButtonDesignerFilterComponent` adicionará uma `ButtonDesignerFilterService`, que implementa <xref:System.ComponentModel.Design.ITypeDescriptorFilterService>, como um provedor de serviços de modo de design. Novo ou existente <xref:System.Windows.Forms.Button> objetos no formulário começará a cor em ciclo após o `ButtonDesignerFilterService` substitui o designer para cada botão Novo e existente com um `ColorCycleButtonDesigner`. Os botões irá colorir ciclo quando você move o ponteiro do mouse sobre eles e como alternativa, continue no ciclo ou redefine as cores de primeiro plano e plano de fundo em `MouseLeave` eventos. Novos <xref:System.Windows.Forms.Button> objetos serão dado o `ColorCycleButtonDesigner` por meio do <xref:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes%2A> método da `ButtonDesignerFilterService` que foi carregado, até que o `ButtonDesignerFilterComponent` é descartado e substitui a original <xref:System.ComponentModel.Design.ITypeDescriptorFilterService>. O `ColorCycleButton` classe neste exemplo é um <xref:System.Windows.Forms.Button> associado com um `ColorCycleButtonDesigner`.  
  
 [!code-cpp[ITypeDescriptorFilterService#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ITypeDescriptorFilterService/CPP/source.cpp#1)]
 [!code-csharp[ITypeDescriptorFilterService#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ITypeDescriptorFilterService/CS/source.cs#1)]
 [!code-vb[ITypeDescriptorFilterService#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ITypeDescriptorFilterService/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Para filtrar os descritores de membro expostos por um <see cref="T:System.ComponentModel.TypeDescriptor" />, implemente essa interface em um componente e substitua o <see cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)" />, <see cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)" />, ou <see cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)" /> métodos dessa classe para filtrar os atributos, eventos ou propriedades, respectivamente.</para></block>
    <altmember cref="T:System.ComponentModel.TypeDescriptor" />
    <altmember cref="T:System.ComponentModel.EventDescriptor" />
    <altmember cref="T:System.ComponentModel.PropertyDescriptor" />
    <altmember cref="T:System.Attribute" />
    <altmember cref="T:System.Collections.IDictionary" />
  </Docs>
  <Members>
    <Member MemberName="FilterAttributes">
      <MemberSignature Language="C#" Value="public bool FilterAttributes (System.ComponentModel.IComponent component, System.Collections.IDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool FilterAttributes(class System.ComponentModel.IComponent component, class System.Collections.IDictionary attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function FilterAttributes (component As IComponent, attributes As IDictionary) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool FilterAttributes(System::ComponentModel::IComponent ^ component, System::Collections::IDictionary ^ attributes);" />
      <MemberSignature Language="F#" Value="abstract member FilterAttributes : System.ComponentModel.IComponent * System.Collections.IDictionary -&gt; bool" Usage="iTypeDescriptorFilterService.FilterAttributes (component, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="attributes" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="component">O componente cujos atributos devem ser filtrados.</param>
        <param name="attributes">Um dicionário de atributos que pode ser modificado.</param>
        <summary>Filtra os atributos que um componente expõe por meio de um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
        <returns><see langword="true" /> se o conjunto de atributos filtrados deve ser armazenado em cache; <see langword="false" /> se o serviço de filtro deve consultar novamente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é chamado quando um usuário solicita um conjunto de atributos para um componente. Os atributos são adicionados ao dicionário com o atributo <xref:System.Attribute.TypeId%2A> como as chaves e o atributo real como o valor. Os implementadores deste serviço podem adicionar, remover ou alterar as entradas de atributo existentes no dicionário.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Retornar <see langword="false" /> somente quando necessário, pois repetida consultas para o serviço de filtro do descritor de tipo podem diminuir o desempenho.</para></block>
        <altmember cref="T:System.Attribute" />
        <altmember cref="P:System.Attribute.TypeId" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="FilterEvents">
      <MemberSignature Language="C#" Value="public bool FilterEvents (System.ComponentModel.IComponent component, System.Collections.IDictionary events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool FilterEvents(class System.ComponentModel.IComponent component, class System.Collections.IDictionary events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function FilterEvents (component As IComponent, events As IDictionary) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool FilterEvents(System::ComponentModel::IComponent ^ component, System::Collections::IDictionary ^ events);" />
      <MemberSignature Language="F#" Value="abstract member FilterEvents : System.ComponentModel.IComponent * System.Collections.IDictionary -&gt; bool" Usage="iTypeDescriptorFilterService.FilterEvents (component, events)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="events" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="component">O componente para o qual filtrar os eventos.</param>
        <param name="events">Um dicionário de eventos que pode ser modificado.</param>
        <summary>Filtra os eventos que um componente expõe por meio de um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
        <returns><see langword="true" /> se o conjunto de eventos filtrados deve ser armazenado em cache; <see langword="false" /> se o serviço de filtro deve consultar novamente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é chamado quando um usuário solicita um conjunto de eventos para um componente. Os eventos são adicionados ao dicionário com os nomes de evento como as chaves e correspondente <xref:System.ComponentModel.EventDescriptor> objetos como valores. Os implementadores deste serviço podem adicionar, remover ou alterar as entradas de evento no dicionário.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Retornar <see langword="false" /> somente quando necessário, pois repetida consultas para o serviço de filtro do descritor de tipo podem diminuir o desempenho.</para></block>
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="FilterProperties">
      <MemberSignature Language="C#" Value="public bool FilterProperties (System.ComponentModel.IComponent component, System.Collections.IDictionary properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool FilterProperties(class System.ComponentModel.IComponent component, class System.Collections.IDictionary properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function FilterProperties (component As IComponent, properties As IDictionary) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool FilterProperties(System::ComponentModel::IComponent ^ component, System::Collections::IDictionary ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member FilterProperties : System.ComponentModel.IComponent * System.Collections.IDictionary -&gt; bool" Usage="iTypeDescriptorFilterService.FilterProperties (component, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="component">O componente para o qual filtrar as propriedades.</param>
        <param name="properties">Um dicionário de propriedades que pode ser modificado.</param>
        <summary>Filtra as propriedades que um componente expõe por meio de um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
        <returns><see langword="true" /> se o conjunto de propriedades filtradas deve ser armazenado em cache; <see langword="false" /> se o serviço de filtro deve consultar novamente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é chamado quando um usuário solicita um conjunto de propriedades de um componente. As propriedades são adicionadas ao dicionário com os nomes de propriedade, como as chaves e correspondente <xref:System.ComponentModel.PropertyDescriptor> objetos como valores. Os implementadores deste serviço podem adicionar, remover ou alterar as entradas no dicionário de propriedade.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Retornar <see langword="false" /> somente quando necessário, pois repetida consultas para o serviço de filtro do descritor de tipo podem diminuir o desempenho.</para></block>
        <altmember cref="T:System.ComponentModel.PropertyDescriptor" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
  </Members>
</Type>