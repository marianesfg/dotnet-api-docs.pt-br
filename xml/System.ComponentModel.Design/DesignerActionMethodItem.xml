<Type Name="DesignerActionMethodItem" FullName="System.ComponentModel.Design.DesignerActionMethodItem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0dbaa814c17eea8ec8b787c34fcc27662054c159" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36707394" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DesignerActionMethodItem : System.ComponentModel.Design.DesignerActionItem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DesignerActionMethodItem extends System.ComponentModel.Design.DesignerActionItem" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.DesignerActionMethodItem" />
  <TypeSignature Language="VB.NET" Value="Public Class DesignerActionMethodItem&#xA;Inherits DesignerActionItem" />
  <TypeSignature Language="C++ CLI" Value="public ref class DesignerActionMethodItem : System::ComponentModel::Design::DesignerActionItem" />
  <TypeSignature Language="F#" Value="type DesignerActionMethodItem = class&#xA;    inherit DesignerActionItem" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Design.DesignerActionItem</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa um item do painel de marcações inteligentes que está associado a um método em uma classe derivada de <see cref="T:System.ComponentModel.Design.DesignerActionList" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.ComponentModel.Design.DesignerActionMethodItem> classe representa os itens individuais no painel de marcas inteligentes. Um item desse tipo é exibido como um elemento de interface do usuário ativo, como um hiperlink, que invoca um método fornecido pelo programador em uma classe derivada de <xref:System.ComponentModel.Design.DesignerActionList>. A associação entre o item e o método é mantida por meio do valor da <xref:System.ComponentModel.Design.DesignerActionMethodItem.MemberName%2A> propriedade. O método que invoca o item deve não aceita parâmetros nem retornar um valor.  
  
 Itens do painel individuais associados para formar um painel por uma chamada para o <xref:System.ComponentModel.Design.DesignerActionList.GetSortedActionItems%2A> método o <xref:System.ComponentModel.Design.DesignerActionList> classe.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como criar uma coleção de <xref:System.ComponentModel.Design.DesignerActionItem> objetos.  
  
 Para obter um exemplo completo de implementação de marcas inteligentes, consulte [como: Anexar marcas inteligentes para um componente de Windows Forms](http://msdn.microsoft.com/library/42cc4a0c-9ab3-47e1-93b8-03b6a6ccf233).  
  
 [!code-csharp[System.ComponentModel.Design.DesignerAction.AddSmartTagsToWFComponent#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.Design.DesignerAction.AddSmartTagsToWFComponent/CS/smarttags.cs#7)]
 [!code-vb[System.ComponentModel.Design.DesignerAction.AddSmartTagsToWFComponent#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.Design.DesignerAction.AddSmartTagsToWFComponent/VB/smarttags.vb#7)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.DesignerActionList" />
    <altmember cref="M:System.ComponentModel.Design.DesignerActionList.GetSortedActionItems" />
    <altmember cref="P:System.ComponentModel.Design.DesignerActionMethodItem.MemberName" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignerActionMethodItem (System.ComponentModel.Design.DesignerActionList actionList, string memberName, string displayName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.Design.DesignerActionList actionList, string memberName, string displayName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionMethodItem.#ctor(System.ComponentModel.Design.DesignerActionList,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (actionList As DesignerActionList, memberName As String, displayName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DesignerActionMethodItem(System::ComponentModel::Design::DesignerActionList ^ actionList, System::String ^ memberName, System::String ^ displayName);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.DesignerActionMethodItem : System.ComponentModel.Design.DesignerActionList * string * string -&gt; System.ComponentModel.Design.DesignerActionMethodItem" Usage="new System.ComponentModel.Design.DesignerActionMethodItem (actionList, memberName, displayName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="actionList" Type="System.ComponentModel.Design.DesignerActionList" />
        <Parameter Name="memberName" Type="System.String" />
        <Parameter Name="displayName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="actionList">O <see cref="T:System.ComponentModel.Design.DesignerActionList" /> que contém o método ao qual este item está associado.</param>
        <param name="memberName">O nome que diferencia maiúsculas e minúsculas do método na classe derivado de <see cref="T:System.ComponentModel.Design.DesignerActionList" /> a ser invocado por meio do item do painel.</param>
        <param name="displayName">O texto do painel para este item.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> com os nomes de exibição e de método especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.ComponentModel.Design.DesignerActionMethodItem.%23ctor%2A> construtor define o <xref:System.ComponentModel.Design.DesignerActionItem.Category%2A> e <xref:System.ComponentModel.Design.DesignerActionItem.Description%2A> propriedades para `null`e o <xref:System.ComponentModel.Design.DesignerActionMethodItem.IncludeAsDesignerVerb%2A> propriedade `false`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.Verbs" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionList" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignerActionMethodItem (System.ComponentModel.Design.DesignerActionList actionList, string memberName, string displayName, bool includeAsDesignerVerb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.Design.DesignerActionList actionList, string memberName, string displayName, bool includeAsDesignerVerb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionMethodItem.#ctor(System.ComponentModel.Design.DesignerActionList,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (actionList As DesignerActionList, memberName As String, displayName As String, includeAsDesignerVerb As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DesignerActionMethodItem(System::ComponentModel::Design::DesignerActionList ^ actionList, System::String ^ memberName, System::String ^ displayName, bool includeAsDesignerVerb);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.DesignerActionMethodItem : System.ComponentModel.Design.DesignerActionList * string * string * bool -&gt; System.ComponentModel.Design.DesignerActionMethodItem" Usage="new System.ComponentModel.Design.DesignerActionMethodItem (actionList, memberName, displayName, includeAsDesignerVerb)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="actionList" Type="System.ComponentModel.Design.DesignerActionList" />
        <Parameter Name="memberName" Type="System.String" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="includeAsDesignerVerb" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="actionList">O <see cref="T:System.ComponentModel.Design.DesignerActionList" /> que contém o método ao qual este item está associado.</param>
        <param name="memberName">O nome que diferencia maiúsculas e minúsculas do método na classe derivado de <see cref="T:System.ComponentModel.Design.DesignerActionList" /> a ser invocado por meio do item do painel.</param>
        <param name="displayName">O texto do painel para este item.</param>
        <param name="includeAsDesignerVerb">Um sinalizador que especifica se também devemos tratar o método associado como um verbo do designer.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> com os nomes de método e de exibição especificados e um sinalizador que indica se o item deve aparecer em outros contextos de interface do usuário.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o `includeAsDesignerVerb` parâmetro está definido como `true`, em seguida, esse item também é considerado um <xref:System.ComponentModel.Design.DesignerVerb>; portanto, ele será adicionado ao menu de atalho de tempo de design do componente. No Visual Studio, um comando também será adicionado para o **atributos** painel da janela Propriedades. Uma lista de verbos do designer pode ser acessada por meio do designer <xref:System.ComponentModel.Design.ComponentDesigner.Verbs%2A> propriedade da coleção.  
  
 O <xref:System.ComponentModel.Design.DesignerActionMethodItem.%23ctor%2A> construtor define o <xref:System.ComponentModel.Design.DesignerActionItem.Category%2A> e <xref:System.ComponentModel.Design.DesignerActionItem.Description%2A> propriedades `null`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.Verbs" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionList" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignerActionMethodItem (System.ComponentModel.Design.DesignerActionList actionList, string memberName, string displayName, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.Design.DesignerActionList actionList, string memberName, string displayName, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionMethodItem.#ctor(System.ComponentModel.Design.DesignerActionList,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (actionList As DesignerActionList, memberName As String, displayName As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DesignerActionMethodItem(System::ComponentModel::Design::DesignerActionList ^ actionList, System::String ^ memberName, System::String ^ displayName, System::String ^ category);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.DesignerActionMethodItem : System.ComponentModel.Design.DesignerActionList * string * string * string -&gt; System.ComponentModel.Design.DesignerActionMethodItem" Usage="new System.ComponentModel.Design.DesignerActionMethodItem (actionList, memberName, displayName, category)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="actionList" Type="System.ComponentModel.Design.DesignerActionList" />
        <Parameter Name="memberName" Type="System.String" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="actionList">O <see cref="T:System.ComponentModel.Design.DesignerActionList" /> que contém o método ao qual este item está associado.</param>
        <param name="memberName">O nome que diferencia maiúsculas e minúsculas do método na classe derivado de <see cref="T:System.ComponentModel.Design.DesignerActionList" /> a ser invocado por meio do item do painel.</param>
        <param name="displayName">O texto do painel para este item.</param>
        <param name="category">O <see cref="T:System.String" /> que diferencia maiúsculas e minúsculas usado para agrupar itens semelhantes no painel.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> com os nomes de exibição, de método e de categoria especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.ComponentModel.Design.DesignerActionMethodItem.%23ctor%2A> conjuntos de construtor o <xref:System.ComponentModel.Design.DesignerActionItem.Description%2A> propriedade `null` e o <xref:System.ComponentModel.Design.DesignerActionMethodItem.IncludeAsDesignerVerb%2A> propriedade `false`.  
  
 Para obter mais informações sobre como o `category` parâmetro é usado para agrupar itens em um painel, consulte o <xref:System.ComponentModel.Design.DesignerActionList.GetSortedActionItems%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.Verbs" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionList" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignerActionMethodItem (System.ComponentModel.Design.DesignerActionList actionList, string memberName, string displayName, string category, bool includeAsDesignerVerb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.Design.DesignerActionList actionList, string memberName, string displayName, string category, bool includeAsDesignerVerb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionMethodItem.#ctor(System.ComponentModel.Design.DesignerActionList,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (actionList As DesignerActionList, memberName As String, displayName As String, category As String, includeAsDesignerVerb As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DesignerActionMethodItem(System::ComponentModel::Design::DesignerActionList ^ actionList, System::String ^ memberName, System::String ^ displayName, System::String ^ category, bool includeAsDesignerVerb);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.DesignerActionMethodItem : System.ComponentModel.Design.DesignerActionList * string * string * string * bool -&gt; System.ComponentModel.Design.DesignerActionMethodItem" Usage="new System.ComponentModel.Design.DesignerActionMethodItem (actionList, memberName, displayName, category, includeAsDesignerVerb)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="actionList" Type="System.ComponentModel.Design.DesignerActionList" />
        <Parameter Name="memberName" Type="System.String" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="includeAsDesignerVerb" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="actionList">O <see cref="T:System.ComponentModel.Design.DesignerActionList" /> que contém o método ao qual este item está associado.</param>
        <param name="memberName">O nome que diferencia maiúsculas e minúsculas do método na classe derivado de <see cref="T:System.ComponentModel.Design.DesignerActionList" /> a ser invocado por meio do item do painel.</param>
        <param name="displayName">O texto do painel para este item.</param>
        <param name="category">O <see cref="T:System.String" /> que diferencia maiúsculas e minúsculas usado para agrupar itens semelhantes no painel.</param>
        <param name="includeAsDesignerVerb">Um sinalizador que especifica se também devemos tratar o método associado como um verbo do designer para o componente associado.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> com os nomes de exibição, de método e de categoria especificados e um sinalizador que indica se o item deve aparecer em outros contextos de interface do usuário.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o `includeAsDesignerVerb` parâmetro está definido como `true`, em seguida, o item também é considerado um <xref:System.ComponentModel.Design.DesignerVerb>; portanto, ele será adicionado ao menu de atalho de tempo de design do componente. Uma lista de verbos do designer pode ser acessada por meio do designer <xref:System.ComponentModel.Design.ComponentDesigner.Verbs%2A> propriedade da coleção.  
  
 O <xref:System.ComponentModel.Design.DesignerActionMethodItem.%23ctor%2A> construtor define o <xref:System.ComponentModel.Design.DesignerActionItem.Description%2A> propriedade `null`.  
  
 Para obter mais informações sobre como o `category` parâmetro é usado para agrupar itens em um painel, consulte o <xref:System.ComponentModel.Design.DesignerActionList.GetSortedActionItems%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.Verbs" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionList" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignerActionMethodItem (System.ComponentModel.Design.DesignerActionList actionList, string memberName, string displayName, string category, string description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.Design.DesignerActionList actionList, string memberName, string displayName, string category, string description) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionMethodItem.#ctor(System.ComponentModel.Design.DesignerActionList,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (actionList As DesignerActionList, memberName As String, displayName As String, category As String, description As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DesignerActionMethodItem(System::ComponentModel::Design::DesignerActionList ^ actionList, System::String ^ memberName, System::String ^ displayName, System::String ^ category, System::String ^ description);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.DesignerActionMethodItem : System.ComponentModel.Design.DesignerActionList * string * string * string * string -&gt; System.ComponentModel.Design.DesignerActionMethodItem" Usage="new System.ComponentModel.Design.DesignerActionMethodItem (actionList, memberName, displayName, category, description)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="actionList" Type="System.ComponentModel.Design.DesignerActionList" />
        <Parameter Name="memberName" Type="System.String" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="actionList">O <see cref="T:System.ComponentModel.Design.DesignerActionList" /> que contém o método ao qual este item está associado.</param>
        <param name="memberName">O nome que diferencia maiúsculas e minúsculas do método na classe derivado de <see cref="T:System.ComponentModel.Design.DesignerActionList" /> a ser invocado por meio do item do painel.</param>
        <param name="displayName">O texto do painel para este item.</param>
        <param name="category">O <see cref="T:System.String" /> que diferencia maiúsculas e minúsculas usado para agrupar itens semelhantes no painel.</param>
        <param name="description">Texto suplementar para este item, usado em dicas de ferramenta ou na barra de status.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> com o texto de exibição e de descrição e os nomes de categoria e de método especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.ComponentModel.Design.DesignerActionMethodItem.%23ctor%2A> construtor define o <xref:System.ComponentModel.Design.DesignerActionMethodItem.IncludeAsDesignerVerb%2A> propriedade `false`.  
  
 Para obter mais informações sobre como o `category` parâmetro é usado para agrupar itens em um painel, consulte o <xref:System.ComponentModel.Design.DesignerActionList.GetSortedActionItems%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.Verbs" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionList" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignerActionMethodItem (System.ComponentModel.Design.DesignerActionList actionList, string memberName, string displayName, string category, string description, bool includeAsDesignerVerb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.Design.DesignerActionList actionList, string memberName, string displayName, string category, string description, bool includeAsDesignerVerb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionMethodItem.#ctor(System.ComponentModel.Design.DesignerActionList,System.String,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (actionList As DesignerActionList, memberName As String, displayName As String, category As String, description As String, includeAsDesignerVerb As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DesignerActionMethodItem(System::ComponentModel::Design::DesignerActionList ^ actionList, System::String ^ memberName, System::String ^ displayName, System::String ^ category, System::String ^ description, bool includeAsDesignerVerb);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.DesignerActionMethodItem : System.ComponentModel.Design.DesignerActionList * string * string * string * string * bool -&gt; System.ComponentModel.Design.DesignerActionMethodItem" Usage="new System.ComponentModel.Design.DesignerActionMethodItem (actionList, memberName, displayName, category, description, includeAsDesignerVerb)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="actionList" Type="System.ComponentModel.Design.DesignerActionList" />
        <Parameter Name="memberName" Type="System.String" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="includeAsDesignerVerb" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="actionList">O <see cref="T:System.ComponentModel.Design.DesignerActionList" /> que contém o método ao qual este item está associado.</param>
        <param name="memberName">O nome que diferencia maiúsculas e minúsculas do método na classe derivado de <see cref="T:System.ComponentModel.Design.DesignerActionList" /> a ser invocado por meio do item do painel.</param>
        <param name="displayName">O texto do painel para este item.</param>
        <param name="category">O <see cref="T:System.String" /> que diferencia maiúsculas e minúsculas usado para agrupar itens semelhantes no painel.</param>
        <param name="description">Texto suplementar para este item, usado em dicas de ferramenta ou na barra de status.</param>
        <param name="includeAsDesignerVerb">Um sinalizador que especifica se também devemos tratar o método associado como um verbo do designer para o componente associado.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> com o texto de exibição e de descrição e os nomes de método e de categoria especificados, bem como um sinalizador que indica se o item deve aparecer em outros contextos de interface do usuário.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o `includeAsDesignerVerb` parâmetro está definido como `true`, em seguida, esse item também é considerado um <xref:System.ComponentModel.Design.DesignerVerb>; portanto, ele será adicionado ao menu de atalho de tempo de design do componente. Uma lista de verbos do designer pode ser acessada por meio do designer <xref:System.ComponentModel.Design.ComponentDesigner.Verbs%2A> propriedade da coleção.  
  
 Para obter mais informações sobre como o `category` parâmetro é usado para agrupar itens em um painel, consulte o <xref:System.ComponentModel.Design.DesignerActionList.GetSortedActionItems%2A> método.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como criar uma coleção de <xref:System.ComponentModel.Design.DesignerActionItem> objetos.  
  
 Para obter um exemplo completo de implementação de marcas inteligentes, consulte [como: Anexar marcas inteligentes para um componente de Windows Forms](http://msdn.microsoft.com/library/42cc4a0c-9ab3-47e1-93b8-03b6a6ccf233).  
  
 [!code-csharp[System.ComponentModel.Design.DesignerAction.AddSmartTagsToWFComponent#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.Design.DesignerAction.AddSmartTagsToWFComponent/CS/smarttags.cs#7)]
 [!code-vb[System.ComponentModel.Design.DesignerAction.AddSmartTagsToWFComponent#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.Design.DesignerAction.AddSmartTagsToWFComponent/VB/smarttags.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.Verbs" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionList" />
      </Docs>
    </Member>
    <Member MemberName="IncludeAsDesignerVerb">
      <MemberSignature Language="C#" Value="public virtual bool IncludeAsDesignerVerb { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeAsDesignerVerb" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.DesignerActionMethodItem.IncludeAsDesignerVerb" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IncludeAsDesignerVerb As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IncludeAsDesignerVerb { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IncludeAsDesignerVerb : bool" Usage="System.ComponentModel.Design.DesignerActionMethodItem.IncludeAsDesignerVerb" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica que o <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> deve aparecer em outros contextos de interface do usuário.</summary>
        <value>
          <see langword="true" /> Se o item a ser usada nos menus de atalho; Caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o <xref:System.ComponentModel.Design.DesignerActionMethodItem.IncludeAsDesignerVerb%2A> está definida como `true`, em seguida, o item também é considerado um <xref:System.ComponentModel.Design.DesignerVerb>; portanto, ele será adicionado ao menu de atalho de tempo de design do componente. Uma lista de verbos do designer pode ser acessada por meio do designer <xref:System.ComponentModel.Design.ComponentDesigner.Verbs%2A> propriedade da coleção.  
  
 O valor de <xref:System.ComponentModel.Design.DesignerActionMethodItem.IncludeAsDesignerVerb%2A> propriedade é definida no construtor para essa classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.Design.DesignerActionListCollection.#ctor(System.ComponentModel.Design.DesignerActionList[])" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.Verbs" />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public virtual void Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionMethodItem.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Invoke ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Invoke();" />
      <MemberSignature Language="F#" Value="abstract member Invoke : unit -&gt; unit&#xA;override this.Invoke : unit -&gt; unit" Usage="designerActionMethodItem.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>O método associado ao <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> é executado programaticamente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o <xref:System.ComponentModel.Design.DesignerActionMethodItem.IncludeAsDesignerVerb%2A> propriedade é inicializada para `true`, o método associado também pode ser invocado por meio do evento correspondente do verbo do designer.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">O método nomeado em <see cref="P:System.ComponentModel.Design.DesignerActionMethodItem.MemberName" /> não pode ser localizado.</exception>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
      </Docs>
    </Member>
    <Member MemberName="MemberName">
      <MemberSignature Language="C#" Value="public virtual string MemberName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MemberName" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.DesignerActionMethodItem.MemberName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property MemberName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ MemberName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberName : string" Usage="System.ComponentModel.Design.DesignerActionMethodItem.MemberName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o nome do método com o qual este <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> está associado.</summary>
        <value>Um <see cref="T:System.String" /> que contém o nome do método associado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.ComponentModel.Design.DesignerActionMethodItem.MemberName%2A> propriedade especifica qual propriedade na classe derivada do <xref:System.ComponentModel.Design.DesignerActionList> classe, que o item deve ser vinculado. Quando o programador interage com o item do painel por meio da interface do usuário (IU), essa propriedade associada será definida.  
  
 O método associado deve não aceita parâmetros nem retornar um valor.  
  
 Essa propriedade é definida no construtor. Ele diferencia maiusculas de minúsculas.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.Design.DesignerActionMethodItem.#ctor(System.ComponentModel.Design.DesignerActionList,System.String,System.String)" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionList" />
      </Docs>
    </Member>
    <Member MemberName="RelatedComponent">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IComponent RelatedComponent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.IComponent RelatedComponent" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.DesignerActionMethodItem.RelatedComponent" />
      <MemberSignature Language="VB.NET" Value="Public Property RelatedComponent As IComponent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::IComponent ^ RelatedComponent { System::ComponentModel::IComponent ^ get(); void set(System::ComponentModel::IComponent ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RelatedComponent : System.ComponentModel.IComponent with get, set" Usage="System.ComponentModel.Design.DesignerActionMethodItem.RelatedComponent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IComponent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um componente que contribui com os respectivos objetos <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> para o painel atual.</summary>
        <value>O componente de contribuição, que deve ter um designer associado que fornece os itens.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.ComponentModel.Design.DesignerActionPropertyItem.RelatedComponent%2A> propriedade permite que outro componente dar à lista atual de itens do painel de marca inteligente. Por exemplo, um controle de usuário pode agregar os itens de um de seus controles constituintes de padrão.  
  
 Esta propriedade funciona em conjunto com o <xref:System.ComponentModel.Design.DesignerActionItem.AllowAssociate%2A?displayProperty=nameWithType> propriedade.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerActionList" />
        <altmember cref="P:System.ComponentModel.Design.DesignerActionItem.AllowAssociate" />
      </Docs>
    </Member>
  </Members>
</Type>