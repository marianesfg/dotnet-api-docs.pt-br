<Type Name="EventBindingService" FullName="System.ComponentModel.Design.EventBindingService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7e0ae5ca9e4f75f4adcd4875fc5dc0c640eed8fe" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30369690" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class EventBindingService : System.ComponentModel.Design.IEventBindingService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EventBindingService extends System.Object implements class System.ComponentModel.Design.IEventBindingService" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.EventBindingService" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EventBindingService&#xA;Implements IEventBindingService" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventBindingService abstract : System::ComponentModel::Design::IEventBindingService" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.Design.IEventBindingService</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="1c0d9-101">Uma implementação padrão da interface <see cref="T:System.ComponentModel.Design.IEventBindingService" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1c0d9-101">A default implementation of the <see cref="T:System.ComponentModel.Design.IEventBindingService" /> interface.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c0d9-102">Fornecendo um serviço para o registro de manipuladores de eventos para eventos do componente, <xref:System.ComponentModel.Design.EventBindingService> fornece uma maneira de vincular um manipulador de eventos com um evento de componente de código de designer.</span><span class="sxs-lookup"><span data-stu-id="1c0d9-102">By providing a service for registering event handlers for component events, <xref:System.ComponentModel.Design.EventBindingService> provides a way to link an event handler with a component event from designer code.</span></span>  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.NamedPermissionSet">
      <span data-ttu-id="1c0d9-103">Para obter acesso completo aos recursos do sistema.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1c0d9-103">for full access to system resources.</span>
      </span>
      <span data-ttu-id="1c0d9-104">Exigem valores: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />, <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1c0d9-104">Demand values: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />, <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />.</span>
      </span>
      <span data-ttu-id="1c0d9-105">Estados associados:</span>
      <span class="sxs-lookup">
        <span data-stu-id="1c0d9-105">Associated state:</span>
      </span>
    </permission>
    <altmember cref="T:System.IServiceProvider" />
    <altmember cref="T:System.ComponentModel.EventDescriptor" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EventBindingService (IServiceProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (provider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; EventBindingService(IServiceProvider ^ provider);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="provider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="1c0d9-106">O provedor de serviço do qual <see cref="T:System.ComponentModel.Design.EventBindingService" /> consultará os serviços.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-106">The service provider from which <see cref="T:System.ComponentModel.Design.EventBindingService" /> will query for services.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c0d9-107">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.EventBindingService" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-107">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.EventBindingService" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c0d9-108">
            <paramref name="provider" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-108">
              <paramref name="provider" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="CreateUniqueMethodName">
      <MemberSignature Language="C#" Value="protected abstract string CreateUniqueMethodName (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string CreateUniqueMethodName(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateUniqueMethodName (component As IComponent, e As EventDescriptor) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::String ^ CreateUniqueMethodName(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="component">
          <span data-ttu-id="1c0d9-109">O componente para o qual o nome do método será criado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-109">The component for which the method name will be created.</span>
          </span>
        </param>
        <param name="e">
          <span data-ttu-id="1c0d9-110">O evento para o qual um nome será criado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-110">The event to create a name for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c0d9-111">Cria um nome de método exclusivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-111">Creates a unique method name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c0d9-112">O nome de método exclusivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-112">The unique method name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c0d9-113">O nome retornado pelo <xref:System.ComponentModel.Design.EventBindingService.CreateUniqueMethodName%2A> método deve ser compatível com a linguagem de script que está sendo usada e ele não deve entrar em conflito com qualquer outro nome de seu código.</span><span class="sxs-lookup"><span data-stu-id="1c0d9-113">The name returned by the <xref:System.ComponentModel.Design.EventBindingService.CreateUniqueMethodName%2A> method must be compatible with the script language being used and it must not conflict with any other name in your code.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c0d9-114">
            <paramref name="component" /> ou <paramref name="e" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-114">
              <paramref name="component" /> or <paramref name="e" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
        <altmember cref="T:System.ComponentModel.IComponent" />
      </Docs>
    </Member>
    <Member MemberName="FreeMethod">
      <MemberSignature Language="C#" Value="protected virtual void FreeMethod (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e, string methodName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FreeMethod(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e, string methodName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.FreeMethod(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub FreeMethod (component As IComponent, e As EventDescriptor, methodName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void FreeMethod(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e, System::String ^ methodName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
        <Parameter Name="methodName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="component">
          <span data-ttu-id="1c0d9-115">O componente ao qual o método é associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-115">The component to which the method is bound.</span>
          </span>
        </param>
        <param name="e">
          <span data-ttu-id="1c0d9-116">O <see cref="T:System.ComponentModel.EventDescriptor" /> para o manipulador de eventos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-116">The <see cref="T:System.ComponentModel.EventDescriptor" /> for the event handler.</span>
          </span>
        </param>
        <param name="methodName">
          <span data-ttu-id="1c0d9-117">O nome do método a ser liberado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-117">The name of the method to be freed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c0d9-118">Fornece uma notificação de que um método específico não está mais sendo usado por um manipulador de eventos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-118">Provides a notification that a particular method is no longer being used by an event handler.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c0d9-119">Algumas implementações podem pretende remover o manipulador de eventos quando não há eventos são usá-lo.</span><span class="sxs-lookup"><span data-stu-id="1c0d9-119">Some implementations may intend to remove the event hander when no events are using it.</span></span> <span data-ttu-id="1c0d9-120">Substituindo <xref:System.ComponentModel.Design.EventBindingService.UseMethod%2A> e <xref:System.ComponentModel.Design.EventBindingService.FreeMethod%2A>, uma implementação pode inferir quando um método não é mais necessário.</span><span class="sxs-lookup"><span data-stu-id="1c0d9-120">By overriding <xref:System.ComponentModel.Design.EventBindingService.UseMethod%2A> and <xref:System.ComponentModel.Design.EventBindingService.FreeMethod%2A>, an implementation can infer when a method is no longer needed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
        <altmember cref="T:System.ComponentModel.IComponent" />
      </Docs>
    </Member>
    <Member MemberName="GetCompatibleMethods">
      <MemberSignature Language="C#" Value="protected abstract System.Collections.ICollection GetCompatibleMethods (System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.ICollection GetCompatibleMethods(class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetCompatibleMethods (e As EventDescriptor) As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Collections::ICollection ^ GetCompatibleMethods(System::ComponentModel::EventDescriptor ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="1c0d9-121">O <see cref="T:System.ComponentModel.EventDescriptor" /> que contém o delegado compatível.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-121">The <see cref="T:System.ComponentModel.EventDescriptor" /> containing the compatible delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c0d9-122">Retorna uma coleção de nomes de métodos compatíveis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-122">Returns a collection of names of compatible methods.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c0d9-123">Uma coleção de cadeias de caracteres que são nomes de métodos compatíveis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-123">A collection of strings that are names of compatible methods.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c0d9-124">Cada cadeia de caracteres retornada na coleção é o nome do método de um método cuja assinatura é compatível com o delegado contido em `e`.</span><span class="sxs-lookup"><span data-stu-id="1c0d9-124">Each string returned in the collection is the method name of a method whose signature is compatible with the delegate contained in `e`.</span></span> <span data-ttu-id="1c0d9-125"><xref:System.ComponentModel.Design.EventBindingService.GetCompatibleMethods%2A> deve retornar uma coleção vazia se nenhum nome é compatível.</span><span class="sxs-lookup"><span data-stu-id="1c0d9-125"><xref:System.ComponentModel.Design.EventBindingService.GetCompatibleMethods%2A> should return an empty collection if no names are compatible.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c0d9-126">
            <paramref name="e" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-126">
              <paramref name="e" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="protected object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Object ^ GetService(Type ^ serviceType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">
          <span data-ttu-id="1c0d9-127">O tipo de serviço a ser recuperado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-127">The type of service to retrieve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c0d9-128">Obtém o serviço solicitado do provedor de serviço.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-128">Gets the requested service from the service provider.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c0d9-129">Uma referência ao serviço especificado por <paramref name="serviceType" /> ou <see langword="null" /> se o serviço solicitado não está disponível.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-129">A reference to the service specified by <paramref name="serviceType" />, or <see langword="null" /> if the requested service is not available.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ShowCode">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1c0d9-130">Exibe o código do usuário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-130">Displays user code.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ShowCode">
      <MemberSignature Language="C#" Value="protected abstract bool ShowCode ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShowCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.ShowCode" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ShowCode () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool ShowCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1c0d9-131">Exibe o código do usuário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-131">Displays user code.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c0d9-132">
            <see langword="true" /> se for possível exibir o código; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-132">
              <see langword="true" /> if it is possible to display the code; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c0d9-133">O <xref:System.ComponentModel.Design.EventBindingService.ShowCode%2A> método não exibirá nenhum código específico; geralmente exibe o último código de usuário digitado.</span><span class="sxs-lookup"><span data-stu-id="1c0d9-133">The <xref:System.ComponentModel.Design.EventBindingService.ShowCode%2A> method does not display any particular code; generally it displays the last code the user typed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowCode">
      <MemberSignature Language="C#" Value="protected abstract bool ShowCode (int lineNumber);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShowCode(int32 lineNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.ShowCode(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ShowCode (lineNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool ShowCode(int lineNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="lineNumber">
          <span data-ttu-id="1c0d9-134">O número de linha a ser mostrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-134">The line number to show.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c0d9-135">Exibe o código do usuário no número de linha especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-135">Displays the user code at the given line number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c0d9-136">
            <see langword="true" /> se for possível exibir o código; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-136">
              <see langword="true" /> if it is possible to display the code; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c0d9-137">Números de linha são baseados em um.</span><span class="sxs-lookup"><span data-stu-id="1c0d9-137">Line numbers are one-based.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowCode">
      <MemberSignature Language="C#" Value="protected abstract bool ShowCode (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e, string methodName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShowCode(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e, string methodName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ShowCode (component As IComponent, e As EventDescriptor, methodName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool ShowCode(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e, System::String ^ methodName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
        <Parameter Name="methodName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="component">
          <span data-ttu-id="1c0d9-138">O componente ao qual o método é associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-138">The component to which the method is bound.</span>
          </span>
        </param>
        <param name="e">
          <span data-ttu-id="1c0d9-139">O <see cref="T:System.ComponentModel.EventDescriptor" /> para o manipulador de eventos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-139">The <see cref="T:System.ComponentModel.EventDescriptor" /> for the event handler.</span>
          </span>
        </param>
        <param name="methodName">
          <span data-ttu-id="1c0d9-140">O nome do método para o qual exibir código.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-140">The name of the method for which to display code.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c0d9-141">Exibe o código do usuário para o método especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-141">Displays the user code for the specified method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c0d9-142">
            <see langword="true" /> se for possível exibir o código; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-142">
              <see langword="true" /> if it is possible to display the code; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c0d9-143">O <xref:System.ComponentModel.Design.EventBindingService.ShowCode%2A> método exibe o corpo do código de usuário com o nome do método especificado.</span><span class="sxs-lookup"><span data-stu-id="1c0d9-143">The <xref:System.ComponentModel.Design.EventBindingService.ShowCode%2A> method displays the body of the user code with the given method name.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
        <altmember cref="T:System.ComponentModel.IComponent" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName">
      <MemberSignature Language="C#" Value="string IEventBindingService.CreateUniqueMethodName (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Function CreateUniqueMethodName (component As IComponent, e As EventDescriptor) As String Implements IEventBindingService.CreateUniqueMethodName" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e) = System::ComponentModel::Design::IEventBindingService::CreateUniqueMethodName;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="component">
          <span data-ttu-id="1c0d9-144">A instância do componente à qual o evento está conectado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-144">The component instance the event is connected to.</span>
          </span>
        </param>
        <param name="e">
          <span data-ttu-id="1c0d9-145">O evento para o qual um nome será criado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-145">The event to create a name for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c0d9-146">Cria um nome exclusivo para um método do manipulador de eventos para o componente e o evento especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-146">Creates a unique name for an event-handler method for the specified component and event.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c0d9-147">O nome recomendado para o método de manipulador de eventos para esse evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-147">The recommended name for the event-handler method for this event.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c0d9-148">
            <paramref name="component" /> ou <paramref name="e" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-148">
              <paramref name="component" /> or <paramref name="e" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods">
      <MemberSignature Language="C#" Value="System.Collections.ICollection IEventBindingService.GetCompatibleMethods (System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.ICollection System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#GetCompatibleMethods(System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Function GetCompatibleMethods (e As EventDescriptor) As ICollection Implements IEventBindingService.GetCompatibleMethods" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::ICollection ^ System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System::ComponentModel::EventDescriptor ^ e) = System::ComponentModel::Design::IEventBindingService::GetCompatibleMethods;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="1c0d9-149">O evento para o qual obter os métodos do manipulador de eventos compatível.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-149">The event to get the compatible event-handler methods for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c0d9-150">Obtém uma coleção de métodos de manipulador de eventos que têm uma assinatura de método compatível com o evento especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-150">Gets a collection of event-handler methods that have a method signature compatible with the specified event.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c0d9-151">Uma coleção de cadeias de caracteres que são nomes de métodos compatíveis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-151">A collection of strings that are names of compatible methods.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c0d9-152">Cada cadeia de caracteres retornada na coleção é o nome do método de um método cuja assinatura é compatível com o delegado contido em `e`.</span><span class="sxs-lookup"><span data-stu-id="1c0d9-152">Each string returned in the collection is the method name of a method whose signature is compatible with the delegate contained in `e`.</span></span> <span data-ttu-id="1c0d9-153"><xref:System.ComponentModel.Design.EventBindingService.GetCompatibleMethods%2A> deve retornar uma coleção vazia se nenhum nome é compatível.</span><span class="sxs-lookup"><span data-stu-id="1c0d9-153"><xref:System.ComponentModel.Design.EventBindingService.GetCompatibleMethods%2A> should return an empty collection if no names are compatible.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c0d9-154">
            <paramref name="e" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-154">
              <paramref name="e" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.GetEvent">
      <MemberSignature Language="C#" Value="System.ComponentModel.EventDescriptor IEventBindingService.GetEvent (System.ComponentModel.PropertyDescriptor property);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.ComponentModel.EventDescriptor System.ComponentModel.Design.IEventBindingService.GetEvent(class System.ComponentModel.PropertyDescriptor property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#GetEvent(System.ComponentModel.PropertyDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Function GetEvent (property As PropertyDescriptor) As EventDescriptor Implements IEventBindingService.GetEvent" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::ComponentModel::EventDescriptor ^ System.ComponentModel.Design.IEventBindingService.GetEvent(System::ComponentModel::PropertyDescriptor ^ property) = System::ComponentModel::Design::IEventBindingService::GetEvent;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.EventDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.ComponentModel.PropertyDescriptor" />
      </Parameters>
      <Docs>
        <param name="property">
          <span data-ttu-id="1c0d9-155">A propriedade que representa um evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-155">The property that represents an event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c0d9-156">Obtém um <see cref="T:System.ComponentModel.EventDescriptor" /> para o evento que o descritor de propriedade especificado representa, se ele representar um evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-156">Gets an <see cref="T:System.ComponentModel.EventDescriptor" /> for the event that the specified property descriptor represents, if it represents an event.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c0d9-157">Um <see cref="T:System.ComponentModel.EventDescriptor" /> para o evento que a propriedade representa ou <see langword="null" /> se a propriedade não representa um evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-157">An <see cref="T:System.ComponentModel.EventDescriptor" /> for the event that the property represents, or <see langword="null" /> if the property does not represent an event.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.GetEventProperties">
      <MemberSignature Language="C#" Value="System.ComponentModel.PropertyDescriptorCollection IEventBindingService.GetEventProperties (System.ComponentModel.EventDescriptorCollection events);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.ComponentModel.PropertyDescriptorCollection System.ComponentModel.Design.IEventBindingService.GetEventProperties(class System.ComponentModel.EventDescriptorCollection events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#GetEventProperties(System.ComponentModel.EventDescriptorCollection)" />
      <MemberSignature Language="VB.NET" Value="Function GetEventProperties (events As EventDescriptorCollection) As PropertyDescriptorCollection Implements IEventBindingService.GetEventProperties" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::ComponentModel::PropertyDescriptorCollection ^ System.ComponentModel.Design.IEventBindingService.GetEventProperties(System::ComponentModel::EventDescriptorCollection ^ events) = System::ComponentModel::Design::IEventBindingService::GetEventProperties;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="System.ComponentModel.EventDescriptorCollection" />
      </Parameters>
      <Docs>
        <param name="events">
          <span data-ttu-id="1c0d9-158">Os eventos a serem convertidos em propriedades.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-158">The events to convert to properties.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c0d9-159">Converte um conjunto de descritores de eventos em um conjunto de descritores de propriedades.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-159">Converts a set of event descriptors to a set of property descriptors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c0d9-160">Uma matriz de objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> que descreve o conjunto de eventos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-160">An array of <see cref="T:System.ComponentModel.PropertyDescriptor" /> objects that describe the event set.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c0d9-161">
            <paramref name="events" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-161">
              <paramref name="events" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.GetEventProperty">
      <MemberSignature Language="C#" Value="System.ComponentModel.PropertyDescriptor IEventBindingService.GetEventProperty (System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.ComponentModel.PropertyDescriptor System.ComponentModel.Design.IEventBindingService.GetEventProperty(class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#GetEventProperty(System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Function GetEventProperty (e As EventDescriptor) As PropertyDescriptor Implements IEventBindingService.GetEventProperty" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::ComponentModel::PropertyDescriptor ^ System.ComponentModel.Design.IEventBindingService.GetEventProperty(System::ComponentModel::EventDescriptor ^ e) = System::ComponentModel::Design::IEventBindingService::GetEventProperty;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="1c0d9-162">O evento a ser convertido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-162">The event to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c0d9-163">Converte um único descritor de eventos em um descritor de propriedades.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-163">Converts a single event descriptor to a property descriptor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c0d9-164">Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> que descreve o evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-164">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> that describes the event.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c0d9-165">
            <paramref name="e" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-165">
              <paramref name="e" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.ComponentModel.Design.IEventBindingService.ShowCode">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1c0d9-166">Exibe o código do usuário para o designer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-166">Displays the user code for the designer.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.ShowCode">
      <MemberSignature Language="C#" Value="bool IEventBindingService.ShowCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.ComponentModel.Design.IEventBindingService.ShowCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#ShowCode" />
      <MemberSignature Language="VB.NET" Value="Function ShowCode () As Boolean Implements IEventBindingService.ShowCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.ComponentModel.Design.IEventBindingService.ShowCode() = System::ComponentModel::Design::IEventBindingService::ShowCode;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1c0d9-167">Exibe o código do usuário para o designer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-167">Displays the user code for the designer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c0d9-168">
            <see langword="true" /> se o código for exibido; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-168">
              <see langword="true" /> if the code is displayed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.ShowCode">
      <MemberSignature Language="C#" Value="bool IEventBindingService.ShowCode (int lineNumber);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.ComponentModel.Design.IEventBindingService.ShowCode(int32 lineNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#ShowCode(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Function ShowCode (lineNumber As Integer) As Boolean Implements IEventBindingService.ShowCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.ComponentModel.Design.IEventBindingService.ShowCode(int lineNumber) = System::ComponentModel::Design::IEventBindingService::ShowCode;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="lineNumber">
          <span data-ttu-id="1c0d9-169">O número de linha na qual colocar o cursor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-169">The line number to place the caret on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c0d9-170">Exibe o código do usuário para o designer na linha especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-170">Displays the user code for the designer at the specified line.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c0d9-171">
            <see langword="true" /> se o código for exibido; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-171">
              <see langword="true" /> if the code is displayed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.ShowCode">
      <MemberSignature Language="C#" Value="bool IEventBindingService.ShowCode (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.ComponentModel.Design.IEventBindingService.ShowCode(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Function ShowCode (component As IComponent, e As EventDescriptor) As Boolean Implements IEventBindingService.ShowCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.ComponentModel.Design.IEventBindingService.ShowCode(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e) = System::ComponentModel::Design::IEventBindingService::ShowCode;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="component">
          <span data-ttu-id="1c0d9-172">O componente ao qual o evento está conectado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-172">The component that the event is connected to.</span>
          </span>
        </param>
        <param name="e">
          <span data-ttu-id="1c0d9-173">O evento a ser exibido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-173">The event to display.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c0d9-174">Exibe o código do usuário para o evento especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-174">Displays the user code for the specified event.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c0d9-175">
            <see langword="true" /> se o código for exibido; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-175">
              <see langword="true" /> if the code is displayed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c0d9-176">
            <paramref name="events" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-176">
              <paramref name="events" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UseMethod">
      <MemberSignature Language="C#" Value="protected virtual void UseMethod (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e, string methodName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void UseMethod(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e, string methodName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.UseMethod(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub UseMethod (component As IComponent, e As EventDescriptor, methodName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void UseMethod(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e, System::String ^ methodName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
        <Parameter Name="methodName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="component">
          <span data-ttu-id="1c0d9-177">O componente ao qual o método é associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-177">The component to which the method is bound.</span>
          </span>
        </param>
        <param name="e">
          <span data-ttu-id="1c0d9-178">O <see cref="T:System.ComponentModel.EventDescriptor" /> para o manipulador de eventos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-178">The <see cref="T:System.ComponentModel.EventDescriptor" /> for the event handler.</span>
          </span>
        </param>
        <param name="methodName">
          <span data-ttu-id="1c0d9-179">O nome do método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-179">The name of the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c0d9-180">Fornece uma notificação de que um método específico está sendo usado por um manipulador de eventos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-180">Provides a notification that a particular method is being used by an event handler.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c0d9-181">Algumas implementações podem pretende remover o manipulador de eventos quando não há eventos são usá-lo.</span><span class="sxs-lookup"><span data-stu-id="1c0d9-181">Some implementations may intend to remove the event hander when no events are using it.</span></span> <span data-ttu-id="1c0d9-182">Substituindo <xref:System.ComponentModel.Design.EventBindingService.UseMethod%2A> e <xref:System.ComponentModel.Design.EventBindingService.FreeMethod%2A>, uma implementação pode inferir quando um método não é mais necessário.</span><span class="sxs-lookup"><span data-stu-id="1c0d9-182">By overriding <xref:System.ComponentModel.Design.EventBindingService.UseMethod%2A> and <xref:System.ComponentModel.Design.EventBindingService.FreeMethod%2A>, an implementation can infer when a method is no longer needed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
        <altmember cref="T:System.ComponentModel.IComponent" />
      </Docs>
    </Member>
    <Member MemberName="ValidateMethodName">
      <MemberSignature Language="C#" Value="protected virtual void ValidateMethodName (string methodName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ValidateMethodName(string methodName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.ValidateMethodName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ValidateMethodName (methodName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ValidateMethodName(System::String ^ methodName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="methodName">
          <span data-ttu-id="1c0d9-183">O nome do método a ser validado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-183">The method name to validate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c0d9-184">Valida se o nome de método fornecido é válido para a linguagem ou o script que está sendo usado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c0d9-184">Validates that the provided method name is valid for the language or script being used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c0d9-185">A implementação padrão não fará nada.</span><span class="sxs-lookup"><span data-stu-id="1c0d9-185">The default implementation does nothing.</span></span> <span data-ttu-id="1c0d9-186">Você pode substituir isso e lançar uma exceção se o nome é inválido para seu uso.</span><span class="sxs-lookup"><span data-stu-id="1c0d9-186">You may override this and throw an exception if the name is invalid for your use.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>