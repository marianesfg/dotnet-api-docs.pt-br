<Type Name="PingReply" FullName="System.Net.NetworkInformation.PingReply">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="02658955cbcea15b85a8fddda92f34a0084c05ea" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39987614" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PingReply" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PingReply extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.PingReply" />
  <TypeSignature Language="VB.NET" Value="Public Class PingReply" />
  <TypeSignature Language="C++ CLI" Value="public ref class PingReply" />
  <TypeSignature Language="F#" Value="type PingReply = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Ping</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece informações sobre o status e os dados resultantes de uma operação <see cref="Overload:System.Net.NetworkInformation.Ping.Send" /> ou <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Net.NetworkInformation.Ping> classe tenta enviar uma solicitação de eco do ICMP Internet Control Message Protocol () para um computador remoto e receber informações do computador por meio de uma mensagem de resposta de eco do ICMP. O <xref:System.Net.NetworkInformation.Ping> classe usa instâncias da <xref:System.Net.NetworkInformation.PingReply> classe para retornar informações sobre a operação, como seu status e o tempo necessário para enviar a solicitação e receber a resposta.  
  
 O <xref:System.Net.NetworkInformation.Ping.Send%2A> métodos retornam instâncias da <xref:System.Net.NetworkInformation.PingReply> classe diretamente. O <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> métodos retornam uma <xref:System.Net.NetworkInformation.PingReply> na <xref:System.Net.NetworkInformation.PingCompletedEventHandler> do método <xref:System.Net.NetworkInformation.PingCompletedEventArgs> parâmetro. O <xref:System.Net.NetworkInformation.PingReply> é acessado por meio de <xref:System.Net.NetworkInformation.PingCompletedEventArgs.Reply%2A> propriedade.  
  
 Se o valor de <xref:System.Net.NetworkInformation.PingReply.Status%2A> não é <xref:System.Net.NetworkInformation.IPStatus.Success>, você não deve usar os valores retornados pelo <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>, <xref:System.Net.NetworkInformation.PingReply.Options%2A> ou <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> propriedades. O <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A> propriedade retornará zero, o <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> propriedade retornará uma matriz vazia e o <xref:System.Net.NetworkInformation.PingReply.Options%2A> propriedade retornará `null`.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar <xref:System.Net.NetworkInformation.Ping> classe para enviar uma solicitação de eco do ICMP de forma síncrona e exibir a resposta.  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public System.Net.IPAddress Address { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IPAddress Address" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Address" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Address As IPAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::IPAddress ^ Address { System::Net::IPAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Address : System.Net.IPAddress" Usage="System.Net.NetworkInformation.PingReply.Address" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o endereço do host que envia a resposta de eco do protocolo ICMP.</summary>
        <value>Um <see cref="T:System.Net.IPAddress" /> que contém o destino da mensagem de eco do protocolo ICMP.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Net.NetworkInformation.PingReply.Address%2A> retornados por qualquer uma da <xref:System.Net.NetworkInformation.Ping.Send%2A> sobrecargas podem se originar de um computador remoto mal-intencionado. Não se conecte ao computador remoto usando esse endereço. Use o DNS para determinar o endereço IP da máquina para o qual você deseja se conectar.  
  
   
  
## Examples  
 O exemplo de código a seguir envia uma solicitação de eco do ICMP de forma síncrona e exibe o valor dessa propriedade.  
  
 [!code-cpp[NclPingSampler#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#2)]
 [!code-csharp[NclPingSampler#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Buffer">
      <MemberSignature Language="C#" Value="public byte[] Buffer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Buffer" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Buffer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Buffer As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Buffer { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Buffer : byte[]" Usage="System.Net.NetworkInformation.PingReply.Buffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o buffer de dados recebidos em uma mensagem de resposta de eco do protocolo ICMP.</summary>
        <value>Uma matriz <see cref="T:System.Byte" /> que contém os dados recebidos em uma mensagem de resposta de eco ICMP ou uma matriz vazia se nenhuma resposta foi recebida.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O buffer de dados enviado com a solicitação de eco do ICMP é retornado ao remetente na resposta de eco para que o tempo de viagem de ida e volta para um pacote de um tamanho conhecido pode ser computado. O buffer de dados, combinados com o <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> opção, pode ser usado para descobrir a unidade de transmissão máxima para o caminho de rede entre os computadores de origem e de destino. Para obter mais informações, consulte "Traceroute" no RFC 1574, seção 3.2, disponível em [ https://www.ietf.org ](https://www.ietf.org).  
  
 O buffer de padrão usado com <xref:System.Net.NetworkInformation.Ping.Send%2A> e <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> contém 32 bytes de dados.  
  
   
  
## Examples  
 O exemplo de código a seguir envia uma solicitação de eco do ICMP de forma síncrona e exibe o tamanho do buffer retornado por essa propriedade.  
  
 [!code-cpp[NclPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NclPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.NetworkInformation.PingOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As PingOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::NetworkInformation::PingOptions ^ Options { System::Net::NetworkInformation::PingOptions ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Net.NetworkInformation.PingOptions" Usage="System.Net.NetworkInformation.PingReply.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém as opções usadas para transmitir a resposta a uma solicitação de eco no protocolo ICMP.</summary>
        <value>Um objeto <see cref="T:System.Net.NetworkInformation.PingOptions" /> que contém o TTL (vida útil) e a diretiva de fragmentação usada para transmitir a resposta se <see cref="P:System.Net.NetworkInformation.PingReply.Status" /> for <see cref="F:System.Net.NetworkInformation.IPStatus.Success" />; caso contrário, <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O TTL define o número de vezes que nós podem encaminhar um pacote enquanto trafegam entre sua origem e destino. Se o número de encaminhamentos, também conhecido como saltos, exceder o valor especificado para o TTL, o pacote é considerado não entregue e é descartado.  
  
 O <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> valor especificado na fragmentação de pacotes de controles de solicitação para eco de ICMP. Se <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> está `true` e o tamanho do pacote excede a unidade de transmissão máxima do caminho de rede executada pelo pacote, o pacote será descartado e o <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig> erro será retornado.  
  
   
  
## Examples  
 O exemplo de código a seguir envia uma solicitação de eco do ICMP de forma síncrona e exibe os valores armazenados no <xref:System.Net.NetworkInformation.PingOptions> objeto retornado por essa propriedade.  
  
 [!code-cpp[NclPingSampler#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#3)]
 [!code-csharp[NclPingSampler#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundtripTime">
      <MemberSignature Language="C#" Value="public long RoundtripTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 RoundtripTime" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.RoundtripTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RoundtripTime As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long RoundtripTime { long get(); };" />
      <MemberSignature Language="F#" Value="member this.RoundtripTime : int64" Usage="System.Net.NetworkInformation.PingReply.RoundtripTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o número de milissegundos necessários para enviar uma solicitação de eco do protocolo ICMP e receber a mensagem de resposta de eco ICMP correspondente.</summary>
        <value>Um <see cref="T:System.Int64" /> que especifica o tempo da viagem de ida e volta em milissegundos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a solicitação de eco falhar, o <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A> que será relatado como 0, que também é um valor válido quando a solicitação for bem-sucedida. Você deve verificar o <xref:System.Net.NetworkInformation.PingReply.Status%2A> para determinar se o valor retornado por essa propriedade deve ser ignorado.  
  
   
  
## Examples  
 O exemplo de código a seguir envia uma solicitação de eco do ICMP de forma síncrona e exibe o tamanho do buffer retornado por essa propriedade.  
  
 [!code-cpp[NclPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NclPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.IPStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.NetworkInformation.IPStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As IPStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::NetworkInformation::IPStatus Status { System::Net::NetworkInformation::IPStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.Status : System.Net.NetworkInformation.IPStatus" Usage="System.Net.NetworkInformation.PingReply.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.IPStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o status de uma tentativa de enviar uma solicitação de eco do protocolo ICMP e receber a mensagem de resposta de eco ICMP correspondente.</summary>
        <value>Um valor <see cref="T:System.Net.NetworkInformation.IPStatus" /> que indica o resultado da solicitação.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o valor de <xref:System.Net.NetworkInformation.PingReply.Status%2A> não é <xref:System.Net.NetworkInformation.IPStatus.Success>, você não deve usar os valores retornados pelo <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>, <xref:System.Net.NetworkInformation.PingReply.Options%2A> ou <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> propriedades. O <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A> e <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> propriedades retornará zero e o <xref:System.Net.NetworkInformation.PingReply.Options%2A> propriedade retornará `null`.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar <xref:System.Net.NetworkInformation.Ping> classe para enviar uma solicitação de eco do ICMP de forma síncrona e exibir a resposta.  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>