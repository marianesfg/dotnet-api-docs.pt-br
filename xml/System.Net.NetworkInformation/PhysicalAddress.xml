<Type Name="PhysicalAddress" FullName="System.Net.NetworkInformation.PhysicalAddress">
  <Metadata><Meta Name="ms.openlocfilehash" Value="72b1a0c4987b497f3c3ee0d1e84b31a3f8027be5" /><Meta Name="ms.sourcegitcommit" Value="b0551d7828f015124aca601dbb64bd913cc5067d" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="12/13/2018" /><Meta Name="ms.locfileid" Value="53331253" /></Metadata><TypeSignature Language="C#" Value="public class PhysicalAddress" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PhysicalAddress extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.PhysicalAddress" />
  <TypeSignature Language="VB.NET" Value="Public Class PhysicalAddress" />
  <TypeSignature Language="C++ CLI" Value="public ref class PhysicalAddress" />
  <TypeSignature Language="F#" Value="type PhysicalAddress = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.NetworkInformation</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="8f067-101">Fornece o endereço MAC (Controle de Acesso à Mídia) para uma interface de rede (adaptador).</span><span class="sxs-lookup"><span data-stu-id="8f067-101">Provides the Media Access Control (MAC) address for a network interface (adapter).</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f067-102">O endereço MAC ou o endereço físico é um endereço de hardware que identifica exclusivamente cada nó, como um computador ou impressora em uma rede.</span><span class="sxs-lookup"><span data-stu-id="8f067-102">The MAC address, or physical address, is a hardware address that uniquely identifies each node, such as a computer or printer, on a network.</span></span>  
  
 <span data-ttu-id="8f067-103">As instâncias dessa classe são retornadas pelo <xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="8f067-103">Instances of this class are returned by the <xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f067-104">O exemplo de código a seguir exibe os endereços físicos de todos os adaptadores no computador local.</span><span class="sxs-lookup"><span data-stu-id="8f067-104">The following code example displays the physical addresses of all interfaces on the local computer.</span></span>  
  
 [!code-cpp[NCLPhysicalAddress#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#2)]
 [!code-csharp[NCLPhysicalAddress#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PhysicalAddress (byte[] address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (address As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PhysicalAddress(cli::array &lt;System::Byte&gt; ^ address);" />
      <MemberSignature Language="F#" Value="new System.Net.NetworkInformation.PhysicalAddress : byte[] -&gt; System.Net.NetworkInformation.PhysicalAddress" Usage="new System.Net.NetworkInformation.PhysicalAddress address" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="8f067-105">Uma matriz <see cref="T:System.Byte" /> que contém o endereço.</span><span class="sxs-lookup"><span data-stu-id="8f067-105">A <see cref="T:System.Byte" /> array containing the address.</span></span></param>
        <summary><span data-ttu-id="8f067-106">Inicializa uma nova instância da classe <see cref="T:System.Net.NetworkInformation.PhysicalAddress" />.</span><span class="sxs-lookup"><span data-stu-id="8f067-106">Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f067-107">Em comum, cenários de aplicativos não precisam chamar esse construtor; as instâncias dessa classe são retornadas pelo <xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8f067-107">In common scenarios, applications do not need to call this constructor; instances of this class are returned by the <xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A> method.</span></span>  
  
 <span data-ttu-id="8f067-108">Observe que você também pode usar o <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> método para criar uma nova instância da <xref:System.Net.NetworkInformation.PhysicalAddress>.</span><span class="sxs-lookup"><span data-stu-id="8f067-108">Note that you can also use the <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> method to create a new instance of <xref:System.Net.NetworkInformation.PhysicalAddress>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f067-109">O exemplo de código a seguir cria um novo <xref:System.Net.NetworkInformation.PhysicalAddress> objeto.</span><span class="sxs-lookup"><span data-stu-id="8f067-109">The following code example creates a new <xref:System.Net.NetworkInformation.PhysicalAddress> object.</span></span>  
  
 [!code-cpp[NCLPhysicalAddress#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#4)]
 [!code-csharp[NCLPhysicalAddress#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (comparand As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ comparand);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="physicalAddress.Equals comparand" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparand" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="comparand"><span data-ttu-id="8f067-110">O <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> a ser comparado com a instância atual.</span><span class="sxs-lookup"><span data-stu-id="8f067-110">The <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> to compare to the current instance.</span></span></param>
        <summary><span data-ttu-id="8f067-111">Compara duas instâncias <see cref="T:System.Net.NetworkInformation.PhysicalAddress" />.</span><span class="sxs-lookup"><span data-stu-id="8f067-111">Compares two <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> instances.</span></span></summary>
        <returns><span data-ttu-id="8f067-112"><see langword="true" /> se essa instância e a instância especificada contiverem o mesmo endereço; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8f067-112"><see langword="true" /> if this instance and the specified instance contain the same address; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8f067-113">O exemplo de código a seguir compara duas <xref:System.Net.NetworkInformation.PhysicalAddress> instâncias.</span><span class="sxs-lookup"><span data-stu-id="8f067-113">The following code example compares two <xref:System.Net.NetworkInformation.PhysicalAddress> instances.</span></span>  
  
 [!code-cpp[NCLPhysicalAddress#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#3)]
 [!code-csharp[NCLPhysicalAddress#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAddressBytes">
      <MemberSignature Language="C#" Value="public byte[] GetAddressBytes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetAddressBytes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAddressBytes () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ GetAddressBytes();" />
      <MemberSignature Language="F#" Value="member this.GetAddressBytes : unit -&gt; byte[]" Usage="physicalAddress.GetAddressBytes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8f067-114">Retorna o endereço da instância atual.</span><span class="sxs-lookup"><span data-stu-id="8f067-114">Returns the address of the current instance.</span></span></summary>
        <returns><span data-ttu-id="8f067-115">Uma matriz <see cref="T:System.Byte" /> que contém o endereço.</span><span class="sxs-lookup"><span data-stu-id="8f067-115">A <see cref="T:System.Byte" /> array containing the address.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8f067-116">O exemplo de código a seguir chama esse método para recuperar o endereço de um <xref:System.Net.NetworkInformation.PhysicalAddress> e formata o endereço para exibição.</span><span class="sxs-lookup"><span data-stu-id="8f067-116">The following code example calls this method to retrieve the address of a <xref:System.Net.NetworkInformation.PhysicalAddress> and formats the address for display.</span></span>  
  
 [!code-cpp[NCLPhysicalAddress#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#2)]
 [!code-csharp[NCLPhysicalAddress#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PhysicalAddress.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="physicalAddress.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8f067-117">Retorna o valor de hash de um endereço físico.</span><span class="sxs-lookup"><span data-stu-id="8f067-117">Returns the hash value of a physical address.</span></span></summary>
        <returns><span data-ttu-id="8f067-118">Um valor de hash inteiro.</span><span class="sxs-lookup"><span data-stu-id="8f067-118">An integer hash value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static readonly System.Net.NetworkInformation.PhysicalAddress None;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Net.NetworkInformation.PhysicalAddress None" />
      <MemberSignature Language="DocId" Value="F:System.Net.NetworkInformation.PhysicalAddress.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly None As PhysicalAddress " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Net::NetworkInformation::PhysicalAddress ^ None;" />
      <MemberSignature Language="F#" Value=" staticval mutable None : System.Net.NetworkInformation.PhysicalAddress" Usage="System.Net.NetworkInformation.PhysicalAddress.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PhysicalAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8f067-119">Retorna uma nova instância de <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> com um endereço de tamanho zero.</span><span class="sxs-lookup"><span data-stu-id="8f067-119">Returns a new <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> instance with a zero length address.</span></span> <span data-ttu-id="8f067-120">Este campo é somente leitura.</span><span class="sxs-lookup"><span data-stu-id="8f067-120">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f067-121">O <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> retorn <xref:System.Net.NetworkInformation.PhysicalAddress.None> se você especificar `null` endereço.</span><span class="sxs-lookup"><span data-stu-id="8f067-121">The <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> method returns <xref:System.Net.NetworkInformation.PhysicalAddress.None> if you specify `null` address.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f067-122">O exemplo de código a seguir demonstra como usar este campo para testar o resultado da análise de um endereço.</span><span class="sxs-lookup"><span data-stu-id="8f067-122">The following code example demonstrates using this field to test the result of parsing an address.</span></span>  
  
 [!code-cpp[NCLPhysicalAddress#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#5)]
 [!code-csharp[NCLPhysicalAddress#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Net.NetworkInformation.PhysicalAddress Parse (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.NetworkInformation.PhysicalAddress Parse(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (address As String) As PhysicalAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::NetworkInformation::PhysicalAddress ^ Parse(System::String ^ address);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; System.Net.NetworkInformation.PhysicalAddress" Usage="System.Net.NetworkInformation.PhysicalAddress.Parse address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PhysicalAddress</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="8f067-123">Um <see cref="T:System.String" /> que contém o endereço que será usado para inicializar a instância <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> retornada por esse método.</span><span class="sxs-lookup"><span data-stu-id="8f067-123">A <see cref="T:System.String" /> containing the address that will be used to initialize the <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> instance returned by this method.</span></span></param>
        <summary><span data-ttu-id="8f067-124">Analisa o <see cref="T:System.String" /> especificado e armazena seu conteúdo como os bytes de endereço do <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> retornado por esse método.</span><span class="sxs-lookup"><span data-stu-id="8f067-124">Parses the specified <see cref="T:System.String" /> and stores its contents as the address bytes of the <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> returned by this method.</span></span></summary>
        <returns><span data-ttu-id="8f067-125">Uma instância <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> com o endereço especificado.</span><span class="sxs-lookup"><span data-stu-id="8f067-125">A <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> instance with the specified address.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f067-126">O `address` parâmetro deve conter uma cadeia de caracteres que pode conter apenas números e dígitos hexadecimais como as letras maiusculas.</span><span class="sxs-lookup"><span data-stu-id="8f067-126">The `address` parameter must contain a string that can only consist of numbers and upper-case letters as hexadecimal digits.</span></span> <span data-ttu-id="8f067-127">Alguns exemplos de formatos de cadeia de caracteres aceitáveis são da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="8f067-127">Some examples of string formats that are acceptable are as follows:</span></span>  
  
 `001122334455`  
  
 `00-11-22-33-44-55`  
  
 `F0-E1-D2-C3-B4-A5`  
  
 <span data-ttu-id="8f067-128">Observe que um endereço contém `f0-e1-d2-c3-b4-a5` falhará analisar e gerar uma exceção.</span><span class="sxs-lookup"><span data-stu-id="8f067-128">Note that an address that contains `f0-e1-d2-c3-b4-a5` will fail to parse and throw an exception.</span></span>  
  
 <span data-ttu-id="8f067-129">Use o <xref:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes%2A> método para recuperar o endereço de uma existente <xref:System.Net.NetworkInformation.PhysicalAddress> instância.</span><span class="sxs-lookup"><span data-stu-id="8f067-129">Use the <xref:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes%2A> method to retrieve the address from an existing <xref:System.Net.NetworkInformation.PhysicalAddress> instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f067-130">O exemplo de código a seguir cria uma <xref:System.Net.NetworkInformation.PhysicalAddress> instância chamando o <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8f067-130">The following code example creates a <xref:System.Net.NetworkInformation.PhysicalAddress> instance by calling the <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> method.</span></span>  
  
 [!code-cpp[NCLPhysicalAddress#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#5)]
 [!code-csharp[NCLPhysicalAddress#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="8f067-131"><paramref name="address" /> contém um endereço de hardware ilegal ou contém uma cadeia de caracteres no formato incorreto.</span><span class="sxs-lookup"><span data-stu-id="8f067-131"><paramref name="address" /> contains an illegal hardware address or contains a string in the incorrect format.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PhysicalAddress.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="physicalAddress.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8f067-132">Retorna a representação <see cref="T:System.String" /> do endereço desta instância.</span><span class="sxs-lookup"><span data-stu-id="8f067-132">Returns the <see cref="T:System.String" /> representation of the address of this instance.</span></span></summary>
        <returns><span data-ttu-id="8f067-133">Um <see cref="T:System.String" /> que contém o endereço contido nesta instância.</span><span class="sxs-lookup"><span data-stu-id="8f067-133">A <see cref="T:System.String" /> containing the address contained in this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8f067-134">O exemplo de código a seguir demonstra como exibir o endereço em um <xref:System.Net.NetworkInformation.PhysicalAddress> instância.</span><span class="sxs-lookup"><span data-stu-id="8f067-134">The following code example demonstrates displaying the address in a <xref:System.Net.NetworkInformation.PhysicalAddress> instance.</span></span>  
  
 [!code-cpp[NCLPhysicalAddress#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#3)]
 [!code-csharp[NCLPhysicalAddress#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>