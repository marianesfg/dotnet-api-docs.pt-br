<Type Name="IDebugVsaScriptCodeItem" FullName="Microsoft.JScript.IDebugVsaScriptCodeItem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9cadb871fc370eb4669678a05ac449e2e9ec0c89" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30337580" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDebugVsaScriptCodeItem" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDebugVsaScriptCodeItem" />
  <TypeSignature Language="DocId" Value="T:Microsoft.JScript.IDebugVsaScriptCodeItem" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDebugVsaScriptCodeItem" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDebugVsaScriptCodeItem" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.JScript</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("6DFE759A-CB8B-4ca0-A973-1D04E0BF0B53")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Define métodos que avaliam expressões e analisam cadeias de caracteres. Normalmente, essa interface é implementada por um objeto que representa um bloco de código e, normalmente, é chamada por um depurador. Essa interface fornece funcionalidade adicional que é necessária para um host IActiveScript.</summary>
    <remarks>To be added.</remarks>
    <forInternalUseOnly />
  </Docs>
  <Members>
    <Member MemberName="Evaluate">
      <MemberSignature Language="C#" Value="public object Evaluate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Evaluate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate" />
      <MemberSignature Language="VB.NET" Value="Public Function Evaluate () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Evaluate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando implementada em uma classe, avalia o bloco, a expressão ou a instrução representada pelo item de código e retorna o valor. Normalmente, é chamada por um depurador que precisa avaliar uma expressão (em uma janela Inspeção, por exemplo). Para expressões, o valor é o resultado da expressão. Para instruções e blocos, a expressão resultante é a última expressão calculada pela instrução ou bloco.</summary>
        <returns>Retorna um valor que representa a avaliação da expressão, instrução ou bloco.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Observe que o <xref:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate%2A> método é funcionalmente idêntico de <xref:Microsoft.JScript.IVsaScriptCodeItem.Execute%2A> método. Somente os atributos de marshaling são diferentes. Esta versão da interface permite que um depurador não gerenciado obter o valor de retorno como uma `IUnknown` ponteiro em vez de `VARIANT`.  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="ParseNamedBreakPoint">
      <MemberSignature Language="C#" Value="public bool ParseNamedBreakPoint (string input, out string functionName, out int nargs, out string arguments, out string returnType, out ulong offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ParseNamedBreakPoint(string input, [out] string&amp; functionName, [out] int32&amp; nargs, [out] string&amp; arguments, [out] string&amp; returnType, [out] unsigned int64&amp; offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Function ParseNamedBreakPoint (input As String, ByRef functionName As String, ByRef nargs As Integer, ByRef arguments As String, ByRef returnType As String, ByRef offset As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ParseNamedBreakPoint(System::String ^ input, [Runtime::InteropServices::Out] System::String ^ % functionName, [Runtime::InteropServices::Out] int % nargs, [Runtime::InteropServices::Out] System::String ^ % arguments, [Runtime::InteropServices::Out] System::String ^ % returnType, [Runtime::InteropServices::Out] System::UInt64 % offset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="functionName" Type="System.String&amp;" RefType="out" />
        <Parameter Name="nargs" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="arguments" Type="System.String&amp;" RefType="out" />
        <Parameter Name="returnType" Type="System.String&amp;" RefType="out" />
        <Parameter Name="offset" Type="System.UInt64&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Uma cadeia de caracteres de ponto de interrupção nomeada e bem formada que fornece uma função, uma lista de argumentos opcionais e o deslocamento de IL opcional.</param>
        <param name="functionName">Parâmetro out que retorna o nome da função analisado fora da cadeia de caracteres de entrada ou a cadeia de caracteres vazia se a cadeia de caracteres de entrada não estiver bem formada.</param>
        <param name="nargs">Parâmetro out que retorna o número de argumentos na lista de argumentos opcionais. Retorna zero se não houver uma lista de argumentos ou se a cadeia de caracteres não estiver bem formada.</param>
        <param name="arguments">Parâmetro out que retorna uma lista separada por espaços de nomes dos tipos de todos os argumentos na lista de argumentos ou uma cadeia de caracteres vazia se a lista de argumentos estiver ausente ou se a cadeia de caracteres de entrada não estiver bem formada.</param>
        <param name="returnType">Parâmetro out que retorna uma cadeia de caracteres que contém o tipo de retorno da função nomeada na entrada ou a cadeia de caracteres vazia se o tipo de retorno estiver ausente ou a cadeia de caracteres de entrada não estiver bem formada.</param>
        <param name="offset">Inteiro longo sem sinal que fornece o deslocamento da IL da cadeia de caracteres de entrada ou zero se não houver nenhum deslocamento de IL ou se a cadeia de caracteres não estiver bem formada.</param>
        <summary>Quando implementado em uma classe, analisa cadeias de caracteres e retorna as informações analisadas. Normalmente, esse método é chamado por um depurador que precisa analisar informações sobre um ponto de interrupção representado como um <see langword="string" />. O depurador pode ter um ponto de interrupção digitado pelo usuário no formato *functionname-arguments-ILoffset*. Uma cadeia de caracteres de ponto de interrupção nomeada pode ter um formato complexo, como <c>F.B(C.D[], int, arg : double ) : C.Abc + 123.</c> A lista de parâmetros é opcional, assim como o deslocamento da IL.</summary>
        <returns>Retorna <see langword="true" /> se o ponto de interrupção nomeado é analisado com êxito; caso contrário, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
  </Members>
</Type>