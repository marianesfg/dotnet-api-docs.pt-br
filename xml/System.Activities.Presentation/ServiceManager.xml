<Type Name="ServiceManager" FullName="System.Activities.Presentation.ServiceManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a8cc9b3aa8275919866a2392e7ce80180f1762c0" /><Meta Name="ms.sourcegitcommit" Value="9802d4c6745a8ae514b26f144fb3969265b224ba" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="12/22/2018" /><Meta Name="ms.locfileid" Value="53751226" /></Metadata><TypeSignature Language="C#" Value="public abstract class ServiceManager : IServiceProvider, System.Collections.Generic.IEnumerable&lt;Type&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ServiceManager extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt;, class System.Collections.IEnumerable, class System.IServiceProvider" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.ServiceManager" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ServiceManager&#xA;Implements IEnumerable(Of Type), IServiceProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceManager abstract : IServiceProvider, System::Collections::Generic::IEnumerable&lt;Type ^&gt;" />
  <TypeSignature Language="F#" Value="type ServiceManager = class&#xA;    interface IServiceProvider&#xA;    interface seq&lt;Type&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="c081c-101">Implementa <see cref="T:System.IServiceProvider" /> e dá acesso aos serviços oferecidos pelo contexto de edição.</span><span class="sxs-lookup"><span data-stu-id="c081c-101">Implements <see cref="T:System.IServiceProvider" /> and provides access to services offered by the editing context.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c081c-102"><xref:System.Activities.Presentation.EditingContext.Services%2A> representam a funcionalidade que é fornecido pelo host para usar o designer ou que é usado pelo designer para tornar a funcionalidade disponível para todos os designers dentro do editor.</span><span class="sxs-lookup"><span data-stu-id="c081c-102"><xref:System.Activities.Presentation.EditingContext.Services%2A> represent functionality that is either provided by the host for the designer to use or that is used by the designer to make functionality available to all designers within the editor.</span></span> <span data-ttu-id="c081c-103">Ele é obtido do <xref:System.Activities.Presentation.EditingContext> pelo <xref:System.Activities.Presentation.EditingContext.Services%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="c081c-103">It is obtained from the <xref:System.Activities.Presentation.EditingContext> by the <xref:System.Activities.Presentation.EditingContext.Services%2A> property.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ServiceManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ServiceManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c081c-104">Inicializa uma nova instância da classe <see cref="T:System.Activities.Presentation.ServiceManager" />.</span><span class="sxs-lookup"><span data-stu-id="c081c-104">Initializes a new instance of the <see cref="T:System.Activities.Presentation.ServiceManager" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public abstract bool Contains (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Contains(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Contains (serviceType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Contains(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="abstract member Contains : Type -&gt; bool" Usage="serviceManager.Contains serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="c081c-105">O tipo de serviço a ser verificado.</span><span class="sxs-lookup"><span data-stu-id="c081c-105">The type of service to check.</span></span></param>
        <summary><span data-ttu-id="c081c-106">Retorna um valor booliano que indica se o gerenciador de serviços contém um serviço do tipo fornecido.</span><span class="sxs-lookup"><span data-stu-id="c081c-106">Returns a Boolean value that indicates whether the service manager contains a service of the given type.</span></span></summary>
        <returns><span data-ttu-id="c081c-107"><see langword="true" /> se um serviço do tipo <paramref name="serviceType" /> tiver sido publicado; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c081c-107"><see langword="true" /> if a service of type <paramref name="serviceType" /> has been published; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public bool Contains&lt;TServiceType&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains&lt;TServiceType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Contains``1" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains(Of TServiceType) () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; bool Contains();" />
      <MemberSignature Language="F#" Value="member this.Contains : unit -&gt; bool" Usage="serviceManager.Contains " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TServiceType"><span data-ttu-id="c081c-108">O tipo de serviço a ser verificado.</span><span class="sxs-lookup"><span data-stu-id="c081c-108">The type of service to check.</span></span></typeparam>
        <summary><span data-ttu-id="c081c-109">Retorna um valor booliano que indica se o gerenciador de serviços contém um serviço do tipo fornecido.</span><span class="sxs-lookup"><span data-stu-id="c081c-109">Returns a Boolean value that indicates whether the service manager contains a service of the given type.</span></span></summary>
        <returns><span data-ttu-id="c081c-110"><see langword="true" /> se um serviço do tipo <paramref name="serviceType" /> tiver sido publicado; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c081c-110"><see langword="true" /> if a service of type <paramref name="serviceType" /> has been published; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerator&lt;Type&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.Type&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEnumerator () As IEnumerator(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IEnumerator&lt;Type ^&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;Type&gt;" Usage="serviceManager.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c081c-111">Recupera um enumerador que pode ser usado para enumerar todos os serviços que esse gerenciador de serviços publica.</span><span class="sxs-lookup"><span data-stu-id="c081c-111">Retrieves an enumerator that can be used to enumerate all of the services that this service manager publishes.</span></span></summary>
        <returns><span data-ttu-id="c081c-112">Retorna <see cref="T:System.Collections.Generic.IEnumerator`1" />, que contém uma enumeração de serviços publicados.</span><span class="sxs-lookup"><span data-stu-id="c081c-112">Returns <see cref="T:System.Collections.Generic.IEnumerator`1" />, which contains an enumeration of published services.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRequiredService&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public TServiceType GetRequiredService&lt;TServiceType&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TServiceType GetRequiredService&lt;TServiceType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetRequiredService``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRequiredService(Of TServiceType) () As TServiceType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; TServiceType GetRequiredService();" />
      <MemberSignature Language="F#" Value="member this.GetRequiredService : unit -&gt; 'ServiceType" Usage="serviceManager.GetRequiredService " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TServiceType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TServiceType"><span data-ttu-id="c081c-113">O tipo de serviço a ser recuperado.</span><span class="sxs-lookup"><span data-stu-id="c081c-113">The type of service to retrieve.</span></span></typeparam>
        <summary><span data-ttu-id="c081c-114">Recupera o serviço solicitado.</span><span class="sxs-lookup"><span data-stu-id="c081c-114">Retrieves the requested service.</span></span></summary>
        <returns><span data-ttu-id="c081c-115">Um tipo genérico, que é uma instância do serviço.</span><span class="sxs-lookup"><span data-stu-id="c081c-115">A generic type, which is an instance of the service.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c081c-116">Diferentemente <xref:System.Activities.Presentation.ServiceManager.GetService%2A>, esse método lança um <xref:System.NotSupportedException> se o serviço não está disponível.</span><span class="sxs-lookup"><span data-stu-id="c081c-116">Unlike <xref:System.Activities.Presentation.ServiceManager.GetService%2A>, this method throws a <xref:System.NotSupportedException> if the service is not available.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="c081c-117">Não há nenhum serviço do tipo determinado.</span><span class="sxs-lookup"><span data-stu-id="c081c-117">There is no service of the given type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public abstract object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type -&gt; obj" Usage="serviceManager.GetService serviceType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IServiceProvider.GetService(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="c081c-118">O tipo de serviço a ser recuperado.</span><span class="sxs-lookup"><span data-stu-id="c081c-118">The type of service to retrieve.</span></span></param>
        <summary><span data-ttu-id="c081c-119">Recupera o serviço solicitado.</span><span class="sxs-lookup"><span data-stu-id="c081c-119">Retrieves the requested service.</span></span>  <span data-ttu-id="c081c-120">Este método retornará <see langword="null" /> se o serviço não puder ser localizado.</span><span class="sxs-lookup"><span data-stu-id="c081c-120">This method returns <see langword="null" /> if the service could not be located.</span></span></summary>
        <returns><span data-ttu-id="c081c-121">Retorna <see cref="T:System.Object" />, que é uma instância do serviço ou <see langword="null" /> se o serviço não tiver sido publicado.</span><span class="sxs-lookup"><span data-stu-id="c081c-121">Returns <see cref="T:System.Object" />, which is an instance of the service, or <see langword="null" /> if the service has not been published.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c081c-122"><paramref name="serviceType" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c081c-122"><paramref name="serviceType" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetService&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public TServiceType GetService&lt;TServiceType&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TServiceType GetService&lt;TServiceType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetService``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService(Of TServiceType) () As TServiceType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; TServiceType GetService();" />
      <MemberSignature Language="F#" Value="member this.GetService : unit -&gt; 'ServiceType" Usage="serviceManager.GetService " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TServiceType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TServiceType"><span data-ttu-id="c081c-123">O tipo de serviço a ser recuperado.</span><span class="sxs-lookup"><span data-stu-id="c081c-123">The type of service to retrieve.</span></span></typeparam>
        <summary><span data-ttu-id="c081c-124">Recupera o serviço solicitado.</span><span class="sxs-lookup"><span data-stu-id="c081c-124">Retrieves the requested service.</span></span> <span data-ttu-id="c081c-125">Este método retornará <see langword="null" /> se o serviço não puder ser localizado.</span><span class="sxs-lookup"><span data-stu-id="c081c-125">This method returns <see langword="null" /> if the service could not be located.</span></span></summary>
        <returns><span data-ttu-id="c081c-126">Um tipo genérico, que é uma instância do serviço ou <see langword="null" />, se o serviço não tiver sido publicado.</span><span class="sxs-lookup"><span data-stu-id="c081c-126">A generic type, which is an instance of the service, or <see langword="null" /> if the service has not been published.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTarget">
      <MemberSignature Language="C#" Value="protected static object GetTarget (Delegate callback);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig object GetTarget(class System.Delegate callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetTarget(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetTarget (callback As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Object ^ GetTarget(Delegate ^ callback);" />
      <MemberSignature Language="F#" Value="static member GetTarget : Delegate -&gt; obj" Usage="System.Activities.Presentation.ServiceManager.GetTarget callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="c081c-127">O delegado para o qual o destino será obtido.</span><span class="sxs-lookup"><span data-stu-id="c081c-127">The delegate to get the target for.</span></span></param>
        <summary><span data-ttu-id="c081c-128">Um método auxiliar que retorna o objeto de destino de um delegado.</span><span class="sxs-lookup"><span data-stu-id="c081c-128">A helper method that returns the target object for a delegate.</span></span> <span data-ttu-id="c081c-129">Se o delegado foi criado para proxy de um delegado genérico, isso retornará o objeto original corretamente e não o proxy.</span><span class="sxs-lookup"><span data-stu-id="c081c-129">If the delegate was created to proxy a generic delegate, this will correctly return the original object, not the proxy.</span></span></summary>
        <returns><span data-ttu-id="c081c-130">Retorna <see cref="T:System.Object" />, que é o destino de retorno de chamada.</span><span class="sxs-lookup"><span data-stu-id="c081c-130">Returns <see cref="T:System.Object" />, which is the callback target.</span></span> <span data-ttu-id="c081c-131">Isso poderá retornar <see langword="null" /> se o retorno de chamada representar um objeto estático.</span><span class="sxs-lookup"><span data-stu-id="c081c-131">This can return <see langword="null" /> if the callback represents a static object.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c081c-132"><paramref name="callback" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c081c-132"><paramref name="callback" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Publish">
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c081c-133">Publica o tipo de serviço fornecido, mas ainda não declara uma instância.</span><span class="sxs-lookup"><span data-stu-id="c081c-133">Publishes the given service type, but does not declare an instance.</span></span> <span data-ttu-id="c081c-134">Quando o serviço for solicitado, o retorno de chamada de serviço de Publicação será invocado para criar a instância.</span><span class="sxs-lookup"><span data-stu-id="c081c-134">When the service is requested, the Publish service callback will be invoked to create the instance.</span></span> <span data-ttu-id="c081c-135">O retorno de chamada é invocado apenas uma vez.</span><span class="sxs-lookup"><span data-stu-id="c081c-135">The callback is invoked only once.</span></span> <span data-ttu-id="c081c-136">Depois disso, a instância retornada por ele é armazenada em cache.</span><span class="sxs-lookup"><span data-stu-id="c081c-136">After that, the instance it returned is cached.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Publish">
      <MemberSignature Language="C#" Value="public abstract void Publish (Type serviceType, System.Activities.Presentation.PublishServiceCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Publish(class System.Type serviceType, class System.Activities.Presentation.PublishServiceCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Publish(System.Type,System.Activities.Presentation.PublishServiceCallback)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Publish (serviceType As Type, callback As PublishServiceCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Publish(Type ^ serviceType, System::Activities::Presentation::PublishServiceCallback ^ callback);" />
      <MemberSignature Language="F#" Value="abstract member Publish : Type * System.Activities.Presentation.PublishServiceCallback -&gt; unit" Usage="serviceManager.Publish (serviceType, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="callback" Type="System.Activities.Presentation.PublishServiceCallback" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="c081c-137">O tipo de serviço a ser publicado.</span><span class="sxs-lookup"><span data-stu-id="c081c-137">The type of service to publish.</span></span></param>
        <param name="callback"><span data-ttu-id="c081c-138">Um retorno de chamada que será chamado quando uma instância do serviço é necessária.</span><span class="sxs-lookup"><span data-stu-id="c081c-138">A callback that will be invoked when an instance of the service is needed.</span></span></param>
        <summary><span data-ttu-id="c081c-139">Publica o tipo de serviço especificado, mas não declara uma instância.</span><span class="sxs-lookup"><span data-stu-id="c081c-139">Publishes the specified service type, but does not declare an instance.</span></span> <span data-ttu-id="c081c-140">Quando o serviço for solicitado, o retorno de chamada de serviço de Publicação será invocado para criar a instância.</span><span class="sxs-lookup"><span data-stu-id="c081c-140">When the service is requested, the Publish service callback will be invoked to create the instance.</span></span> <span data-ttu-id="c081c-141">O retorno de chamada é invocado apenas uma vez.</span><span class="sxs-lookup"><span data-stu-id="c081c-141">The callback is invoked only once.</span></span> <span data-ttu-id="c081c-142">Depois disso, a instância retornada por ele é armazenada em cache.</span><span class="sxs-lookup"><span data-stu-id="c081c-142">After that, the instance it returned is cached.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c081c-143"><paramref name="serviceType" /> ou <paramref name="callback" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c081c-143"><paramref name="serviceType" /> or <paramref name="callback" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c081c-144">O <paramref name="serviceType" /> já foi publicado.</span><span class="sxs-lookup"><span data-stu-id="c081c-144"><paramref name="serviceType" /> has already been published.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Publish">
      <MemberSignature Language="C#" Value="public abstract void Publish (Type serviceType, object serviceInstance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Publish(class System.Type serviceType, object serviceInstance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Publish(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Publish (serviceType As Type, serviceInstance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Publish(Type ^ serviceType, System::Object ^ serviceInstance);" />
      <MemberSignature Language="F#" Value="abstract member Publish : Type * obj -&gt; unit" Usage="serviceManager.Publish (serviceType, serviceInstance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="serviceInstance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="c081c-145">O tipo de serviço a ser publicado.</span><span class="sxs-lookup"><span data-stu-id="c081c-145">The type of service to publish.</span></span></param>
        <param name="serviceInstance"><span data-ttu-id="c081c-146">Uma instância do serviço.</span><span class="sxs-lookup"><span data-stu-id="c081c-146">An instance of the service.</span></span></param>
        <summary><span data-ttu-id="c081c-147">Publica o serviço fornecido.</span><span class="sxs-lookup"><span data-stu-id="c081c-147">Publishes the given service.</span></span> <span data-ttu-id="c081c-148">Depois de publicada, a instância do serviço permanece no gerenciador de serviços até o contexto de edição ser descartado.</span><span class="sxs-lookup"><span data-stu-id="c081c-148">After it is published, the service instance remains in the service manager until the editing context is disposed of.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c081c-149"><paramref name="serviceType" /> ou <paramref name="serviceInstance" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c081c-149"><paramref name="serviceType" /> or <paramref name="serviceInstance" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c081c-150"><paramref name="serviceInstance" /> não implementa ou deriva de <paramref name="serviceType" /> ou <paramref name="serviceType" /> já foi publicado.</span><span class="sxs-lookup"><span data-stu-id="c081c-150"><paramref name="serviceInstance" /> does not derive from or implement <paramref name="serviceType" />, or <paramref name="serviceType" /> has already been published.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Publish&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public void Publish&lt;TServiceType&gt; (System.Activities.Presentation.PublishServiceCallback&lt;TServiceType&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Publish&lt;TServiceType&gt;(class System.Activities.Presentation.PublishServiceCallback`1&lt;!!TServiceType&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Publish``1(System.Activities.Presentation.PublishServiceCallback{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Publish(Of TServiceType) (callback As PublishServiceCallback(Of TServiceType))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; void Publish(System::Activities::Presentation::PublishServiceCallback&lt;TServiceType&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Publish : System.Activities.Presentation.PublishServiceCallback&lt;'ServiceType&gt; -&gt; unit" Usage="serviceManager.Publish callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Activities.Presentation.PublishServiceCallback&lt;TServiceType&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TServiceType"><span data-ttu-id="c081c-151">O tipo do serviço a ser publicado.</span><span class="sxs-lookup"><span data-stu-id="c081c-151">The type of the service to publish.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="c081c-152">Um retorno de chamada que será chamado quando uma instância do serviço é necessária.</span><span class="sxs-lookup"><span data-stu-id="c081c-152">A callback that will be invoked when an instance of the service is needed.</span></span></param>
        <summary><span data-ttu-id="c081c-153">Publica o tipo de serviço fornecido, mas ainda não declara uma instância.</span><span class="sxs-lookup"><span data-stu-id="c081c-153">Publishes the given service type, but does not declare an instance yet.</span></span> <span data-ttu-id="c081c-154">Quando o serviço for solicitado, o <see langword="PublishServiceCallback" /> será invocado para criar a instância.</span><span class="sxs-lookup"><span data-stu-id="c081c-154">When the service is requested, the <see langword="PublishServiceCallback" /> will be invoked to create the instance.</span></span> <span data-ttu-id="c081c-155">O retorno de chamada é invocado apenas uma vez.</span><span class="sxs-lookup"><span data-stu-id="c081c-155">The callback is invoked only once.</span></span> <span data-ttu-id="c081c-156">Depois disso, a instância retornada por ele é armazenada em cache.</span><span class="sxs-lookup"><span data-stu-id="c081c-156">After that, the instance it returned is cached.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c081c-157"><paramref name="callback" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c081c-157"><paramref name="callback" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Publish&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public void Publish&lt;TServiceType&gt; (TServiceType serviceInstance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Publish&lt;TServiceType&gt;(!!TServiceType serviceInstance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Publish``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Publish(Of TServiceType) (serviceInstance As TServiceType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; void Publish(TServiceType serviceInstance);" />
      <MemberSignature Language="F#" Value="member this.Publish : 'ServiceType -&gt; unit" Usage="serviceManager.Publish serviceInstance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceInstance" Type="TServiceType" />
      </Parameters>
      <Docs>
        <typeparam name="TServiceType"><span data-ttu-id="c081c-158">O tipo do serviço a ser publicado.</span><span class="sxs-lookup"><span data-stu-id="c081c-158">The type of the service to publish.</span></span></typeparam>
        <param name="serviceInstance"><span data-ttu-id="c081c-159">Uma instância do serviço.</span><span class="sxs-lookup"><span data-stu-id="c081c-159">An instance of the service.</span></span></param>
        <summary><span data-ttu-id="c081c-160">Publica o serviço fornecido.</span><span class="sxs-lookup"><span data-stu-id="c081c-160">Publishes the given service.</span></span> <span data-ttu-id="c081c-161">Depois de publicada, a instância do serviço permanece no gerenciador de serviços até o contexto de edição ser descartado.</span><span class="sxs-lookup"><span data-stu-id="c081c-161">After it is published, the service instance remains in the service manager until the editing context is disposed of.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c081c-162"><paramref name="serviceInstance" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c081c-162"><paramref name="serviceInstance" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveCallback">
      <MemberSignature Language="C#" Value="protected static Delegate RemoveCallback (Delegate existing, Delegate toRemove);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Delegate RemoveCallback(class System.Delegate existing, class System.Delegate toRemove) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.RemoveCallback(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function RemoveCallback (existing As Delegate, toRemove As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static Delegate ^ RemoveCallback(Delegate ^ existing, Delegate ^ toRemove);" />
      <MemberSignature Language="F#" Value="static member RemoveCallback : Delegate * Delegate -&gt; Delegate" Usage="System.Activities.Presentation.ServiceManager.RemoveCallback (existing, toRemove)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="existing" Type="System.Delegate" />
        <Parameter Name="toRemove" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="existing"><span data-ttu-id="c081c-163">O delegado existente do qual o retorno de chamada será removido.</span><span class="sxs-lookup"><span data-stu-id="c081c-163">The existing delegate to remove the callback from.</span></span></param>
        <param name="toRemove"><span data-ttu-id="c081c-164">O retorno de chamada a ser removido.</span><span class="sxs-lookup"><span data-stu-id="c081c-164">The callback to remove.</span></span></param>
        <summary><span data-ttu-id="c081c-165">Um método auxiliar que executa uma operação <see langword="Delegate.Remove" /> e desencapsula delegados que são proxies para retornos de chamada genéricos.</span><span class="sxs-lookup"><span data-stu-id="c081c-165">A helper method that performs a <see langword="Delegate.Remove" /> operation, and unwraps delegates that are proxies to generic callbacks.</span></span> <span data-ttu-id="c081c-166">Esse método deve ser usado nas suas implementações <see cref="Overload:System.Activities.Presentation.ServiceManager.Unsubscribe" />.</span><span class="sxs-lookup"><span data-stu-id="c081c-166">You should use this method in your <see cref="Overload:System.Activities.Presentation.ServiceManager.Unsubscribe" /> implementations.</span></span></summary>
        <returns><span data-ttu-id="c081c-167">Retorna <see cref="T:System.Delegate" />, que é um novo valor a ser atribuído ao delegado existente.</span><span class="sxs-lookup"><span data-stu-id="c081c-167">Returns <see cref="T:System.Delegate" />, which is  a new value to assign to the existing delegate.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subscribe">
      <MemberSignature Language="C#" Value="public abstract void Subscribe (Type serviceType, System.Activities.Presentation.SubscribeServiceCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Subscribe(class System.Type serviceType, class System.Activities.Presentation.SubscribeServiceCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Subscribe(System.Type,System.Activities.Presentation.SubscribeServiceCallback)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Subscribe (serviceType As Type, callback As SubscribeServiceCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Subscribe(Type ^ serviceType, System::Activities::Presentation::SubscribeServiceCallback ^ callback);" />
      <MemberSignature Language="F#" Value="abstract member Subscribe : Type * System.Activities.Presentation.SubscribeServiceCallback -&gt; unit" Usage="serviceManager.Subscribe (serviceType, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeServiceCallback" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="c081c-168">O tipo de serviço a ser assinado.</span><span class="sxs-lookup"><span data-stu-id="c081c-168">The type of service to subscribe to.</span></span></param>
        <param name="callback"><span data-ttu-id="c081c-169">Um retorno de chamada que será notificado quando o serviço estiver disponível.</span><span class="sxs-lookup"><span data-stu-id="c081c-169">A callback that will be notified when the service is available.</span></span></param>
        <summary><span data-ttu-id="c081c-170">Invoca o retorno de chamada fornecido quando alguém publica o serviço solicitado.</span><span class="sxs-lookup"><span data-stu-id="c081c-170">Invokes the provided callback when someone has published the requested service.</span></span> <span data-ttu-id="c081c-171">Se o serviço já estiver disponível, este método invocará o retorno de chamada imediatamente.</span><span class="sxs-lookup"><span data-stu-id="c081c-171">If the service was already available, this method invokes the callback immediately.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c081c-172"><paramref name="serviceType" /> ou <paramref name="callback" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c081c-172"><paramref name="serviceType" /> or <paramref name="callback" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Subscribe&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public void Subscribe&lt;TServiceType&gt; (System.Activities.Presentation.SubscribeServiceCallback&lt;TServiceType&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Subscribe&lt;TServiceType&gt;(class System.Activities.Presentation.SubscribeServiceCallback`1&lt;!!TServiceType&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Subscribe``1(System.Activities.Presentation.SubscribeServiceCallback{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Subscribe(Of TServiceType) (callback As SubscribeServiceCallback(Of TServiceType))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; void Subscribe(System::Activities::Presentation::SubscribeServiceCallback&lt;TServiceType&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Subscribe : System.Activities.Presentation.SubscribeServiceCallback&lt;'ServiceType&gt; -&gt; unit" Usage="serviceManager.Subscribe callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeServiceCallback&lt;TServiceType&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TServiceType"><span data-ttu-id="c081c-173">O tipo de serviço a ser assinado.</span><span class="sxs-lookup"><span data-stu-id="c081c-173">The type of the service to subscribe to.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="c081c-174">Um retorno de chamada que será notificado quando o serviço estiver disponível.</span><span class="sxs-lookup"><span data-stu-id="c081c-174">A callback that will be notified when the service is available.</span></span></param>
        <summary><span data-ttu-id="c081c-175">Invoca o retorno de chamada fornecido quando alguém publica o serviço solicitado.</span><span class="sxs-lookup"><span data-stu-id="c081c-175">Invokes the provided callback when someone has published the requested service.</span></span> <span data-ttu-id="c081c-176">Se o serviço já estiver disponível, este método invocará o retorno de chamada imediatamente.</span><span class="sxs-lookup"><span data-stu-id="c081c-176">If the service was already available, this method invokes the callback immediately.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c081c-177"><paramref name="callback" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c081c-177"><paramref name="callback" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c081c-178">Recupera um enumerador que pode ser usado para enumerar todos os serviços que esse gerenciador de serviços publica.</span><span class="sxs-lookup"><span data-stu-id="c081c-178">Retrieves an enumerator that can be used to enumerate all of the services that this service manager publishes.</span></span></summary>
        <returns><span data-ttu-id="c081c-179">Retorna <see cref="T:System.Collections.IEnumerator" />, que contém uma enumeração de serviços publicados.</span><span class="sxs-lookup"><span data-stu-id="c081c-179">Returns <see cref="T:System.Collections.IEnumerator" />, which contains an enumeration of published services.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unsubscribe">
      <MemberSignature Language="C#" Value="public abstract void Unsubscribe (Type serviceType, System.Activities.Presentation.SubscribeServiceCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unsubscribe(class System.Type serviceType, class System.Activities.Presentation.SubscribeServiceCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Unsubscribe(System.Type,System.Activities.Presentation.SubscribeServiceCallback)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Unsubscribe (serviceType As Type, callback As SubscribeServiceCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Unsubscribe(Type ^ serviceType, System::Activities::Presentation::SubscribeServiceCallback ^ callback);" />
      <MemberSignature Language="F#" Value="abstract member Unsubscribe : Type * System.Activities.Presentation.SubscribeServiceCallback -&gt; unit" Usage="serviceManager.Unsubscribe (serviceType, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeServiceCallback" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="c081c-180">O tipo de serviço do qual a assinatura será removida.</span><span class="sxs-lookup"><span data-stu-id="c081c-180">The type of service to remove the subscription from.</span></span></param>
        <param name="callback"><span data-ttu-id="c081c-181">O objeto de retorno de chamada a ser removido da assinatura.</span><span class="sxs-lookup"><span data-stu-id="c081c-181">The callback object to remove from the subscription.</span></span></param>
        <summary><span data-ttu-id="c081c-182">Remove uma assinatura para um tipo de serviço.</span><span class="sxs-lookup"><span data-stu-id="c081c-182">Removes a subscription for a service type.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c081c-183"><paramref name="serviceType" /> ou <paramref name="callback" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c081c-183"><paramref name="serviceType" /> or <paramref name="callback" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Unsubscribe&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public void Unsubscribe&lt;TServiceType&gt; (System.Activities.Presentation.SubscribeServiceCallback&lt;TServiceType&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unsubscribe&lt;TServiceType&gt;(class System.Activities.Presentation.SubscribeServiceCallback`1&lt;!!TServiceType&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Unsubscribe``1(System.Activities.Presentation.SubscribeServiceCallback{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unsubscribe(Of TServiceType) (callback As SubscribeServiceCallback(Of TServiceType))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; void Unsubscribe(System::Activities::Presentation::SubscribeServiceCallback&lt;TServiceType&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Unsubscribe : System.Activities.Presentation.SubscribeServiceCallback&lt;'ServiceType&gt; -&gt; unit" Usage="serviceManager.Unsubscribe callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeServiceCallback&lt;TServiceType&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TServiceType"><span data-ttu-id="c081c-184">O tipo do serviço para remover a assinatura.</span><span class="sxs-lookup"><span data-stu-id="c081c-184">The type of the service to remove the subscription from.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="c081c-185">O objeto de retorno de chamada a ser removido da assinatura.</span><span class="sxs-lookup"><span data-stu-id="c081c-185">The callback object to remove from the subscription.</span></span></param>
        <summary><span data-ttu-id="c081c-186">Remove uma assinatura para um tipo de serviço.</span><span class="sxs-lookup"><span data-stu-id="c081c-186">Removes a subscription for a service type.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c081c-187"><paramref name="callback" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c081c-187"><paramref name="callback" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>