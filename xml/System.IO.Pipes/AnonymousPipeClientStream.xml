<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AnonymousPipeClientStream.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac558fff93e1a4bd2aab648e34c26bce216d9112d7a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">58fff93e1a4bd2aab648e34c26bce216d9112d7a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.Pipes.AnonymousPipeClientStream">
          <source>Exposes the client side of an anonymous pipe stream, which supports both synchronous and asynchronous read and write operations.</source>
          <target state="translated">Expõe o lado do cliente de um fluxo de pipe anônimo que dá suporte a operações de leitura e gravação síncronas e assíncronas.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeClientStream">
          <source>Anonymous pipes help provide safe and secure interprocess communication between child and parent processes.</source>
          <target state="translated">Pipes anônimos ajudam a fornecer segurança e proteger a comunicação entre processos entre pai e filho processos.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeClientStream">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream&gt;</ph> class enables a child process to connect to and exchange information with a parent process.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream&gt;</ph> classe permite que um processo filho conectar e trocar informações com um processo pai.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeClientStream">
          <source>Anonymous pipes are unnamed, one-way pipes that typically transfer data between parent and child processes.</source>
          <target state="translated">Pipes anônimos são pipes sem nome, unidirecionais que transferem dados entre processos pai e filho.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeClientStream">
          <source>Anonymous pipes are always local; they cannot be used over a network.</source>
          <target state="translated">Pipes anônimos sempre são locais; eles não podem ser usados em uma rede.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeClientStream">
          <source>A <ph id="ph1">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> value of <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection.InOut&gt;</ph> is not supported because anonymous pipes are defined to be one-way.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> valor <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection.InOut&gt;</ph> não é suportado porque pipes anônimos são definidos para serem unidirecional.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeClientStream">
          <source>Anonymous pipes do not support <ph id="ph1">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph> read modes.</source>
          <target state="translated">Pipes anônimos não suportam <ph id="ph1">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph> modos de leitura.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeClientStream">
          <source>The client side of an anonymous pipe must be created from a pipe handle provided by the server side by calling the <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString%2A&gt;</ph> method.</source>
          <target state="translated">Lado do cliente de um pipe anônimo deve ser criado de um identificador de pipe fornecido pelo lado do servidor chamando o <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeClientStream">
          <source>The string is then passed as a parameter when creating the client process.</source>
          <target state="translated">A cadeia de caracteres é então passada como um parâmetro ao criar o processo do cliente.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeClientStream">
          <source>From the client process, it is passed to the <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream&gt;</ph> constructor as the <ph id="ph2">`pipeHandleAsString`</ph> parameter.</source>
          <target state="translated">No processo de cliente, ele é passado para o <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream&gt;</ph> construtor como o <ph id="ph2">`pipeHandleAsString`</ph> parâmetro.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeClientStream">
          <source>For <ph id="ph1">[!INCLUDE[winxppro](~/includes/winxppro-md.md)]</ph> and <ph id="ph2">[!INCLUDE[win2kserver](~/includes/win2kserver-md.md)]</ph>, a maximum of 10 pipes can simultaneously connect over the network.</source>
          <target state="translated">Para <ph id="ph1">[!INCLUDE[winxppro](~/includes/winxppro-md.md)]</ph> e <ph id="ph2">[!INCLUDE[win2kserver](~/includes/win2kserver-md.md)]</ph>, um máximo de 10 pipes pode se conectar simultaneamente pela rede.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeClientStream">
          <source>The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes.</source>
          <target state="translated">O exemplo a seguir demonstra uma maneira de enviar uma cadeia de caracteres de um processo pai para um processo filho usando pipes anônimos.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeClientStream">
          <source>This example creates an <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> object in a parent process with a <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> value of <ph id="ph3">&lt;xref:System.IO.Pipes.PipeDirection.Out&gt;</ph>.</source>
          <target state="translated">Este exemplo cria um objeto <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> em um processo pai com um valor <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> de <ph id="ph3">&lt;xref:System.IO.Pipes.PipeDirection.Out&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeClientStream">
          <source>It also creates an <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream&gt;</ph> object in a child process with a <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> value of <ph id="ph3">&lt;xref:System.IO.Pipes.PipeDirection.In&gt;</ph>.</source>
          <target state="translated">Ele também cria um <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream&gt;</ph> objeto em um processo filho com um <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> valor <ph id="ph3">&lt;xref:System.IO.Pipes.PipeDirection.In&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeClientStream">
          <source>The parent process then sends a user-supplied string to the child process.</source>
          <target state="translated">Em seguida, o processo pai envia uma cadeia de caracteres fornecida pelo usuário ao processo filho.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeClientStream">
          <source>The string is displayed to the console.</source>
          <target state="translated">A cadeia de caracteres é exibida no console.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeClientStream">
          <source>This example is for the client process, which is started by the server process.</source>
          <target state="translated">Este exemplo é o processo de cliente, que é iniciado pelo processo de servidor.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeClientStream">
          <source>Name the resulting executable from the client code <ph id="ph1">`pipeClient.exe`</ph> and copy it to the same directory as the server executable when you run this example.</source>
          <target state="translated">Nome do executável resultante do código de cliente <ph id="ph1">`pipeClient.exe`</ph> e copie-o no mesmo diretório do executável do servidor quando você executa este exemplo.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeClientStream">
          <source>For the entire code example, including the code for both the pipe client and server, see <bpt id="p1">[</bpt>How to: Use Anonymous Pipes for Local Interprocess Communication<ept id="p1">](~/docs/standard/io/how-to-use-anonymous-pipes-for-local-interprocess-communication.md)</ept>.</source>
          <target state="translated">Para o exemplo de código inteiro, incluindo o código para o cliente de pipe e o servidor, consulte <bpt id="p1">[</bpt>como: Use o Pipes anônimos para comunicação Interprocess Local<ept id="p1">](~/docs/standard/io/how-to-use-anonymous-pipes-for-local-interprocess-communication.md)</ept>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="T:System.IO.Pipes.AnonymousPipeClientStream">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.String)">
          <source>A string that represents the pipe handle.</source>
          <target state="translated">Uma cadeia de caracteres que representa o identificador do pipe.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /&gt;</ph> class with the specified string representation of the pipe handle.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /&gt;</ph> com a representação especificada da cadeia de caracteres do identificador do pipe.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.String)">
          <source>For constructors without a <ph id="ph1">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> parameter, the default direction is <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection.In&gt;</ph>.</source>
          <target state="translated">Para construtores sem um <ph id="ph1">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> parâmetro, a direção padrão é <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection.In&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.String)">
          <source>The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes.</source>
          <target state="translated">O exemplo a seguir demonstra uma maneira de enviar uma cadeia de caracteres de um processo pai para um processo filho usando pipes anônimos.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.String)">
          <source>In this example, an <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream&gt;</ph> object is created in a child process.</source>
          <target state="translated">Neste exemplo, um <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream&gt;</ph> objeto é criado em um processo filho.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.String)">
          <source><ph id="ph1">&lt;paramref name="pipeHandleAsString" /&gt;</ph> is not a valid pipe handle.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="pipeHandleAsString" /&gt;</ph> não é um identificador de pipe válido.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">para confiança total do chamador imediato.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">Este membro não pode ser usado pelo código parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source>One of the enumeration values that determines the direction of the pipe.</source>
          <target state="translated">Um dos valores de enumeração que determinam a direção do pipe.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source>Anonymous pipes can only be in one direction, so <bpt id="p1">&lt;c&gt;</bpt>direction<ept id="p1">&lt;/c&gt;</ept> cannot be set to <ph id="ph1">&lt;see cref="F:System.IO.Pipes.PipeDirection.InOut" /&gt;</ph>.</source>
          <target state="translated">Pipes anônimos só podem estar em uma direção, então <bpt id="p1">&lt;c&gt;</bpt>direction<ept id="p1">&lt;/c&gt;</ept> não pode ser definida como <ph id="ph1">&lt;see cref="F:System.IO.Pipes.PipeDirection.InOut" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source>A safe handle for the pipe that this <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /&gt;</ph> object will encapsulate.</source>
          <target state="translated">Um identificador seguro para o arquivo que este objeto <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /&gt;</ph> encapsulará.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /&gt;</ph> class from the specified handle.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /&gt;</ph> do identificador especificado.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source>A <ph id="ph1">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> value of <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection.InOut&gt;</ph> is not supported because anonymous pipes are defined to be one-way.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> valor <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection.InOut&gt;</ph> não é suportado porque pipes anônimos são definidos para serem unidirecional.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source>The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes.</source>
          <target state="translated">O exemplo a seguir demonstra uma maneira de enviar uma cadeia de caracteres de um processo pai para um processo filho usando pipes anônimos.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source>In this example, an <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream&gt;</ph> object is created in a child process with a <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> value of <ph id="ph3">&lt;xref:System.IO.Pipes.PipeDirection.In&gt;</ph>.</source>
          <target state="translated">Neste exemplo, um <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream&gt;</ph> objeto é criado em um processo filho com um <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> valor <ph id="ph3">&lt;xref:System.IO.Pipes.PipeDirection.In&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source><ph id="ph1">&lt;paramref name="safePipeHandle" /&gt;</ph> is not a valid handle.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="safePipeHandle" /&gt;</ph> não é um identificador válido.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source><ph id="ph1">&lt;paramref name="safePipeHandle" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="safePipeHandle" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source><ph id="ph1">&lt;paramref name="direction" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="F:System.IO.Pipes.PipeDirection.InOut" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="direction" /&gt;</ph> é definido como <ph id="ph2">&lt;see cref="F:System.IO.Pipes.PipeDirection.InOut" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source>An I/O error, such as a disk error, has occurred.</source>
          <target state="translated">Ocorreu um erro de E/S, como um erro de disco.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source>The stream has been closed.</source>
          <target state="translated">O fluxo foi fechado.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">para confiança total do chamador imediato.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">Este membro não pode ser usado pelo código parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.String)">
          <source>One of the enumeration values that determines the direction of the pipe.</source>
          <target state="translated">Um dos valores de enumeração que determinam a direção do pipe.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.String)">
          <source>Anonymous pipes can only be in one direction, so <bpt id="p1">&lt;c&gt;</bpt>direction<ept id="p1">&lt;/c&gt;</ept> cannot be set to <ph id="ph1">&lt;see cref="F:System.IO.Pipes.PipeDirection.InOut" /&gt;</ph>.</source>
          <target state="translated">Pipes anônimos só podem estar em uma direção, então <bpt id="p1">&lt;c&gt;</bpt>direction<ept id="p1">&lt;/c&gt;</ept> não pode ser definida como <ph id="ph1">&lt;see cref="F:System.IO.Pipes.PipeDirection.InOut" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.String)">
          <source>A string that represents the pipe handle.</source>
          <target state="translated">Uma cadeia de caracteres que representa o identificador do pipe.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /&gt;</ph> class with the specified pipe direction and a string representation of the pipe handle.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /&gt;</ph> com a direção do pipe especificada e uma representação de cadeia de caracteres do identificador do pipe.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.String)">
          <source>A <ph id="ph1">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> value of <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection.InOut&gt;</ph> is not supported because anonymous pipes are defined to be one-way.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> valor <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection.InOut&gt;</ph> não é suportado porque pipes anônimos são definidos para serem unidirecional.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.String)">
          <source>The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes.</source>
          <target state="translated">O exemplo a seguir demonstra uma maneira de enviar uma cadeia de caracteres de um processo pai para um processo filho usando pipes anônimos.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.String)">
          <source>In this example, an <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream&gt;</ph> object is created in a child process with a <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> value of <ph id="ph3">&lt;xref:System.IO.Pipes.PipeDirection.In&gt;</ph>.</source>
          <target state="translated">Neste exemplo, um <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream&gt;</ph> objeto é criado em um processo filho com um <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> valor <ph id="ph3">&lt;xref:System.IO.Pipes.PipeDirection.In&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.String)">
          <source><ph id="ph1">&lt;paramref name="pipeHandleAsString" /&gt;</ph> is an invalid handle.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="pipeHandleAsString" /&gt;</ph> é um identificador inválido.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.String)">
          <source><ph id="ph1">&lt;paramref name="pipeHandleAsString" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="pipeHandleAsString" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.String)">
          <source><ph id="ph1">&lt;paramref name="direction" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="F:System.IO.Pipes.PipeDirection.InOut" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="direction" /&gt;</ph> é definido como <ph id="ph2">&lt;see cref="F:System.IO.Pipes.PipeDirection.InOut" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">para confiança total do chamador imediato.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">Este membro não pode ser usado pelo código parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeClientStream.Finalize">
          <source>Releases unmanaged resources and performs other cleanup operations before the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /&gt;</ph> instance is reclaimed by garbage collection.</source>
          <target state="translated">Libera recursos não gerenciados e executa outras operações de limpeza antes que a instância <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /&gt;</ph> seja recuperada pela coleta de lixo.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.AnonymousPipeClientStream.ReadMode">
          <source>Sets the reading mode for the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /&gt;</ph> object.</source>
          <target state="translated">Define o modo de leitura para o objeto <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.AnonymousPipeClientStream.ReadMode">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /&gt;</ph> object.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> para o <ph id="ph2">&lt;see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.AnonymousPipeClientStream.ReadMode">
          <source>Anonymous pipes do not support <ph id="ph1">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph> read mode.</source>
          <target state="translated">Pipes anônimos não suportam <ph id="ph1">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph> o modo de leitura.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.AnonymousPipeClientStream.ReadMode">
          <source>The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes.</source>
          <target state="translated">O exemplo a seguir demonstra uma maneira de enviar uma cadeia de caracteres de um processo pai para um processo filho usando pipes anônimos.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.AnonymousPipeClientStream.ReadMode">
          <source>In this example, an <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream&gt;</ph> object is created in a child process.</source>
          <target state="translated">Neste exemplo, um <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream&gt;</ph> objeto é criado em um processo filho.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.AnonymousPipeClientStream.ReadMode">
          <source>The <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> is caught when the <ph id="ph2">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream.ReadMode%2A&gt;</ph> property is set to <ph id="ph3">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> é detectado quando o <ph id="ph2">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream.ReadMode%2A&gt;</ph> está definida como <ph id="ph3">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.AnonymousPipeClientStream.ReadMode">
          <source>The transmission mode is not valid.</source>
          <target state="translated">O modo de transmissão não é válido.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.AnonymousPipeClientStream.ReadMode">
          <source>For anonymous pipes, only <ph id="ph1">&lt;see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" /&gt;</ph> is supported.</source>
          <target state="translated">Para pipes anônimos, apenas <ph id="ph1">&lt;see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" /&gt;</ph> tem suporte.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.AnonymousPipeClientStream.ReadMode">
          <source>The transmission mode is <ph id="ph1">&lt;see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" /&gt;</ph>.</source>
          <target state="translated">O modo de transmissão é <ph id="ph1">&lt;see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.AnonymousPipeClientStream.ReadMode">
          <source>The connection is broken or another I/O error occurs.</source>
          <target state="translated">A conexão está interrompida ou ocorreu outro erro de E/S.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.AnonymousPipeClientStream.ReadMode">
          <source>The pipe is closed.</source>
          <target state="translated">O pipe está fechado.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode">
          <source>Gets the pipe transmission mode supported by the current pipe.</source>
          <target state="translated">Obtém o modo de transmissão de pipe para o qual o pipe atual dá suporte.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> supported by the current pipe.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> com suporte o pipe atual.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode">
          <source>Anonymous pipes do not support <ph id="ph1">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph> read mode.</source>
          <target state="translated">Pipes anônimos não suportam <ph id="ph1">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph> o modo de leitura.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode">
          <source>The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes.</source>
          <target state="translated">O exemplo a seguir demonstra uma maneira de enviar uma cadeia de caracteres de um processo pai para um processo filho usando pipes anônimos.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode">
          <source>In this example, an <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream&gt;</ph> object is created in a child process and the <ph id="ph2">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode%2A&gt;</ph> is displayed to the console.</source>
          <target state="translated">Neste exemplo, um <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream&gt;</ph> objeto é criado em um processo filho e o <ph id="ph2">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode%2A&gt;</ph> é exibido no console.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>