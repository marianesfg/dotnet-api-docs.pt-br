<Type Name="X509CertificateRecipientClientCredential" FullName="System.ServiceModel.Security.X509CertificateRecipientClientCredential">
  <Metadata><Meta Name="ms.openlocfilehash" Value="10f303a816be73ab67a475c37e0e457935eb186b" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39730913" /></Metadata><TypeSignature Language="C#" Value="public sealed class X509CertificateRecipientClientCredential" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit X509CertificateRecipientClientCredential extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Security.X509CertificateRecipientClientCredential" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class X509CertificateRecipientClientCredential" />
  <TypeSignature Language="C++ CLI" Value="public ref class X509CertificateRecipientClientCredential sealed" />
  <TypeSignature Language="F#" Value="type X509CertificateRecipientClientCredential = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa as configurações usadas pelo cliente para validar o certificado apresentado pelo serviço usando a autenticação SSL. Também contém um certificado para o serviço que é explicitamente configurado no cliente a ser usado para criptografar mensagens para o serviço usando a segurança de mensagem.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa classe é usada pelo <xref:System.ServiceModel.Description.ClientCredentials.ServiceCertificate%2A> propriedade no <xref:System.ServiceModel.Description.ClientCredentials> classe.  
  
   
  
## Examples  
 Este código mostra uma maneira de criar uma instância dessa classe.  
  
 [!code-csharp[c_CreateSTS#18](~/samples/snippets/csharp/VS_Snippets_CFX/c_creatests/cs/source.cs#18)]
 [!code-vb[c_CreateSTS#18](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_creatests/vb/source.vb#18)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.ServiceModel.Description.ClientCredentials.ServiceCertificate" />
  </Docs>
  <Members>
    <Member MemberName="Authentication">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Security.X509ServiceCertificateAuthentication Authentication { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Security.X509ServiceCertificateAuthentication Authentication" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.X509CertificateRecipientClientCredential.Authentication" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Authentication As X509ServiceCertificateAuthentication" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Security::X509ServiceCertificateAuthentication ^ Authentication { System::ServiceModel::Security::X509ServiceCertificateAuthentication ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Authentication : System.ServiceModel.Security.X509ServiceCertificateAuthentication" Usage="System.ServiceModel.Security.X509CertificateRecipientClientCredential.Authentication" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.X509ServiceCertificateAuthentication</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém as configurações usadas para validar o certificado de serviço obtido usando autenticação SSL.</summary>
        <value>As configurações usadas para validar o certificado de serviço obtido usando autenticação SSL.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.ServiceModel.Security.X509ClientCertificateAuthentication> classe representa as configurações usadas pelo proxy do cliente para autenticar certificados de serviço que são obtidos usando negociação SSL/TLS.  
  
   
  
## Examples  
 Este código mostra como acessar essa propriedade.  
  
 [!code-csharp[c_CreateSTS#21](~/samples/snippets/csharp/VS_Snippets_CFX/c_creatests/cs/source.cs#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultCertificate">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X509Certificate2 DefaultCertificate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X509Certificate2 DefaultCertificate" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.X509CertificateRecipientClientCredential.DefaultCertificate" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultCertificate As X509Certificate2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::X509Certificates::X509Certificate2 ^ DefaultCertificate { System::Security::Cryptography::X509Certificates::X509Certificate2 ^ get(); void set(System::Security::Cryptography::X509Certificates::X509Certificate2 ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultCertificate : System.Security.Cryptography.X509Certificates.X509Certificate2 with get, set" Usage="System.ServiceModel.Security.X509CertificateRecipientClientCredential.DefaultCertificate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509Certificate2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o certificado padrão a ser usado para o serviço.</summary>
        <value>O certificado padrão a ser usado para o serviço.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para associações que usam a segurança de mensagens baseada em certificado, esse certificado é usado para criptografar mensagens para o serviço e deve ser usado pelo serviço para assinar respostas ao cliente.  
  
   
  
## Examples  
 Este código mostra como acessar essa propriedade.  
  
 [!code-csharp[c_CreateSTS#24](~/samples/snippets/csharp/VS_Snippets_CFX/c_creatests/cs/source.cs#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Tentativa de definir quando a credencial é somente leitura.</exception>
      </Docs>
    </Member>
    <Member MemberName="ScopedCertificates">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Dictionary&lt;Uri,System.Security.Cryptography.X509Certificates.X509Certificate2&gt; ScopedCertificates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.Dictionary`2&lt;class System.Uri, class System.Security.Cryptography.X509Certificates.X509Certificate2&gt; ScopedCertificates" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.X509CertificateRecipientClientCredential.ScopedCertificates" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ScopedCertificates As Dictionary(Of Uri, X509Certificate2)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::Dictionary&lt;Uri ^, System::Security::Cryptography::X509Certificates::X509Certificate2 ^&gt; ^ ScopedCertificates { System::Collections::Generic::Dictionary&lt;Uri ^, System::Security::Cryptography::X509Certificates::X509Certificate2 ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ScopedCertificates : System.Collections.Generic.Dictionary&lt;Uri, System.Security.Cryptography.X509Certificates.X509Certificate2&gt;" Usage="System.ServiceModel.Security.X509CertificateRecipientClientCredential.ScopedCertificates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;System.Uri,System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um certificado com escopo para usar para representar o serviço com o qual o cliente está se comunicando.</summary>
        <value>Um certificado com escopo definido para usar para representar o serviço que o cliente está se comunicando com.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade permite que o cliente configurar o certificado de serviço para usar com base na URL do serviço comunica-se com. Isso é especialmente útil em cenários de token emitidos em que um cliente pode estar se comunicando a vários serviços (o serviço end como serviços de token de segurança intermediário). Para associações que usam a segurança de mensagem baseada em certificado, esse certificado é usado para criptografar mensagens para o serviço e deve ser usado pelo serviço para assinar respostas ao cliente.  
  
 Se uma associação requer um certificado para o serviço e nenhum certificado específico para a URL do serviço é encontrado no `ScopedCertificates`, o certificado padrão é usado.  
  
   
  
## Examples  
 Este código mostra como definir essa propriedade.  
  
 [!code-csharp[c_CreateSTS#33](~/samples/snippets/csharp/VS_Snippets_CFX/c_creatests/cs/source.cs#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Tentativa de definir quando a credencial é somente leitura.</exception>
        <altmember cref="P:System.ServiceModel.Security.X509CertificateRecipientClientCredential.DefaultCertificate" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetDefaultCertificate">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Especifica o certificado padrão a ser usado para o serviço.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esses métodos de obtenham um certificado do repositório no local especificado que corresponde aos parâmetros especificados.  
  
 Para associações que usam a segurança de mensagens baseada em certificado, esse certificado é usado para criptografar mensagens para o serviço e deve ser usado pelo serviço para assinar respostas ao cliente.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceModel.Security.X509CertificateRecipientClientCredential.DefaultCertificate" />
      </Docs>
    </MemberGroup>
    <Member MemberName="SetDefaultCertificate">
      <MemberSignature Language="C#" Value="public void SetDefaultCertificate (string subjectName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.StoreName storeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDefaultCertificate(string subjectName, valuetype System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, valuetype System.Security.Cryptography.X509Certificates.StoreName storeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetDefaultCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDefaultCertificate(System::String ^ subjectName, System::Security::Cryptography::X509Certificates::StoreLocation storeLocation, System::Security::Cryptography::X509Certificates::StoreName storeName);" />
      <MemberSignature Language="F#" Value="member this.SetDefaultCertificate : string * System.Security.Cryptography.X509Certificates.StoreLocation * System.Security.Cryptography.X509Certificates.StoreName -&gt; unit" Usage="x509CertificateRecipientClientCredential.SetDefaultCertificate (subjectName, storeLocation, storeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subjectName" Type="System.String" />
        <Parameter Name="storeLocation" Type="System.Security.Cryptography.X509Certificates.StoreLocation" />
        <Parameter Name="storeName" Type="System.Security.Cryptography.X509Certificates.StoreName" />
      </Parameters>
      <Docs>
        <param name="subjectName">O nome diferenciado da entidade.</param>
        <param name="storeLocation">O local do repositório de certificados usado pelo serviço para obter o certificado de serviço.</param>
        <param name="storeName">O nome do repositório de certificados X.509 a abrir.</param>
        <summary>Especifica o certificado padrão a ser usado para o serviço. Para associações que usam a segurança de mensagens baseada em certificado, esse certificado é usado para criptografar mensagens para o serviço e deve ser usado pelo serviço para assinar respostas ao cliente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método obtém um certificado do armazenamento no local especificado que corresponde a `subjectName` parâmetro.  
  
 Os valores para `storeLocation` estão incluídos no <xref:System.Security.Cryptography.X509Certificates.StoreLocation> enumeração:  
  
-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>: o repositório de certificados atribuído ao computador local.  
  
-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>: o repositório de certificados usado pelo usuário atual (padrão).  
  
 Se o aplicativo é executado sob uma conta do sistema, o certificado é normalmente em <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>. Se o aplicativo é executado sob uma conta de usuário, o certificado é normalmente em <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>.  
  
 Os valores para `storeName` estão incluídos no <xref:System.Security.Cryptography.X509Certificates.StoreName> enumeração.  
  
   
  
## Examples  
 O código a seguir usa esse método para especificar um certificado X.509 a ser usado.  
  
 [!code-csharp[c_CreateSTS#23](~/samples/snippets/csharp/VS_Snippets_CFX/c_creatests/cs/source.cs#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="subjectName" /> é <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Tentativa de definir quando a credencial é somente leitura.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetDefaultCertificate">
      <MemberSignature Language="C#" Value="public void SetDefaultCertificate (System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.StoreName storeName, System.Security.Cryptography.X509Certificates.X509FindType findType, object findValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDefaultCertificate(valuetype System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, valuetype System.Security.Cryptography.X509Certificates.StoreName storeName, valuetype System.Security.Cryptography.X509Certificates.X509FindType findType, object findValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetDefaultCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDefaultCertificate(System::Security::Cryptography::X509Certificates::StoreLocation storeLocation, System::Security::Cryptography::X509Certificates::StoreName storeName, System::Security::Cryptography::X509Certificates::X509FindType findType, System::Object ^ findValue);" />
      <MemberSignature Language="F#" Value="member this.SetDefaultCertificate : System.Security.Cryptography.X509Certificates.StoreLocation * System.Security.Cryptography.X509Certificates.StoreName * System.Security.Cryptography.X509Certificates.X509FindType * obj -&gt; unit" Usage="x509CertificateRecipientClientCredential.SetDefaultCertificate (storeLocation, storeName, findType, findValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storeLocation" Type="System.Security.Cryptography.X509Certificates.StoreLocation" />
        <Parameter Name="storeName" Type="System.Security.Cryptography.X509Certificates.StoreName" />
        <Parameter Name="findType" Type="System.Security.Cryptography.X509Certificates.X509FindType" />
        <Parameter Name="findValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="storeLocation">O local do repositório de certificados usado pelo serviço para obter o certificado de serviço.</param>
        <param name="storeName">O nome do repositório de certificados X.509 a abrir.</param>
        <param name="findType">O tipo de pesquisa de X.509 a ser executada.</param>
        <param name="findValue">O valor a ser pesquisado no repositório de certificados X.509.</param>
        <summary>Especifica o certificado padrão a ser usado para o serviço. Para associações que usam a segurança de mensagens baseada em certificado, esse certificado é usado para criptografar mensagens para o serviço e deve ser usado pelo serviço para assinar respostas ao cliente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método obtém um certificado do armazenamento no local especificado que corresponde a `findType` e `findValue` parâmetros.  
  
 Os valores para `storeLocation` estão incluídos no <xref:System.Security.Cryptography.X509Certificates.StoreLocation> enumeração:  
  
-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>: o repositório de certificados atribuído ao computador local.  
  
-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>: o repositório de certificados usado pelo usuário atual (padrão).  
  
 Se o aplicativo é executado sob uma conta do sistema, o certificado é normalmente em <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>. Se o aplicativo é executado sob uma conta de usuário, o certificado é normalmente em <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>.  
  
 Os valores para `storeName` estão incluídos no <xref:System.Security.Cryptography.X509Certificates.StoreName> enumeração.  
  
 Os valores para `findType` estão incluídos no <xref:System.Security.Cryptography.X509Certificates.X509FindType> enumeração.  
  
 A enumeração mais comumente usada é <xref:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName>, que faz uma pesquisa diferencia maiusculas de minúsculas no nome do assunto dos certificados no repositório especificado. Isso pode ser uma pesquisa imprecisa. Se nenhum certificado ou vários certificados que correspondem aos critérios forem encontrados, uma <xref:System.InvalidOperationException> é gerada.  
  
   
  
## Examples  
 O código a seguir usa esse método para especificar um certificado X.509 a ser usado.  
  
 [!code-csharp[c_CreateSTS#22](~/samples/snippets/csharp/VS_Snippets_CFX/c_creatests/cs/source.cs#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="findValue" /> é <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Tentativa de definir quando a credencial é somente leitura.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetScopedCertificate">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Define um certificado de um repositório e o armazena em uma coleção indexada por URL que define o escopo.</summary>
        <altmember cref="P:System.ServiceModel.Security.X509CertificateRecipientClientCredential.ScopedCertificates" />
      </Docs>
    </MemberGroup>
    <Member MemberName="SetScopedCertificate">
      <MemberSignature Language="C#" Value="public void SetScopedCertificate (string subjectName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.StoreName storeName, Uri targetService);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetScopedCertificate(string subjectName, valuetype System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, valuetype System.Security.Cryptography.X509Certificates.StoreName storeName, class System.Uri targetService) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetScopedCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetScopedCertificate(System::String ^ subjectName, System::Security::Cryptography::X509Certificates::StoreLocation storeLocation, System::Security::Cryptography::X509Certificates::StoreName storeName, Uri ^ targetService);" />
      <MemberSignature Language="F#" Value="member this.SetScopedCertificate : string * System.Security.Cryptography.X509Certificates.StoreLocation * System.Security.Cryptography.X509Certificates.StoreName * Uri -&gt; unit" Usage="x509CertificateRecipientClientCredential.SetScopedCertificate (subjectName, storeLocation, storeName, targetService)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subjectName" Type="System.String" />
        <Parameter Name="storeLocation" Type="System.Security.Cryptography.X509Certificates.StoreLocation" />
        <Parameter Name="storeName" Type="System.Security.Cryptography.X509Certificates.StoreName" />
        <Parameter Name="targetService" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="subjectName">O nome totalmente qualificado da entidade.</param>
        <param name="storeLocation">O local do repositório de certificados usado pelo serviço para obter o certificado de serviço.</param>
        <param name="storeName">O nome do repositório de certificados X.509 a abrir.</param>
        <param name="targetService">A URL que define o escopo.</param>
        <summary>Define um certificado pelo nome da entidade, local do repositório de certificados e nome do repositório de certificados e o armazena em uma coleção a ser usada pela URL que define o escopo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os valores para `storeLocation` estão incluídos no <xref:System.Security.Cryptography.X509Certificates.StoreLocation> enumeração:  
  
-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>: o repositório de certificados atribuído ao computador local.  
  
-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>: o repositório de certificados usado pelo usuário atual (padrão).  
  
 Se o aplicativo é executado sob uma conta do sistema, o certificado é normalmente em <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>. Se o aplicativo é executado sob uma conta de usuário, o certificado é normalmente em <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>.  
  
 Os valores para `storeName` estão incluídos no <xref:System.Security.Cryptography.X509Certificates.StoreName> enumeração.  
  
   
  
## Examples  
 Este código mostra como chamar esse método.  
  
 [!code-csharp[c_CreateSTS#25](~/samples/snippets/csharp/VS_Snippets_CFX/c_creatests/cs/source.cs#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetService" /> é <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Tentativa de definir quando a credencial é somente leitura.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetScopedCertificate">
      <MemberSignature Language="C#" Value="public void SetScopedCertificate (System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.StoreName storeName, System.Security.Cryptography.X509Certificates.X509FindType findType, object findValue, Uri targetService);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetScopedCertificate(valuetype System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, valuetype System.Security.Cryptography.X509Certificates.StoreName storeName, valuetype System.Security.Cryptography.X509Certificates.X509FindType findType, object findValue, class System.Uri targetService) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetScopedCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetScopedCertificate(System::Security::Cryptography::X509Certificates::StoreLocation storeLocation, System::Security::Cryptography::X509Certificates::StoreName storeName, System::Security::Cryptography::X509Certificates::X509FindType findType, System::Object ^ findValue, Uri ^ targetService);" />
      <MemberSignature Language="F#" Value="member this.SetScopedCertificate : System.Security.Cryptography.X509Certificates.StoreLocation * System.Security.Cryptography.X509Certificates.StoreName * System.Security.Cryptography.X509Certificates.X509FindType * obj * Uri -&gt; unit" Usage="x509CertificateRecipientClientCredential.SetScopedCertificate (storeLocation, storeName, findType, findValue, targetService)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storeLocation" Type="System.Security.Cryptography.X509Certificates.StoreLocation" />
        <Parameter Name="storeName" Type="System.Security.Cryptography.X509Certificates.StoreName" />
        <Parameter Name="findType" Type="System.Security.Cryptography.X509Certificates.X509FindType" />
        <Parameter Name="findValue" Type="System.Object" />
        <Parameter Name="targetService" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="storeLocation">O local do repositório de certificados usado pelo serviço para obter o certificado de serviço.</param>
        <param name="storeName">O nome do repositório de certificados X.509 a abrir.</param>
        <param name="findType">O tipo de pesquisa de X.509 a ser executada.</param>
        <param name="findValue">O valor a ser pesquisado no repositório de certificados X.509.</param>
        <param name="targetService">A URL que define o escopo.</param>
        <summary>Define um certificado pelo local do repositório de certificados, pelo nome do repositório de certificados, pelo tipo de pesquisa X.509 e pelo valor a pesquisar e o armazena em uma coleção a ser usada para a URL que define o escopo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os valores para `storeLocation` estão incluídos no <xref:System.Security.Cryptography.X509Certificates.StoreLocation> enumeração:  
  
-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>: o repositório de certificados atribuído ao computador local.  
  
-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>: o repositório de certificados usado pelo usuário atual (padrão).  
  
 Se o aplicativo é executado sob uma conta do sistema, o certificado é normalmente em <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>. Se o aplicativo é executado sob uma conta de usuário, o certificado é normalmente em <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>.  
  
 Os valores para `storeName` estão incluídos no <xref:System.Security.Cryptography.X509Certificates.StoreName> enumeração.  
  
 Os valores para `findType` estão incluídos no <xref:System.Security.Cryptography.X509Certificates.X509FindType> enumeração.  
  
 A enumeração mais comumente usada é <xref:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName>, que faz uma pesquisa diferencia maiusculas de minúsculas no nome do assunto dos certificados no repositório especificado. Isso pode ser uma pesquisa imprecisa. Se nenhum certificado ou vários certificados que correspondem aos critérios forem encontrados, um <xref:System.InvalidOperationException> será lançada.  
  
   
  
## Examples  
 Este código mostra como chamar esse método.  
  
 [!code-csharp[c_CreateSTS#20](~/samples/snippets/csharp/VS_Snippets_CFX/c_creatests/cs/source.cs#20)]
 [!code-vb[c_CreateSTS#20](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_creatests/vb/source.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetService" /> é <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Tentativa de definir quando a credencial é somente leitura.</exception>
      </Docs>
    </Member>
    <Member MemberName="SslCertificateAuthentication">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Security.X509ServiceCertificateAuthentication SslCertificateAuthentication { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Security.X509ServiceCertificateAuthentication SslCertificateAuthentication" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.X509CertificateRecipientClientCredential.SslCertificateAuthentication" />
      <MemberSignature Language="VB.NET" Value="Public Property SslCertificateAuthentication As X509ServiceCertificateAuthentication" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Security::X509ServiceCertificateAuthentication ^ SslCertificateAuthentication { System::ServiceModel::Security::X509ServiceCertificateAuthentication ^ get(); void set(System::ServiceModel::Security::X509ServiceCertificateAuthentication ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SslCertificateAuthentication : System.ServiceModel.Security.X509ServiceCertificateAuthentication with get, set" Usage="System.ServiceModel.Security.X509CertificateRecipientClientCredential.SslCertificateAuthentication" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.X509ServiceCertificateAuthentication</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o validador de certificado SSL a usar.</summary>
        <value>Uma instância de <see cref="T:System.ServiceModel.Security.X509ServiceCertificateAuthentication" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade permite que você use WCF X509CertificateValidator para validar um certificado de servidor em um cliente WCF.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>