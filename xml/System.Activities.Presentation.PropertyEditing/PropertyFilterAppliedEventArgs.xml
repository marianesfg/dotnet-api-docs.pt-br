<Type Name="PropertyFilterAppliedEventArgs" FullName="System.Activities.Presentation.PropertyEditing.PropertyFilterAppliedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a54fdd5127ec112d3a604bee0ed24a6b690e16b0" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36653074" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PropertyFilterAppliedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PropertyFilterAppliedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.PropertyEditing.PropertyFilterAppliedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class PropertyFilterAppliedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyFilterAppliedEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type PropertyFilterAppliedEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Argumentos de evento que são usados para executar um processo de evento quando um <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> foi aplicado a uma propriedade de destino.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyFilterAppliedEventArgs (System.Activities.Presentation.PropertyEditing.PropertyFilter filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Presentation.PropertyEditing.PropertyFilter filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.PropertyEditing.PropertyFilterAppliedEventArgs.#ctor(System.Activities.Presentation.PropertyEditing.PropertyFilter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filter As PropertyFilter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyFilterAppliedEventArgs(System::Activities::Presentation::PropertyEditing::PropertyFilter ^ filter);" />
      <MemberSignature Language="F#" Value="new System.Activities.Presentation.PropertyEditing.PropertyFilterAppliedEventArgs : System.Activities.Presentation.PropertyEditing.PropertyFilter -&gt; System.Activities.Presentation.PropertyEditing.PropertyFilterAppliedEventArgs" Usage="new System.Activities.Presentation.PropertyEditing.PropertyFilterAppliedEventArgs filter" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filter" Type="System.Activities.Presentation.PropertyEditing.PropertyFilter" />
      </Parameters>
      <Docs>
        <param name="filter">O <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> que é aplicado.</param>
        <summary>Cria uma nova instância da classe <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilterAppliedEventArgs" /> sem o filtro especificado aplicado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public System.Activities.Presentation.PropertyEditing.PropertyFilter Filter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Presentation.PropertyEditing.PropertyFilter Filter" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.PropertyEditing.PropertyFilterAppliedEventArgs.Filter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Filter As PropertyFilter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Presentation::PropertyEditing::PropertyFilter ^ Filter { System::Activities::Presentation::PropertyEditing::PropertyFilter ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Activities.Presentation.PropertyEditing.PropertyFilter" Usage="System.Activities.Presentation.PropertyEditing.PropertyFilterAppliedEventArgs.Filter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Presentation.PropertyEditing.PropertyFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> que é aplicado a uma propriedade de destino.</summary>
        <value>O filtro de propriedade que é aplicado.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>