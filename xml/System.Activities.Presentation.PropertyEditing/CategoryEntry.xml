<Type Name="CategoryEntry" FullName="System.Activities.Presentation.PropertyEditing.CategoryEntry">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="39bb0d898b8288993c36c16cb68b54ebb15bff45" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39921794" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class CategoryEntry : System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget, System.ComponentModel.INotifyPropertyChanged" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CategoryEntry extends System.Object implements class System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget, class System.ComponentModel.INotifyPropertyChanged" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.PropertyEditing.CategoryEntry" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CategoryEntry&#xA;Implements INotifyPropertyChanged, IPropertyFilterTarget" />
  <TypeSignature Language="C++ CLI" Value="public ref class CategoryEntry abstract : System::Activities::Presentation::PropertyEditing::IPropertyFilterTarget, System::ComponentModel::INotifyPropertyChanged" />
  <TypeSignature Language="F#" Value="type CategoryEntry = class&#xA;    interface INotifyPropertyChanged&#xA;    interface IPropertyFilterTarget" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.INotifyPropertyChanged</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Modela uma Categoria, que consiste em um nome localizado e uma coleção de propriedades.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CategoryEntry (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.PropertyEditing.CategoryEntry.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CategoryEntry(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Activities.Presentation.PropertyEditing.CategoryEntry : string -&gt; System.Activities.Presentation.PropertyEditing.CategoryEntry" Usage="new System.Activities.Presentation.PropertyEditing.CategoryEntry name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">O nome da Categoria localizado de um grupo de propriedades.</param>
        <summary>Cria uma nova instância da classe <see cref="T:System.Activities.Presentation.PropertyEditing.CategoryEntry" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> é <see langword="empty" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ApplyFilter">
      <MemberSignature Language="C#" Value="public virtual void ApplyFilter (System.Activities.Presentation.PropertyEditing.PropertyFilter filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyFilter(class System.Activities.Presentation.PropertyEditing.PropertyFilter filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.PropertyEditing.CategoryEntry.ApplyFilter(System.Activities.Presentation.PropertyEditing.PropertyFilter)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ApplyFilter (filter As PropertyFilter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyFilter(System::Activities::Presentation::PropertyEditing::PropertyFilter ^ filter);" />
      <MemberSignature Language="F#" Value="abstract member ApplyFilter : System.Activities.Presentation.PropertyEditing.PropertyFilter -&gt; unit&#xA;override this.ApplyFilter : System.Activities.Presentation.PropertyEditing.PropertyFilter -&gt; unit" Usage="categoryEntry.ApplyFilter filter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget.ApplyFilter(System.Activities.Presentation.PropertyEditing.PropertyFilter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Activities.Presentation.PropertyEditing.PropertyFilter" />
      </Parameters>
      <Docs>
        <param name="filter">O <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> que está sendo aplicado.</param>
        <summary>Define um novo filtro de propriedade.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a categoria corresponde ao filtro especificado, o <xref:System.Activities.Presentation.PropertyEditing.CategoryEntry.FilterApplied> é gerado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CategoryName">
      <MemberSignature Language="C#" Value="public string CategoryName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryName" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.PropertyEditing.CategoryEntry.CategoryName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CategoryName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CategoryName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CategoryName : string" Usage="System.Activities.Presentation.PropertyEditing.CategoryEntry.CategoryName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o nome da Categoria localizada.</summary>
        <value>O nome localizado da categoria.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterApplied">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Activities.Presentation.PropertyEditing.PropertyFilterAppliedEventArgs&gt; FilterApplied;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Activities.Presentation.PropertyEditing.PropertyFilterAppliedEventArgs&gt; FilterApplied" />
      <MemberSignature Language="DocId" Value="E:System.Activities.Presentation.PropertyEditing.CategoryEntry.FilterApplied" />
      <MemberSignature Language="VB.NET" Value="Public Event FilterApplied As EventHandler(Of PropertyFilterAppliedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler&lt;System::Activities::Presentation::PropertyEditing::PropertyFilterAppliedEventArgs ^&gt; ^ FilterApplied;" />
      <MemberSignature Language="F#" Value="member this.FilterApplied : EventHandler&lt;System.Activities.Presentation.PropertyEditing.PropertyFilterAppliedEventArgs&gt; " Usage="member this.FilterApplied : System.EventHandler&lt;System.Activities.Presentation.PropertyEditing.PropertyFilterAppliedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget.FilterApplied</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Activities.Presentation.PropertyEditing.PropertyFilterAppliedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Declara o evento de <see cref="T:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public abstract System.Activities.Presentation.PropertyEditing.PropertyEntry this[string propertyName] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Presentation.PropertyEditing.PropertyEntry Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.PropertyEditing.CategoryEntry.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public MustOverride ReadOnly Property Item(propertyName As String) As PropertyEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Activities::Presentation::PropertyEditing::PropertyEntry ^ default[System::String ^] { System::Activities::Presentation::PropertyEditing::PropertyEntry ^ get(System::String ^ propertyName); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : System.Activities.Presentation.PropertyEditing.PropertyEntry" Usage="System.Activities.Presentation.PropertyEditing.CategoryEntry.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Presentation.PropertyEditing.PropertyEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">O nome da propriedade de cadeia de caracteres para a qual retornar uma instância de propriedade.</param>
        <summary>Retorna uma instância de propriedade deste objeto de <see cref="System.Activities.Presentation.PropertyEditing.CategoryEntry" />, considerando o nome da propriedade.</summary>
        <value>A propriedade correspondente ao parâmetro de nome de propriedade, se uma existe; Caso contrário, <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchesFilter">
      <MemberSignature Language="C#" Value="public virtual bool MatchesFilter { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MatchesFilter" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.PropertyEditing.CategoryEntry.MatchesFilter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property MatchesFilter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:  virtual property bool MatchesFilter {  public:&#xA;bool get(); protected:&#xA; void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.MatchesFilter : bool with get, set" Usage="System.Activities.Presentation.PropertyEditing.CategoryEntry.MatchesFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se <see cref="T:System.Activities.Presentation.PropertyEditing.CategoryEntry" /> corresponde a um filtro.</summary>
        <value>
          <see langword="true" /> Se um filtro for igual ao filtro especificado; Caso contrário, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchesPredicate">
      <MemberSignature Language="C#" Value="public abstract bool MatchesPredicate (System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MatchesPredicate(class System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.PropertyEditing.CategoryEntry.MatchesPredicate(System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function MatchesPredicate (predicate As PropertyFilterPredicate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool MatchesPredicate(System::Activities::Presentation::PropertyEditing::PropertyFilterPredicate ^ predicate);" />
      <MemberSignature Language="F#" Value="abstract member MatchesPredicate : System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate -&gt; bool" Usage="categoryEntry.MatchesPredicate predicate" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget.MatchesPredicate(System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate" />
      </Parameters>
      <Docs>
        <param name="predicate">O <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate" />, uma cadeia de caracteres, ao qual ser comparado.</param>
        <summary>Indica se um <see cref="T:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget" /> corresponde a um predicado.</summary>
        <returns>
          <see langword="true" /> se houver uma correspondência; caso contrário, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnFilterApplied">
      <MemberSignature Language="C#" Value="protected virtual void OnFilterApplied (System.Activities.Presentation.PropertyEditing.PropertyFilter filter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFilterApplied(class System.Activities.Presentation.PropertyEditing.PropertyFilter filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.PropertyEditing.CategoryEntry.OnFilterApplied(System.Activities.Presentation.PropertyEditing.PropertyFilter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFilterApplied (filter As PropertyFilter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFilterApplied(System::Activities::Presentation::PropertyEditing::PropertyFilter ^ filter);" />
      <MemberSignature Language="F#" Value="abstract member OnFilterApplied : System.Activities.Presentation.PropertyEditing.PropertyFilter -&gt; unit&#xA;override this.OnFilterApplied : System.Activities.Presentation.PropertyEditing.PropertyFilter -&gt; unit" Usage="categoryEntry.OnFilterApplied filter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Activities.Presentation.PropertyEditing.PropertyFilter" />
      </Parameters>
      <Docs>
        <param name="filter">O <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> que está sendo aplicado.</param>
        <summary>Gera o evento de <see cref="E:System.Activities.Presentation.PropertyEditing.CategoryEntry.FilterApplied" /> quando o filtro da propriedade é aplicado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanged (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanged(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.PropertyEditing.CategoryEntry.OnPropertyChanged(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanged (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanged(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanged : string -&gt; unit&#xA;override this.OnPropertyChanged : string -&gt; unit" Usage="categoryEntry.OnPropertyChanged propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">O nome da propriedade que é modificada.</param>
        <summary>Aciona o evento <see cref="E:System.Activities.Presentation.PropertyEditing.CategoryEntry.PropertyChanged" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="propertyName" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerable&lt;System.Activities.Presentation.PropertyEditing.PropertyEntry&gt; Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Activities.Presentation.PropertyEditing.PropertyEntry&gt; Properties" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.PropertyEditing.CategoryEntry.Properties" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Properties As IEnumerable(Of PropertyEntry)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Collections::Generic::IEnumerable&lt;System::Activities::Presentation::PropertyEditing::PropertyEntry ^&gt; ^ Properties { System::Collections::Generic::IEnumerable&lt;System::Activities::Presentation::PropertyEditing::PropertyEntry ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Properties : seq&lt;System.Activities.Presentation.PropertyEditing.PropertyEntry&gt;" Usage="System.Activities.Presentation.PropertyEditing.CategoryEntry.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Activities.Presentation.PropertyEditing.PropertyEntry&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém uma coleção de <see cref="T:System.Collections.IEnumerable" /> de todas as propriedades na categoria.</summary>
        <value>Um <see cref="T:System.Collections.Generic.IEnumerable`1" />, uma coleção de todas as propriedades na categoria.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.PropertyChangedEventHandler PropertyChanged" />
      <MemberSignature Language="DocId" Value="E:System.Activities.Presentation.PropertyEditing.CategoryEntry.PropertyChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event PropertyChanged As PropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::ComponentModel::PropertyChangedEventHandler ^ PropertyChanged;" />
      <MemberSignature Language="F#" Value="member this.PropertyChanged : System.ComponentModel.PropertyChangedEventHandler " Usage="member this.PropertyChanged : System.ComponentModel.PropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Declara o evento de <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>