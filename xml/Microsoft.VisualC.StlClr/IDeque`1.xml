<Type Name="IDeque&lt;TValue&gt;" FullName="Microsoft.VisualC.StlClr.IDeque&lt;TValue&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5158995b076c8561cbdeaa5fd7e238748fbe8ecf" />
    <Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="11/09/2018" />
    <Meta Name="ms.locfileid" Value="51306936" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDeque&lt;TValue&gt; : ICloneable, Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer&lt;TValue&gt;, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IDeque`1&lt;TValue&gt; implements class Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1&lt;!TValue&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualC.StlClr.IDeque`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDeque(Of TValue)&#xA;Implements ICloneable, ICollection, IRandomAccessContainer(Of TValue)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TValue&gt;&#xA;public interface class IDeque : ICloneable, Microsoft::VisualC::StlClr::Generic::IRandomAccessContainer&lt;TValue&gt;, System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type IDeque&lt;'Value&gt; = interface&#xA;    interface IRandomAccessContainer&lt;'Value&gt;&#xA;    interface ICloneable&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TValue">O tipo que está contido.</typeparam>
    <summary>Define a interface de um objeto <c>deque</c> STL/CLR.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[unnamed_parm](~/includes/unnamed-parm-md.md)]  
  
 Para obter mais informações, consulte [deque (STL/CLR)](/cpp/dotnet/deque-stl-clr).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="assign">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Substitui todos os elementos do contêiner pelos elementos fornecidos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações, consulte [Assign (STL/CLR)](/cpp/dotnet/deque-assign-stl-clr).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="assign">
      <MemberSignature Language="C#" Value="public void assign (System.Collections.IEnumerable _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void assign(class System.Collections.IEnumerable _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.assign(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub assign (_Right As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void assign(System::Collections::IEnumerable ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member assign : System.Collections.IEnumerable -&gt; unit" Usage="iDeque.assign _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="_Right">A enumeração a ser inserida no contêiner.</param>
        <summary>Substitui todos os elementos do contêiner pelos elementos no objeto <see cref="T:System.Collections.IEnumerable" /> fornecido.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações, consulte [Assign (STL/CLR)](/cpp/dotnet/deque-assign-stl-clr).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="assign">
      <MemberSignature Language="C#" Value="public void assign (Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _First, Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _Last);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void assign(class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _First, class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _Last) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub assign (_First As IInputIterator(Of TValue), _Last As IInputIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void assign(Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _First, Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _Last);" />
      <MemberSignature Language="F#" Value="abstract member assign : Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; unit" Usage="iDeque.assign (_First, _Last)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_First" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
        <Parameter Name="_Last" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_First">A posição de início do intervalo a inserir no contêiner.</param>
        <param name="_Last">A primeira posição além do fim do intervalo a inserir no contêiner.</param>
        <summary>Substitui todos os elementos do contêiner pelos elementos especificados pelos objetos <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> fornecidos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações, consulte [Assign (STL/CLR)](/cpp/dotnet/deque-assign-stl-clr).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="assign">
      <MemberSignature Language="C#" Value="public void assign (int _Count, TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void assign(int32 _Count, !TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.assign(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub assign (_Count As Integer, _Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void assign(int _Count, TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member assign : int * 'Value -&gt; unit" Usage="iDeque.assign (_Count, _Val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Count" Type="System.Int32" />
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Count">O número de elementos a serem inseridos no contêiner.</param>
        <param name="_Val">O valor do elemento a ser inserido no contêiner.</param>
        <summary>Substitui todos os elementos do contêiner pelos número fornecido de elementos especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações, consulte [Assign (STL/CLR)](/cpp/dotnet/deque-assign-stl-clr).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="at">
      <MemberSignature Language="C#" Value="public TValue at (int _Pos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TValue at(int32 _Pos) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.at(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function at (_Pos As Integer) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TValue % at(int _Pos);" />
      <MemberSignature Language="F#" Value="abstract member at : int -&gt; " Usage="iDeque.at _Pos" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue@</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Pos" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="_Pos">Posição do elemento a acessar.</param>
        <summary>Acessa um elemento em uma posição especificada no contêiner.</summary>
        <returns>O elemento da sequência controlada na posição <paramref name="pos" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações, consulte [deque:: AT (STL/CLR)](/cpp/dotnet/deque-at-stl-clr).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="back">
      <MemberSignature Language="C#" Value="public TValue back ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TValue back() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.back" />
      <MemberSignature Language="VB.NET" Value="Public Function back () As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TValue % back();" />
      <MemberSignature Language="F#" Value="abstract member back : unit -&gt; " Usage="iDeque.back " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue@</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acessa o último elemento do contêiner.</summary>
        <returns>O último elemento da sequência controlada, que deve ser não vazia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações, consulte [deque:: back (STL/CLR)](/cpp/dotnet/deque-back-stl-clr).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="back_item">
      <MemberSignature Language="C#" Value="public TValue back_item { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue back_item" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualC.StlClr.IDeque`1.back_item" />
      <MemberSignature Language="VB.NET" Value="Public Property back_item As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue back_item { TValue get(); void set(TValue value); };" />
      <MemberSignature Language="F#" Value="member this.back_item : 'Value with get, set" Usage="Microsoft.VisualC.StlClr.IDeque&lt;'Value&gt;.back_item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Acessa o último elemento de uma coleção <c>deque</c> não vazia.</summary>
        <value>O último elemento da sequência controlada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações, consulte [deque::back_item (STL/CLR)](/cpp/dotnet/deque-back-item-stl-clr).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="begin">
      <MemberSignature Language="C#" Value="public void begin (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void begin(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function begin (ByRef  As ContainerRandomAccessIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ begin(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member begin :  -&gt; unit" Usage="iDeque.begin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">To be added.</param>
        <summary>Designa o início da sequência controlada.</summary>
        <returns>Um iterador.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações, consulte [deque (STL/CLR)](/cpp/dotnet/deque-begin-stl-clr).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="begin_bias">
      <MemberSignature Language="C#" Value="public int begin_bias ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 begin_bias() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.begin_bias" />
      <MemberSignature Language="VB.NET" Value="Public Function begin_bias () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int begin_bias();" />
      <MemberSignature Language="F#" Value="abstract member begin_bias : unit -&gt; int" Usage="iDeque.begin_bias " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtém o desvio do início da sequência atual. O desvio é o deslocamento do elemento zero atual.</summary>
        <returns>O desvio do início da sequência atual.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="clear">
      <MemberSignature Language="C#" Value="public void clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void clear();" />
      <MemberSignature Language="F#" Value="abstract member clear : unit -&gt; unit" Usage="iDeque.clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Remove todos os elementos no contêiner.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações, consulte [deque:: Clear (STL/CLR)](/cpp/dotnet/deque-clear-stl-clr).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="empty">
      <MemberSignature Language="C#" Value="public bool empty ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool empty() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.empty" />
      <MemberSignature Language="VB.NET" Value="Public Function empty () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool empty();" />
      <MemberSignature Language="F#" Value="abstract member empty : unit -&gt; bool" Usage="iDeque.empty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Testa se o contêiner não contém elementos.</summary>
        <returns>
          <see langword="true" /> se o contêiner estiver vazio; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações, consulte [deque:: Empty (STL/CLR)](/cpp/dotnet/deque-empty-stl-clr).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="end">
      <MemberSignature Language="C#" Value="public void end (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void end(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function end (ByRef  As ContainerRandomAccessIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ end(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member end :  -&gt; unit" Usage="iDeque.end " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">To be added.</param>
        <summary>Designa o fim da sequência controlada.</summary>
        <returns>Um iterador.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações, consulte [deque:: end (STL/CLR)](/cpp/dotnet/deque-end-stl-clr).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="end_bias">
      <MemberSignature Language="C#" Value="public int end_bias ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 end_bias() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.end_bias" />
      <MemberSignature Language="VB.NET" Value="Public Function end_bias () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int end_bias();" />
      <MemberSignature Language="F#" Value="abstract member end_bias : unit -&gt; int" Usage="iDeque.end_bias " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtém o desvio do fim da sequência atual. O desvio é o deslocamento do elemento zero atual.</summary>
        <returns>O desvio do fim da sequência atual.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="erase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Remove os elementos em posições especificadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações, consulte [Erase (STL/CLR)](/cpp/dotnet/deque-erase-stl-clr).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="erase">
      <MemberSignature Language="C#" Value="public void erase (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; , Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Where);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void erase(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt;&amp; , class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Where) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
      <MemberSignature Language="VB.NET" Value="Public Function erase (ByRef  As ContainerRandomAccessIterator(Of TValue), _Where As ContainerRandomAccessIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ erase(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ % , Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Where);" />
      <MemberSignature Language="F#" Value="abstract member erase :  * Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; -&gt; unit" Usage="iDeque.erase (, _Where)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="">To be added.</param>
        <param name="_Where">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="erase">
      <MemberSignature Language="C#" Value="public void erase (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; , Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _First_iter, Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Last_iter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void erase(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt;&amp; , class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _First_iter, class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Last_iter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
      <MemberSignature Language="VB.NET" Value="Public Function erase (ByRef  As ContainerRandomAccessIterator(Of TValue), _First_iter As ContainerRandomAccessIterator(Of TValue), _Last_iter As ContainerRandomAccessIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ erase(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ % , Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _First_iter, Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Last_iter);" />
      <MemberSignature Language="F#" Value="abstract member erase :  * Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; -&gt; unit" Usage="iDeque.erase (, _First_iter, _Last_iter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_First_iter" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
        <Parameter Name="_Last_iter" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="">To be added.</param>
        <param name="_First_iter">To be added.</param>
        <param name="_Last_iter">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="front">
      <MemberSignature Language="C#" Value="public TValue front ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TValue front() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.front" />
      <MemberSignature Language="VB.NET" Value="Public Function front () As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TValue % front();" />
      <MemberSignature Language="F#" Value="abstract member front : unit -&gt; " Usage="iDeque.front " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue@</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acessa o primeiro elemento do contêiner.</summary>
        <returns>O primeiro elemento da sequência controlada, que não pode ser vazia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações, consulte [deque (STL/CLR)](/cpp/dotnet/deque-front-stl-clr).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="front_item">
      <MemberSignature Language="C#" Value="public TValue front_item { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue front_item" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualC.StlClr.IDeque`1.front_item" />
      <MemberSignature Language="VB.NET" Value="Public Property front_item As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue front_item { TValue get(); void set(TValue value); };" />
      <MemberSignature Language="F#" Value="member this.front_item : 'Value with get, set" Usage="Microsoft.VisualC.StlClr.IDeque&lt;'Value&gt;.front_item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Acessa o primeiro elemento de uma coleção <c>deque</c> não vazia.</summary>
        <value>O primeiro elemento da sequência controlada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações, consulte [deque::front_item (STL/CLR)](/cpp/dotnet/deque-front-item-stl-clr).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="get_generation">
      <MemberSignature Language="C#" Value="public uint get_generation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.UInt32 modopt(System.Runtime.CompilerServices.IsLong) get_generation() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.get_generation" />
      <MemberSignature Language="VB.NET" Value="Public Function get_generation () As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::UInt32 get_generation();" />
      <MemberSignature Language="F#" Value="abstract member get_generation : unit -&gt; UInt32" Usage="iDeque.get_generation " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="insert">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Adiciona elementos a uma posição especificada no contêiner.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações, consulte [deque:: Insert (STL/CLR)](/cpp/dotnet/deque-insert-stl-clr).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Where_iter, System.Collections.IEnumerable _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void insert(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Where_iter, class System.Collections.IEnumerable _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub insert (_Where_iter As ContainerRandomAccessIterator(Of TValue), _Right As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void insert(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Where_iter, System::Collections::IEnumerable ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member insert : Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; * System.Collections.IEnumerable -&gt; unit" Usage="iDeque.insert (_Where_iter, _Right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where_iter" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
        <Parameter Name="_Right" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="_Where_iter">To be added.</param>
        <param name="_Right">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; , Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Where, TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void insert(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt;&amp; , class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Where, !TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function insert (ByRef  As ContainerRandomAccessIterator(Of TValue), _Where As ContainerRandomAccessIterator(Of TValue), _Val As TValue) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ insert(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ % , Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Where, TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member insert :  * Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; * 'Value -&gt; unit" Usage="iDeque.insert (, _Where, _Val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="">To be added.</param>
        <param name="_Where">To be added.</param>
        <param name="_Val">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Where, Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _First, Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _Last);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void insert(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Where, class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _First, class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _Last) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub insert (_Where As ContainerRandomAccessIterator(Of TValue), _First As IInputIterator(Of TValue), _Last As IInputIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void insert(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Where, Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _First, Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _Last);" />
      <MemberSignature Language="F#" Value="abstract member insert : Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; unit" Usage="iDeque.insert (_Where, _First, _Last)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
        <Parameter Name="_First" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
        <Parameter Name="_Last" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Where">To be added.</param>
        <param name="_First">To be added.</param>
        <param name="_Last">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Where, int _Count, TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void insert(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Where, int32 _Count, !TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub insert (_Where As ContainerRandomAccessIterator(Of TValue), _Count As Integer, _Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void insert(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Where, int _Count, TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member insert : Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; * int * 'Value -&gt; unit" Usage="iDeque.insert (_Where, _Count, _Val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
        <Parameter Name="_Count" Type="System.Int32" />
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Where">To be added.</param>
        <param name="_Count">To be added.</param>
        <param name="_Val">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TValue this[int _Pos] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue Item(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualC.StlClr.IDeque`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(_Pos As Integer) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue default[int] { TValue get(int _Pos); void set(int _Pos, TValue value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : 'Value with get, set" Usage="Microsoft.VisualC.StlClr.IDeque&lt;'Value&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Pos" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="_Pos">A posição do elemento a ser obtido ou definido.</param>
        <summary>Obtém ou define o elemento na posição indicada no contêiner.</summary>
        <value>O elemento na posição indicada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações, consulte [deque::operator(STL/CLR)](/cpp/dotnet/deque-operator-stl-clr).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="pop_back">
      <MemberSignature Language="C#" Value="public void pop_back ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void pop_back() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.pop_back" />
      <MemberSignature Language="VB.NET" Value="Public Sub pop_back ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void pop_back();" />
      <MemberSignature Language="F#" Value="abstract member pop_back : unit -&gt; unit" Usage="iDeque.pop_back " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Remove o último elemento de um contêiner não vazio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações, consulte [deque:: pop_back (STL/CLR)](/cpp/dotnet/deque-pop-back-stl-clr).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="pop_front">
      <MemberSignature Language="C#" Value="public void pop_front ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void pop_front() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.pop_front" />
      <MemberSignature Language="VB.NET" Value="Public Sub pop_front ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void pop_front();" />
      <MemberSignature Language="F#" Value="abstract member pop_front : unit -&gt; unit" Usage="iDeque.pop_front " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Remove o primeiro elemento de um contêiner não vazio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações, consulte [deque:: pop_front (STL/CLR)](/cpp/dotnet/deque-pop-front-stl-clr).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="push_back">
      <MemberSignature Language="C#" Value="public void push_back (TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void push_back(!TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.push_back(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub push_back (_Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void push_back(TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member push_back : 'Value -&gt; unit" Usage="iDeque.push_back _Val" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Val">O elemento a ser acrescentado ao final do contêiner.</param>
        <summary>Adiciona um elemento ao final de um contêiner.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações, consulte [push_back (STL/CLR)](/cpp/dotnet/deque-push-back-stl-clr).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="push_front">
      <MemberSignature Language="C#" Value="public void push_front (TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void push_front(!TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.push_front(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub push_front (_Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void push_front(TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member push_front : 'Value -&gt; unit" Usage="iDeque.push_front _Val" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Val">O elemento a ser adicionado ao início do contêiner.</param>
        <summary>Adiciona um elemento ao início de um contêiner.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações, consulte [push_front (STL/CLR)](/cpp/dotnet/deque-push-front-stl-clr).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="rbegin">
      <MemberSignature Language="C#" Value="public void rbegin (ref Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void rbegin(class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function rbegin (ByRef  As ReverseRandomAccessIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ rbegin(Microsoft::VisualC::StlClr::Generic::ReverseRandomAccessIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member rbegin :  -&gt; unit" Usage="iDeque.rbegin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">To be added.</param>
        <summary>Designa o início da sequência controlada invertida.</summary>
        <returns>Um iterador.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações, consulte [rbegin (STL/CLR)](/cpp/dotnet/deque-rbegin-stl-clr).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="rend">
      <MemberSignature Language="C#" Value="public void rend (ref Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void rend(class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function rend (ByRef  As ReverseRandomAccessIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ rend(Microsoft::VisualC::StlClr::Generic::ReverseRandomAccessIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member rend :  -&gt; unit" Usage="iDeque.rend " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">To be added.</param>
        <summary>Designa o fim da sequência controlada invertida.</summary>
        <returns>Um iterador.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações, consulte [deque:: rend (STL/CLR)](/cpp/dotnet/deque-rend-stl-clr).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="resize">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Altera o número de elementos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações, consulte [deque:: Resize (STL/CLR)](/cpp/dotnet/deque-resize-stl-clr).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="resize">
      <MemberSignature Language="C#" Value="public void resize (int _Newsize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void resize(int32 _Newsize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub resize (_Newsize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void resize(int _Newsize);" />
      <MemberSignature Language="F#" Value="abstract member resize : int -&gt; unit" Usage="iDeque.resize _Newsize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Newsize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="_Newsize">O novo tamanho da sequência controlada.</param>
        <summary>Altera o número de elementos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações, consulte [deque:: Resize (STL/CLR)](/cpp/dotnet/deque-resize-stl-clr).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="resize">
      <MemberSignature Language="C#" Value="public void resize (int _Newsize, TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void resize(int32 _Newsize, !TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub resize (_Newsize As Integer, _Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void resize(int _Newsize, TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member resize : int * 'Value -&gt; unit" Usage="iDeque.resize (_Newsize, _Val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Newsize" Type="System.Int32" />
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Newsize">O novo tamanho da sequência controlada.</param>
        <param name="_Val">O valor do elemento de preenchimento.</param>
        <summary>Altera o número de elementos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações, consulte [deque:: Resize (STL/CLR)](/cpp/dotnet/deque-resize-stl-clr).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="size">
      <MemberSignature Language="C#" Value="public int size ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 size() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.size" />
      <MemberSignature Language="VB.NET" Value="Public Function size () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int size();" />
      <MemberSignature Language="F#" Value="abstract member size : unit -&gt; int" Usage="iDeque.size " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Conta o número de elementos.</summary>
        <returns>O tamanho da sequência controlada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações, consulte [deque (STL/CLR)](/cpp/dotnet/deque-size-stl-clr).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="swap">
      <MemberSignature Language="C#" Value="public void swap (Microsoft.VisualC.StlClr.IDeque&lt;TValue&gt; );" FrameworkAlternate="netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void swap(class Microsoft.VisualC.StlClr.IDeque`1&lt;!TValue&gt; ) cil managed" FrameworkAlternate="netframework-3.5;netframework-4.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub swap ( As IDeque(Of TValue))" FrameworkAlternate="netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void swap(Microsoft::VisualC::StlClr::IDeque&lt;TValue&gt; ^ );" FrameworkAlternate="netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C#" Value="public void swap (Microsoft.VisualC.StlClr.IDeque&lt;TValue&gt; A_0);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void swap(class Microsoft.VisualC.StlClr.IDeque`1&lt;!TValue&gt; A_0) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IDeque`1.swap(Microsoft.VisualC.StlClr.IDeque{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub swap (A_0 As IDeque(Of TValue))" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void swap(Microsoft::VisualC::StlClr::IDeque&lt;TValue&gt; ^ A_0);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member swap : Microsoft.VisualC.StlClr.IDeque&lt;'Value&gt; -&gt; unit" Usage="iDeque.swap A_0" FrameworkAlternate="netframework-4.5;netframework-3.5;netframework-4.0;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.IDeque&lt;TValue&gt;" Index="0" FrameworkAlternate="netframework-3.5;netframework-4.0" />
        <Parameter Name="A_0" Type="Microsoft.VisualC.StlClr.IDeque&lt;TValue&gt;" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="A_0">Contêiner com o qual trocar conteúdos.</param>
        <param name="">To be added.</param>
        <summary>Alterna o conteúdo de dois contêineres.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações, consulte [deque:: swap (STL/CLR)](/cpp/dotnet/deque-swap-stl-clr).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>