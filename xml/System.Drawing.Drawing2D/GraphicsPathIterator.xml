<Type Name="GraphicsPathIterator" FullName="System.Drawing.Drawing2D.GraphicsPathIterator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="71133be4f46e376e59a346bac44968fc61f5a3d7" />
    <Meta Name="ms.sourcegitcommit" Value="0d6aa6694f157a08fe52cd25b4d9d3dcf913e812" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="10/12/2018" />
    <Meta Name="ms.locfileid" Value="49141502" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class GraphicsPathIterator : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit GraphicsPathIterator extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Drawing2D.GraphicsPathIterator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class GraphicsPathIterator&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class GraphicsPathIterator sealed : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type GraphicsPathIterator = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Drawing.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Fornece a capacidade de iterar por subcaminhos em um <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> e testar os tipos de formas contidas em cada subcaminho. Essa classe não pode ser herdada.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GraphicsPathIterator (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.#ctor(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GraphicsPathIterator(System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Drawing2D.GraphicsPathIterator : System.Drawing.Drawing2D.GraphicsPath -&gt; System.Drawing.Drawing2D.GraphicsPathIterator" Usage="new System.Drawing.Drawing2D.GraphicsPathIterator path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">O objeto <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> para o qual esta classe auxiliar deve ser inicializada.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> com o objeto <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> especificado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyData">
      <MemberSignature Language="C#" Value="public int CopyData (ref System.Drawing.PointF[] points, ref byte[] types, int startIndex, int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CopyData(valuetype System.Drawing.PointF[]&amp; points, unsigned int8[]&amp; types, int32 startIndex, int32 endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(System.Drawing.PointF[]@,System.Byte[]@,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyData (ByRef points As PointF(), ByRef types As Byte(), startIndex As Integer, endIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CopyData(cli::array &lt;System::Drawing::PointF&gt; ^ % points, cli::array &lt;System::Byte&gt; ^ % types, int startIndex, int endIndex);" />
      <MemberSignature Language="F#" Value="member this.CopyData :  *  * int * int -&gt; int" Usage="graphicsPathIterator.CopyData (points, types, startIndex, endIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.PointF[]" RefType="ref" />
        <Parameter Name="types" Type="System.Byte[]" RefType="ref" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="endIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="points">Após o retorno, contém uma matriz de estruturas <see cref="T:System.Drawing.PointF" /> que representa os pontos no caminho.</param>
        <param name="types">Após o retorno, contém uma matriz de bytes que representa os tipos de pontos no caminho.</param>
        <param name="startIndex">Especifica o índice inicial das matrizes.</param>
        <param name="endIndex">Especifica o índice final das matrizes.</param>
        <summary>Copia as matrizes da propriedade <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" /> e da propriedade <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" /> do <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> associado em duas matrizes especificadas.</summary>
        <returns>O número de pontos copiados.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o `startIndex` e `endIndex` parâmetros para copiar um intervalo dos dados do caminho especificado.  
  
   
  
## Examples  
 O exemplo a seguir foi projetado para uso com o Windows Forms e requer <xref:System.Windows.Forms.PaintEventArgs> `e`, um <xref:System.Windows.Forms.Form.OnPaint%2A> objeto de evento. O código executa as seguintes ações:  
  
-   Cria um caminho de gráficos.  
  
-   Preenche com vários primitivos e algumas marcadores.  
  
-   Lista o caminho de dados no lado esquerdo da tela.  
  
-   Cria um <xref:System.Drawing.Drawing2D.GraphicsPathIterator> e Rebobina a ele.  
  
-   Incrementa o índice de dados de caminho para o segundo marcador.  
  
-   Chamadas a <xref:System.Drawing.Drawing2D.GraphicsPathIterator.CopyData%2A> método para copiar os dados de caminho contidos entre o início e término de índices para os pontos e tipos de matrizes.  
  
-   Lista os dados copiados no lado direito da tela.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#1)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.GraphicsPathIterator.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Drawing.Drawing2D.GraphicsPathIterator.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o número de pontos no caminho.</summary>
        <value>O número de pontos no caminho.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="graphicsPathIterator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera todos os recursos usados por esse objeto <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamando `Dispose` permite que os recursos usados por este <xref:System.Drawing.Drawing2D.GraphicsPathIterator> objeto a ser realocados para outras finalidades.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enumerate">
      <MemberSignature Language="C#" Value="public int Enumerate (ref System.Drawing.PointF[] points, ref byte[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Enumerate(valuetype System.Drawing.PointF[]&amp; points, unsigned int8[]&amp; types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(System.Drawing.PointF[]@,System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Enumerate (ByRef points As PointF(), ByRef types As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Enumerate(cli::array &lt;System::Drawing::PointF&gt; ^ % points, cli::array &lt;System::Byte&gt; ^ % types);" />
      <MemberSignature Language="F#" Value="member this.Enumerate :  *  -&gt; int" Usage="graphicsPathIterator.Enumerate (points, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.PointF[]" RefType="ref" />
        <Parameter Name="types" Type="System.Byte[]" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="points">Após o retorno, contém uma matriz de estruturas <see cref="T:System.Drawing.PointF" /> que representa os pontos no caminho.</param>
        <param name="types">Após o retorno, contém uma matriz de bytes que representa os tipos de pontos no caminho.</param>
        <summary>Copia as matrizes da propriedade <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" /> e da propriedade <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" /> do <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> associado em duas matrizes especificadas.</summary>
        <returns>O número de pontos copiados.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir foi projetado para uso com o Windows Forms e requer <xref:System.Windows.Forms.PaintEventArgs> `e`, um <xref:System.Windows.Forms.Form.OnPaint%2A> objeto de evento. O código executa as seguintes ações:  
  
-   Cria um caminho de gráficos.  
  
-   Preenche com vários primitivos e algumas marcadores.  
  
-   Lista o caminho de dados no lado esquerdo da tela.  
  
-   Cria um <xref:System.Drawing.Drawing2D.GraphicsPathIterator> e Rebobina a ele.  
  
-   Incrementa o índice de dados de caminho para o segundo marcador.  
  
-   Chamadas a <xref:System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate%2A> método para copiar os dados do caminho para o `points` e `types` matrizes.  
  
-   Lista os dados copiados no lado direito da tela.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#2)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~GraphicsPathIterator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!GraphicsPathIterator ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="graphicsPathIterator.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Permite que um objeto tente liberar recursos e executar outras operações de limpeza antes de ser recuperado pela coleta de lixo.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasCurve">
      <MemberSignature Language="C#" Value="public bool HasCurve ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasCurve() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve" />
      <MemberSignature Language="VB.NET" Value="Public Function HasCurve () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasCurve();" />
      <MemberSignature Language="F#" Value="member this.HasCurve : unit -&gt; bool" Usage="graphicsPathIterator.HasCurve " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indica se o caminho associado a este <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> contém ou não uma curva.</summary>
        <returns>Este método retorna <see langword="true" /> se subcaminho atual contém uma curva; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Todas as curvas em um caminho são armazenadas como sequências de splines de Bézier. Por exemplo, quando você adiciona uma elipse em um caminho, especifique o canto superior esquerdo, a largura e a altura do retângulo delimitador da elipse. Esses números (canto superior esquerdo, largura e altura) não são armazenados no caminho; em vez disso, a elipse é convertida em uma sequência de quatro splines de Bézier. O caminho armazena os pontos de extremidade e pontos de controle desses splines de Bézier.  
  
 Um caminho armazena uma matriz de pontos de dados, cada um deles pertence a uma linha ou uma spline de Bézier. Se alguns dos pontos na matriz de pertencem ao splines de Bézier, então <xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A> retorna `true`. Se todos os pontos na matriz pertencem a linhas, em seguida <xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A> retorna `false`.  
  
 Determinados métodos de mesclar um caminho, o que significa que todas as curvas no caminho são convertidas em sequências de linhas. Depois que um caminho bidimensionais, <xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A> sempre retornará `false`. Chamar o <xref:System.Drawing.Drawing2D.GraphicsPath.Flatten%2A>, <xref:System.Drawing.Drawing2D.GraphicsPath.Widen%2A>, ou <xref:System.Drawing.Drawing2D.GraphicsPath.Warp%2A> método da <xref:System.Drawing.Drawing2D.GraphicsPath> classe mesclará um caminho.  
  
   
  
## Examples  
 O exemplo a seguir foi projetado para uso com o Windows Forms e requer <xref:System.Windows.Forms.PaintEventArgs> `e`, um <xref:System.Windows.Forms.Form.OnPaint%2A> objeto de evento. O código executa as seguintes ações:  
  
-   Cria uma <xref:System.Drawing.Drawing2D.GraphicsPath> objeto, `myPath`.  
  
-   Adiciona três linhas, um retângulo e uma elipse.  
  
-   Cria uma <xref:System.Drawing.Drawing2D.GraphicsPathIterator> do objeto para `myPath`.  
  
-   Testa se o caminho atual `myPath` contém uma curva.  
  
-   Mostra o resultado do teste em uma caixa de mensagem.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#3)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="NextMarker">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Move o iterador para o próximo marcador no caminho.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NextMarker">
      <MemberSignature Language="C#" Value="public int NextMarker (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextMarker(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMarker (path As GraphicsPath) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextMarker(System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.NextMarker : System.Drawing.Drawing2D.GraphicsPath -&gt; int" Usage="graphicsPathIterator.NextMarker path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">O objeto <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> para o qual os pontos serão copiados.</param>
        <summary>O objeto <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> tem um objeto <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> associado a ele. O método <see cref="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)" /> incrementa o <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> associado para o próximo marcador em seu caminho e copia todos os pontos contidos entre o marcador atual e o próximo marcador (ou o final do caminho) para um segundo objeto <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> passado para o parâmetro.</summary>
        <returns>O número de pontos entre esse marcador e o próximo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> método para definir os marcadores em um caminho. Marcadores são usados para criar grupos de subcaminhos. Um ou mais subcaminhos podem ser entre dois marcadores.  
  
   
  
## Examples  
 O exemplo a seguir foi projetado para uso com o Windows Forms e requer <xref:System.Windows.Forms.PaintEventArgs> `e`, um <xref:System.Windows.Forms.Form.OnPaint%2A> objeto de evento. O código executa as seguintes ações:  
  
-   Cria um objeto <xref:System.Drawing.Drawing2D.GraphicsPath>.  
  
-   Adiciona três linhas, um retângulo, uma elipse e dois marcadores.  
  
-   Lista os valores de todos os pontos do caminho para o lado esquerdo da tela.  
  
-   Cria um objeto <xref:System.Drawing.Drawing2D.GraphicsPathIterator>.  
  
-   Cria uma <xref:System.Drawing.Drawing2D.GraphicsPath> objeto, `myPathSection`para receber pontos copiados.  
  
-   Chamadas a <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> método, que itera ao primeiro marcador e copia todos os pontos contidos entre esse marcador e o próximo ao `myPathSection`.  
  
-   Retorna o número de pontos copiados para `markerPoints`.  
  
-   Lista o número do marcador (o primeiro marcador) e o número de pontos que ele contém para o lado direito da tela.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#4)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMarker">
      <MemberSignature Language="C#" Value="public int NextMarker (out int startIndex, out int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextMarker([out] int32&amp; startIndex, [out] int32&amp; endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMarker (ByRef startIndex As Integer, ByRef endIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextMarker([Runtime::InteropServices::Out] int % startIndex, [Runtime::InteropServices::Out] int % endIndex);" />
      <MemberSignature Language="F#" Value="member this.NextMarker :  *  -&gt; int" Usage="graphicsPathIterator.NextMarker (startIndex, endIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="startIndex">[out] A referência de inteiro fornecida para esse parâmetro recebe o índice do ponto que inicia um subcaminho.</param>
        <param name="endIndex">[out] A referência de inteiro fornecida para esse parâmetro recebe o índice do ponto que termina o subcaminho para o qual <c>startIndex</c> aponta.</param>
        <summary>Incrementa o <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> para o próximo marcador no caminho e retorna os índices de início e parada por meio dos parâmetros [out].</summary>
        <returns>O número de pontos entre esse marcador e o próximo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> método para definir os marcadores em um caminho. Marcadores são usados para criar grupos de subcaminhos. Um ou mais subcaminhos podem ser entre dois marcadores.  
  
   
  
## Examples  
 O exemplo a seguir foi projetado para uso com o Windows Forms e requer <xref:System.Windows.Forms.PaintEventArgs> `e`, um <xref:System.Windows.Forms.Form.OnPaint%2A> objeto de evento. O código executa as seguintes ações:  
  
-   Cria um objeto <xref:System.Drawing.Drawing2D.GraphicsPath>.  
  
-   Adiciona três linhas, um retângulo e uma elipse ¾ com marcadores entre cada um.  
  
-   Desenha os valores para a matriz de pontos na tela.  
  
-   Cria um objeto <xref:System.Drawing.Drawing2D.GraphicsPathIterator>.  
  
-   Chama o método <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A>.  
  
-   Usa os valores retornados de chamadas iterativas para <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> para desenhar a iniciar e parar pontos para cada marcador na tela.  
  
-   Desenha o valor para o número total de pontos na tela.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#5)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextPathType">
      <MemberSignature Language="C#" Value="public int NextPathType (out byte pathType, out int startIndex, out int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextPathType([out] unsigned int8&amp; pathType, [out] int32&amp; startIndex, [out] int32&amp; endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(System.Byte@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextPathType (ByRef pathType As Byte, ByRef startIndex As Integer, ByRef endIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextPathType([Runtime::InteropServices::Out] System::Byte % pathType, [Runtime::InteropServices::Out] int % startIndex, [Runtime::InteropServices::Out] int % endIndex);" />
      <MemberSignature Language="F#" Value="member this.NextPathType :  *  *  -&gt; int" Usage="graphicsPathIterator.NextPathType (pathType, startIndex, endIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pathType" Type="System.Byte" RefType="out" />
        <Parameter Name="startIndex" Type="System.Int32" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pathType">[out] Recebe o tipo de ponto compartilhado por todos os pontos no grupo. Os tipos possíveis podem ser recuperados da enumeração <see cref="T:System.Drawing.Drawing2D.PathPointType" />.</param>
        <param name="startIndex">[out] Recebe o índice inicial do grupo de pontos.</param>
        <param name="endIndex">[out] Recebe o índice final do grupo de pontos.</param>
        <summary>Obtém o índice inicial e o índice final do próximo grupo de pontos de dados, todos os quais têm o mesmo tipo.</summary>
        <returns>Esse método retorna o número de pontos de dados no grupo. Se não houver mais grupos no caminho, esse método retornará 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir foi projetado para uso com o Windows Forms e requer <xref:System.Windows.Forms.PaintEventArgs> `e`, um <xref:System.Windows.Forms.Form.OnPaint%2A> objeto de evento. O código executa as seguintes ações:  
  
-   Cria um objeto <xref:System.Drawing.Drawing2D.GraphicsPath>.  
  
-   Adiciona três linhas, um retângulo e uma elipse.  
  
-   Lista os valores de todos os pontos para o lado esquerdo da tela.  
  
-   Cria um <xref:System.Drawing.Drawing2D.GraphicsPathIterator> e Rebobina a ele.  
  
-   Em um `for` loop, itera os pontos usando o <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> e <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> métodos.  
  
-   Usa os valores retornados de chamadas a iterativo para listar o número de subcaminho, o número de pontos nele e o tipo dos pontos de caminho para o lado direito da tela.  
  
-   Exibe o valor para o número total de pontos na tela.  
  
 Observe que `ListPathPoints` é uma função auxiliar que separa a maioria (não todos) do código de exibição de código do caminho de gráficos.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#6)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="NextSubpath">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Move o subcaminho para o próximo subcaminho no <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> especificado.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NextSubpath">
      <MemberSignature Language="C#" Value="public int NextSubpath (System.Drawing.Drawing2D.GraphicsPath path, out bool isClosed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextSubpath(class System.Drawing.Drawing2D.GraphicsPath path, [out] bool&amp; isClosed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextSubpath (path As GraphicsPath, ByRef isClosed As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextSubpath(System::Drawing::Drawing2D::GraphicsPath ^ path, [Runtime::InteropServices::Out] bool % isClosed);" />
      <MemberSignature Language="F#" Value="member this.NextSubpath : System.Drawing.Drawing2D.GraphicsPath *  -&gt; int" Usage="graphicsPathIterator.NextSubpath (path, isClosed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
        <Parameter Name="isClosed" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="path">Um <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> que deve definir seus pontos de dados para corresponder aos pontos de dados da figura recuperada (subcaminho) desse iterador.</param>
        <param name="isClosed">[out] Indica se o subcaminho atual está fechado. Será <see langword="true" /> se a figura for fechada; caso contrário, será <see langword="false" />.</param>
        <summary>Obtém a próxima figura (subcaminho) do caminho associado deste <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />.</summary>
        <returns>O número de pontos de dados na figura recuperada (subcaminho). Se não houver mais figuras a serem recuperadas, zero será retornado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir foi projetado para uso com o Windows Forms e requer <xref:System.Windows.Forms.PaintEventArgs> `e`, um <xref:System.Windows.Forms.Form.OnPaint%2A> objeto de evento. O código executa as seguintes ações:  
  
-   Cria um objeto <xref:System.Drawing.Drawing2D.GraphicsPath>.  
  
-   Adiciona três linhas, um retângulo, uma elipse e dois marcadores.  
  
-   Lista os valores de todos os pontos do caminho para o lado esquerdo da tela.  
  
-   Cria um objeto <xref:System.Drawing.Drawing2D.GraphicsPathIterator>.  
  
-   Cria uma <xref:System.Drawing.Drawing2D.GraphicsPath> objeto, `myPathSection`para receber pontos copiados.  
  
-   Chamadas a <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> método, que faz iterações para o terceiro subcaminho (Figura) e copia todos os pontos contidos desse subcaminho para o `myPathSection` caminho e também retorna o número de pontos copiado para `subpathPoints`.  
  
-   Lista o número de subcaminho e o número de pontos que ele contém para o lado direito da tela.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#7)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextSubpath">
      <MemberSignature Language="C#" Value="public int NextSubpath (out int startIndex, out int endIndex, out bool isClosed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextSubpath([out] int32&amp; startIndex, [out] int32&amp; endIndex, [out] bool&amp; isClosed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Int32@,System.Int32@,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextSubpath (ByRef startIndex As Integer, ByRef endIndex As Integer, ByRef isClosed As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextSubpath([Runtime::InteropServices::Out] int % startIndex, [Runtime::InteropServices::Out] int % endIndex, [Runtime::InteropServices::Out] bool % isClosed);" />
      <MemberSignature Language="F#" Value="member this.NextSubpath :  *  *  -&gt; int" Usage="graphicsPathIterator.NextSubpath (startIndex, endIndex, isClosed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32" RefType="out" />
        <Parameter Name="isClosed" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="startIndex">[out] Recebe o índice inicial do próximo subcaminho.</param>
        <param name="endIndex">[out] Recebe o índice final do próximo subcaminho.</param>
        <param name="isClosed">[out] Indica se o subcaminho está fechado.</param>
        <summary>Move o <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> para o próximo subcaminho no caminho. O índice inicial e o índice final do próximo subcaminho estão contidos nos parâmetros [out].</summary>
        <returns>O número de subcaminhos no objeto <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir foi projetado para uso com o Windows Forms e requer <xref:System.Windows.Forms.PaintEventArgs> `e`, um <xref:System.Windows.Forms.Form.OnPaint%2A> objeto de evento. O código executa as seguintes ações:  
  
-   Cria um objeto <xref:System.Drawing.Drawing2D.GraphicsPath>.  
  
-   Adiciona três linhas, um retângulo e uma elipse.  
  
-   Desenha os valores para a matriz de pontos na tela.  
  
-   Cria um objeto <xref:System.Drawing.Drawing2D.GraphicsPathIterator>.  
  
-   Chama o método <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A>.  
  
-   Usa os valores retornados de chamadas iterativas para <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> para desenhar a iniciar e parar valores para cada subcaminho para a tela.  
  
-   Desenha o valor para o número total de subcaminhos na tela.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#8)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rewind">
      <MemberSignature Language="C#" Value="public void Rewind ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rewind() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rewind ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rewind();" />
      <MemberSignature Language="F#" Value="member this.Rewind : unit -&gt; unit" Usage="graphicsPathIterator.Rewind " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrocede esse <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> para o início de seu caminho associado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na primeira vez que você chamar o <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> método de um iterador, ele obtém a primeira figura (subcaminho) do caminho de associados desse iterador. Na segunda vez, ele obtém a segunda figura e assim por diante. Quando você chama o <xref:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind%2A> método, a sequência começa failover; ou seja, depois de chamar <xref:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind%2A>, a próxima chamada para <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> obtém a primeira figura no caminho. O <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> e <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> métodos se comportam da mesma forma.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubpathCount">
      <MemberSignature Language="C#" Value="public int SubpathCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SubpathCount" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SubpathCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SubpathCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.SubpathCount : int" Usage="System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o número de subcaminhos no caminho.</summary>
        <value>O número de subcaminhos no caminho.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>