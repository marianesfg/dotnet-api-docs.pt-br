<Type Name="LineJoin" FullName="System.Drawing.Drawing2D.LineJoin">
  <TypeSignature Language="C#" Value="public enum LineJoin" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LineJoin extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Drawing2D.LineJoin" />
  <TypeSignature Language="VB.NET" Value="Public Enum LineJoin" />
  <TypeSignature Language="C++ CLI" Value="public enum class LineJoin" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary><span data-ttu-id="c5268-101">Especifica como unir segmentos de linha ou curva consecutivos em uma figura (subcaminho) contida em um objeto <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span><span class="sxs-lookup"><span data-stu-id="c5268-101">Specifies how to join consecutive line or curve segments in a figure (subpath) contained in a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> object.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Bevel">
      <MemberSignature Language="C#" Value="Bevel" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Drawing.Drawing2D.LineJoin Bevel = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Drawing.Drawing2D.LineJoin.Bevel" />
      <MemberSignature Language="VB.NET" Value="Bevel" />
      <MemberSignature Language="C++ CLI" Value="Bevel" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.LineJoin</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="c5268-102">Especifica uma junção de bisel.</span><span class="sxs-lookup"><span data-stu-id="c5268-102">Specifies a beveled join.</span></span> <span data-ttu-id="c5268-103">Isso produz um canto diagonal.</span><span class="sxs-lookup"><span data-stu-id="c5268-103">This produces a diagonal corner.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Miter">
      <MemberSignature Language="C#" Value="Miter" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Drawing.Drawing2D.LineJoin Miter = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Drawing.Drawing2D.LineJoin.Miter" />
      <MemberSignature Language="VB.NET" Value="Miter" />
      <MemberSignature Language="C++ CLI" Value="Miter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.LineJoin</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="c5268-104">Especifica uma junção de malhete.</span><span class="sxs-lookup"><span data-stu-id="c5268-104">Specifies a mitered join.</span></span> <span data-ttu-id="c5268-105">Isso produz um canto agudo ou um canto recortado, dependendo se o tamanho do malhete excede o limite de malhete.</span><span class="sxs-lookup"><span data-stu-id="c5268-105">This produces a sharp corner or a clipped corner, depending on whether the length of the miter exceeds the miter limit.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="MiterClipped">
      <MemberSignature Language="C#" Value="MiterClipped" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Drawing.Drawing2D.LineJoin MiterClipped = int32(3)" />
      <MemberSignature Language="DocId" Value="F:System.Drawing.Drawing2D.LineJoin.MiterClipped" />
      <MemberSignature Language="VB.NET" Value="MiterClipped" />
      <MemberSignature Language="C++ CLI" Value="MiterClipped" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.LineJoin</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary><span data-ttu-id="c5268-106">Especifica uma junção de malhete.</span><span class="sxs-lookup"><span data-stu-id="c5268-106">Specifies a mitered join.</span></span> <span data-ttu-id="c5268-107">Isso produz um canto agudo ou um canto de bisel, dependendo se o tamanho do malhete excede o limite de malhete.</span><span class="sxs-lookup"><span data-stu-id="c5268-107">This produces a sharp corner or a beveled corner, depending on whether the length of the miter exceeds the miter limit.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="Round" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Drawing.Drawing2D.LineJoin Round = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Drawing.Drawing2D.LineJoin.Round" />
      <MemberSignature Language="VB.NET" Value="Round" />
      <MemberSignature Language="C++ CLI" Value="Round" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.LineJoin</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="c5268-108">Especifica uma junção circular.</span><span class="sxs-lookup"><span data-stu-id="c5268-108">Specifies a circular join.</span></span> <span data-ttu-id="c5268-109">Isso produz um arco circular e suave entre as linhas.</span><span class="sxs-lookup"><span data-stu-id="c5268-109">This produces a smooth, circular arc between the lines.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>