<Type Name="PackageStore" FullName="System.IO.Packaging.PackageStore">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="17689b0f14224a312a02e2a0b4b556ea430ede87" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48653763" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class PackageStore" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed PackageStore extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Packaging.PackageStore" />
  <TypeSignature Language="VB.NET" Value="Public Class PackageStore" />
  <TypeSignature Language="C++ CLI" Value="public ref class PackageStore abstract sealed" />
  <TypeSignature Language="F#" Value="type PackageStore = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa uma coleção de instâncias <see cref="T:System.IO.Packaging.Package" /> específicas de aplicativos usadas em combinação com <see cref="T:System.IO.Packaging.PackWebRequest" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.IO.Packaging.PackageStore> define uma coleção de referência do pacote que estejam abertas e ativo no aplicativo.  Pacotes adicionados a <xref:System.IO.Packaging.PackageStore> são acessadas por seus valores URI de chave.  O <xref:System.IO.Packaging.PackageStore> dá suporte a três usos comuns:  
  
1.  Acessando <xref:System.IO.Packaging.PackagePart> dados por meio de <xref:System.IO.Packaging.PackWebRequest>.  
  
2.  O aplicativo a obtenção de uma instância de um <xref:System.IO.Packaging.Package> dado o URI do pacote.  
  
3.  Para acessar os pacotes que são criados e armazenados em um <xref:System.IO.MemoryStream>.  
  
 Para melhorar o desempenho e minimizar a sobrecarga de operações de abertura/fechamento de arquivo repetidas, o <xref:System.IO.Packaging.PackageStore> é usado para gerenciar instâncias de pacotes acessados por <xref:System.IO.Packaging.PackWebRequest> e diretamente pelo aplicativo.  Ao acessar dados em um pacote, o <xref:System.IO.Packaging.Package> endereço de um solicitada <xref:System.IO.Packaging.PackagePart> <xref:System.IO.Packaging.PackagePart.Uri%2A> é verificado para ver se o pacote já está definido e aberto no <xref:System.IO.Packaging.PackageStore>.  Se o pacote é definida como aberta no <xref:System.IO.Packaging.PackageStore>, solicitado partes podem ser acessadas diretamente sem abrir e fechar o pacote para cada solicitação repetidamente.  
  
 Se seu aplicativo abre um pacote com <xref:System.IO.Packaging.Package.Open%2A?displayProperty=nameWithType>, <xref:System.IO.Packaging.PackageStore.AddPackage%2A> pode ser chamado para adicionar o pacote para o <xref:System.IO.Packaging.PackageStore>.  <xref:System.IO.Packaging.PackageStore.RemovePackage%2A> mais tarde deve ser chamado para remover o pacote a partir de <xref:System.IO.Packaging.PackageStore> antes de chamar <xref:System.IO.Packaging.Package.Close%2A?displayProperty=nameWithType>.  
  
 Pacotes XPS aberto com um <xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A> construtor são automaticamente adicionados e removidos do <xref:System.IO.Packaging.PackageStore> quando o documento é criado e descartado.  (Você não precisará chamar <xref:System.IO.Packaging.PackageStore.AddPackage%2A> ou <xref:System.IO.Packaging.PackageStore.RemovePackage%2A> separadamente para pacotes XPS abertos com <xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A> construtores.)  
  
 As permissões de arquivo e/s de um pacote acessados por meio de <xref:System.IO.Packaging.PackageStore> permanece o mesmo que as permissões de e/s definidos no pacote quando ele é aberto.  O <xref:System.IO.Packaging.PackageStore> só fornece referências aos pacotes que foram adicionados a loja.  É até o aplicativo para abrir, atualizar e fechar cada pacote corretamente.  
  
 Pacotes adicionados para o <xref:System.IO.Packaging.PackageStore> podem ser acessados em ambientes multithread quando eles são usados em combinação com um [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] analisador como <xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=nameWithType>.  Ao operar em um ambiente multithreaded, o aplicativo deve bloquear o pacote antes de acesso.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Packaging.PackWebRequest" />
    <altmember cref="T:System.IO.Packaging.PackWebResponse" />
  </Docs>
  <Members>
    <Member MemberName="AddPackage">
      <MemberSignature Language="C#" Value="public static void AddPackage (Uri uri, System.IO.Packaging.Package package);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPackage(class System.Uri uri, class System.IO.Packaging.Package package) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPackage(Uri ^ uri, System::IO::Packaging::Package ^ package);" />
      <MemberSignature Language="F#" Value="static member AddPackage : Uri * System.IO.Packaging.Package -&gt; unit" Usage="System.IO.Packaging.PackageStore.AddPackage (uri, package)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="package" Type="System.IO.Packaging.Package" />
      </Parameters>
      <Docs>
        <param name="uri">O [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] chave do <c>pacote</c> a comparar em um <see cref="T:System.IO.Packaging.PackWebRequest" />.</param>
        <param name="package">O pacote a adicionar ao repositório.</param>
        <summary>Adiciona um <see cref="T:System.IO.Packaging.Package" /> ao repositório.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` Define o URI que é comparado ao chamar da chave do pacote <xref:System.IO.Packaging.PackWebRequest>.  
  
 Se o `packageUri` corresponde à <xref:System.IO.Packaging.PackagePart.Uri%2A> para um <xref:System.IO.Packaging.PackagePart> em um <xref:System.IO.Packaging.PackWebRequest> chamar, o pacote definido no <xref:System.IO.Packaging.PackageStore> é usado para acessar a parte solicitada.  
  
 Se o `packageUri` não corresponde a <xref:System.IO.Packaging.PackagePart.Uri%2A> para um <xref:System.IO.Packaging.PackagePart> em um <xref:System.IO.Packaging.PackWebRequest> chamada, o pacote com o URI especificado é aberta para acessar a parte solicitada.  
  
 **Observação de segurança** esse método exige <xref:System.Security.Permissions.EnvironmentPermission> para todos os personalizados <xref:System.IO.Packaging.Package> (não -<xref:System.IO.Packaging.ZipPackage>) tipos.  
  
   
  
## Examples  
 O exemplo a seguir mostra como usar o método <xref:System.IO.Packaging.PackageStore.AddPackage%2A>.  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewDecrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewdecrypt)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewDecrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewdecrypt)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="package" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="packageUri" /> é um pacote inválido de [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)].</exception>
        <exception cref="T:System.InvalidOperationException">Um pacote com o <paramref name="packageUri" /> especificado já está no repositório.</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetPackage">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package GetPackage (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package GetPackage(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ GetPackage(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="static member GetPackage : Uri -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.PackageStore.GetPackage uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">O [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] do pacote a retornar.</param>
        <summary>Retorna o <see cref="T:System.IO.Packaging.Package" /> com o [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] especificado do repositório.</summary>
        <returns>O pacote com um <paramref name="packageUri" /> especificado; ou <see langword="null" />, se um pacote com o <paramref name="packageUri" /> especificado não estiver no repositório.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` é correspondida para os URIs especificados no <xref:System.IO.Packaging.PackageStore.AddPackage%2A> chamada de método.  
  
 **Observação de segurança** esse método exige <xref:System.Security.Permissions.EnvironmentPermission> para todos os personalizados <xref:System.IO.Packaging.Package> (não -<xref:System.IO.Packaging.ZipPackage>) tipos.  
  
   
  
## Examples  
 O exemplo a seguir mostra como usar o método <xref:System.IO.Packaging.PackageStore.GetPackage%2A>.  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewopendoc)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewopendoc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="packageUri" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="packageUri" /> é um pacote inválido de [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)].</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="RemovePackage">
      <MemberSignature Language="C#" Value="public static void RemovePackage (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePackage(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePackage(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="static member RemovePackage : Uri -&gt; unit" Usage="System.IO.Packaging.PackageStore.RemovePackage uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">O [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] do pacote a remover.</param>
        <summary>Remove o <see cref="T:System.IO.Packaging.Package" /> com o [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] especificado do repositório.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` é correspondida para os URIs especificados no <xref:System.IO.Packaging.PackageStore.AddPackage%2A> chamada de método.  
  
 **Observação de segurança** esse método exige <xref:System.Security.Permissions.EnvironmentPermission> para todos os personalizados <xref:System.IO.Packaging.Package> (não -<xref:System.IO.Packaging.ZipPackage>) tipos.  
  
   
  
## Examples  
 O exemplo a seguir mostra como usar o método <xref:System.IO.Packaging.PackageStore.RemovePackage%2A>.  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewclosedoc)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewclosedoc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="packageUri" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="packageUri" /> é um pacote inválido de [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)].</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
      </Docs>
    </Member>
  </Members>
</Type>