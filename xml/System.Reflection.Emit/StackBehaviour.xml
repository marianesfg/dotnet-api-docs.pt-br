<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="StackBehaviour.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5a872c1436cc6d45edb6906a7fdc01e94fb40b621.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a872c1436cc6d45edb6906a7fdc01e94fb40b621</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.StackBehaviour">
          <source>Describes how values are pushed onto a stack or popped off a stack.</source>
          <target state="translated">Descreve como os valores são enviados por push para uma pilha ou retirados de uma pilha.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Pop0">
          <source>No values are popped off the stack.</source>
          <target state="translated">Nenhum valor é retirado da pilha.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Pop1">
          <source>Pops one value off the stack.</source>
          <target state="translated">Retira um valor da pilha.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Pop1_pop1">
          <source>Pops 1 value off the stack for the first operand, and 1 value of the stack for the second operand.</source>
          <target state="translated">Retira um valor da pilha para o primeiro operando e um valor da pilha para o segundo operando.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Popi">
          <source>Pops a 32-bit integer off the stack.</source>
          <target state="translated">Retira um inteiro de 32 bits da pilha.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Popi_pop1">
          <source>Pops a 32-bit integer off the stack for the first operand, and a value off the stack for the second operand.</source>
          <target state="translated">Retira um inteiro de 32 bits da pilha para o primeiro operando e um valor da pilha para o segundo operando.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Popi_popi">
          <source>Pops a 32-bit integer off the stack for the first operand, and a 32-bit integer off the stack for the second operand.</source>
          <target state="translated">Retira um inteiro de 32 bits da pilha para o primeiro operando e um inteiro de 32 bits da pilha para o segundo operando.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Popi_popi_popi">
          <source>Pops a 32-bit integer off the stack for the first operand, a 32-bit integer off the stack for the second operand, and a 32-bit integer off the stack for the third operand.</source>
          <target state="translated">Retira um inteiro de 32 bits da pilha para o primeiro operando, um inteiro de 32 bits da pilha para o segundo operando e um inteiro de 32 bits da pilha para o terceiro operando.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Popi_popi8">
          <source>Pops a 32-bit integer off the stack for the first operand, and a 64-bit integer off the stack for the second operand.</source>
          <target state="translated">Retira um inteiro de 32 bits da pilha para o primeiro operando e um inteiro de 64 bits da pilha para o segundo operando.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Popi_popr4">
          <source>Pops a 32-bit integer off the stack for the first operand, and a 32-bit floating point number off the stack for the second operand.</source>
          <target state="translated">Retira um inteiro de 32 bits da pilha para o primeiro operando e um ponto flutuante de 32 bits da pilha para o segundo operando.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Popi_popr8">
          <source>Pops a 32-bit integer off the stack for the first operand, and a 64-bit floating point number off the stack for the second operand.</source>
          <target state="translated">Retira um inteiro de 32 bits da pilha para o primeiro operando e um ponto flutuante de 64 bits da pilha para o segundo operando.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Popref">
          <source>Pops a reference off the stack.</source>
          <target state="translated">Retira uma referência da pilha.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Popref_pop1">
          <source>Pops a reference off the stack for the first operand, and a value off the stack for the second operand.</source>
          <target state="translated">Retira uma referência da pilha para o primeiro operando e um valor da pilha para o segundo operando.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Popref_popi">
          <source>Pops a reference off the stack for the first operand, and a 32-bit integer off the stack for the second operand.</source>
          <target state="translated">Retira uma referência da pilha para o primeiro operando e um inteiro de 32 bits da pilha para o segundo operando.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Popref_popi_pop1">
          <source>Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 32-bit integer off the stack for the third operand.</source>
          <target state="translated">Retira uma referência da pilha para o primeiro operando, um valor da pilha para o segundo operando e um inteiro de 32 bits da pilha para o terceiro operando.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi">
          <source>Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a value off the stack for the third operand.</source>
          <target state="translated">Retira uma referência da pilha para o primeiro operando, um valor da pilha para o segundo operando e um valor da pilha para o terceiro operando.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi8">
          <source>Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 64-bit integer off the stack for the third operand.</source>
          <target state="translated">Retira uma referência da pilha para o primeiro operando, um valor da pilha para o segundo operando e um inteiro de 64 bits da pilha para o terceiro operando.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr4">
          <source>Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 32-bit integer off the stack for the third operand.</source>
          <target state="translated">Retira uma referência da pilha para o primeiro operando, um valor da pilha para o segundo operando e um inteiro de 32 bits da pilha para o terceiro operando.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr8">
          <source>Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 64-bit floating point number off the stack for the third operand.</source>
          <target state="translated">Retira uma referência da pilha para o primeiro operando, um valor da pilha para o segundo operando e um ponto flutuante de 64 bits da pilha para o terceiro operando.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popref">
          <source>Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a reference off the stack for the third operand.</source>
          <target state="translated">Retira uma referência da pilha para o primeiro operando, um valor da pilha para o segundo operando e uma referência da pilha para o terceiro operando.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Push0">
          <source>No values are pushed onto the stack.</source>
          <target state="translated">Nenhum valor é enviado por push para a pilha.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Push1">
          <source>Pushes one value onto the stack.</source>
          <target state="translated">Envia um valor por push à pilha.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Push1_push1">
          <source>Pushes 1 value onto the stack for the first operand, and 1 value onto the stack for the second operand.</source>
          <target state="translated">Envia um valor por push à pilha para o primeiro operando e um valor para a pilha para o segundo operando.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Pushi">
          <source>Pushes a 32-bit integer onto the stack.</source>
          <target state="translated">Envia por push um inteiro de 32 bits à pilha.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Pushi8">
          <source>Pushes a 64-bit integer onto the stack.</source>
          <target state="translated">Envia por push um inteiro de 64 bits à pilha.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Pushr4">
          <source>Pushes a 32-bit floating point number onto the stack.</source>
          <target state="translated">Envia por push um ponto flutuante de 32 bits à pilha.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Pushr8">
          <source>Pushes a 64-bit floating point number onto the stack.</source>
          <target state="translated">Envia por push um ponto flutuante de 64 bits à pilha.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Pushref">
          <source>Pushes a reference onto the stack.</source>
          <target state="translated">Envia por push uma referência à pilha.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Varpop">
          <source>Pops a variable off the stack.</source>
          <target state="translated">Retira uma variável da pilha.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="F:System.Reflection.Emit.StackBehaviour.Varpush">
          <source>Pushes a variable onto the stack.</source>
          <target state="translated">Envia por push uma variável à pilha.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>