<Type Name="ExceptionHandler" FullName="System.Reflection.Emit.ExceptionHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bd98723cf04ddbbf9b8efa42cff2c396eb5c74a3" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48644332" /></Metadata><TypeSignature Language="C#" Value="public struct ExceptionHandler : IEquatable&lt;System.Reflection.Emit.ExceptionHandler&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ExceptionHandler extends System.ValueType implements class System.IEquatable`1&lt;valuetype System.Reflection.Emit.ExceptionHandler&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.ExceptionHandler" />
  <TypeSignature Language="VB.NET" Value="Public Structure ExceptionHandler&#xA;Implements IEquatable(Of ExceptionHandler)" />
  <TypeSignature Language="C++ CLI" Value="public value class ExceptionHandler : IEquatable&lt;System::Reflection::Emit::ExceptionHandler&gt;" />
  <TypeSignature Language="F#" Value="type ExceptionHandler = struct" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Reflection.Emit.ExceptionHandler&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f0f52-101">Representa um manipulador de exceção em uma matriz de bytes de nível de integridade para ser passado para um método como <see cref="M:System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})" />.</span><span class="sxs-lookup"><span data-stu-id="f0f52-101">Represents an exception handler in a byte array of IL to be passed to a method such as <see cref="M:System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})" />.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExceptionHandler (int tryOffset, int tryLength, int filterOffset, int handlerOffset, int handlerLength, System.Reflection.ExceptionHandlingClauseOptions kind, int exceptionTypeToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 tryOffset, int32 tryLength, int32 filterOffset, int32 handlerOffset, int32 handlerLength, valuetype System.Reflection.ExceptionHandlingClauseOptions kind, int32 exceptionTypeToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ExceptionHandler.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Reflection.ExceptionHandlingClauseOptions,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (tryOffset As Integer, tryLength As Integer, filterOffset As Integer, handlerOffset As Integer, handlerLength As Integer, kind As ExceptionHandlingClauseOptions, exceptionTypeToken As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExceptionHandler(int tryOffset, int tryLength, int filterOffset, int handlerOffset, int handlerLength, System::Reflection::ExceptionHandlingClauseOptions kind, int exceptionTypeToken);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.ExceptionHandler : int * int * int * int * int * System.Reflection.ExceptionHandlingClauseOptions * int -&gt; System.Reflection.Emit.ExceptionHandler" Usage="new System.Reflection.Emit.ExceptionHandler (tryOffset, tryLength, filterOffset, handlerOffset, handlerLength, kind, exceptionTypeToken)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="tryOffset" Type="System.Int32" />
        <Parameter Name="tryLength" Type="System.Int32" />
        <Parameter Name="filterOffset" Type="System.Int32" />
        <Parameter Name="handlerOffset" Type="System.Int32" />
        <Parameter Name="handlerLength" Type="System.Int32" />
        <Parameter Name="kind" Type="System.Reflection.ExceptionHandlingClauseOptions" />
        <Parameter Name="exceptionTypeToken" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tryOffset"><span data-ttu-id="f0f52-102">O deslocamento de bytes da primeira instrução protegido por este manipulador de exceção.</span><span class="sxs-lookup"><span data-stu-id="f0f52-102">The byte offset of the first instruction protected by this exception handler.</span></span></param>
        <param name="tryLength"><span data-ttu-id="f0f52-103">O número de bytes protegidos por este manipulador de exceção.</span><span class="sxs-lookup"><span data-stu-id="f0f52-103">The number of bytes protected by this exception handler.</span></span></param>
        <param name="filterOffset"><span data-ttu-id="f0f52-104">O deslocamento de bytes do início do código de filtro.</span><span class="sxs-lookup"><span data-stu-id="f0f52-104">The byte offset of the beginning of the filter code.</span></span> <span data-ttu-id="f0f52-105">O código de filtro termina na primeira instrução do bloco do manipulador.</span><span class="sxs-lookup"><span data-stu-id="f0f52-105">The filter code ends at the first instruction of the handler block.</span></span> <span data-ttu-id="f0f52-106">Para manipuladores de exceção não filtro, especifique 0 (zero) para esse parâmetro.</span><span class="sxs-lookup"><span data-stu-id="f0f52-106">For non-filter exception handlers, specify 0 (zero) for this parameter.</span></span></param>
        <param name="handlerOffset"><span data-ttu-id="f0f52-107">O deslocamento de bytes da primeira instrução deste manipulador de exceção.</span><span class="sxs-lookup"><span data-stu-id="f0f52-107">The byte offset of the first instruction of this exception handler.</span></span></param>
        <param name="handlerLength"><span data-ttu-id="f0f52-108">O número de bytes neste manipulador de exceção.</span><span class="sxs-lookup"><span data-stu-id="f0f52-108">The number of bytes in this exception handler.</span></span></param>
        <param name="kind"><span data-ttu-id="f0f52-109">Um dos valores de enumeração que especifica o tipo de manipulador de exceção.</span><span class="sxs-lookup"><span data-stu-id="f0f52-109">One of the enumeration values that specifies the kind of exception handler.</span></span></param>
        <param name="exceptionTypeToken"><span data-ttu-id="f0f52-110">O token do tipo de exceção tratado por este manipulador de exceção.</span><span class="sxs-lookup"><span data-stu-id="f0f52-110">The token of the exception type handled by this exception handler.</span></span> <span data-ttu-id="f0f52-111">Se não for aplicável, especifique 0 (zero).</span><span class="sxs-lookup"><span data-stu-id="f0f52-111">If not applicable, specify 0 (zero).</span></span></param>
        <summary><span data-ttu-id="f0f52-112">Inicializa uma nova instância da classe <see cref="T:System.Reflection.Emit.ExceptionHandler" /> com os parâmetros especificados.</span><span class="sxs-lookup"><span data-stu-id="f0f52-112">Initializes a new instance of the <see cref="T:System.Reflection.Emit.ExceptionHandler" /> class with the specified parameters.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f0f52-113"><paramref name="tryOffset" />, <paramref name="filterOffset" />, <paramref name="handlerOffset" />, <paramref name="tryLength" /> ou <paramref name="handlerLength" /> são negativos.</span><span class="sxs-lookup"><span data-stu-id="f0f52-113"><paramref name="tryOffset" />, <paramref name="filterOffset" />, <paramref name="handlerOffset" />, <paramref name="tryLength" />, or <paramref name="handlerLength" /> are negative.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f0f52-114">Indica se essa instância do objeto <see cref="T:System.Reflection.Emit.ExceptionHandler" /> é igual a um objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="f0f52-114">Indicates whether this instance of the <see cref="T:System.Reflection.Emit.ExceptionHandler" /> object is equal to a specified object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ExceptionHandler.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="exceptionHandler.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="f0f52-115">O objeto ao qual comparar essa instância.</span><span class="sxs-lookup"><span data-stu-id="f0f52-115">The object to compare this instance to.</span></span></param>
        <summary><span data-ttu-id="f0f52-116">Indica se essa instância do objeto <see cref="T:System.Reflection.Emit.ExceptionHandler" /> é igual a um objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="f0f52-116">Indicates whether this instance of the <see cref="T:System.Reflection.Emit.ExceptionHandler" /> object is equal to a specified object.</span></span></summary>
        <returns><span data-ttu-id="f0f52-117"><see langword="true" /> se <paramref name="obj" /> e esta instância forem iguais; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="f0f52-117"><see langword="true" /> if <paramref name="obj" /> and this instance are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Reflection.Emit.ExceptionHandler other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Reflection.Emit.ExceptionHandler other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ExceptionHandler.Equals(System.Reflection.Emit.ExceptionHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As ExceptionHandler) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Reflection::Emit::ExceptionHandler other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Reflection.Emit.ExceptionHandler -&gt; bool" Usage="exceptionHandler.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Reflection.Emit.ExceptionHandler" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="f0f52-118">O objeto de manipulador de exceção ao qual comparar essa instância.</span><span class="sxs-lookup"><span data-stu-id="f0f52-118">The exception handler object to compare this instance to.</span></span></param>
        <summary><span data-ttu-id="f0f52-119">Indica se essa instância do objeto <see cref="T:System.Reflection.Emit.ExceptionHandler" /> é igual a outro objeto <see cref="T:System.Reflection.Emit.ExceptionHandler" />.</span><span class="sxs-lookup"><span data-stu-id="f0f52-119">Indicates whether this instance of the <see cref="T:System.Reflection.Emit.ExceptionHandler" /> object is equal to another <see cref="T:System.Reflection.Emit.ExceptionHandler" /> object.</span></span></summary>
        <returns><span data-ttu-id="f0f52-120"><see langword="true" /> se <paramref name="other" /> e esta instância forem iguais; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="f0f52-120"><see langword="true" /> if <paramref name="other" /> and this instance are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionTypeToken">
      <MemberSignature Language="C#" Value="public int ExceptionTypeToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ExceptionTypeToken" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.ExceptionHandler.ExceptionTypeToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExceptionTypeToken As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ExceptionTypeToken { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionTypeToken : int" Usage="System.Reflection.Emit.ExceptionHandler.ExceptionTypeToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f0f52-121">Obtém o token do tipo de exceção tratado por este manipulador.</span><span class="sxs-lookup"><span data-stu-id="f0f52-121">Gets the token of the exception type handled by this handler.</span></span></summary>
        <value><span data-ttu-id="f0f52-122">O token do tipo de exceção tratado por este manipulador, ou 0 se não houver nenhum.</span><span class="sxs-lookup"><span data-stu-id="f0f52-122">The token of the exception type handled by this handler, or 0 if none exists.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterOffset">
      <MemberSignature Language="C#" Value="public int FilterOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FilterOffset" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.ExceptionHandler.FilterOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilterOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int FilterOffset { int get(); };" />
      <MemberSignature Language="F#" Value="member this.FilterOffset : int" Usage="System.Reflection.Emit.ExceptionHandler.FilterOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f0f52-123">Obtém o deslocamento de bytes no qual o código de filtro para o manipulador de exceção começa.</span><span class="sxs-lookup"><span data-stu-id="f0f52-123">Gets the byte offset at which the filter code for the exception handler begins.</span></span></summary>
        <value><span data-ttu-id="f0f52-124">O deslocamento de byte no qual o código de filtro é iniciada, ou 0 se nenhum filtro estiver presente.</span><span class="sxs-lookup"><span data-stu-id="f0f52-124">The byte offset at which the filter code begins, or 0 if no filter  is present.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ExceptionHandler.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="exceptionHandler.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f0f52-125">Serve como a função de hash padrão.</span><span class="sxs-lookup"><span data-stu-id="f0f52-125">Serves as the default hash function.</span></span></summary>
        <returns><span data-ttu-id="f0f52-126">O código hash do objeto atual.</span><span class="sxs-lookup"><span data-stu-id="f0f52-126">The hash code for the current object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandlerLength">
      <MemberSignature Language="C#" Value="public int HandlerLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HandlerLength" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.ExceptionHandler.HandlerLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HandlerLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HandlerLength { int get(); };" />
      <MemberSignature Language="F#" Value="member this.HandlerLength : int" Usage="System.Reflection.Emit.ExceptionHandler.HandlerLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f0f52-127">Obtém o tamanho, em bytes, do manipulador de exceção.</span><span class="sxs-lookup"><span data-stu-id="f0f52-127">Gets the length, in bytes, of the exception handler.</span></span></summary>
        <value><span data-ttu-id="f0f52-128">O comprimento, em bytes, do manipulador de exceção.</span><span class="sxs-lookup"><span data-stu-id="f0f52-128">The length, in bytes, of the exception handler.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandlerOffset">
      <MemberSignature Language="C#" Value="public int HandlerOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HandlerOffset" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.ExceptionHandler.HandlerOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HandlerOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HandlerOffset { int get(); };" />
      <MemberSignature Language="F#" Value="member this.HandlerOffset : int" Usage="System.Reflection.Emit.ExceptionHandler.HandlerOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f0f52-129">Obtém o deslocamento de bytes da primeira instrução do manipulador de exceção.</span><span class="sxs-lookup"><span data-stu-id="f0f52-129">Gets the byte offset of the first instruction of the exception handler.</span></span></summary>
        <value><span data-ttu-id="f0f52-130">O deslocamento de bytes da primeira instrução do manipulador de exceção.</span><span class="sxs-lookup"><span data-stu-id="f0f52-130">The byte offset of the first instruction of the exception handler.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public System.Reflection.ExceptionHandlingClauseOptions Kind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.ExceptionHandlingClauseOptions Kind" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.ExceptionHandler.Kind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Kind As ExceptionHandlingClauseOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::ExceptionHandlingClauseOptions Kind { System::Reflection::ExceptionHandlingClauseOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Kind : System.Reflection.ExceptionHandlingClauseOptions" Usage="System.Reflection.Emit.ExceptionHandler.Kind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ExceptionHandlingClauseOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f0f52-131">Obtém um valor que representa o tipo de manipulador de exceção representado por este objeto.</span><span class="sxs-lookup"><span data-stu-id="f0f52-131">Gets a value that represents the kind of exception handler this object represents.</span></span></summary>
        <value><span data-ttu-id="f0f52-132">Um dos valores de enumeração que especifica o tipo de manipulador de exceção.</span><span class="sxs-lookup"><span data-stu-id="f0f52-132">One of the enumeration values that specifies the kind of exception handler.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Reflection.Emit.ExceptionHandler left, System.Reflection.Emit.ExceptionHandler right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Reflection.Emit.ExceptionHandler left, valuetype System.Reflection.Emit.ExceptionHandler right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ExceptionHandler.op_Equality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As ExceptionHandler, right As ExceptionHandler) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Reflection::Emit::ExceptionHandler left, System::Reflection::Emit::ExceptionHandler right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Reflection.Emit.ExceptionHandler * System.Reflection.Emit.ExceptionHandler -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.Emit.ExceptionHandler" />
        <Parameter Name="right" Type="System.Reflection.Emit.ExceptionHandler" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="f0f52-133">O primeiro objeto a ser comparado.</span><span class="sxs-lookup"><span data-stu-id="f0f52-133">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="f0f52-134">O segundo objeto a ser comparado.</span><span class="sxs-lookup"><span data-stu-id="f0f52-134">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="f0f52-135">Determina se duas instâncias especificadas do <see cref="T:System.Reflection.Emit.ExceptionHandler" /> são iguais.</span><span class="sxs-lookup"><span data-stu-id="f0f52-135">Determines whether two specified instances of <see cref="T:System.Reflection.Emit.ExceptionHandler" /> are equal.</span></span></summary>
        <returns><span data-ttu-id="f0f52-136"><see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> forem iguais; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="f0f52-136"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Reflection.Emit.ExceptionHandler left, System.Reflection.Emit.ExceptionHandler right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Reflection.Emit.ExceptionHandler left, valuetype System.Reflection.Emit.ExceptionHandler right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ExceptionHandler.op_Inequality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As ExceptionHandler, right As ExceptionHandler) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Reflection::Emit::ExceptionHandler left, System::Reflection::Emit::ExceptionHandler right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Reflection.Emit.ExceptionHandler * System.Reflection.Emit.ExceptionHandler -&gt; bool" Usage="System.Reflection.Emit.ExceptionHandler.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.Emit.ExceptionHandler" />
        <Parameter Name="right" Type="System.Reflection.Emit.ExceptionHandler" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="f0f52-137">O primeiro objeto a ser comparado.</span><span class="sxs-lookup"><span data-stu-id="f0f52-137">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="f0f52-138">O segundo objeto a ser comparado.</span><span class="sxs-lookup"><span data-stu-id="f0f52-138">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="f0f52-139">Determina se duas instâncias especificadas de <see cref="T:System.Reflection.Emit.ExceptionHandler" /> não são iguais.</span><span class="sxs-lookup"><span data-stu-id="f0f52-139">Determines whether two specified instances of <see cref="T:System.Reflection.Emit.ExceptionHandler" /> are not equal.</span></span></summary>
        <returns><span data-ttu-id="f0f52-140"><see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> não forem iguais; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="f0f52-140"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryLength">
      <MemberSignature Language="C#" Value="public int TryLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TryLength" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.ExceptionHandler.TryLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TryLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TryLength { int get(); };" />
      <MemberSignature Language="F#" Value="member this.TryLength : int" Usage="System.Reflection.Emit.ExceptionHandler.TryLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f0f52-141">Obtém o comprimento, em bytes, do código protegido por esse manipulador de exceção.</span><span class="sxs-lookup"><span data-stu-id="f0f52-141">Gets the length, in bytes, of the code protected by this exception handler.</span></span></summary>
        <value><span data-ttu-id="f0f52-142">O comprimento, em bytes, do código protegido por este manipulador de exceção.</span><span class="sxs-lookup"><span data-stu-id="f0f52-142">The length, in bytes, of the code protected by this exception handler.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryOffset">
      <MemberSignature Language="C#" Value="public int TryOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TryOffset" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.ExceptionHandler.TryOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TryOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TryOffset { int get(); };" />
      <MemberSignature Language="F#" Value="member this.TryOffset : int" Usage="System.Reflection.Emit.ExceptionHandler.TryOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f0f52-143">Obtém o deslocamento de bytes no qual o código protegido por este manipulador de exceção começa.</span><span class="sxs-lookup"><span data-stu-id="f0f52-143">Gets the byte offset at which the code that is protected by this exception handler begins.</span></span></summary>
        <value><span data-ttu-id="f0f52-144">O deslocamento de byte no qual o código que é protegido por este manipulador de exceção começa.</span><span class="sxs-lookup"><span data-stu-id="f0f52-144">The byte offset at which the code that is protected by this exception handler begins.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>