<Type Name="DynamicMethod" FullName="System.Reflection.Emit.DynamicMethod">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="862a235668e7e4b96457329cbd2f33598707245d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DynamicMethod : System.Reflection.MethodInfo" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DynamicMethod extends System.Reflection.MethodInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.DynamicMethod" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DynamicMethod&#xA;Inherits MethodInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicMethod sealed : System::Reflection::MethodInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MethodInfo</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="d8baf-101">Define e representa um método dinâmico que pode ser compilado, executado e descartado.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d8baf-101">Defines and represents a dynamic method that can be compiled, executed, and discarded.</span>
      </span>
      <span data-ttu-id="d8baf-102">Os métodos descartados estão disponíveis para coleta de lixo.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d8baf-102">Discarded methods are available for garbage collection.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-103">Você pode usar o <xref:System.Reflection.Emit.DynamicMethod> classe para gerar e executar um método em tempo de execução, sem precisar gerar um assembly dinâmico e um tipo dinâmico para conter o método.</span><span class="sxs-lookup"><span data-stu-id="d8baf-103">You can use the <xref:System.Reflection.Emit.DynamicMethod> class to generate and execute a method at run time, without having to generate a dynamic assembly and a dynamic type to contain the method.</span></span> <span data-ttu-id="d8baf-104">O código executável criado pelo compilador just-in-time (JIT) é recuperado quando o <xref:System.Reflection.Emit.DynamicMethod> objeto é recuperado.</span><span class="sxs-lookup"><span data-stu-id="d8baf-104">The executable code created by the just-in-time (JIT) compiler is reclaimed when the <xref:System.Reflection.Emit.DynamicMethod> object is reclaimed.</span></span> <span data-ttu-id="d8baf-105">Métodos dinâmicos são a maneira mais eficiente para gerar e executar pequenas quantidades de código.</span><span class="sxs-lookup"><span data-stu-id="d8baf-105">Dynamic methods are the most efficient way to generate and execute small amounts of code.</span></span>  
  
 <span data-ttu-id="d8baf-106">Um método dinâmico pode ser hospedado anonimamente ou pode belogically associada com um tipo ou um módulo.</span><span class="sxs-lookup"><span data-stu-id="d8baf-106">A dynamic method can be anonymously hosted, or it can belogically associated with a module or with a type.</span></span>  
  
-   <span data-ttu-id="d8baf-107">Se o método dinâmico é hospedado anonimamente, ele está localizado em um assembly fornecido pelo sistema e, portanto, é isolado de outro código.</span><span class="sxs-lookup"><span data-stu-id="d8baf-107">If the dynamic method is anonymously hosted, it is located in a system-provided assembly, and therefore is isolated from other code.</span></span> <span data-ttu-id="d8baf-108">Por padrão, ele não tem acesso a dados não públicos.</span><span class="sxs-lookup"><span data-stu-id="d8baf-108">By default, it does not have access to any non-public data.</span></span> <span data-ttu-id="d8baf-109">Um método dinâmico hospedado anonimamente pode ter restringido a capacidade de ignorar verificações de visibilidade do compilador JIT, se ela foi concedida <xref:System.Security.Permissions.ReflectionPermission> com o <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> sinalizador.</span><span class="sxs-lookup"><span data-stu-id="d8baf-109">An anonymously hosted dynamic method can have restricted ability to skip the JIT compiler's visibility checks, if it has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="d8baf-110">O nível de confiança do assembly cujos membros públicos não são acessados pelo método dinâmico deve ser igual a ou um subconjunto de nível de confiança da pilha de chamadas que emitiu o método dinâmico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-110">The trust level of the assembly whose non-public members are accessed by the dynamic method must be equal to, or a subset of, the trust level of the call stack that emitted the dynamic method.</span></span> <span data-ttu-id="d8baf-111">Para obter mais informações sobre métodos dinâmicos hospedados anonimamente, consulte [passo a passo: emitindo código em cenários de confiança parcial](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md).</span><span class="sxs-lookup"><span data-stu-id="d8baf-111">For more information about anonymously hosted dynamic methods, see [Walkthrough: Emitting Code in Partial Trust Scenarios](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md).</span></span>  
  
-   <span data-ttu-id="d8baf-112">Se o método dinâmico estiver associado um módulo que você especificar, o método dinâmico é efetivamente global para que o módulo.</span><span class="sxs-lookup"><span data-stu-id="d8baf-112">If the dynamic method is associated with a module that you specify, the dynamic method is effectively global to that module.</span></span> <span data-ttu-id="d8baf-113">Ele pode acessar todos os tipos no módulo e todas as `internal` (`Friend` no Visual Basic) membros dos tipos.</span><span class="sxs-lookup"><span data-stu-id="d8baf-113">It can access all types in the module and all `internal` (`Friend` in Visual Basic) members of the types.</span></span> <span data-ttu-id="d8baf-114">Você pode associar um dinâmico método com qualquer módulo, independentemente se você criou o módulo, contanto que uma solicitação de <xref:System.Security.Permissions.ReflectionPermission> com o <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> sinalizador pode ser atendido pela pilha de chamada que inclui seu código.</span><span class="sxs-lookup"><span data-stu-id="d8baf-114">You can associate a dynamic method with any module, regardless of whether you created the module, provided that a demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag can be satisfied by the call stack that includes your code.</span></span> <span data-ttu-id="d8baf-115">Se o <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> sinalizador é incluído na concessão, o método dinâmico pode ignorar verificações de visibilidade do compilador JIT e acessar os dados privados de todos os tipos declarados no módulo ou em qualquer outro módulo em qualquer assembly.</span><span class="sxs-lookup"><span data-stu-id="d8baf-115">If the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag is included in the grant, the dynamic method can skip the JIT compiler's visibility checks and access the private data of all types declared in the module or in any other module in any assembly.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="d8baf-116">Quando você especificar o módulo ao qual um método dinâmico está associado, que o módulo não deve ser no assembly fornecido pelo sistema que é usado para hospedar anônimo.</span><span class="sxs-lookup"><span data-stu-id="d8baf-116">When you specify the module with which a dynamic method is associated, that module must not be in the system-provided assembly that is used for anonymous hosting.</span></span>  
  
-   <span data-ttu-id="d8baf-117">Se o método dinâmico estiver associado um tipo que você especificar, ele tem acesso a todos os membros do tipo, independentemente do nível de acesso.</span><span class="sxs-lookup"><span data-stu-id="d8baf-117">If the dynamic method is associated with a type that you specify, it has access to all members of the type, regardless of access level.</span></span> <span data-ttu-id="d8baf-118">Além disso, as verificações de visibilidade JIT podem ser ignoradas.</span><span class="sxs-lookup"><span data-stu-id="d8baf-118">In addition, JIT visibility checks can be skipped.</span></span> <span data-ttu-id="d8baf-119">Isso fornece o acesso de método dinâmico para os dados privados de outros tipos declarados no mesmo módulo ou em qualquer outro módulo em qualquer assembly.</span><span class="sxs-lookup"><span data-stu-id="d8baf-119">This gives the dynamic method access to the private data of other types declared in the same module or in any other module in any assembly.</span></span> <span data-ttu-id="d8baf-120">Você pode associar um método dinâmico com qualquer tipo, mas seu código deve ser concedido <xref:System.Security.Permissions.ReflectionPermission> com ambos os <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> e <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> sinalizadores.</span><span class="sxs-lookup"><span data-stu-id="d8baf-120">You can associate a dynamic method with any type, but your code must be granted <xref:System.Security.Permissions.ReflectionPermission> with both the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> and <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flags.</span></span>  
  
 <span data-ttu-id="d8baf-121">A tabela a seguir mostra os tipos e membros estão acessíveis para um método dinâmico hospedado anonimamente, com e sem verificações de visibilidade JIT, dependendo se <xref:System.Security.Permissions.ReflectionPermission> com o <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> sinalizador é concedido.</span><span class="sxs-lookup"><span data-stu-id="d8baf-121">The following table shows which types and members are accessible to an anonymously hosted dynamic method, with and without JIT visibility checks, depending on whether <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag is granted.</span></span>  
  
||<span data-ttu-id="d8baf-122">Sem <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span><span class="sxs-lookup"><span data-stu-id="d8baf-122">Without <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span></span>|<span data-ttu-id="d8baf-123">com <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span><span class="sxs-lookup"><span data-stu-id="d8baf-123">With <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span></span>|  
|-|-|-|  
|<span data-ttu-id="d8baf-124">Sem ignorar verificações de visibilidade JIT</span><span class="sxs-lookup"><span data-stu-id="d8baf-124">Without skipping JIT visibility checks</span></span>|<span data-ttu-id="d8baf-125">Membros públicos de tipos públicos em qualquer assembly.</span><span class="sxs-lookup"><span data-stu-id="d8baf-125">Public members of public types in any assembly.</span></span>|<span data-ttu-id="d8baf-126">Membros públicos de tipos públicos em qualquer assembly.</span><span class="sxs-lookup"><span data-stu-id="d8baf-126">Public members of public types in any assembly.</span></span>|  
|<span data-ttu-id="d8baf-127">Ignorando JIT visibilidade verifica, com restrições</span><span class="sxs-lookup"><span data-stu-id="d8baf-127">Skipping JIT visibility checks, with restrictions</span></span>|<span data-ttu-id="d8baf-128">Membros públicos de tipos públicos em qualquer assembly.</span><span class="sxs-lookup"><span data-stu-id="d8baf-128">Public members of public types in any assembly.</span></span>|<span data-ttu-id="d8baf-129">Todos os membros de todos os tipos, apenas em assemblies cujos níveis de confiança são igual ou menor que o nível de confiança do assembly que emitiu o método dinâmico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-129">All members of all types, only in assemblies whose trust levels are equal to or less than the trust level of the assembly that emitted the dynamic method.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="d8baf-130">Antes do [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], emitindo código necessário <xref:System.Security.Permissions.ReflectionPermission> com o <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> sinalizador.</span><span class="sxs-lookup"><span data-stu-id="d8baf-130">Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], emitting code required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="d8baf-131">Essa permissão é incluída por padrão no FullTrust e LocalIntranet conjuntos de permissão nomeada, mas não a Internet conjunto de permissões.</span><span class="sxs-lookup"><span data-stu-id="d8baf-131">This permission is included by default in the FullTrust and LocalIntranet named permission sets, but not in the Internet permission set.</span></span> <span data-ttu-id="d8baf-132">Portanto, em versões anteriores do [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] uma biblioteca pode ser usada com permissões de Internet somente se ele tiver o <xref:System.Security.SecurityCriticalAttribute> de atributos e também executa uma <xref:System.Security.PermissionSet.Assert%2A> para <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>.</span><span class="sxs-lookup"><span data-stu-id="d8baf-132">Therefore, in earlier versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] a library can be used with Internet permissions only if it has the <xref:System.Security.SecurityCriticalAttribute> attribute and also executes an <xref:System.Security.PermissionSet.Assert%2A> for <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>.</span></span> <span data-ttu-id="d8baf-133">Tais bibliotecas exigem uma análise atenta da segurança, pois erros de código poderiam resultar em falhas de segurança.</span><span class="sxs-lookup"><span data-stu-id="d8baf-133">Such libraries require careful security review because coding errors could result in security holes.</span></span> <span data-ttu-id="d8baf-134">O [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)] permite que o código seja emitido em cenários de confiança parcial sem emitir qualquer demanda de segurança, pois a geração de código não é uma operação inerentemente privilegiada.</span><span class="sxs-lookup"><span data-stu-id="d8baf-134">The [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)] allows code to be emitted in partial trust scenarios without issuing any security demands, because generating code is not inherently a privileged operation.</span></span> <span data-ttu-id="d8baf-135">Ou seja, o código gerado não tem mais permissões que o assembly que o emite.</span><span class="sxs-lookup"><span data-stu-id="d8baf-135">That is, the generated code has no more permissions than the assembly that emits it.</span></span> <span data-ttu-id="d8baf-136">Isso permite que as bibliotecas que emitem código tenham a segurança transparente e remove a necessidade de declarar <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>, o que simplifica a tarefa de escrever uma biblioteca de segurança.</span><span class="sxs-lookup"><span data-stu-id="d8baf-136">This allows libraries that emit code to be security transparent and removes the need to assert <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>, which simplifies the task of writing a secure library.</span></span> <span data-ttu-id="d8baf-137">Para usar esse recurso, seu aplicativo deve ter como destino o [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou posterior.</span><span class="sxs-lookup"><span data-stu-id="d8baf-137">To use this feature, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 <span data-ttu-id="d8baf-138">A tabela a seguir mostra os tipos e membros são acessíveis para um método dinâmico que é associado a um módulo ou com um tipo em um módulo.</span><span class="sxs-lookup"><span data-stu-id="d8baf-138">The following table shows which types and members are accessible to a dynamic method that is associated with a module or with a type in a module.</span></span>  
  
||<span data-ttu-id="d8baf-139">Associados com o módulo</span><span class="sxs-lookup"><span data-stu-id="d8baf-139">Associated with module</span></span>|<span data-ttu-id="d8baf-140">Associados com tipo</span><span class="sxs-lookup"><span data-stu-id="d8baf-140">Associated with type</span></span>|  
|-|-|-|  
|<span data-ttu-id="d8baf-141">Sem ignorar verificações de visibilidade JIT</span><span class="sxs-lookup"><span data-stu-id="d8baf-141">Without skipping JIT visibility checks</span></span>|<span data-ttu-id="d8baf-142">Membros públicos e internos de tipos públicos, particulares e internos no módulo.</span><span class="sxs-lookup"><span data-stu-id="d8baf-142">Public and internal members of public, internal, and private types in the module.</span></span><br /><br /> <span data-ttu-id="d8baf-143">Membros públicos de tipos públicos em qualquer assembly.</span><span class="sxs-lookup"><span data-stu-id="d8baf-143">Public members of public types in any assembly.</span></span>|<span data-ttu-id="d8baf-144">Todos os membros do tipo associado.</span><span class="sxs-lookup"><span data-stu-id="d8baf-144">All members of the associated type.</span></span> <span data-ttu-id="d8baf-145">Membros públicos e internos de todos os outros tipos de módulo.</span><span class="sxs-lookup"><span data-stu-id="d8baf-145">Public and internal members of all the other types in the module.</span></span><br /><br /> <span data-ttu-id="d8baf-146">Membros públicos de tipos públicos em qualquer assembly.</span><span class="sxs-lookup"><span data-stu-id="d8baf-146">Public members of public types in any assembly.</span></span>|  
|<span data-ttu-id="d8baf-147">Ignorar verificações de visibilidade JIT</span><span class="sxs-lookup"><span data-stu-id="d8baf-147">Skipping JIT visibility checks</span></span>|<span data-ttu-id="d8baf-148">Todos os membros de todos os tipos em qualquer assembly.</span><span class="sxs-lookup"><span data-stu-id="d8baf-148">All members of all types in any assembly.</span></span>|<span data-ttu-id="d8baf-149">Todos os membros de todos os tipos em qualquer assembly.</span><span class="sxs-lookup"><span data-stu-id="d8baf-149">All members of all types in any assembly.</span></span>|  
  
 <span data-ttu-id="d8baf-150">Um método dinâmico que está associado um módulo tem as permissões de que o módulo.</span><span class="sxs-lookup"><span data-stu-id="d8baf-150">A dynamic method that is associated with a module has the permissions of that module.</span></span> <span data-ttu-id="d8baf-151">Um método dinâmico que está associado um tipo tem as permissões do módulo que contém esse tipo.</span><span class="sxs-lookup"><span data-stu-id="d8baf-151">A dynamic method that is associated with a type has the permissions of the module containing that type.</span></span>  
  
 <span data-ttu-id="d8baf-152">Métodos dinâmicos e seus parâmetros não precisa ser nomeado, mas você pode especificar nomes para auxiliar na depuração.</span><span class="sxs-lookup"><span data-stu-id="d8baf-152">Dynamic methods and their parameters do not have to be named, but you can specify names to assist in debugging.</span></span> <span data-ttu-id="d8baf-153">Não há suporte para os atributos personalizados em métodos dinâmicos ou seus parâmetros.</span><span class="sxs-lookup"><span data-stu-id="d8baf-153">Custom attributes are not supported on dynamic methods or their parameters.</span></span>  
  
 <span data-ttu-id="d8baf-154">Embora sejam métodos dinâmicos `static` métodos (`Shared` métodos no Visual Basic), o relaxada regras de associação de delegado introduzidos na [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] permitir um método dinâmico a ser associado a um objeto, para que ele atue como um método de instância quando chamado usando essa instância do delegado.</span><span class="sxs-lookup"><span data-stu-id="d8baf-154">Although dynamic methods are `static` methods (`Shared` methods in Visual Basic), the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] allow a dynamic method to be bound to an object, so that it acts like an instance method when called using that delegate instance.</span></span> <span data-ttu-id="d8baf-155">Um exemplo que demonstra isso é fornecido para o <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> sobrecarga do método.</span><span class="sxs-lookup"><span data-stu-id="d8baf-155">An example that demonstrates this is provided for the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8baf-156">No [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], métodos dinâmicos não dão suporte a informações de símbolo, que é, nomes de variáveis locais e mapeamento de número de linha.</span><span class="sxs-lookup"><span data-stu-id="d8baf-156">In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], dynamic methods do not support symbol information, that is, local variable names and line-number mapping.</span></span> <span data-ttu-id="d8baf-157">Essa limitação pode ser removida em uma versão futura.</span><span class="sxs-lookup"><span data-stu-id="d8baf-157">This limitation might be removed in a future version.</span></span> <span data-ttu-id="d8baf-158">Você pode usar <xref:System.Reflection.Emit.AssemblyBuilder> durante o desenvolvimento para simplificar a depuração de linguagem intermediária Microsoft (MSIL) gerada e, em seguida, alternar para métodos dinâmicos durante a implantação final, porque o <xref:System.Reflection.Emit.ILGenerator> chamadas são os mesmos em ambos os casos.</span><span class="sxs-lookup"><span data-stu-id="d8baf-158">You can use <xref:System.Reflection.Emit.AssemblyBuilder> during development to simplify debugging the generated Microsoft intermediate language (MSIL), and then switch to dynamic methods during final deployment, because the <xref:System.Reflection.Emit.ILGenerator> calls are the same in both cases.</span></span>  
  
## <a name="verification"></a><span data-ttu-id="d8baf-159">Verificação</span><span class="sxs-lookup"><span data-stu-id="d8baf-159">Verification</span></span>  
 <span data-ttu-id="d8baf-160">A lista a seguir resume as condições sob as quais métodos dinâmicos podem conter código não verificado.</span><span class="sxs-lookup"><span data-stu-id="d8baf-160">The following list summarizes the conditions under which dynamic methods can contain unverifiable code.</span></span> <span data-ttu-id="d8baf-161">(Por exemplo, um método dinâmico é não verificado se seu <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> está definida como `false`.)</span><span class="sxs-lookup"><span data-stu-id="d8baf-161">(For example, a dynamic method is unverifiable if its <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property is set to `false`.)</span></span>  
  
-   <span data-ttu-id="d8baf-162">Um método dinâmico que está associado um assembly críticas de segurança também é crítico de segurança e pode ignorar a verificação.</span><span class="sxs-lookup"><span data-stu-id="d8baf-162">A dynamic method that is associated with a security-critical assembly is also security-critical, and can skip verification.</span></span> <span data-ttu-id="d8baf-163">Por exemplo, um assembly sem atributos de segurança que é executado como um aplicativo de área de trabalho é tratado como críticas de segurança em tempo de execução.</span><span class="sxs-lookup"><span data-stu-id="d8baf-163">For example, an assembly without security attributes that is run as a desktop application is treated as security-critical by the runtime.</span></span> <span data-ttu-id="d8baf-164">Se você associar um método dinâmico com o assembly, o método dinâmico pode conter código não verificado.</span><span class="sxs-lookup"><span data-stu-id="d8baf-164">If you associate a dynamic method with the assembly, the dynamic method can contain unverifiable code.</span></span>  
  
-   <span data-ttu-id="d8baf-165">Se um método dinâmico que contém o código não verificado estiver associado um assembly com transparência de nível 1, o compilador just-in-time (JIT) injeta uma exigência de segurança.</span><span class="sxs-lookup"><span data-stu-id="d8baf-165">If a dynamic method that contains unverifiable code is associated with an assembly that has level 1 transparency, the just-in-time (JIT) compiler injects a security demand.</span></span> <span data-ttu-id="d8baf-166">A solicitação será bem-sucedida apenas se o método dinâmico é executado por código totalmente confiável.</span><span class="sxs-lookup"><span data-stu-id="d8baf-166">The demand succeeds only if the dynamic method is executed by fully trusted code.</span></span> <span data-ttu-id="d8baf-167">Consulte [código transparente de segurança, nível 1](~/docs/framework/misc/security-transparent-code-level-1.md).</span><span class="sxs-lookup"><span data-stu-id="d8baf-167">See [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md).</span></span>  
  
-   <span data-ttu-id="d8baf-168">Se um método dinâmico que contém o código não verificado estiver associado um assembly com transparência de nível 2 (como mscorlib), ele gerará uma exceção (inserida pelo compilador JIT) em vez de fazer uma exigência de segurança.</span><span class="sxs-lookup"><span data-stu-id="d8baf-168">If a dynamic method that contains unverifiable code is associated with an assembly that has level 2 transparency (such as mscorlib.dll), it throws an exception (injected by the JIT compiler) instead of making a security demand.</span></span> <span data-ttu-id="d8baf-169">Consulte [código transparente de segurança, nível 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="d8baf-169">See [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
-   <span data-ttu-id="d8baf-170">Um método dinâmico hospedado anonimamente que contém o código não verificado sempre gera uma exceção.</span><span class="sxs-lookup"><span data-stu-id="d8baf-170">An anonymously hosted dynamic method that contains unverifiable code always throws an exception.</span></span> <span data-ttu-id="d8baf-171">Ele nunca pode ignorar a verificação, mesmo se ele é criado e executado por código totalmente confiável.</span><span class="sxs-lookup"><span data-stu-id="d8baf-171">It can never skip verification, even if it is created and executed by fully trusted code.</span></span>  
  
 <span data-ttu-id="d8baf-172">A exceção que é lançada para código não verificado varia dependendo do modo que de método dinâmico é invocado.</span><span class="sxs-lookup"><span data-stu-id="d8baf-172">The exception that is thrown for unverifiable code varies depending on the way the dynamic method is invoked.</span></span> <span data-ttu-id="d8baf-173">Se você invocar um método dinâmico, usando um representante retornado do <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> método, uma <xref:System.Security.VerificationException> é gerada.</span><span class="sxs-lookup"><span data-stu-id="d8baf-173">If you invoke a dynamic method by using a delegate returned from the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method, a <xref:System.Security.VerificationException> is thrown.</span></span> <span data-ttu-id="d8baf-174">Se você invocar o método dinâmico usando o <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> método, uma <xref:System.Reflection.TargetInvocationException> é lançada com uma interna <xref:System.Security.VerificationException>.</span><span class="sxs-lookup"><span data-stu-id="d8baf-174">If you invoke the dynamic method by using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, a <xref:System.Reflection.TargetInvocationException> is thrown with an inner <xref:System.Security.VerificationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d8baf-175">O exemplo de código a seguir cria um método dinâmico que usa dois parâmetros.</span><span class="sxs-lookup"><span data-stu-id="d8baf-175">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="d8baf-176">O exemplo emite um corpo de função simples que imprime o primeiro parâmetro para o console e o exemplo usa o segundo parâmetro como o valor de retorno do método.</span><span class="sxs-lookup"><span data-stu-id="d8baf-176">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="d8baf-177">O exemplo conclui o método criando um representante, invoca o delegado com parâmetros diferentes e, por fim, chama o método dinâmico usando o <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> método.</span><span class="sxs-lookup"><span data-stu-id="d8baf-177">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.All#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.All#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d8baf-178">Cria um método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-178">Creates a dynamic method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d8baf-179">O nome do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-179">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="d8baf-180">Isso pode ser uma cadeia de comprimento zero, mas não pode ser <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-180">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="d8baf-181">Um objeto <see cref="T:System.Type" /> que especifica o tipo de retorno do método dinâmico ou <see langword="null" /> se o método não tiver nenhum tipo de retorno.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-181">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="d8baf-182">Uma matriz de objetos <see cref="T:System.Type" /> que especifica os tipos dos parâmetros do método dinâmico ou <see langword="null" />, se o método não tiver nenhum parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-182">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d8baf-183">Inicializa um método dinâmico hospedado anonimamente, especificando o nome do método, o tipo de retorno e os tipos de parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-183">Initializes an anonymously hosted dynamic method, specifying the method name, return type, and parameter types.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-184">O método dinâmico criado por este construtor é associado um assembly anônimo em vez de um módulo ou um tipo existente.</span><span class="sxs-lookup"><span data-stu-id="d8baf-184">The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.</span></span> <span data-ttu-id="d8baf-185">O assembly anônimo existe somente para fornecer um ambiente de área restrita para métodos dinâmicos, ou seja, para isolá-los de outro código.</span><span class="sxs-lookup"><span data-stu-id="d8baf-185">The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.</span></span> <span data-ttu-id="d8baf-186">Esse ambiente torna segura para o método dinâmico a ser emitido e executados pelo código parcialmente confiável.</span><span class="sxs-lookup"><span data-stu-id="d8baf-186">This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.</span></span>  
  
 <span data-ttu-id="d8baf-187">Este construtor Especifica que visibilidade do just-in-time (JIT) verifica será imposta para o Microsoft intermediate language (MSIL) do método dinâmico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-187">This constructor specifies that just-in-time (JIT) visibility checks will be enforced for the Microsoft intermediate language (MSIL) of the dynamic method.</span></span> <span data-ttu-id="d8baf-188">Ou seja, o código no método dinâmico tem acesso aos métodos públicos de classes públicas.</span><span class="sxs-lookup"><span data-stu-id="d8baf-188">That is, the code in the dynamic method has access to public methods of public classes.</span></span> <span data-ttu-id="d8baf-189">Se o método tentar acessar tipos ou membros que são as exceções são geradas `private`, `protected`, ou `internal` (`Friend` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="d8baf-189">Exceptions are thrown if the method tries to access types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="d8baf-190">Para criar um método dinâmico que restringiu a capacidade de ignorar verificações de visibilidade JIT, use o <xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29> construtor.</span><span class="sxs-lookup"><span data-stu-id="d8baf-190">To create a dynamic method that has restricted ability to skip JIT visibility checks, use the <xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29> constructor.</span></span>  
  
 <span data-ttu-id="d8baf-191">Quando um método dinâmico hospedado anonimamente é construído, a pilha de chamadas do assembly emissão está incluída.</span><span class="sxs-lookup"><span data-stu-id="d8baf-191">When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.</span></span> <span data-ttu-id="d8baf-192">Quando o método é chamado, as permissões do assembly emissão são usadas em vez de permissões do chamador real.</span><span class="sxs-lookup"><span data-stu-id="d8baf-192">When the method is invoked, the permissions of the emitting assembly are used instead of the permissions of the actual caller.</span></span> <span data-ttu-id="d8baf-193">Portanto, o método dinâmico não pode executar em um nível mais alto de privilégio do que o assembly que é emitido, mesmo se ele é passado para e executado por um assembly que tem um nível mais alto de confiança.</span><span class="sxs-lookup"><span data-stu-id="d8baf-193">Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</span></span>  
  
 <span data-ttu-id="d8baf-194">Este construtor Especifica os atributos de método <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> e <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>e a convenção de chamada <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="d8baf-194">This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and the calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8baf-195">Este construtor foi introduzido no [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou posterior.</span><span class="sxs-lookup"><span data-stu-id="d8baf-195">This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d8baf-196">Um elemento de <paramref name="parameterTypes" /> é <see langword="null" /> ou <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-196">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d8baf-197">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-197">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="d8baf-198">
            <paramref name="returnType" /> é um tipo para o qual <see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-198">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, bool restrictedSkipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, bool restrictedSkipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), restrictedSkipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, bool restrictedSkipVisibility);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="restrictedSkipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d8baf-199">O nome do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-199">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="d8baf-200">Isso pode ser uma cadeia de comprimento zero, mas não pode ser <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-200">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="d8baf-201">Um objeto <see cref="T:System.Type" /> que especifica o tipo de retorno do método dinâmico ou <see langword="null" /> se o método não tiver nenhum tipo de retorno.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-201">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="d8baf-202">Uma matriz de objetos <see cref="T:System.Type" /> que especifica os tipos dos parâmetros do método dinâmico ou <see langword="null" />, se o método não tiver nenhum parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-202">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="restrictedSkipVisibility">
          <span data-ttu-id="d8baf-203">
            <see langword="true" /> para ignorar as verificações de visibilidade JIT nos tipos e membros acessados pelo MSIL do método dinâmico, com essa restrição: o nível de confiança dos assemblies que contêm esses tipos e membros deve ser igual ou menor do que o nível de confiança da pilha de chamadas que emite o método dinâmico, caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-203">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method, with this restriction: the trust level of the assemblies that contain those types and members must be equal to or less than the trust level of the call stack that emits the dynamic method; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d8baf-204">Inicializa um método dinâmico hospedado anonimamente, especificando o nome do método, o tipo de retorno, os tipos de parâmetro e se as verificações de visibilidade JIT (Just-In-Time) devem ser ignoradas para os tipos e membros acessados pelo MSIL (Microsoft Intermediate Language) do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-204">Initializes an anonymously hosted dynamic method, specifying the method name, return type, parameter types, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-205">O método dinâmico criado por este construtor é associado um assembly anônimo em vez de um módulo ou um tipo existente.</span><span class="sxs-lookup"><span data-stu-id="d8baf-205">The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.</span></span> <span data-ttu-id="d8baf-206">O assembly anônimo existe somente para fornecer um ambiente de área restrita para métodos dinâmicos, ou seja, para isolá-los de outro código.</span><span class="sxs-lookup"><span data-stu-id="d8baf-206">The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.</span></span> <span data-ttu-id="d8baf-207">Esse ambiente torna segura para o método dinâmico a ser emitido e executados pelo código parcialmente confiável.</span><span class="sxs-lookup"><span data-stu-id="d8baf-207">This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.</span></span>  
  
 <span data-ttu-id="d8baf-208">Métodos dinâmicos hospedados anonimamente não têm acesso automático a qualquer tipos ou membros que são `private`, `protected`, ou `internal` (`Friend` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="d8baf-208">Anonymously hosted dynamic methods do not have automatic access to any types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="d8baf-209">Isso é diferente de métodos dinâmicos que estão associados um tipo existente ou um módulo, que têm acesso a membros ocultos no escopo de seus associado.</span><span class="sxs-lookup"><span data-stu-id="d8baf-209">This is different from dynamic methods that are associated with an existing type or module, which have access to hidden members in their associated scope.</span></span>  
  
 <span data-ttu-id="d8baf-210">Especifique `true` para `restrictedSkipVisibility` se o método dinâmico tiver que acessar tipos ou membros que são `private`, `protected`, ou `internal`.</span><span class="sxs-lookup"><span data-stu-id="d8baf-210">Specify `true` for `restrictedSkipVisibility` if your dynamic method has to access types or members that are `private`, `protected`, or `internal`.</span></span> <span data-ttu-id="d8baf-211">Isso fornece o acesso de método dinâmico restringido a esses membros.</span><span class="sxs-lookup"><span data-stu-id="d8baf-211">This gives the dynamic method restricted access to these members.</span></span> <span data-ttu-id="d8baf-212">Ou seja, os membros podem ser acessados apenas se as seguintes condições forem atendidas:</span><span class="sxs-lookup"><span data-stu-id="d8baf-212">That is, the members can be accessed only if the following conditions are met:</span></span>  
  
-   <span data-ttu-id="d8baf-213">Os membros de destino pertencem a um assembly que tem um nível de confiança igual ou menor do que a pilha de chamadas que emite o método dinâmico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-213">The target members belong to an assembly that has a level of trust equal to or lower than the call stack that emits the dynamic method.</span></span>  
  
-   <span data-ttu-id="d8baf-214">A pilha de chamadas que emite o método dinâmico é concedida <xref:System.Security.Permissions.ReflectionPermission> com o <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> sinalizador.</span><span class="sxs-lookup"><span data-stu-id="d8baf-214">The call stack that emits the dynamic method is granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="d8baf-215">Isso é sempre verdadeiro quando o código é executado com confiança total.</span><span class="sxs-lookup"><span data-stu-id="d8baf-215">This is always true when the code is executed with full trust.</span></span> <span data-ttu-id="d8baf-216">Para código parcialmente confiável, ele é true somente se o host explicitamente concede a permissão.</span><span class="sxs-lookup"><span data-stu-id="d8baf-216">For partially trusted code, it is true only if the host explicitly grants the permission.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="d8baf-217">Se a permissão não foi concedida, uma exceção de segurança é lançada quando <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> é chamado ou quando o método dinâmico é invocado, não quando este construtor é chamado.</span><span class="sxs-lookup"><span data-stu-id="d8baf-217">If the permission has not been granted, a security exception is thrown when <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> is called or when the dynamic method is invoked, not when this constructor is called.</span></span> <span data-ttu-id="d8baf-218">Nenhuma permissão especial é necessária para emitir o método dinâmico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-218">No special permissions are required to emit the dynamic method.</span></span>  
  
 <span data-ttu-id="d8baf-219">Por exemplo, um método dinâmico é criado com `restrictedSkipVisibility` definida como `true` pode acessar um membro privado de qualquer módulo na pilha de chamadas do caso a pilha de chamadas tenha sido concedida acesso de membro restrito.</span><span class="sxs-lookup"><span data-stu-id="d8baf-219">For example, a dynamic method that is created with `restrictedSkipVisibility` set to `true` can access a private member of any assembly on the call stack if the call stack has been granted restricted member access.</span></span> <span data-ttu-id="d8baf-220">Se o método dinâmico é criado com código parcialmente confiável na pilha de chamadas, ele não pode acessar um membro privado de um tipo em um [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] assembly, pois esses assemblies são totalmente confiáveis.</span><span class="sxs-lookup"><span data-stu-id="d8baf-220">If the dynamic method is created with partially trusted code on the call stack, it cannot access a private member of a type in a [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] assembly, because such assemblies are fully trusted.</span></span>  
  
 <span data-ttu-id="d8baf-221">Se `restrictedSkipVisibility` é `false`, visibilidade JIT verifica são impostas.</span><span class="sxs-lookup"><span data-stu-id="d8baf-221">If `restrictedSkipVisibility` is `false`, JIT visibility checks are enforced.</span></span> <span data-ttu-id="d8baf-222">O código no método dinâmico tem acesso a métodos públicos de classes públicas, e se tentar acessar tipos ou membros que são as exceções são geradas `private`, `protected`, ou `internal`.</span><span class="sxs-lookup"><span data-stu-id="d8baf-222">The code in the dynamic method has access to public methods of public classes, and exceptions are thrown if it tries to access types or members that are `private`, `protected`, or `internal`.</span></span>  
  
 <span data-ttu-id="d8baf-223">Quando um método dinâmico hospedado anonimamente é construído, a pilha de chamadas do assembly emissão está incluída.</span><span class="sxs-lookup"><span data-stu-id="d8baf-223">When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.</span></span> <span data-ttu-id="d8baf-224">Quando o método é chamado, as permissões da pilha de chamada de emissão são usadas em vez de permissões do chamador real.</span><span class="sxs-lookup"><span data-stu-id="d8baf-224">When the method is invoked, the permissions of the emitting call stack are used instead of the permissions of the actual caller.</span></span> <span data-ttu-id="d8baf-225">Portanto, o método dinâmico não pode executar em um nível mais alto de privilégio do que o assembly que é emitido, mesmo se ele é passado para e executado por um assembly que tem um nível mais alto de confiança.</span><span class="sxs-lookup"><span data-stu-id="d8baf-225">Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</span></span>  
  
 <span data-ttu-id="d8baf-226">Este construtor Especifica os atributos de método <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> e <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>e a convenção de chamada <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="d8baf-226">This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and the calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8baf-227">Este construtor foi introduzido no [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou posterior.</span><span class="sxs-lookup"><span data-stu-id="d8baf-227">This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d8baf-228">Um elemento de <paramref name="parameterTypes" /> é <see langword="null" /> ou <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-228">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d8baf-229">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-229">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="d8baf-230">
            <paramref name="returnType" /> é um tipo para o qual <see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-230">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), m As Module)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d8baf-231">O nome do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-231">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="d8baf-232">Isso pode ser uma cadeia de comprimento zero, mas não pode ser <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-232">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="d8baf-233">Um objeto <see cref="T:System.Type" /> que especifica o tipo de retorno do método dinâmico ou <see langword="null" /> se o método não tiver nenhum tipo de retorno.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-233">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="d8baf-234">Uma matriz de objetos <see cref="T:System.Type" /> que especifica os tipos dos parâmetros do método dinâmico ou <see langword="null" />, se o método não tiver nenhum parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-234">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="m">
          <span data-ttu-id="d8baf-235">Um <see cref="T:System.Reflection.Module" /> que representa o módulo com o qual o método dinâmico deve ser logicamente associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-235">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d8baf-236">Cria um método dinâmico global para um módulo, especificando o nome do método, o tipo de retorno, os tipos de parâmetro e o módulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-236">Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-237">Este construtor Especifica atributos de método <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> e <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, convenção de chamada <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>e não ignorar verificações de visibilidade just-in-time (JIT).</span><span class="sxs-lookup"><span data-stu-id="d8baf-237">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>, and does not skip just-in-time (JIT) visibility checks.</span></span>  
  
 <span data-ttu-id="d8baf-238">O método dinâmico criado com esse construtor tem acesso ao público e `internal` (`Friend` no Visual Basic) membros de todos os tipos contidos no módulo `m`.</span><span class="sxs-lookup"><span data-stu-id="d8baf-238">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types contained in module `m`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8baf-239">Para compatibilidade com versões anteriores, este construtor demandas <xref:System.Security.Permissions.SecurityPermission> com o <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> sinalizador se as seguintes condições forem true: `m` é um módulo diferente do módulo chamador e a demanda por <xref:System.Security.Permissions.ReflectionPermission> com o <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> sinalizador falhou.</span><span class="sxs-lookup"><span data-stu-id="d8baf-239">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="d8baf-240">Se a demanda por <xref:System.Security.Permissions.SecurityPermission> for bem-sucedida, a operação é permitida.</span><span class="sxs-lookup"><span data-stu-id="d8baf-240">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8baf-241">Começando com o [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], esse membro não requer mais <xref:System.Security.Permissions.ReflectionPermission> com o <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> sinalizador.</span><span class="sxs-lookup"><span data-stu-id="d8baf-241">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="d8baf-242">(Consulte [problemas de segurança em reflexão emitir](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Para usar essa funcionalidade, seu aplicativo deve ser direcionado ao [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou posterior.</span><span class="sxs-lookup"><span data-stu-id="d8baf-242">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d8baf-243">O exemplo de código a seguir cria um método dinâmico que usa dois parâmetros.</span><span class="sxs-lookup"><span data-stu-id="d8baf-243">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="d8baf-244">O exemplo emite um corpo de função simples que imprime o primeiro parâmetro para o console e o exemplo usa o segundo parâmetro como o valor de retorno do método.</span><span class="sxs-lookup"><span data-stu-id="d8baf-244">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="d8baf-245">O exemplo conclui o método criando um representante, invoca o delegado com parâmetros diferentes e, por fim, chama o método dinâmico usando o <xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> método.</span><span class="sxs-lookup"><span data-stu-id="d8baf-245">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d8baf-246">Um elemento de <paramref name="parameterTypes" /> é <see langword="null" /> ou <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-246">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="d8baf-247">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-247">-or-</span>
          </span>
          <span data-ttu-id="d8baf-248">
            <paramref name="m" /> é um módulo que fornece hospedagem anônima para métodos dinâmicos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-248">
              <paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d8baf-249">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-249">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d8baf-250">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-250">-or-</span>
          </span>
          <span data-ttu-id="d8baf-251">
            <paramref name="m" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-251">
              <paramref name="m" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="d8baf-252">
            <paramref name="returnType" /> é um tipo para o qual <see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-252">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="d8baf-253">para associar a um módulo diferente do módulo chamador do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-253">to associate the dynamic method with a module other than the calling module.</span>
          </span>
          <span data-ttu-id="d8baf-254">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-254">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), owner As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d8baf-255">O nome do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-255">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="d8baf-256">Isso pode ser uma cadeia de comprimento zero, mas não pode ser <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-256">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="d8baf-257">Um objeto <see cref="T:System.Type" /> que especifica o tipo de retorno do método dinâmico ou <see langword="null" /> se o método não tiver nenhum tipo de retorno.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-257">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="d8baf-258">Uma matriz de objetos <see cref="T:System.Type" /> que especifica os tipos dos parâmetros do método dinâmico ou <see langword="null" />, se o método não tiver nenhum parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-258">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="owner">
          <span data-ttu-id="d8baf-259">Um <see cref="T:System.Type" /> ao qual o método dinâmico está logicamente associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-259">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span>
          </span>
          <span data-ttu-id="d8baf-260">O método dinâmico tem acesso a todos os membros do tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-260">The dynamic method has access to all members of the type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d8baf-261">Cria um método dinâmico, especificando o nome do método, o tipo de retorno, os tipos de parâmetro e o tipo ao qual o método dinâmico está logicamente associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-261">Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-262">O método dinâmico criado com esse construtor tem acesso a todos os membros do tipo `owner`e ao público e `internal` (`Friend` no Visual Basic) membros de todos os outros tipos de módulo que contém `owner`.</span><span class="sxs-lookup"><span data-stu-id="d8baf-262">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`.</span></span>  
  
 <span data-ttu-id="d8baf-263">Este construtor Especifica atributos de método <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> e <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, convenção de chamada <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>e não ignorar verificações de visibilidade just-in-time (JIT).</span><span class="sxs-lookup"><span data-stu-id="d8baf-263">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>, and does not skip just-in-time (JIT) visibility checks.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8baf-264">Para compatibilidade com versões anteriores, este construtor demandas <xref:System.Security.Permissions.SecurityPermission> com o <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> sinalizador se as seguintes condições forem true: `owner` está em um módulo diferente do módulo chamador e a demanda por <xref:System.Security.Permissions.ReflectionPermission> com o <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> sinalizador falhou.</span><span class="sxs-lookup"><span data-stu-id="d8baf-264">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="d8baf-265">Se a demanda por <xref:System.Security.Permissions.SecurityPermission> for bem-sucedida, a operação é permitida.</span><span class="sxs-lookup"><span data-stu-id="d8baf-265">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8baf-266">Começando com o [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], esse membro não requer mais <xref:System.Security.Permissions.ReflectionPermission> com o <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> sinalizador.</span><span class="sxs-lookup"><span data-stu-id="d8baf-266">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="d8baf-267">(Consulte [problemas de segurança em reflexão emitir](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Para usar essa funcionalidade, seu aplicativo deve ser direcionado ao [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou posterior.</span><span class="sxs-lookup"><span data-stu-id="d8baf-267">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d8baf-268">O exemplo de código a seguir cria um <xref:System.Reflection.Emit.DynamicMethod> logicamente associado a um tipo.</span><span class="sxs-lookup"><span data-stu-id="d8baf-268">The following code example creates a <xref:System.Reflection.Emit.DynamicMethod> that is logically associated with a type.</span></span> <span data-ttu-id="d8baf-269">Essa associação fornece acesso para os membros particulares desse tipo.</span><span class="sxs-lookup"><span data-stu-id="d8baf-269">This association gives it access to the private members of that type.</span></span>  
  
 <span data-ttu-id="d8baf-270">O exemplo de código define uma classe denominada `Example` com um campo particular, uma classe denominada `DerivedFromxample` que deriva de primeira classe, um tipo de representante chamado `UseLikeStatic` que retorna <xref:System.Int32> e tem parâmetros de tipo `Example` e <xref:System.Int32>e um tipo de representante chamado `UseLikeInstance` que retorna <xref:System.Int32> e tem um parâmetro de tipo <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="d8baf-270">The code example defines a class named `Example` with a private field, a class named `DerivedFromxample` that derives from the first class, a delegate type named `UseLikeStatic` that returns <xref:System.Int32> and has parameters of type `Example` and <xref:System.Int32>, and a delegate type named `UseLikeInstance` that returns <xref:System.Int32> and has one parameter of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="d8baf-271">O exemplo de código cria um <xref:System.Reflection.Emit.DynamicMethod> que altera o campo privado de uma instância de `Example` e retorna o valor anterior.</span><span class="sxs-lookup"><span data-stu-id="d8baf-271">The example code then creates a <xref:System.Reflection.Emit.DynamicMethod> that changes the private field of an instance of `Example` and returns the previous value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8baf-272">Em geral, alterar os campos internos de classes não é boa prática de codificação orientada a objeto.</span><span class="sxs-lookup"><span data-stu-id="d8baf-272">In general, changing the internal fields of classes is not good object-oriented coding practice.</span></span>  
  
 <span data-ttu-id="d8baf-273">O exemplo de código cria uma instância de `Example` e, em seguida, cria dois delegados.</span><span class="sxs-lookup"><span data-stu-id="d8baf-273">The example code creates an instance of `Example` and then creates two delegates.</span></span> <span data-ttu-id="d8baf-274">A primeira é do tipo `UseLikeStatic`, que tem os mesmos parâmetros de método dinâmico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-274">The first is of type `UseLikeStatic`, which has the same parameters as the dynamic method.</span></span> <span data-ttu-id="d8baf-275">O segundo é do tipo `UseLikeInstance`, que não tem o primeiro parâmetro (do tipo `Example`).</span><span class="sxs-lookup"><span data-stu-id="d8baf-275">The second is of type `UseLikeInstance`, which lacks the first parameter (of type `Example`).</span></span> <span data-ttu-id="d8baf-276">Este delegado é criado usando o <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> sobrecarga de método; o segundo parâmetro dessa sobrecarga de método é uma instância de `Example`, nesse caso a instância que acabou de criar, que está associada ao representante recém-criado.</span><span class="sxs-lookup"><span data-stu-id="d8baf-276">This delegate is created using the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload; the second parameter of that method overload is an instance of `Example`, in this case the instance just created, which is bound to the newly created delegate.</span></span> <span data-ttu-id="d8baf-277">Sempre que esse delegado é invocado, o método dinâmico atua na instância associada do `Example`.</span><span class="sxs-lookup"><span data-stu-id="d8baf-277">Whenever that delegate is invoked, the dynamic method acts on the bound instance of `Example`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8baf-278">Este é um exemplo das regras reduzidas delegado associação introduzidos no [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], juntamente com novas sobrecargas do <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="d8baf-278">This is an example of the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], along with new overloads of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d8baf-279">Para obter mais informações, consulte a classe <xref:System.Delegate>.</span><span class="sxs-lookup"><span data-stu-id="d8baf-279">For more information, see the <xref:System.Delegate> class.</span></span>  
  
 <span data-ttu-id="d8baf-280">O `UseLikeStatic` delegado é invocado, passando na instância do `Example` que é associado ao `UseLikeInstance` delegate.</span><span class="sxs-lookup"><span data-stu-id="d8baf-280">The `UseLikeStatic` delegate is invoked, passing in the instance of `Example` that is bound to the `UseLikeInstance` delegate.</span></span> <span data-ttu-id="d8baf-281">Em seguida, o `UseLikeInstance` delegado é invocado, para que ambos os delegados agir na mesma instância de `Example`.</span><span class="sxs-lookup"><span data-stu-id="d8baf-281">Then the `UseLikeInstance` delegate is invoked, so that both delegates act on the same instance of `Example`.</span></span> <span data-ttu-id="d8baf-282">As alterações nos valores do campo interno são exibidas após cada chamada.</span><span class="sxs-lookup"><span data-stu-id="d8baf-282">The changes in the values of the internal field are displayed after each call.</span></span> <span data-ttu-id="d8baf-283">Por fim, um `UseLikeInstance` representante está associado a uma instância de `DerivedFromxample`, e as chamadas de delegado são repetidas.</span><span class="sxs-lookup"><span data-stu-id="d8baf-283">Finally, a `UseLikeInstance` delegate is bound to an instance of `DerivedFromxample`, and the delegate calls are repeated.</span></span>  
  
 [!code-csharp[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/cs/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d8baf-284">Um elemento de <paramref name="parameterTypes" /> é <see langword="null" /> ou <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-284">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="d8baf-285">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-285">-or-</span>
          </span>
          <span data-ttu-id="d8baf-286">
            <paramref name="owner" /> é uma interface, uma matriz, um tipo genérico aberto ou um parâmetro de tipo de um método ou tipo genérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-286">
              <paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d8baf-287">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-287">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d8baf-288">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-288">-or-</span>
          </span>
          <span data-ttu-id="d8baf-289">
            <paramref name="owner" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-289">
              <paramref name="owner" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="d8baf-290">
            <paramref name="returnType" /> é <see langword="null" /> ou é um tipo para o qual <see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-290">
              <paramref name="returnType" /> is <see langword="null" />, or is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="d8baf-291">para associar a um tipo em um módulo diferente do módulo chamador do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-291">to associate the dynamic method with a type in a module other than the calling module.</span>
          </span>
          <span data-ttu-id="d8baf-292">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-292">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), m As Module, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m, bool skipVisibility);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d8baf-293">O nome do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-293">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="d8baf-294">Isso pode ser uma cadeia de comprimento zero, mas não pode ser <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-294">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="d8baf-295">Um objeto <see cref="T:System.Type" /> que especifica o tipo de retorno do método dinâmico ou <see langword="null" /> se o método não tiver nenhum tipo de retorno.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-295">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="d8baf-296">Uma matriz de objetos <see cref="T:System.Type" /> que especifica os tipos dos parâmetros do método dinâmico ou <see langword="null" />, se o método não tiver nenhum parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-296">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="m">
          <span data-ttu-id="d8baf-297">Um <see cref="T:System.Reflection.Module" /> que representa o módulo com o qual o método dinâmico deve ser logicamente associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-297">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated.</span>
          </span>
        </param>
        <param name="skipVisibility">
          <span data-ttu-id="d8baf-298">
            <see langword="true" /> para ignorar as verificações de visibilidade JIT nos tipos e membros acessados pelo MSIL do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-298">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d8baf-299">Cria um método dinâmico que é global para um módulo, especificando o nome do método, o tipo de retorno, os tipos de parâmetro, o módulo e se as verificações de visibilidade JIT (just-in-time) devem ser ignoradas para os tipos e membros acessados pelo MSIL (Microsoft Intermediate Language) do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-299">Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-300">Este construtor Especifica atributos de método <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> e <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>e a convenção de chamada <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="d8baf-300">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="d8baf-301">O método dinâmico criado com esse construtor tem acesso ao público e `internal` (`Friend` no Visual Basic) membros de todos os tipos no módulo independente `m`.</span><span class="sxs-lookup"><span data-stu-id="d8baf-301">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types in contained module `m`.</span></span> <span data-ttu-id="d8baf-302">Ignorando o JIT verificações de visibilidade do compilador permite que o método dinâmico acessar membros particulares e protegidos de todos os outros tipos.</span><span class="sxs-lookup"><span data-stu-id="d8baf-302">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="d8baf-303">Isso é útil, por exemplo, ao escrever código para serializar objetos.</span><span class="sxs-lookup"><span data-stu-id="d8baf-303">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8baf-304">Para compatibilidade com versões anteriores, este construtor demandas <xref:System.Security.Permissions.SecurityPermission> com o <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> sinalizador se as seguintes condições forem true: `m` é um módulo diferente do módulo chamador e a demanda por <xref:System.Security.Permissions.ReflectionPermission> com o <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> sinalizador falhou.</span><span class="sxs-lookup"><span data-stu-id="d8baf-304">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="d8baf-305">Se a demanda por <xref:System.Security.Permissions.SecurityPermission> for bem-sucedida, a operação é permitida.</span><span class="sxs-lookup"><span data-stu-id="d8baf-305">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8baf-306">Começando com o [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], esse membro não requer mais <xref:System.Security.Permissions.ReflectionPermission> com o <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> sinalizador.</span><span class="sxs-lookup"><span data-stu-id="d8baf-306">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="d8baf-307">(Consulte [problemas de segurança em reflexão emitir](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Para usar essa funcionalidade, seu aplicativo deve ser direcionado ao [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou posterior.</span><span class="sxs-lookup"><span data-stu-id="d8baf-307">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d8baf-308">Um elemento de <paramref name="parameterTypes" /> é <see langword="null" /> ou <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-308">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="d8baf-309">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-309">-or-</span>
          </span>
          <span data-ttu-id="d8baf-310">
            <paramref name="m" /> é um módulo que fornece hospedagem anônima para métodos dinâmicos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-310">
              <paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d8baf-311">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-311">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d8baf-312">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-312">-or-</span>
          </span>
          <span data-ttu-id="d8baf-313">
            <paramref name="m" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-313">
              <paramref name="m" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="d8baf-314">
            <paramref name="returnType" /> é um tipo para o qual <see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-314">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="d8baf-315">para associar a um módulo diferente do módulo chamador do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-315">to associate the dynamic method with a module other than the calling module.</span>
          </span>
          <span data-ttu-id="d8baf-316">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-316">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), owner As Type, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner, bool skipVisibility);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d8baf-317">O nome do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-317">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="d8baf-318">Isso pode ser uma cadeia de comprimento zero, mas não pode ser <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-318">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="d8baf-319">Um objeto <see cref="T:System.Type" /> que especifica o tipo de retorno do método dinâmico ou <see langword="null" /> se o método não tiver nenhum tipo de retorno.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-319">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="d8baf-320">Uma matriz de objetos <see cref="T:System.Type" /> que especifica os tipos dos parâmetros do método dinâmico ou <see langword="null" />, se o método não tiver nenhum parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-320">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="owner">
          <span data-ttu-id="d8baf-321">Um <see cref="T:System.Type" /> ao qual o método dinâmico está logicamente associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-321">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span>
          </span>
          <span data-ttu-id="d8baf-322">O método dinâmico tem acesso a todos os membros do tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-322">The dynamic method has access to all members of the type.</span>
          </span>
        </param>
        <param name="skipVisibility">
          <span data-ttu-id="d8baf-323">
            <see langword="true" /> para ignorar as verificações de visibilidade JIT nos tipos e membros acessados pelo MSIL do método dinâmico, caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-323">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d8baf-324">Cria um método dinâmico, especificando o nome do método, o tipo de retorno, os tipos de parâmetro, o tipo como qual o método dinâmico é logicamente associado e se as verificações de visibilidade JIT (just-in-time) devem ser ignoradas para tipos e membros acessados pelo MSIL (Microsoft Intermediate Language) do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-324">Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-325">O método dinâmico criado com esse construtor tem acesso a todos os membros do tipo `owner`e ao público e `internal` (`Friend` no Visual Basic) membros de todos os outros tipos de módulo que contém `owner`.</span><span class="sxs-lookup"><span data-stu-id="d8baf-325">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`.</span></span> <span data-ttu-id="d8baf-326">Ignorando o JIT verificações de visibilidade do compilador permite que o método dinâmico acessar membros particulares e protegidos de todos os outros tipos.</span><span class="sxs-lookup"><span data-stu-id="d8baf-326">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="d8baf-327">Isso é útil, por exemplo, ao escrever código para serializar objetos.</span><span class="sxs-lookup"><span data-stu-id="d8baf-327">This is useful, for example, when writing code to serialize objects.</span></span>  
  
 <span data-ttu-id="d8baf-328">Este construtor Especifica atributos de método <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> e <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>e a convenção de chamada <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="d8baf-328">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8baf-329">Para compatibilidade com versões anteriores, este construtor demandas <xref:System.Security.Permissions.SecurityPermission> com o <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> sinalizador se as seguintes condições forem true: `owner` está em um módulo diferente do módulo chamador e a demanda por <xref:System.Security.Permissions.ReflectionPermission> com o <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> sinalizador falhou.</span><span class="sxs-lookup"><span data-stu-id="d8baf-329">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="d8baf-330">Se a demanda por <xref:System.Security.Permissions.SecurityPermission> for bem-sucedida, a operação é permitida.</span><span class="sxs-lookup"><span data-stu-id="d8baf-330">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8baf-331">Começando com o [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], esse membro não requer mais <xref:System.Security.Permissions.ReflectionPermission> com o <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> sinalizador.</span><span class="sxs-lookup"><span data-stu-id="d8baf-331">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="d8baf-332">(Consulte [problemas de segurança em reflexão emitir](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Para usar essa funcionalidade, seu aplicativo deve ser direcionado ao [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou posterior.</span><span class="sxs-lookup"><span data-stu-id="d8baf-332">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d8baf-333">Um elemento de <paramref name="parameterTypes" /> é <see langword="null" /> ou <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-333">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="d8baf-334">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-334">-or-</span>
          </span>
          <span data-ttu-id="d8baf-335">
            <paramref name="owner" /> é uma interface, uma matriz, um tipo genérico aberto ou um parâmetro de tipo de um método ou tipo genérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-335">
              <paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d8baf-336">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-336">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d8baf-337">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-337">-or-</span>
          </span>
          <span data-ttu-id="d8baf-338">
            <paramref name="owner" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-338">
              <paramref name="owner" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="d8baf-339">
            <paramref name="returnType" /> é <see langword="null" /> ou é um tipo para o qual <see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-339">
              <paramref name="returnType" /> is <see langword="null" />, or is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="d8baf-340">para associar a um tipo em um módulo diferente do módulo chamador do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-340">to associate the dynamic method with a type in a module other than the calling module.</span>
          </span>
          <span data-ttu-id="d8baf-341">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-341">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), m As Module, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m, bool skipVisibility);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d8baf-342">O nome do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-342">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="d8baf-343">Isso pode ser uma cadeia de caracteres de comprimento zero, mas não pode ser <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-343">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="d8baf-344">Uma combinação bit a bit de valores <see cref="T:System.Reflection.MethodAttributes" /> que especifica os atributos do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-344">A bitwise combination of <see cref="T:System.Reflection.MethodAttributes" /> values that specifies the attributes of the dynamic method.</span>
          </span>
          <span data-ttu-id="d8baf-345">A única combinação permitida é <see cref="F:System.Reflection.MethodAttributes.Public" /> e <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-345">The only combination allowed is <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          </span>
        </param>
        <param name="callingConvention">
          <span data-ttu-id="d8baf-346">A convenção de chamada para o método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-346">The calling convention for the dynamic method.</span>
          </span>
          <span data-ttu-id="d8baf-347">Deve ser <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-347">Must be <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="d8baf-348">Um objeto <see cref="T:System.Type" /> que especifica o tipo de retorno do método dinâmico ou <see langword="null" />, se o método não tiver nenhum tipo de retorno.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-348">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="d8baf-349">Uma matriz de objetos <see cref="T:System.Type" /> que especifica os tipos dos parâmetros do método dinâmico ou <see langword="null" />, se o método não tiver nenhum parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-349">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="m">To be added.</param>
        <param name="skipVisibility">
          <span data-ttu-id="d8baf-350">
            <see langword="true" /> para ignorar as verificações de visibilidade JIT nos tipos e membros acessados pelo MSIL do método dinâmico, caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-350">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d8baf-351">Cria um método dinâmico que é global para um módulo, especificando o nome do método, os atributos, a convenção de chamada, o tipo de retorno, os tipos de parâmetro, o módulo e se as verificações de visibilidade JIT (just-in-time) devem ser ignoradas para os tipos e membros acessados pelo MSIL (Microsoft Intermediate Language) do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-351">Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-352">O método dinâmico criado com esse construtor tem acesso ao público e `internal` (`Friend` no Visual Basic) membros de todos os tipos de públicos e internos contidos no módulo `m`.</span><span class="sxs-lookup"><span data-stu-id="d8baf-352">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the public and internal types contained in module `m`.</span></span>  
  
 <span data-ttu-id="d8baf-353">Ignorando o JIT verificações de visibilidade do compilador permite que o método dinâmico acessar membros particulares e protegidos de todos os outros tipos de módulo e em todos os outros assemblies.</span><span class="sxs-lookup"><span data-stu-id="d8baf-353">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types in the module and in all other assemblies as well.</span></span> <span data-ttu-id="d8baf-354">Isso é útil, por exemplo, ao escrever código para serializar objetos.</span><span class="sxs-lookup"><span data-stu-id="d8baf-354">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8baf-355">Para compatibilidade com versões anteriores, este construtor demandas <xref:System.Security.Permissions.SecurityPermission> com o <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> sinalizador se as seguintes condições forem true: `m` é um módulo diferente do módulo chamador e a demanda por <xref:System.Security.Permissions.ReflectionPermission> com o <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> sinalizador falhou.</span><span class="sxs-lookup"><span data-stu-id="d8baf-355">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="d8baf-356">Se a demanda por <xref:System.Security.Permissions.SecurityPermission> for bem-sucedida, a operação é permitida.</span><span class="sxs-lookup"><span data-stu-id="d8baf-356">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8baf-357">Começando com o [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], esse membro não requer mais <xref:System.Security.Permissions.ReflectionPermission> com o <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> sinalizador.</span><span class="sxs-lookup"><span data-stu-id="d8baf-357">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="d8baf-358">(Consulte [problemas de segurança em reflexão emitir](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Para usar essa funcionalidade, seu aplicativo deve ser direcionado ao [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou posterior.</span><span class="sxs-lookup"><span data-stu-id="d8baf-358">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d8baf-359">Um elemento de <paramref name="parameterTypes" /> é <see langword="null" /> ou <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-359">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="d8baf-360">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-360">-or-</span>
          </span>
          <span data-ttu-id="d8baf-361">
            <paramref name="m" /> é um módulo que fornece hospedagem anônima para métodos dinâmicos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-361">
              <paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d8baf-362">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-362">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d8baf-363">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-363">-or-</span>
          </span>
          <span data-ttu-id="d8baf-364">
            <paramref name="m" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-364">
              <paramref name="m" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="d8baf-365">
            <paramref name="attributes" /> é uma combinação de sinalizadores diferente de <see cref="F:System.Reflection.MethodAttributes.Public" /> e <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-365">
              <paramref name="attributes" /> is a combination of flags other than <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          </span>
          <span data-ttu-id="d8baf-366">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-366">-or-</span>
          </span>
          <span data-ttu-id="d8baf-367">
            <paramref name="callingConvention" /> não é <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-367">
              <paramref name="callingConvention" /> is not <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          </span>
          <span data-ttu-id="d8baf-368">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-368">-or-</span>
          </span>
          <span data-ttu-id="d8baf-369">
            <paramref name="returnType" /> é um tipo para o qual <see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-369">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="d8baf-370">para associar a um módulo diferente do módulo chamador do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-370">to associate the dynamic method with a module other than the calling module.</span>
          </span>
          <span data-ttu-id="d8baf-371">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-371">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), owner As Type, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner, bool skipVisibility);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d8baf-372">O nome do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-372">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="d8baf-373">Isso pode ser uma cadeia de caracteres de comprimento zero, mas não pode ser <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-373">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="d8baf-374">Uma combinação bit a bit de valores <see cref="T:System.Reflection.MethodAttributes" /> que especifica os atributos do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-374">A bitwise combination of <see cref="T:System.Reflection.MethodAttributes" /> values that specifies the attributes of the dynamic method.</span>
          </span>
          <span data-ttu-id="d8baf-375">A única combinação permitida é <see cref="F:System.Reflection.MethodAttributes.Public" /> e <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-375">The only combination allowed is <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          </span>
        </param>
        <param name="callingConvention">
          <span data-ttu-id="d8baf-376">A convenção de chamada para o método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-376">The calling convention for the dynamic method.</span>
          </span>
          <span data-ttu-id="d8baf-377">Deve ser <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-377">Must be <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="d8baf-378">Um objeto <see cref="T:System.Type" /> que especifica o tipo de retorno do método dinâmico ou <see langword="null" />, se o método não tiver nenhum tipo de retorno.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-378">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="d8baf-379">Uma matriz de objetos <see cref="T:System.Type" /> que especifica os tipos dos parâmetros do método dinâmico ou <see langword="null" />, se o método não tiver nenhum parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-379">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="owner">
          <span data-ttu-id="d8baf-380">Um <see cref="T:System.Type" /> ao qual o método dinâmico está logicamente associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-380">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span>
          </span>
          <span data-ttu-id="d8baf-381">O método dinâmico tem acesso a todos os membros do tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-381">The dynamic method has access to all members of the type.</span>
          </span>
        </param>
        <param name="skipVisibility">
          <span data-ttu-id="d8baf-382">
            <see langword="true" /> para ignorar as verificações de visibilidade JIT nos tipos e membros acessados pelo MSIL do método dinâmico, caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-382">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d8baf-383">Cria um método dinâmico, especificando o nome do método, os atributos, a convenção de chamada, o tipo de retorno, os tipos de parâmetro, o tipo como qual o método dinâmico é logicamente associado e se as verificações de visibilidade JIT (just-in-time) devem ser ignoradas para tipos e membros acessados pelo MSIL (Microsoft Intermediate Language) do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-383">Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-384">O método dinâmico é global para o módulo que contém o tipo `owner`.</span><span class="sxs-lookup"><span data-stu-id="d8baf-384">The dynamic method is global to the module that contains the type `owner`.</span></span> <span data-ttu-id="d8baf-385">Ele tem acesso a todos os membros do tipo `owner`.</span><span class="sxs-lookup"><span data-stu-id="d8baf-385">It has access to all members of the type `owner`.</span></span>  
  
 <span data-ttu-id="d8baf-386">O método dinâmico criado com esse construtor tem acesso a todos os membros do tipo `owner`e ao público e `internal` (`Friend` no Visual Basic) membros de todos os tipos contidos no módulo que contém `owner`.</span><span class="sxs-lookup"><span data-stu-id="d8baf-386">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the types contained in the module that contains `owner`.</span></span> <span data-ttu-id="d8baf-387">Ignorando o JIT verificações de visibilidade do compilador permite que o método dinâmico acessar membros particulares e protegidos de todos os outros tipos.</span><span class="sxs-lookup"><span data-stu-id="d8baf-387">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="d8baf-388">Isso é útil, por exemplo, ao escrever código para serializar objetos.</span><span class="sxs-lookup"><span data-stu-id="d8baf-388">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8baf-389">Para compatibilidade com versões anteriores, este construtor demandas <xref:System.Security.Permissions.SecurityPermission> com o <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> sinalizador se as seguintes condições forem true: `owner` está em um módulo diferente do módulo chamador e a demanda por <xref:System.Security.Permissions.ReflectionPermission> com o <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> sinalizador falhou.</span><span class="sxs-lookup"><span data-stu-id="d8baf-389">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="d8baf-390">Se a demanda por <xref:System.Security.Permissions.SecurityPermission> for bem-sucedida, a operação é permitida.</span><span class="sxs-lookup"><span data-stu-id="d8baf-390">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8baf-391">Começando com o [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], esse membro não requer mais <xref:System.Security.Permissions.ReflectionPermission> com o <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> sinalizador.</span><span class="sxs-lookup"><span data-stu-id="d8baf-391">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="d8baf-392">(Consulte [problemas de segurança em reflexão emitir](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Para usar essa funcionalidade, seu aplicativo deve ser direcionado ao [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou posterior.</span><span class="sxs-lookup"><span data-stu-id="d8baf-392">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d8baf-393">Um elemento de <paramref name="parameterTypes" /> é <see langword="null" /> ou <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-393">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="d8baf-394">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-394">-or-</span>
          </span>
          <span data-ttu-id="d8baf-395">
            <paramref name="owner" /> é uma interface, uma matriz, um tipo genérico aberto ou um parâmetro de tipo de um método ou tipo genérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-395">
              <paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d8baf-396">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-396">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d8baf-397">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-397">-or-</span>
          </span>
          <span data-ttu-id="d8baf-398">
            <paramref name="owner" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-398">
              <paramref name="owner" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="d8baf-399">
            <paramref name="attributes" /> é uma combinação de sinalizadores diferente de <see cref="F:System.Reflection.MethodAttributes.Public" /> e <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-399">
              <paramref name="attributes" /> is a combination of flags other than <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          </span>
          <span data-ttu-id="d8baf-400">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-400">-or-</span>
          </span>
          <span data-ttu-id="d8baf-401">
            <paramref name="callingConvention" /> não é <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-401">
              <paramref name="callingConvention" /> is not <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          </span>
          <span data-ttu-id="d8baf-402">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-402">-or-</span>
          </span>
          <span data-ttu-id="d8baf-403">
            <paramref name="returnType" /> é um tipo para o qual <see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-403">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="d8baf-404">para associar a um tipo em um módulo diferente do módulo chamador do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-404">to associate the dynamic method with a type in a module other than the calling module.</span>
          </span>
          <span data-ttu-id="d8baf-405">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-405">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Attributes As MethodAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodAttributes Attributes { System::Reflection::MethodAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d8baf-406">Obtém os atributos especificados quando o método dinâmico foi criado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-406">Gets the attributes specified when the dynamic method was created.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d8baf-407">Uma combinação bit a bit do <see cref="T:System.Reflection.MethodAttributes" /> valores que representam os atributos para o método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-407">A bitwise combination of the <see cref="T:System.Reflection.MethodAttributes" /> values representing the attributes for the method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-408">Atualmente, os atributos de método para um método dinâmico estão sempre <xref:System.Reflection.MethodAttributes.Public> e <xref:System.Reflection.MethodAttributes.Static>.</span><span class="sxs-lookup"><span data-stu-id="d8baf-408">Currently, the method attributes for a dynamic method are always <xref:System.Reflection.MethodAttributes.Public> and <xref:System.Reflection.MethodAttributes.Static>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d8baf-409">O exemplo de código a seguir exibe os atributos de método de um método dinâmico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-409">The following code example displays the method attributes of a dynamic method.</span></span> <span data-ttu-id="d8baf-410">Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="d8baf-410">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#21](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#21)]
 [!code-csharp[Reflection.DynamicMethod.All#21](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#21)]
 [!code-vb[Reflection.DynamicMethod.All#21](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public override System.Reflection.CallingConventions CallingConvention { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.CallingConventions CallingConvention" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CallingConvention As CallingConventions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::CallingConventions CallingConvention { System::Reflection::CallingConventions get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.CallingConventions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d8baf-411">Obtém a convenção de chamada especificada quando o método dinâmico foi criado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-411">Gets the calling convention specified when the dynamic method was created.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d8baf-412">Uma da <see cref="T:System.Reflection.CallingConventions" /> valores que indicam a convenção de chamada do método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-412">One of the <see cref="T:System.Reflection.CallingConventions" /> values that indicates the calling convention of the method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-413">Atualmente, a convenção de chamada para um método dinâmico é sempre <xref:System.Reflection.CallingConventions.Standard>.</span><span class="sxs-lookup"><span data-stu-id="d8baf-413">Currently, the calling convention for a dynamic method is always <xref:System.Reflection.CallingConventions.Standard>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d8baf-414">O exemplo de código a seguir exibe a convenção de chamada de um método dinâmico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-414">The following code example displays the calling convention of a dynamic method.</span></span> <span data-ttu-id="d8baf-415">Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="d8baf-415">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#22](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#22)]
 [!code-csharp[Reflection.DynamicMethod.All#22](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#22)]
 [!code-vb[Reflection.DynamicMethod.All#22](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDelegate">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d8baf-416">Conclui o método dinâmico e cria um delegado que pode ser usado para executá-lo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-416">Completes the dynamic method and creates a delegate that can be used to execute it.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public override sealed Delegate CreateDelegate (Type delegateType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Delegate CreateDelegate(class System.Type delegateType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function CreateDelegate (delegateType As Type) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Delegate ^ CreateDelegate(Type ^ delegateType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="d8baf-417">Um tipo de delegado cuja assinatura corresponde à do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-417">A delegate type whose signature matches that of the dynamic method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d8baf-418">Conclui o método dinâmico e cria um delegado que pode ser usado para executá-lo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-418">Completes the dynamic method and creates a delegate that can be used to execute it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d8baf-419">Um delegado do tipo especificado, que pode ser usado para executar o método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-419">A delegate of the specified type, which can be used to execute the dynamic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-420">Chamando o <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> método ou o <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> método conclui o método dinâmico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-420">Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method.</span></span> <span data-ttu-id="d8baf-421">Qualquer tentativa de alterar o método dinâmico, como a modificação de definições de parâmetro mais ou emitem mais linguagem intermediária Microsoft (MSIL) é ignorada; nenhuma exceção é lançada.</span><span class="sxs-lookup"><span data-stu-id="d8baf-421">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="d8baf-422">Para criar um corpo de método para um método dinâmico quando você tem seu próprio gerador MSIL, chame o <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> método para obter um <xref:System.Reflection.Emit.DynamicILInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="d8baf-422">To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="d8baf-423">Se você não tiver seu próprio gerador MSIL, chame o <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> método para obter um <xref:System.Reflection.Emit.ILGenerator> objeto que pode ser usado para gerar o corpo do método.</span><span class="sxs-lookup"><span data-stu-id="d8baf-423">If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d8baf-424">O exemplo de código a seguir cria um método dinâmico que usa dois parâmetros.</span><span class="sxs-lookup"><span data-stu-id="d8baf-424">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="d8baf-425">O exemplo emite um corpo de função simples que imprime o primeiro parâmetro para o console e o exemplo usa o segundo parâmetro como o valor de retorno do método.</span><span class="sxs-lookup"><span data-stu-id="d8baf-425">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="d8baf-426">O exemplo conclui o método criando um representante, invoca o delegado com parâmetros diferentes e, por fim, chama o método dinâmico usando o <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> método.</span><span class="sxs-lookup"><span data-stu-id="d8baf-426">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d8baf-427">O método dinâmico não tem nenhum corpo de método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-427">The dynamic method has no method body.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d8baf-428">
            <paramref name="delegateType" /> tem o número de parâmetros incorreto ou tipos de parâmetro incorretos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-428">
              <paramref name="delegateType" /> has the wrong number of parameters or the wrong parameter types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public override sealed Delegate CreateDelegate (Type delegateType, object target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Delegate CreateDelegate(class System.Type delegateType, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function CreateDelegate (delegateType As Type, target As Object) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Delegate ^ CreateDelegate(Type ^ delegateType, System::Object ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="d8baf-429">Um tipo de delegado cuja assinatura corresponde à do método dinâmico, menos o primeiro parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-429">A delegate type whose signature matches that of the dynamic method, minus the first parameter.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="d8baf-430">Um objeto ao qual o delegado está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-430">An object the delegate is bound to.</span>
          </span>
          <span data-ttu-id="d8baf-431">Deve ser do mesmo tipo que o primeiro parâmetro do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-431">Must be of the same type as the first parameter of the dynamic method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d8baf-432">Conclui o método dinâmico e cria um delegado que pode ser usado para executá-lo, especificando o tipo de delegado e um objeto ao qual o delegado está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-432">Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d8baf-433">Um delegado do tipo especificado, que pode ser usado para executar o método dinâmico com o objeto de destino especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-433">A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-434">Essa sobrecarga de método cria um delegado associado a um objeto específico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-434">This method overload creates a delegate bound to a particular object.</span></span> <span data-ttu-id="d8baf-435">Tal um delegado deve ser fechada em seu primeiro argumento.</span><span class="sxs-lookup"><span data-stu-id="d8baf-435">Such a delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="d8baf-436">Embora o método é estático, ele atua como se fosse um método de instância; a instância é `target`.</span><span class="sxs-lookup"><span data-stu-id="d8baf-436">Although the method is static, it acts as if it were an instance method; the instance is `target`.</span></span>  
  
 <span data-ttu-id="d8baf-437">Essa sobrecarga de método requer `target` para ser do mesmo tipo, como o primeiro parâmetro do método dinâmico ou ser atribuído a esse tipo (por exemplo, uma classe derivada).</span><span class="sxs-lookup"><span data-stu-id="d8baf-437">This method overload requires `target` to be of the same type as the first parameter of the dynamic method, or to be assignable to that type (for example, a derived class).</span></span>  <span data-ttu-id="d8baf-438">A assinatura de `delegateType` tem todos os parâmetros de método dinâmico, exceto o primeiro.</span><span class="sxs-lookup"><span data-stu-id="d8baf-438">The signature of `delegateType` has all the parameters of the dynamic method except the first.</span></span> <span data-ttu-id="d8baf-439">Por exemplo, se o método dinâmico tem os parâmetros <xref:System.String>, <xref:System.Int32>, e <xref:System.Byte>, em seguida, `delegateType` os parâmetros <xref:System.Int32> e <xref:System.Byte>; `target` is of type <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="d8baf-439">For example, if the dynamic method has the parameters <xref:System.String>, <xref:System.Int32>, and <xref:System.Byte>, then `delegateType` has the parameters <xref:System.Int32> and <xref:System.Byte>; `target` is of type <xref:System.String>.</span></span>  
  
 <span data-ttu-id="d8baf-440">Chamando o <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> método ou o <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> método conclui o método dinâmico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-440">Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method.</span></span> <span data-ttu-id="d8baf-441">Qualquer tentativa de alterar o método dinâmico, como a modificação de definições de parâmetro mais ou emitem mais linguagem intermediária Microsoft (MSIL) é ignorada; nenhuma exceção é lançada.</span><span class="sxs-lookup"><span data-stu-id="d8baf-441">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="d8baf-442">Para criar um corpo de método para um método dinâmico quando você tem seu próprio gerador MSIL, chame o <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> método para obter um <xref:System.Reflection.Emit.DynamicILInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="d8baf-442">To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="d8baf-443">Se você não tiver seu próprio gerador MSIL, chame o <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> método para obter um <xref:System.Reflection.Emit.ILGenerator> objeto que pode ser usado para gerar o corpo do método.</span><span class="sxs-lookup"><span data-stu-id="d8baf-443">If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d8baf-444">O exemplo de código a seguir cria o delegado que associa um <xref:System.Reflection.Emit.DynamicMethod> a uma instância de um tipo, para que o método atua na mesma instância de cada vez que ele é invocado.</span><span class="sxs-lookup"><span data-stu-id="d8baf-444">The following code example creates delegate that binds a <xref:System.Reflection.Emit.DynamicMethod> to an instance of a type, so that the method acts on the same instance each time it is invoked.</span></span>  
  
 <span data-ttu-id="d8baf-445">O exemplo de código define uma classe denominada `Example` com um campo particular, uma classe denominada `DerivedFromxample` que deriva de primeira classe, um tipo de representante chamado `UseLikeStatic` que retorna <xref:System.Int32> e tem parâmetros de tipo `Example` e <xref:System.Int32>e um tipo de representante chamado `UseLikeInstance` que retorna <xref:System.Int32> e tem um parâmetro de tipo <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="d8baf-445">The code example defines a class named `Example` with a private field, a class named `DerivedFromxample` that derives from the first class, a delegate type named `UseLikeStatic` that returns <xref:System.Int32> and has parameters of type `Example` and <xref:System.Int32>, and a delegate type named `UseLikeInstance` that returns <xref:System.Int32> and has one parameter of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="d8baf-446">O exemplo de código cria um <xref:System.Reflection.Emit.DynamicMethod> que altera o campo privado de uma instância de `Example` e retorna o valor anterior.</span><span class="sxs-lookup"><span data-stu-id="d8baf-446">The example code then creates a <xref:System.Reflection.Emit.DynamicMethod> that changes the private field of an instance of `Example` and returns the previous value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8baf-447">Em geral, alterar os campos internos de classes não é boa prática de codificação orientada a objeto.</span><span class="sxs-lookup"><span data-stu-id="d8baf-447">In general, changing the internal fields of classes is not good object-oriented coding practice.</span></span>  
  
 <span data-ttu-id="d8baf-448">O exemplo de código cria uma instância de `Example` e, em seguida, cria dois delegados.</span><span class="sxs-lookup"><span data-stu-id="d8baf-448">The example code creates an instance of `Example` and then creates two delegates.</span></span> <span data-ttu-id="d8baf-449">A primeira é do tipo `UseLikeStatic`, que tem os mesmos parâmetros de método dinâmico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-449">The first is of type `UseLikeStatic`, which has the same parameters as the dynamic method.</span></span> <span data-ttu-id="d8baf-450">O segundo é do tipo `UseLikeInstance`, que não tem o primeiro parâmetro (do tipo `Example`).</span><span class="sxs-lookup"><span data-stu-id="d8baf-450">The second is of type `UseLikeInstance`, which lacks the first parameter (of type `Example`).</span></span> <span data-ttu-id="d8baf-451">Este delegado é criado usando o <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> sobrecarga de método; o segundo parâmetro dessa sobrecarga de método é uma instância de `Example`, nesse caso a instância que acabou de criar, que está associada ao representante recém-criado.</span><span class="sxs-lookup"><span data-stu-id="d8baf-451">This delegate is created using the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload; the second parameter of that method overload is an instance of `Example`, in this case the instance just created, which is bound to the newly created delegate.</span></span> <span data-ttu-id="d8baf-452">Sempre que esse delegado é invocado, o método dinâmico atua na instância associada do `Example`.</span><span class="sxs-lookup"><span data-stu-id="d8baf-452">Whenever that delegate is invoked, the dynamic method acts on the bound instance of `Example`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8baf-453">Este é um exemplo das regras reduzidas delegado associação introduzidos no [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], juntamente com novas sobrecargas do <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="d8baf-453">This is an example of the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], along with new overloads of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d8baf-454">Para obter mais informações, consulte a classe <xref:System.Delegate>.</span><span class="sxs-lookup"><span data-stu-id="d8baf-454">For more information, see the <xref:System.Delegate> class.</span></span>  
  
 <span data-ttu-id="d8baf-455">O `UseLikeStatic` delegado é invocado, passando na instância do `Example` que é associado ao `UseLikeInstance` delegate.</span><span class="sxs-lookup"><span data-stu-id="d8baf-455">The `UseLikeStatic` delegate is invoked, passing in the instance of `Example` that is bound to the `UseLikeInstance` delegate.</span></span> <span data-ttu-id="d8baf-456">Em seguida, o `UseLikeInstance` delegado é invocado, para que ambos os delegados agir na mesma instância de `Example`.</span><span class="sxs-lookup"><span data-stu-id="d8baf-456">Then the `UseLikeInstance` delegate is invoked, so that both delegates act on the same instance of `Example`.</span></span> <span data-ttu-id="d8baf-457">As alterações nos valores do campo interno são exibidas após cada chamada.</span><span class="sxs-lookup"><span data-stu-id="d8baf-457">The changes in the values of the internal field are displayed after each call.</span></span> <span data-ttu-id="d8baf-458">Por fim, um `UseLikeInstance` representante está associado a uma instância de `DerivedFromxample`, e as chamadas de delegado são repetidas.</span><span class="sxs-lookup"><span data-stu-id="d8baf-458">Finally, a `UseLikeInstance` delegate is bound to an instance of `DerivedFromxample`, and the delegate calls are repeated.</span></span>  
  
 [!code-csharp[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/cs/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d8baf-459">O método dinâmico não tem nenhum corpo de método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-459">The dynamic method has no method body.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d8baf-460">
            <paramref name="target" /> não é do mesmo tipo que o primeiro parâmetro do método dinâmico e não é atribuível a esse tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-460">
              <paramref name="target" /> is not the same type as the first parameter of the dynamic method, and is not assignable to that type.</span>
          </span>
          <span data-ttu-id="d8baf-461">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-461">-or-</span>
          </span>
          <span data-ttu-id="d8baf-462">
            <paramref name="delegateType" /> tem o número de parâmetros incorreto ou tipos de parâmetro incorretos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-462">
              <paramref name="delegateType" /> has the wrong number of parameters or the wrong parameter types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d8baf-463">Obtém o tipo que declara o método, que é sempre <see langword="null" /> para métodos dinâmicos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-463">Gets the type that declares the method, which is always <see langword="null" /> for dynamic methods.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d8baf-464">Sempre <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-464">Always <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-465">Essa propriedade sempre retorna `null` para métodos dinâmicos.</span><span class="sxs-lookup"><span data-stu-id="d8baf-465">This property always returns `null` for dynamic methods.</span></span> <span data-ttu-id="d8baf-466">Mesmo quando um método dinâmico é logicamente associado um tipo, ele não é declarado pelo tipo.</span><span class="sxs-lookup"><span data-stu-id="d8baf-466">Even when a dynamic method is logically associated with a type, it is not declared by the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d8baf-467">O exemplo de código a seguir exibe o tipo de declaração de um método dinâmico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-467">The following code example displays the declaring type of a dynamic method.</span></span> <span data-ttu-id="d8baf-468">Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="d8baf-468">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#23](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#23)]
 [!code-csharp[Reflection.DynamicMethod.All#23](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#23)]
 [!code-vb[Reflection.DynamicMethod.All#23](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineParameter">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ParameterBuilder DefineParameter (int position, System.Reflection.ParameterAttributes attributes, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ParameterBuilder DefineParameter(int32 position, valuetype System.Reflection.ParameterAttributes attributes, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineParameter (position As Integer, attributes As ParameterAttributes, parameterName As String) As ParameterBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ParameterBuilder ^ DefineParameter(int position, System::Reflection::ParameterAttributes attributes, System::String ^ parameterName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="attributes" Type="System.Reflection.ParameterAttributes" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="position">
          <span data-ttu-id="d8baf-469">A posição do parâmetro na lista de parâmetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-469">The position of the parameter in the parameter list.</span>
          </span>
          <span data-ttu-id="d8baf-470">Os parâmetros são indexados começando com o número 1 para o primeiro parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-470">Parameters are indexed beginning with the number 1 for the first parameter.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="d8baf-471">Uma combinação bit a bit de valores <see cref="T:System.Reflection.ParameterAttributes" /> que especifica os atributos do parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-471">A bitwise combination of <see cref="T:System.Reflection.ParameterAttributes" /> values that specifies the attributes of the parameter.</span>
          </span>
        </param>
        <param name="parameterName">
          <span data-ttu-id="d8baf-472">O nome do parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-472">The name of the parameter.</span>
          </span>
          <span data-ttu-id="d8baf-473">O nome pode ser uma cadeia de caracteres de comprimento zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-473">The name can be a zero-length string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d8baf-474">Define um parâmetro do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-474">Defines a parameter of the dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d8baf-475">Sempre retorna <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-475">Always returns <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-476">Se `position` é 0, o <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> método refere-se ao valor de retorno.</span><span class="sxs-lookup"><span data-stu-id="d8baf-476">If `position` is 0, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method refers to the return value.</span></span> <span data-ttu-id="d8baf-477">Informações de parâmetro de configuração não tem efeito sobre o valor de retorno.</span><span class="sxs-lookup"><span data-stu-id="d8baf-477">Setting parameter information has no effect on the return value.</span></span>  
  
 <span data-ttu-id="d8baf-478">Se o método dinâmico já foi concluído, chamando o <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> ou <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> método, o <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> método não tem nenhum efeito.</span><span class="sxs-lookup"><span data-stu-id="d8baf-478">If the dynamic method has already been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method has no effect.</span></span> <span data-ttu-id="d8baf-479">Nenhuma exceção é lançada.</span><span class="sxs-lookup"><span data-stu-id="d8baf-479">No exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d8baf-480">O exemplo de código a seguir mostra como definir informações de parâmetro para um método dinâmico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-480">The following code example shows how to define parameter information for a dynamic method.</span></span> <span data-ttu-id="d8baf-481">Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="d8baf-481">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#33](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#33)]
 [!code-csharp[Reflection.DynamicMethod.All#33](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#33)]
 [!code-vb[Reflection.DynamicMethod.All#33](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="d8baf-482">O método não tem parâmetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-482">The method has no parameters.</span>
          </span>
          <span data-ttu-id="d8baf-483">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-483">-or-</span>
          </span>
          <span data-ttu-id="d8baf-484">
            <paramref name="position" /> é menor que 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-484">
              <paramref name="position" /> is less than 0.</span>
          </span>
          <span data-ttu-id="d8baf-485">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-485">-or-</span>
          </span>
          <span data-ttu-id="d8baf-486">
            <paramref name="position" /> é maior que o número de parâmetros do método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-486">
              <paramref name="position" /> is greater than the number of the method's parameters.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetBaseDefinition">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo GetBaseDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo GetBaseDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBaseDefinition () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodInfo ^ GetBaseDefinition();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d8baf-487">Retorna a implementação base para o método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-487">Returns the base implementation for the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d8baf-488">A implementação base do método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-488">The base implementation of the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-489">Esse método sempre retorna atual `DynamicMethod` objeto.</span><span class="sxs-lookup"><span data-stu-id="d8baf-489">This method always returns the current `DynamicMethod` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d8baf-490">Retorna os atributos personalizados aplicados ao método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-490">Returns the custom attributes applied to the method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">
          <span data-ttu-id="d8baf-491">
            <see langword="true" /> para pesquisar a cadeia de herança do método para encontrar os atributos personalizados, <see langword="false" /> para verificar apenas o método atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-491">
              <see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d8baf-492">Retorna todos os atributos personalizados definidos para o método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-492">Returns all the custom attributes defined for the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d8baf-493">Uma matriz de objetos que representam todos os atributos personalizados do método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-493">An array of objects representing all the custom attributes of the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-494">Para métodos dinâmicos, especificando `true` para `inherit` não tem nenhum efeito, pois o método não está declarado em um tipo.</span><span class="sxs-lookup"><span data-stu-id="d8baf-494">For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8baf-495">Atributos personalizados não têm suporte no momento em métodos dinâmicos.</span><span class="sxs-lookup"><span data-stu-id="d8baf-495">Custom attributes are not currently supported on dynamic methods.</span></span> <span data-ttu-id="d8baf-496">O único atributo retornado é <xref:System.Runtime.CompilerServices.MethodImplAttribute>; você pode obter o método sinalizadores de implementação mais facilmente usando o <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> método.</span><span class="sxs-lookup"><span data-stu-id="d8baf-496">The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="d8baf-497">Um <see cref="T:System.Type" /> que representa o tipo de atributo personalizado a ser retornado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-497">A <see cref="T:System.Type" /> representing the type of custom attribute to return.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="d8baf-498">
            <see langword="true" /> para pesquisar a cadeia de herança do método para encontrar os atributos personalizados, <see langword="false" /> para verificar apenas o método atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-498">
              <see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d8baf-499">Retorna os atributos personalizados do tipo especificado que foram aplicados ao método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-499">Returns the custom attributes of the specified type that have been applied to the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d8baf-500">Uma matriz de objetos que representa os atributos do método que são do tipo <paramref name="attributeType" /> ou derivados do tipo <paramref name="attributeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-500">An array of objects representing the attributes of the method that are of type <paramref name="attributeType" /> or derive from type <paramref name="attributeType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-501">Para métodos dinâmicos, especificando `true` para `inherit` não tem nenhum efeito, pois o método não está declarado em um tipo.</span><span class="sxs-lookup"><span data-stu-id="d8baf-501">For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8baf-502">Atributos personalizados não têm suporte no momento em métodos dinâmicos.</span><span class="sxs-lookup"><span data-stu-id="d8baf-502">Custom attributes are not currently supported on dynamic methods.</span></span> <span data-ttu-id="d8baf-503">O único atributo retornado é <xref:System.Runtime.CompilerServices.MethodImplAttribute>; você pode obter o método sinalizadores de implementação mais facilmente usando o <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> método.</span><span class="sxs-lookup"><span data-stu-id="d8baf-503">The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d8baf-504">
            <paramref name="attributeType" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-504">
              <paramref name="attributeType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetDynamicILInfo">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.DynamicILInfo GetDynamicILInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.DynamicILInfo GetDynamicILInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDynamicILInfo () As DynamicILInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::DynamicILInfo ^ GetDynamicILInfo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.DynamicILInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d8baf-505">Retorna um <see cref="T:System.Reflection.Emit.DynamicILInfo" /> objeto que pode ser usado para gerar um corpo de método de tokens de metadados, escopos e fluxos MSIL (Microsoft Intermediate Language).</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-505">Returns a <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object that can be used to generate a method body from metadata tokens, scopes, and Microsoft intermediate language (MSIL) streams.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d8baf-506">Um objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> que pode ser usado para gerar um corpo de método de tokens de metadados, escopos e fluxos MSIL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-506">A <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object that can be used to generate a method body from metadata tokens, scopes, and MSIL streams.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-507">O <xref:System.Reflection.Emit.DynamicILInfo> classe é fornecida para oferecer suporte à geração de código não gerenciado.</span><span class="sxs-lookup"><span data-stu-id="d8baf-507">The <xref:System.Reflection.Emit.DynamicILInfo> class is provided to support unmanaged code generation.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="d8baf-508">para executar código não gerenciado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-508">to execute unmanaged code.</span>
          </span>
          <span data-ttu-id="d8baf-509">Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-509">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.Emit.DynamicILInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetILGenerator">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d8baf-510">Retorna um gerador de MSIL que pode ser usado para emitir um corpo de método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-510">Returns an MSIL generator that can be used to emit a body for the dynamic method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetILGenerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator () As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d8baf-511">Retorna um gerador de MSIL (Microsoft Intermediate Language) para o método com um tamanho de fluxo MSIL padrão de 64 bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-511">Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d8baf-512">Um objeto <see cref="T:System.Reflection.Emit.ILGenerator" /> para o método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-512">An <see cref="T:System.Reflection.Emit.ILGenerator" /> object for the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-513">Depois que um método dinâmico foi concluído, chamando o <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> ou <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> método, qualquer mais tentar adicionar MSIL é ignorado.</span><span class="sxs-lookup"><span data-stu-id="d8baf-513">After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored.</span></span> <span data-ttu-id="d8baf-514">Nenhuma exceção é lançada.</span><span class="sxs-lookup"><span data-stu-id="d8baf-514">No exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8baf-515">Há restrições em código não verificado em métodos dinâmicos, mesmo em alguns cenários de confiança total.</span><span class="sxs-lookup"><span data-stu-id="d8baf-515">There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.</span></span> <span data-ttu-id="d8baf-516">Consulte a seção “Verificação” em Comentários de <xref:System.Reflection.Emit.DynamicMethod>.</span><span class="sxs-lookup"><span data-stu-id="d8baf-516">See the "Verification" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d8baf-517">O exemplo de código a seguir cria um método dinâmico que usa dois parâmetros.</span><span class="sxs-lookup"><span data-stu-id="d8baf-517">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="d8baf-518">O exemplo emite um corpo de função simples que imprime o primeiro parâmetro para o console e o exemplo usa o segundo parâmetro como o valor de retorno do método.</span><span class="sxs-lookup"><span data-stu-id="d8baf-518">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="d8baf-519">O exemplo conclui o método criando um representante, invoca o delegado com parâmetros diferentes e, por fim, chama o método dinâmico usando o <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> método.</span><span class="sxs-lookup"><span data-stu-id="d8baf-519">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator (int streamSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator(int32 streamSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator (streamSize As Integer) As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator(int streamSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="streamSize">
          <span data-ttu-id="d8baf-520">O tamanho do fluxo MSIL, em bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-520">The size of the MSIL stream, in bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d8baf-521">Retorna um gerador de MSIL (Microsoft Intermediate Language) para o método com o tamanho do fluxo MSIL especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-521">Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d8baf-522">Um objeto <see cref="T:System.Reflection.Emit.ILGenerator" /> para o método, com o tamanho do fluxo MSIL especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-522">An <see cref="T:System.Reflection.Emit.ILGenerator" /> object for the method, with the specified MSIL stream size.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-523">Depois que um método dinâmico foi concluído, chamando o <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> ou <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> método, qualquer mais tentar adicionar MSIL é ignorado.</span><span class="sxs-lookup"><span data-stu-id="d8baf-523">After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored.</span></span> <span data-ttu-id="d8baf-524">Nenhuma exceção é lançada.</span><span class="sxs-lookup"><span data-stu-id="d8baf-524">No exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8baf-525">Há restrições em código não verificado em métodos dinâmicos, mesmo em alguns cenários de confiança total.</span><span class="sxs-lookup"><span data-stu-id="d8baf-525">There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.</span></span> <span data-ttu-id="d8baf-526">Consulte a seção “Verificação” em Comentários de <xref:System.Reflection.Emit.DynamicMethod>.</span><span class="sxs-lookup"><span data-stu-id="d8baf-526">See the "Verification" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d8baf-527">O exemplo de código a seguir demonstra essa sobrecarga de método.</span><span class="sxs-lookup"><span data-stu-id="d8baf-527">The following code example demonstrates this method overload.</span></span> <span data-ttu-id="d8baf-528">Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="d8baf-528">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#2](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#2)]
 [!code-csharp[Reflection.DynamicMethod.All#2](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#2)]
 [!code-vb[Reflection.DynamicMethod.All#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Reflection.MethodImplAttributes GetMethodImplementationFlags() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMethodImplementationFlags () As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodImplAttributes GetMethodImplementationFlags();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d8baf-529">Retorna os sinalizadores de implementação para o método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-529">Returns the implementation flags for the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d8baf-530">Uma combinação bit a bit de valores <see cref="T:System.Reflection.MethodImplAttributes" /> que representam os sinalizadores de implementação para o método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-530">A bitwise combination of <see cref="T:System.Reflection.MethodImplAttributes" /> values representing the implementation flags for the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-531">Atualmente, os atributos de implementação de método para métodos dinâmicos são sempre <xref:System.Reflection.MethodImplAttributes.IL> e <xref:System.Reflection.MethodImplAttributes.NoInlining>.</span><span class="sxs-lookup"><span data-stu-id="d8baf-531">Currently, method implementation attributes for dynamic methods are always <xref:System.Reflection.MethodImplAttributes.IL> and <xref:System.Reflection.MethodImplAttributes.NoInlining>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameters">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo[] GetParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.ParameterInfo[] GetParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetParameters () As ParameterInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::ParameterInfo ^&gt; ^ GetParameters();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d8baf-532">Retorna os parâmetros do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-532">Returns the parameters of the dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d8baf-533">Uma matriz de objetos <see cref="T:System.Reflection.ParameterInfo" /> que representam os parâmetros do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-533">An array of <see cref="T:System.Reflection.ParameterInfo" /> objects that represent the parameters of the dynamic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-534">O <xref:System.Reflection.ParameterInfo> objetos retornados por este método são apenas para fins informativos.</span><span class="sxs-lookup"><span data-stu-id="d8baf-534">The <xref:System.Reflection.ParameterInfo> objects returned by this method are for information only.</span></span> <span data-ttu-id="d8baf-535">Use o <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> método para definir ou alterar as características dos parâmetros.</span><span class="sxs-lookup"><span data-stu-id="d8baf-535">Use the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method to set or change the characteristics of the parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d8baf-536">O exemplo de código a seguir exibe os parâmetros de um método dinâmico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-536">The following code example displays the parameters of a dynamic method.</span></span> <span data-ttu-id="d8baf-537">Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="d8baf-537">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#34](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#34)]
 [!code-csharp[Reflection.DynamicMethod.All#34](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#34)]
 [!code-vb[Reflection.DynamicMethod.All#34](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="InitLocals">
      <MemberSignature Language="C#" Value="public bool InitLocals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InitLocals" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.InitLocals" />
      <MemberSignature Language="VB.NET" Value="Public Property InitLocals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InitLocals { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d8baf-538">Obtém ou define um valor que indica se as variáveis locais no método são inicializadas em zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-538">Gets or sets a value indicating whether the local variables in the method are zero-initialized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d8baf-539">
            <see langword="true" /> Se as variáveis locais no método inicializada do zero; Caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-539">
              <see langword="true" /> if the local variables in the method are zero-initialized; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="d8baf-540">O padrão é <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-540">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-541">Se essa propriedade é definida como `true`, o emitido Microsoft intermediate language (MSIL) inclui a inicialização de variáveis locais.</span><span class="sxs-lookup"><span data-stu-id="d8baf-541">If this property is set to `true`, the emitted Microsoft intermediate language (MSIL) includes initialization of local variables.</span></span> <span data-ttu-id="d8baf-542">Se for definido como `false`, variáveis locais não foram inicializadas e o código gerado não é verificável.</span><span class="sxs-lookup"><span data-stu-id="d8baf-542">If it is set to `false`, local variables are not initialized and the generated code is unverifiable.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d8baf-543">O código a seguir exemplo exibe o <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> propriedade de um método dinâmico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-543">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property of a dynamic method.</span></span> <span data-ttu-id="d8baf-544">Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="d8baf-544">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#24](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#24)]
 [!code-csharp[Reflection.DynamicMethod.All#24](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#24)]
 [!code-vb[Reflection.DynamicMethod.All#24](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public override object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object Invoke(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ Invoke(System::Object ^ obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ parameters, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="d8baf-545">Esse parâmetro é ignorado para métodos dinâmicos, pois é estático.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-545">This parameter is ignored for dynamic methods, because they are static.</span>
          </span>
          <span data-ttu-id="d8baf-546">Especifique <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-546">Specify <see langword="null" />.</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="d8baf-547">Uma combinação bit a bit dos valores <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-547">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="d8baf-548">Um objeto <see cref="T:System.Reflection.Binder" /> que permite a associação, coerção de tipos de argumento, invocação de membros e recuperação de objetos <see cref="T:System.Reflection.MemberInfo" /> por meio da reflexão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-548">A <see cref="T:System.Reflection.Binder" /> object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span>
          </span>
          <span data-ttu-id="d8baf-549">Se o <c>associador</c> for <see langword="null" />, o associador padrão será usado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-549">If <c>binder</c> is <see langword="null" />, the default binder is used.</span>
          </span>
          <span data-ttu-id="d8baf-550">Para obter mais detalhes, consulte <see cref="T:System.Reflection.Binder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-550">For more details, see <see cref="T:System.Reflection.Binder" />.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="d8baf-551">Uma lista de argumentos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-551">An argument list.</span>
          </span>
          <span data-ttu-id="d8baf-552">Essa é uma matriz de argumentos com o mesmo número, ordem e tipo que os parâmetros do método a ser invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-552">This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked.</span>
          </span>
          <span data-ttu-id="d8baf-553">Se não houver nenhum parâmetro, esse parâmetro deverá ser <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-553">If there are no parameters this parameter should be <see langword="null" />.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="d8baf-554">Uma instância de <see cref="T:System.Globalization.CultureInfo" /> usada para determinar a coerção de tipos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-554">An instance of <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types.</span>
          </span>
          <span data-ttu-id="d8baf-555">Se isso for <see langword="null" />, será usado o <see cref="T:System.Globalization.CultureInfo" /> para o thread atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-555">If this is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span>
          </span>
          <span data-ttu-id="d8baf-556">Por exemplo, essas informações são necessárias para converter corretamente um <see cref="T:System.String" /> que representa 1000 em um valor <see cref="T:System.Double" />, pois 1000 é representado de forma diferente por diferentes culturas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-556">For example, this information is needed to correctly convert a <see cref="T:System.String" /> that represents 1000 to a <see cref="T:System.Double" /> value, because 1000 is represented differently by different cultures.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d8baf-557">Invoca o método dinâmico usando os parâmetros especificados, sob as restrições do associador especificado e com as informações de cultura especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-557">Invokes the dynamic method using the specified parameters, under the constraints of the specified binder, with the specified culture information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d8baf-558">Um <see cref="T:System.Object" /> que contém o valor retornado do método invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-558">A <see cref="T:System.Object" /> containing the return value of the invoked method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-559">Além das exceções listadas, o código de chamada deve estar preparado para capturar todas as exceções geradas pelo método dinâmico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-559">In addition to the listed exceptions, the calling code should be prepared to catch any exceptions thrown by the dynamic method.</span></span>  
  
 <span data-ttu-id="d8baf-560">Executar um método dinâmico com um delegado criado pelo <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> método é mais eficiente do que executá-lo com o <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> método.</span><span class="sxs-lookup"><span data-stu-id="d8baf-560">Executing a dynamic method with a delegate created by the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method is more efficient than executing it with the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 <span data-ttu-id="d8baf-561">Chamando o <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> método ou o <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> método conclui o método dinâmico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-561">Calling the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method completes the dynamic method.</span></span> <span data-ttu-id="d8baf-562">Qualquer tentativa de alterar o método dinâmico, como a modificação de definições de parâmetro mais ou emitem mais linguagem intermediária Microsoft (MSIL) é ignorada; nenhuma exceção é lançada.</span><span class="sxs-lookup"><span data-stu-id="d8baf-562">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="d8baf-563">Todos os métodos dinâmicos são estáticos, portanto, o `obj` parâmetro é sempre ignorado.</span><span class="sxs-lookup"><span data-stu-id="d8baf-563">All dynamic methods are static, so the `obj` parameter is always ignored.</span></span> <span data-ttu-id="d8baf-564">Para tratar um método dinâmico como se fosse um método de instância, use o <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> sobrecarga que usa uma instância do objeto.</span><span class="sxs-lookup"><span data-stu-id="d8baf-564">To treat a dynamic method as if it were an instance method, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> overload that takes an object instance.</span></span>  
  
 <span data-ttu-id="d8baf-565">Se o método dinâmico não tem parâmetros, o valor de `parameters` devem ser `null`.</span><span class="sxs-lookup"><span data-stu-id="d8baf-565">If the dynamic method has no parameters, the value of `parameters` should be `null`.</span></span> <span data-ttu-id="d8baf-566">Caso contrário, o número, tipo e ordem de elementos na matriz de parâmetros devem ser idênticos de número, tipo e ordem de parâmetros de método dinâmico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-566">Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters of the dynamic method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8baf-567">Essa sobrecarga de método é chamada pelo <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29> sobrecarga do método herdado da <xref:System.Reflection.MethodBase> classe, para que os comentários acima se aplicam a ambas as sobrecargas.</span><span class="sxs-lookup"><span data-stu-id="d8baf-567">This method overload is called by the <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29> method overload inherited from the <xref:System.Reflection.MethodBase> class, so the preceding remarks apply to both overloads.</span></span>  
  
 <span data-ttu-id="d8baf-568">Esse método não exigem permissões diretamente, mas invocar o método dinâmico pode resultar em exigências de segurança, dependendo do método.</span><span class="sxs-lookup"><span data-stu-id="d8baf-568">This method does not demand permissions directly, but invoking the dynamic method can result in security demands, depending on the method.</span></span> <span data-ttu-id="d8baf-569">Por exemplo, nenhum demandas são feitas para métodos dinâmicos hospedados anonimamente que são criados com o `restrictedSkipVisibility` parâmetro definido como `false`.</span><span class="sxs-lookup"><span data-stu-id="d8baf-569">For example, no demands are made for anonymously hosted dynamic methods that are created with the `restrictedSkipVisibility` parameter set to `false`.</span></span> <span data-ttu-id="d8baf-570">Por outro lado, se você criar um método com `restrictedSkipVisibility` definida como `true` para que ele possa acessar ocultado membro de um assembly de destino, o método fará com que uma solicitação das permissões do assembly de destino mais <xref:System.Security.Permissions.ReflectionPermission> com o <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> sinalizador.</span><span class="sxs-lookup"><span data-stu-id="d8baf-570">On the other hand, if you create a method with `restrictedSkipVisibility` set to `true` so it can access a hidden member of a target assembly, the method will cause a demand for the permissions of the target assembly plus <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8baf-571">Antes do [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], esse método necessário <xref:System.Security.Permissions.ReflectionPermission> com o <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> sinalizador.</span><span class="sxs-lookup"><span data-stu-id="d8baf-571">Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flag.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d8baf-572">O exemplo de código a seguir invoca um método dinâmico com associação exata, usando a cultura do idioma inglês.</span><span class="sxs-lookup"><span data-stu-id="d8baf-572">The following code example invokes a dynamic method with exact binding, using the US-English culture.</span></span> <span data-ttu-id="d8baf-573">Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="d8baf-573">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#4](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#4)]
 [!code-csharp[Reflection.DynamicMethod.All#4](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#4)]
 [!code-vb[Reflection.DynamicMethod.All#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="d8baf-574">Não há suporte para a convenção de chamada <see cref="F:System.Reflection.CallingConventions.VarArgs" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-574">The <see cref="F:System.Reflection.CallingConventions.VarArgs" /> calling convention is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetParameterCountException">
          <span data-ttu-id="d8baf-575">O número de elementos em <paramref name="parameters" /> não corresponde ao número de parâmetros no método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-575">The number of elements in <paramref name="parameters" /> does not match the number of parameters in the dynamic method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d8baf-576">O tipo de um ou mais elementos de <paramref name="parameters" /> não corresponde ao tipo do parâmetro correspondente do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-576">The type of one or more elements of <paramref name="parameters" /> does not match the type of the corresponding parameter of the dynamic method.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="d8baf-577">O método dinâmico está associado a um módulo, não é hospedado anonimamente e foi construído com <paramref name="skipVisibility" /> definido como <see langword="false" />, mas acessa membros que não são <see langword="public" /> nem <see langword="internal" /> (<see langword="Friend" /> no Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-577">The dynamic method is associated with a module, is not anonymously hosted, and was constructed with <paramref name="skipVisibility" /> set to <see langword="false" />, but the dynamic method accesses members that are not <see langword="public" /> or <see langword="internal" /> (<see langword="Friend" /> in Visual Basic).</span>
          </span>
          <span data-ttu-id="d8baf-578">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-578">-or-</span>
          </span>
          <span data-ttu-id="d8baf-579">O método dinâmico é hospedado anonimamente e foi construído com <paramref name="skipVisibility" /> definido como <see langword="false" />, mas acessa membros que não são <see langword="public" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-579">The dynamic method is anonymously hosted and was constructed with <paramref name="skipVisibility" /> set to <see langword="false" />, but it accesses members that are not <see langword="public" />.</span>
          </span>
          <span data-ttu-id="d8baf-580">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-580">-or-</span>
          </span>
          <span data-ttu-id="d8baf-581">O método dinâmico contém um código não verificável.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-581">The dynamic method contains unverifiable code.</span>
          </span>
          <span data-ttu-id="d8baf-582">Consulte a seção “Verificação” em Comentários de <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-582">See the "Verification" section in Remarks for <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public override bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="d8baf-583">Um <see cref="T:System.Type" /> que representa o tipo de atributo personalizado a ser pesquisado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-583">A <see cref="T:System.Type" /> representing the type of custom attribute to search for.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="d8baf-584">
            <see langword="true" /> para pesquisar a cadeia de herança do método para encontrar os atributos personalizados, <see langword="false" /> para verificar apenas o método atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-584">
              <see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d8baf-585">Indica se o tipo de atributo personalizado especificado é definido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-585">Indicates whether the specified custom attribute type is defined.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d8baf-586">
            <see langword="true" /> se o tipo de atributo personalizado especificado estiver definido, caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-586">
              <see langword="true" /> if the specified custom attribute type is defined; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-587">Para métodos dinâmicos, especificando `true` para `inherit` não tem nenhum efeito.</span><span class="sxs-lookup"><span data-stu-id="d8baf-587">For dynamic methods, specifying `true` for `inherit` has no effect.</span></span> <span data-ttu-id="d8baf-588">Métodos dinâmicos não tem nenhuma cadeia de herança.</span><span class="sxs-lookup"><span data-stu-id="d8baf-588">Dynamic methods have no inheritance chain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8baf-589">Atributos personalizados não têm suporte no momento em métodos dinâmicos.</span><span class="sxs-lookup"><span data-stu-id="d8baf-589">Custom attributes are not currently supported on dynamic methods.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d8baf-590">Obtém um valor que indica se o método dinâmico atual é crítico para segurança ou crítico para segurança e disponível no código transparente e, portanto, pode executar operações críticas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-590">Gets a value that indicates whether the current dynamic method is security-critical or security-safe-critical, and therefore can perform critical operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d8baf-591">
            <see langword="true" /> Se o método dinâmico atual é crítico de segurança ou segurança-crítico para segurança; <see langword="false" /> se é transparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-591">
              <see langword="true" /> if the current dynamic method is security-critical or security-safe-critical; <see langword="false" /> if it is transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-592">O <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, e <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> o nível de transparência de método dinâmico, conforme determinado pelo common language runtime (CLR) de propriedades do relatam.</span><span class="sxs-lookup"><span data-stu-id="d8baf-592">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="d8baf-593">As combinações destas propriedades são mostradas na seguinte tabela:</span><span class="sxs-lookup"><span data-stu-id="d8baf-593">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="d8baf-594">Nível de segurança</span><span class="sxs-lookup"><span data-stu-id="d8baf-594">Security level</span></span>|<span data-ttu-id="d8baf-595">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="d8baf-595">IsSecurityCritical</span></span>|<span data-ttu-id="d8baf-596">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="d8baf-596">IsSecuritySafeCritical</span></span>|<span data-ttu-id="d8baf-597">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="d8baf-597">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="d8baf-598">Crítico</span><span class="sxs-lookup"><span data-stu-id="d8baf-598">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="d8baf-599">Segurança crítica</span><span class="sxs-lookup"><span data-stu-id="d8baf-599">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="d8baf-600">Transparente</span><span class="sxs-lookup"><span data-stu-id="d8baf-600">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="d8baf-601">Usar essas propriedade é muito mais simples que examinar as anotações de segurança de um assembly e seus tipos, verificando o nível de confiança atual e tentando duplicar as regras do tempo de execução.</span><span class="sxs-lookup"><span data-stu-id="d8baf-601">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="d8baf-602">A transparência de um método dinâmico depende do módulo que está associado.</span><span class="sxs-lookup"><span data-stu-id="d8baf-602">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="d8baf-603">Se o método dinâmico estiver associado um tipo em vez de um módulo, a transparência depende do módulo que contém o tipo.</span><span class="sxs-lookup"><span data-stu-id="d8baf-603">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="d8baf-604">Métodos dinâmicos não têm anotações de segurança, portanto, eles recebem a transparência de padrão para o módulo associado.</span><span class="sxs-lookup"><span data-stu-id="d8baf-604">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="d8baf-605">Métodos dinâmicos hospedados anonimamente sempre são transparentes, porque o módulo fornecido pelo sistema que os contém é transparente.</span><span class="sxs-lookup"><span data-stu-id="d8baf-605">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="d8baf-606">A transparência de um método dinâmico que está associado um assembly confiável (isto é, um assembly de nome forte que é instalado no cache de assembly global) é descrita na tabela a seguir.</span><span class="sxs-lookup"><span data-stu-id="d8baf-606">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="d8baf-607">Anotação de assembly</span><span class="sxs-lookup"><span data-stu-id="d8baf-607">Assembly annotation</span></span>|<span data-ttu-id="d8baf-608">Transparência de nível 1</span><span class="sxs-lookup"><span data-stu-id="d8baf-608">Level 1 transparency</span></span>|<span data-ttu-id="d8baf-609">Transparência de nível 2</span><span class="sxs-lookup"><span data-stu-id="d8baf-609">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="d8baf-610">Totalmente transparente</span><span class="sxs-lookup"><span data-stu-id="d8baf-610">Fully transparent</span></span>|<span data-ttu-id="d8baf-611">Transparente</span><span class="sxs-lookup"><span data-stu-id="d8baf-611">Transparent</span></span>|<span data-ttu-id="d8baf-612">Transparente</span><span class="sxs-lookup"><span data-stu-id="d8baf-612">Transparent</span></span>|  
    |<span data-ttu-id="d8baf-613">Totalmente crítica</span><span class="sxs-lookup"><span data-stu-id="d8baf-613">Fully critical</span></span>|<span data-ttu-id="d8baf-614">Crítico</span><span class="sxs-lookup"><span data-stu-id="d8baf-614">Critical</span></span>|<span data-ttu-id="d8baf-615">Crítico</span><span class="sxs-lookup"><span data-stu-id="d8baf-615">Critical</span></span>|  
    |<span data-ttu-id="d8baf-616">Transparência mista</span><span class="sxs-lookup"><span data-stu-id="d8baf-616">Mixed transparency</span></span>|<span data-ttu-id="d8baf-617">Transparente</span><span class="sxs-lookup"><span data-stu-id="d8baf-617">Transparent</span></span>|<span data-ttu-id="d8baf-618">Transparente</span><span class="sxs-lookup"><span data-stu-id="d8baf-618">Transparent</span></span>|  
    |<span data-ttu-id="d8baf-619">Security-agnostic</span><span class="sxs-lookup"><span data-stu-id="d8baf-619">Security-agnostic</span></span>|<span data-ttu-id="d8baf-620">Crítico para segurança</span><span class="sxs-lookup"><span data-stu-id="d8baf-620">Safe-critical</span></span>|<span data-ttu-id="d8baf-621">Crítico</span><span class="sxs-lookup"><span data-stu-id="d8baf-621">Critical</span></span>|  
  
     <span data-ttu-id="d8baf-622">Por exemplo, se você associar um método dinâmico com um tipo que está no mscorlib. dll, que tem o nível 2 transparência misto, o método dinâmico é transparente e não é possível executar o código crítico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-622">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="d8baf-623">Para obter informações sobre os níveis de transparência, consulte [código transparente de segurança, nível 1](~/docs/framework/misc/security-transparent-code-level-1.md) e [código transparente de segurança, nível 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="d8baf-623">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="d8baf-624">Associar um método dinâmico com um módulo em um assembly confiável nível 1 que é independente de segurança, como System.dll, não permitir a elevação de confiança.</span><span class="sxs-lookup"><span data-stu-id="d8baf-624">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="d8baf-625">Se o conjunto de concessão do código que chama o método dinâmico não incluem o conjunto de concessão de DLL (ou seja, confiança total), <xref:System.Security.SecurityException> é lançada quando é chamado de método dinâmico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-625">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="d8baf-626">A transparência de um método dinâmico que está associado um assembly parcialmente confiável depende de como o assembly é carregado.</span><span class="sxs-lookup"><span data-stu-id="d8baf-626">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="d8baf-627">Se o assembly é carregado com confiança parcial (por exemplo, para um domínio de aplicativo na área restrita), o tempo de execução ignora as anotações de segurança do assembly.</span><span class="sxs-lookup"><span data-stu-id="d8baf-627">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="d8baf-628">O assembly e todos os seus tipos e membros, incluindo métodos dinâmicos, são tratados como transparente.</span><span class="sxs-lookup"><span data-stu-id="d8baf-628">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="d8baf-629">O tempo de execução presta atenção para anotações de segurança somente se o assembly de confiança parcial foi carregado com confiança total (por exemplo, no domínio de aplicativo padrão de um aplicativo de área de trabalho).</span><span class="sxs-lookup"><span data-stu-id="d8baf-629">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="d8baf-630">Nesse caso, o tempo de execução atribui o método dinâmico a transparência de padrão de métodos de acordo com as anotações do assembly.</span><span class="sxs-lookup"><span data-stu-id="d8baf-630">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="d8baf-631">Para obter mais informações sobre reflexão emitir e transparência, consulte [problemas de segurança na emissão de reflexão](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="d8baf-631">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="d8baf-632">Para obter informações sobre a transparência, consulte [alterações de segurança](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="d8baf-632">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d8baf-633">O método dinâmico não tem um corpo de método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-633">The dynamic method doesn't have a method body.</span>
          </span>
        </exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d8baf-634">Obtém um valor que indica se o método dinâmico é crítico para segurança e disponível no código transparente no nível de confiança atual; ou seja, se ele pode realizar operações críticas e ser acessado pelo código transparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-634">Gets a value that indicates whether the current dynamic method is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d8baf-635">
            <see langword="true" /> Se o método dinâmico é safe-crítico de segurança no nível de confiança atual; <see langword="false" /> se ele é crítico de segurança ou transparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-635">
              <see langword="true" /> if the dynamic method is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-636">O <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, e <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> o nível de transparência de método dinâmico, conforme determinado pelo common language runtime (CLR) de propriedades do relatam.</span><span class="sxs-lookup"><span data-stu-id="d8baf-636">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="d8baf-637">As combinações destas propriedades são mostradas na seguinte tabela:</span><span class="sxs-lookup"><span data-stu-id="d8baf-637">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="d8baf-638">Nível de segurança</span><span class="sxs-lookup"><span data-stu-id="d8baf-638">Security level</span></span>|<span data-ttu-id="d8baf-639">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="d8baf-639">IsSecurityCritical</span></span>|<span data-ttu-id="d8baf-640">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="d8baf-640">IsSecuritySafeCritical</span></span>|<span data-ttu-id="d8baf-641">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="d8baf-641">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="d8baf-642">Crítico</span><span class="sxs-lookup"><span data-stu-id="d8baf-642">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="d8baf-643">Segurança crítica</span><span class="sxs-lookup"><span data-stu-id="d8baf-643">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="d8baf-644">Transparente</span><span class="sxs-lookup"><span data-stu-id="d8baf-644">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="d8baf-645">Usar essas propriedade é muito mais simples que examinar as anotações de segurança de um assembly e seus tipos, verificando o nível de confiança atual e tentando duplicar as regras do tempo de execução.</span><span class="sxs-lookup"><span data-stu-id="d8baf-645">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="d8baf-646">A transparência de um método dinâmico depende do módulo que está associado.</span><span class="sxs-lookup"><span data-stu-id="d8baf-646">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="d8baf-647">Se o método dinâmico estiver associado um tipo em vez de um módulo, a transparência depende do módulo que contém o tipo.</span><span class="sxs-lookup"><span data-stu-id="d8baf-647">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="d8baf-648">Métodos dinâmicos não têm anotações de segurança, portanto, eles recebem a transparência de padrão para o módulo associado.</span><span class="sxs-lookup"><span data-stu-id="d8baf-648">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="d8baf-649">Métodos dinâmicos hospedados anonimamente sempre são transparentes, porque o módulo fornecido pelo sistema que os contém é transparente.</span><span class="sxs-lookup"><span data-stu-id="d8baf-649">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="d8baf-650">A transparência de um método dinâmico que está associado um assembly confiável (isto é, um assembly de nome forte que é instalado no cache de assembly global) é descrita na tabela a seguir.</span><span class="sxs-lookup"><span data-stu-id="d8baf-650">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="d8baf-651">Anotação de assembly</span><span class="sxs-lookup"><span data-stu-id="d8baf-651">Assembly annotation</span></span>|<span data-ttu-id="d8baf-652">Transparência de nível 1</span><span class="sxs-lookup"><span data-stu-id="d8baf-652">Level 1 transparency</span></span>|<span data-ttu-id="d8baf-653">Transparência de nível 2</span><span class="sxs-lookup"><span data-stu-id="d8baf-653">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="d8baf-654">Totalmente transparente</span><span class="sxs-lookup"><span data-stu-id="d8baf-654">Fully transparent</span></span>|<span data-ttu-id="d8baf-655">Transparente</span><span class="sxs-lookup"><span data-stu-id="d8baf-655">Transparent</span></span>|<span data-ttu-id="d8baf-656">Transparente</span><span class="sxs-lookup"><span data-stu-id="d8baf-656">Transparent</span></span>|  
    |<span data-ttu-id="d8baf-657">Totalmente crítica</span><span class="sxs-lookup"><span data-stu-id="d8baf-657">Fully critical</span></span>|<span data-ttu-id="d8baf-658">Crítico</span><span class="sxs-lookup"><span data-stu-id="d8baf-658">Critical</span></span>|<span data-ttu-id="d8baf-659">Crítico</span><span class="sxs-lookup"><span data-stu-id="d8baf-659">Critical</span></span>|  
    |<span data-ttu-id="d8baf-660">Transparência mista</span><span class="sxs-lookup"><span data-stu-id="d8baf-660">Mixed transparency</span></span>|<span data-ttu-id="d8baf-661">Transparente</span><span class="sxs-lookup"><span data-stu-id="d8baf-661">Transparent</span></span>|<span data-ttu-id="d8baf-662">Transparente</span><span class="sxs-lookup"><span data-stu-id="d8baf-662">Transparent</span></span>|  
    |<span data-ttu-id="d8baf-663">Security-agnostic</span><span class="sxs-lookup"><span data-stu-id="d8baf-663">Security-agnostic</span></span>|<span data-ttu-id="d8baf-664">Crítico para segurança</span><span class="sxs-lookup"><span data-stu-id="d8baf-664">Safe-critical</span></span>|<span data-ttu-id="d8baf-665">Crítico</span><span class="sxs-lookup"><span data-stu-id="d8baf-665">Critical</span></span>|  
  
     <span data-ttu-id="d8baf-666">Por exemplo, se você associar um método dinâmico com um tipo que está no mscorlib. dll, que tem o nível 2 transparência misto, o método dinâmico é transparente e não é possível executar o código crítico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-666">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="d8baf-667">Para obter informações sobre os níveis de transparência, consulte [código transparente de segurança, nível 1](~/docs/framework/misc/security-transparent-code-level-1.md) e [código transparente de segurança, nível 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="d8baf-667">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="d8baf-668">Associar um método dinâmico com um módulo em um assembly confiável nível 1 que é independente de segurança, como System.dll, não permitir a elevação de confiança.</span><span class="sxs-lookup"><span data-stu-id="d8baf-668">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="d8baf-669">Se o conjunto de concessão do código que chama o método dinâmico não incluem o conjunto de concessão de DLL (ou seja, confiança total), <xref:System.Security.SecurityException> é lançada quando é chamado de método dinâmico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-669">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="d8baf-670">A transparência de um método dinâmico que está associado um assembly parcialmente confiável depende de como o assembly é carregado.</span><span class="sxs-lookup"><span data-stu-id="d8baf-670">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="d8baf-671">Se o assembly é carregado com confiança parcial (por exemplo, para um domínio de aplicativo na área restrita), o tempo de execução ignora as anotações de segurança do assembly.</span><span class="sxs-lookup"><span data-stu-id="d8baf-671">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="d8baf-672">O assembly e todos os seus tipos e membros, incluindo métodos dinâmicos, são tratados como transparente.</span><span class="sxs-lookup"><span data-stu-id="d8baf-672">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="d8baf-673">O tempo de execução presta atenção para anotações de segurança somente se o assembly de confiança parcial foi carregado com confiança total (por exemplo, no domínio de aplicativo padrão de um aplicativo de área de trabalho).</span><span class="sxs-lookup"><span data-stu-id="d8baf-673">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="d8baf-674">Nesse caso, o tempo de execução atribui o método dinâmico a transparência de padrão de métodos de acordo com as anotações do assembly.</span><span class="sxs-lookup"><span data-stu-id="d8baf-674">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="d8baf-675">Para obter mais informações sobre reflexão emitir e transparência, consulte [problemas de segurança na emissão de reflexão](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="d8baf-675">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="d8baf-676">Para obter informações sobre a transparência, consulte [alterações de segurança](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="d8baf-676">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d8baf-677">O método dinâmico não tem um corpo de método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-677">The dynamic method doesn't have a method body.</span>
          </span>
        </exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public override bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d8baf-678">Obtém um valor que indica que se o método dinâmico atual é transparente no nível de confiança atual e, portanto, não é pode realizar operações críticas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-678">Gets a value that indicates whether the current dynamic method is transparent at the current trust level, and therefore cannot perform critical operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d8baf-679">
            <see langword="true" /> Se o método dinâmico é transparente de segurança no nível de confiança atual; Caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-679">
              <see langword="true" /> if the dynamic method is security-transparent at the current trust level; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-680">O <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, e <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> o nível de transparência de método dinâmico, conforme determinado pelo common language runtime (CLR) de propriedades do relatam.</span><span class="sxs-lookup"><span data-stu-id="d8baf-680">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="d8baf-681">As combinações destas propriedades são mostradas na seguinte tabela:</span><span class="sxs-lookup"><span data-stu-id="d8baf-681">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="d8baf-682">Nível de segurança</span><span class="sxs-lookup"><span data-stu-id="d8baf-682">Security level</span></span>|<span data-ttu-id="d8baf-683">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="d8baf-683">IsSecurityCritical</span></span>|<span data-ttu-id="d8baf-684">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="d8baf-684">IsSecuritySafeCritical</span></span>|<span data-ttu-id="d8baf-685">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="d8baf-685">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="d8baf-686">Crítico</span><span class="sxs-lookup"><span data-stu-id="d8baf-686">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="d8baf-687">Segurança crítica</span><span class="sxs-lookup"><span data-stu-id="d8baf-687">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="d8baf-688">Transparente</span><span class="sxs-lookup"><span data-stu-id="d8baf-688">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="d8baf-689">Usar essas propriedade é muito mais simples que examinar as anotações de segurança de um assembly e seus tipos, verificando o nível de confiança atual e tentando duplicar as regras do tempo de execução.</span><span class="sxs-lookup"><span data-stu-id="d8baf-689">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="d8baf-690">A transparência de um método dinâmico depende do módulo que está associado.</span><span class="sxs-lookup"><span data-stu-id="d8baf-690">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="d8baf-691">Se o método dinâmico estiver associado um tipo em vez de um módulo, a transparência depende do módulo que contém o tipo.</span><span class="sxs-lookup"><span data-stu-id="d8baf-691">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="d8baf-692">Métodos dinâmicos não têm anotações de segurança, portanto, eles recebem a transparência de padrão para o módulo associado.</span><span class="sxs-lookup"><span data-stu-id="d8baf-692">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="d8baf-693">Métodos dinâmicos hospedados anonimamente sempre são transparentes, porque o módulo fornecido pelo sistema que os contém é transparente.</span><span class="sxs-lookup"><span data-stu-id="d8baf-693">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="d8baf-694">A transparência de um método dinâmico que está associado um assembly confiável (isto é, um assembly de nome forte que é instalado no cache de assembly global) é descrita na tabela a seguir.</span><span class="sxs-lookup"><span data-stu-id="d8baf-694">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="d8baf-695">Anotação de assembly</span><span class="sxs-lookup"><span data-stu-id="d8baf-695">Assembly annotation</span></span>|<span data-ttu-id="d8baf-696">Transparência de nível 1</span><span class="sxs-lookup"><span data-stu-id="d8baf-696">Level 1 transparency</span></span>|<span data-ttu-id="d8baf-697">Transparência de nível 2</span><span class="sxs-lookup"><span data-stu-id="d8baf-697">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="d8baf-698">Totalmente transparente</span><span class="sxs-lookup"><span data-stu-id="d8baf-698">Fully transparent</span></span>|<span data-ttu-id="d8baf-699">Transparente</span><span class="sxs-lookup"><span data-stu-id="d8baf-699">Transparent</span></span>|<span data-ttu-id="d8baf-700">Transparente</span><span class="sxs-lookup"><span data-stu-id="d8baf-700">Transparent</span></span>|  
    |<span data-ttu-id="d8baf-701">Totalmente crítica</span><span class="sxs-lookup"><span data-stu-id="d8baf-701">Fully critical</span></span>|<span data-ttu-id="d8baf-702">Crítico</span><span class="sxs-lookup"><span data-stu-id="d8baf-702">Critical</span></span>|<span data-ttu-id="d8baf-703">Crítico</span><span class="sxs-lookup"><span data-stu-id="d8baf-703">Critical</span></span>|  
    |<span data-ttu-id="d8baf-704">Transparência mista</span><span class="sxs-lookup"><span data-stu-id="d8baf-704">Mixed transparency</span></span>|<span data-ttu-id="d8baf-705">Transparente</span><span class="sxs-lookup"><span data-stu-id="d8baf-705">Transparent</span></span>|<span data-ttu-id="d8baf-706">Transparente</span><span class="sxs-lookup"><span data-stu-id="d8baf-706">Transparent</span></span>|  
    |<span data-ttu-id="d8baf-707">Security-agnostic</span><span class="sxs-lookup"><span data-stu-id="d8baf-707">Security-agnostic</span></span>|<span data-ttu-id="d8baf-708">Crítico para segurança</span><span class="sxs-lookup"><span data-stu-id="d8baf-708">Safe-critical</span></span>|<span data-ttu-id="d8baf-709">Crítico</span><span class="sxs-lookup"><span data-stu-id="d8baf-709">Critical</span></span>|  
  
     <span data-ttu-id="d8baf-710">Por exemplo, se você associar um método dinâmico com um tipo que está no mscorlib. dll, que tem o nível 2 transparência misto, o método dinâmico é transparente e não é possível executar o código crítico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-710">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="d8baf-711">Para obter informações sobre os níveis de transparência, consulte [código transparente de segurança, nível 1](~/docs/framework/misc/security-transparent-code-level-1.md) e [código transparente de segurança, nível 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="d8baf-711">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="d8baf-712">Associar um método dinâmico com um módulo em um assembly confiável nível 1 que é independente de segurança, como System.dll, não permitir a elevação de confiança.</span><span class="sxs-lookup"><span data-stu-id="d8baf-712">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="d8baf-713">Se o conjunto de concessão do código que chama o método dinâmico não incluem o conjunto de concessão de DLL (ou seja, confiança total), <xref:System.Security.SecurityException> é lançada quando é chamado de método dinâmico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-713">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="d8baf-714">A transparência de um método dinâmico que está associado um assembly parcialmente confiável depende de como o assembly é carregado.</span><span class="sxs-lookup"><span data-stu-id="d8baf-714">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="d8baf-715">Se o assembly é carregado com confiança parcial (por exemplo, para um domínio de aplicativo na área restrita), o tempo de execução ignora as anotações de segurança do assembly.</span><span class="sxs-lookup"><span data-stu-id="d8baf-715">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="d8baf-716">O assembly e todos os seus tipos e membros, incluindo métodos dinâmicos, são tratados como transparente.</span><span class="sxs-lookup"><span data-stu-id="d8baf-716">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="d8baf-717">O tempo de execução presta atenção para anotações de segurança somente se o assembly de confiança parcial foi carregado com confiança total (por exemplo, no domínio de aplicativo padrão de um aplicativo de área de trabalho).</span><span class="sxs-lookup"><span data-stu-id="d8baf-717">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="d8baf-718">Nesse caso, o tempo de execução atribui o método dinâmico a transparência de padrão de métodos de acordo com as anotações do assembly.</span><span class="sxs-lookup"><span data-stu-id="d8baf-718">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="d8baf-719">Para obter mais informações sobre reflexão emitir e transparência, consulte [problemas de segurança na emissão de reflexão](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="d8baf-719">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="d8baf-720">Para obter informações sobre a transparência, consulte [alterações de segurança](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="d8baf-720">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d8baf-721">O método dinâmico não tem um corpo de método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-721">The dynamic method doesn't have a method body.</span>
          </span>
        </exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
      </Docs>
    </Member>
    <Member MemberName="MethodHandle">
      <MemberSignature Language="C#" Value="public override RuntimeMethodHandle MethodHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeMethodHandle MethodHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.MethodHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodHandle As RuntimeMethodHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeMethodHandle MethodHandle { RuntimeMethodHandle get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeMethodHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d8baf-722">Não tem suporte para métodos dinâmicos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-722">Not supported for dynamic methods.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d8baf-723">Não tem suporte para métodos dinâmicos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-723">Not supported for dynamic methods.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d8baf-724">Não é permitido para métodos dinâmicos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-724">Not allowed for dynamic methods.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes MethodImplementationFlags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodImplAttributes MethodImplementationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.MethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodImplementationFlags As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodImplAttributes MethodImplementationFlags { System::Reflection::MethodImplAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Module" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d8baf-725">Obtém o módulo ao qual o método dinâmico está logicamente associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-725">Gets the module with which the dynamic method is logically associated.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d8baf-726">O <see cref="T:System.Reflection.Module" /> à qual o método dinâmico atual está associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-726">The <see cref="T:System.Reflection.Module" /> with which the current dynamic method is associated.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-727">Se um módulo foi especificado quando o método dinâmico foi criado, essa propriedade retornará esse módulo.</span><span class="sxs-lookup"><span data-stu-id="d8baf-727">If a module was specified when the dynamic method was created, this property returns that module.</span></span> <span data-ttu-id="d8baf-728">Se um tipo foi especificado como o proprietário, quando o método dinâmico foi criado, essa propriedade retorna o módulo que contém esse tipo.</span><span class="sxs-lookup"><span data-stu-id="d8baf-728">If a type was specified as the owner when the dynamic method was created, this property returns the module which contains that type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d8baf-729">O código a seguir exemplo exibe o <xref:System.Reflection.Emit.DynamicMethod.Module%2A> propriedade de um método dinâmico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-729">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.Module%2A> property of a dynamic method.</span></span> <span data-ttu-id="d8baf-730">Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="d8baf-730">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#26](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#26)]
 [!code-csharp[Reflection.DynamicMethod.All#26](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#26)]
 [!code-vb[Reflection.DynamicMethod.All#26](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d8baf-731">Obtém o nome do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-731">Gets the name of the dynamic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d8baf-732">O nome simples do método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-732">The simple name of the method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="d8baf-733">Não é necessário para métodos dinâmicos de nome.</span><span class="sxs-lookup"><span data-stu-id="d8baf-733">It is not necessary to name dynamic methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d8baf-734">O exemplo de código a seguir exibe o nome de um método dinâmico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-734">The following code example displays the name of a dynamic method.</span></span> <span data-ttu-id="d8baf-735">Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="d8baf-735">This code example is part of a larger example provided for  the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#27](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#27)]
 [!code-csharp[Reflection.DynamicMethod.All#27](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#27)]
 [!code-vb[Reflection.DynamicMethod.All#27](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d8baf-736">Obtém a classe que foi usada na reflexão para obter o método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-736">Gets the class that was used in reflection to obtain the method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d8baf-737">Sempre <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-737">Always <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-738">Essa propriedade sempre retorna `null` para métodos dinâmicos.</span><span class="sxs-lookup"><span data-stu-id="d8baf-738">This property always returns `null` for dynamic methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d8baf-739">O exemplo de código a seguir exibe o tipo refletido de um método dinâmico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-739">The following code example displays the reflected type of a dynamic method.</span></span> <span data-ttu-id="d8baf-740">Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="d8baf-740">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#28](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#28)]
 [!code-csharp[Reflection.DynamicMethod.All#28](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#28)]
 [!code-vb[Reflection.DynamicMethod.All#28](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnParameter">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo ReturnParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ParameterInfo ReturnParameter" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnParameter As ParameterInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ParameterInfo ^ ReturnParameter { System::Reflection::ParameterInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d8baf-741">Obtém o parâmetro de retorno do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-741">Gets the return parameter of the dynamic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d8baf-742">Sempre <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-742">Always <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-743">Essa propriedade sempre retorna `null` para métodos dinâmicos.</span><span class="sxs-lookup"><span data-stu-id="d8baf-743">This property always returns `null` for dynamic methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnType">
      <MemberSignature Language="C#" Value="public override Type ReturnType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReturnType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReturnType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d8baf-744">Obtém o tipo de valor retornado do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-744">Gets the type of return value for the dynamic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d8baf-745">Um <see cref="T:System.Type" /> que representa o tipo do valor de retorno do método atual; <see cref="T:System.Void" /> se o método não tem nenhum tipo de retorno.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-745">A <see cref="T:System.Type" /> representing the type of the return value of the current method; <see cref="T:System.Void" /> if the method has no return type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-746">Se `null` foi especificado para o tipo de retorno quando o método dinâmico foi criado, essa propriedade retornará <xref:System.Void?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="d8baf-746">If `null` was specified for the return type when the dynamic method was created, this property returns <xref:System.Void?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d8baf-747">O exemplo de código a seguir exibe o tipo de retorno de um método dinâmico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-747">The following code example displays the return type of a dynamic method.</span></span> <span data-ttu-id="d8baf-748">Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="d8baf-748">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#30](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#30)]
 [!code-csharp[Reflection.DynamicMethod.All#30](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#30)]
 [!code-vb[Reflection.DynamicMethod.All#30](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnTypeCustomAttributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnTypeCustomAttributes As ICustomAttributeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ICustomAttributeProvider ^ ReturnTypeCustomAttributes { System::Reflection::ICustomAttributeProvider ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d8baf-749">Obtém os atributos personalizados do tipo de retorno para o método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-749">Gets the custom attributes of the return type for the dynamic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d8baf-750">Um <see cref="T:System.Reflection.ICustomAttributeProvider" /> que representa os atributos personalizados do tipo de retorno do método dinâmico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-750">An <see cref="T:System.Reflection.ICustomAttributeProvider" /> representing the custom attributes of the return type for the dynamic method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-751">Atributos personalizados não têm suporte no tipo de retorno de um método dinâmico, a matriz de atributos personalizados retornada pelo <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A> método sempre está vazio.</span><span class="sxs-lookup"><span data-stu-id="d8baf-751">Custom attributes are not supported on the return type of a dynamic method, so the array of custom attributes returned by the <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A> method is always empty.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d8baf-752">O exemplo de código a seguir mostra como exibir os atributos personalizados do tipo de retorno de um método dinâmico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-752">The following code example shows how to display the custom attributes of the return type of a dynamic method.</span></span> <span data-ttu-id="d8baf-753">Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="d8baf-753">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#31](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#31)]
 [!code-csharp[Reflection.DynamicMethod.All#31](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#31)]
 [!code-vb[Reflection.DynamicMethod.All#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.ReturnType" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d8baf-754">Retorna a assinatura do método, representada como uma cadeia de caracteres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-754">Returns the signature of the method, represented as a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d8baf-755">Uma cadeia de caracteres que representa a assinatura do método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d8baf-755">A string representing the method signature.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8baf-756">A assinatura inclui somente os tipos e o nome do método, se houver.</span><span class="sxs-lookup"><span data-stu-id="d8baf-756">The signature includes only types and the method name, if any.</span></span> <span data-ttu-id="d8baf-757">Nomes de parâmetros não são incluídos.</span><span class="sxs-lookup"><span data-stu-id="d8baf-757">Parameter names are not included.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d8baf-758">O código a seguir exemplo exibe o <xref:System.Reflection.Emit.DynamicMethod.ToString%2A> método de um método dinâmico.</span><span class="sxs-lookup"><span data-stu-id="d8baf-758">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.ToString%2A> method of a dynamic method.</span></span> <span data-ttu-id="d8baf-759">Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="d8baf-759">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#32](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#32)]
 [!code-csharp[Reflection.DynamicMethod.All#32](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#32)]
 [!code-vb[Reflection.DynamicMethod.All#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>