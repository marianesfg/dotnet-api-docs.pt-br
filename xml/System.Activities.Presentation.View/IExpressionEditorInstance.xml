<Type Name="IExpressionEditorInstance" FullName="System.Activities.Presentation.View.IExpressionEditorInstance">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e985aa70fae98c38e0ec573433f4163f03cbd5af" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36720641" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IExpressionEditorInstance" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IExpressionEditorInstance" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.View.IExpressionEditorInstance" />
  <TypeSignature Language="VB.NET" Value="Public Interface IExpressionEditorInstance" />
  <TypeSignature Language="C++ CLI" Value="public interface class IExpressionEditorInstance" />
  <TypeSignature Language="F#" Value="type IExpressionEditorInstance = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="113da-101">Representa uma instância do editor de expressão.</span>
      <span class="sxs-lookup">
        <span data-stu-id="113da-101">Represents an expression editor instance.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="113da-102">Para obter uma descrição detalhada de uma instância do editor de expressão, consulte <xref:System.Activities.Presentation.View.IExpressionEditorService>.</span><span class="sxs-lookup"><span data-stu-id="113da-102">For a detailed description of an expression editor instance, see <xref:System.Activities.Presentation.View.IExpressionEditorService>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AcceptsReturn">
      <MemberSignature Language="C#" Value="public bool AcceptsReturn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AcceptsReturn" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.View.IExpressionEditorInstance.AcceptsReturn" />
      <MemberSignature Language="VB.NET" Value="Public Property AcceptsReturn As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AcceptsReturn { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AcceptsReturn : bool with get, set" Usage="System.Activities.Presentation.View.IExpressionEditorInstance.AcceptsReturn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="113da-103">Obtém ou define um valor que indica se a instância do editor de expressão aceita a tecla RETURN.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-103">Gets or sets a value that indicates whether the expression editor instance accepts the RETURN key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="113da-104">
            <see langword="true" /> Se o editor de expressão aceita a chave de retorno; Caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-104">
              <see langword="true" /> if the expression editor accepts the RETURN key; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptsTab">
      <MemberSignature Language="C#" Value="public bool AcceptsTab { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AcceptsTab" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.View.IExpressionEditorInstance.AcceptsTab" />
      <MemberSignature Language="VB.NET" Value="Public Property AcceptsTab As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AcceptsTab { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AcceptsTab : bool with get, set" Usage="System.Activities.Presentation.View.IExpressionEditorInstance.AcceptsTab" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="113da-105">Obtém ou define um valor que indica se a instância do editor de expressão aceita a tecla TAB.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-105">Gets or sets a value that indicates whether the expression editor instance accepts the TAB key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="113da-106">
            <see langword="true" /> Se o editor de expressão aceita a tecla TAB; Caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-106">
              <see langword="true" /> if the expression editor accepts the TAB key; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanCompleteWord">
      <MemberSignature Language="C#" Value="public bool CanCompleteWord ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanCompleteWord() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanCompleteWord" />
      <MemberSignature Language="VB.NET" Value="Public Function CanCompleteWord () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanCompleteWord();" />
      <MemberSignature Language="F#" Value="abstract member CanCompleteWord : unit -&gt; bool" Usage="iExpressionEditorInstance.CanCompleteWord " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="113da-107">Obtém um valor booliano que indica se a instância do editor da expressão pode completar a cadeia de caracteres que está sendo digitada pelo usuário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-107">Gets a Boolean value that indicates whether the expression editor instance can complete the string being typed by the user.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="113da-108">Retorna um <see cref="T:System.Boolean" /> definido como <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-108">Returns a <see cref="T:System.Boolean" /> set to <see langword="true" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanCopy">
      <MemberSignature Language="C#" Value="public bool CanCopy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanCopy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanCopy" />
      <MemberSignature Language="VB.NET" Value="Public Function CanCopy () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanCopy();" />
      <MemberSignature Language="F#" Value="abstract member CanCopy : unit -&gt; bool" Usage="iExpressionEditorInstance.CanCopy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="113da-109">Obtém um valor booliano que indica se a instância do editor da expressão pode ser fechada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-109">Gets a Boolean value that indicates whether the expression editor instance can be closed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="113da-110">
            <see langword="true" /> se a instância do editor de expressão puder ser fechada.; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-110">
              <see langword="true" /> if the expression editor instance can be closed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanCut">
      <MemberSignature Language="C#" Value="public bool CanCut ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanCut() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanCut" />
      <MemberSignature Language="VB.NET" Value="Public Function CanCut () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanCut();" />
      <MemberSignature Language="F#" Value="abstract member CanCut : unit -&gt; bool" Usage="iExpressionEditorInstance.CanCut " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="113da-111">Obtém um valor booliano que indica se a expressão pode ser recortada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-111">Gets a Boolean value that indicates whether the expression can be cut.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="113da-112">
            <see langword="true" /> se a expressão puder ser cortada; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-112">
              <see langword="true" /> if the expression can be cut; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanDecreaseFilterLevel">
      <MemberSignature Language="C#" Value="public bool CanDecreaseFilterLevel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanDecreaseFilterLevel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanDecreaseFilterLevel" />
      <MemberSignature Language="VB.NET" Value="Public Function CanDecreaseFilterLevel () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanDecreaseFilterLevel();" />
      <MemberSignature Language="F#" Value="abstract member CanDecreaseFilterLevel : unit -&gt; bool" Usage="iExpressionEditorInstance.CanDecreaseFilterLevel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="113da-113">Retorna um valor que indica se o nível de filtro pode ser reduzido ao usar a filtragem do Intellisense.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-113">Returns a value that indicates whether the filter level can be decreased when using Intellisense filtering.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="113da-114">
            <see langword="true" /> se o nível do filtro puder ser diminuído; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-114">
              <see langword="true" /> if the filter level can be decreased; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanGlobalIntellisense">
      <MemberSignature Language="C#" Value="public bool CanGlobalIntellisense ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanGlobalIntellisense() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanGlobalIntellisense" />
      <MemberSignature Language="VB.NET" Value="Public Function CanGlobalIntellisense () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanGlobalIntellisense();" />
      <MemberSignature Language="F#" Value="abstract member CanGlobalIntellisense : unit -&gt; bool" Usage="iExpressionEditorInstance.CanGlobalIntellisense " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="113da-115">Obtém um valor booliano que indica se a instância do editor da expressão pode recuperar o IntelliSense global na expressão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-115">Gets a Boolean value that indicates whether the expression editor instance can retrieve global IntelliSense on the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="113da-116">Retorna um <see cref="T:System.Boolean" /> definido como <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-116">Returns a <see cref="T:System.Boolean" /> set to <see langword="true" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanIncreaseFilterLevel">
      <MemberSignature Language="C#" Value="public bool CanIncreaseFilterLevel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanIncreaseFilterLevel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanIncreaseFilterLevel" />
      <MemberSignature Language="VB.NET" Value="Public Function CanIncreaseFilterLevel () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanIncreaseFilterLevel();" />
      <MemberSignature Language="F#" Value="abstract member CanIncreaseFilterLevel : unit -&gt; bool" Usage="iExpressionEditorInstance.CanIncreaseFilterLevel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="113da-117">Retorna um valor que indica se o nível de filtro pode ser aumentado ao usar a filtragem do Intellisense.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-117">Returns a value that indicates whether the filter level can be increased when using Intellisense filtering.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="113da-118">
            <see langword="true" /> se o nível do filtro puder ser aumentado; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-118">
              <see langword="true" /> if the filter level can be increased; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanParameterInfo">
      <MemberSignature Language="C#" Value="public bool CanParameterInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanParameterInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanParameterInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function CanParameterInfo () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanParameterInfo();" />
      <MemberSignature Language="F#" Value="abstract member CanParameterInfo : unit -&gt; bool" Usage="iExpressionEditorInstance.CanParameterInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="113da-119">Obtém um valor booliano que indica se a instância do editor da expressão pode recuperar as informações de parâmetro na expressão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-119">Gets a Boolean value that indicates whether the expression editor instance can retrieve parameter information on the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="113da-120">Retorna um <see cref="T:System.Boolean" /> definido como <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-120">Returns a <see cref="T:System.Boolean" /> set to <see langword="true" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanPaste">
      <MemberSignature Language="C#" Value="public bool CanPaste ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanPaste() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanPaste" />
      <MemberSignature Language="VB.NET" Value="Public Function CanPaste () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanPaste();" />
      <MemberSignature Language="F#" Value="abstract member CanPaste : unit -&gt; bool" Usage="iExpressionEditorInstance.CanPaste " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="113da-121">Obtém um valor booliano que indica se a expressão pode ser colada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-121">Gets a Boolean value that indicates whether the expression can be pasted.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="113da-122">
            <see langword="true" /> se a expressão puder ser colada; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-122">
              <see langword="true" /> if the expression can be pasted; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanQuickInfo">
      <MemberSignature Language="C#" Value="public bool CanQuickInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanQuickInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanQuickInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function CanQuickInfo () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanQuickInfo();" />
      <MemberSignature Language="F#" Value="abstract member CanQuickInfo : unit -&gt; bool" Usage="iExpressionEditorInstance.CanQuickInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="113da-123">Obtém um valor booliano que indica se a instância do editor da expressão pode recuperar as informações de tipo que serão mostradas na dica de ferramenta Informações Rápidas do IntelliSense.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-123">Gets a Boolean value that indicates whether the expression editor instance can retrieve type information to be shown in an IntelliSense quick info tool tip.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="113da-124">Retorna um <see cref="T:System.Boolean" /> definido como <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-124">Returns a <see cref="T:System.Boolean" /> set to <see langword="true" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRedo">
      <MemberSignature Language="C#" Value="public bool CanRedo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRedo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanRedo" />
      <MemberSignature Language="VB.NET" Value="Public Function CanRedo () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanRedo();" />
      <MemberSignature Language="F#" Value="abstract member CanRedo : unit -&gt; bool" Usage="iExpressionEditorInstance.CanRedo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="113da-125">Obtém um valor booliano que indica se o sistema pode refazer a operação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-125">Gets a Boolean value that indicates whether the system can redo the operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="113da-126">
            <see langword="true" /> se o sistema puder refazer a operação; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-126">
              <see langword="true" /> if the system can redo the operation; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanUndo">
      <MemberSignature Language="C#" Value="public bool CanUndo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanUndo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanUndo" />
      <MemberSignature Language="VB.NET" Value="Public Function CanUndo () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanUndo();" />
      <MemberSignature Language="F#" Value="abstract member CanUndo : unit -&gt; bool" Usage="iExpressionEditorInstance.CanUndo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="113da-127">Obtém um valor booliano que indica se o sistema pode desfazer a operação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-127">Gets a Boolean value that indicates whether the system can undo the operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="113da-128">
            <see langword="true" /> se o sistema puder desfazer a operação; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-128">
              <see langword="true" /> if the system can undo the operation; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearSelection">
      <MemberSignature Language="C#" Value="public void ClearSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearSelection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.ClearSelection" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearSelection ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearSelection();" />
      <MemberSignature Language="F#" Value="abstract member ClearSelection : unit -&gt; unit" Usage="iExpressionEditorInstance.ClearSelection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="113da-129">Limpa a seleção na instância do editor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-129">Clears the selection in the editor instance.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit" Usage="iExpressionEditorInstance.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="113da-130">Fecha e limpa os itens do editor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-130">Closes and purges the editor items.</span>
          </span>
          <span data-ttu-id="113da-131">Isso fechará a instância do editor de expressão específica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-131">This will close the specific expression editor instance.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Closing">
      <MemberSignature Language="C#" Value="event EventHandler Closing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Closing" />
      <MemberSignature Language="DocId" Value="E:System.Activities.Presentation.View.IExpressionEditorInstance.Closing" />
      <MemberSignature Language="VB.NET" Value="Event Closing As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Closing;" />
      <MemberSignature Language="F#" Value="member this.Closing : EventHandler " Usage="member this.Closing : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="113da-132">Ocorre quando a instância do editor de expressão está fechando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-132">Occurs when the expression editor instance is closing.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompleteWord">
      <MemberSignature Language="C#" Value="public bool CompleteWord ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CompleteWord() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.CompleteWord" />
      <MemberSignature Language="VB.NET" Value="Public Function CompleteWord () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CompleteWord();" />
      <MemberSignature Language="F#" Value="abstract member CompleteWord : unit -&gt; bool" Usage="iExpressionEditorInstance.CompleteWord " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="113da-133">Determina se a instância do editor de expressão pode fornecer uma lista de conclusões para a palavra parcial digitada pelo usuário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-133">Determines whether the expression editor instance can provide a list of completions for the partial word typed by the user.</span>
          </span>
          <span data-ttu-id="113da-134">Por exemplo, os nomes do membro, do argumento e do método podem ser mostrados para o usuário como uma tentativa de ajudá-los a completar a palavra que está sendo digitada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-134">For example, member, argument, and method names can be shown to the user in an attempt to help them complete the word they are typing.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="113da-135">
            <see langword="true" /> se esse método tiver êxito; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-135">
              <see langword="true" /> if this method succeeds; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public bool Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Copy();" />
      <MemberSignature Language="F#" Value="abstract member Copy : unit -&gt; bool" Usage="iExpressionEditorInstance.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="113da-136">Copia a expressão ativa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-136">Copies the active expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="113da-137">
            <see langword="true" /> caso a cópia seja bem-sucedida; do contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-137">
              <see langword="true" /> if the copy is successful; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cut">
      <MemberSignature Language="C#" Value="public bool Cut ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Cut() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.Cut" />
      <MemberSignature Language="VB.NET" Value="Public Function Cut () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Cut();" />
      <MemberSignature Language="F#" Value="abstract member Cut : unit -&gt; bool" Usage="iExpressionEditorInstance.Cut " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="113da-138">Recorta a expressão ativa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-138">Cuts the active expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="113da-139">
            <see langword="true" /> se o recorte tiver êxito; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-139">
              <see langword="true" /> if the cut is successful; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecreaseFilterLevel">
      <MemberSignature Language="C#" Value="public bool DecreaseFilterLevel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DecreaseFilterLevel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.DecreaseFilterLevel" />
      <MemberSignature Language="VB.NET" Value="Public Function DecreaseFilterLevel () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool DecreaseFilterLevel();" />
      <MemberSignature Language="F#" Value="abstract member DecreaseFilterLevel : unit -&gt; bool" Usage="iExpressionEditorInstance.DecreaseFilterLevel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="113da-140">Diminui o nível de filtro para mostrar todos os itens na lista de filtro do Intellisense e retorna um valor que indica se a operação foi bem-sucedida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-140">Decreases the filter level to show all items in the Intellisense filter list and returns a value that indicates whether this operation was successful.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="113da-141">
            <see langword="true" /> se esse método tiver êxito; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-141">
              <see langword="true" /> if this method succeeds; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Focus();" />
      <MemberSignature Language="F#" Value="abstract member Focus : unit -&gt; unit" Usage="iExpressionEditorInstance.Focus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="113da-142">Define o foco na instância do editor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-142">Sets focus on the editor instance.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommittedText">
      <MemberSignature Language="C#" Value="public string GetCommittedText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetCommittedText() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.GetCommittedText" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCommittedText () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCommittedText();" />
      <MemberSignature Language="F#" Value="abstract member GetCommittedText : unit -&gt; string" Usage="iExpressionEditorInstance.GetCommittedText " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="113da-143">Obtém o texto usado para gerar uma expressão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-143">Gets the text used to generate an expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="113da-144">Retorna um <see cref="T:System.String" /> que contém o texto usado para gerar uma expressão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-144">Returns a <see cref="T:System.String" /> that contains the text used to generate an expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalIntellisense">
      <MemberSignature Language="C#" Value="public bool GlobalIntellisense ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GlobalIntellisense() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.GlobalIntellisense" />
      <MemberSignature Language="VB.NET" Value="Public Function GlobalIntellisense () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GlobalIntellisense();" />
      <MemberSignature Language="F#" Value="abstract member GlobalIntellisense : unit -&gt; bool" Usage="iExpressionEditorInstance.GlobalIntellisense " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="113da-145">Recupera o IntelliSense global na expressão no editor de expressões e retorna um valor que indica se a operação foi bem-sucedida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-145">Retrieves global IntelliSense on the expression in the expression editor and returns a value that indicates whether this operation was successful.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="113da-146">
            <see langword="true" /> se esse método tiver êxito; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-146">
              <see langword="true" /> if this method succeeds; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GotAggregateFocus">
      <MemberSignature Language="C#" Value="event EventHandler GotAggregateFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler GotAggregateFocus" />
      <MemberSignature Language="DocId" Value="E:System.Activities.Presentation.View.IExpressionEditorInstance.GotAggregateFocus" />
      <MemberSignature Language="VB.NET" Value="Event GotAggregateFocus As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ GotAggregateFocus;" />
      <MemberSignature Language="F#" Value="member this.GotAggregateFocus : EventHandler " Usage="member this.GotAggregateFocus : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="113da-147">Ocorre quando a instância do editor de expressão tem o foco de agregação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-147">Occurs when the expression editor instance has aggregate focus.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAggregateFocus">
      <MemberSignature Language="C#" Value="public bool HasAggregateFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAggregateFocus" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.View.IExpressionEditorInstance.HasAggregateFocus" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAggregateFocus As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAggregateFocus { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasAggregateFocus : bool" Usage="System.Activities.Presentation.View.IExpressionEditorInstance.HasAggregateFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="113da-148">Obtém um valor que indica se a instância tem foco de agregação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-148">Gets a value that indicates whether the instance has aggregate focus.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="113da-149">
            <see langword="true" /> Se a instância do editor tem o foco de agregação; Caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-149">
              <see langword="true" /> if the editor instance has aggregate focus; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="113da-150">A instância tem agregação foco quando a <xref:System.Activities.Presentation.View.IExpressionEditorInstance.HostControl%2A> ou qualquer outro controle criado pelo <xref:System.Activities.Presentation.View.IExpressionEditorInstance.HostControl%2A> tem foco.</span><span class="sxs-lookup"><span data-stu-id="113da-150">The instance has aggregate focus when the <xref:System.Activities.Presentation.View.IExpressionEditorInstance.HostControl%2A> or any other control created by the <xref:System.Activities.Presentation.View.IExpressionEditorInstance.HostControl%2A> has focus.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalScrollBarVisibility">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ScrollBarVisibility HorizontalScrollBarVisibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.ScrollBarVisibility HorizontalScrollBarVisibility" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.View.IExpressionEditorInstance.HorizontalScrollBarVisibility" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalScrollBarVisibility As ScrollBarVisibility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ScrollBarVisibility HorizontalScrollBarVisibility { System::Windows::Controls::ScrollBarVisibility get(); void set(System::Windows::Controls::ScrollBarVisibility value); };" />
      <MemberSignature Language="F#" Value="member this.HorizontalScrollBarVisibility : System.Windows.Controls.ScrollBarVisibility with get, set" Usage="System.Activities.Presentation.View.IExpressionEditorInstance.HorizontalScrollBarVisibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ScrollBarVisibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="113da-151">Obtém ou define um valor que indica se a barra de rolagem horizontal é visível.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-151">Gets or sets a value that indicates whether the horizontal scrollbar is visible.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="113da-152">Retorna <see cref="T:System.Windows.Controls.ScrollBarVisibility" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-152">Returns <see cref="T:System.Windows.Controls.ScrollBarVisibility" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HostControl">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.Control HostControl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.Control HostControl" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.View.IExpressionEditorInstance.HostControl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HostControl As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::Control ^ HostControl { System::Windows::Controls::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HostControl : System.Windows.Controls.Control" Usage="System.Activities.Presentation.View.IExpressionEditorInstance.HostControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="113da-153">Obtém uma instância <see cref="T:System.Windows.Controls.Control" /> que pode ser usada para exibir o <see langword="ExpressionTextBox" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-153">Gets a <see cref="T:System.Windows.Controls.Control" /> instance that can be used to display in the <see langword="ExpressionTextBox" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="113da-154">Retorna <see cref="T:System.Windows.Controls.Control" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-154">Returns <see cref="T:System.Windows.Controls.Control" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncreaseFilterLevel">
      <MemberSignature Language="C#" Value="public bool IncreaseFilterLevel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IncreaseFilterLevel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.IncreaseFilterLevel" />
      <MemberSignature Language="VB.NET" Value="Public Function IncreaseFilterLevel () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IncreaseFilterLevel();" />
      <MemberSignature Language="F#" Value="abstract member IncreaseFilterLevel : unit -&gt; bool" Usage="iExpressionEditorInstance.IncreaseFilterLevel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="113da-155">Aumenta o nível de filtro para mostrar os itens comuns na lista de filtro do Intellisense e retorna um valor que indica se a operação foi bem-sucedida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-155">Increases the filter level to show common items in the Intellisense filter list and returns a value that indicates whether this operation was successful.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="113da-156">
            <see langword="true" /> se esse método tiver êxito; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-156">
              <see langword="true" /> if this method succeeds; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LostAggregateFocus">
      <MemberSignature Language="C#" Value="event EventHandler LostAggregateFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LostAggregateFocus" />
      <MemberSignature Language="DocId" Value="E:System.Activities.Presentation.View.IExpressionEditorInstance.LostAggregateFocus" />
      <MemberSignature Language="VB.NET" Value="Event LostAggregateFocus As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LostAggregateFocus;" />
      <MemberSignature Language="F#" Value="member this.LostAggregateFocus : EventHandler " Usage="member this.LostAggregateFocus : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="113da-157">Representa um evento que é acionado quando a instância do editor de expressão perde o foco de agregação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-157">Represents an event that is raised when the expression editor instance loses aggregate focus.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="113da-158">A instância perde agregação foco quando a <xref:System.Activities.Presentation.View.IExpressionEditorInstance.HostControl%2A> e cada controle criado pelo <xref:System.Activities.Presentation.View.IExpressionEditorInstance.HostControl%2A> perder o foco.</span><span class="sxs-lookup"><span data-stu-id="113da-158">The instance loses aggregate focus when the <xref:System.Activities.Presentation.View.IExpressionEditorInstance.HostControl%2A> and every control created by the <xref:System.Activities.Presentation.View.IExpressionEditorInstance.HostControl%2A> loose focus.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxLines">
      <MemberSignature Language="C#" Value="public int MaxLines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxLines" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.View.IExpressionEditorInstance.MaxLines" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxLines As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxLines { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxLines : int with get, set" Usage="System.Activities.Presentation.View.IExpressionEditorInstance.MaxLines" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="113da-159">Obtém ou define o número máximo de linhas de texto a serem exibidas no controle <see langword="ExpressionTextBox" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-159">Gets or sets the maximum number of lines of text to be displayed by the <see langword="ExpressionTextBox" /> control.</span>
          </span>
          <span data-ttu-id="113da-160">Essa propriedade define implicitamente a altura do controle <see langword="ExpressionTextBox" /> ao aumentar para caber.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-160">This property implicitly sets the height of the <see langword="ExpressionTextBox" /> control when growing to fit.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="113da-161">Retorna um <see cref="T:System.Int32" /> que contém o número máximo de linhas de texto a ser exibido, o <see langword="ExpressionTextBox" /> controle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-161">Returns an <see cref="T:System.Int32" /> that containing the maximum number of lines of text to be displayed by the <see langword="ExpressionTextBox" /> control.</span>
          </span>
        </value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="MinLines">
      <MemberSignature Language="C#" Value="public int MinLines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinLines" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.View.IExpressionEditorInstance.MinLines" />
      <MemberSignature Language="VB.NET" Value="Public Property MinLines As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MinLines { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MinLines : int with get, set" Usage="System.Activities.Presentation.View.IExpressionEditorInstance.MinLines" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="113da-162">Obtém ou define o número mínimo de linhas de texto a serem exibidas no controle <see langword="ExpressionTextBox" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-162">Gets or sets the minimum number of lines of text to be displayed by the <see langword="ExpressionTextBox" /> control.</span>
          </span>
          <span data-ttu-id="113da-163">Essa propriedade define implicitamente a altura do controle <see langword="ExpressionTextBox" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-163">This property implicitly sets the height of the <see langword="ExpressionTextBox" /> control.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="113da-164">Retorna um <see cref="T:System.Int32" /> que contém o número mínimo de linhas de texto a ser exibido, o <see langword="ExpressionTextBox" /> controle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-164">Returns an <see cref="T:System.Int32" /> that contains the minimum number of lines of text to be displayed by the <see langword="ExpressionTextBox" /> control.</span>
          </span>
        </value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterInfo">
      <MemberSignature Language="C#" Value="public bool ParameterInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ParameterInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.ParameterInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function ParameterInfo () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ParameterInfo();" />
      <MemberSignature Language="F#" Value="abstract member ParameterInfo : unit -&gt; bool" Usage="iExpressionEditorInstance.ParameterInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="113da-165">Recupera as informações de parâmetro na expressão no editor de expressões e retorna um valor que indica se a operação foi bem-sucedida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-165">Retrieves parameter information on the expression in the expression editor and returns a value that indicates whether this operation was successful.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="113da-166">
            <see langword="true" /> se esse método tiver êxito; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-166">
              <see langword="true" /> if this method succeeds; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Paste">
      <MemberSignature Language="C#" Value="public bool Paste ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Paste() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.Paste" />
      <MemberSignature Language="VB.NET" Value="Public Function Paste () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Paste();" />
      <MemberSignature Language="F#" Value="abstract member Paste : unit -&gt; bool" Usage="iExpressionEditorInstance.Paste " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="113da-167">Cola a expressão ativa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-167">Pastes the active expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="113da-168">
            <see langword="true" /> se a colagem for bem-sucedida; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-168">
              <see langword="true" /> if the paste is successful; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuickInfo">
      <MemberSignature Language="C#" Value="public bool QuickInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool QuickInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.QuickInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function QuickInfo () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool QuickInfo();" />
      <MemberSignature Language="F#" Value="abstract member QuickInfo : unit -&gt; bool" Usage="iExpressionEditorInstance.QuickInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="113da-169">Determina se as informações de tipo devem ser exibidas em uma dica de ferramenta Informações Rápidas do IntelliSense.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-169">Determines whether type information to be shown in an IntelliSense quick info tool tip.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="113da-170">
            <see langword="true" /> se esse método tiver êxito; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-170">
              <see langword="true" /> if this method succeeds; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Redo">
      <MemberSignature Language="C#" Value="public bool Redo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Redo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.Redo" />
      <MemberSignature Language="VB.NET" Value="Public Function Redo () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Redo();" />
      <MemberSignature Language="F#" Value="abstract member Redo : unit -&gt; bool" Usage="iExpressionEditorInstance.Redo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="113da-171">Reaplica a última operação que foi desfeita no editor, ou seja, reverte os efeitos da operação desfazer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-171">Reapplies the last operation that was undone in the editor, that is, reverse the effects of the undo operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="113da-172">
            <see langword="true" /> se a fase refazer for bem-sucedida; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-172">
              <see langword="true" /> if the redo is successful; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.View.IExpressionEditorInstance.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Activities.Presentation.View.IExpressionEditorInstance.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="113da-173">Obtém ou define o valor do texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-173">Gets or sets the value of the text.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="113da-174">Retorna <see cref="T:System.String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-174">Returns <see cref="T:System.String" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Activities.Presentation.View.IExpressionEditorInstance.TextChanged" />
      <MemberSignature Language="VB.NET" Value="Event TextChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextChanged;" />
      <MemberSignature Language="F#" Value="member this.TextChanged : EventHandler " Usage="member this.TextChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="113da-175">Representa um evento que é acionado quando o texto em uma instância do editor de expressão é alterado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-175">Represents an event that is raised when the text in an expression editor instance is changed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Undo">
      <MemberSignature Language="C#" Value="public bool Undo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Undo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.Undo" />
      <MemberSignature Language="VB.NET" Value="Public Function Undo () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Undo();" />
      <MemberSignature Language="F#" Value="abstract member Undo : unit -&gt; bool" Usage="iExpressionEditorInstance.Undo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="113da-176">Desfaz a última operação no editor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-176">Undoes the last operation in the editor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="113da-177">
            <see langword="true" /> se a fase desfazer for bem-sucedida; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-177">
              <see langword="true" /> if the undo is successful; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalScrollBarVisibility">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ScrollBarVisibility VerticalScrollBarVisibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.ScrollBarVisibility VerticalScrollBarVisibility" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.View.IExpressionEditorInstance.VerticalScrollBarVisibility" />
      <MemberSignature Language="VB.NET" Value="Public Property VerticalScrollBarVisibility As ScrollBarVisibility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ScrollBarVisibility VerticalScrollBarVisibility { System::Windows::Controls::ScrollBarVisibility get(); void set(System::Windows::Controls::ScrollBarVisibility value); };" />
      <MemberSignature Language="F#" Value="member this.VerticalScrollBarVisibility : System.Windows.Controls.ScrollBarVisibility with get, set" Usage="System.Activities.Presentation.View.IExpressionEditorInstance.VerticalScrollBarVisibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ScrollBarVisibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="113da-178">Obtém ou define um valor que indica se a barra de rolagem vertical é visível.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-178">Gets or sets a value that indicates whether the vertical scrollbar is visible.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="113da-179">Retorna <see cref="T:System.Windows.Controls.ScrollBarVisibility" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="113da-179">Returns <see cref="T:System.Windows.Controls.ScrollBarVisibility" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>