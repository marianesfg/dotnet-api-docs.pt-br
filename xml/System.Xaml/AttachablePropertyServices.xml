<Type Name="AttachablePropertyServices" FullName="System.Xaml.AttachablePropertyServices">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4ffebc592a471cb22b852f78d3980b230f75ecd5" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30719520" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class AttachablePropertyServices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AttachablePropertyServices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.AttachablePropertyServices" />
  <TypeSignature Language="VB.NET" Value="Public Class AttachablePropertyServices" />
  <TypeSignature Language="C++ CLI" Value="public ref class AttachablePropertyServices abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="38dda-101">Fornece métodos auxiliares estáticos que obtêm as informações de método do acessador e valores de uma propriedade anexável e que funcionam com um repositório de propriedades anexadas.</span>
      <span class="sxs-lookup">
        <span data-stu-id="38dda-101">Provides static helper methods that obtain values and accessor method information from an attachable property and that work with an attached property store.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38dda-102">A maioria das funcionalidades nesta classe se baseia em um repositório de propriedade anexada, que geralmente implementa o <xref:System.Xaml.IAttachedPropertyStore> interface.</span><span class="sxs-lookup"><span data-stu-id="38dda-102">Most functionality in this class relies on an attached property store, which generally implements the <xref:System.Xaml.IAttachedPropertyStore> interface.</span></span> <span data-ttu-id="38dda-103">No entanto, os parâmetros para passar o armazenamento em <xref:System.Xaml.AttachablePropertyServices> não são digitadas como a interface e em vez disso, são digitadas como `object`.</span><span class="sxs-lookup"><span data-stu-id="38dda-103">However, parameters for passing the store into <xref:System.Xaml.AttachablePropertyServices> are not typed as the interface and are instead typed as `object`.</span></span> <span data-ttu-id="38dda-104">Isso ocorre porque você pode passar um objeto arbitrário e, nesse caso, um armazenamento de propriedade anexável padrão interno é usado.</span><span class="sxs-lookup"><span data-stu-id="38dda-104">This is because you can pass an arbitrary object, and in this case, an internal default attachable property store is used.</span></span>  
  
 <span data-ttu-id="38dda-105">É prática recomendada para o objeto arbitrário passar o objeto que possa ser associado com o armazenamento.</span><span class="sxs-lookup"><span data-stu-id="38dda-105">Best practice for the arbitrary object is to pass the object that would otherwise be associated with the store.</span></span> <span data-ttu-id="38dda-106">Não passe `null` para indicar que você não tem um <xref:System.Xaml.IAttachedPropertyStore> para usar.</span><span class="sxs-lookup"><span data-stu-id="38dda-106">Do not pass `null` to indicate that you do not have an <xref:System.Xaml.IAttachedPropertyStore> to use.</span></span> <span data-ttu-id="38dda-107">Passando `null` entra em caminhos de código que não fazem nada.</span><span class="sxs-lookup"><span data-stu-id="38dda-107">Passing `null` enters code paths that do nothing.</span></span> <span data-ttu-id="38dda-108">Passando um objeto que não for nulo, mas é avaliada como `null` em uma tentativa <xref:System.Xaml.IAttachedPropertyStore> converter, usa o armazenamento de propriedade anexável padrão.</span><span class="sxs-lookup"><span data-stu-id="38dda-108">Passing an object that is non-null, but evaluates as `null` on an attempted <xref:System.Xaml.IAttachedPropertyStore> cast, uses the default attachable property store.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CopyPropertiesTo">
      <MemberSignature Language="C#" Value="public static void CopyPropertiesTo (object instance, System.Collections.Generic.KeyValuePair&lt;System.Xaml.AttachableMemberIdentifier,object&gt;[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyPropertiesTo(object instance, valuetype System.Collections.Generic.KeyValuePair`2&lt;class System.Xaml.AttachableMemberIdentifier, object&gt;[] array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.AttachablePropertyServices.CopyPropertiesTo(System.Object,System.Collections.Generic.KeyValuePair{System.Xaml.AttachableMemberIdentifier,System.Object}[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyPropertiesTo (instance As Object, array As KeyValuePair(Of AttachableMemberIdentifier, Object)(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyPropertiesTo(System::Object ^ instance, cli::array &lt;System::Collections::Generic::KeyValuePair&lt;System::Xaml::AttachableMemberIdentifier ^, System::Object ^&gt;&gt; ^ array, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="array" Type="System.Collections.Generic.KeyValuePair&lt;System.Xaml.AttachableMemberIdentifier,System.Object&gt;[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="38dda-109">Um repositório de propriedades anexáveis específico que implementa <see cref="T:System.Xaml.IAttachedPropertyStore" />; ou qualquer objeto não nulo para acessar um repositório de propriedades anexáveis padrão estático.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-109">A specific attachable property store that implements <see cref="T:System.Xaml.IAttachedPropertyStore" />; or any non-null object to access a static default attachable property store.</span>
          </span>
        </param>
        <param name="array">
          <span data-ttu-id="38dda-110">A matriz de destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-110">The destination array.</span>
          </span>
          <span data-ttu-id="38dda-111">A matriz é uma matriz genérica, deve ser passada não dimensionada e deve ter os componentes de <see cref="T:System.Xaml.AttachableMemberIdentifier" /> e <see langword="object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-111">The array is a generic array, should be passed undimensioned, and should have components of <see cref="T:System.Xaml.AttachableMemberIdentifier" /> and <see langword="object" />.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="38dda-112">O índice de origem para o qual copiar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-112">The source index into which to copy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="38dda-113">Copia todos os pares de valor/propriedade anexáveis de um repositório de propriedades anexáveis especificado para uma matriz de destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-113">Copies all attachable property/value pairs from a specified attachable property store and into a destination array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38dda-114">Chamar este método invoca uma subjacente <xref:System.Collections.Generic.ICollection%601.CopyTo%2A> implementação é restrita com um par chave/valor, que pode ser a origem de exceções que não estão listadas neste tópico.</span><span class="sxs-lookup"><span data-stu-id="38dda-114">Calling this method invokes an underlying <xref:System.Collections.Generic.ICollection%601.CopyTo%2A> implementation that is constrained with a key/value pair, which might be the source of exceptions that are not listed in this topic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttachedPropertyCount">
      <MemberSignature Language="C#" Value="public static int GetAttachedPropertyCount (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetAttachedPropertyCount(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.AttachablePropertyServices.GetAttachedPropertyCount(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAttachedPropertyCount (instance As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetAttachedPropertyCount(System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="38dda-115">Um repositório de propriedades anexáveis específico que implementa <see cref="T:System.Xaml.IAttachedPropertyStore" />; ou qualquer objeto não nulo para acessar um repositório de propriedades anexáveis padrão estático.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-115">A specific attachable property store that implements <see cref="T:System.Xaml.IAttachedPropertyStore" />; or any non-null object to access a static default attachable property store.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="38dda-116">Retorna a contagem das entradas de propriedade anexável que estão no repositório especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-116">Returns the count of the attachable property entries that are in the specified store.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="38dda-117">A contagem de inteiro de entradas no repositório.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-117">The integer count of entries in the store.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveProperty">
      <MemberSignature Language="C#" Value="public static bool RemoveProperty (object instance, System.Xaml.AttachableMemberIdentifier name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool RemoveProperty(object instance, class System.Xaml.AttachableMemberIdentifier name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.AttachablePropertyServices.RemoveProperty(System.Object,System.Xaml.AttachableMemberIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RemoveProperty (instance As Object, name As AttachableMemberIdentifier) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool RemoveProperty(System::Object ^ instance, System::Xaml::AttachableMemberIdentifier ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="name" Type="System.Xaml.AttachableMemberIdentifier" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="38dda-118">Um repositório de propriedades anexáveis específico que implementa <see cref="T:System.Xaml.IAttachedPropertyStore" />; ou qualquer objeto não nulo para acessar um repositório de propriedades anexáveis padrão estático.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-118">A specific attachable property store that implements <see cref="T:System.Xaml.IAttachedPropertyStore" />; or any non-null object to access a static default attachable property store.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="38dda-119">O identificador da entrada de propriedade anexável a remover do armazenamento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-119">The identifier for the attachable property entry to remove from the store.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="38dda-120">Remove a entrada para a propriedade anexável especificada do repositório especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-120">Removes the entry for the specified attachable property from the specified store.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="38dda-121">
            <see langword="true" /> se uma entrada de propriedade anexável para <paramref name="name" /> tiver sido encontrada no repositório e removida dele; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-121">
              <see langword="true" /> if an attachable property entry for <paramref name="name" /> was found in the store and removed from it; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38dda-122">As lojas são por instância. Portanto, em um repositório, o `name` o valor deve ser inequívoco.</span><span class="sxs-lookup"><span data-stu-id="38dda-122">Stores are per instance; therefore, in a store, the `name` value should be unambiguous.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetProperty">
      <MemberSignature Language="C#" Value="public static void SetProperty (object instance, System.Xaml.AttachableMemberIdentifier name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetProperty(object instance, class System.Xaml.AttachableMemberIdentifier name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.AttachablePropertyServices.SetProperty(System.Object,System.Xaml.AttachableMemberIdentifier,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetProperty (instance As Object, name As AttachableMemberIdentifier, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetProperty(System::Object ^ instance, System::Xaml::AttachableMemberIdentifier ^ name, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="name" Type="System.Xaml.AttachableMemberIdentifier" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="38dda-123">Um repositório de propriedades anexáveis específico que implementa <see cref="T:System.Xaml.IAttachedPropertyStore" />; ou qualquer objeto não nulo para usar um repositório de propriedades anexáveis padrão estático.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-123">A specific attachable property store that implements <see cref="T:System.Xaml.IAttachedPropertyStore" />; or any non-null object to use a static default attachable property store.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="38dda-124">O identificador da entrada de propriedade anexável para a qual definir um valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-124">The identifier of the attachable property entry for which to set a value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="38dda-125">O valor a ser definido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-125">The value to set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="38dda-126">Define um valor para a propriedade anexável especificada no repositório especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-126">Sets a value for the specified attachable property in the specified store.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="38dda-127">Não foi possível definir um valor no repositório.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-127">A value could not be set in the store.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="38dda-128">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-128">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetProperty">
      <MemberSignature Language="C#" Value="public static bool TryGetProperty (object instance, System.Xaml.AttachableMemberIdentifier name, out object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetProperty(object instance, class System.Xaml.AttachableMemberIdentifier name, [out] object&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.AttachablePropertyServices.TryGetProperty(System.Object,System.Xaml.AttachableMemberIdentifier,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetProperty (instance As Object, name As AttachableMemberIdentifier, ByRef value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetProperty(System::Object ^ instance, System::Xaml::AttachableMemberIdentifier ^ name, [Runtime::InteropServices::Out] System::Object ^ % value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="name" Type="System.Xaml.AttachableMemberIdentifier" />
        <Parameter Name="value" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="38dda-129">Um repositório de propriedades anexáveis específico que implementa <see cref="T:System.Xaml.IAttachedPropertyStore" />; ou qualquer objeto não nulo para usar um repositório de propriedades anexáveis padrão estático.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-129">A specific attachable property store that implements <see cref="T:System.Xaml.IAttachedPropertyStore" />; or any non-null object to use a static default attachable property store.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="38dda-130">O identificador da entrada de propriedade anexável para a qual obter um valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-130">The identifier of the attachable property entry for which to get a value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="38dda-131">Parâmetro de saída.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-131">Out parameter.</span>
          </span>
          <span data-ttu-id="38dda-132">Quando esse método retorna, ele conterá o objeto de destino para o valor se <c>nome</c> existir no repositório e tiver um valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-132">When this method returns, contains the destination object for the value if <c>name</c> exists in the store and has a value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="38dda-133">Tenta obter um valor para a propriedade anexável especificada no repositório especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-133">Attempts to get a value for the specified attachable property in the specified store.</span>
          </span>
          <span data-ttu-id="38dda-134">Não lançará uma exceção se a propriedade anexável específica não existir no repositório.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-134">Does not throw an exception if the specific attachable property does not exist in the store.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="38dda-135">
            <see langword="true" /> se uma entrada de propriedade anexável para <paramref name="name" /> for encontrada no repositório e um valor for lançado em <paramref name="value" />; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-135">
              <see langword="true" /> if an attachable property entry for <paramref name="name" /> was found in the store and a value was posted to <paramref name="value" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetProperty&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetProperty&lt;T&gt; (object instance, System.Xaml.AttachableMemberIdentifier name, out T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetProperty&lt;T&gt;(object instance, class System.Xaml.AttachableMemberIdentifier name, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.AttachablePropertyServices.TryGetProperty``1(System.Object,System.Xaml.AttachableMemberIdentifier,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetProperty(Of T) (instance As Object, name As AttachableMemberIdentifier, ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryGetProperty(System::Object ^ instance, System::Xaml::AttachableMemberIdentifier ^ name, [Runtime::InteropServices::Out] T % value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="name" Type="System.Xaml.AttachableMemberIdentifier" />
        <Parameter Name="value" Type="T&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="38dda-136">O tipo esperado da saída.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-136">The expected type of the output.</span>
          </span>
        </typeparam>
        <param name="instance">
          <span data-ttu-id="38dda-137">Um repositório de propriedades anexáveis específico que implementa <see cref="T:System.Xaml.IAttachedPropertyStore" />; ou qualquer objeto não nulo para acessar um repositório de propriedades anexáveis padrão estático.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-137">A specific attachable property store that implements <see cref="T:System.Xaml.IAttachedPropertyStore" />; or any non-null object to access a static default attachable property store.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="38dda-138">O identificador da entrada de propriedade anexável para a qual obter um valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-138">The identifier of the attachable property entry for which to get a value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="38dda-139">Parâmetro de saída.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-139">Out parameter.</span>
          </span>
          <span data-ttu-id="38dda-140">Quando esse método retorna, ele conterá o objeto de destino para o valor se <c>nome</c> existir no repositório e tiver um valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-140">When this method returns, contains the destination object for the value if <c>name</c> exists in the store and has a value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="38dda-141">Tenta obter um valor para a propriedade anexável especificada no repositório especificado, retornando um formulário genérico de saída.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-141">Attempts to get a value for the specified attachable property in the specified store, returning a generic output form.</span>
          </span>
          <span data-ttu-id="38dda-142">Não lançará uma exceção se a propriedade anexável específica não existir no repositório.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-142">Does not throw an exception if the specific attachable property does not exist in the store.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="38dda-143">
            <see langword="true" /> se uma entrada de propriedade anexável para <paramref name="name" /> for encontrada no repositório e um valor for lançado em <paramref name="value" />; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38dda-143">
              <see langword="true" /> if an attachable property entry for <paramref name="name" /> was found in the store and a value was posted to <paramref name="value" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>