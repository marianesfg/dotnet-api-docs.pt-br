<Type Name="XamlReader" FullName="System.Xaml.XamlReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="849d2e0c9bee513161cca5e65badec4967daf83c" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51864275" /></Metadata><TypeSignature Language="C#" Value="public abstract class XamlReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XamlReader extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlReader" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XamlReader&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlReader abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type XamlReader = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Fornece definições de base para classes que consomem entradas XAML e produzem fluxos de nós XAML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xaml.XamlReader> é uma classe abstrata e não fornece implementações ou definições que tem um resultado do trabalho para todos os membros. Os membros que têm uma implementação em <xref:System.Xaml.XamlReader> são indicados nos comentários para esse membro. Especificamente, <xref:System.Xaml.XamlReader> tem vários membros abstratos que devem ser implementados e vários membros virtuais.  
  
 Os membros virtuais, <xref:System.Xaml.XamlReader.ReadSubtree%2A> e <xref:System.Xaml.XamlReader.Skip%2A> cada uma delas fornece uma implementação padrão que é apropriada para a maioria dos casos. No entanto, o <xref:System.Xaml.XamlReader.ReadSubtree%2A> e <xref:System.Xaml.XamlReader.Skip%2A> implementações padrão dependem de outro comportamento esperado do leitor XAML de implementação; em particular, eles dependem de <xref:System.Xaml.XamlReader.Read%2A> substituir. <xref:System.Xaml.XamlReader.Dispose%2A> também é um membro virtual que tem uma implementação do padrão de trabalho.  
  
 As seguintes classes são classes derivadas mais relevantes e práticas em serviços de XAML do .NET Framework e o assembly System. XAML:  
  
-   <xref:System.Xaml.XamlObjectReader>, que lê um grafo de objeto, como o gráfico do objeto Active Directory de um aplicativo em tempo de execução.  
  
-   <xref:System.Xaml.XamlXmlReader>, que lê o XAML na forma de um arquivo de texto XML usando um geral <xref:System.Xml.XmlReader> que carrega o arquivo como uma classe auxiliar intermediário.  
  
 Incluem outros leitores XAML de outras estruturas <xref:System.Windows.Baml2006.Baml2006Reader> e <xref:System.Activities.Debugger.XamlDebuggerXmlReader>.  
  
 <xref:System.Xaml.XamlReader> difere [!INCLUDE[TLA#tla_xmldom](~/includes/tlasharptla-xmldom-md.md)] e <xref:System.Xml.XmlReader> princípios de design porque <xref:System.Xaml.XamlReader> não tem um `Create` método para retornar o padrão subjacente implementações do leitor XAML. Em vez disso, você deve instanciar específicas classes derivadas de leitor XAML chamando seus construtores ou outras APIs auxiliares de classe específica.  
  
## <a name="subtree-readers"></a>Leitores da subárvore  
 Geralmente, você chama <xref:System.Xaml.XamlReader> API no contexto de classes específicas de leitor XAML que derivam de <xref:System.Xaml.XamlReader>. No entanto, em um caso específico, acessar <xref:System.Xaml.XamlReader> API em uma instância de leitor XAML prática que não é público e não derivada de <xref:System.Xaml.XamlObjectReader> ou <xref:System.Xaml.XamlXmlReader>. Nesse caso é quando você chama <xref:System.Xaml.XamlReader.ReadSubtree%2A>, que retorna um <xref:System.Xaml.XamlReader> instância. Na implementação do padrão, o <xref:System.Xaml.XamlReader> que é retornado por essa API é uma classe interna.  
  
 O <xref:System.Xaml.XamlReader> obtido para a leitura da subárvore tem ações válidas para APIs, como <xref:System.Xaml.XamlReader.Read%2A> e <xref:System.Xaml.XamlReader.NodeType%2A>, e essas ações são baseadas na classe pai leitor. Esse design permite que a classe interna controlar o nível de quadro em que a subárvore foi inserida. A subárvore atuando <xref:System.Xaml.XamlReader> torna-se de que, se a posição do nó atual for movida além dos limites da subárvore, o leitor de subárvore específica relata fim-de-arquivo ou `null` no nó atual.  
  
 Observações sobre o uso de leitor de subárvore são incluídas em determinados <xref:System.Xaml.XamlReader> APIs.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlObjectReader" />
    <altmember cref="T:System.Xaml.XamlXmlReader" />
    <altmember cref="T:System.Xaml.XamlReaderSettings" />
    <related type="Article" href="https://msdn.microsoft.com/library/7c11abec-1075-474c-9d9b-778e5dab21c3">Noções básicas sobre estruturas e conceitos do fluxo de nó XAML</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa a classe <see cref="T:System.Xaml.XamlReader" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="xamlReader.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fecha o fluxo de nós XAML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na implementação de base, chamando <xref:System.Xaml.XamlReader.Close%2A> chamadas <xref:System.Xaml.XamlReader.Dispose%2A> com o `isDisposing` parâmetro como `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="xamlReader.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" /> para liberar os recursos gerenciados, caso contrário, <see langword="false" />.</param>
        <summary>Libera os recursos não gerenciados usados pelo <see cref="T:System.Xaml.XamlReader" /> e, opcionalmente, libera os recursos gerenciados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você deve chamar a classe base para obter <xref:System.Xaml.XamlReader.IsDisposed%2A>  =  `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="protected bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool" Usage="System.Xaml.XamlReader.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém se <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> foi chamado.</summary>
        <value><see langword="true" /> Se <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> tiver sido chamado; caso contrário, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEof">
      <MemberSignature Language="C#" Value="public abstract bool IsEof { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEof" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.IsEof" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsEof As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsEof { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEof : bool" Usage="System.Xaml.XamlReader.IsEof" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando implementado em uma classe derivada, obtém um valor que informa se a posição do leitor está no fim do arquivo.</summary>
        <value><see langword="true" /> Se a posição está no conceitual final de arquivo do fluxo de nó XAML; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os leitores a subárvore podem chamar <xref:System.Xaml.XamlReader.IsEof%2A>, com o comportamento que reflete corretamente os limites da subárvore inserido. Para obter mais informações, consulte a seção "Subárvore leitores" <xref:System.Xaml.XamlReader>, ou consulte <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.IsEof" />
        <altmember cref="P:System.Xaml.XamlXmlReader.IsEof" />
      </Docs>
    </Member>
    <Member MemberName="Member">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlMember Member { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlMember Member" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Member" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Member As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlMember ^ Member { System::Xaml::XamlMember ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Member : System.Xaml.XamlMember" Usage="System.Xaml.XamlReader.Member" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando implementada em uma classe derivada, obterá o membro atual na posição do leitor, se a posição do leitor estiver em um <see cref="F:System.Xaml.XamlNodeType.StartMember" />.</summary>
        <value>O membro atual; ou <see langword="null" />, se a posição do leitor não está em um membro.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os leitores a subárvore podem chamar <xref:System.Xaml.XamlReader.Member%2A>, com restrições de comportamento. Para obter mais informações, consulte a seção "Subárvore leitores" <xref:System.Xaml.XamlReader>, ou consulte <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Member" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Member" />
        <altmember cref="T:System.Xaml.XamlMember" />
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.NamespaceDeclaration Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.NamespaceDeclaration Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Namespace As NamespaceDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::NamespaceDeclaration ^ Namespace { System::Xaml::NamespaceDeclaration ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : System.Xaml.NamespaceDeclaration" Usage="System.Xaml.XamlReader.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.NamespaceDeclaration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando implementado em uma classe derivada, obtém as informações do namespace de XAML do nó atual.</summary>
        <value>As informações de namespace XAML, se ele estiver disponível; Caso contrário, <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O design desejado desta API deve retornar apenas-se um resultado não nulo a <xref:System.Xaml.XamlReader.NodeType%2A> do nó atual é <xref:System.Xaml.XamlNodeType.NamespaceDeclaration>. A propriedade não relata o namespace XAML que se aplica a objetos ou membros em um sentido geral de escopo, como interpretado sob um contexto de esquema XAML. Seu aplicativo deve fornecer um meio de informações de cache para atuando namespace XAML como ele atravessa os nós do XAML, se você precisar que essas informações de maneira diferente de como o contexto do esquema XAML reporta a um gravador. Consulte <xref:System.Xaml.XamlXmlReader.Namespace%2A> para observações sobre a implementação de referência.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Namespace" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Namespace" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xaml.XamlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property NodeType As XamlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlNodeType NodeType { System::Xaml::XamlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xaml.XamlNodeType" Usage="System.Xaml.XamlReader.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando implementado em uma classe derivada, obtém o tipo do nó atual.</summary>
        <value>Um valor da enumeração <see cref="T:System.Xaml.XamlNodeType" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os leitores a subárvore podem chamar <xref:System.Xaml.XamlReader.NodeType%2A>, com restrições de comportamento. Para obter mais informações, consulte a seção "Subárvore leitores" <xref:System.Xaml.XamlReader>, ou consulte <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.NodeType" />
        <altmember cref="P:System.Xaml.XamlXmlReader.NodeType" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Read();" />
      <MemberSignature Language="F#" Value="abstract member Read : unit -&gt; bool" Usage="xamlReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando implementado em uma classe derivada, fornecerá o próximo nó XAML da origem, se houver um nó disponível.</summary>
        <returns><see langword="true" /> se um nó estiver disponível, caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os leitores a subárvore podem chamar <xref:System.Xaml.XamlReader.Read%2A>, com restrições de comportamento. Para obter mais informações, consulte a seção "Subárvore leitores" <xref:System.Xaml.XamlReader>, ou consulte <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xaml.XamlXmlReader.Read" />
        <altmember cref="M:System.Xaml.XamlObjectReader.Read" />
      </Docs>
    </Member>
    <Member MemberName="ReadSubtree">
      <MemberSignature Language="C#" Value="public virtual System.Xaml.XamlReader ReadSubtree ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xaml.XamlReader ReadSubtree() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.ReadSubtree" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadSubtree () As XamlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xaml::XamlReader ^ ReadSubtree();" />
      <MemberSignature Language="F#" Value="abstract member ReadSubtree : unit -&gt; System.Xaml.XamlReader&#xA;override this.ReadSubtree : unit -&gt; System.Xaml.XamlReader" Usage="xamlReader.ReadSubtree " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna um <see cref="T:System.Xaml.XamlReader" /> que se baseia no <see cref="T:System.Xaml.XamlReader" /> atual, no qual o <see cref="T:System.Xaml.XamlReader" /> retornado é usado para iterar em uma subárvore da estrutura de nós XAML.</summary>
        <returns>Uma nova instância de leitor de XAML da subárvore.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método tem uma implementação padrão e retorna um válido <xref:System.Xaml.XamlReader>. Retornado <xref:System.Xaml.XamlReader> é uma classe interna que restringe a certas <xref:System.Xaml.XamlReader> ações. As restrições são consistentes com a finalidade de ler somente uma subárvore dimensionada de uma fonte maior para um conjunto de nó XAML e de retorno de fim-de-arquivo ou `null` no nó atual quando a subárvore é fechada.  
  
 Em geral, você deve verificar o nó atual de inicial <xref:System.Xaml.XamlReader.Read%2A> para determinar se é necessário um leitor de subárvore. Como verificar isso pode ser específicos de implementação; No entanto, evite criar vários leitores de subárvore para cada subárvore. Além disso, evite a invocação de um leitor de subárvore para determinados casos de nó (por exemplo, para <xref:System.Xaml.XamlNodeType.NamespaceDeclaration>) que não pode conter uma subárvore de nós.  
  
 Depois de obter um leitor de subárvore, você deve chamar <xref:System.Xaml.XamlReader.Read%2A> nele para obter um nó atual (ou chamar <xref:System.Xaml.XamlReader.Skip%2A> para obter um próximo nó). Você não obter automaticamente uma posição inicial do nó do leitor de subárvore quando ela é criada.  
  
 O leitor obtenha chamando <xref:System.Xaml.XamlReader.ReadSubtree%2A> desse padrão de implementação é uma classe interna. A classe interna baseia seu comportamento na <xref:System.Xaml.XamlReader> implementação que está sendo usado quando <xref:System.Xaml.XamlReader.ReadSubtree%2A> é chamado. A finalidade da classe interna é encapsular o <xref:System.Xaml.XamlReader.Read%2A> e o comportamento geral de passagem. Passagem permanece dentro da subárvore pretendida por manter o controle de <xref:System.Xaml.XamlNodeType.StartMember> / <xref:System.Xaml.XamlNodeType.EndMember> pares ou <xref:System.Xaml.XamlNodeType.StartObject> / <xref:System.Xaml.XamlNodeType.EndObject> pares. Ele retorna também corretamente `false` para <xref:System.Xaml.XamlReader.Read%2A> e `true` para <xref:System.Xaml.XamlReader.IsEof%2A> quando o leitor está no final da subárvore, conforme definido pelo seu ponto de entrada. Em geral, você assume que quaisquer <xref:System.Xaml.XamlReader> chamada de um leitor de subárvore à API tem a mesma implementação como geral <xref:System.Xaml.XamlReader> , exceto para a passagem de delimitação de comportamento.  
  
 No entanto, <xref:System.Xaml.XamlReader.ReadSubtree%2A> é virtual. Portanto, um determinado <xref:System.Xaml.XamlReader> implementação pode fornecer um comportamento que difere de <xref:System.Xaml.XamlReader> comportamento wrapper interna; e um <xref:System.Xaml.XamlReader> implementação pode até mesmo desabilitar a funcionalidade de leitor de subárvore, retornando <xref:System.NotImplementedException> ou outros exceções.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.SchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property SchemaContext As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlSchemaContext ^ SchemaContext { System::Xaml::XamlSchemaContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SchemaContext : System.Xaml.XamlSchemaContext" Usage="System.Xaml.XamlReader.SchemaContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando implementado em uma classe derivada, obtém um objeto que fornece informações de contexto do esquema XAML para o conjunto de informações.</summary>
        <value>Defina um objeto que fornece informações de contexto de esquema XAML para obter as informações.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.SchemaContext" />
        <altmember cref="P:System.Xaml.XamlXmlReader.SchemaContext" />
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public virtual void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Skip" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Skip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Skip();" />
      <MemberSignature Language="F#" Value="abstract member Skip : unit -&gt; unit&#xA;override this.Skip : unit -&gt; unit" Usage="xamlReader.Skip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ignora o nó atual e avança a posição do leitor para o próximo nó.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma vez ignorada, <xref:System.Xaml.XamlReader.Read%2A> é chamado pelo padrão <xref:System.Xaml.XamlReader.Skip%2A> implementação. Você normalmente não chame <xref:System.Xaml.XamlReader.Skip%2A> e <xref:System.Xaml.XamlReader.Read%2A> na sequência.  
  
 No padrão <xref:System.Xaml.XamlReader.Skip%2A> implementação, diferentes ações dependendo de qual <xref:System.Xaml.XamlReader.NodeType%2A> a posição do leitor está na momento. Se a posição do leitor está na momento uma <xref:System.Xaml.XamlNodeType.StartMember> ou <xref:System.Xaml.XamlNodeType.StartObject>, que o membro ou o objeto é ignorado. Para outros <xref:System.Xaml.XamlReader.NodeType%2A> valores, nenhuma ação será tomada diferente chamada <xref:System.Xaml.XamlReader.Read%2A> da posição atual.  
  
 Os leitores a subárvore podem chamar <xref:System.Xaml.XamlReader.Skip%2A>, com restrições de comportamento. Para obter mais informações, consulte a seção "Subárvore leitores" <xref:System.Xaml.XamlReader>, ou consulte <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 O comportamento de árvore do nó de <xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType> se baseia o equivalente em XML <xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType>. Com base nas <xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType> equivalência de comportamento <xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType> ignora o nó e sua subárvore, não apenas o nó de entrada única.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera todos os recursos usados pela instância atual da classe <see cref="T:System.Xaml.XamlReader" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlType Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType Type" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Type" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Type As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlType ^ Type { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Type : System.Xaml.XamlType" Usage="System.Xaml.XamlReader.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando implementado em uma classe derivada, obtém o <see cref="T:System.Xaml.XamlType" /> do nó atual.</summary>
        <value>O <see cref="T:System.Xaml.XamlType" /> do nó atual; ou <see langword="null" />, se a posição atual do leitor não está em um objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os leitores a subárvore podem chamar <xref:System.Xaml.XamlReader.Type%2A>, com restrições de comportamento. Para obter mais informações, consulte a seção "Subárvore leitores" <xref:System.Xaml.XamlReader>, ou consulte <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Type" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Type" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public abstract object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Value" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj" Usage="System.Xaml.XamlReader.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando implementado em uma classe derivada, obtém o valor do nó atual.</summary>
        <value>O valor do nó atual; ou <see langword="null" />, se a posição atual do leitor não está em um <see cref="F:System.Xaml.XamlNodeType.Value" /> tipo de nó.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Value" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Value" />
      </Docs>
    </Member>
  </Members>
</Type>