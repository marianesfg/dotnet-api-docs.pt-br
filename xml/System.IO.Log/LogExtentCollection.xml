<Type Name="LogExtentCollection" FullName="System.IO.Log.LogExtentCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a6312f62a7271a3ae638fe385dad862891597930" />
    <Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="11/09/2018" />
    <Meta Name="ms.locfileid" Value="51304367" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class LogExtentCollection : System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogExtent&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LogExtentCollection extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;class System.IO.Log.LogExtent&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Log.LogExtentCollection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LogExtentCollection&#xA;Implements IEnumerable(Of LogExtent)" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogExtentCollection sealed : System::Collections::Generic::IEnumerable&lt;System::IO::Log::LogExtent ^&gt;" />
  <TypeSignature Language="F#" Value="type LogExtentCollection = class&#xA;    interface seq&lt;LogExtent&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Log</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogExtent&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Representa a coleção de objetos <see cref="T:System.IO.Log.LogExtent" /> associados a um <see cref="T:System.IO.Log.LogStore" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa classe contém uma coleção de <xref:System.IO.Log.LogExtent> objetos associados a um <xref:System.IO.Log.LogStore>. Um <xref:System.IO.Log.LogStore> instância armazena seus dados em uma coleção de extensões do disco, representadas por <xref:System.IO.Log.LogExtent> instâncias. Um determinado <xref:System.IO.Log.LogExtent> está associado a uma <xref:System.IO.Log.LogStore>, e <xref:System.IO.Log.LogExtent> objetos no mesmo <xref:System.IO.Log.LogStore> são de tamanho idêntico. Espaço é adicionado ao e removido de um <xref:System.IO.Log.LogStore> instância em incrementos de extensão.  
  
 Embora <xref:System.IO.Log.LogExtent> objetos são representados no disco como arquivos, eles não devem ser movidos ou excluídos como arquivos normais. Em vez disso, você deve usar os métodos fornecidos por essa classe para adicionar e excluir <xref:System.IO.Log.LogExtent> instâncias diretamente. Extensões geralmente são removidas quando eles não contêm nenhum dado de ativo. No entanto, se o `force` parâmetro na <xref:System.IO.Log.LogExtentCollection.Remove%2A> método é `true`, uma exceção é lançada se não puder ser removidos imediatamente.  
  
 Não é possível remover a última extensão na <xref:System.IO.Log.LogExtentCollection>, o que significa que o <xref:System.IO.Log.LogExtentCollection.Count%2A> propriedade não pode ser zero depois que uma extensão é adicionada.  
  
   
  
## Examples  
 Este exemplo mostra como usar o <xref:System.IO.Log.LogExtent> e <xref:System.IO.Log.LogExtentCollection> classes para adicionar e emular extensões em uma sequência de log.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Log.LogExtent" />
    <altmember cref="T:System.IO.Log.LogStore" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Cria um novo <see cref="T:System.IO.Log.LogExtent" /> e adiciona-o à coleção.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Add(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.Add : string -&gt; unit" Usage="logExtentCollection.Add path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">O caminho para a extensão de log a ser adicionada.</param>
        <summary>Adiciona uma instância <see cref="T:System.IO.Log.LogExtent" /> à coleção.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O tamanho da recém-adicionada <xref:System.IO.Log.LogExtent> instância é igual ao tamanho de existentes <xref:System.IO.Log.LogExtent> instâncias na coleção.  
  
> [!NOTE]
>  Não use esse método para adicionar o primeiro <xref:System.IO.Log.LogExtent> à coleção.  
  
   
  
## Examples  
 Este exemplo mostra como usar o <xref:System.IO.Log.LogExtent> e <xref:System.IO.Log.LogExtentCollection> classes para adicionar e emular extensões em uma sequência de log.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">O nome do arquivo de repositório de log especificado pelo <paramref name="path" /> não é válido.</exception>
        <exception cref="T:System.InvalidOperationException">Um tamanho deve ser especificado para a primeira extensão.</exception>
        <exception cref="T:System.IO.IOException">A solicitação não pôde ser executada devido a uma exceção de E/S inesperada.  
  
- ou - 
O arquivo especificado por <paramref name="path" /> não pode ser criado porque o arquivo ou diretório já existe.</exception>
        <exception cref="T:System.ObjectDisposedException">O método foi chamado depois que a sequência foi descartada.</exception>
        <exception cref="T:System.OutOfMemoryException">Não há memória suficiente para continuar a execução do programa.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">A sequência de registros está cheia.  
  
- ou - 
O disco ou mídia de armazenamento está cheio.</exception>
        <exception cref="T:System.UnauthorizedAccessException">O acesso ao repositório de log especificado é negado pelo sistema operacional.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string path, long size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string path, int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Add(System.String,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (path As String, size As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ path, long size);" />
      <MemberSignature Language="F#" Value="member this.Add : string * int64 -&gt; unit" Usage="logExtentCollection.Add (path, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="path">O caminho para a extensão de log.</param>
        <param name="size">O tamanho da extensão de log.</param>
        <summary>Cria um novo <see cref="T:System.IO.Log.LogExtent" /> com o tamanho especificado e o adiciona à coleção.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a coleção não estiver vazia, o tamanho especificado deve ser pelo menos tão grande quanto o tamanho de outras extensões na coleção. Nesse caso, o `size` parâmetro será ignorado e a extensão é criada com o mesmo tamanho que outras extensões na coleção.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> ou <paramref name="size" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="archiveTail" /> não está dentro do intervalo válido.</exception>
        <exception cref="T:System.ArgumentException">O nome do arquivo de repositório de log especificado pelo <paramref name="path" /> não é válido.  
  
 <paramref name="size" /> é menor que o tamanho de outras extensões no repositório.</exception>
        <exception cref="T:System.InvalidOperationException">Um tamanho deve ser especificado para a primeira extensão.  
  
- ou - 
Um nome de extensão duplicado não pode ser usado.</exception>
        <exception cref="T:System.IO.IOException">A solicitação não pôde ser executada devido a uma exceção de E/S inesperada.  
  
- ou - 
O arquivo especificado por <paramref name="path" /> não pode ser criado porque o arquivo ou diretório já existe.</exception>
        <exception cref="T:System.ObjectDisposedException">O método foi chamado depois que a sequência foi descartada.</exception>
        <exception cref="T:System.OutOfMemoryException">Não há memória suficiente para continuar a execução do programa.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">A sequência de registros está cheia.  
  
- ou - 
O disco ou mídia de armazenamento está cheio.</exception>
        <exception cref="T:System.UnauthorizedAccessException">O acesso ao repositório de log especificado é negado pelo sistema operacional.</exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogExtentCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.IO.Log.LogExtentCollection.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o número de extensões de log na coleção.</summary>
        <value>O número de extensões de log na coleção.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Este exemplo mostra como usar o <xref:System.IO.Log.LogExtent> e <xref:System.IO.Log.LogExtentCollection> classes para adicionar e emular extensões em uma sequência de log.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">O repositório de log foi descartado.</exception>
      </Docs>
    </Member>
    <Member MemberName="FreeCount">
      <MemberSignature Language="C#" Value="public int FreeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FreeCount" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogExtentCollection.FreeCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FreeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int FreeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.FreeCount : int" Usage="System.IO.Log.LogExtentCollection.FreeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o número de instâncias <see cref="T:System.IO.Log.LogExtent" /> livres na coleção, ou seja, o número de instâncias <see cref="T:System.IO.Log.LogExtent" /> que não contêm nenhum dado.</summary>
        <value>O número de livre <see cref="T:System.IO.Log.LogExtent" /> instâncias na coleção.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Este exemplo mostra como usar o <xref:System.IO.Log.LogExtent> e <xref:System.IO.Log.LogExtentCollection> classes para adicionar e emular extensões em uma sequência de log.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">O repositório de log foi descartado.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.IO.Log.LogExtent&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of LogExtent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;System::IO::Log::LogExtent ^&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt;" Usage="logExtentCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtém um enumerador para as instâncias <see cref="T:System.IO.Log.LogExtent" /> nesta coleção. Esse método não pode ser herdado.</summary>
        <returns>Um enumerador para as instâncias <see cref="T:System.IO.Log.LogExtent" /> nesta coleção.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.IOException">A solicitação não pôde ser executada devido a uma exceção de E/S inesperada.</exception>
        <exception cref="T:System.InvalidOperationException">A operação é inválida por um dos seguintes motivos: 
-   A enumeração terminou.  
  
-   A coleção foi modificada.  
  
-   A enumeração não foi iniciada. Uma chamada para <see cref="M:System.Collections.IEnumerator.MoveNext" /> deve ser feita.</exception>
        <exception cref="T:System.ObjectDisposedException">O método foi chamado depois que a sequência foi descartada.</exception>
        <exception cref="T:System.OutOfMemoryException">Não há memória suficiente para continuar a execução do programa.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">A sequência de registros está cheia.</exception>
        <exception cref="T:System.UnauthorizedAccessException">O acesso ao repositório de log especificado é negado pelo sistema operacional.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Remove uma instância <see cref="T:System.IO.Log.LogExtent" /> da coleção.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.IO.Log.LogExtent extent, bool force);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.IO.Log.LogExtent extent, bool force) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Remove(System.IO.Log.LogExtent,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (extent As LogExtent, force As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::IO::Log::LogExtent ^ extent, bool force);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.IO.Log.LogExtent * bool -&gt; unit" Usage="logExtentCollection.Remove (extent, force)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extent" Type="System.IO.Log.LogExtent" />
        <Parameter Name="force" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="extent">A instância <see cref="T:System.IO.Log.LogExtent" /> a ser removida.</param>
        <param name="force">
          <see langword="true" /> se a extensão precisar ser removida imediatamente; caso contrário, <see langword="false" />.</param>
        <summary>Remove a instância <see cref="T:System.IO.Log.LogExtent" /> especificada da coleção.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um <xref:System.IO.Log.LogExtent> instância pode ser removida da coleção somente se ele não é parte da região do Active Directory a <xref:System.IO.Log.LogStore>. Se o `force` parâmetro é `true` e a extensão não pode ser removida imediatamente, uma exceção será lançada. Se o `force` parâmetro é `false` e a extensão não pode ser removida imediatamente, a remoção é adiada até que ele não é parte da região ativa.  
  
 Não é possível remover a última extensão na <xref:System.IO.Log.LogExtentCollection>, o que significa que o <xref:System.IO.Log.LogExtentCollection.Count%2A> propriedade não pode ser zero após a adição de uma extensão.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="extent" /> ou <paramref name="force" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Não é possível encontrar <paramref name="extent" /> na coleção.</exception>
        <exception cref="T:System.InvalidOperationException">Não é possível remover <paramref name="extent" />. Ainda faz parte da região ativa ou o acesso foi negado.</exception>
        <exception cref="T:System.IO.IOException">A solicitação não pôde ser executada devido a uma exceção de E/S inesperada.  
  
- ou - 
 Não é possível excluir <paramref name="extent" />.</exception>
        <exception cref="T:System.ObjectDisposedException">O método foi chamado depois que a sequência foi descartada.</exception>
        <exception cref="T:System.OutOfMemoryException">Não há memória suficiente para continuar a execução do programa.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">A sequência de registros está cheia.</exception>
        <exception cref="T:System.UnauthorizedAccessException">O acesso ao repositório de log especificado é negado pelo sistema operacional.</exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string path, bool force);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string path, bool force) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Remove(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (path As String, force As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ path, bool force);" />
      <MemberSignature Language="F#" Value="member this.Remove : string * bool -&gt; unit" Usage="logExtentCollection.Remove (path, force)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="force" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">O caminho da instância <see cref="T:System.IO.Log.LogExtent" /> a ser removida.</param>
        <param name="force">
          <see langword="true" /> se a extensão precisar ser removida imediatamente; caso contrário, <see langword="false" />.</param>
        <summary>Remove a instância <see cref="T:System.IO.Log.LogExtent" /> com o caminho especificado da coleção.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um <xref:System.IO.Log.LogExtent> instância pode ser removida da coleção somente se ele não é parte da região do Active Directory a <xref:System.IO.Log.LogStore>. Se o `force` parâmetro é `true` e a extensão não pode ser removida imediatamente, uma exceção será lançada. Se o `force` parâmetro é `false` e a extensão não pode ser removida imediatamente, a remoção é adiada até que ele não é parte da região ativa.  
  
 Não é possível remover a última extensão na <xref:System.IO.Log.LogExtentCollection>, o que significa que o <xref:System.IO.Log.LogExtentCollection.Count%2A> propriedade não pode ser zero após a adição de uma extensão.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> ou <paramref name="force" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Não é possível localizar a extensão especificada pelo <paramref name="path" /> na coleção.</exception>
        <exception cref="T:System.InvalidOperationException">Não é possível remover a extensão especificada pelo <paramref name="path" />. Ainda faz parte da região ativa ou o acesso foi negado.</exception>
        <exception cref="T:System.IO.IOException">A solicitação não pôde ser executada devido a uma exceção de E/S inesperada.  
  
- ou - 
Não é possível excluir a extensão especificada pelo <paramref name="path" />.</exception>
        <exception cref="T:System.ObjectDisposedException">O método foi chamado depois que a sequência foi descartada.</exception>
        <exception cref="T:System.OutOfMemoryException">Não há memória suficiente para continuar a execução do programa.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">A sequência de registros está cheia.</exception>
        <exception cref="T:System.UnauthorizedAccessException">O acesso ao repositório de log especificado é negado pelo sistema operacional.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtém um enumerador para as instâncias <see cref="T:System.IO.Log.LogExtent" /> nesta coleção. Esse método não pode ser herdado.</summary>
        <returns>Um enumerador para as instâncias <see cref="T:System.IO.Log.LogExtent" /> nesta coleção.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>