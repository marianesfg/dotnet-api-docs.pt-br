<Type Name="TextFieldParser" FullName="Microsoft.VisualBasic.FileIO.TextFieldParser">
  <TypeSignature Language="C#" Value="public class TextFieldParser : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi TextFieldParser extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
  <TypeSignature Language="VB.NET" Value="Public Class TextFieldParser&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextFieldParser : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="b8914-101">Fornece métodos e propriedades para analisar arquivos de texto estruturado.</span><span class="sxs-lookup"><span data-stu-id="b8914-101">Provides methods and properties for parsing structured text files.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8914-102">O `TextFieldParser` objeto fornece métodos e propriedades para análise estruturada de arquivos de texto.</span><span class="sxs-lookup"><span data-stu-id="b8914-102">The `TextFieldParser` object provides methods and properties for parsing structured text files.</span></span> <span data-ttu-id="b8914-103">Analisar um arquivo de texto com o `TextFieldParser` é semelhante a iterar em um arquivo de texto, enquanto o `ReadFields` método para extrair campos de texto é semelhante ao dividir as cadeias de caracteres.</span><span class="sxs-lookup"><span data-stu-id="b8914-103">Parsing a text file with the `TextFieldParser` is similar to iterating over a text file, while the `ReadFields` method to extract fields of text is similar to splitting the strings.</span></span>  
  
 <span data-ttu-id="b8914-104">O `TextFieldParser` pode analisar os dois tipos de arquivos: delimitada ou largura fixa.</span><span class="sxs-lookup"><span data-stu-id="b8914-104">The `TextFieldParser` can parse two types of files: delimited or fixed-width.</span></span> <span data-ttu-id="b8914-105">Algumas propriedades, como `Delimiters` e `HasFieldsEnclosedInQuotes` são significativos apenas ao trabalhar com arquivos delimitados, enquanto o `FieldWidths` propriedade é significativa apenas ao trabalhar com arquivos de largura fixa.</span><span class="sxs-lookup"><span data-stu-id="b8914-105">Some properties, such as `Delimiters` and `HasFieldsEnclosedInQuotes` are meaningful only when working with delimited files, while the `FieldWidths` property is meaningful only when working with fixed-width files.</span></span>  
  
 <span data-ttu-id="b8914-106">A tabela a seguir lista exemplos de tarefas que envolvem o `Microsoft.VisualBasic.FileIO.TextFieldParser` objeto.</span><span class="sxs-lookup"><span data-stu-id="b8914-106">The following table lists examples of tasks involving the `Microsoft.VisualBasic.FileIO.TextFieldParser` object.</span></span>  
  
|<span data-ttu-id="b8914-107">Para</span><span class="sxs-lookup"><span data-stu-id="b8914-107">To</span></span>|<span data-ttu-id="b8914-108">Consulte</span><span class="sxs-lookup"><span data-stu-id="b8914-108">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="b8914-109">Ler um arquivo de texto delimitado</span><span class="sxs-lookup"><span data-stu-id="b8914-109">Read from a delimited text file</span></span>|[<span data-ttu-id="b8914-110">Como ler a partir de arquivos de texto separados por vírgulas</span><span class="sxs-lookup"><span data-stu-id="b8914-110">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="b8914-111">Ler um arquivo de texto de largura fixa</span><span class="sxs-lookup"><span data-stu-id="b8914-111">Read from a fixed-width text file</span></span>|[<span data-ttu-id="b8914-112">Como ler a partir de arquivos de texto de largura fixa</span><span class="sxs-lookup"><span data-stu-id="b8914-112">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|<span data-ttu-id="b8914-113">Ler um arquivo de texto com vários formatos</span><span class="sxs-lookup"><span data-stu-id="b8914-113">Read from a text file with multiple formats</span></span>|[<span data-ttu-id="b8914-114">Como ler a partir de arquivos de texto com vários formatos</span><span class="sxs-lookup"><span data-stu-id="b8914-114">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="b8914-115">Este exemplo analisa através de um arquivo de texto delimitado por tabulação, `Bigfile`.</span><span class="sxs-lookup"><span data-stu-id="b8914-115">This example parses through a tab-delimited text file, `Bigfile`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#17)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b8914-116">Inicializa uma nova instância da classe <see langword="TextFieldParser" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-116">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="b8914-117"><see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-117"><see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="b8914-118">O fluxo a ser analisado.</span><span class="sxs-lookup"><span data-stu-id="b8914-118">The stream to be parsed.</span></span></param>
        <summary><span data-ttu-id="b8914-119">Inicializa uma nova instância da classe <see langword="TextFieldParser" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-119">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8914-120">Cria um novo objeto `TextFieldParser` para analisar o arquivo ou stream que é representado pelo parâmetro `stream`.</span><span class="sxs-lookup"><span data-stu-id="b8914-120">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b8914-121"><paramref name="stream" /> é <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-121"><paramref name="stream" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b8914-122"><paramref name="stream" /> não pode ser lido.</span><span class="sxs-lookup"><span data-stu-id="b8914-122"><paramref name="stream" /> cannot be read from.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::TextReader ^ reader);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="b8914-123"><see cref="T:System.IO.TextReader" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-123"><see cref="T:System.IO.TextReader" />.</span></span> <span data-ttu-id="b8914-124">O fluxo <see cref="T:System.IO.TextReader" /> a ser analisado.</span><span class="sxs-lookup"><span data-stu-id="b8914-124">The <see cref="T:System.IO.TextReader" /> stream to be parsed.</span></span></param>
        <summary><span data-ttu-id="b8914-125">Inicializa uma nova instância da classe <see langword="TextFieldParser" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-125">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8914-126">Cria um novo objeto `TextFieldParser` para analisar o arquivo ou stream que é representado pelo parâmetro `reader`.</span><span class="sxs-lookup"><span data-stu-id="b8914-126">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `reader` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b8914-127"><paramref name="reader" /> é <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-127"><paramref name="reader" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="b8914-128"><see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-128"><see langword="String" />.</span></span> <span data-ttu-id="b8914-129">O caminho completo do arquivo a ser analisado.</span><span class="sxs-lookup"><span data-stu-id="b8914-129">The complete path of the file to be parsed.</span></span></param>
        <summary><span data-ttu-id="b8914-130">Inicializa uma nova instância da classe <see langword="TextFieldParser" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-130">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8914-131">Cria um novo `TextFieldParser` objeto ao analisar o arquivo especificado pelo `path` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="b8914-131">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b8914-132"><paramref name="path" /> é uma cadeia de caracteres vazia.</span><span class="sxs-lookup"><span data-stu-id="b8914-132"><paramref name="path" /> is an empty string.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="b8914-133"><see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-133"><see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="b8914-134">O fluxo a ser analisado.</span><span class="sxs-lookup"><span data-stu-id="b8914-134">The stream to be parsed.</span></span></param>
        <param name="defaultEncoding">
          <span data-ttu-id="b8914-135"><see cref="T:System.Text.Encoding" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-135"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="b8914-136">A codificação de caractere a ser usada caso a codificação não seja determinada pelo arquivo.</span><span class="sxs-lookup"><span data-stu-id="b8914-136">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="b8914-137">O padrão é <see cref="P:System.Text.Encoding.UTF8" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-137">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <summary><span data-ttu-id="b8914-138">Inicializa uma nova instância da classe <see langword="TextFieldParser" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-138">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8914-139">Cria um novo objeto `TextFieldParser` para analisar o arquivo ou stream que é representado pelo parâmetro `stream`.</span><span class="sxs-lookup"><span data-stu-id="b8914-139">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="b8914-140">Quando você compila um conjunto de caracteres com uma configuração cultural específica e recupera os mesmos caracteres com uma configuração cultural diferente, os caracteres talvez não sejam interpretáveis e poderiam causar uma exceção a ser lançada.</span><span class="sxs-lookup"><span data-stu-id="b8914-140">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b8914-141"><paramref name="stream" /> ou <paramref name="defaultEncoding" /> é <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-141"><paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b8914-142"><paramref name="stream" /> não pode ser lido.</span><span class="sxs-lookup"><span data-stu-id="b8914-142"><paramref name="stream" /> cannot be read from.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="b8914-143"><see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-143"><see langword="String" />.</span></span> <span data-ttu-id="b8914-144">O caminho completo do arquivo a ser analisado.</span><span class="sxs-lookup"><span data-stu-id="b8914-144">The complete path of the file to be parsed.</span></span></param>
        <param name="defaultEncoding">
          <span data-ttu-id="b8914-145"><see cref="T:System.Text.Encoding" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-145"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="b8914-146">A codificação de caractere a ser usada caso a codificação não seja determinada pelo arquivo.</span><span class="sxs-lookup"><span data-stu-id="b8914-146">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="b8914-147">O padrão é <see cref="P:System.Text.Encoding.UTF8" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-147">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <summary><span data-ttu-id="b8914-148">Inicializa uma nova instância da classe <see langword="TextFieldParser" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-148">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8914-149">Cria um novo `TextFieldParser` objeto ao analisar o arquivo especificado pelo `path` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="b8914-149">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="b8914-150">Quando você compila um conjunto de caracteres com uma configuração cultural específica e recupera os mesmos caracteres com uma configuração cultural diferente, os caracteres talvez não sejam interpretáveis e poderiam causar uma exceção a ser lançada.</span><span class="sxs-lookup"><span data-stu-id="b8914-150">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b8914-151"><paramref name="path" /> é uma cadeia de caracteres vazia ou <paramref name="defaultEncoding" /> é <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-151"><paramref name="path" /> is an empty string or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="b8914-152"><see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-152"><see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="b8914-153">O fluxo a ser analisado.</span><span class="sxs-lookup"><span data-stu-id="b8914-153">The stream to be parsed.</span></span></param>
        <param name="defaultEncoding">
          <span data-ttu-id="b8914-154"><see cref="T:System.Text.Encoding" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-154"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="b8914-155">A codificação de caractere a ser usada caso a codificação não seja determinada pelo arquivo.</span><span class="sxs-lookup"><span data-stu-id="b8914-155">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="b8914-156">O padrão é <see cref="P:System.Text.Encoding.UTF8" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-156">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <param name="detectEncoding">
          <span data-ttu-id="b8914-157"><see langword="Boolean" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-157"><see langword="Boolean" />.</span></span> <span data-ttu-id="b8914-158">Indica se é necessário procurar marcas de ordem de byte no início do arquivo.</span><span class="sxs-lookup"><span data-stu-id="b8914-158">Indicates whether to look for byte order marks at the beginning of the file.</span></span> <span data-ttu-id="b8914-159">O padrão é <see langword="True" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-159">Default is <see langword="True" />.</span></span></param>
        <summary><span data-ttu-id="b8914-160">Inicializa uma nova instância da classe <see langword="TextFieldParser" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-160">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8914-161">Cria um novo objeto `TextFieldParser` para analisar o arquivo ou stream que é representado pelo parâmetro `stream`.</span><span class="sxs-lookup"><span data-stu-id="b8914-161">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 <span data-ttu-id="b8914-162">Se o `detectEncoding` parâmetro é `True`, este construtor tenta detectar a codificação, observando os três primeiros bytes do arquivo ou fluxo.</span><span class="sxs-lookup"><span data-stu-id="b8914-162">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="b8914-163">Ele reconhece automaticamente Unicode UTF-8, little endian e texto Unicode big-endian se o arquivo começa com as marcas de ordem de byte apropriado.</span><span class="sxs-lookup"><span data-stu-id="b8914-163">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="b8914-164">Caso contrário, a codificação especificada por `defaultEncoding` é usado.</span><span class="sxs-lookup"><span data-stu-id="b8914-164">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="b8914-165">Quando você compila um conjunto de caracteres com uma configuração cultural específica e recupera os mesmos caracteres com uma configuração cultural diferente, os caracteres talvez não sejam interpretáveis e poderiam causar uma exceção a ser lançada.</span><span class="sxs-lookup"><span data-stu-id="b8914-165">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b8914-166"><paramref name="stream" /> ou <paramref name="defaultEncoding" /> é <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-166"><paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b8914-167"><paramref name="stream" /> não pode ser lido.</span><span class="sxs-lookup"><span data-stu-id="b8914-167"><paramref name="stream" /> cannot be read from.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding, detectEncoding As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="b8914-168"><see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-168"><see langword="String" />.</span></span> <span data-ttu-id="b8914-169">O caminho completo do arquivo a ser analisado.</span><span class="sxs-lookup"><span data-stu-id="b8914-169">The complete path of the file to be parsed.</span></span></param>
        <param name="defaultEncoding">
          <span data-ttu-id="b8914-170"><see cref="T:System.Text.Encoding" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-170"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="b8914-171">A codificação de caractere a ser usada caso a codificação não seja determinada pelo arquivo.</span><span class="sxs-lookup"><span data-stu-id="b8914-171">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="b8914-172">O padrão é <see cref="P:System.Text.Encoding.UTF8" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-172">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <param name="detectEncoding">
          <span data-ttu-id="b8914-173"><see langword="Boolean" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-173"><see langword="Boolean" />.</span></span> <span data-ttu-id="b8914-174">Indica se é necessário procurar marcas de ordem de byte no início do arquivo.</span><span class="sxs-lookup"><span data-stu-id="b8914-174">Indicates whether to look for byte order marks at the beginning of the file.</span></span> <span data-ttu-id="b8914-175">O padrão é <see langword="True" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-175">Default is <see langword="True" />.</span></span></param>
        <summary><span data-ttu-id="b8914-176">Inicializa uma nova instância da classe <see langword="TextFieldParser" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-176">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8914-177">Cria um novo `TextFieldParser` objeto ao analisar o arquivo especificado pelo `path` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="b8914-177">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
 <span data-ttu-id="b8914-178">Se o `detectEncoding` parâmetro é `True`, este construtor tenta detectar a codificação, observando os três primeiros bytes do arquivo ou fluxo.</span><span class="sxs-lookup"><span data-stu-id="b8914-178">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="b8914-179">Ele reconhece automaticamente Unicode UTF-8, little endian e texto Unicode big-endian se o arquivo começa com as marcas de ordem de byte apropriado.</span><span class="sxs-lookup"><span data-stu-id="b8914-179">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="b8914-180">Caso contrário, a codificação especificada por `defaultEncoding` é usado.</span><span class="sxs-lookup"><span data-stu-id="b8914-180">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="b8914-181">Quando você compila um conjunto de caracteres com uma configuração cultural específica e recupera os mesmos caracteres com uma configuração cultural diferente, os caracteres talvez não sejam interpretáveis e poderiam causar uma exceção a ser lançada.</span><span class="sxs-lookup"><span data-stu-id="b8914-181">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b8914-182"><paramref name="path" /> é uma cadeia de caracteres vazia ou <paramref name="defaultEncoding" /> é <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-182"><paramref name="path" /> is an empty string or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="b8914-183"><see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-183"><see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="b8914-184">O fluxo a ser analisado.</span><span class="sxs-lookup"><span data-stu-id="b8914-184">The stream to be parsed.</span></span></param>
        <param name="defaultEncoding">
          <span data-ttu-id="b8914-185"><see cref="T:System.Text.Encoding" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-185"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="b8914-186">A codificação de caractere a ser usada caso a codificação não seja determinada pelo arquivo.</span><span class="sxs-lookup"><span data-stu-id="b8914-186">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="b8914-187">O padrão é <see cref="P:System.Text.Encoding.UTF8" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-187">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <param name="detectEncoding">
          <span data-ttu-id="b8914-188"><see langword="Boolean" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-188"><see langword="Boolean" />.</span></span> <span data-ttu-id="b8914-189">Indica se é necessário procurar marcas de ordem de byte no início do arquivo.</span><span class="sxs-lookup"><span data-stu-id="b8914-189">Indicates whether to look for byte order marks at the beginning of the file.</span></span> <span data-ttu-id="b8914-190">O padrão é <see langword="True" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-190">Default is <see langword="True" />.</span></span></param>
        <param name="leaveOpen">
          <span data-ttu-id="b8914-191"><see langword="Boolean" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-191"><see langword="Boolean" />.</span></span> <span data-ttu-id="b8914-192">Indica se deve deixar <c>fluxo</c> aberto quando o objeto <see langword="TextFieldParser" /> está fechado.</span><span class="sxs-lookup"><span data-stu-id="b8914-192">Indicates whether to leave <c>stream</c> open when the <see langword="TextFieldParser" /> object is closed.</span></span> <span data-ttu-id="b8914-193">O padrão é <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-193">Default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="b8914-194">Inicializa uma nova instância da classe <see langword="TextFieldParser" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-194">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8914-195">Cria um novo objeto `TextFieldParser` para analisar o arquivo ou stream que é representado pelo parâmetro `stream`.</span><span class="sxs-lookup"><span data-stu-id="b8914-195">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 <span data-ttu-id="b8914-196">Se o `detectEncoding` parâmetro é `True`, este construtor tenta detectar a codificação, observando os três primeiros bytes do arquivo ou fluxo.</span><span class="sxs-lookup"><span data-stu-id="b8914-196">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="b8914-197">Ele reconhece automaticamente Unicode UTF-8, little endian e texto Unicode big-endian se o arquivo começa com as marcas de ordem de byte apropriado.</span><span class="sxs-lookup"><span data-stu-id="b8914-197">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="b8914-198">Caso contrário, a codificação especificada por `defaultEncoding` é usado.</span><span class="sxs-lookup"><span data-stu-id="b8914-198">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="b8914-199">Quando você compila um conjunto de caracteres com uma configuração cultural específica e recupera os mesmos caracteres com uma configuração cultural diferente, os caracteres talvez não sejam interpretáveis e poderiam causar uma exceção a ser lançada.</span><span class="sxs-lookup"><span data-stu-id="b8914-199">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b8914-200"><paramref name="stream" /> ou <paramref name="defaultEncoding" /> é <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-200"><paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b8914-201"><paramref name="stream" /> não pode ser lido.</span><span class="sxs-lookup"><span data-stu-id="b8914-201"><paramref name="stream" /> cannot be read from.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b8914-202">Fecha o objeto <see langword="TextFieldParser" /> atual.</span><span class="sxs-lookup"><span data-stu-id="b8914-202">Closes the current <see langword="TextFieldParser" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b8914-203">Este exemplo fecha o `TextFieldParser.FileReader`.</span><span class="sxs-lookup"><span data-stu-id="b8914-203">This example closes the `TextFieldParser.FileReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CommentTokens">
      <MemberSignature Language="C#" Value="public string[] CommentTokens { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] CommentTokens" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens" />
      <MemberSignature Language="VB.NET" Value="Public Property CommentTokens As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ CommentTokens { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b8914-204">Define tokens de comentário.</span><span class="sxs-lookup"><span data-stu-id="b8914-204">Defines comment tokens.</span></span> <span data-ttu-id="b8914-205">Um token de comentário é uma cadeia de caracteres que, quando colocada no início de uma linha, indica que a linha é um comentário e deve ser ignorada pelo analisador.</span><span class="sxs-lookup"><span data-stu-id="b8914-205">A comment token is a string that, when placed at the beginning of a line, indicates that the line is a comment and should be ignored by the parser.</span></span></summary>
        <value><span data-ttu-id="b8914-206">Uma matriz de cadeia de caracteres que contém todos os tokens de comentário para o objeto <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-206">A string array that contains all of the comment tokens for the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8914-207">Este é um membro avançado; ele não aparece no IntelliSense, a menos que você clique no **todas as** guia.</span><span class="sxs-lookup"><span data-stu-id="b8914-207">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="b8914-208">Tokens de comentário de comprimento zero são ignorados.</span><span class="sxs-lookup"><span data-stu-id="b8914-208">Zero-length comment tokens are ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8914-209">Este exemplo especifica que para o `TextFieldParser`, `FileReader` linhas que começam com uma aspa simples (') devem ser ignoradas.</span><span class="sxs-lookup"><span data-stu-id="b8914-209">This example specifies that for the `TextFieldParser`, `FileReader` lines beginning with a single quotation mark (') should be ignored.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b8914-210">Um token de comentário inclui espaço em branco.</span><span class="sxs-lookup"><span data-stu-id="b8914-210">A comment token includes white space.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Delimiters">
      <MemberSignature Language="C#" Value="public string[] Delimiters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Delimiters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiters As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ Delimiters { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b8914-211">Define os delimitadores para um arquivo de texto.</span><span class="sxs-lookup"><span data-stu-id="b8914-211">Defines the delimiters for a text file.</span></span></summary>
        <value><span data-ttu-id="b8914-212">Uma matriz de cadeia de caracteres que contém todos os delimitadores de campo para o objeto <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-212">A string array that contains all of the field delimiters for the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8914-213">Esta propriedade é significativa somente se o <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> está definida como `FieldType.Delimited`.</span><span class="sxs-lookup"><span data-stu-id="b8914-213">This property is meaningful only if the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> property is set to `FieldType.Delimited`.</span></span>  
  
 <span data-ttu-id="b8914-214">Definir os delimitadores para um arquivo de texto também pode ser realizado com o <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A> método.</span><span class="sxs-lookup"><span data-stu-id="b8914-214">Defining the delimiters for a text file can also be accomplished with the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A> method.</span></span>  
  
 <span data-ttu-id="b8914-215">A tabela a seguir lista um exemplo de tarefa envolvendo o `Delimiters` propriedade.</span><span class="sxs-lookup"><span data-stu-id="b8914-215">The following table lists an example of a task involving the `Delimiters` property.</span></span>  
  
|<span data-ttu-id="b8914-216">Para</span><span class="sxs-lookup"><span data-stu-id="b8914-216">To</span></span>|<span data-ttu-id="b8914-217">Consulte</span><span class="sxs-lookup"><span data-stu-id="b8914-217">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="b8914-218">Ler um arquivo de texto delimitado</span><span class="sxs-lookup"><span data-stu-id="b8914-218">Read from a delimited text file</span></span>|[<span data-ttu-id="b8914-219">Como ler a partir de arquivos de texto separados por vírgulas</span><span class="sxs-lookup"><span data-stu-id="b8914-219">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="b8914-220">Este exemplo especifica que o delimitador para a `TextFieldParser` objeto, `FileReader`, é uma vírgula (,).</span><span class="sxs-lookup"><span data-stu-id="b8914-220">This example specifies that the delimiter for the `TextFieldParser` object, `FileReader`, is a comma (,).</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b8914-221">Um valor de delimitador é definido como um caractere de newline, uma cadeia de caracteres vazia ou <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-221">A delimiter value is set to a newline character, an empty string, or <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b8914-222">Libera recursos usados pelo objeto <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-222">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b8914-223">Libera recursos usados pelo objeto <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-223">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="b8914-224">Booliano.</span><span class="sxs-lookup"><span data-stu-id="b8914-224">Boolean.</span></span> <span data-ttu-id="b8914-225"><see langword="True" /> libera os recursos gerenciados e não gerenciados; <see langword="False" /> libera apenas os recursos não gerenciados.</span><span class="sxs-lookup"><span data-stu-id="b8914-225"><see langword="True" /> releases both managed and unmanaged resources; <see langword="False" /> releases only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="b8914-226">Libera recursos usados pelo objeto <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-226">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="EndOfData">
      <MemberSignature Language="C#" Value="public bool EndOfData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EndOfData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndOfData As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EndOfData { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b8914-227">Retorna <see langword="True" /> se não houver linha que não está em branco ou linha não comentada entre a posição atual do cursor e o fim do arquivo.</span><span class="sxs-lookup"><span data-stu-id="b8914-227">Returns <see langword="True" /> if there are no non-blank, non-comment lines between the current cursor position and the end of the file.</span></span></summary>
        <value>
          <span data-ttu-id="b8914-228"><see langword="True" /> se não houver mais dados para ler; caso contrário, <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-228"><see langword="True" /> if there is no more data to read; otherwise, <see langword="False" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8914-229">Essa propriedade pode ser usada durante a leitura de arquivos para determinar o final dos dados que está sendo lidos.</span><span class="sxs-lookup"><span data-stu-id="b8914-229">This property can be used when reading from files to determine the end of the data being read.</span></span>  
  
 <span data-ttu-id="b8914-230">A tabela a seguir lista exemplos de tarefas que envolvem o `EndOfData` propriedade.</span><span class="sxs-lookup"><span data-stu-id="b8914-230">The following table lists examples of tasks involving the `EndOfData` property.</span></span>  
  
|<span data-ttu-id="b8914-231">Para</span><span class="sxs-lookup"><span data-stu-id="b8914-231">To</span></span>|<span data-ttu-id="b8914-232">Consulte</span><span class="sxs-lookup"><span data-stu-id="b8914-232">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="b8914-233">Ler um arquivo delimitado</span><span class="sxs-lookup"><span data-stu-id="b8914-233">Read from a delimited file</span></span>|[<span data-ttu-id="b8914-234">Como ler a partir de arquivos de texto separados por vírgulas</span><span class="sxs-lookup"><span data-stu-id="b8914-234">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="b8914-235">Ler um arquivo de largura fixa</span><span class="sxs-lookup"><span data-stu-id="b8914-235">Read from a fixed-width file</span></span>|[<span data-ttu-id="b8914-236">Como ler a partir de arquivos de texto de largura fixa</span><span class="sxs-lookup"><span data-stu-id="b8914-236">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="b8914-237">Este exemplo usa o `EndofData` propriedade para executar um loop através de todos os campos no arquivo com o `TextFieldReader`, `FileReader`.</span><span class="sxs-lookup"><span data-stu-id="b8914-237">This example uses the `EndofData` property to loop through all the fields in the file with the `TextFieldReader`, `FileReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ErrorLine">
      <MemberSignature Language="C#" Value="public string ErrorLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorLine" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ErrorLine { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b8914-238">Retorna a linha que causou a mais recente exceção <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-238">Returns the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span></span></summary>
        <value><span data-ttu-id="b8914-239">A linha que causou o mais recente <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exceção.</span><span class="sxs-lookup"><span data-stu-id="b8914-239">The line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8914-240">Se nenhum <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceções tem sido lançadas, uma cadeia de caracteres vazia é retornada.</span><span class="sxs-lookup"><span data-stu-id="b8914-240">If no <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceptions have been thrown, an empty string is returned.</span></span>  
  
 <span data-ttu-id="b8914-241">O <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A> propriedade pode ser usada para exibir o número da linha que causou a exceção.</span><span class="sxs-lookup"><span data-stu-id="b8914-241">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A> property can be used to display the number of the line that caused the exception.</span></span>  
  
 <span data-ttu-id="b8914-242">A tabela a seguir lista exemplos de tarefas que envolvem o `ErrorLine` propriedade.</span><span class="sxs-lookup"><span data-stu-id="b8914-242">The following table lists examples of tasks involving the `ErrorLine` property.</span></span>  
  
|<span data-ttu-id="b8914-243">Para</span><span class="sxs-lookup"><span data-stu-id="b8914-243">To</span></span>|<span data-ttu-id="b8914-244">Consulte</span><span class="sxs-lookup"><span data-stu-id="b8914-244">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="b8914-245">Ler um arquivo delimitado</span><span class="sxs-lookup"><span data-stu-id="b8914-245">Read from a delimited file</span></span>|[<span data-ttu-id="b8914-246">Como ler a partir de arquivos de texto separados por vírgulas</span><span class="sxs-lookup"><span data-stu-id="b8914-246">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="b8914-247">Ler um arquivo de largura fixa</span><span class="sxs-lookup"><span data-stu-id="b8914-247">Read from a fixed-width file</span></span>|[<span data-ttu-id="b8914-248">Como ler a partir de arquivos de texto de largura fixa</span><span class="sxs-lookup"><span data-stu-id="b8914-248">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="b8914-249">Este exemplo usa o `ErrorLine` propriedade para exibir a linha que causou a atual <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceção.</span><span class="sxs-lookup"><span data-stu-id="b8914-249">This example uses the `ErrorLine` property to display the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ErrorLineNumber">
      <MemberSignature Language="C#" Value="public long ErrorLineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ErrorLineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ErrorLineNumber { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b8914-250">Retorna o número da linha que causou a mais recente exceção <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-250">Returns the number of the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span></span></summary>
        <value><span data-ttu-id="b8914-251">O número da linha que causou o mais recente <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exceção.</span><span class="sxs-lookup"><span data-stu-id="b8914-251">The number of the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8914-252">Se nenhum <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceções foi lançadas, -1 será retornado.</span><span class="sxs-lookup"><span data-stu-id="b8914-252">If no <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceptions have been thrown, -1 is returned.</span></span>  
  
 <span data-ttu-id="b8914-253">O <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> propriedade pode ser usada para exibir o número da linha que causou a exceção.</span><span class="sxs-lookup"><span data-stu-id="b8914-253">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> property can be used to display the number of the line that caused the exception.</span></span> <span data-ttu-id="b8914-254">Linhas em branco e comentários não são ignorados ao determinar o número da linha.</span><span class="sxs-lookup"><span data-stu-id="b8914-254">Blank lines and comments are not ignored when determining the line number.</span></span>  
  
 <span data-ttu-id="b8914-255">A tabela a seguir lista exemplos de tarefas que envolvem o `ErrorLineNumber` propriedade.</span><span class="sxs-lookup"><span data-stu-id="b8914-255">The following table lists examples of tasks involving the `ErrorLineNumber` property.</span></span>  
  
|<span data-ttu-id="b8914-256">Para</span><span class="sxs-lookup"><span data-stu-id="b8914-256">To</span></span>|<span data-ttu-id="b8914-257">Consulte</span><span class="sxs-lookup"><span data-stu-id="b8914-257">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="b8914-258">Ler um arquivo delimitado</span><span class="sxs-lookup"><span data-stu-id="b8914-258">Read from a delimited file</span></span>|[<span data-ttu-id="b8914-259">Como ler a partir de arquivos de texto separados por vírgulas</span><span class="sxs-lookup"><span data-stu-id="b8914-259">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="b8914-260">Ler um arquivo de largura fixa</span><span class="sxs-lookup"><span data-stu-id="b8914-260">Read from a fixed-width file</span></span>|[<span data-ttu-id="b8914-261">Como ler a partir de arquivos de texto de largura fixa</span><span class="sxs-lookup"><span data-stu-id="b8914-261">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="b8914-262">Este exemplo usa o `ErrorLineNumber` propriedade para exibir o local da linha que causou a atual <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceção.</span><span class="sxs-lookup"><span data-stu-id="b8914-262">This example uses the `ErrorLineNumber` property to display the location of the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="FieldWidths">
      <MemberSignature Language="C#" Value="public int[] FieldWidths { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] FieldWidths" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
      <MemberSignature Language="VB.NET" Value="Public Property FieldWidths As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ FieldWidths { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b8914-263">Indica a largura de cada coluna no arquivo de texto que está sendo analisado.</span><span class="sxs-lookup"><span data-stu-id="b8914-263">Denotes the width of each column in the text file being parsed.</span></span></summary>
        <value><span data-ttu-id="b8914-264">Uma matriz de inteiros que contém a largura de cada coluna no arquivo de texto que está sendo analisado.</span><span class="sxs-lookup"><span data-stu-id="b8914-264">An integer array that contains the width of each column in the text file that is being parsed.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8914-265">Esta propriedade é significativa somente se o <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> está definida como `FieldType.FixedWidth`.</span><span class="sxs-lookup"><span data-stu-id="b8914-265">This property is meaningful only if the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> property is set to `FieldType.FixedWidth`.</span></span> <span data-ttu-id="b8914-266">Se a última entrada na matriz é menor que ou igual a zero, o campo deve para ser de largura variável.</span><span class="sxs-lookup"><span data-stu-id="b8914-266">If the last entry in the array is less than or equal to zero, the field is assumed to be of variable width.</span></span>  
  
 <span data-ttu-id="b8914-267">O <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A> método também pode ser usado para definir as larguras de campo.</span><span class="sxs-lookup"><span data-stu-id="b8914-267">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A> method can also be used to set field widths.</span></span>  
  
 <span data-ttu-id="b8914-268">A tabela a seguir lista exemplos de tarefas que envolvem o `FieldWidths` propriedade.</span><span class="sxs-lookup"><span data-stu-id="b8914-268">The following table lists examples of tasks involving the `FieldWidths` property.</span></span>  
  
|<span data-ttu-id="b8914-269">Para</span><span class="sxs-lookup"><span data-stu-id="b8914-269">To</span></span>|<span data-ttu-id="b8914-270">Consulte</span><span class="sxs-lookup"><span data-stu-id="b8914-270">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="b8914-271">Ler um arquivo de texto de largura fixa</span><span class="sxs-lookup"><span data-stu-id="b8914-271">Read from a fixed-width text file</span></span>|[<span data-ttu-id="b8914-272">Como ler a partir de arquivos de texto de largura fixa</span><span class="sxs-lookup"><span data-stu-id="b8914-272">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="b8914-273">Este exemplo lê o arquivo `ParserText.txt`, especificando as larguras; a primeira coluna é de 5 caracteres de largura, a segunda tem 10, a terceira é 11 e a quarta é de largura variável</span><span class="sxs-lookup"><span data-stu-id="b8914-273">This example reads the file `ParserText.txt`, specifying the widths; the first column is 5 characters wide, the second is 10, the third is 11, and the fourth is of variable width</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b8914-274">Um valor de largura em qualquer local que não seja a última entrada da matriz é menor que ou igual a zero.</span><span class="sxs-lookup"><span data-stu-id="b8914-274">A width value in any location other than the last entry of the array is less than or equal to zero.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TextFieldParser ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TextFieldParser ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b8914-275">Permite que o objeto <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> tente liberar recursos e realizar outras operações de limpeza antes que ela é recuperada pela coleta de lixo.</span><span class="sxs-lookup"><span data-stu-id="b8914-275">Allows the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object to attempt to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasFieldsEnclosedInQuotes">
      <MemberSignature Language="C#" Value="public bool HasFieldsEnclosedInQuotes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="VB.NET" Value="Public Property HasFieldsEnclosedInQuotes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFieldsEnclosedInQuotes { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b8914-276">Indica se os campos serão colocados entre aspas quando um arquivo delimitado está sendo analisado.</span><span class="sxs-lookup"><span data-stu-id="b8914-276">Denotes whether fields are enclosed in quotation marks when a delimited file is being parsed.</span></span></summary>
        <value>
          <span data-ttu-id="b8914-277"><see langword="True" /> se os campos forem incluídos entre aspas; caso contrário, <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-277"><see langword="True" /> if fields are enclosed in quotation marks; otherwise, <see langword="False" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8914-278">Este é um membro avançado; ele não aparece no IntelliSense, a menos que você clique no **todas as** guia.</span><span class="sxs-lookup"><span data-stu-id="b8914-278">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="b8914-279">Se a propriedade for `True`, o analisador pressupõe que os campos são colocados entre aspas ("") e pode conter terminações de linha.</span><span class="sxs-lookup"><span data-stu-id="b8914-279">If the property is `True`, the parser assumes that fields are enclosed in quotation marks (" ") and may contain line endings.</span></span>  
  
 <span data-ttu-id="b8914-280">Se um campo é colocado entre aspas, por exemplo, `abc, "field2a,field2b", field3` e essa propriedade é `True`, em seguida, todo o texto entre aspas será retornado como é; este exemplo retornaria `abc|field2a,field2b|field3`.</span><span class="sxs-lookup"><span data-stu-id="b8914-280">If a field is enclosed in quotation marks, for example, `abc, "field2a,field2b", field3` and this property is `True`, then all text enclosed in quotation marks will be returned as is; this example would return `abc|field2a,field2b|field3`.</span></span> <span data-ttu-id="b8914-281">Definir essa propriedade como `False` tornaria neste exemplo retorno `abc|"field2a|field2b"|field3`.</span><span class="sxs-lookup"><span data-stu-id="b8914-281">Setting this property to `False` would make this example return `abc|"field2a|field2b"|field3`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8914-282">Este exemplo define o `HasFieldsEnclosedInQuotes` propriedade `True` para `myReader`.</span><span class="sxs-lookup"><span data-stu-id="b8914-282">This example sets the `HasFieldsEnclosedInQuotes` property to `True` for `myReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public long LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 LineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long LineNumber { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b8914-283">Retorna o número de linha atual ou -1 se não houver mais nenhum caractere disponível no fluxo.</span><span class="sxs-lookup"><span data-stu-id="b8914-283">Returns the current line number, or returns -1 if no more characters are available in the stream.</span></span></summary>
        <value><span data-ttu-id="b8914-284">O número de linha atual.</span><span class="sxs-lookup"><span data-stu-id="b8914-284">The current line number.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8914-285">Este é um membro avançado; ele não aparece no IntelliSense, a menos que você clique no **todas as** guia.</span><span class="sxs-lookup"><span data-stu-id="b8914-285">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="b8914-286">Linhas em branco e comentários não são ignorados ao determinar o número da linha.</span><span class="sxs-lookup"><span data-stu-id="b8914-286">Blank lines and comments are not ignored when determining the line number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8914-287">Este exemplo procura o nome "Jones" no arquivo de texto e relatórios que linha ele ocorre.</span><span class="sxs-lookup"><span data-stu-id="b8914-287">This example searches for the name "Jones" in the text file and reports what line(s) it occurs on.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PeekChars">
      <MemberSignature Language="C#" Value="public string PeekChars (int numberOfChars);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string PeekChars(int32 numberOfChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekChars (numberOfChars As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PeekChars(int numberOfChars);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="numberOfChars" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="numberOfChars">
          <span data-ttu-id="b8914-288"><see langword="Int32" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-288"><see langword="Int32" />.</span></span> <span data-ttu-id="b8914-289">O número de caracteres a serem lidos.</span><span class="sxs-lookup"><span data-stu-id="b8914-289">Number of characters to read.</span></span> <span data-ttu-id="b8914-290">Necessário.</span><span class="sxs-lookup"><span data-stu-id="b8914-290">Required.</span></span></param>
        <summary><span data-ttu-id="b8914-291">Lê o número especificado de caracteres sem avançar o cursor.</span><span class="sxs-lookup"><span data-stu-id="b8914-291">Reads the specified number of characters without advancing the cursor.</span></span></summary>
        <returns><span data-ttu-id="b8914-292">Uma cadeia de caracteres que contém o número especificado de caracteres lidos.</span><span class="sxs-lookup"><span data-stu-id="b8914-292">A string that contains the specified number of characters read.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8914-293">O `numberOfChars` valor deve ser menor que o número total de caracteres na linha.</span><span class="sxs-lookup"><span data-stu-id="b8914-293">The `numberOfChars` value must be less than the total number of characters in the line.</span></span> <span data-ttu-id="b8914-294">Se não estiver, a cadeia de caracteres retornada por `PeekChars` será truncado para o comprimento da linha.</span><span class="sxs-lookup"><span data-stu-id="b8914-294">If it is not, the string returned by `PeekChars` will be truncated to the length of the line.</span></span>  
  
 <span data-ttu-id="b8914-295">Linhas em branco são ignoradas.</span><span class="sxs-lookup"><span data-stu-id="b8914-295">Blank lines are ignored.</span></span>  
  
 <span data-ttu-id="b8914-296">Caracteres de final de linha não são retornados.</span><span class="sxs-lookup"><span data-stu-id="b8914-296">End-of-line characters are not returned.</span></span>  
  
 <span data-ttu-id="b8914-297">O `PeekChars` método não realiza nenhuma análise; um caractere de final de linha dentro de um campo delimitado é interpretado como o próprio fim da linha.</span><span class="sxs-lookup"><span data-stu-id="b8914-297">The `PeekChars` method performs no parsing; an end-of- line character within a delimited field is interpreted as the actual end of the line.</span></span>  
  
 <span data-ttu-id="b8914-298">A tabela a seguir lista exemplos de tarefas que envolvem o `PeekChars` método.</span><span class="sxs-lookup"><span data-stu-id="b8914-298">The following table lists examples of tasks involving the `PeekChars` method.</span></span>  
  
|<span data-ttu-id="b8914-299">Para</span><span class="sxs-lookup"><span data-stu-id="b8914-299">To</span></span>|<span data-ttu-id="b8914-300">Consulte</span><span class="sxs-lookup"><span data-stu-id="b8914-300">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="b8914-301">Determinar o formato de um campo antes de analisá-lo</span><span class="sxs-lookup"><span data-stu-id="b8914-301">Determine the format of a field before parsing it</span></span>|[<span data-ttu-id="b8914-302">Como ler a partir de arquivos de texto com vários formatos</span><span class="sxs-lookup"><span data-stu-id="b8914-302">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="b8914-303">Este exemplo usa `PeekChars` para achar o fim dos dados e parar de analisar o arquivo nesse momento.</span><span class="sxs-lookup"><span data-stu-id="b8914-303">This example uses `PeekChars` to find the end of the data and stop parsing the file at that point.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b8914-304"><paramref name="numberOfChars" /> é menor que 0.</span><span class="sxs-lookup"><span data-stu-id="b8914-304"><paramref name="numberOfChars" /> is less than 0.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ReadFields">
      <MemberSignature Language="C#" Value="public string[] ReadFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string[] ReadFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadFields () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ ReadFields();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b8914-305">Lê todos os campos na linha atual, retorna-os como uma matriz de cadeias de caracteres e avança o cursor para a próxima linha contendo dados.</span><span class="sxs-lookup"><span data-stu-id="b8914-305">Reads all fields on the current line, returns them as an array of strings, and advances the cursor to the next line containing data.</span></span></summary>
        <returns><span data-ttu-id="b8914-306">Uma matriz de cadeias de caracteres que contém os valores de campo para a linha atual.</span><span class="sxs-lookup"><span data-stu-id="b8914-306">An array of strings that contains field values for the current line.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8914-307">Para permitir que os usuários a analisar arquivos de texto em vários formatos, o `ReadFields` método examina os valores de `TextFieldType`, `Delimiters`, e `FieldWidths`, se eles forem especificados, cada vez que ele é chamado.</span><span class="sxs-lookup"><span data-stu-id="b8914-307">In order to allow users to parse text files in multiple formats, the `ReadFields` method examines the values of `TextFieldType`, `Delimiters`, and `FieldWidths`, if they are specified, each time it is called.</span></span> <span data-ttu-id="b8914-308">Os usuários precisam configurar corretamente o `TextFieldType` e `FieldWidths` ou `Delimiters` propriedades, conforme apropriado.</span><span class="sxs-lookup"><span data-stu-id="b8914-308">Users need to correctly configure the `TextFieldType` and `FieldWidths` or `Delimiters` properties, as appropriate.</span></span> <span data-ttu-id="b8914-309">Se `TextFieldType` é definido como `Delimited`, e `Delimiters` não for definido, ou se `TextFieldType` é definido como `FixedWidth` e `FieldWidths`, uma exceção será lançada.</span><span class="sxs-lookup"><span data-stu-id="b8914-309">If `TextFieldType` is set to `Delimited`, and `Delimiters` is not set, or if `TextFieldType` is set to `FixedWidth` and `FieldWidths`, an exception is thrown.</span></span>  
  
 <span data-ttu-id="b8914-310">Se `ReadFields` encontra linhas em branco, elas são ignoradas e a próxima linha não vazia é retornada.</span><span class="sxs-lookup"><span data-stu-id="b8914-310">If `ReadFields` encounters blank lines, they are skipped and the next non-blank line is returned.</span></span>  
  
 <span data-ttu-id="b8914-311">Se o `ReadFields` método não é possível analisar a linha atual, ele gera uma exceção e não move para a próxima linha.</span><span class="sxs-lookup"><span data-stu-id="b8914-311">If the `ReadFields` method cannot parse the current line, it raises an exception and does not move to the next line.</span></span> <span data-ttu-id="b8914-312">Isso permite que seu aplicativo tentar analisar a linha novamente.</span><span class="sxs-lookup"><span data-stu-id="b8914-312">This enables your application to attempt to parse the line again.</span></span>  
  
 <span data-ttu-id="b8914-313">A tabela a seguir lista exemplos de tarefas que envolvem o `ReadFields` método.</span><span class="sxs-lookup"><span data-stu-id="b8914-313">The following table lists examples of tasks involving the `ReadFields` method.</span></span>  
  
|<span data-ttu-id="b8914-314">Para</span><span class="sxs-lookup"><span data-stu-id="b8914-314">To</span></span>|<span data-ttu-id="b8914-315">Consulte</span><span class="sxs-lookup"><span data-stu-id="b8914-315">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="b8914-316">Ler um arquivo delimitado</span><span class="sxs-lookup"><span data-stu-id="b8914-316">Read from a delimited file</span></span>|[<span data-ttu-id="b8914-317">Como ler a partir de arquivos de texto separados por vírgulas</span><span class="sxs-lookup"><span data-stu-id="b8914-317">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="b8914-318">Ler um arquivo de largura fixa</span><span class="sxs-lookup"><span data-stu-id="b8914-318">Read from a fixed-width file</span></span>|[<span data-ttu-id="b8914-319">Como ler a partir de arquivos de texto de largura fixa</span><span class="sxs-lookup"><span data-stu-id="b8914-319">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="b8914-320">Este exemplo usa o `ReadFields` método para ler o arquivo delimitado por vírgula `ParserText.txt`.</span><span class="sxs-lookup"><span data-stu-id="b8914-320">This example uses the `ReadFields` method to read from the comma-delimited file `ParserText.txt`.</span></span> <span data-ttu-id="b8914-321">O exemplo grava os campos a serem `Testfile.txt`.</span><span class="sxs-lookup"><span data-stu-id="b8914-321">The example writes the fields to `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException"><span data-ttu-id="b8914-322">Um campo não pode ser analisado usando o formato especificado.</span><span class="sxs-lookup"><span data-stu-id="b8914-322">A field cannot be parsed by using the specified format.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="b8914-323">Enumeração associada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-323">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="b8914-324">Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-324">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLine () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadLine();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b8914-325">Retorna a linha atual como uma cadeia de caracteres e avança o cursor para a próxima linha.</span><span class="sxs-lookup"><span data-stu-id="b8914-325">Returns the current line as a string and advances the cursor to the next line.</span></span></summary>
        <returns><span data-ttu-id="b8914-326">A linha atual do arquivo ou fluxo.</span><span class="sxs-lookup"><span data-stu-id="b8914-326">The current line from the file or stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8914-327">O `ReadLine` método não realiza nenhuma análise; um caractere de final de linha dentro de um campo delimitado é interpretado como o próprio fim da linha.</span><span class="sxs-lookup"><span data-stu-id="b8914-327">The `ReadLine` method performs no parsing; an end-of-line character within a delimited field is interpreted as the actual end of the line.</span></span>  
  
 <span data-ttu-id="b8914-328">`Nothing` será retornado se o final do arquivo for atingido.</span><span class="sxs-lookup"><span data-stu-id="b8914-328">`Nothing` is returned if the end of the file is reached.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8914-329">Este exemplo lê o arquivo `ParserText.txt` e grava-o para `Testfile.txt`.</span><span class="sxs-lookup"><span data-stu-id="b8914-329">This example reads through the file `ParserText.txt` and writes it to `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#15)]  
  
 <span data-ttu-id="b8914-330">Se `Testfile.txt` não existir, ela é criada pelo `WriteAllText` método.</span><span class="sxs-lookup"><span data-stu-id="b8914-330">If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.</span></span>  
  
 <span data-ttu-id="b8914-331">Este exemplo grava os campos como uma única cadeia de caracteres; Para fazer com que cada linha exiba em sua própria linha no arquivo de destino, um `VbCrLf` caractere deve ser acrescentado ao final de cada linha.</span><span class="sxs-lookup"><span data-stu-id="b8914-331">This example writes the fields as a single string; to have each line display on its own line in the destination file, a `VbCrLf` character should be appended at the end of each line.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
      </Docs>
    </Member>
    <Member MemberName="ReadToEnd">
      <MemberSignature Language="C#" Value="public string ReadToEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadToEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadToEnd () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadToEnd();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b8914-332">Lê o restante do arquivo de texto e retorna-o como uma cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="b8914-332">Reads the remainder of the text file and returns it as a string.</span></span></summary>
        <returns><span data-ttu-id="b8914-333">O texto restante do arquivo ou fluxo.</span><span class="sxs-lookup"><span data-stu-id="b8914-333">The remaining text from the file or stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8914-334">Este é um membro avançado; ele não aparece no IntelliSense, a menos que você clique no **todas as** guia.</span><span class="sxs-lookup"><span data-stu-id="b8914-334">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="b8914-335">Se não houver mais nada para ler porque foi atingido o final do arquivo, `Nothing` será retornado.</span><span class="sxs-lookup"><span data-stu-id="b8914-335">If there is nothing more to read because the end of the file has been reached, `Nothing` is returned.</span></span>  
  
 <span data-ttu-id="b8914-336">O `ReadToEnd` método não ignora linhas em branco e comentários.</span><span class="sxs-lookup"><span data-stu-id="b8914-336">The `ReadToEnd` method does not ignore blank lines and comments.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8914-337">Este exemplo usa o `ReadToEnd` método para ler o arquivo inteiro `ParserText.txt` e gravá-la para o arquivo `Testfile.txt`.</span><span class="sxs-lookup"><span data-stu-id="b8914-337">This example uses the `ReadToEnd` method to read the entire file `ParserText.txt` and write it to the file `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#10)]  
  
 <span data-ttu-id="b8914-338">Se `Testfile.txt` não existir, ela é criada pelo `WriteAllText` método.</span><span class="sxs-lookup"><span data-stu-id="b8914-338">If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      </Docs>
    </Member>
    <Member MemberName="SetDelimiters">
      <MemberSignature Language="C#" Value="public void SetDelimiters (params string[] delimiters);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetDelimiters(string[] delimiters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDelimiters (ParamArray delimiters As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDelimiters(... cli::array &lt;System::String ^&gt; ^ delimiters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delimiters" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delimiters"><span data-ttu-id="b8914-339">Matriz do tipo <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-339">Array of type <see langword="String" />.</span></span></param>
        <summary><span data-ttu-id="b8914-340">Define os delimitadores do leitor para os valores especificados e define o tipo de campo como <see langword="Delimited" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-340">Sets the delimiters for the reader to the specified values, and sets the field type to <see langword="Delimited" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8914-341">O conteúdo existente de `Delimiters` propriedade é limpo quando esse método é definido.</span><span class="sxs-lookup"><span data-stu-id="b8914-341">The existing contents of the `Delimiters` property are cleared when this method is set.</span></span>  
  
 <span data-ttu-id="b8914-342">Esse método fornece uma maneira de definir delimitadores sem criar uma matriz.</span><span class="sxs-lookup"><span data-stu-id="b8914-342">This method provides a way to set delimiters without creating an array.</span></span>  
  
 <span data-ttu-id="b8914-343">A tabela a seguir lista um exemplo de tarefa envolvendo o `SetDelimiters` método.</span><span class="sxs-lookup"><span data-stu-id="b8914-343">The following table lists an example of a task involving the `SetDelimiters` method.</span></span>  
  
|<span data-ttu-id="b8914-344">Para</span><span class="sxs-lookup"><span data-stu-id="b8914-344">To</span></span>|<span data-ttu-id="b8914-345">Consulte</span><span class="sxs-lookup"><span data-stu-id="b8914-345">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="b8914-346">Analisar um arquivo de texto</span><span class="sxs-lookup"><span data-stu-id="b8914-346">Parse a text file</span></span>|[<span data-ttu-id="b8914-347">Analisando arquivos de texto com o objeto TextFieldParser</span><span class="sxs-lookup"><span data-stu-id="b8914-347">Parsing Text Files with the TextFieldParser Object</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)|  
  
   
  
## Examples  
 <span data-ttu-id="b8914-348">Este exemplo abre um analisador de campo de texto e define o delimitador como `vbTab`.</span><span class="sxs-lookup"><span data-stu-id="b8914-348">This example opens a text field parser and defines the delimiter as `vbTab`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#4)]  
  
 <span data-ttu-id="b8914-349">Substitua o caminho `C:\logs\test.log` com o caminho e o nome do arquivo que você deseja analisar.</span><span class="sxs-lookup"><span data-stu-id="b8914-349">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b8914-350">Um delimitador tem tamanho zero.</span><span class="sxs-lookup"><span data-stu-id="b8914-350">A delimiter is zero-length.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
      </Docs>
    </Member>
    <Member MemberName="SetFieldWidths">
      <MemberSignature Language="C#" Value="public void SetFieldWidths (params int[] fieldWidths);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetFieldWidths(int32[] fieldWidths) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFieldWidths (ParamArray fieldWidths As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFieldWidths(... cli::array &lt;int&gt; ^ fieldWidths);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldWidths" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="fieldWidths"><span data-ttu-id="b8914-351">Matriz de <see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-351">Array of <see langword="Integer" />.</span></span></param>
        <summary><span data-ttu-id="b8914-352">Define os delimitadores do leitor para os valores especificados.</span><span class="sxs-lookup"><span data-stu-id="b8914-352">Sets the delimiters for the reader to the specified values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8914-353">O conteúdo existente de `Delimiters` propriedade é limpo quando isso é definido.</span><span class="sxs-lookup"><span data-stu-id="b8914-353">The existing contents of the `Delimiters` property are cleared when this is set.</span></span>  
  
 <span data-ttu-id="b8914-354">Esse método fornece uma maneira de definir delimitadores sem criar uma matriz.</span><span class="sxs-lookup"><span data-stu-id="b8914-354">This method provides a way to set delimiters without creating an array.</span></span>  
  
 <span data-ttu-id="b8914-355">A tabela a seguir lista exemplo de tarefas que envolvem o `SetFieldWidths` método.</span><span class="sxs-lookup"><span data-stu-id="b8914-355">The following table lists example of tasks involving the `SetFieldWidths` method.</span></span>  
  
|<span data-ttu-id="b8914-356">Para</span><span class="sxs-lookup"><span data-stu-id="b8914-356">To</span></span>|<span data-ttu-id="b8914-357">Consulte</span><span class="sxs-lookup"><span data-stu-id="b8914-357">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="b8914-358">Analise um arquivo de texto.</span><span class="sxs-lookup"><span data-stu-id="b8914-358">Parse a text file.</span></span>|[<span data-ttu-id="b8914-359">Analisando arquivos de texto com o objeto TextFieldParser</span><span class="sxs-lookup"><span data-stu-id="b8914-359">Parsing Text Files with the TextFieldParser Object</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)|  
  
   
  
## Examples  
 <span data-ttu-id="b8914-360">Este exemplo abre um analisador de campo de texto e define a largura do campo como `5`.</span><span class="sxs-lookup"><span data-stu-id="b8914-360">This example opens a text-field parser and defines the field width as `5`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#12)]  
  
 <span data-ttu-id="b8914-361">Substitua o caminho `C:\logs\test.log` com o caminho e o nome do arquivo que você deseja analisar.</span><span class="sxs-lookup"><span data-stu-id="b8914-361">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 <span data-ttu-id="b8914-362">O exemplo a seguir abre um analisador de campo de texto e define a largura do campo como `5`, `10`e a variável.</span><span class="sxs-lookup"><span data-stu-id="b8914-362">The following example opens a text-field parser and defines the field widths as `5`, `10`, and variable.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#13)]  
  
 <span data-ttu-id="b8914-363">Substitua o caminho `C:\logs\test.log` com o caminho e o nome do arquivo que você deseja analisar.</span><span class="sxs-lookup"><span data-stu-id="b8914-363">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="TextFieldType">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.FieldType TextFieldType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.FileIO.FieldType TextFieldType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFieldType As FieldType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::FileIO::FieldType TextFieldType { Microsoft::VisualBasic::FileIO::FieldType get(); void set(Microsoft::VisualBasic::FileIO::FieldType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.FieldType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b8914-364">Indica se o arquivo a ser analisado é delimitado ou com uma largura fixa.</span><span class="sxs-lookup"><span data-stu-id="b8914-364">Indicates whether the file to be parsed is delimited or fixed-width.</span></span></summary>
        <value><span data-ttu-id="b8914-365">Um valor <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> que indica se o arquivo a ser analisado é delimitado ou tem uma largura fixa.</span><span class="sxs-lookup"><span data-stu-id="b8914-365">A <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> value that indicates whether the file to be parsed is delimited or fixed-width.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8914-366">O valor padrão dessa propriedade é delimitado.</span><span class="sxs-lookup"><span data-stu-id="b8914-366">The default value of this property is delimited.</span></span>  
  
 <span data-ttu-id="b8914-367">A tabela a seguir lista exemplos de tarefas que envolvem o `TextFieldType` propriedade.</span><span class="sxs-lookup"><span data-stu-id="b8914-367">The following table lists examples of tasks involving the `TextFieldType` property.</span></span>  
  
|<span data-ttu-id="b8914-368">Para</span><span class="sxs-lookup"><span data-stu-id="b8914-368">To</span></span>|<span data-ttu-id="b8914-369">Consulte</span><span class="sxs-lookup"><span data-stu-id="b8914-369">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="b8914-370">Ler um arquivo de texto delimitado</span><span class="sxs-lookup"><span data-stu-id="b8914-370">Read from a delimited text file</span></span>|[<span data-ttu-id="b8914-371">Como ler a partir de arquivos de texto separados por vírgulas</span><span class="sxs-lookup"><span data-stu-id="b8914-371">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="b8914-372">Ler um arquivo de texto de largura fixa</span><span class="sxs-lookup"><span data-stu-id="b8914-372">Read from a fixed-width text file</span></span>|[<span data-ttu-id="b8914-373">Como ler a partir de arquivos de texto de largura fixa</span><span class="sxs-lookup"><span data-stu-id="b8914-373">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|<span data-ttu-id="b8914-374">Ler um arquivo de texto com vários formatos</span><span class="sxs-lookup"><span data-stu-id="b8914-374">Read from a text file with multiple formats</span></span>|[<span data-ttu-id="b8914-375">Como ler a partir de arquivos de texto com vários formatos</span><span class="sxs-lookup"><span data-stu-id="b8914-375">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="b8914-376">Este exemplo cria um `TextFieldParser`, `FileReader`e especifica que ele é delimitado.</span><span class="sxs-lookup"><span data-stu-id="b8914-376">This example creates a `TextFieldParser`, `FileReader`, and specifies that it is delimited.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#19)]  
  
 <span data-ttu-id="b8914-377">Este exemplo cria um `TextFieldParser`, `FileReader`e especifica que se trata de largura fixa.</span><span class="sxs-lookup"><span data-stu-id="b8914-377">This example creates a `TextFieldParser`, `FileReader`, and specifies that it is fixed-width.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
      </Docs>
    </Member>
    <Member MemberName="TrimWhiteSpace">
      <MemberSignature Language="C#" Value="public bool TrimWhiteSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TrimWhiteSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property TrimWhiteSpace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TrimWhiteSpace { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b8914-378">Indica se espaços em branco à esquerda e à direita devem ser removidos dos valores de campo.</span><span class="sxs-lookup"><span data-stu-id="b8914-378">Indicates whether leading and trailing white space should be trimmed from field values.</span></span></summary>
        <value>
          <span data-ttu-id="b8914-379"><see langword="True" /> caso espaços em branco à direita e à esquerda devam ser removidos dos valores de campo; caso contrário, <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="b8914-379"><see langword="True" /> if leading and trailing white space should be trimmed from field values; otherwise, <see langword="False" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8914-380">O valor padrão dessa propriedade é `True`.</span><span class="sxs-lookup"><span data-stu-id="b8914-380">The default value for this property is `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8914-381">Este exemplo cria um `TextFieldParser`, `FileReader`e define o `TrimWhiteSpace` propriedade `True`.</span><span class="sxs-lookup"><span data-stu-id="b8914-381">This example creates a `TextFieldParser`, `FileReader`, and sets the `TrimWhiteSpace` property to `True`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>