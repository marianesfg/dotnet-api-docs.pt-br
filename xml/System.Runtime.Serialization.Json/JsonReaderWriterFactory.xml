<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="JsonReaderWriterFactory.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73cd4428-9abd-4836-b1ef-ba70fe2e0b72050516f8e1c9606031fb5cea288f6e0a1d84e7d3.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">050516f8e1c9606031fb5cea288f6e0a1d84e7d3</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>Produces instances of <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can read data encoded with JavaScript Object Notation (JSON) from a stream or buffer and map it to an XML Infoset and instances of <ph id="ph2">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that can map an XML Infoset to JSON and write JSON-encoded data to a stream.</source>
          <target state="translated">Produz instâncias de <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> que podem ler dados codificados com JSON (JavaScript Object Notation) de um fluxo ou um buffer e faz o mapeamento em um XML Infoset e em instâncias de <ph id="ph2">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> que mapeiam um XML Infoset para JSON e grava dados codificados por JSON em um fluxo.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source><ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> processes JSON messages using a mapping between JSON data and the XML Infoset.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> processa mensagens JSON usando um mapeamento entre dados JSON e XML Infoset.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>Normally, this mapping is hidden from view.</source>
          <target state="translated">Normalmente, esse mapeamento é ocultos na exibição.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>However, in some advanced scenarios it may be necessary to manually convert between JSON and XML.</source>
          <target state="translated">No entanto, em alguns cenários avançados de pode ser necessário converter manualmente entre JSON e XML.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory&gt;</ph> class can be used to create the necessary XML readers and writers.</source>
          <target state="translated">Nesse caso, a <ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory&gt;</ph> classe pode ser usada para criar o gravadores e leitores XML necessário.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>Note that not every XML Infoset element can be mapped to JSON.</source>
          <target state="translated">Observe que nem todo elemento Infoset XML pode ser mapeado para JSON.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>For more information about mapping, see <bpt id="p1">[</bpt>How to: Serialize and Deserialize JSON Data<ept id="p1">](~/docs/framework/wcf/feature-details/how-to-serialize-and-deserialize-json-data.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre o mapeamento, consulte <bpt id="p1">[</bpt>como: serializar e desserializar dados de JSON<ept id="p1">](~/docs/framework/wcf/feature-details/how-to-serialize-and-deserialize-json-data.md)</ept>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can map - streams or buffers encoded with JavaScript Object Notation (JSON) to an XML Infoset.</source>
          <target state="translated">Cria um <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> que pode mapear fluxos ou buffers codificados com JSON (JavaScript Object Notation) para um Infoset XML.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>Each of the overloads uses a <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> to prevent Denial of Service (DoS) attacks when reading untrusted data.</source>
          <target state="translated">Cada uma das sobrecargas usa um <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> para evitar a negação de serviço (DoS) ataques ao ler confiável para dados.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>For more information about using <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> to prevent Denial of Service attacks when reading untrusted data, see <bpt id="p1">[</bpt>Security Considerations for Data<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre como usar <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> para evitar ataques de negação de serviço durante a leitura de dados não confiáveis, consulte <bpt id="p1">[</bpt>considerações de segurança para dados<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
          <source>The input <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> buffer array from which to read.</source>
          <target state="translated">A matriz do buffer <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> de entrada para leitura.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph> used to prevent Denial of Service attacks when reading untrusted data.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph> usado para prevenir ataques de Negação de Serviço durante a leitura de dados não confiáveis.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can map buffers encoded with JavaScript Object Notation (JSON) to an XML Infoset.</source>
          <target state="translated">Cria um <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> que pode mapear buffers codificados com JSON (JavaScript Object Notation) para um XML Infoset.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can process JavaScript Object Notation (JSON) data.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> que pode processar dados JSON (JavaScript Object Notation).</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
          <source>This overload does not accept an <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> parameter.</source>
          <target state="translated">Essa sobrecarga não aceita um <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> parâmetro.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
          <source>The character encoding (UTF-8, Unicode or Big-Endian Unicode) is auto-detected when the data is read.</source>
          <target state="translated">O caractere de codificação (UTF-8, Unicode ou Unicode Big-Endian) é detectado automaticamente quando os dados são lidos.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
          <source>For more information about using <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> to prevent Denial of Service attacks when reading untrusted data, see <bpt id="p1">[</bpt>Security Considerations for Data<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre como usar <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> para evitar ataques de negação de serviço durante a leitura de dados não confiáveis, consulte <bpt id="p1">[</bpt>considerações de segurança para dados<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
          <source>The input <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> from which to read.</source>
          <target state="translated">A entrada <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> da qual ler.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph> used to prevent Denial of Service attacks when reading untrusted data.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph> usado para prevenir ataques de Negação de Serviço durante a leitura de dados não confiáveis.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can map streams encoded with JavaScript Object Notation (JSON) to an XML Infoset.</source>
          <target state="translated">Cria um <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> que pode mapear fluxos codificados com JSON (JavaScript Object Notation) para um XML Infoset.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can read JavaScript Object Notation (JSON).</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> que pode ler o objeto JSON (JavaScript Object Notation).</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
          <source>This overload does not take an <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> parameter.</source>
          <target state="translated">Essa sobrecarga não tem um <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> parâmetro.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
          <source>The character encoding (UTF-8, Unicode or Big-Endian Unicode) is auto-detected when the data is read.</source>
          <target state="translated">O caractere de codificação (UTF-8, Unicode ou Unicode Big-Endian) é detectado automaticamente quando os dados são lidos.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
          <source>For more information about using <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> to prevent Denial of Service attacks when reading untrusted data, see <bpt id="p1">[</bpt>Security Considerations for Data<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre como usar <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> para evitar ataques de negação de serviço durante a leitura de dados não confiáveis, consulte <bpt id="p1">[</bpt>considerações de segurança para dados<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
          <source>The input <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> buffer array from which to read.</source>
          <target state="translated">A matriz do buffer <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> de entrada para leitura.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
          <source>Starting position from which to read in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Posição inicial da qual ler no <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
          <source>Number of bytes that can be read from <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Número de bytes que podem ser lidos do <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph> used to prevent Denial of Service attacks when reading untrusted data.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph> usado para prevenir ataques de Negação de Serviço durante a leitura de dados não confiáveis.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can map buffers encoded with JavaScript Object Notation (JSON), of a specified size and offset, to an XML Infoset.</source>
          <target state="translated">Cria um <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> que pode mapear buffers codificados com JSON (JavaScript Object Notation), de um tamanho e deslocamento especificados, para um XML Infoset.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can read JavaScript Object Notation (JSON).</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> que pode ler o objeto JSON (JavaScript Object Notation).</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
          <source>This overload does not take an <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> parameter.</source>
          <target state="translated">Essa sobrecarga não tem um <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> parâmetro.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
          <source>The character encoding (UTF-8, Unicode or Big-Endian Unicode) is auto-detected when the data is read.</source>
          <target state="translated">O caractere de codificação (UTF-8, Unicode ou Unicode Big-Endian) é detectado automaticamente quando os dados são lidos.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
          <source>For more information about using <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> to prevent Denial of Service attacks when reading untrusted data, see <bpt id="p1">[</bpt>Security Considerations for Data<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre como usar <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> para evitar ataques de negação de serviço durante a leitura de dados não confiáveis, consulte <bpt id="p1">[</bpt>considerações de segurança para dados<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>The input <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> from which to read.</source>
          <target state="translated">A entrada <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> da qual ler.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> that specifies the character encoding used by the reader.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> que especifica a codificação de caracteres usada pelo leitor.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>If <ph id="ph1">&lt;see langword="null" /&gt;</ph> is specified as the value, the reader attempts to auto-detect the encoding.</source>
          <target state="translated">Se <ph id="ph1">&lt;see langword="null" /&gt;</ph> for especificado como o valor, o leitor tentará detectar automaticamente a codificação.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph> used to prevent Denial of Service attacks when reading untrusted data.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph> usado para prevenir ataques de Negação de Serviço durante a leitura de dados não confiáveis.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.OnXmlDictionaryReaderClose" /&gt;</ph> delegate to call when the reader is closed.</source>
          <target state="translated">O delegado do <ph id="ph1">&lt;see cref="T:System.Xml.OnXmlDictionaryReaderClose" /&gt;</ph> a chamar quando o leitor estiver fechado.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can map streams encoded with JavaScript Object Notation (JSON), of a specified size and offset, to an XML Infoset.</source>
          <target state="translated">Cria um <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph>, que pode mapear fluxos codificados com JSON (JavaScript Object Notation), de um tamanho e deslocamento especificados, para um Infoset XML.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can read JavaScript Object Notation (JSON).</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> que pode ler o objeto JSON (JavaScript Object Notation).</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>For more information about using <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> to prevent Denial of Service attacks when reading untrusted data, see <bpt id="p1">[</bpt>Security Considerations for Data<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre como usar <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> para evitar ataques de negação de serviço durante a leitura de dados não confiáveis, consulte <bpt id="p1">[</bpt>considerações de segurança para dados<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>The input <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> buffer array from which to read.</source>
          <target state="translated">A matriz do buffer <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> de entrada para leitura.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>Starting position from which to read in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Posição inicial da qual ler no <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>Number of bytes that can be read from <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Número de bytes que podem ser lidos do <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> that specifies the character encoding used by the reader.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> que especifica a codificação de caracteres usada pelo leitor.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>If <ph id="ph1">&lt;see langword="null" /&gt;</ph> is specified as the value, the reader attempts to auto-detect the encoding.</source>
          <target state="translated">Se <ph id="ph1">&lt;see langword="null" /&gt;</ph> for especificado como o valor, o leitor tentará detectar automaticamente a codificação.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph> used to prevent Denial of Service attacks when reading untrusted data.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph> usado para prevenir ataques de Negação de Serviço durante a leitura de dados não confiáveis.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.OnXmlDictionaryReaderClose" /&gt;</ph> delegate to call when the reader is closed.</source>
          <target state="translated">O delegado do <ph id="ph1">&lt;see cref="T:System.Xml.OnXmlDictionaryReaderClose" /&gt;</ph> a chamar quando o leitor estiver fechado.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>The default value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O valor padrão é <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can map buffers encoded with JavaScript Object Notation (JSON), with a specified size and offset and character encoding, to an XML Infoset.</source>
          <target state="translated">Cria um <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> que pode mapear buffers codificados com JSON (JavaScript Object Notation), com um tamanho, deslocamento e codificação de caracteres especificados, para um Infoset XML.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can read JavaScript Object Notation (JSON).</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> que pode ler o objeto JSON (JavaScript Object Notation).</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>For more information about using <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> to prevent Denial of Service attacks when reading untrusted data, see <bpt id="p1">[</bpt>Security Considerations for Data<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre como usar <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> para evitar ataques de negação de serviço durante a leitura de dados não confiáveis, consulte <bpt id="p1">[</bpt>considerações de segurança para dados<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to a stream.</source>
          <target state="translated">Cria um <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> que grava dados codificados com JSON em um fluxo.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter%2A&gt;</ph> static method returns an instance of an <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph> that can map an XML Infoset to a JSON stream.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter%2A&gt;</ph> método estático retorna uma instância de um <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph> que um Infoset XML pode ser mapeado para um fluxo JSON.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph> is not guaranteed to produce valid JSON.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph> não é garantida para produzir um JSON válido.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>If it is used in a way not supported by the JSON-XML mapping, it may either throw an exception or write an invalid JSON document.</source>
          <target state="translated">Se ele é usado de forma que não há suportada o mapeamento de XML JSON, ele pode gerar uma exceção ou escrever um documento JSON inválido.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)">
          <source>The output <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> for the JSON writer.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> de saída do gravador JSON.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to a stream.</source>
          <target state="translated">Cria um <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> que grava dados codificados com JSON em um fluxo.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to the stream based on an XML Infoset.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> que grava dados codificados com JSON no fluxo com base em um Infoset XML.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)">
          <source>The default character encoding is UTF-8.</source>
          <target state="translated">A codificação de caracteres padrão é UTF-8.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)">
          <source>When the writer is closed, the stream is closed as well.</source>
          <target state="translated">Quando o gravador está fechado, o fluxo está fechado também.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)">
          <source>The output <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> for the JSON writer.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> de saída do gravador JSON.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> that specifies the character encoding used by the writer.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> que especifica a codificação de caracteres usada pelo gravador.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)">
          <source>The default encoding is UTF-8.</source>
          <target state="translated">A codificação padrão é UTF-8.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to a stream with a specified character encoding.</source>
          <target state="translated">Cria um <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> que grava dados codificados com JSON em um fluxo com uma codificação de caracteres especificada.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to the stream based on an XML Infoset.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> que grava dados codificados com JSON no fluxo com base em um Infoset XML.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)">
          <source>When the writer is closed, the stream is closed as well.</source>
          <target state="translated">Quando o gravador está fechado, o fluxo está fechado também.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The output <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> for the JSON writer.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> de saída do gravador JSON.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> that specifies the character encoding used by the writer.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> que especifica a codificação de caracteres usada pelo gravador.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The default encoding is UTF-8.</source>
          <target state="translated">A codificação padrão é UTF-8.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the output stream is closed by the writer when done; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Se <ph id="ph1">&lt;see langword="true" /&gt;</ph>, o fluxo de saída será fechado pelo gravador ao terminar; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">O valor padrão é <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to a stream with a specified character encoding.</source>
          <target state="translated">Cria um <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> que grava dados codificados com JSON em um fluxo com uma codificação de caracteres especificada.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to the stream based on an XML Infoset.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> que grava dados codificados com JSON no fluxo com base em um Infoset XML.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>The output <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> for the JSON writer.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> de saída do gravador JSON.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> that specifies the character encoding used by the writer.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> que especifica a codificação de caracteres usada pelo gravador.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>The default encoding is UTF-8.</source>
          <target state="translated">A codificação padrão é UTF-8.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the output stream is closed by the writer when done; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Se <ph id="ph1">&lt;see langword="true" /&gt;</ph>, o fluxo de saída será fechado pelo gravador ao terminar; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">O valor padrão é <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the output uses multiline format, indenting each level properly; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Se <ph id="ph1">&lt;see langword="true" /&gt;</ph>, a saída usará o formato de várias linhas, cada nível de recuo corretamente; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to a stream with a specified character.</source>
          <target state="translated">Cria um <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> que grava dados codificados com JSON em um fluxo com um caractere especificado.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to the stream based on an XML Infoset.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> que grava dados codificados com JSON no fluxo com base em um Infoset XML.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
          <source>The output <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> for the JSON writer.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> de saída do gravador JSON.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> that specifies the character encoding used by the writer.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> que especifica a codificação de caracteres usada pelo gravador.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
          <source>The default encoding is UTF-8.</source>
          <target state="translated">A codificação padrão é UTF-8.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the output stream is closed by the writer when done; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Se <ph id="ph1">&lt;see langword="true" /&gt;</ph>, o fluxo de saída será fechado pelo gravador ao terminar; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">O valor padrão é <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the output uses multiline format, indenting each level properly; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Se <ph id="ph1">&lt;see langword="true" /&gt;</ph>, a saída usará o formato de várias linhas, cada nível de recuo corretamente; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
          <source>The string used to indent each level.</source>
          <target state="translated">A cadeia de caracteres usada recuar cada nível.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to a stream with a specified character.</source>
          <target state="translated">Cria um <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> que grava dados codificados com JSON em um fluxo com um caractere especificado.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to the stream based on an XML Infoset.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> que grava dados codificados com JSON no fluxo com base em um Infoset XML.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>