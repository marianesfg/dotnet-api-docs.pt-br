<Type Name="SoapHttpClientProtocol" FullName="System.Web.Services.Protocols.SoapHttpClientProtocol">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a377dfd1a9daec9621d8021ffecd7938ca1a0b65" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52252736" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SoapHttpClientProtocol : System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SoapHttpClientProtocol extends System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />
  <TypeSignature Language="VB.NET" Value="Public Class SoapHttpClientProtocol&#xA;Inherits HttpWebClientProtocol" />
  <TypeSignature Language="C++ CLI" Value="public ref class SoapHttpClientProtocol : System::Web::Services::Protocols::HttpWebClientProtocol" />
  <TypeSignature Language="F#" Value="type SoapHttpClientProtocol = class&#xA;    inherit HttpWebClientProtocol" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Services.Protocols.HttpWebClientProtocol</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Especifica o cliente da classe do qual os proxies são derivados ao usar o SOAP.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se você estiver criando um cliente de serviço Web XML, em seguida, uma classe proxy que deriva indiretamente ou diretamente de <xref:System.Web.Services.Protocols.WebClientProtocol> deve ser criado para o serviço Web XML. Quando o cliente do serviço Web XML chama usando SOAP, a classe de proxy deve derivar <xref:System.Web.Services.Protocols.SoapHttpClientProtocol>, que é derivada de <xref:System.Web.Services.Protocols.HttpWebClientProtocol>. <xref:System.Web.Services.Protocols.HttpWebClientProtocol>, por sua vez, deriva de <xref:System.Web.Services.Protocols.WebClientProtocol>.  
  
 Para se comunicar com um serviço Web XML, crie uma classe de proxy que deriva indiretamente ou diretamente de <xref:System.Web.Services.Protocols.WebClientProtocol> para o serviço Web XML que você deseja chamar. Em vez de criar a classe de proxy manualmente, use a ferramenta Web Services Description Language (Wsdl.exe) para criar uma classe proxy para a descrição do serviço de um determinado do XML Web Services. Quando uma classe de proxy é gerada para o protocolo SOAP, chamadas síncronas para métodos de serviço Web XML são feitas por meio de <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> método, enquanto chamadas assíncronas são feitas usando o <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> método e o <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A> método.  
  
   
  
## Examples  
 O exemplo de código a seguir é uma classe de proxy gerada pelo Wsdl.exe para o `Math` serviço Web XML. A classe de proxy deriva <xref:System.Web.Services.Protocols.SoapHttpClientProtocol>, que é derivada de abstrata <xref:System.Web.Services.Protocols.WebClientProtocol> classe.  
  
 [!code-cpp[Classic SoapHttpClientProtocol Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/VB/source.vb#1)]  
  
 O exemplo de código a seguir é o `Math` XML Web service, do qual a classe de proxy anterior foi gerada.  
  
> [!IMPORTANT]
>  Este exemplo tem uma caixa de texto que aceita entrada do usuário, que é uma potencial ameaça de segurança. Por padrão, as páginas da Web do ASP.NET validam que a entrada do usuário não inclui elementos HTML ou script. Para obter mais informações, consulte [Visão geral de explorações de script](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
  
  
 ]]></format>
    </remarks>
    <threadsafe>Este tipo é thread-safe.</threadsafe>
    <block subset="none" type="overrides">
      <para>Quando você substituir essa classe, você pode introduzir os métodos na classe derivada, que são específicos para um determinado tipo de serviço Web XML. Os métodos de capturam os parâmetros e chamar a classe base para fazer o trabalho de se comunicar com o serviço Web XML. Se os métodos introduzidos são assíncronos, chame o <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /> método e o <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" /> método. Se os métodos introduzidos são síncronos, chame o <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])" /> método. O construtor substituído normalmente define o <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" /> propriedade para a URL do método de serviço Web XML.</para>
    </block>
    <altmember cref="T:System.Web.Services.Protocols.HttpSimpleClientProtocol" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SoapHttpClientProtocol ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SoapHttpClientProtocol();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="protected IAsyncResult BeginInvoke (string methodName, object[] parameters, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IAsyncResult BeginInvoke(string methodName, object[] parameters, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Function BeginInvoke (methodName As String, parameters As Object(), callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; IAsyncResult ^ BeginInvoke(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : string * obj[] * AsyncCallback * obj -&gt; IAsyncResult" Usage="soapHttpClientProtocol.BeginInvoke (methodName, parameters, callback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">O nome do método de serviço Web XML na classe derivada que está invocando o método <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />.</param>
        <param name="parameters">Uma matriz de objetos que contém os parâmetros a serem passados para o serviço Web XML. A ordem dos valores na matriz corresponde à ordem dos parâmetros no método de chamada da classe derivada.</param>
        <param name="callback">O delegado a ser chamado quando a invocação assíncrona for concluída. Se <paramref name="callback" /> for <see langword="null" />, o delegado não será chamado.</param>
        <param name="asyncState">Informações adicionais fornecidas pelo chamador.</param>
        <summary>Inicia uma invocação assíncrona de um método de serviço Web XML usando SOAP.</summary>
        <returns>Um <see cref="T:System.IAsyncResult" /> que é passado para o método <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" /> para obter os valores retornados da chamada de método remoto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, você não poderia chamar o <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> método diretamente, a menos que você estivesse criando sua própria classe de proxy para um serviço Web XML.  
  
 Uma classe de proxy gerada pela ferramenta Web Services Description Language (Wsdl.exe) a partir de uma descrição de serviço expõe os métodos de serviço Web XML como nomes derivados da classe de proxy para chamar os métodos de serviço Web XML de forma síncrona. Para chamar os métodos de serviço Web XML assincronamente, dois métodos adicionais são adicionados à classe de proxy para cada método de serviço Web XML, uma com o `Begin` prefixo adicionado ao nome do método de serviço Web XML e outra com o `End` prefixo adicionado.  
  
 As chamadas de classe de proxy a <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> método para iniciar uma chamada de invocação assíncrona para o método de serviço Web XML. Por exemplo, se um serviço Web XML expõe um método de serviço Web XML denominado `Add`, a classe de proxy contém um método chamado `BeginAdd`, método de serviço para iniciar uma invocação de Web XML. Dentro do código para o `BeginAdd`, é feita uma chamada para o <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> método e os resultados são colocados no tipo de retorno esperado para `Add`.  
  
 O `methodName` é usado para localizar os atributos personalizados que podem ter sido adicionados ao método, como <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>. <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> Fornece informações adicionais sobre o método derivada que é necessário para o protocolo SOAP.  
  
 `asyncState` é passado para `callback` e está incluído na <xref:System.IAsyncResult> que é retornado do <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> método. O `asyncState` parâmetro pode ser usado para passar informações sobre o contexto da chamada assíncrona, especificada no `callback` parâmetro para o delegado que manipula o resultado.  
  
   
  
## Examples  
 O exemplo de código a seguir é uma classe de proxy gerada pela ferramenta Web Services Description Language (Wsdl.exe) para o `Math` serviço Web XML. Dentro do `BeginAdd` método da classe de proxy, o <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> método está iniciando uma invocação assíncrona para o `Add` método de serviço Web XML.  
  
 [!code-cpp[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/VB/source.vb#1)]  
  
 O exemplo de código a seguir é o `Math` serviço Web XML, da qual a classe de proxy anterior foi criada.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Services.Protocols.SoapException">A solicitação atingiu o computador do servidor, mas não foi processada com êxito.</exception>
        <exception cref="T:System.InvalidOperationException">A solicitação não era válida para o estado atual do objeto.</exception>
        <exception cref="T:System.Net.WebException">Ocorreu um erro ao acessar a rede.</exception>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" />
        <altmember cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
      </Docs>
    </Member>
    <Member MemberName="Discover">
      <MemberSignature Language="C#" Value="public void Discover ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Discover() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover" />
      <MemberSignature Language="VB.NET" Value="Public Sub Discover ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Discover();" />
      <MemberSignature Language="F#" Value="member this.Discover : unit -&gt; unit" Usage="soapHttpClientProtocol.Discover " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Associa dinamicamente a um serviço Web XML descrito no documento de descoberta em <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um cliente de serviço Web XML pode vincular dinamicamente a um serviço Web XML que não seja aquele referenciado na classe de proxy usando o <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> método. Normalmente, o <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> propriedade refere-se para o endereço base do serviço Web XML. No entanto, antes de invocar o <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> método, defina o <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> propriedade para uma URL de um documento de descoberta. O <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> método tenta encontrar uma correspondência no documento de descoberta para a associação definida na classe de proxy e, em seguida, associar dinamicamente a ele. Se for bem-sucedido, chamadas de método subsequentes são direcionadas para o serviço Web XML descrito no documento de descoberta.  
  
 Se a classe de proxy é criada usando a ferramenta Web Services Description Language (Wsdl.exe), a classe de proxy define a associação implementada pelos métodos de serviço Web XML ele invoca usando o <xref:System.Web.Services.WebServiceBindingAttribute>. Quando um serviço Web XML implementa várias associações, Wsdl.exe cria uma classe de proxy para cada associação. Aplicado para cada classe de proxy é um <xref:System.Web.Services.WebServiceBindingAttribute> que define o nome da associação e seu namespace. O documento de descoberta que você definir o <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> propriedade deve conter uma referência a um serviço Web XML que implementa o mesmo nome de associação e o namespace ou uma exceção será lançada.  
  
   
  
## Examples  
 O exemplo de código a seguir é uma classe de proxy gerada usando o utilitário Wsdl.exe para o `Math` serviço Web XML. Um <xref:System.Web.Services.WebServiceBindingAttribute> é aplicada para o `Math` definindo o nome da associação como de classe de proxy `MathSoap` e seu namespace para `http://tempuri.org/`.  
  
 [!code-cpp[SoapHttpClientProtocol.Discover Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/CPP/source.cpp#1)]
 [!code-csharp[SoapHttpClientProtocol.Discover Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/CS/source.cs#1)]
 [!code-vb[SoapHttpClientProtocol.Discover Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/VB/source.vb#1)]  
  
 O exemplo de código a seguir é um cliente de serviço Web usando a classe de proxy anterior. Dentro de `EnterBtn_Click` eventos do formulário da Web, as chamadas de cliente de serviço Web XML o <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> método de tentativa de vincular dinamicamente a URL fornecida pelo usuário.  
  
> [!IMPORTANT]
>  Este exemplo tem uma caixa de texto que aceita entrada do usuário, que é uma potencial ameaça de segurança. Por padrão, as páginas da Web do ASP.NET validam que a entrada do usuário não inclui elementos HTML ou script. Para obter mais informações, consulte [Visão geral de explorações de script](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-csharp[SoapHttpClientProtocol.Discover Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/CS/sourcecs.aspx#2)]
 [!code-vb[SoapHttpClientProtocol.Discover Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/VB/sourcevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">A classe de proxy não tem uma associação definida.</exception>
        <altmember cref="T:System.Web.Services.WebServiceBindingAttribute" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/fxx6cfx2(v=vs.100)">Descoberta de serviço Web XML</related>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="protected object[] EndInvoke (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] EndInvoke(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EndInvoke (asyncResult As IAsyncResult) As Object()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndInvoke : IAsyncResult -&gt; obj[]" Usage="soapHttpClientProtocol.EndInvoke asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">O <see cref="T:System.IAsyncResult" /> retornado do método <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />.</param>
        <summary>Encerra uma invocação assíncrona de um método de serviço Web XML usando SOAP.</summary>
        <returns>Uma matriz de objetos que contém o valor retornado e quaisquer parâmetros <see langword="out" /> ou por referência do método da classe derivada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, você não poderia chamar o <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> método diretamente, a menos que você estivesse criando sua própria classe de proxy para um serviço Web XML.  
  
 Uma classe de proxy gerada pela ferramenta Web Services Description Language (Wsdl.exe) para um serviço Web XML expõe os métodos de serviço Web XML, como nomes de fora a classe de proxy para chamar os métodos de serviço Web XML de forma síncrona. Para chamar os métodos de serviço Web XML assíncrona, dois métodos adicionais são adicionados à classe de proxy para cada método de serviço Web XML, uma com o `Begin` prefixo adicionado ao nome do método de serviço Web XML e outra com o `End` prefixo adicionado.  
  
 As chamadas de classe de proxy a <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> método para concluir uma chamada de invocação assíncrona para o método de serviço Web XML. Por exemplo, se um serviço Web XML expõe um método de serviço Web XML denominado `Add`, a classe de proxy contém um método chamado `EndAdd`, método de serviço para a conclusão de uma invocação assíncrona de um Web XML. Dentro do código para o `EndAdd` é feita uma chamada para o <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> método e, em seguida, os resultados são colocados no tipo de retorno esperado para `Add`.  
  
   
  
## Examples  
 O exemplo de código a seguir é uma classe de proxy gerada pelo Wsdl.exe para o `Math` serviço Web XML. Dentro de `EndAdd` método da classe de proxy, o <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> a chamada assíncrona a conclusão do método o `Add` método de serviço Web XML.  
  
 [!code-cpp[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/VB/source.vb#1)]  
  
 O exemplo de código a seguir é o `Math` serviço Web XML, da qual a classe de proxy anterior foi criada.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> não é o valor retornado do método <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />.</exception>
        <exception cref="T:System.Web.Services.Protocols.SoapException">A solicitação atingiu o computador do servidor, mas não foi processada com êxito.</exception>
        <exception cref="T:System.InvalidOperationException">A solicitação não era válida para o estado atual do objeto.</exception>
        <exception cref="T:System.Net.WebException">Ocorreu um erro ao acessar a rede.</exception>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
      </Docs>
    </Member>
    <Member MemberName="GetReaderForMessage">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.XmlReader GetReaderForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.XmlReader GetReaderForMessage(class System.Web.Services.Protocols.SoapClientMessage message, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetReaderForMessage (message As SoapClientMessage, bufferSize As Integer) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::XmlReader ^ GetReaderForMessage(System::Web::Services::Protocols::SoapClientMessage ^ message, int bufferSize);" />
      <MemberSignature Language="F#" Value="abstract member GetReaderForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlReader&#xA;override this.GetReaderForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlReader" Usage="soapHttpClientProtocol.GetReaderForMessage (message, bufferSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Web.Services.Protocols.SoapClientMessage" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Um <see cref="T:System.Web.Services.Protocols.SoapClientMessage" /> que fornece o <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> para inicializar o <see cref="T:System.Xml.XmlReader" />.</param>
        <param name="bufferSize">O tamanho do buffer inicial do <see cref="T:System.IO.StreamReader" /> usado pelo <see cref="T:System.Xml.XmlReader" />.</param>
        <summary>Retorna um <see cref="T:System.Xml.XmlReader" /> inicializado com a propriedade <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> do parâmetro <see cref="T:System.Web.Services.Protocols.SoapClientMessage" />.</summary>
        <returns>Um <see cref="T:System.Xml.XmlReader" /> inicializado com a propriedade <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> do parâmetro <paramref name="message" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWebRequest">
      <MemberSignature Language="C#" Value="protected override System.Net.WebRequest GetWebRequest (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Net.WebRequest GetWebRequest(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Net::WebRequest ^ GetWebRequest(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="override this.GetWebRequest : Uri -&gt; System.Net.WebRequest" Usage="soapHttpClientProtocol.GetWebRequest uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">O <see cref="T:System.Uri" /> a ser usado durante a criação do <see cref="T:System.Net.WebRequest" />.</param>
        <summary>Cria um <see cref="T:System.Net.WebRequest" /> para o <paramref name="uri" /> especificado.</summary>
        <returns>O <see cref="T:System.Net.WebRequest" /> para o URI especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método pode ser substituído para personalizar o <xref:System.Net.WebRequest> antes do XML Web service é feita. Por exemplo, você poderia adicionar um cabeçalho personalizado para a solicitação.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">O parâmetro <paramref name="uri" /> é <see langword="null" />.</exception>
        <altmember cref="T:System.Net.WebRequest" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
        <altmember cref="M:System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(System.Net.WebRequest)" />
        <altmember cref="T:System.Net.HttpWebRequest" />
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
    <Member MemberName="GetWriterForMessage">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.XmlWriter GetWriterForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.XmlWriter GetWriterForMessage(class System.Web.Services.Protocols.SoapClientMessage message, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetWriterForMessage (message As SoapClientMessage, bufferSize As Integer) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::XmlWriter ^ GetWriterForMessage(System::Web::Services::Protocols::SoapClientMessage ^ message, int bufferSize);" />
      <MemberSignature Language="F#" Value="abstract member GetWriterForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlWriter&#xA;override this.GetWriterForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlWriter" Usage="soapHttpClientProtocol.GetWriterForMessage (message, bufferSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Web.Services.Protocols.SoapClientMessage" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Um <see cref="T:System.Web.Services.Protocols.SoapClientMessage" /> que fornece o <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> para inicializar o <see cref="T:System.Xml.XmlWriter" />.</param>
        <param name="bufferSize">O tamanho do buffer inicial do <see cref="T:System.IO.StreamWriter" /> usado pelo <see cref="T:System.Xml.XmlWriter" />.</param>
        <summary>Retorna um <see cref="T:System.Xml.XmlWriter" /> inicializado com a propriedade <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> do parâmetro <see cref="T:System.Web.Services.Protocols.SoapClientMessage" />.</summary>
        <returns>Um <see cref="T:System.Xml.XmlWriter" /> inicializado com a propriedade <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> do parâmetro <paramref name="message" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="protected object[] Invoke (string methodName, object[] parameters);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] Invoke(string methodName, object[] parameters) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Protected Function Invoke (methodName As String, parameters As Object()) As Object()" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Object ^&gt; ^ Invoke(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="C#" Value="protected object[] Invoke (string method_name, object[] parameters);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] Invoke(string method_name, object[] parameters) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])" FrameworkAlternate="xamarinandroid-7.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinios-10.8;xamarinmac-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Protected Function Invoke (method_name As String, parameters As Object()) As Object()" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Object ^&gt; ^ Invoke(System::String ^ method_name, cli::array &lt;System::Object ^&gt; ^ parameters);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.Invoke : string * obj[] -&gt; obj[]" Usage="soapHttpClientProtocol.Invoke (method_name, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
        <Parameter Name="method_name" Type="System.String" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameters" Type="System.Object[]" Index="1" />
      </Parameters>
      <Docs>
        <param name="methodName">O nome do método de serviço Web XML.</param>
        <param name="method_name">O nome do método de serviço Web XML.</param>
        <param name="parameters">Uma matriz de objetos que contém os parâmetros a serem passados para o serviço Web XML. A ordem dos valores na matriz corresponde à ordem dos parâmetros no método de chamada da classe derivada.</param>
        <summary>Invoca um método de serviço Web XML usando de forma síncrona usando SOAP.</summary>
        <returns>Uma matriz de objetos que contém o valor retornado e quaisquer parâmetros <see langword="reference" /> ou <see langword="out" /> do método de classe derivada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, você não chamar o <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> método diretamente, a menos que você está criando sua própria classe de proxy para um serviço Web XML.  
  
 Uma classe de proxy gerada pela ferramenta Web Services Description Language (Wsdl.exe) para um serviço Web XML expõe os métodos de serviço Web XML como nomes de fora a classe de proxy. As chamadas de classe de proxy a <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> método para invocar uma chamada de método de serviço Web XML. Por exemplo, se um serviço Web XML expõe um método de serviço Web XML denominado `Add`, a classe de proxy também contém um método chamado `Add`. Dentro do código para o `Add` método na classe proxy, é feita uma chamada síncrona para o método de serviço Web XML por meio de <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> método e, em seguida, os resultados são colocados no tipo de retorno esperado para `Add`.  
  
 O `methodName` parâmetro é usado para localizar os atributos personalizados que podem ter sido adicionados ao método, como <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>. <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> Fornece informações adicionais sobre o método derivado que é necessário para o protocolo SOAP.  
  
   
  
## Examples  
 O exemplo de código a seguir é uma classe de proxy gerada pelo Wsdl.exe para o `Math` serviço Web XML. Dentro de `Add` método da classe de proxy, o <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> está chamando o método o `Add` método de serviço Web XML.  
  
 [!code-cpp[Classic SoapHttpClientProtocol.Invoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol.Invoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol.Invoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/VB/source.vb#1)]  
  
 O exemplo de código a seguir é o `Math` serviço Web XML, da qual a classe de proxy anterior foi criada.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Services.Protocols.SoapException">A solicitação atingiu o computador do servidor, mas não foi processada com êxito.</exception>
        <exception cref="T:System.InvalidOperationException">A solicitação não era válida para o estado atual do objeto.</exception>
        <exception cref="T:System.Net.WebException">Ocorreu um erro ao acessar a rede.</exception>
        <altmember cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Chama o método especificado de forma assíncrona.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, object[] parameters, class System.Threading.SendOrPostCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeAsync (methodName As String, parameters As Object(), callback As SendOrPostCallback)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeAsync(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters, System::Threading::SendOrPostCallback ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : string * obj[] * System.Threading.SendOrPostCallback -&gt; unit" Usage="soapHttpClientProtocol.InvokeAsync (methodName, parameters, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" />
      </Parameters>
      <Docs>
        <param name="methodName">O nome do método que será invocado.</param>
        <param name="parameters">Os parâmetros que serão passados para o método.</param>
        <param name="callback">O delegado é chamado quando a chamada do método é concluída.</param>
        <summary>Chama o método especificado de forma assíncrona.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, object[] parameters, class System.Threading.SendOrPostCallback callback, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeAsync (methodName As String, parameters As Object(), callback As SendOrPostCallback, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeAsync(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters, System::Threading::SendOrPostCallback ^ callback, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : string * obj[] * System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="soapHttpClientProtocol.InvokeAsync (methodName, parameters, callback, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">O nome do método que será invocado.</param>
        <param name="parameters">Os parâmetros que serão passados para o método.</param>
        <param name="callback">O delegado é chamado quando a chamada do método é concluída.</param>
        <param name="userState">Um objeto usado para passar informações de estado no delegado <paramref name="callback" />.</param>
        <summary>Chama o método especificado de forma assíncrona.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SoapVersion">
      <MemberSignature Language="C#" Value="public System.Web.Services.Protocols.SoapProtocolVersion SoapVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Services.Protocols.SoapProtocolVersion SoapVersion" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion" />
      <MemberSignature Language="VB.NET" Value="Public Property SoapVersion As SoapProtocolVersion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Services::Protocols::SoapProtocolVersion SoapVersion { System::Web::Services::Protocols::SoapProtocolVersion get(); void set(System::Web::Services::Protocols::SoapProtocolVersion value); };" />
      <MemberSignature Language="F#" Value="member this.SoapVersion : System.Web.Services.Protocols.SoapProtocolVersion with get, set" Usage="System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Services.Protocols.SoapProtocolVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a versão do protocolo SOAP usada para criar a solicitação SOAP para o serviço Web XML.</summary>
        <value>Um dos valores de <see cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />. O padrão é <see cref="F:System.Web.Services.Protocols.SoapProtocolVersion.Soap11" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A> propriedade é definida na classe proxy gerada pela ferramenta Web Services Description Language (Wsdl.exe) para <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap11> por padrão quando um documento WSDL para um serviço Web XML dá suporte a SOAP versão 1.1. No entanto, quando um serviço Web XML só dá suporte ao SOAP 1.2, Wsdl.exe conjuntos a <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A> propriedade para <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap12>. Para escolher a versão do protocolo SOAP ao gerar a classe de proxy com Wsdl.exe, use o `/protocol` alternar com o `SOAP` ou `SOAP12` configurações para definir a <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A> propriedade a ser <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap11> e <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap12>, respectivamente .  
  
   
  
## Examples  
 O exemplo de código a seguir define a versão do protocolo usado para se comunicar com um serviço Web XML para SOAP 1.2.  
  
 [!code-aspx-csharp[SoapHttpClientProtocol.SoapVersion#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapHttpClientProtocol.SoapVersion/CS/serverusageclientcs.aspx#1)]
 [!code-aspx-vb[SoapHttpClientProtocol.SoapVersion#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapHttpClientProtocol.SoapVersion/VB/serverusageclientvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />
        <altmember cref="P:System.Web.HttpContext.Items" />
      </Docs>
    </Member>
  </Members>
</Type>