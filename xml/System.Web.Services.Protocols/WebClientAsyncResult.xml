<Type Name="WebClientAsyncResult" FullName="System.Web.Services.Protocols.WebClientAsyncResult">
  <TypeSignature Language="C#" Value="public class WebClientAsyncResult : IAsyncResult" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebClientAsyncResult extends System.Object implements class System.IAsyncResult" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.WebClientAsyncResult" />
  <TypeSignature Language="VB.NET" Value="Public Class WebClientAsyncResult&#xA;Implements IAsyncResult" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebClientAsyncResult : IAsyncResult" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncResult</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="1d36b-101">Fornece uma implementação de <see cref="T:System.IAsyncResult" /> a ser usada pelos proxies de serviço Web XML para implementar o padrão de método assíncrono padrão.</span><span class="sxs-lookup"><span data-stu-id="1d36b-101">Provides an implementation of <see cref="T:System.IAsyncResult" /> for use by XML Web service proxies to implement the standard asynchronous method pattern.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d36b-102">Quando você chama o `BeginMyMethodName` método, onde `MyMethodName` é uma versão síncrona do método em uma classe de proxy de serviço da Web em XML, uma instância do <xref:System.Web.Services.Protocols.WebClientAsyncResult> será retornado.</span><span class="sxs-lookup"><span data-stu-id="1d36b-102">When you call the `BeginMyMethodName` method, where `MyMethodName` is the synchronous version of the method, on an XML Web service proxy class, an instance of the <xref:System.Web.Services.Protocols.WebClientAsyncResult> is returned.</span></span> <span data-ttu-id="1d36b-103">Seguindo o padrão de design assíncronos padrão, essa instância do <xref:System.Web.Services.Protocols.WebClientAsyncResult> devem ser passadas posteriormente para `EndMyMethodName` para completar a chamada de método assíncrono.</span><span class="sxs-lookup"><span data-stu-id="1d36b-103">Following the standard asynchronous design pattern, that instance of <xref:System.Web.Services.Protocols.WebClientAsyncResult> must later be passed to `EndMyMethodName` to complete the asynchronous method call.</span></span>  
  
 <span data-ttu-id="1d36b-104">Para obter detalhes sobre chamando os XML Web services de forma assíncrona, consulte [ &#91; \<topic://cpconInvokingWebServicesAsynchronously >&#93;](http://msdn.microsoft.com/library/f9e26a43-063a-440a-8c73-a02f2ccf3ea0).</span><span class="sxs-lookup"><span data-stu-id="1d36b-104">For details on calling XML Web services asynchronously, see [&#91;\<topic://cpconInvokingWebServicesAsynchronously>&#93;](http://msdn.microsoft.com/library/f9e26a43-063a-440a-8c73-a02f2ccf3ea0).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IAsyncResult" />
  </Docs>
  <Members>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.WebClientAsyncResult.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1d36b-105">Cancela uma solicitação de serviço Web XML assíncrona.</span><span class="sxs-lookup"><span data-stu-id="1d36b-105">Cancels an asynchronous XML Web service request.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1d36b-106">A solicitação de serviço Web XML será cancelada se o transporte subjacente oferece suporte a <xref:System.Net.WebRequest.Abort%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="1d36b-106">The XML Web service request is canceled if the underlying transport supports the <xref:System.Net.WebRequest.Abort%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="1d36b-107">Se correspondente `End` método é chamado subsequentemente após a <xref:System.Web.Services.Protocols.WebClientAsyncResult.Abort%2A> método, uma <xref:System.Net.WebException> for lançada, definindo o <xref:System.Net.WebException.Status%2A> propriedade <xref:System.Net.WebExceptionStatus.RequestCanceled>.</span><span class="sxs-lookup"><span data-stu-id="1d36b-107">If the corresponding `End` method is subsequently called after the <xref:System.Web.Services.Protocols.WebClientAsyncResult.Abort%2A> method, a <xref:System.Net.WebException> is thrown, setting the <xref:System.Net.WebException.Status%2A> property to <xref:System.Net.WebExceptionStatus.RequestCanceled>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.WebClientAsyncResult.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1d36b-108">Obtém o objeto fornecido no último parâmetro para a chamada assíncrona do método <see langword="Begin" />.</span><span class="sxs-lookup"><span data-stu-id="1d36b-108">Gets the object provided in the last parameter to the <see langword="Begin" /> method asynchronous call.</span></span></summary>
        <value><span data-ttu-id="1d36b-109">O <see cref="T:System.Object" /> fornecido no último parâmetro para o <see langword="Begin" /> chamada de método.</span><span class="sxs-lookup"><span data-stu-id="1d36b-109">The <see cref="T:System.Object" /> provided in the last parameter to the <see langword="Begin" /> method call.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.IAsyncResult.AsyncState" />
      </Docs>
    </Member>
    <Member MemberName="AsyncWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncWaitHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1d36b-110">Obtém um <see cref="T:System.Threading.WaitHandle" /> que é usado para aguardar a conclusão de uma operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="1d36b-110">Gets a <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.</span></span></summary>
        <value><span data-ttu-id="1d36b-111">Um <see cref="T:System.Threading.WaitHandle" /> que é usado para aguardar a conclusão de uma operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="1d36b-111">A <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d36b-112">O <xref:System.Threading.WaitHandle> podem ser usados para executar um <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, ou <xref:System.Threading.WaitHandle.WaitAll%2A> de espera para concluir a chamada assíncrona.</span><span class="sxs-lookup"><span data-stu-id="1d36b-112">The <xref:System.Threading.WaitHandle> can be used to perform a <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A> to wait for the asynchronous call to complete.</span></span>  
  
 <span data-ttu-id="1d36b-113">Para obter mais detalhes, consulte <xref:System.IAsyncResult.AsyncWaitHandle%2A>.</span><span class="sxs-lookup"><span data-stu-id="1d36b-113">For more details, see <xref:System.IAsyncResult.AsyncWaitHandle%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IAsyncResult.AsyncWaitHandle" />
      </Docs>
    </Member>
    <Member MemberName="CompletedSynchronously">
      <MemberSignature Language="C#" Value="public bool CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompletedSynchronously As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CompletedSynchronously { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.CompletedSynchronously</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1d36b-114">Obtém um valor que indica se a chamada de Begin foi concluída de forma síncrona.</span><span class="sxs-lookup"><span data-stu-id="1d36b-114">Gets a value indicating whether the Begin call completed synchronously.</span></span></summary>
        <value>
          <span data-ttu-id="1d36b-115"><see langword="true" /> Se a chamada de Begin concluída de forma síncrona; Caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1d36b-115"><see langword="true" /> if the Begin call completed synchronously; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d36b-116">Se <xref:System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously%2A> é definido como `true` dentro de <xref:System.AsyncCallback> representante, é provável que o thread de chamada <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> é o thread atual.</span><span class="sxs-lookup"><span data-stu-id="1d36b-116">If <xref:System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously%2A> is set to `true` within the <xref:System.AsyncCallback> delegate, it is probable that the thread that called <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> is the current thread.</span></span> <span data-ttu-id="1d36b-117">Nesse caso, você deve ter cuidado ao fazer Begin assíncrono outra chamada do método de retorno de chamada, pois isso poderá causar a pilha cresça sem associados se as chamadas continuam concluído de forma síncrona.</span><span class="sxs-lookup"><span data-stu-id="1d36b-117">In this case, you should be careful about making another asynchronous Begin call from the callback method, since it can cause the stack to grow without bound if the calls continue to complete synchronously.</span></span> <span data-ttu-id="1d36b-118">Em vez disso, a chamada deve ser concluída no site de chamada, fora do método de retorno de chamada.</span><span class="sxs-lookup"><span data-stu-id="1d36b-118">Instead, the call should be completed at the original call site, outside the callback method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.IsCompleted</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1d36b-119">Obtém um valor que indica se a solicitação de serviço Web XML assíncrona foi concluída.</span><span class="sxs-lookup"><span data-stu-id="1d36b-119">Gets a value indicating whether the asynchronous XML Web service request has completed.</span></span></summary>
        <value>
          <span data-ttu-id="1d36b-120"><see langword="true" /> Se a solicitação de serviço Web XML assíncrona foi concluída; Caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1d36b-120"><see langword="true" /> if the asynchronous XML Web service request has completed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>