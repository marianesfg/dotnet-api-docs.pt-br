<Type Name="IOperationBehavior" FullName="System.ServiceModel.Description.IOperationBehavior">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="57774ae3684699c4a3fad8b5816601ef11c2fdcc" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37617211" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IOperationBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IOperationBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IOperationBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IOperationBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IOperationBehavior" />
  <TypeSignature Language="F#" Value="type IOperationBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Implementa métodos que podem ser usados para estender o comportamento de tempo de execução de uma operação em um serviço ou aplicativo cliente.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementar o <xref:System.ServiceModel.Description.IOperationBehavior> interface para modificar, examinar ou estender algum aspecto da execução de toda a operação no nível do aplicativo para aplicativos cliente ou serviço.  
  
-   Use o <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> método para passar dados personalizados em tempo de execução para habilitar as associações dar suporte ao comportamento personalizado.  
  
-   Use o <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> método para modificar, examinar ou inserir extensões ao dispatcher de um cliente em um aplicativo cliente.  
  
-   Use o <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> método para modificar, examinar ou inserir extensões para toda a operação de execução em um aplicativo de serviço.  
  
-   Use o <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> método para confirmar que um <xref:System.ServiceModel.Description.OperationDescription> atende aos requisitos específicos. Isso pode ser usado para garantir que uma operação tem uma definição de configuração determinados habilitada, dá suporte a um determinado recurso e outros requisitos.  
  
 <xref:System.ServiceModel.Description.IOperationBehavior> objetos podem fazer uso de qualquer um desses métodos, mas geralmente somente uma é importante; Nesses casos, podem retornar métodos não utilizados, não realizar nenhuma ação.  
  
> [!NOTE]
>  Todos os <xref:System.ServiceModel.Description.IOperationBehavior> métodos passam um <xref:System.ServiceModel.Description.OperationDescription> objeto como um parâmetro. Esse parâmetro é apenas; para exame Se você modificar o <xref:System.ServiceModel.Description.OperationDescription> objeto o comportamento de execução é indefinido.  
  
 <xref:System.ServiceModel.Description.IOperationBehavior> objetos são normalmente usados para acessar as várias propriedades do <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> objeto em um aplicativo de serviço e o <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> objeto em um aplicativo cliente.  
  
 Normalmente, as revisões primeiro os pontos de extensibilidade para determinar qual opção de personalização do desenvolvedor adequado para o cenário de aplicativo e, em seguida, implementa a personalização no escopo apropriado. Por exemplo, <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> objetos podem inserir as personalizações para todas as mensagens em um serviço inteiro e <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> objetos podem inserir as personalizações para todas as mensagens em um contrato específico e assim por diante. Para obter uma descrição das várias propriedades e personalizações disponíveis, consulte [estendendo ServiceHost e a camada de modelo de serviço](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).  
  
 Depois que uma personalização foi decidida (e a interface de personalização implementada, se necessário) e o <xref:System.ServiceModel.Description.IOperationBehavior> é o escopo apropriado de personalização, a personalização deve ser inserida no tempo de execução do Windows Communication Foundation (WCF) implementando <xref:System.ServiceModel.Description.IOperationBehavior> e adicionando o comportamento da operação no tempo de execução.  
  
 Há duas maneiras de adicionar o <xref:System.ServiceModel.Description.IOperationBehavior> no tempo de execução:  
  
-   Adicionar programaticamente o comportamento da operação personalizado para o <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> propriedade antes da abertura do host de serviço (em um aplicativo de serviço) ou a fábrica de canais (em um aplicativo de cliente).  
  
-   Adicione o comportamento usando um atributo personalizado.  
  
 Para executar a tarefa de personalização de serviço para o qual ele destina-se, o <xref:System.ServiceModel.Description.IOperationBehavior> objeto deve ser adicionado para o <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> propriedade antes da construção do tempo de execução do serviço, que ocorre quando <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> método é chamado em <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>. Para executar uma tarefa de personalização do cliente, o <xref:System.ServiceModel.Description.IOperationBehavior> objeto deve ser adicionado para o <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> propriedade antes de chamar o <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> método ou o <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> método em <xref:System.ServiceModel.ChannelFactory%601>.  
  
 Embora o comportamento da operação é projetado para facilitar o acesso ao tempo de execução no escopo de uma operação individual, você pode acessar o tempo de execução em um escopo mais amplo, acessando o objeto de tempo de execução do pai.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra uma implementação de <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType> que grava no console quando o Inspetor é invocado em uma operação. Essa personalização só pode ser anexada para o <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> ou <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> e, portanto, geralmente é inserido por um comportamento de operação.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 O exemplo de código a seguir mostra como o comportamento da operação anexa o Inspetor de parâmetro para o tempo de execução.  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.OperationDescription * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iOperationBehavior.AddBindingParameters (operationDescription, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="operationDescription">A operação sendo examinada. Use apenas para exame. Se a descrição da operação for modificada, os resultados serão indefinidos.</param>
        <param name="bindingParameters">A coleção de objetos que os elementos de associação necessitam para oferecer suporte ao comportamento.</param>
        <summary>Implementar para passar dados em tempo de execução para associações a fim de dar suporte ao comportamento personalizado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementar o <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> método para fornecer elementos de ligação com os objetos adicionais, eles devem ser compatíveis com o comportamento da operação. Quando os parâmetros de associação são adicionados aqui, a associação pode localizar e processar esses objetos quando o ouvinte de canais ou fábrica de canais é criada. Normalmente, você implementa o <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> método para passar informações sobre a operação para um elemento de associação personalizado para que ele possa criar um suporte de canal corretamente. Se nenhuma modificação forem necessárias não retornam nenhum valor.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Dispatcher.ClientOperation clientOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Dispatcher.ClientOperation clientOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Dispatcher::ClientOperation ^ clientOperation);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.OperationDescription * System.ServiceModel.Dispatcher.ClientOperation -&gt; unit" Usage="iOperationBehavior.ApplyClientBehavior (operationDescription, clientOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="clientOperation" Type="System.ServiceModel.Dispatcher.ClientOperation" />
      </Parameters>
      <Docs>
        <param name="operationDescription">A operação sendo examinada. Use apenas para exame. Se a descrição da operação for modificada, os resultados serão indefinidos.</param>
        <param name="clientOperation">O objeto de tempo de execução que expõe as propriedades de personalização para a operação descrita por <c>operationDescription</c>.</param>
        <summary>Implementa uma modificação ou extensão do cliente em toda uma operação.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementar o <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> método para exibir, modificar ou adicionar uma extensão personalizada para o tempo de execução do cliente em todas as mensagens usadas com uma operação específica. Para obter detalhes sobre quais personalizações você pode fazer com um objeto de tempo de execução do cliente, consulte <xref:System.ServiceModel.Dispatcher.ClientRuntime> e <xref:System.ServiceModel.Dispatcher.ClientOperation>.  
  
 É recomendável que o <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> método throw um <xref:System.NotImplementedException> se o comportamento é destinado apenas para uso em um aplicativo de serviço.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra uma implementação de <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType> que grava no console quando o Inspetor é invocado em uma operação. Essa personalização só pode ser anexada para o <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> ou <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> e, portanto, geralmente é inserido por um comportamento de operação.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 O exemplo de código a seguir mostra como o comportamento da operação anexa o Inspetor de parâmetro para o tempo de execução.  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Dispatcher.DispatchOperation dispatchOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Dispatcher.DispatchOperation dispatchOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Dispatcher::DispatchOperation ^ dispatchOperation);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.OperationDescription * System.ServiceModel.Dispatcher.DispatchOperation -&gt; unit" Usage="iOperationBehavior.ApplyDispatchBehavior (operationDescription, dispatchOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="dispatchOperation" Type="System.ServiceModel.Dispatcher.DispatchOperation" />
      </Parameters>
      <Docs>
        <param name="operationDescription">A operação sendo examinada. Use apenas para exame. Se a descrição da operação for modificada, os resultados serão indefinidos.</param>
        <param name="dispatchOperation">O objeto de tempo de execução que expõe as propriedades de personalização para a operação descrita por <c>operationDescription</c>.</param>
        <summary>Implementa uma modificação ou extensão do serviço em uma operação.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementar o <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> método para exibir, modificar ou estender o tempo de execução do serviço em todas as mensagens ou para uma operação específica. Para obter detalhes sobre quais personalizações você pode fazer em um aplicativo de serviço, consulte <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> e <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>.  
  
 É recomendável que o <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> método throw um <xref:System.NotImplementedException> exceção se o comportamento é destinado apenas para uso em um aplicativo cliente.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra uma implementação de <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType> que grava no console quando o Inspetor é invocado em uma operação. Essa personalização só pode ser anexada para o <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> ou <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> e, portanto, geralmente é inserido por um comportamento de operação.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 O exemplo de código a seguir mostra como o comportamento da operação anexa o Inspetor de parâmetro para o tempo de execução.  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.OperationDescription operationDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.OperationDescription operationDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.Validate(System.ServiceModel.Description.OperationDescription)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::OperationDescription ^ operationDescription);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.OperationDescription -&gt; unit" Usage="iOperationBehavior.Validate operationDescription" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
      </Parameters>
      <Docs>
        <param name="operationDescription">A operação sendo examinada. Use apenas para exame. Se a descrição da operação for modificada, os resultados serão indefinidos.</param>
        <summary>Implemente para confirmar que a operação atende a alguns critérios desejados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementar o <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> método para examinar a estrutura para confirmar qualquer conjunto de critérios. Não é necessário executar as personalizações no <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> ou <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> para fazer uso desse método. Se a operação de passar na validação, return; Caso contrário, lance uma exceção.  
  
 Por exemplo, o <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> método pode usar para garantir que uma operação é autorizada.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>