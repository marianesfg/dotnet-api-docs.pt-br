<Type Name="IPolicyImportExtension" FullName="System.ServiceModel.Description.IPolicyImportExtension">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2dafea050ab8f58e92bc123d4611ca1624cfae00" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37456507" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IPolicyImportExtension" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPolicyImportExtension" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IPolicyImportExtension" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPolicyImportExtension" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPolicyImportExtension" />
  <TypeSignature Language="F#" Value="type IPolicyImportExtension = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Define um método para objetos que importam declarações de políticas personalizadas sobre associações.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementar o <xref:System.ServiceModel.Description.IPolicyImportExtension> interface para pesquisar informações de WSDL expostas por um ponto de extremidade específico para declarações de política personalizadas sobre recursos de ponto de extremidade ou seus requisitos. Normalmente, um importador de política procura uma declaração específica e insere um elemento de associação, configura um elemento de associação ou modifica o contrato para dar suporte os requisitos da asserção.  
  
 Ao contrário de sua contraparte <xref:System.ServiceModel.Description.IPolicyExportExtension>, <xref:System.ServiceModel.Description.IPolicyImportExtension> não exigir a implementação por uma <xref:System.ServiceModel.Channels.BindingElement> do objeto; você pode carregá-lo usando a seção de configuração de cliente mostrada na seção exemplos ou programaticamente, adicionando-o para o <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=nameWithType> construtor.  
  
 Windows Communication Foundation (WCF) passa os dois objetos para o <xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A> método, uma <xref:System.ServiceModel.Description.MetadataImporter> e um <xref:System.ServiceModel.Description.PolicyConversionContext>. Normalmente o <xref:System.ServiceModel.Description.PolicyConversionContext> objeto já contém as declarações de política para cada escopo de associação.  
  
 Um <xref:System.ServiceModel.Description.IPolicyImportExtension> implementação executa as seguintes etapas:  
  
1.  Localiza a declaração de política personalizada para o qual ele é responsável, chamando o <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A>, ou <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> métodos, dependendo do escopo.  
  
2.  Remove a declaração de política da coleção de asserção. O <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> método localiza e retorna e remove a asserção em uma única etapa.  
  
3.  Modificar a pilha de associação ou o contrato adicionando um personalizado necessário <xref:System.ServiceModel.Channels.BindingElement> para o <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> propriedade ou modificando o <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=nameWithType> propriedade.  
  
 Etapa 2 é importante. Depois de tem sido chamados todos os importadores de políticas, WCF verifica a existência de quaisquer declarações de política que permanecem. Se houver um, o WCF pressupõe que a importação de política não foi bem-sucedida e não importa a ligação associada.  
  
> [!IMPORTANT]
>  Um fornecedor de metadados mal-intencionado pode tentar enviar o XML mal formado como parte dos metadados em uma tentativa de explorar um importador de política. É altamente recomendável essa política personalizada importadores ser robusto para todas as formas de XML que pode ser passado para ele.  
  
 Personalizado <xref:System.ServiceModel.Description.MetadataImporter> implementações devem implementar seus próprios <xref:System.ServiceModel.Description.PolicyConversionContext> anexado de objeto para extrair as declarações de política para o formato de metadados personalizados.  
  
 Se você deseja exportar e importar elementos WSDL personalizados que não são declarações de política, consulte <xref:System.ServiceModel.Description.IWsdlExportExtension?displayProperty=nameWithType> e <xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Você pode usar importadores de políticas personalizadas e Exportadores com o [ferramenta de utilitário de metadados ServiceModel (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) usando os mesmos elementos de configuração em um arquivo de configuração e o `/svcutilConfig:<configFile>` opção.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra o uso do <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> método para localizar, volte e remova a declaração em uma única etapa.  
  
 [!code-csharp[CustomPolicySample#1](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/policyimporter.cs#1)]
 [!code-vb[CustomPolicySample#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/policyimporter.vb#1)]  
  
 O exemplo de código a seguir mostra o cliente do arquivo de configuração de aplicativo para carregar o importador de política personalizada quando o <xref:System.ServiceModel.Description.MetadataResolver?displayProperty=nameWithType> é invocado.  
  
 [!code-xml[CustomPolicySample#7](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.exe.config#7)]   
  
 O exemplo de código a seguir mostra o uso do <xref:System.ServiceModel.Description.MetadataResolver> para baixar e resolver os metadados em objetos de descrição.  
  
 [!code-csharp[CustomPolicySample#10](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.cs#10)]
 [!code-vb[CustomPolicySample#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/client.vb#10)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ImportPolicy">
      <MemberSignature Language="C#" Value="public void ImportPolicy (System.ServiceModel.Description.MetadataImporter importer, System.ServiceModel.Description.PolicyConversionContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ImportPolicy(class System.ServiceModel.Description.MetadataImporter importer, class System.ServiceModel.Description.PolicyConversionContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ImportPolicy (importer As MetadataImporter, context As PolicyConversionContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ImportPolicy(System::ServiceModel::Description::MetadataImporter ^ importer, System::ServiceModel::Description::PolicyConversionContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ImportPolicy : System.ServiceModel.Description.MetadataImporter * System.ServiceModel.Description.PolicyConversionContext -&gt; unit" Usage="iPolicyImportExtension.ImportPolicy (importer, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importer" Type="System.ServiceModel.Description.MetadataImporter" />
        <Parameter Name="context" Type="System.ServiceModel.Description.PolicyConversionContext" />
      </Parameters>
      <Docs>
        <param name="importer">O objeto <see cref="T:System.ServiceModel.Description.MetadataImporter" /> em uso.</param>
        <param name="context">O <see cref="T:System.ServiceModel.Description.PolicyConversionContext" /> que contém as declarações de política que podem ser importadas e as coleções de elementos de associação às quais os elementos de associação da implementação podem ser adicionados.</param>
        <summary>Define um método que pode importar declarações de política personalizadas e adicionar elementos de associação de implementação.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementar o `ImportPolicy` método obter declarações de política e executar alguma modificação do contrato importado ou associação para dar suporte a asserção. Normalmente, um importador de política responde ao encontrar uma declaração de política personalizada configurando ou inserir um elemento de associação para a associação que está sendo importada.  
  
 Windows Communication Foundation (WCF) passa os dois objetos para o <xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A> método, uma <xref:System.ServiceModel.Description.MetadataImporter> e um <xref:System.ServiceModel.Description.PolicyConversionContext>. Normalmente o <xref:System.ServiceModel.Description.PolicyConversionContext> objeto já contém as declarações de política para cada escopo de associação.  
  
 Um <xref:System.ServiceModel.Description.IPolicyImportExtension> implementação executa as seguintes etapas:  
  
1.  Localiza a declaração de política personalizada para o qual ele é responsável, chamando o <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A>, ou <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> métodos, dependendo do escopo.  
  
2.  Remove a declaração de política da coleção de asserção. O <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> método localiza e retorna e remove a asserção em uma única etapa.  
  
3.  Modifica a pilha de associação ou o contrato adicionando um personalizado necessário <xref:System.ServiceModel.Channels.BindingElement> para o <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> propriedade ou modificando o <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=nameWithType> propriedade.  
  
 Etapa 2 é importante. Depois de tem sido chamados todos os importadores de políticas, WCF verifica a existência de quaisquer declarações de política que permanecem. Se houver um, o WCF pressupõe que a importação de política não foi bem-sucedida e não importa a ligação associada.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra o uso do <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> método para localizar, volte e remova a declaração em uma única etapa.  
  
 [!code-csharp[CustomPolicySample#1](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/policyimporter.cs#1)]
 [!code-vb[CustomPolicySample#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/policyimporter.vb#1)]  
  
 O exemplo de código a seguir mostra o cliente do arquivo de configuração de aplicativo para carregar o importador de política personalizada quando o <xref:System.ServiceModel.Description.MetadataResolver?displayProperty=nameWithType> é invocado.  
  
 [!code-xml[CustomPolicySample#7](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.exe.config#7)]   
  
 O exemplo de código a seguir mostra o uso do <xref:System.ServiceModel.Description.MetadataResolver> para baixar e resolver os metadados em objetos de descrição.  
  
 [!code-csharp[CustomPolicySample#10](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.cs#10)]
 [!code-vb[CustomPolicySample#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/client.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>