<Type Name="BindingListCollectionView" FullName="System.Windows.Data.BindingListCollectionView">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4e15566b9b94097de2eee76b62ed478805396174" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36364750" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class BindingListCollectionView : System.Windows.Data.CollectionView, System.Collections.IComparer, System.ComponentModel.ICollectionViewLiveShaping, System.ComponentModel.IEditableCollectionView, System.ComponentModel.IItemProperties" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BindingListCollectionView extends System.Windows.Data.CollectionView implements class System.Collections.IComparer, class System.ComponentModel.ICollectionViewLiveShaping, class System.ComponentModel.IEditableCollectionView, class System.ComponentModel.IItemProperties" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Data.BindingListCollectionView" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BindingListCollectionView&#xA;Inherits CollectionView&#xA;Implements ICollectionViewLiveShaping, IComparer, IEditableCollectionView, IItemProperties" />
  <TypeSignature Language="C++ CLI" Value="public ref class BindingListCollectionView sealed : System::Windows::Data::CollectionView, System::Collections::IComparer, System::ComponentModel::ICollectionViewLiveShaping, System::ComponentModel::IEditableCollectionView, System::ComponentModel::IItemProperties" />
  <TypeSignature Language="F#" Value="type BindingListCollectionView = class&#xA;    inherit CollectionView&#xA;    interface IComparer&#xA;    interface IEditableCollectionView&#xA;    interface ICollectionViewLiveShaping&#xA;    interface IItemProperties" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Data.CollectionView</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IComparer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ICollectionViewLiveShaping</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IEditableCollectionView</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IItemProperties</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents the <see cref="T:System.Windows.Data.CollectionView" /> for collections that implement <see cref="T:System.ComponentModel.IBindingList" />, such as Microsoft ActiveX Data Objects (ADO) data views.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Todas as coleções têm um padrão <xref:System.Windows.Data.CollectionView>. Para coleções que implementam <xref:System.ComponentModel.IBindingListView> ou <xref:System.ComponentModel.IBindingList>, a exibição de coleção padrão é <xref:System.Windows.Data.BindingListCollectionView>. Especificamente, <xref:System.ComponentModel.IBindingList> é necessária para <xref:System.Windows.Data.BindingListCollectionView>, e <xref:System.ComponentModel.IBindingListView> é uma interface opcional que dá suporte à filtragem e classificação adicionais.  
  
 Se você tiver vários <xref:System.Windows.Data.BindingListCollectionView> objetos e a fonte subjacente é um `DataTable` ou `DataView`, os objetos de exibição não classificar ou filtrar independentemente. Por exemplo, se você tiver dois <xref:System.Windows.Data.BindingListCollectionView> objetos associados com o mesmo `DataTable` e executar a classificação em um dos modos de exibição, a ordem dos itens em outro modo de exibição pode ser afetada. Isso ocorre porque <xref:System.Windows.Data.BindingListCollectionView> objetos usam subjacente <xref:System.ComponentModel.IBindingList> para classificar e filtrar as funcionalidades.  
  
 Para obter mais informações sobre exibições de coleção, consulte [visão geral de associação de dados](~/docs/framework/wpf/data/data-binding-overview.md).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BindingListCollectionView (System.ComponentModel.IBindingList list);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IBindingList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingListCollectionView.#ctor(System.ComponentModel.IBindingList)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (list As IBindingList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BindingListCollectionView(System::ComponentModel::IBindingList ^ list);" />
      <MemberSignature Language="F#" Value="new System.Windows.Data.BindingListCollectionView : System.ComponentModel.IBindingList -&gt; System.Windows.Data.BindingListCollectionView" Usage="new System.Windows.Data.BindingListCollectionView list" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="list" Type="System.ComponentModel.IBindingList" />
      </Parameters>
      <Docs>
        <param name="list">The underlying <see cref="T:System.ComponentModel.IBindingList" />.</param>
        <summary>Initializes an instance of <see cref="T:System.Windows.Data.BindingListCollectionView" /> over the given list.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddNew">
      <MemberSignature Language="C#" Value="public object AddNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AddNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingListCollectionView.AddNew" />
      <MemberSignature Language="VB.NET" Value="Public Function AddNew () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ AddNew();" />
      <MemberSignature Language="F#" Value="abstract member AddNew : unit -&gt; obj&#xA;override this.AddNew : unit -&gt; obj" Usage="bindingListCollectionView.AddNew " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts an add transaction and returns the pending new item.</summary>
        <returns>The pending new item.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamando <xref:System.Windows.Data.BindingListCollectionView.AddNew%2A> inicia uma transação de adicionar.  Você deve chamar <xref:System.Windows.Data.BindingListCollectionView.CommitNew%2A> ou <xref:System.Windows.Data.BindingListCollectionView.CancelNew%2A> para finalizar a transação de adicionar.  Um novo item sempre aparece na exibição de coleção. Qualquer filtragem, classificação ou agrupamento que é aplicada para o modo de exibição é aplicado para o novo item quando <xref:System.Windows.Data.BindingListCollectionView.CommitNew%2A> é chamado.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.IEditableCollectionView.AddNew" />
      </Docs>
    </Member>
    <Member MemberName="CanAddNew">
      <MemberSignature Language="C#" Value="public bool CanAddNew { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanAddNew" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.CanAddNew" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanAddNew As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanAddNew { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanAddNew : bool" Usage="System.Windows.Data.BindingListCollectionView.CanAddNew" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether a new item can be added to the collection.</summary>
        <value>
          <see langword="true" /> Se um novo item pode ser adicionado à coleção; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Data.BindingListCollectionView> pode criar um novo item da coleção, se não houver uma transação de edição ocorre, se a coleção não é um tamanho fixo e se a coleção não é somente leitura.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.IEditableCollectionView.CanAddNew" />
      </Docs>
    </Member>
    <Member MemberName="CanCancelEdit">
      <MemberSignature Language="C#" Value="public bool CanCancelEdit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanCancelEdit" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.CanCancelEdit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanCancelEdit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanCancelEdit { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanCancelEdit : bool" Usage="System.Windows.Data.BindingListCollectionView.CanCancelEdit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the collection view can discard pending changes and restore the original values of an edited object.</summary>
        <value>
          <see langword="true" /> Se o modo de exibição de coleção pode descartar as alterações pendentes e restaurar os valores originais de um objeto editado. Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Data.BindingListCollectionView.CanCancelEdit%2A> é `true` se o item editado implementa o <xref:System.ComponentModel.IEditableObject?displayProperty=nameWithType> interface. Se <xref:System.Windows.Data.BindingListCollectionView.CanCancelEdit%2A> é `false`, chame <xref:System.Windows.Data.BindingListCollectionView.CancelEdit%2A> para fazer com que a exibição para o estado de edição de saída e fornecer a lógica para reverter as alterações no objeto que foi editado.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.IEditableCollectionView.CanCancelEdit" />
      </Docs>
    </Member>
    <Member MemberName="CancelEdit">
      <MemberSignature Language="C#" Value="public void CancelEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingListCollectionView.CancelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelEdit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CancelEdit();" />
      <MemberSignature Language="F#" Value="abstract member CancelEdit : unit -&gt; unit&#xA;override this.CancelEdit : unit -&gt; unit" Usage="bindingListCollectionView.CancelEdit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ends the edit transaction and, if possible, restores the original value to the item.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Data.BindingListCollectionView.CancelEdit%2A> define <xref:System.Windows.Data.BindingListCollectionView.CurrentEditItem%2A> para `null` e faz com que o modo de exibição de coleção sair do estado de edição.  Se <xref:System.Windows.Data.BindingListCollectionView.CanCancelEdit%2A> é `true`, <xref:System.Windows.Data.BindingListCollectionView.CancelEdit%2A> também restaura os valores originais do objeto editado.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.IEditableCollectionView.CancelEdit" />
      </Docs>
    </Member>
    <Member MemberName="CancelNew">
      <MemberSignature Language="C#" Value="public void CancelNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingListCollectionView.CancelNew" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelNew ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CancelNew();" />
      <MemberSignature Language="F#" Value="abstract member CancelNew : unit -&gt; unit&#xA;override this.CancelNew : unit -&gt; unit" Usage="bindingListCollectionView.CancelNew " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ends the add transaction and discards the pending new item.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.ComponentModel.IEditableCollectionView.CancelNew" />
      </Docs>
    </Member>
    <Member MemberName="CanChangeLiveFiltering">
      <MemberSignature Language="C#" Value="public bool CanChangeLiveFiltering { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanChangeLiveFiltering" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.CanChangeLiveFiltering" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanChangeLiveFiltering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanChangeLiveFiltering { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanChangeLiveFiltering : bool" Usage="System.Windows.Data.BindingListCollectionView.CanChangeLiveFiltering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether this view supports turning filtering data in real time on or off.</summary>
        <value>
          <see langword="false" /> em todos os casos.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanChangeLiveGrouping">
      <MemberSignature Language="C#" Value="public bool CanChangeLiveGrouping { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanChangeLiveGrouping" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.CanChangeLiveGrouping" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanChangeLiveGrouping As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanChangeLiveGrouping { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanChangeLiveGrouping : bool" Usage="System.Windows.Data.BindingListCollectionView.CanChangeLiveGrouping" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether this view supports turning grouping data in real time on or off.</summary>
        <value>
          <see langword="True" /> em todos os casos.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanChangeLiveSorting">
      <MemberSignature Language="C#" Value="public bool CanChangeLiveSorting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanChangeLiveSorting" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.CanChangeLiveSorting" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanChangeLiveSorting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanChangeLiveSorting { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanChangeLiveSorting : bool" Usage="System.Windows.Data.BindingListCollectionView.CanChangeLiveSorting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether this view supports turning sorting data in real time on or off.</summary>
        <value>
          <see langword="false" /> em todos os casos.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanCustomFilter">
      <MemberSignature Language="C#" Value="public bool CanCustomFilter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanCustomFilter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.CanCustomFilter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanCustomFilter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanCustomFilter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanCustomFilter : bool" Usage="System.Windows.Data.BindingListCollectionView.CanCustomFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the view supports custom filtering.</summary>
        <value>
          <see langword="true" /> Se o modo de exibição oferece suporte à filtragem personalizada; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use esta propriedade para testar se o modo de exibição oferece suporte à filtragem personalizado antes de atribuir uma cadeia de caracteres de filtro para <xref:System.Windows.Data.BindingListCollectionView.CustomFilter%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.CollectionView.Filter" />
      </Docs>
    </Member>
    <Member MemberName="CanFilter">
      <MemberSignature Language="C#" Value="public override bool CanFilter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanFilter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.CanFilter" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanFilter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanFilter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanFilter : bool" Usage="System.Windows.Data.BindingListCollectionView.CanFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the view supports callback-based filtering.</summary>
        <value>Essa propriedade sempre retorna <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Data.BindingListCollectionView> não dá suporte a filtragem baseada no retorno de chamada, use <xref:System.Windows.Data.BindingListCollectionView.CustomFilter%2A> em vez disso.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanGroup">
      <MemberSignature Language="C#" Value="public override bool CanGroup { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanGroup" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.CanGroup" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanGroup As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanGroup { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanGroup : bool" Usage="System.Windows.Data.BindingListCollectionView.CanGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the view supports grouping.</summary>
        <value>Para uma instância padrão do <see cref="T:System.Windows.Data.BindingListCollectionView" /> essa propriedade sempre retorna <see langword="true" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRemove">
      <MemberSignature Language="C#" Value="public bool CanRemove { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRemove" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.CanRemove" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanRemove As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanRemove { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRemove : bool" Usage="System.Windows.Data.BindingListCollectionView.CanRemove" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether an item can be removed from the collection.</summary>
        <value>
          <see langword="true" /> Se um item pode ser removido da coleção; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Data.BindingListCollectionView> pode remover um item, se não houver um adicionar ou editar transação ocorrendo e se a coleção não é fixa ou tamanho somente leitura.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.IEditableCollectionView.CanRemove" />
      </Docs>
    </Member>
    <Member MemberName="CanSort">
      <MemberSignature Language="C#" Value="public override bool CanSort { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSort" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.CanSort" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSort As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSort { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSort : bool" Usage="System.Windows.Data.BindingListCollectionView.CanSort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the collection supports sorting.</summary>
        <value>Para uma instância padrão do <see cref="T:System.Windows.Data.BindingListCollectionView" /> essa propriedade sempre retorna <see langword="true" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitEdit">
      <MemberSignature Language="C#" Value="public void CommitEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CommitEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingListCollectionView.CommitEdit" />
      <MemberSignature Language="VB.NET" Value="Public Sub CommitEdit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CommitEdit();" />
      <MemberSignature Language="F#" Value="abstract member CommitEdit : unit -&gt; unit&#xA;override this.CommitEdit : unit -&gt; unit" Usage="bindingListCollectionView.CommitEdit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ends the edit transaction and saves the pending changes.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.ComponentModel.IEditableCollectionView.CommitEdit" />
      </Docs>
    </Member>
    <Member MemberName="CommitNew">
      <MemberSignature Language="C#" Value="public void CommitNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CommitNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingListCollectionView.CommitNew" />
      <MemberSignature Language="VB.NET" Value="Public Sub CommitNew ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CommitNew();" />
      <MemberSignature Language="F#" Value="abstract member CommitNew : unit -&gt; unit&#xA;override this.CommitNew : unit -&gt; unit" Usage="bindingListCollectionView.CommitNew " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ends the add transaction and saves the pending new item.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Qualquer filtragem, classificação ou agrupamento que é aplicada para o <xref:System.Windows.Data.BindingListCollectionView> é aplicada para o novo item quando <xref:System.Windows.Data.BindingListCollectionView.CommitNew%2A> é chamado.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.IEditableCollectionView.CommitNew" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public override bool Contains (object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Contains(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingListCollectionView.Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Contains (item As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Contains(System::Object ^ item);" />
      <MemberSignature Language="F#" Value="override this.Contains : obj -&gt; bool" Usage="bindingListCollectionView.Contains item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">The object to check.</param>
        <summary>Returns a value that indicates whether a given item belongs to the collection view.</summary>
        <returns>
          <see langword="true" /> if the item belongs to the collection view; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não faz nenhuma suposição sobre se o item pertence à coleção subjacente. Se você souber que o item pertence à coleção subjacente, é mais eficiente de chamar <xref:System.Windows.Data.BindingListCollectionView.PassesFilter%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public override int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.Count" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Windows.Data.BindingListCollectionView.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the estimated number of records in the collection.</summary>
        <value>Um dos seguintes: <list type="table"><listheader><term> valor </term><description> significado </description></listheader><item><term> -1 </term><description> não foi possível determinar o Contagem da coleção. Isso pode ser retornado por uma exibição de "virtualização", onde a exibição deliberadamente não conta para todos os itens na coleção porque a exibição está tentando aumentar a eficiência e minimizar a dependência sempre ter toda a coleção disponível.  </description></item><item><term> qualquer outro inteiro </term><description> a contagem da coleção.  </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Observe que esse contador representa a contagem filtrada.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentAddItem">
      <MemberSignature Language="C#" Value="public object CurrentAddItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CurrentAddItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.CurrentAddItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentAddItem As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CurrentAddItem { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentAddItem : obj" Usage="System.Windows.Data.BindingListCollectionView.CurrentAddItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the item that is being added during the current add transaction.</summary>
        <value>O item que está sendo adicionado se <see cref="P:System.Windows.Data.BindingListCollectionView.IsAddingNew" /> é <see langword="true" />; caso contrário, <see langword="null" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.ComponentModel.IEditableCollectionView.CurrentAddItem" />
      </Docs>
    </Member>
    <Member MemberName="CurrentEditItem">
      <MemberSignature Language="C#" Value="public object CurrentEditItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CurrentEditItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.CurrentEditItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentEditItem As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CurrentEditItem { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentEditItem : obj" Usage="System.Windows.Data.BindingListCollectionView.CurrentEditItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the item in the collection that is being edited.</summary>
        <value>O item na coleção que está sendo editado se <see cref="P:System.Windows.Data.ListCollectionView.IsEditingItem" /> é <see langword="true" />; caso contrário, <see langword="null" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.ComponentModel.IEditableCollectionView.CurrentEditItem" />
      </Docs>
    </Member>
    <Member MemberName="CustomFilter">
      <MemberSignature Language="C#" Value="public string CustomFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CustomFilter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.CustomFilter" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomFilter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CustomFilter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CustomFilter : string with get, set" Usage="System.Windows.Data.BindingListCollectionView.CustomFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a custom filter.</summary>
        <value>Uma cadeia de caracteres que especifica como os itens são filtrados.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Windows.Data.BindingListCollectionView.CanCustomFilter%2A> propriedade para testar se o modo de exibição oferece suporte à filtragem personalizado antes de atribuir uma cadeia de caracteres para esta propriedade.  
  
 A sintaxe depende de <xref:System.ComponentModel.IBindingListView> implementação. Para obter um exemplo da sintaxe de expressão de filtro com suporte, consulte <xref:System.Data.DataView.RowFilter%2A>.  
  
 Observe que, se você tiver vários <xref:System.Windows.Data.BindingListCollectionView> objetos e a fonte subjacente é um `DataTable` ou `DataView`, os objetos de exibição não classificar ou filtrar independentemente. Por exemplo, se você tiver dois <xref:System.Windows.Data.BindingListCollectionView> objetos associados com o mesmo `DataTable` e executar a classificação em um dos modos de exibição, a ordem dos itens em outro modo de exibição pode ser afetada. Isso ocorre porque <xref:System.Windows.Data.BindingListCollectionView> objetos usam subjacente <xref:System.ComponentModel.IBindingList> para classificar e filtrar as funcionalidades.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetachFromSourceCollection">
      <MemberSignature Language="C#" Value="public override void DetachFromSourceCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void DetachFromSourceCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingListCollectionView.DetachFromSourceCollection" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub DetachFromSourceCollection ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void DetachFromSourceCollection();" />
      <MemberSignature Language="F#" Value="override this.DetachFromSourceCollection : unit -&gt; unit" Usage="bindingListCollectionView.DetachFromSourceCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Detaches the underlying collection from this collection view to enable the collection view to be garbage collected.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EditItem">
      <MemberSignature Language="C#" Value="public void EditItem (object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EditItem(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingListCollectionView.EditItem(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EditItem (item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EditItem(System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member EditItem : obj -&gt; unit&#xA;override this.EditItem : obj -&gt; unit" Usage="bindingListCollectionView.EditItem item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">The item to edit.</param>
        <summary>Begins an edit transaction of the specified item.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.ComponentModel.IEditableCollectionView.EditItem(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="protected override System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingListCollectionView.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="bindingListCollectionView.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemAt">
      <MemberSignature Language="C#" Value="public override object GetItemAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object GetItemAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingListCollectionView.GetItemAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetItemAt (index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ GetItemAt(int index);" />
      <MemberSignature Language="F#" Value="override this.GetItemAt : int -&gt; obj" Usage="bindingListCollectionView.GetItemAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index at which the item is located.</param>
        <summary>Retrieves the item at the specified position in the view.</summary>
        <returns>The item at the specified position in the view.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método avalia o índice com qualquer <xref:System.Windows.Data.CollectionView.SortDescriptions%2A> ou <xref:System.Windows.Data.CollectionView.Filter%2A> propriedades que são definidas na exibição.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index" /> is out of range.</exception>
      </Docs>
    </Member>
    <Member MemberName="GroupBySelector">
      <MemberSignature Language="C#" Value="public System.Windows.Data.GroupDescriptionSelectorCallback GroupBySelector { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.GroupDescriptionSelectorCallback GroupBySelector" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.GroupBySelector" />
      <MemberSignature Language="VB.NET" Value="Public Property GroupBySelector As GroupDescriptionSelectorCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::GroupDescriptionSelectorCallback ^ GroupBySelector { System::Windows::Data::GroupDescriptionSelectorCallback ^ get(); void set(System::Windows::Data::GroupDescriptionSelectorCallback ^ value); };" />
      <MemberSignature Language="F#" Value="member this.GroupBySelector : System.Windows.Data.GroupDescriptionSelectorCallback with get, set" Usage="System.Windows.Data.BindingListCollectionView.GroupBySelector" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.GroupDescriptionSelectorCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a delegate to select the <see cref="T:System.ComponentModel.GroupDescription" /> as a function of the parent group and its level.</summary>
        <value>Um método que fornece a lógica para a seleção do <see cref="T:System.ComponentModel.GroupDescription" /> como uma função do grupo pai e seu nível. O padrão é <see langword="null" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Data.BindingListCollectionView.GroupDescriptions" />
      </Docs>
    </Member>
    <Member MemberName="GroupDescriptions">
      <MemberSignature Language="C#" Value="public override System.Collections.ObjectModel.ObservableCollection&lt;System.ComponentModel.GroupDescription&gt; GroupDescriptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ObservableCollection`1&lt;class System.ComponentModel.GroupDescription&gt; GroupDescriptions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.GroupDescriptions" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GroupDescriptions As ObservableCollection(Of GroupDescription)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::ObjectModel::ObservableCollection&lt;System::ComponentModel::GroupDescription ^&gt; ^ GroupDescriptions { System::Collections::ObjectModel::ObservableCollection&lt;System::ComponentModel::GroupDescription ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GroupDescriptions : System.Collections.ObjectModel.ObservableCollection&lt;System.ComponentModel.GroupDescription&gt;" Usage="System.Windows.Data.BindingListCollectionView.GroupDescriptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ObservableCollection&lt;System.ComponentModel.GroupDescription&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of <see cref="T:System.ComponentModel.GroupDescription" /> objects that describe how the items in the collection are grouped in the view.</summary>
        <value>Uma coleção de <see cref="T:System.ComponentModel.GroupDescription" /> objetos que descrevem como os itens na coleção são agrupados no modo de exibição.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Essa propriedade só pode ser definida ao acessar o objeto de coleção e usando seus vários métodos, como adicionar. A propriedade para acessar o objeto de coleção é somente leitura; a coleção em si é leitura/gravação.  
  
   
  
## Examples  
 O exemplo a seguir mostra como usar essa propriedade:  
  
 [!code-csharp[DataBindingLab#6](~/samples/snippets/csharp/VS_Snippets_Wpf/DataBindingLab/CSharp/MainWindow.xaml.cs#6)]
 [!code-vb[DataBindingLab#6](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataBindingLab/VisualBasic/MainWindow.xaml.vb#6)]  
  
 Para o exemplo completo, consulte [Data Binding Demo](http://go.microsoft.com/fwlink/?LinkID=163703).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.BindingListCollectionView.GroupBySelector" />
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public override System.Collections.ObjectModel.ReadOnlyObservableCollection&lt;object&gt; Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyObservableCollection`1&lt;object&gt; Groups" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.Groups" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Groups As ReadOnlyObservableCollection(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::ObjectModel::ReadOnlyObservableCollection&lt;System::Object ^&gt; ^ Groups { System::Collections::ObjectModel::ReadOnlyObservableCollection&lt;System::Object ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Groups : System.Collections.ObjectModel.ReadOnlyObservableCollection&lt;obj&gt;" Usage="System.Windows.Data.BindingListCollectionView.Groups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyObservableCollection&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the top-level groups.</summary>
        <value>Uma coleção somente leitura dos grupos de nível superior, ou <see langword="null" /> se não houver nenhum grupo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os itens na coleção são do tipo <xref:System.Windows.Data.CollectionViewGroup>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Controls.ItemsControl.GroupStyle" />
        <altmember cref="P:System.Windows.Data.BindingListCollectionView.GroupDescriptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public override int IndexOf (object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 IndexOf(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingListCollectionView.IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IndexOf (item As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int IndexOf(System::Object ^ item);" />
      <MemberSignature Language="F#" Value="override this.IndexOf : obj -&gt; int" Usage="bindingListCollectionView.IndexOf item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">The object to look for in the collection.</param>
        <summary>Returns the index at which the given item belongs in the collection view.</summary>
        <returns>The index of the item in the collection, or <c>-1</c> if the item does not exist in the collection view.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método avalia o índice com qualquer <xref:System.Windows.Data.CollectionView.SortDescriptions%2A> ou <xref:System.Windows.Data.CollectionView.Filter%2A> propriedades que são definidas na exibição.  
  
 Para obter mais informações, consulte <xref:System.Windows.Data.CollectionView.IndexOf%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAddingNew">
      <MemberSignature Language="C#" Value="public bool IsAddingNew { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAddingNew" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.IsAddingNew" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAddingNew As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAddingNew { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAddingNew : bool" Usage="System.Windows.Data.BindingListCollectionView.IsAddingNew" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether an add transaction is in progress.</summary>
        <value>
          <see langword="true" /> Se uma transação de adicionar está em andamento. Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Iniciar uma transação adicionar chamando o <xref:System.Windows.Data.ListCollectionView.AddNew%2A> método e você termina a transação de adicionar chamando <xref:System.Windows.Data.ListCollectionView.CommitNew%2A> ou <xref:System.Windows.Data.ListCollectionView.CancelNew%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.IEditableCollectionView.IsAddingNew" />
      </Docs>
    </Member>
    <Member MemberName="IsDataInGroupOrder">
      <MemberSignature Language="C#" Value="public bool IsDataInGroupOrder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDataInGroupOrder" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.IsDataInGroupOrder" />
      <MemberSignature Language="VB.NET" Value="Public Property IsDataInGroupOrder As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDataInGroupOrder { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsDataInGroupOrder : bool with get, set" Usage="System.Windows.Data.BindingListCollectionView.IsDataInGroupOrder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the list of items (after applying the sort and filters, if any) is already in the correct order for grouping.</summary>
        <value>
          <see langword="true" /> Se a lista de itens já está na ordem correta para o agrupamento; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Definir essa propriedade como `true` informa o modo de exibição que a lista de itens já está na ordem correta para o agrupamento e permite que o modo de exibição usar um algoritmo mais eficiente para criar os grupos. Os dados estão na ordem correta se:  
  
1.  Todos os itens que pertencem a um determinado grupo aparecem consecutivamente, e  
  
2.  Se o <xref:System.ComponentModel.GroupDescription.GroupNames%2A> coleção não estiver vazia, os grupos em <xref:System.ComponentModel.GroupDescription.GroupNames%2A> aparecem antes de quaisquer outros grupos e na mesma ordem como na <xref:System.ComponentModel.GroupDescription.GroupNames%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEditingItem">
      <MemberSignature Language="C#" Value="public bool IsEditingItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEditingItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.IsEditingItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEditingItem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEditingItem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEditingItem : bool" Usage="System.Windows.Data.BindingListCollectionView.IsEditingItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether an edit transaction is in progress.</summary>
        <value>
          <see langword="true" /> Se uma transação de edição está em andamento. Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Iniciar uma transação de edição chamando o <xref:System.Windows.Data.ListCollectionView.EditItem%2A> método e você termina a transação chamando <xref:System.Windows.Data.ListCollectionView.CommitEdit%2A> ou <xref:System.Windows.Data.ListCollectionView.CancelEdit%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.IEditableCollectionView.IsEditingItem" />
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public override bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Windows.Data.BindingListCollectionView.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a value that indicates whether the resulting (filtered) view is empty.</summary>
        <value>
          <see langword="true" /> Se a exibição resultante está vazia. Caso contrário, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLiveFiltering">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; IsLiveFiltering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; IsLiveFiltering" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.IsLiveFiltering" />
      <MemberSignature Language="VB.NET" Value="Public Property IsLiveFiltering As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;bool&gt; IsLiveFiltering { Nullable&lt;bool&gt; get(); void set(Nullable&lt;bool&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.IsLiveFiltering : Nullable&lt;bool&gt; with get, set" Usage="System.Windows.Data.BindingListCollectionView.IsLiveFiltering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether filtering data in real time is enabled.</summary>
        <value>
          <see langword="true" /> se a filtragem de dados em tempo real está habilitada; <see langword="false" /> se a filtragem em tempo real não está habilitada; <see langword="null" /> se não é possível determinar se o modo de exibição de coleção implementa a filtragem em tempo real.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Data.BindingListCollectionView.IsLiveFiltering" /> cannot be set.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLiveGrouping">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; IsLiveGrouping { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; IsLiveGrouping" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.IsLiveGrouping" />
      <MemberSignature Language="VB.NET" Value="Public Property IsLiveGrouping As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;bool&gt; IsLiveGrouping { Nullable&lt;bool&gt; get(); void set(Nullable&lt;bool&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.IsLiveGrouping : Nullable&lt;bool&gt; with get, set" Usage="System.Windows.Data.BindingListCollectionView.IsLiveGrouping" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether grouping data in real time is enabled.</summary>
        <value>
          <see langword="true" /> Se o agrupamento de dados em tempo real está ativado. <see langword="false" /> se o agrupamento ao vivo não estiver habilitado; <see langword="null" /> se não for possível determinar se o modo de exibição de coleção implementa agrupamento ao vivo.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.Windows.Data.BindingListCollectionView.IsLiveGrouping" /> cannot be set to <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLiveSorting">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; IsLiveSorting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; IsLiveSorting" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.IsLiveSorting" />
      <MemberSignature Language="VB.NET" Value="Public Property IsLiveSorting As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;bool&gt; IsLiveSorting { Nullable&lt;bool&gt; get(); void set(Nullable&lt;bool&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.IsLiveSorting : Nullable&lt;bool&gt; with get, set" Usage="System.Windows.Data.BindingListCollectionView.IsLiveSorting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether sorting data in real time is enabled.</summary>
        <value>
          <see langword="true" /> Se a classificação de dados em tempo real está ativado. <see langword="false" /> se a classificação ao vivo não estiver habilitado; <see langword="null" /> se não for possível determinar se o modo de exibição de coleção implementa classificação ao vivo.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Data.BindingListCollectionView.IsLiveSorting" /> cannot be set.</exception>
      </Docs>
    </Member>
    <Member MemberName="ItemProperties">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.ComponentModel.ItemPropertyInfo&gt; ItemProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.ComponentModel.ItemPropertyInfo&gt; ItemProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.ItemProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ItemProperties As ReadOnlyCollection(Of ItemPropertyInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::ComponentModel::ItemPropertyInfo ^&gt; ^ ItemProperties { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::ComponentModel::ItemPropertyInfo ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ItemProperties : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.ComponentModel.ItemPropertyInfo&gt;" Usage="System.Windows.Data.BindingListCollectionView.ItemProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.ComponentModel.ItemPropertyInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of objects that describes the properties of the items in the collection.</summary>
        <value>Uma coleção de objetos que descreve as propriedades dos itens na coleção.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LiveFilteringProperties">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ObservableCollection&lt;string&gt; LiveFilteringProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ObservableCollection`1&lt;string&gt; LiveFilteringProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.LiveFilteringProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LiveFilteringProperties As ObservableCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ObservableCollection&lt;System::String ^&gt; ^ LiveFilteringProperties { System::Collections::ObjectModel::ObservableCollection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LiveFilteringProperties : System.Collections.ObjectModel.ObservableCollection&lt;string&gt;" Usage="System.Windows.Data.BindingListCollectionView.LiveFilteringProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ObservableCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of strings that specify the properties that participate in filtering data in real time.</summary>
        <value>Uma coleção de cadeias de caracteres que especificam as propriedades que participam da filtragem de dados em tempo real.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LiveGroupingProperties">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ObservableCollection&lt;string&gt; LiveGroupingProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ObservableCollection`1&lt;string&gt; LiveGroupingProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.LiveGroupingProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LiveGroupingProperties As ObservableCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ObservableCollection&lt;System::String ^&gt; ^ LiveGroupingProperties { System::Collections::ObjectModel::ObservableCollection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LiveGroupingProperties : System.Collections.ObjectModel.ObservableCollection&lt;string&gt;" Usage="System.Windows.Data.BindingListCollectionView.LiveGroupingProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ObservableCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of strings that specify the properties that participate in grouping data in real time.</summary>
        <value>Uma coleção de cadeias de caracteres que especifica as propriedades que participam no agrupamento de dados em tempo real.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LiveSortingProperties">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ObservableCollection&lt;string&gt; LiveSortingProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ObservableCollection`1&lt;string&gt; LiveSortingProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.LiveSortingProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LiveSortingProperties As ObservableCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ObservableCollection&lt;System::String ^&gt; ^ LiveSortingProperties { System::Collections::ObjectModel::ObservableCollection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LiveSortingProperties : System.Collections.ObjectModel.ObservableCollection&lt;string&gt;" Usage="System.Windows.Data.BindingListCollectionView.LiveSortingProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ObservableCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of strings that specify the properties that participate in sorting data in real time.</summary>
        <value>Uma coleção de cadeias de caracteres que especifica as propriedades que participam na classificação de dados em tempo real.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveCurrentToPosition">
      <MemberSignature Language="C#" Value="public override bool MoveCurrentToPosition (int position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveCurrentToPosition(int32 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingListCollectionView.MoveCurrentToPosition(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveCurrentToPosition (position As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveCurrentToPosition(int position);" />
      <MemberSignature Language="F#" Value="override this.MoveCurrentToPosition : int -&gt; bool" Usage="bindingListCollectionView.MoveCurrentToPosition position" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="position">The index to set the <see cref="P:System.Windows.Data.CollectionView.CurrentItem" /> to.</param>
        <summary>Sets the item at the specified index to be the <see cref="P:System.Windows.Data.CollectionView.CurrentItem" /> in the view.</summary>
        <returns>
          <see langword="true" /> if the resulting <see cref="P:System.Windows.Data.CollectionView.CurrentItem" /> is an item within the view; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of range.</exception>
      </Docs>
    </Member>
    <Member MemberName="NewItemPlaceholderPosition">
      <MemberSignature Language="C#" Value="public System.ComponentModel.NewItemPlaceholderPosition NewItemPlaceholderPosition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ComponentModel.NewItemPlaceholderPosition NewItemPlaceholderPosition" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.NewItemPlaceholderPosition" />
      <MemberSignature Language="VB.NET" Value="Public Property NewItemPlaceholderPosition As NewItemPlaceholderPosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::NewItemPlaceholderPosition NewItemPlaceholderPosition { System::ComponentModel::NewItemPlaceholderPosition get(); void set(System::ComponentModel::NewItemPlaceholderPosition value); };" />
      <MemberSignature Language="F#" Value="member this.NewItemPlaceholderPosition : System.ComponentModel.NewItemPlaceholderPosition with get, set" Usage="System.Windows.Data.BindingListCollectionView.NewItemPlaceholderPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.NewItemPlaceholderPosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the position of the new item placeholder in the <see cref="T:System.Windows.Data.BindingListCollectionView" />.</summary>
        <value>Um dos valores de enumeração que especifica a posição do novo espaço reservado de item no <see cref="T:System.Windows.Data.BindingListCollectionView" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAllowsCrossThreadChangesChanged">
      <MemberSignature Language="C#" Value="protected override void OnAllowsCrossThreadChangesChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnAllowsCrossThreadChangesChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingListCollectionView.OnAllowsCrossThreadChangesChanged" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnAllowsCrossThreadChangesChanged ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnAllowsCrossThreadChangesChanged();" />
      <MemberSignature Language="F#" Value="override this.OnAllowsCrossThreadChangesChanged : unit -&gt; unit" Usage="bindingListCollectionView.OnAllowsCrossThreadChangesChanged " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBeginChangeLogging">
      <MemberSignature Language="C#" Value="protected override void OnBeginChangeLogging (System.Collections.Specialized.NotifyCollectionChangedEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBeginChangeLogging(class System.Collections.Specialized.NotifyCollectionChangedEventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingListCollectionView.OnBeginChangeLogging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnBeginChangeLogging (args As NotifyCollectionChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnBeginChangeLogging(System::Collections::Specialized::NotifyCollectionChangedEventArgs ^ args);" />
      <MemberSignature Language="F#" Value="override this.OnBeginChangeLogging : System.Collections.Specialized.NotifyCollectionChangedEventArgs -&gt; unit" Usage="bindingListCollectionView.OnBeginChangeLogging args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Replaced by OnAllowsCrossThreadChangesChanged")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Collections.Specialized.NotifyCollectionChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PassesFilter">
      <MemberSignature Language="C#" Value="public override bool PassesFilter (object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool PassesFilter(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingListCollectionView.PassesFilter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function PassesFilter (item As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool PassesFilter(System::Object ^ item);" />
      <MemberSignature Language="F#" Value="override this.PassesFilter : obj -&gt; bool" Usage="bindingListCollectionView.PassesFilter item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">The item to check.</param>
        <summary>Returns a value that indicates whether the specified item in the underlying collection belongs to the view.</summary>
        <returns>
          <see langword="true" /> if the specified item belongs to the view or if there is not filter set on the collection view; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ao contrário de <xref:System.Windows.Data.BindingListCollectionView.Contains%2A> método, este método assume que o item especificado pertence à coleção subjacente. Este método usa filtros em conta. Normalmente, você usa esse método durante notificações de alteração de coleção para determinar se o item adicionado ou removido requer processamento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessCollectionChanged">
      <MemberSignature Language="C#" Value="protected override void ProcessCollectionChanged (System.Collections.Specialized.NotifyCollectionChangedEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ProcessCollectionChanged(class System.Collections.Specialized.NotifyCollectionChangedEventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingListCollectionView.ProcessCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ProcessCollectionChanged (args As NotifyCollectionChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ProcessCollectionChanged(System::Collections::Specialized::NotifyCollectionChangedEventArgs ^ args);" />
      <MemberSignature Language="F#" Value="override this.ProcessCollectionChanged : System.Collections.Specialized.NotifyCollectionChangedEventArgs -&gt; unit" Usage="bindingListCollectionView.ProcessCollectionChanged args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Collections.Specialized.NotifyCollectionChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshOverride">
      <MemberSignature Language="C#" Value="protected override void RefreshOverride ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RefreshOverride() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingListCollectionView.RefreshOverride" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RefreshOverride ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RefreshOverride();" />
      <MemberSignature Language="F#" Value="override this.RefreshOverride : unit -&gt; unit" Usage="bindingListCollectionView.RefreshOverride " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingListCollectionView.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Remove(System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member Remove : obj -&gt; unit&#xA;override this.Remove : obj -&gt; unit" Usage="bindingListCollectionView.Remove item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">The item to remove.</param>
        <summary>Removes the specified item from the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `item` não está na coleção, <xref:System.Windows.Data.BindingListCollectionView.Remove%2A> não fará nada.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.IEditableCollectionView.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingListCollectionView.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="bindingListCollectionView.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the item to remove.</param>
        <summary>Removes the item at the specified position from the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `index` é relativo a exibição de coleção, não a coleção.  Por exemplo, se a coleção tem 10 itens e o modo de exibição tem um <xref:System.ComponentModel.ICollectionView.Filter%2A> para que sejam exibidas 7 itens, os valores válidos de `index` são de 0 a 6.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than 0 or greater than the number of items in the collection view.</exception>
        <altmember cref="M:System.ComponentModel.IEditableCollectionView.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SortDescriptions">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.SortDescriptionCollection SortDescriptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.SortDescriptionCollection SortDescriptions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingListCollectionView.SortDescriptions" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property SortDescriptions As SortDescriptionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::SortDescriptionCollection ^ SortDescriptions { System::ComponentModel::SortDescriptionCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SortDescriptions : System.ComponentModel.SortDescriptionCollection" Usage="System.Windows.Data.BindingListCollectionView.SortDescriptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.SortDescriptionCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of <see cref="T:System.ComponentModel.SortDescription" /> objects that describes how the items in the collection are sorted in the view.</summary>
        <value>Uma coleção de objetos <see cref="T:System.ComponentModel.SortDescription" /> que descrevem como os itens na coleção são classificados na exibição.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Observe que, se você tiver vários <xref:System.Windows.Data.BindingListCollectionView> objetos e a fonte subjacente é um `DataTable` ou `DataView`, os objetos de exibição não classificar ou filtrar independentemente. Por exemplo, se você tiver dois <xref:System.Windows.Data.BindingListCollectionView> objetos associados com o mesmo `DataTable` e executar a classificação em um dos modos de exibição, a ordem dos itens em outro modo de exibição pode ser afetada. Isso ocorre porque <xref:System.Windows.Data.BindingListCollectionView> objetos usam subjacente <xref:System.ComponentModel.IBindingList> para classificar e filtrar as funcionalidades.  
  
> [!NOTE]
>  Esta propriedade só pode ser definida ao acessar o objeto de coleção e usando seus vários métodos, como `Add`. A propriedade para acessar o objeto de coleção é somente leitura; a coleção em si é leitura/gravação.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IComparer.Compare">
      <MemberSignature Language="C#" Value="int IComparer.Compare (object o1, object o2);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IComparer.Compare(object o1, object o2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingListCollectionView.System#Collections#IComparer#Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Compare (o1 As Object, o2 As Object) As Integer Implements IComparer.Compare" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IComparer.Compare(System::Object ^ o1, System::Object ^ o2) = System::Collections::IComparer::Compare;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o1" Type="System.Object" />
        <Parameter Name="o2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o1">First object to compare.</param>
        <param name="o2">Second object to compare.</param>
        <summary>This member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</summary>
        <returns>Less than zero means <paramref name="o1" /> is less than <paramref name="o2" />, a value of zero means they are equal, and over zero means <paramref name="o1" /> is greater than <paramref name="o2" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>