<Type Name="CollectionSynchronizationCallback" FullName="System.Windows.Data.CollectionSynchronizationCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b15a776d80c16fc8c3d6d2cf1d520bafa8befc6b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36564544" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void CollectionSynchronizationCallback(IEnumerable collection, object context, Action accessMethod, bool writeAccess);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CollectionSynchronizationCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Data.CollectionSynchronizationCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub CollectionSynchronizationCallback(collection As IEnumerable, context As Object, accessMethod As Action, writeAccess As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void CollectionSynchronizationCallback(IEnumerable ^ collection, System::Object ^ context, Action ^ accessMethod, bool writeAccess);" />
  <TypeSignature Language="F#" Value="type CollectionSynchronizationCallback = delegate of IEnumerable * obj * Action * bool -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="collection" Type="System.Collections.IEnumerable" />
    <Parameter Name="context" Type="System.Object" />
    <Parameter Name="accessMethod" Type="System.Action" />
    <Parameter Name="writeAccess" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="collection">
      <span data-ttu-id="57370-101">A coleção para acessar em um thread diferente daquele que a criou.</span>
      <span class="sxs-lookup">
        <span data-stu-id="57370-101">The collection to access on a thread other than the one that created it.</span>
      </span>
    </param>
    <param name="context">
      <span data-ttu-id="57370-102">Um objeto usado para sincronizar a coleção.</span>
      <span class="sxs-lookup">
        <span data-stu-id="57370-102">An object used to synchronize the collection.</span>
      </span>
    </param>
    <param name="accessMethod">
      <span data-ttu-id="57370-103">Um delegado para o método que executa a operação na coleção.</span>
      <span class="sxs-lookup">
        <span data-stu-id="57370-103">A delegate to the method that performs the operation on the collection.</span>
      </span>
    </param>
    <param name="writeAccess">
      <span data-ttu-id="57370-104">
        <see langword="true" /> se <c>accessMethod</c> gravar na coleção; caso contrário, <see langword="false" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="57370-104">
          <see langword="true" /> if <c>accessMethod</c> writes to the collection; otherwise, <see langword="false" />.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="57370-105">Representa o método que sincroniza uma coleção para o acesso entre threads.</span>
      <span class="sxs-lookup">
        <span data-stu-id="57370-105">Represent the method that synchronizes a collection for cross-thread access.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
</Type>