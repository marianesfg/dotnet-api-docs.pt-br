<Type Name="IMemberCreationService" FullName="System.Workflow.ComponentModel.Design.IMemberCreationService">
  <TypeSignature Language="C#" Value="public interface IMemberCreationService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMemberCreationService" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.ComponentModel.Design.IMemberCreationService" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMemberCreationService" />
  <TypeSignature Language="C++ CLI" Value="public interface class IMemberCreationService" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="543bc-101">Define métodos para criar, atualizar e remover dinamicamente os elementos de código para um tipo no tempo de design.</span><span class="sxs-lookup"><span data-stu-id="543bc-101">Defines methods to dynamically create, update and remove code elements for a type at design time.</span></span> <span data-ttu-id="543bc-102">Também são fornecidos métodos que permitem exibir o código em tempo de design.</span><span class="sxs-lookup"><span data-stu-id="543bc-102">Methods are also provided that allow you to display code at design time.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateEvent">
      <MemberSignature Language="C#" Value="public void CreateEvent (string className, string eventName, Type eventType, System.Workflow.ComponentModel.Compiler.AttributeInfo[] attributes, bool emitDependencyProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateEvent(string className, string eventName, class System.Type eventType, class System.Workflow.ComponentModel.Compiler.AttributeInfo[] attributes, bool emitDependencyProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.IMemberCreationService.CreateEvent(System.String,System.String,System.Type,System.Workflow.ComponentModel.Compiler.AttributeInfo[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateEvent (className As String, eventName As String, eventType As Type, attributes As AttributeInfo(), emitDependencyProperty As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateEvent(System::String ^ className, System::String ^ eventName, Type ^ eventType, cli::array &lt;System::Workflow::ComponentModel::Compiler::AttributeInfo ^&gt; ^ attributes, bool emitDependencyProperty);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="className" Type="System.String" />
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventType" Type="System.Type" />
        <Parameter Name="attributes" Type="System.Workflow.ComponentModel.Compiler.AttributeInfo[]" />
        <Parameter Name="emitDependencyProperty" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="className"><span data-ttu-id="543bc-103">Uma cadeia de caracteres que contém o nome de classe a ser adicionada à qual o evento será adicionado.</span><span class="sxs-lookup"><span data-stu-id="543bc-103">A string that contains the class name to add the event to.</span></span></param>
        <param name="eventName"><span data-ttu-id="543bc-104">Uma cadeia de caracteres que define o nome do evento.</span><span class="sxs-lookup"><span data-stu-id="543bc-104">A string that defines the name of the event.</span></span></param>
        <param name="eventType"><span data-ttu-id="543bc-105">O <see cref="T:System.Type" /> atribuído ao evento.</span><span class="sxs-lookup"><span data-stu-id="543bc-105">The <see cref="T:System.Type" /> assigned to the event.</span></span></param>
        <param name="attributes"><span data-ttu-id="543bc-106">Uma matriz <see cref="T:System.Workflow.ComponentModel.Compiler.AttributeInfo" /> que contém informações sobre todos os atributos a serem atribuídos ao evento.</span><span class="sxs-lookup"><span data-stu-id="543bc-106">An <see cref="T:System.Workflow.ComponentModel.Compiler.AttributeInfo" /> array that contains information on all attributes to assign to the event.</span></span></param>
        <param name="emitDependencyProperty">
          <span data-ttu-id="543bc-107"><see langword="true" /> para emitir as propriedades de dependência associadas ao evento; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="543bc-107"><see langword="true" /> to emit any dependency properties associated with the event; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="543bc-108">Cria um evento na classe especificada usando o nome do evento indicado, o tipo de evento e os atributos.</span><span class="sxs-lookup"><span data-stu-id="543bc-108">Creates an event on the specified class by using the specified event name, event type and attributes.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateField">
      <MemberSignature Language="C#" Value="public void CreateField (string className, string fieldName, Type fieldType, Type[] genericParameterTypes, System.CodeDom.MemberAttributes attributes, System.CodeDom.CodeSnippetExpression initializationExpression, bool overwriteExisting);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateField(string className, string fieldName, class System.Type fieldType, class System.Type[] genericParameterTypes, valuetype System.CodeDom.MemberAttributes attributes, class System.CodeDom.CodeSnippetExpression initializationExpression, bool overwriteExisting) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.IMemberCreationService.CreateField(System.String,System.String,System.Type,System.Type[],System.CodeDom.MemberAttributes,System.CodeDom.CodeSnippetExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateField (className As String, fieldName As String, fieldType As Type, genericParameterTypes As Type(), attributes As MemberAttributes, initializationExpression As CodeSnippetExpression, overwriteExisting As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateField(System::String ^ className, System::String ^ fieldName, Type ^ fieldType, cli::array &lt;Type ^&gt; ^ genericParameterTypes, System::CodeDom::MemberAttributes attributes, System::CodeDom::CodeSnippetExpression ^ initializationExpression, bool overwriteExisting);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="className" Type="System.String" />
        <Parameter Name="fieldName" Type="System.String" />
        <Parameter Name="fieldType" Type="System.Type" />
        <Parameter Name="genericParameterTypes" Type="System.Type[]" />
        <Parameter Name="attributes" Type="System.CodeDom.MemberAttributes" />
        <Parameter Name="initializationExpression" Type="System.CodeDom.CodeSnippetExpression" />
        <Parameter Name="overwriteExisting" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="className"><span data-ttu-id="543bc-109">Uma cadeia de caracteres que define o nome da classe a ser adicionada ao campo.</span><span class="sxs-lookup"><span data-stu-id="543bc-109">A string that defines the name of the class to add the field.</span></span></param>
        <param name="fieldName"><span data-ttu-id="543bc-110">Uma cadeia de caracteres que define o nome do campo.</span><span class="sxs-lookup"><span data-stu-id="543bc-110">A string that defines the name of the field.</span></span></param>
        <param name="fieldType"><span data-ttu-id="543bc-111">O <see cref="T:System.Type" /> do novo campo.</span><span class="sxs-lookup"><span data-stu-id="543bc-111">The <see cref="T:System.Type" /> of the new field.</span></span></param>
        <param name="genericParameterTypes"><span data-ttu-id="543bc-112">Uma matriz <see cref="T:System.Type" /> de quaisquer parâmetros associados ao campo.</span><span class="sxs-lookup"><span data-stu-id="543bc-112">A <see cref="T:System.Type" /> array of any parameters associated with the field.</span></span></param>
        <param name="attributes"><span data-ttu-id="543bc-113">Um <see cref="T:System.CodeDom.MemberAttributes" /> que define o identificador de atributo de membro para o campo.</span><span class="sxs-lookup"><span data-stu-id="543bc-113">A <see cref="T:System.CodeDom.MemberAttributes" /> that defines the member attribute identifier for the field.</span></span></param>
        <param name="initializationExpression"><span data-ttu-id="543bc-114">Um <see cref="T:System.CodeDom.CodeSnippetExpression" /> que contém a expressão literal do campo.</span><span class="sxs-lookup"><span data-stu-id="543bc-114">A <see cref="T:System.CodeDom.CodeSnippetExpression" /> that contains the literal expression of the field.</span></span></param>
        <param name="overwriteExisting">
          <span data-ttu-id="543bc-115"><see langword="true" /> para excluir todos os campos existentes no <c>className</c> ao criar o novo campo; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="543bc-115"><see langword="true" /> to delete any existing fields on <c>className</c> when creating the new field; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="543bc-116">Cria um campo na classe especificada usando o nome do campo especificado, o tipo de campo, os tipos de parâmetro, os atributos e a expressão de inicialização literal.</span><span class="sxs-lookup"><span data-stu-id="543bc-116">Creates a field on the specified class by using the specified field name, field type, parameter types, attributes and literal initialization expression.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateProperty">
      <MemberSignature Language="C#" Value="public void CreateProperty (string className, string propertyName, Type propertyType, System.Workflow.ComponentModel.Compiler.AttributeInfo[] attributes, bool emitDependencyProperty, bool isMetaProperty, bool isAttached, Type ownerType, bool isReadOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateProperty(string className, string propertyName, class System.Type propertyType, class System.Workflow.ComponentModel.Compiler.AttributeInfo[] attributes, bool emitDependencyProperty, bool isMetaProperty, bool isAttached, class System.Type ownerType, bool isReadOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.IMemberCreationService.CreateProperty(System.String,System.String,System.Type,System.Workflow.ComponentModel.Compiler.AttributeInfo[],System.Boolean,System.Boolean,System.Boolean,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateProperty (className As String, propertyName As String, propertyType As Type, attributes As AttributeInfo(), emitDependencyProperty As Boolean, isMetaProperty As Boolean, isAttached As Boolean, ownerType As Type, isReadOnly As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateProperty(System::String ^ className, System::String ^ propertyName, Type ^ propertyType, cli::array &lt;System::Workflow::ComponentModel::Compiler::AttributeInfo ^&gt; ^ attributes, bool emitDependencyProperty, bool isMetaProperty, bool isAttached, Type ^ ownerType, bool isReadOnly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="className" Type="System.String" />
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="attributes" Type="System.Workflow.ComponentModel.Compiler.AttributeInfo[]" />
        <Parameter Name="emitDependencyProperty" Type="System.Boolean" />
        <Parameter Name="isMetaProperty" Type="System.Boolean" />
        <Parameter Name="isAttached" Type="System.Boolean" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="isReadOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="className"><span data-ttu-id="543bc-117">Uma cadeia de caracteres que define o nome da classe a ser adicionada ao campo.</span><span class="sxs-lookup"><span data-stu-id="543bc-117">A string that defines the name of the class to add the field.</span></span></param>
        <param name="propertyName"><span data-ttu-id="543bc-118">Uma cadeia de caracteres que define o nome do campo.</span><span class="sxs-lookup"><span data-stu-id="543bc-118">A string that defines the name of the field.</span></span></param>
        <param name="propertyType"><span data-ttu-id="543bc-119">O <see cref="T:System.Type" /> da nova propriedade.</span><span class="sxs-lookup"><span data-stu-id="543bc-119">The <see cref="T:System.Type" /> of the new property.</span></span></param>
        <param name="attributes"><span data-ttu-id="543bc-120">Uma matriz <see cref="T:System.Workflow.ComponentModel.Compiler.AttributeInfo" /> que contém informações sobre todos os atributos a serem atribuídos à propriedade.</span><span class="sxs-lookup"><span data-stu-id="543bc-120">An <see cref="T:System.Workflow.ComponentModel.Compiler.AttributeInfo" /> array that contains information on all attributes to assign to the property.</span></span></param>
        <param name="emitDependencyProperty">
          <span data-ttu-id="543bc-121"><see langword="true" /> para emitir as propriedades de dependência associadas à propriedade; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="543bc-121"><see langword="true" /> to emit any dependency properties associated with the property; otherwise, <see langword="false" />.</span></span></param>
        <param name="isMetaProperty">
          <span data-ttu-id="543bc-122"><see langword="true" /> para criar a propriedade como uma propriedade de metadados; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="543bc-122"><see langword="true" /> to create the property as a meta property; otherwise, <see langword="false" />.</span></span></param>
        <param name="isAttached">
          <span data-ttu-id="543bc-123"><see langword="true" /> para indicar que a propriedade de dependência emitida tem sua propriedade <see cref="P:System.Workflow.ComponentModel.DependencyProperty.IsAttached" /> definida como <see langword="true" />; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="543bc-123"><see langword="true" /> to indicate that the emitted dependency property has its <see cref="P:System.Workflow.ComponentModel.DependencyProperty.IsAttached" /> property set to <see langword="true" />; otherwise, <see langword="false" />.</span></span></param>
        <param name="ownerType"><span data-ttu-id="543bc-124">O <see cref="T:System.Type" /> que está declarando a propriedade de dependência.</span><span class="sxs-lookup"><span data-stu-id="543bc-124">The <see cref="T:System.Type" /> that is declaring the dependency property.</span></span></param>
        <param name="isReadOnly">
          <span data-ttu-id="543bc-125"><see langword="true" /> para criar a propriedade como uma propriedade somente leitura; <see langword="false" /> para criar a propriedade como uma propriedade de leitura/gravação.</span><span class="sxs-lookup"><span data-stu-id="543bc-125"><see langword="true" /> to create the property as a read-only property; <see langword="false" /> to create the property as a read-write property.</span></span></param>
        <summary><span data-ttu-id="543bc-126">Cria uma propriedade na classe especificada usando o nome da propriedade indicado, o tipo de propriedade e os atributos.</span><span class="sxs-lookup"><span data-stu-id="543bc-126">Creates a property on the specified class by using the specified property name, property type and attributes.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEvent">
      <MemberSignature Language="C#" Value="public void RemoveEvent (string className, string eventName, Type eventType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveEvent(string className, string eventName, class System.Type eventType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.IMemberCreationService.RemoveEvent(System.String,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveEvent (className As String, eventName As String, eventType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveEvent(System::String ^ className, System::String ^ eventName, Type ^ eventType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="className" Type="System.String" />
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="className"><span data-ttu-id="543bc-127">Uma cadeia de caracteres que contém o nome da classe da qual o evento será removido.</span><span class="sxs-lookup"><span data-stu-id="543bc-127">A string that contains the name of the class from which to remove the event.</span></span></param>
        <param name="eventName"><span data-ttu-id="543bc-128">Uma cadeia de caracteres que contém o nome do evento a ser removido.</span><span class="sxs-lookup"><span data-stu-id="543bc-128">A string that contains the name of the event to remove.</span></span></param>
        <param name="eventType"><span data-ttu-id="543bc-129">O <see cref="T:System.Type" /> associado ao evento a ser removido.</span><span class="sxs-lookup"><span data-stu-id="543bc-129">The <see cref="T:System.Type" /> associated with the event to remove.</span></span></param>
        <summary><span data-ttu-id="543bc-130">Remove o evento especificado da classe indicada.</span><span class="sxs-lookup"><span data-stu-id="543bc-130">Removes the specified event from the specified class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveProperty">
      <MemberSignature Language="C#" Value="public void RemoveProperty (string className, string propertyName, Type propertyType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveProperty(string className, string propertyName, class System.Type propertyType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.IMemberCreationService.RemoveProperty(System.String,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveProperty (className As String, propertyName As String, propertyType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveProperty(System::String ^ className, System::String ^ propertyName, Type ^ propertyType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="className" Type="System.String" />
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="className"><span data-ttu-id="543bc-131">Uma cadeia de caracteres que contém o nome da classe da qual a propriedade será removida.</span><span class="sxs-lookup"><span data-stu-id="543bc-131">A string that contains the name of the class from which to remove the property.</span></span></param>
        <param name="propertyName"><span data-ttu-id="543bc-132">Uma cadeia de caracteres que contém o nome da propriedade a ser removida.</span><span class="sxs-lookup"><span data-stu-id="543bc-132">A string that contains the name of the property to remove.</span></span></param>
        <param name="propertyType"><span data-ttu-id="543bc-133">O <see cref="T:System.Type" /> da propriedade a ser removida.</span><span class="sxs-lookup"><span data-stu-id="543bc-133">The <see cref="T:System.Type" /> of the property to remove.</span></span></param>
        <summary><span data-ttu-id="543bc-134">Remove a propriedade especificada da classe indicada.</span><span class="sxs-lookup"><span data-stu-id="543bc-134">Removes the specified property from the specified class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ShowCode">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="543bc-135">Exibe o código para o novo membro em uma superfície de design do fluxo de trabalho.</span><span class="sxs-lookup"><span data-stu-id="543bc-135">Displays code for the new member on a workflow design surface.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ShowCode">
      <MemberSignature Language="C#" Value="public void ShowCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.IMemberCreationService.ShowCode" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowCode ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="543bc-136">Exibe o código para o novo membro em uma superfície de design do fluxo de trabalho.</span><span class="sxs-lookup"><span data-stu-id="543bc-136">Displays code for the new member on a workflow design surface.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowCode">
      <MemberSignature Language="C#" Value="public void ShowCode (System.Workflow.ComponentModel.Activity activity, string methodName, Type delegateType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowCode(class System.Workflow.ComponentModel.Activity activity, string methodName, class System.Type delegateType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.IMemberCreationService.ShowCode(System.Workflow.ComponentModel.Activity,System.String,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowCode(System::Workflow::ComponentModel::Activity ^ activity, System::String ^ methodName, Type ^ delegateType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="delegateType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="activity"><span data-ttu-id="543bc-137">O <see cref="T:System.Workflow.ComponentModel.Activity" /> associado ao código a ser exibido.</span><span class="sxs-lookup"><span data-stu-id="543bc-137">The <see cref="T:System.Workflow.ComponentModel.Activity" /> associated with the code to display.</span></span></param>
        <param name="methodName"><span data-ttu-id="543bc-138">O nome do método a ser exibido.</span><span class="sxs-lookup"><span data-stu-id="543bc-138">The name of the method to display.</span></span></param>
        <param name="delegateType"><span data-ttu-id="543bc-139">O <see cref="T:System.Type" /> do delegado associado ao método a ser exibido.</span><span class="sxs-lookup"><span data-stu-id="543bc-139">The <see cref="T:System.Type" /> of the delegate associated with the method to display.</span></span></param>
        <summary><span data-ttu-id="543bc-140">Exibe o código para o novo membro em uma superfície de design do fluxo de trabalho usando o <see cref="T:System.Workflow.ComponentModel.Activity" />, o método e o tipo de delegado especificados.</span><span class="sxs-lookup"><span data-stu-id="543bc-140">Displays code for the new member on a workflow design surface by using the specified <see cref="T:System.Workflow.ComponentModel.Activity" />, the specified method and the specified delegate type.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateBaseType">
      <MemberSignature Language="C#" Value="public void UpdateBaseType (string className, Type baseType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateBaseType(string className, class System.Type baseType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.IMemberCreationService.UpdateBaseType(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateBaseType (className As String, baseType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateBaseType(System::String ^ className, Type ^ baseType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="className" Type="System.String" />
        <Parameter Name="baseType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="className"><span data-ttu-id="543bc-141">Uma cadeia de caracteres que contém o nome da classe a ser atualizada com um novo tipo base.</span><span class="sxs-lookup"><span data-stu-id="543bc-141">A string that contains the name of the class to update with a new base type.</span></span></param>
        <param name="baseType"><span data-ttu-id="543bc-142">O <see cref="T:System.Type" /> que será o novo tipo base para a classe.</span><span class="sxs-lookup"><span data-stu-id="543bc-142">The <see cref="T:System.Type" /> to be the new base type for the class.</span></span></param>
        <summary><span data-ttu-id="543bc-143">Atualiza o tipo base para associar à classe especificada.</span><span class="sxs-lookup"><span data-stu-id="543bc-143">Updates the base type to associate with the specified class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateEvent">
      <MemberSignature Language="C#" Value="public void UpdateEvent (string className, string oldEventName, Type oldEventType, string newEventName, Type newEventType, System.Workflow.ComponentModel.Compiler.AttributeInfo[] attributes, bool emitDependencyProperty, bool isMetaProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateEvent(string className, string oldEventName, class System.Type oldEventType, string newEventName, class System.Type newEventType, class System.Workflow.ComponentModel.Compiler.AttributeInfo[] attributes, bool emitDependencyProperty, bool isMetaProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.IMemberCreationService.UpdateEvent(System.String,System.String,System.Type,System.String,System.Type,System.Workflow.ComponentModel.Compiler.AttributeInfo[],System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateEvent (className As String, oldEventName As String, oldEventType As Type, newEventName As String, newEventType As Type, attributes As AttributeInfo(), emitDependencyProperty As Boolean, isMetaProperty As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateEvent(System::String ^ className, System::String ^ oldEventName, Type ^ oldEventType, System::String ^ newEventName, Type ^ newEventType, cli::array &lt;System::Workflow::ComponentModel::Compiler::AttributeInfo ^&gt; ^ attributes, bool emitDependencyProperty, bool isMetaProperty);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="className" Type="System.String" />
        <Parameter Name="oldEventName" Type="System.String" />
        <Parameter Name="oldEventType" Type="System.Type" />
        <Parameter Name="newEventName" Type="System.String" />
        <Parameter Name="newEventType" Type="System.Type" />
        <Parameter Name="attributes" Type="System.Workflow.ComponentModel.Compiler.AttributeInfo[]" />
        <Parameter Name="emitDependencyProperty" Type="System.Boolean" />
        <Parameter Name="isMetaProperty" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="className"><span data-ttu-id="543bc-144">Uma cadeia de caracteres que contém o nome da classe que tem o evento a ser atualizado.</span><span class="sxs-lookup"><span data-stu-id="543bc-144">A string that contains the name of the class that contains the event to update.</span></span></param>
        <param name="oldEventName"><span data-ttu-id="543bc-145">Uma cadeia de caracteres que contém o nome do evento existente.</span><span class="sxs-lookup"><span data-stu-id="543bc-145">A string that contains the name of the existing event.</span></span></param>
        <param name="oldEventType"><span data-ttu-id="543bc-146">O <see cref="T:System.Type" /> associado ao evento existente.</span><span class="sxs-lookup"><span data-stu-id="543bc-146">The <see cref="T:System.Type" /> associated with the existing event.</span></span></param>
        <param name="newEventName"><span data-ttu-id="543bc-147">Uma cadeia de caracteres que contém o novo nome do evento atualizado.</span><span class="sxs-lookup"><span data-stu-id="543bc-147">A string that contains the new name of the updated event.</span></span></param>
        <param name="newEventType"><span data-ttu-id="543bc-148">O <see cref="T:System.Type" /> a ser associado ao evento atualizado.</span><span class="sxs-lookup"><span data-stu-id="543bc-148">The <see cref="T:System.Type" /> to associate with the updated event.</span></span></param>
        <param name="attributes"><span data-ttu-id="543bc-149">Uma matriz <see cref="T:System.Workflow.ComponentModel.Compiler.AttributeInfo" /> que contém informações sobre todos os atributos a serem atribuídos ao evento atualizado.</span><span class="sxs-lookup"><span data-stu-id="543bc-149">An <see cref="T:System.Workflow.ComponentModel.Compiler.AttributeInfo" /> array that contains information on all attributes to assign to the updated event.</span></span></param>
        <param name="emitDependencyProperty">
          <span data-ttu-id="543bc-150"><see langword="true" /> para atualizar o evento para emitir uma propriedade de dependência; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="543bc-150"><see langword="true" /> to update the event to emit a dependency property; otherwise, <see langword="false" />.</span></span></param>
        <param name="isMetaProperty">
          <span data-ttu-id="543bc-151"><see langword="true" /> para definir o evento como uma propriedade meta; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="543bc-151"><see langword="true" /> to set the event as a meta property; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="543bc-152">Define um novo nome e o tipo como um evento existente na classe especificada.</span><span class="sxs-lookup"><span data-stu-id="543bc-152">Sets a new name and type to an existing event on the specified class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateProperty">
      <MemberSignature Language="C#" Value="public void UpdateProperty (string className, string oldPropertyName, Type oldPropertyType, string newPropertyName, Type newPropertyType, System.Workflow.ComponentModel.Compiler.AttributeInfo[] attributes, bool emitDependencyProperty, bool isMetaProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateProperty(string className, string oldPropertyName, class System.Type oldPropertyType, string newPropertyName, class System.Type newPropertyType, class System.Workflow.ComponentModel.Compiler.AttributeInfo[] attributes, bool emitDependencyProperty, bool isMetaProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.IMemberCreationService.UpdateProperty(System.String,System.String,System.Type,System.String,System.Type,System.Workflow.ComponentModel.Compiler.AttributeInfo[],System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateProperty (className As String, oldPropertyName As String, oldPropertyType As Type, newPropertyName As String, newPropertyType As Type, attributes As AttributeInfo(), emitDependencyProperty As Boolean, isMetaProperty As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateProperty(System::String ^ className, System::String ^ oldPropertyName, Type ^ oldPropertyType, System::String ^ newPropertyName, Type ^ newPropertyType, cli::array &lt;System::Workflow::ComponentModel::Compiler::AttributeInfo ^&gt; ^ attributes, bool emitDependencyProperty, bool isMetaProperty);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="className" Type="System.String" />
        <Parameter Name="oldPropertyName" Type="System.String" />
        <Parameter Name="oldPropertyType" Type="System.Type" />
        <Parameter Name="newPropertyName" Type="System.String" />
        <Parameter Name="newPropertyType" Type="System.Type" />
        <Parameter Name="attributes" Type="System.Workflow.ComponentModel.Compiler.AttributeInfo[]" />
        <Parameter Name="emitDependencyProperty" Type="System.Boolean" />
        <Parameter Name="isMetaProperty" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="className"><span data-ttu-id="543bc-153">Uma cadeia de caracteres que contém o nome da classe na qual a propriedade a ser atualizada reside.</span><span class="sxs-lookup"><span data-stu-id="543bc-153">A string that contains the name of the class on which the property to update resides.</span></span></param>
        <param name="oldPropertyName"><span data-ttu-id="543bc-154">Uma cadeia de caracteres que contém o nome existente da propriedade.</span><span class="sxs-lookup"><span data-stu-id="543bc-154">A string that contains the existing name of the property.</span></span></param>
        <param name="oldPropertyType"><span data-ttu-id="543bc-155">O <see cref="T:System.Type" /> associado à propriedade existente.</span><span class="sxs-lookup"><span data-stu-id="543bc-155">The <see cref="T:System.Type" /> associated with the existing property.</span></span></param>
        <param name="newPropertyName"><span data-ttu-id="543bc-156">Uma cadeia de caracteres que contém o novo nome da propriedade.</span><span class="sxs-lookup"><span data-stu-id="543bc-156">A string that contains the new name of the property.</span></span></param>
        <param name="newPropertyType"><span data-ttu-id="543bc-157">O <see cref="T:System.Type" /> a ser associado à versão atualizada da propriedade.</span><span class="sxs-lookup"><span data-stu-id="543bc-157">The <see cref="T:System.Type" /> to associate with the updated version of the property.</span></span></param>
        <param name="attributes"><span data-ttu-id="543bc-158">Uma matriz <see cref="T:System.Workflow.ComponentModel.Compiler.AttributeInfo" /> que contém informações sobre todos os atributos a serem atribuídos à propriedade atualizada.</span><span class="sxs-lookup"><span data-stu-id="543bc-158">An <see cref="T:System.Workflow.ComponentModel.Compiler.AttributeInfo" /> array that contains information on all attributes to assign to the updated property.</span></span></param>
        <param name="emitDependencyProperty">
          <span data-ttu-id="543bc-159"><see langword="true" /> para atualizar a propriedade para emitir uma propriedade de dependência; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="543bc-159"><see langword="true" /> to update the property emit a dependency property; otherwise, <see langword="false" />.</span></span></param>
        <param name="isMetaProperty">
          <span data-ttu-id="543bc-160"><see langword="true" /> para definir a propriedade como uma propriedade meta; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="543bc-160"><see langword="true" /> to set the property as a meta property; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="543bc-161">Define um novo nome e o tipo como uma propriedade na classe especificada.</span><span class="sxs-lookup"><span data-stu-id="543bc-161">Sets a new name and type to a property on the specified class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateTypeName">
      <MemberSignature Language="C#" Value="public void UpdateTypeName (string oldClassName, string newClassName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateTypeName(string oldClassName, string newClassName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.IMemberCreationService.UpdateTypeName(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateTypeName (oldClassName As String, newClassName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateTypeName(System::String ^ oldClassName, System::String ^ newClassName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldClassName" Type="System.String" />
        <Parameter Name="newClassName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="oldClassName"><span data-ttu-id="543bc-162">Uma cadeia de caracteres que contém o nome existente da classe.</span><span class="sxs-lookup"><span data-stu-id="543bc-162">A string that contains the existing name of the class.</span></span></param>
        <param name="newClassName"><span data-ttu-id="543bc-163">Uma cadeia de caracteres que contém o novo nome a ser atribuído à classe.</span><span class="sxs-lookup"><span data-stu-id="543bc-163">A string that contains the new name to assign to the class.</span></span></param>
        <summary><span data-ttu-id="543bc-164">Atualiza o nome da classe especificada.</span><span class="sxs-lookup"><span data-stu-id="543bc-164">Updates the name of the specified class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>