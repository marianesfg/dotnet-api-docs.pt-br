<Type Name="CompositeDesignerTheme" FullName="System.Workflow.ComponentModel.Design.CompositeDesignerTheme">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="21afa217ae5a3239dd931fbcf612b7d79445a1ec" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37738459" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CompositeDesignerTheme : System.Workflow.ComponentModel.Design.ActivityDesignerTheme" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CompositeDesignerTheme extends System.Workflow.ComponentModel.Design.ActivityDesignerTheme" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.ComponentModel.Design.CompositeDesignerTheme" />
  <TypeSignature Language="VB.NET" Value="Public Class CompositeDesignerTheme&#xA;Inherits ActivityDesignerTheme" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompositeDesignerTheme : System::Workflow::ComponentModel::Design::ActivityDesignerTheme" />
  <TypeSignature Language="F#" Value="type CompositeDesignerTheme = class&#xA;    inherit ActivityDesignerTheme" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Workflow.ComponentModel.Design.ActivityDesignerTheme</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fornece configurações de tema para objetos <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 O <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> classe controla a aparência de um <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner> objeto em uma superfície de design de fluxo de trabalho.  
  
   
  
## Examples  
 O exemplo a seguir mostra como criar um personalizado <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> derivando de <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> classe e definir as propriedades adequadas para o novo tema.  
  
 [!code-csharp[WF_Samples#30](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#30)]
 [!code-vb[WF_Samples#30](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#30)]  
  
 Para usar o tema em um <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>, se aplicam a <xref:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute> para o <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner> classe.  
  
 [!code-csharp[WF_Samples#24](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#24)]
 [!code-vb[WF_Samples#24](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#24)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositeDesignerTheme (System.Workflow.ComponentModel.Design.WorkflowTheme theme);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Workflow.ComponentModel.Design.WorkflowTheme theme) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.#ctor(System.Workflow.ComponentModel.Design.WorkflowTheme)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (theme As WorkflowTheme)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompositeDesignerTheme(System::Workflow::ComponentModel::Design::WorkflowTheme ^ theme);" />
      <MemberSignature Language="F#" Value="new System.Workflow.ComponentModel.Design.CompositeDesignerTheme : System.Workflow.ComponentModel.Design.WorkflowTheme -&gt; System.Workflow.ComponentModel.Design.CompositeDesignerTheme" Usage="new System.Workflow.ComponentModel.Design.CompositeDesignerTheme theme" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="theme" Type="System.Workflow.ComponentModel.Design.WorkflowTheme" />
      </Parameters>
      <Docs>
        <param name="theme">O <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> a ser associado ao tema do designer de composição.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerTheme" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir mostra como criar um personalizado <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> derivando de <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> classe e definir as propriedades adequadas para o novo tema.  
  
 [!code-csharp[WF_Samples#30](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#30)]
 [!code-vb[WF_Samples#30](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#30)]  
  
 Para usar o tema em um <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>, se aplicam a <xref:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute> para o <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner> classe.  
  
 [!code-csharp[WF_Samples#24](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#24)]
 [!code-vb[WF_Samples#24](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectorEndCap">
      <MemberSignature Language="C#" Value="public virtual System.Workflow.ComponentModel.Design.LineAnchor ConnectorEndCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Workflow.ComponentModel.Design.LineAnchor ConnectorEndCap" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ConnectorEndCap" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ConnectorEndCap As LineAnchor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Workflow::ComponentModel::Design::LineAnchor ConnectorEndCap { System::Workflow::ComponentModel::Design::LineAnchor get(); void set(System::Workflow::ComponentModel::Design::LineAnchor value); };" />
      <MemberSignature Language="F#" Value="member this.ConnectorEndCap : System.Workflow.ComponentModel.Design.LineAnchor with get, set" Usage="System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ConnectorEndCap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(12)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Design.LineAnchor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que determina a forma que aparece no final de um conector.</summary>
        <value>Um <see cref="T:System.Workflow.ComponentModel.Design.LineAnchor" /> valor de enumeração que define a forma que aparece no final do conector. O valor padrão é <see cref="F:System.Workflow.ComponentModel.Design.LineAnchor.ArrowAnchor" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir mostra como criar um personalizado <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> derivando de <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> classe e definir as propriedades adequadas para o novo tema.  
  
 [!code-csharp[WF_Samples#30](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#30)]
 [!code-vb[WF_Samples#30](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#30)]  
  
 Para usar o tema em um <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>, se aplicam a <xref:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute> para o <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner> classe.  
  
 [!code-csharp[WF_Samples#24](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#24)]
 [!code-vb[WF_Samples#24](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectorSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Size ConnectorSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size ConnectorSize" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ConnectorSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ConnectorSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Size ConnectorSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.ConnectorSize : System.Drawing.Size" Usage="System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ConnectorSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o <see cref="T:System.Drawing.Size" /> do conector.</summary>
        <value>Um <see cref="T:System.Drawing.Size" /> objeto que contém informações sobre a altura e largura do conector.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectorStartCap">
      <MemberSignature Language="C#" Value="public virtual System.Workflow.ComponentModel.Design.LineAnchor ConnectorStartCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Workflow.ComponentModel.Design.LineAnchor ConnectorStartCap" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ConnectorStartCap" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ConnectorStartCap As LineAnchor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Workflow::ComponentModel::Design::LineAnchor ConnectorStartCap { System::Workflow::ComponentModel::Design::LineAnchor get(); void set(System::Workflow::ComponentModel::Design::LineAnchor value); };" />
      <MemberSignature Language="F#" Value="member this.ConnectorStartCap : System.Workflow.ComponentModel.Design.LineAnchor with get, set" Usage="System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ConnectorStartCap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(11)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Design.LineAnchor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que determina a forma que aparece no início de um conector.</summary>
        <value>Um <see cref="T:System.Workflow.ComponentModel.Design.LineAnchor" /> valor de enumeração que define a forma que aparece no início do conector. O valor padrão é <see cref="F:System.Workflow.ComponentModel.Design.LineAnchor.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir mostra como criar um personalizado <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> derivando de <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> classe e definir as propriedades adequadas para o novo tema.  
  
 [!code-csharp[WF_Samples#30](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#30)]
 [!code-vb[WF_Samples#30](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#30)]  
  
 Para usar o tema em um <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>, se aplicam a <xref:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute> para o <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner> classe.  
  
 [!code-csharp[WF_Samples#24](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#24)]
 [!code-vb[WF_Samples#24](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="compositeDesignerTheme.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
        <summary>Libera os recursos não gerenciados usados pelo <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerTheme" /> e opcionalmente libera os recursos gerenciados.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpandButtonSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Size ExpandButtonSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size ExpandButtonSize" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ExpandButtonSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ExpandButtonSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Size ExpandButtonSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.ExpandButtonSize : System.Drawing.Size" Usage="System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ExpandButtonSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o <see cref="T:System.Drawing.Size" /> do botão de expansão no designer de atividade de composição.</summary>
        <value>Um <see cref="T:System.Drawing.Size" /> objeto que contém informações sobre a altura e largura do botão de expansão no <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExpandButtonBackgroundBrush">
      <MemberSignature Language="C#" Value="public System.Drawing.Brush GetExpandButtonBackgroundBrush (System.Drawing.Rectangle rectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Brush GetExpandButtonBackgroundBrush(valuetype System.Drawing.Rectangle rectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.GetExpandButtonBackgroundBrush(System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Brush ^ GetExpandButtonBackgroundBrush(System::Drawing::Rectangle rectangle);" />
      <MemberSignature Language="F#" Value="member this.GetExpandButtonBackgroundBrush : System.Drawing.Rectangle -&gt; System.Drawing.Brush" Usage="compositeDesignerTheme.GetExpandButtonBackgroundBrush rectangle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Brush</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rectangle">O <see cref="T:System.Drawing.Rectangle" /> que define os limites do botão de expansão no <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</param>
        <summary>Recupera um pincel que define as propriedades de exibição da tela de fundo do botão de expansão no designer de atividade de composição.</summary>
        <returns>Um objeto <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> que usa o parâmetro <paramref name="rectangle" /> para definir a área do botão na qual o pincel aplica duas cores em um gradiente linear do canto superior esquerdo para o canto inferior direito do botão de expansão.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o pincel do plano de fundo para o botão de expansão não está definido como `null` (`Nothing` no Visual Basic) antes de <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.GetExpandButtonBackgroundBrush%2A> é chamado, descarta o método do pincel anterior e cria um novo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.Initialize" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Initialize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Initialize();" />
      <MemberSignature Language="F#" Value="override this.Initialize : unit -&gt; unit" Usage="compositeDesignerTheme.Initialize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Executa tarefas de inicialização adicionais além das fornecidas pelo construtor <see cref="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.#ctor(System.Workflow.ComponentModel.Design.WorkflowTheme)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o <xref:System.Workflow.ComponentModel.Design.AmbientTheme.UseOperatingSystemSettings%2A> estiver definida como `true`, o <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.Initialize%2A> método obtém as configurações para o <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> objeto do sistema operacional.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAmbientPropertyChanged">
      <MemberSignature Language="C#" Value="public override void OnAmbientPropertyChanged (System.Workflow.ComponentModel.Design.AmbientProperty ambientProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void OnAmbientPropertyChanged(valuetype System.Workflow.ComponentModel.Design.AmbientProperty ambientProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.OnAmbientPropertyChanged(System.Workflow.ComponentModel.Design.AmbientProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void OnAmbientPropertyChanged(System::Workflow::ComponentModel::Design::AmbientProperty ambientProperty);" />
      <MemberSignature Language="F#" Value="override this.OnAmbientPropertyChanged : System.Workflow.ComponentModel.Design.AmbientProperty -&gt; unit" Usage="compositeDesignerTheme.OnAmbientPropertyChanged ambientProperty" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ambientProperty" Type="System.Workflow.ComponentModel.Design.AmbientProperty" />
      </Parameters>
      <Docs>
        <param name="ambientProperty">O valor de enumeração <see cref="T:System.Workflow.ComponentModel.Design.AmbientProperty" /> que o tema de designer de composição agora deve usar.</param>
        <summary>Notifica o objeto <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerTheme" /> de que as configurações de propriedade do ambiente para o designer foram alteradas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando este método é chamado, ele define o <xref:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.BackColorStart%2A> e <xref:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.BackColorEnd%2A> propriedades a serem <xref:System.Drawing.Color.Empty>.  
  
 O <xref:System.Workflow.ComponentModel.Design.AmbientProperty> enumeração determina onde o tema de designer obtém suas configurações de propriedade de ambiente. Se o <xref:System.Workflow.ComponentModel.Design.AmbientProperty.DesignerSize> valor estiver definido, a classe de tema do designer obtém suas configurações de ambientes do <xref:System.Workflow.ComponentModel.Design.WorkflowTheme.AmbientTheme%2A> propriedade. Se o <xref:System.Workflow.ComponentModel.Design.AmbientProperty.DesignerSize> valor estiver definido, a classe de tema do designer obtém suas configurações de ambientes do sistema operacional no qual o designer está instalado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowDropShadow">
      <MemberSignature Language="C#" Value="public virtual bool ShowDropShadow { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowDropShadow" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ShowDropShadow" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ShowDropShadow As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ShowDropShadow { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowDropShadow : bool with get, set" Usage="System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ShowDropShadow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(10)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se o tema de designer de composição exibirá sombras ao redor do designer de atividade de composição.</summary>
        <value>
          <see langword="true" /> Se o <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerTheme" /> exibe sombras em todo o <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir mostra como criar um personalizado <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> derivando de <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> classe e definir as propriedades adequadas para o novo tema.  
  
 [!code-csharp[WF_Samples#30](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#30)]
 [!code-vb[WF_Samples#30](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#30)]  
  
 Para usar o tema em um <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>, se aplicam a <xref:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute> para o <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner> classe.  
  
 [!code-csharp[WF_Samples#24](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#24)]
 [!code-vb[WF_Samples#24](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WatermarkAlignment">
      <MemberSignature Language="C#" Value="public virtual System.Workflow.ComponentModel.Design.DesignerContentAlignment WatermarkAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Workflow.ComponentModel.Design.DesignerContentAlignment WatermarkAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property WatermarkAlignment As DesignerContentAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Workflow::ComponentModel::Design::DesignerContentAlignment WatermarkAlignment { System::Workflow::ComponentModel::Design::DesignerContentAlignment get(); void set(System::Workflow::ComponentModel::Design::DesignerContentAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.WatermarkAlignment : System.Workflow.ComponentModel.Design.DesignerContentAlignment with get, set" Usage="System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(9)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Design.DesignerContentAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o alinhamento da imagem de marca-d'água no <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</summary>
        <value>Um <see cref="T:System.Workflow.ComponentModel.Design.DesignerContentAlignment" /> valor de enumeração que indica onde no <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> será colocada na imagem de marca d'água. O valor padrão é <see cref="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.BottomRight" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir mostra como criar um personalizado <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> derivando de <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> classe e definir as propriedades adequadas para o novo tema.  
  
 [!code-csharp[WF_Samples#30](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#30)]
 [!code-vb[WF_Samples#30](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#30)]  
  
 Para usar o tema em um <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>, se aplicam a <xref:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute> para o <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner> classe.  
  
 [!code-csharp[WF_Samples#24](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#24)]
 [!code-vb[WF_Samples#24](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WatermarkImage">
      <MemberSignature Language="C#" Value="public System.Drawing.Image WatermarkImage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image WatermarkImage" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkImage" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WatermarkImage As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Image ^ WatermarkImage { System::Drawing::Image ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WatermarkImage : System.Drawing.Image" Usage="System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a imagem de marca-d'água a ser usada no designer de atividade de composição.</summary>
        <value>O <see cref="T:System.Drawing.Image" /> objeto a ser usado como a marca d'água para o <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkImagePath%2A> é o valor da propriedade `null` (`Nothing` no Visual Basic) esta propriedade fornecerá a imagem para a marca d'água. Se o <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkImagePath%2A> estiver definida como um valor válido, essa propriedade é definida como `null` (`Nothing`).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WatermarkImagePath">
      <MemberSignature Language="C#" Value="public virtual string WatermarkImagePath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WatermarkImagePath" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkImagePath" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property WatermarkImagePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ WatermarkImagePath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.WatermarkImagePath : string with get, set" Usage="System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkImagePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor(typeof(System.Workflow.ComponentModel.Design.ImageBrowserEditor), typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o caminho relativo para a imagem de marca-d'água a ser usada no designer de atividade de composição.</summary>
        <value>Um valor de cadeia de caracteres que representa o caminho relativo para a imagem de marca d'água a ser usada no <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir mostra como criar um personalizado <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> derivando de <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> classe e definir as propriedades adequadas para o novo tema.  
  
 [!code-csharp[WF_Samples#24](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#24)]
 [!code-vb[WF_Samples#24](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#24)]  
  
 Para usar o tema em um <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>, se aplicam a <xref:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute> para o <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner> classe.  
  
 [!code-csharp[WF_Samples#24](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#24)]
 [!code-vb[WF_Samples#24](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>