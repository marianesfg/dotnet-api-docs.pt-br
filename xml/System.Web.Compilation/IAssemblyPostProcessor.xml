<Type Name="IAssemblyPostProcessor" FullName="System.Web.Compilation.IAssemblyPostProcessor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ad9a75c0e2153f517afbada4d570c0a97f64f859" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64148098" /></Metadata><TypeSignature Language="C#" Value="public interface IAssemblyPostProcessor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAssemblyPostProcessor implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.IAssemblyPostProcessor" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAssemblyPostProcessor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAssemblyPostProcessor : IDisposable" />
  <TypeSignature Language="F#" Value="type IAssemblyPostProcessor = interface&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Define o método implementado por uma classe para processar um assembly depois que o assembly foi compilado.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma classe que implementa essa interface pode acessar um assembly depois que ele foi compilado. O <xref:System.Web.Compilation.AssemblyBuilder> classe compila assemblies e, em seguida, verifica para ver se um <xref:System.Web.Compilation.IAssemblyPostProcessor> interface foi registrada no arquivo de configuração Web. Nesse caso, o <xref:System.Web.Compilation.AssemblyBuilder> chamadas da instância do <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> método para o <xref:System.Web.Compilation.IAssemblyPostProcessor> interface para realizar qualquer ação após a compilação e antes de carregar o assembly. Por exemplo, uma ferramenta de criador de perfil pode implementar essa interface para estabelecer testes no assembly.  
  
 Quando um <xref:System.Web.Compilation.IAssemblyPostProcessor> interface é registrado, o aplicativo ASP.NET e seus assemblies serão sempre compilados no modo de depuração.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como criar uma implementação do <xref:System.Web.Compilation.IAssemblyPostProcessor> de interface e registrá-lo no arquivo Web. config de um aplicativo Web.  
  
 A primeira parte do exemplo de código cria uma classe chamada `Samples.Process.postProcessTest` que implementa o <xref:System.Web.Compilation.IAssemblyPostProcessor> interface. Esta classe executa a ação simple de escrever um arquivo quando o <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> método é chamado.  
  
 [!code-csharp[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/CS/postProcessTest.cs#1)]
 [!code-vb[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/VB/postProcessTest.vb#1)]  
  
 Compilar a classe em um arquivo. dll com o comando `csc /target:library postProcessTest.cs`. Adicione o arquivo. dll resultante para a pasta Bin de um aplicativo ASP.NET e registrar o arquivo. dll no arquivo Web. config, conforme mostrado no código a seguir.  
  
```  
<compilation debug="true" assemblyPostProcessorType="Samples.Process.postProcessTest" />  
```  
  
 Quando um usuário visita o site da Web, o aplicativo Web é compilado dinamicamente e o arquivo MyTest. txt será gravado para C:\compile.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="PostProcessAssembly">
      <MemberSignature Language="C#" Value="public void PostProcessAssembly (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostProcessAssembly(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostProcessAssembly (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostProcessAssembly(System::String ^ path);" />
      <MemberSignature Language="F#" Value="abstract member PostProcessAssembly : string -&gt; unit" Usage="iAssemblyPostProcessor.PostProcessAssembly path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">O caminho para o assembly.</param>
        <summary>Chamado antes de o assembly ser carregado para permitir que a classe de implementação modifique o assembly.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Compilation.AssemblyBuilder> classe chama esse método depois que o assembly foi compilado. As ações a serem tomadas antes de carregar o assembly devem ser incluídas nesse método.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como criar uma implementação do <xref:System.Web.Compilation.IAssemblyPostProcessor> de interface e registrá-lo no arquivo Web. config de um aplicativo Web.  
  
 A primeira parte do exemplo de código cria uma classe chamada `Samples.Process.postProcessTest` que implementa o <xref:System.Web.Compilation.IAssemblyPostProcessor> interface. Esta classe executa a ação simple de escrever um arquivo quando o <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> método é chamado.  
  
 [!code-csharp[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/CS/postProcessTest.cs#1)]
 [!code-vb[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/VB/postProcessTest.vb#1)]  
  
 Compilar a classe em um arquivo. dll com o comando `csc /target:library postProcessTest.cs`. Adicione o arquivo. dll resultante para a pasta Bin de um aplicativo ASP.NET e registrar o arquivo. dll no arquivo Web. config, conforme mostrado no código a seguir.  
  
```  
<compilation debug="true" assemblyPostProcessorType="Samples.Process.postProcessTest" />  
```  
  
 Quando um usuário visita o site da Web, o aplicativo Web é compilado dinamicamente e o arquivo MyTest. txt será gravado para C:\compile.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>