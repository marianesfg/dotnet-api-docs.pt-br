<Type Name="ClientBuildManagerParameter" FullName="System.Web.Compilation.ClientBuildManagerParameter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="06945cb4d38c7601f64dbbb9f74498967153c396" />
    <Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="11/27/2018" />
    <Meta Name="ms.locfileid" Value="52357282" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ClientBuildManagerParameter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ClientBuildManagerParameter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.ClientBuildManagerParameter" />
  <TypeSignature Language="VB.NET" Value="Public Class ClientBuildManagerParameter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClientBuildManagerParameter" />
  <TypeSignature Language="F#" Value="type ClientBuildManagerParameter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Contém valores passados para o compilador do ASP.NET durante a pré-compilação.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Páginas da Web ASP.NET e arquivos de código podem ser pré-compilados para facilitar uma resposta mais rápida para usuários e permitem a implantação do site sem implantar o código-fonte. Para obter mais informações sobre como pré-compilar um site ASP.NET, consulte [visão geral de pré-compilação de projeto de Site da Web ASP.NET](https://msdn.microsoft.com/library/a88e56f9-b232-47c5-92e0-f9674ed15e5a).  
  
 O <xref:System.Web.Compilation.ClientBuildManagerParameter> classe armazena valores que são usados durante a pré-compilação. O <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> propriedade determina como o assembly será criado. Por exemplo, você pode definir <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> à <xref:System.Web.Compilation.PrecompilationFlags.Clean> recompilar os componentes anteriormente compilados, ou defina-o como <xref:System.Web.Compilation.PrecompilationFlags.OverwriteTarget> para permitir que o assembly resultante para substituir todos os componentes no diretório de destino. O <xref:System.Web.Compilation.PrecompilationFlags> enumerador tem um <xref:System.FlagsAttribute> atributo que permite uma combinação bit a bit dos valores de membros. O <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> propriedade pode conter mais de um valor da <xref:System.Web.Compilation.PrecompilationFlags> enumeração para especificar uma combinação dos comportamentos de pré-compilação.  
  
 Ambos os <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A> propriedade ou o <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A> propriedade é atribuída um valor para criar um assembly de nome forte. Ambos os valores não precisam ser definidas para criar um assembly de nome forte.  
  
 Um <xref:System.Web.Compilation.ClientBuildManagerParameter> objeto é passado para o <xref:System.Web.Compilation.ClientBuildManager> por meio do objeto a <xref:System.Web.Compilation.ClientBuildManager.%23ctor%2A> construtor.  
  
   
  
## Examples  
 O exemplo de código a seguir é parte de um exemplo de código encontrado no <xref:System.Web.Compilation.ClientBuildManager> visão geral da classe. No exemplo, um <xref:System.Web.Compilation.ClientBuildManagerParameter> objeto é criado e seus valores definidos. O assembly resultante terá um nome forte com base no arquivo de chave fornecido e será pré-compilar de acordo com os fornecidos <xref:System.Web.Compilation.PrecompilationFlags> valores.  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/CS/source.cs#2)]
 [!code-vb[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/VB/source.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
    <altmember cref="T:System.Web.Compilation.PrecompilationFlags" />
    <related type="Article" href="https://msdn.microsoft.com/library/a88e56f9-b232-47c5-92e0-f9674ed15e5a">Pré-compilação de Site da Web ASP.NET</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClientBuildManagerParameter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ClientBuildManagerParameter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClientBuildManagerParameter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Web.Compilation.ClientBuildManagerParameter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este construtor não inicializar quaisquer valores de propriedade. Esses valores devem ser definidos por meio de <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A>, <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A>, e <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> propriedades após o objeto foi criado.  
  
   
  
## Examples  
 O exemplo de código a seguir é parte de um exemplo de código encontrado no <xref:System.Web.Compilation.ClientBuildManager> visão geral da classe. No exemplo, um <xref:System.Web.Compilation.ClientBuildManagerParameter> objeto é criado e seus valores definidos. O assembly resultante terá um nome forte com base no arquivo de chave fornecido e será pré-compilar de acordo com os fornecidos <xref:System.Web.Compilation.PrecompilationFlags> valores.  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/CS/source.cs#2)]
 [!code-vb[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExcludedVirtualPaths">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;string&gt; ExcludedVirtualPaths { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.List`1&lt;string&gt; ExcludedVirtualPaths" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ClientBuildManagerParameter.ExcludedVirtualPaths" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExcludedVirtualPaths As List(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::List&lt;System::String ^&gt; ^ ExcludedVirtualPaths { System::Collections::Generic::List&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExcludedVirtualPaths : System.Collections.Generic.List&lt;string&gt;" Usage="System.Web.Compilation.ClientBuildManagerParameter.ExcludedVirtualPaths" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define caminhos virtuais excluídos.</summary>
        <value>Caminhos virtuais excluídos.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrecompilationFlags">
      <MemberSignature Language="C#" Value="public System.Web.Compilation.PrecompilationFlags PrecompilationFlags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Compilation.PrecompilationFlags PrecompilationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Property PrecompilationFlags As PrecompilationFlags" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Compilation::PrecompilationFlags PrecompilationFlags { System::Web::Compilation::PrecompilationFlags get(); void set(System::Web::Compilation::PrecompilationFlags value); };" />
      <MemberSignature Language="F#" Value="member this.PrecompilationFlags : System.Web.Compilation.PrecompilationFlags with get, set" Usage="System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Compilation.PrecompilationFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define os sinalizadores que determinam o comportamento de pré-compilação.</summary>
        <value>O <see cref="T:System.Web.Compilation.PrecompilationFlags" /> para uma compilação do cliente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> propriedade determina como o assembly será criado. Por exemplo, você pode definir <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> à <xref:System.Web.Compilation.PrecompilationFlags.Clean> recompilar os componentes anteriormente compilados, ou defina-o como <xref:System.Web.Compilation.PrecompilationFlags.OverwriteTarget> para permitir que o assembly resultante para substituir todos os componentes no diretório de destino. O <xref:System.Web.Compilation.PrecompilationFlags> enumerador tem um <xref:System.FlagsAttribute> atributo que permite uma combinação bit a bit dos valores de membros. O <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> propriedade pode conter mais de um valor da <xref:System.Web.Compilation.PrecompilationFlags> enumeração para especificar uma combinação dos comportamentos de pré-compilação.  
  
   
  
## Examples  
 O exemplo de código a seguir é parte de um exemplo de código encontrado no <xref:System.Web.Compilation.ClientBuildManager> visão geral da classe. No exemplo, um <xref:System.Web.Compilation.ClientBuildManagerParameter> objeto é criado e seus valores definidos. O assembly resultante terá um nome forte com base no arquivo de chave fornecido e será pré-compilar de acordo com os fornecidos <xref:System.Web.Compilation.PrecompilationFlags> valores.  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/CS/source.cs#2)]
 [!code-vb[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
        <altmember cref="T:System.Web.Compilation.PrecompilationFlags" />
        <related type="Article" href="https://msdn.microsoft.com/library/a88e56f9-b232-47c5-92e0-f9674ed15e5a">Pré-compilação de Site da Web ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="StrongNameKeyContainer">
      <MemberSignature Language="C#" Value="public string StrongNameKeyContainer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StrongNameKeyContainer" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer" />
      <MemberSignature Language="VB.NET" Value="Public Property StrongNameKeyContainer As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StrongNameKeyContainer { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StrongNameKeyContainer : string with get, set" Usage="System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o contêiner de chave usado durante a compilação.</summary>
        <value>Um <see cref="T:System.String" /> do valor para o contêiner de chave.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ambos os <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A> propriedade ou o <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A> propriedade é atribuída um valor para criar um assembly de nome forte. Ambos os valores não precisam ser definidas para criar um assembly de nome forte.  
  
   
  
## Examples  
 O exemplo de código a seguir é semelhante ao exemplo de código encontrado no <xref:System.Web.Compilation.ClientBuildManager> visão geral da classe, exceto que o assembly resultante terá um nome forte com base no contêiner de chave fornecido. Ele será pré-compilar acordo com os fornecidos <xref:System.Web.Compilation.PrecompilationFlags> valores.  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager_2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager_2/CS/source.cs#1)]
 [!code-vb[System.Web.Compilation.ClientBuildManager_2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager_2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
        <altmember cref="T:System.Web.Compilation.PrecompilationFlags" />
        <related type="Article" href="https://msdn.microsoft.com/library/a88e56f9-b232-47c5-92e0-f9674ed15e5a">Pré-compilação de Site da Web ASP.NET</related>
        <related type="Article" href="https://msdn.microsoft.com/library/f3022b39-f17f-48c1-b067-025eab0ce8bc">Importando e exportando protegido configuração recipientes de chave RSA</related>
      </Docs>
    </Member>
    <Member MemberName="StrongNameKeyFile">
      <MemberSignature Language="C#" Value="public string StrongNameKeyFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StrongNameKeyFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile" />
      <MemberSignature Language="VB.NET" Value="Public Property StrongNameKeyFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StrongNameKeyFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StrongNameKeyFile : string with get, set" Usage="System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o arquivo de chave usado durante a compilação.</summary>
        <value>Um <see cref="T:System.String" /> do valor para o arquivo de chave.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ambos os <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A> propriedade ou o <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A> propriedade é atribuída um valor para criar um assembly de nome forte. Ambos os valores não precisam ser definidas para criar um assembly de nome forte.  
  
   
  
## Examples  
 O exemplo de código a seguir é parte de um exemplo de código encontrado no <xref:System.Web.Compilation.ClientBuildManager> visão geral da classe. No exemplo, um <xref:System.Web.Compilation.ClientBuildManagerParameter> objeto é criado e seus valores definidos. O assembly resultante terá um nome forte com base no arquivo de chave fornecido e será pré-compilar de acordo com os fornecidos <xref:System.Web.Compilation.PrecompilationFlags> valores.  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/CS/source.cs#2)]
 [!code-vb[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
        <altmember cref="T:System.Web.Compilation.PrecompilationFlags" />
        <related type="Article" href="https://msdn.microsoft.com/library/a88e56f9-b232-47c5-92e0-f9674ed15e5a">Pré-compilação de Site da Web ASP.NET</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ffbf6d9e-4a88-4a8a-9645-4ce0ee1ee5f9">Criando e usando assemblies de nomes fortes</related>
      </Docs>
    </Member>
  </Members>
</Type>