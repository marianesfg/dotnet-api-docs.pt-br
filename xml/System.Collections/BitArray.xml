<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="BitArray.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5056363895a01ed4f3d85a3d6c19a8aa8cb07f553.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">056363895a01ed4f3d85a3d6c19a8aa8cb07f553</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Collections.BitArray">
          <source>Manages a compact array of bit values, which are represented as Booleans, where <ph id="ph1">&lt;see langword="true" /&gt;</ph> indicates that the bit is on (1) and <ph id="ph2">&lt;see langword="false" /&gt;</ph> indicates the bit is off (0).</source>
          <target state="translated">Gerencia uma matriz compacta de valores em bits, que é representada com boolianos, em que <ph id="ph1">&lt;see langword="true" /&gt;</ph> indica que o bit está em (1) e <ph id="ph2">&lt;see langword="false" /&gt;</ph> indica que o bit está desativado (0).</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> class is a collection class in which the capacity is always the same as the count.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> classe é uma classe de coleção na qual a capacidade é sempre o mesmo que a contagem.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source>Elements are added to a <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> by increasing the <ph id="ph2">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> property; elements are deleted by decreasing the <ph id="ph3">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> property.</source>
          <target state="translated">Os elementos são adicionados a um <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> aumentando o <ph id="ph2">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> propriedade; elementos são excluídos diminuindo o <ph id="ph3">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source>The size of a <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> is controlled by the client; indexing past the end of the <ph id="ph2">&lt;xref:System.Collections.BitArray&gt;</ph> throws an <ph id="ph3">&lt;xref:System.ArgumentException&gt;</ph>.The <ph id="ph4">&lt;xref:System.Collections.BitArray&gt;</ph> class provides methods that are not found in other collections, including those that allow multiple elements to be modified at once using a filter, such as <ph id="ph5">&lt;xref:System.Collections.BitArray.And%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.BitArray.Or%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Collections.BitArray.Xor%2A&gt;</ph> , <ph id="ph8">&lt;xref:System.Collections.BitArray.Not%2A&gt;</ph>, and <ph id="ph9">&lt;xref:System.Collections.BitArray.SetAll%2A&gt;</ph>.</source>
          <target state="translated">O tamanho de um <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> é controlado pelo cliente; indexação após o término do <ph id="ph2">&lt;xref:System.Collections.BitArray&gt;</ph> lança um <ph id="ph3">&lt;xref:System.ArgumentException&gt;</ph>. O <ph id="ph4">&lt;xref:System.Collections.BitArray&gt;</ph> classe fornece métodos que não são encontrados em outras coleções, incluindo aqueles que permitem que vários elementos sejam modificados ao mesmo tempo usando um filtro, como <ph id="ph5">&lt;xref:System.Collections.BitArray.And%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.BitArray.Or%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Collections.BitArray.Xor%2A&gt;</ph> , <ph id="ph8">&lt;xref:System.Collections.BitArray.Not%2A&gt;</ph>, e <ph id="ph9">&lt;xref:System.Collections.BitArray.SetAll%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> class is a structure that provides the same functionality as <ph id="ph2">&lt;xref:System.Collections.BitArray&gt;</ph>, but with faster performance.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> classe é uma estrutura que fornece a mesma funcionalidade que <ph id="ph2">&lt;xref:System.Collections.BitArray&gt;</ph>, mas com um desempenho mais rápido.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source><ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> is faster because it is a value type and therefore allocated on the stack, whereas <ph id="ph2">&lt;xref:System.Collections.BitArray&gt;</ph> is a reference type and, therefore, allocated on the heap.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> é mais rápido porque é um tipo de valor e, portanto, alocado na pilha, enquanto <ph id="ph2">&lt;xref:System.Collections.BitArray&gt;</ph> é um tipo de referência e, portanto, alocado no heap.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source><ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32?displayProperty=nameWithType&gt;</ph> can store exactly 32 bits, whereas <ph id="ph2">&lt;xref:System.Collections.BitArray&gt;</ph> can store a variable number of bits.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32?displayProperty=nameWithType&gt;</ph> pode armazenar exatamente 32 bits, enquanto <ph id="ph2">&lt;xref:System.Collections.BitArray&gt;</ph> pode armazenar um número de bits variável.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source><ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> stores both bit flags and small integers, thereby making it ideal for data that is not exposed to the user.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> armazena sinalizadores de bit e inteiros pequenos, tornando-o assim ideal para dados que não são expostos ao usuário.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source>However, if the number of required bit flags is unknown, is variable, or is greater than 32, use <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> instead.</source>
          <target state="translated">No entanto, se o número de sinalizadores de bit necessário for desconhecido, é a variável ou é maior do que 32, use <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> em vez disso.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source><ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> is in the <ph id="ph2">&lt;xref:System.Collections&gt;</ph> namespace; <ph id="ph3">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> is in the <ph id="ph4">&lt;xref:System.Collections.Specialized&gt;</ph> namespace.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> está no <ph id="ph2">&lt;xref:System.Collections&gt;</ph> namespace; <ph id="ph3">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> está no <ph id="ph4">&lt;xref:System.Collections.Specialized&gt;</ph> namespace.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source>Elements in this collection can be accessed using an integer index.</source>
          <target state="translated">Elementos nesta coleção podem ser acessados usando um índice de inteiro.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source>Indexes in this collection are zero-based.</source>
          <target state="translated">Índices nesta coleção são baseadas em zero.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source>The following code example shows how to create and initialize a <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> and how to print out its values.</source>
          <target state="translated">O exemplo de código a seguir mostra como criar e inicializar um <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> e como imprimir seus valores.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source>Public static (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) members of this type are thread safe.</source>
          <target state="translated">Os membros estáticos públicos (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> no Visual Basic) desse são thread-safe.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source>Any instance members are not guaranteed to be thread safe.</source>
          <target state="translated">Não há garantia de que qualquer membro de instância seja thread-safe.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source>This implementation does not provide a synchronized (thread safe) wrapper for a <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">Esta implementação não oferece um sincronizado wrapper (thread-safe) para um <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">A enumeração por meio de uma coleção não é um procedimento thread-safe intrínseco.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">Mesmo quando uma coleção está sincronizada, outros threads ainda podem modificar a coleção, o que faz o enumerador lançar uma exceção.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">Para garantir thread-safe durante a enumeração, é possível bloquear a coleção durante toda a enumeração ou verificar as exceções resultantes das alterações feitas por outros threads.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="T:System.Collections.BitArray">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> class whose capacity and initial values can be specified.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> cuja capacidade e valores inicias podem ser especificados.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Boolean[])">
          <source>An array of Booleans to copy.</source>
          <target state="translated">Uma matriz de boolianos a serem copiados.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Boolean[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> class that contains bit values copied from the specified array of Booleans.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> que contém valores de bit copiados da matriz de boolianos especificada.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.#ctor(System.Boolean[])">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in <ph id="ph3">`values`</ph>.</source>
          <target state="translated">Este construtor é um O (<ph id="ph1">`n`</ph>) operação, onde <ph id="ph2">`n`</ph> é o número de elementos em <ph id="ph3">`values`</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Boolean[])">
          <source><ph id="ph1">&lt;paramref name="values" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="values" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Byte[])">
          <source>An array of bytes containing the values to copy, where each byte represents eight consecutive bits.</source>
          <target state="translated">Uma matriz de bytes que contém os valores a se copiar, em que cada byte representa oito bits consecutivos.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Byte[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> class that contains bit values copied from the specified array of bytes.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> que contém valores de bit copiados da matriz de bytes especificada.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.#ctor(System.Byte[])">
          <source>The first byte in the array represents bits 0 through 7, the second byte represents bits 8 through 15, and so on.</source>
          <target state="translated">O primeiro byte na matriz representa bits de 0 a 7, o segundo byte representa 8 15 por meio de bits e assim por diante.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.#ctor(System.Byte[])">
          <source>The Least Significant Bit of each byte represents the lowest index value: " <ph id="ph1">`bytes`</ph> [0] &amp; 1" represents bit 0, " <ph id="ph2">`bytes`</ph> [0] &amp; 2" represents bit 1, " <ph id="ph3">`bytes`</ph> [0] &amp; 4" represents bit 2, and so on.</source>
          <target state="translated">O Bit menos significativo de cada byte representa o valor de índice mais baixo: " <ph id="ph1">`bytes`</ph> [0] &amp; 1" representa o bit 0, " <ph id="ph2">`bytes`</ph> [0] &amp; 2" representa os bits 1, " <ph id="ph3">`bytes`</ph> [0] &amp;" 4" representa bit 2 e assim por diante.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.#ctor(System.Byte[])">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in <ph id="ph3">`bytes`</ph>.</source>
          <target state="translated">Este construtor é um O (<ph id="ph1">`n`</ph>) operação, onde <ph id="ph2">`n`</ph> é o número de elementos em <ph id="ph3">`bytes`</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Byte[])">
          <source>The length of <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">O comprimento de <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Collections.BitArray)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> to copy.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> para cópia.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Collections.BitArray)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> class that contains bit values copied from the specified <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> que contém valores de bit copiados do <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.#ctor(System.Collections.BitArray)">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in <ph id="ph3">`bits`</ph>.</source>
          <target state="translated">Este construtor é um O (<ph id="ph1">`n`</ph>) operação, onde <ph id="ph2">`n`</ph> é o número de elementos em <ph id="ph3">`bits`</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Collections.BitArray)">
          <source><ph id="ph1">&lt;paramref name="bits" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bits" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Int32)">
          <source>The number of bit values in the new <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">O número de valores de bit no novo <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> class that can hold the specified number of bit values, which are initially set to <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> que pode conter o número especificado de valores de bits, que são definidos inicialmente como <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.#ctor(System.Int32)">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`length`</ph>.</source>
          <target state="translated">Este construtor é um O (<ph id="ph1">`n`</ph>) operação, onde <ph id="ph2">`n`</ph> é <ph id="ph3">`length`</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="length" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="length" /&gt;</ph> é menor que zero.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Int32[])">
          <source>An array of integers containing the values to copy, where each integer represents 32 consecutive bits.</source>
          <target state="translated">Uma matriz de inteiros que contém os valores a serem copiados, em que cada inteiro representa 32 bits consecutivos.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Int32[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> class that contains bit values copied from the specified array of 32-bit integers.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> que contém valores de bit copiados da matriz especificada de inteiros de 32 bits.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.#ctor(System.Int32[])">
          <source>The number in the first <ph id="ph1">`values`</ph> array element represents bits 0 through 31, the second number in the array represents bits 32 through 63, and so on.</source>
          <target state="translated">O número na primeira <ph id="ph1">`values`</ph> elemento da matriz representa bits de 0 a 31, o segundo número na matriz representa bits 63 até 32 e assim por diante.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.#ctor(System.Int32[])">
          <source>The Least Significant Bit of each integer represents the lowest index value: " <ph id="ph1">`values`</ph> [0] &amp; 1" represents bit 0, " <ph id="ph2">`values`</ph> [0] &amp; 2" represents bit 1, " <ph id="ph3">`values`</ph> [0] &amp; 4" represents bit 2, and so on.</source>
          <target state="translated">O Bit menos significativo de cada inteiro representa o valor de índice mais baixo: " <ph id="ph1">`values`</ph> [0] &amp; 1" representa o bit 0, " <ph id="ph2">`values`</ph> [0] &amp; 2" representa os bits 1, " <ph id="ph3">`values`</ph> [0] &amp;" 4" representa bit 2 e assim por diante.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.#ctor(System.Int32[])">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in <ph id="ph3">`values`</ph>.</source>
          <target state="translated">Este construtor é um O (<ph id="ph1">`n`</ph>) operação, onde <ph id="ph2">`n`</ph> é o número de elementos em <ph id="ph3">`values`</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Int32[])">
          <source><ph id="ph1">&lt;paramref name="values" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="values" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Int32[])">
          <source>The length of <ph id="ph1">&lt;paramref name="values" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph></source>
          <target state="translated">O tamanho de <ph id="ph1">&lt;paramref name="values" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)">
          <source>The number of bit values in the new <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">O número de valores de bit no novo <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)">
          <source>The Boolean value to assign to each bit.</source>
          <target state="translated">O valor booliano a ser atribuído a cada bit.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> class that can hold the specified number of bit values, which are initially set to the specified value.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> que pode conter o número especificado de valores de bits, que são definidos inicialmente com o valor especificado.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`length`</ph>.</source>
          <target state="translated">Este construtor é um O (<ph id="ph1">`n`</ph>) operação, onde <ph id="ph2">`n`</ph> é <ph id="ph3">`length`</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="length" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="length" /&gt;</ph> é menor que zero.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.And(System.Collections.BitArray)">
          <source>The array with which to perform the bitwise AND operation.</source>
          <target state="translated">A matriz usada para executar a operação AND bit a bit.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.And(System.Collections.BitArray)">
          <source>Performs the bitwise AND operation between the elements of the current <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> object and the corresponding elements in the specified array.</source>
          <target state="translated">Executa a operação AND bit a bit entre os elementos do objeto <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> atual e os elementos correspondentes na matriz especificada.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.And(System.Collections.BitArray)">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> object will be modified to store the result of the bitwise AND operation.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> atual será modificado para armazenar o resultado da operação AND bit a bit.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.And(System.Collections.BitArray)">
          <source>An array containing the result of the bitwise AND operation, which is a reference to the current <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> object.</source>
          <target state="translated">Uma matriz que contém o resultado da operação AND bit a bit, que é uma referência ao objeto <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.And(System.Collections.BitArray)">
          <source>The bitwise AND operation returns <ph id="ph1">`true`</ph> if both operands are <ph id="ph2">`true`</ph>, and returns <ph id="ph3">`false`</ph> if one or both operands are <ph id="ph4">`false`</ph>.</source>
          <target state="translated">A operação AND bit a bit retorna <ph id="ph1">`true`</ph> se ambos os operandos forem <ph id="ph2">`true`</ph>e retorna <ph id="ph3">`false`</ph> se um ou ambos os operandos forem <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.And(System.Collections.BitArray)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método é uma operação O(<ph id="ph1">`n`</ph>), em que <ph id="ph2">`n`</ph> é <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.And(System.Collections.BitArray)">
          <source>The following code example shows how to perform the bitwise AND operation between two <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> objects.</source>
          <target state="translated">O exemplo de código a seguir mostra como executar a operação AND bit a bit entre dois <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> objetos.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.And(System.Collections.BitArray)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.And(System.Collections.BitArray)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> and the current <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> do not have the same number of elements.</source>
          <target state="translated">O <ph id="ph1">&lt;paramref name="value" /&gt;</ph> e o <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> atual não têm o mesmo número de elementos.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Clone">
          <source>Creates a shallow copy of the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">Cria uma cópia superficial do <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Clone">
          <source>A shallow copy of the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">Uma cópia superficial do <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Clone">
          <source>A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to.</source>
          <target state="translated">Uma cópia superficial de uma coleção copia apenas os elementos da coleção, se eles são tipos de referência ou tipos de valor, mas não copia os objetos que se referem as referências a.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Clone">
          <source>The references in the new collection point to the same objects that the references in the original collection point to.</source>
          <target state="translated">As referências na nova coleção apontam para os mesmos objetos que as referências na coleção original apontem para.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Clone">
          <source>In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</source>
          <target state="translated">Em contraste, uma cópia profunda de uma coleção copia os elementos e tudo direta ou indiretamente referenciado por elementos.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Clone">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método é uma operação O(<ph id="ph1">`n`</ph>), em que <ph id="ph2">`n`</ph> é <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> unidimensional que é o destino dos elementos copiados de <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> deve ter indexação com base em zero.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">O índice baseado em zero na <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> na qual a cópia começa.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source>Copies the entire <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> to a compatible one-dimensional <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at the specified index of the target array.</source>
          <target state="translated">Copia todo o <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> em um <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph> unidimensional compatível, começando no índice especificado da matriz de destino.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source>The specified array must be of a compatible type.</source>
          <target state="translated">A matriz especificada deve ser de um tipo compatível.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source>Only <ph id="ph1">`bool`</ph>, <ph id="ph2">`int`</ph>, and <ph id="ph3">`byte`</ph> types of arrays are supported.</source>
          <target state="translated">Somente <ph id="ph1">`bool`</ph>, <ph id="ph2">`int`</ph>, e <ph id="ph3">`byte`</ph> tipos de matrizes têm suporte.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph> to copy the elements.</source>
          <target state="translated">Este método usa <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph> para copiar os elementos.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método é uma operação O(<ph id="ph1">`n`</ph>), em que <ph id="ph2">`n`</ph> é <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source>The following code example shows how to copy a <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> into a one-dimensional <ph id="ph2">&lt;xref:System.Array&gt;</ph>.</source>
          <target state="translated">O exemplo de código a seguir mostra como copiar um <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> em um unidimensional <ph id="ph2">&lt;xref:System.Array&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é menor que zero.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> é multidimensional.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="index" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">O número de elementos na origem <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> é maior do que o espaço disponível de <ph id="ph2">&lt;paramref name="index" /&gt;</ph> até o final do <ph id="ph3">&lt;paramref name="array" /&gt;</ph> de destino.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">O tipo do <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> de origem não pode ser automaticamente convertido para o tipo de <ph id="ph2">&lt;paramref name="array" /&gt;</ph> de destino.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="P:System.Collections.BitArray.Count">
          <source>Gets the number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">Obtém o número de elementos contidos no <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Count">
          <source>The number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">O número de elementos contidos no <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph> return the same value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph> retornam o mesmo valor.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> can be set to a specific value, but <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> pode ser definido como um valor específico, mas <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph> é somente leitura.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Count">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">A recuperação do valor dessa propriedade é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Get(System.Int32)">
          <source>The zero-based index of the value to get.</source>
          <target state="translated">O índice baseado em zero do valor a ser obtido.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Get(System.Int32)">
          <source>Gets the value of the bit at a specific position in the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">Obtém o valor do bit em uma posição específica no <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Get(System.Int32)">
          <source>The value of the bit at position <ph id="ph1">&lt;paramref name="index" /&gt;</ph>.</source>
          <target state="translated">O valor do bit na posição <ph id="ph1">&lt;paramref name="index" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Get(System.Int32)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Get(System.Int32)">
          <source>The following code example shows how to set and get specific elements in a <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph>.</source>
          <target state="translated">O exemplo de código a seguir mostra como definir e obter elementos específicos de um <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Get(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é menor que zero.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Get(System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Get(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is greater than or equal to the number of elements in the <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é maior ou igual ao número de elementos no <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>Returns an enumerator that iterates through the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">Retorna um enumerador que itera por meio de <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> for the entire <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> para todo o <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">O <ph id="ph1">`foreach`</ph> instrução de linguagem c# (<ph id="ph2">`for each`</ph> no Visual Basic) oculta a complexidade dos enumeradores.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Portanto, o uso de <ph id="ph1">`foreach`</ph> é recomendado, em vez de manipular diretamente o enumerador.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Os enumeradores podem ser usados para ler os dados na coleção, mas não podem ser usados para modificar a coleção subjacente.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">Inicialmente, o enumerador é posicionado antes do primeiro elemento da coleção.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> também traz o enumerador de volta para essa posição.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Nesta posição, <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> está indefinido.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">Por isso, você deve chamar <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> para avançar o enumerador até o primeiro elemento da coleção antes de ler o valor de <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> retorna o mesmo objeto até <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> ou <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> ser chamado.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> define <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> como o próximo elemento.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Caso <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passe o final da coleção, o enumerador é posicionado após o último elemento na coleção e <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> retorna <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Quando o enumerador está nessa posição, as chamadas subsequentes para <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> também retornam <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Caso a última chamada para <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> tenha retornado <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> está indefinido.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">Para definir <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> como o primeiro elemento da coleção novamente, é possível chamar <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> seguido de <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Um enumerador permanece válido desde que a coleção continue inalterada.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Se forem feitas alterações na coleção, como adicionar, modificar ou excluir elementos, o enumerador será invalidado de maneira irrevogável e seu comportamento permanecerá indefinido.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">O enumerador não tem acesso exclusivo à coleção; por isso, a enumeração por meio de uma coleção não é um procedimento thread-safe intrínseco.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Para garantir acesso thread-safe durante a enumeração, é possível bloquear a coleção durante toda a enumeração.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para permitir que a coleção a ser acessado por vários threads para leitura e gravação, você deve implementar sua sincronização.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="P:System.Collections.BitArray.IsReadOnly">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> is read-only.</source>
          <target state="translated">Obtém um valor que indica se o <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> é somente leitura.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.IsReadOnly">
          <source>This property is always <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Esta propriedade é sempre <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.IsReadOnly">
          <source><ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> implements the <ph id="ph2">&lt;xref:System.Collections.BitArray.IsReadOnly%2A&gt;</ph> property because it is required by the <ph id="ph3">&lt;xref:System.Collections.IList?displayProperty=nameWithType&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> implementa o <ph id="ph2">&lt;xref:System.Collections.BitArray.IsReadOnly%2A&gt;</ph> propriedade porque ele é necessário para o <ph id="ph3">&lt;xref:System.Collections.IList?displayProperty=nameWithType&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.IsReadOnly">
          <source>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</source>
          <target state="translated">Uma coleção que seja somente leitura não permite a adição, a remoção ou a modificação de elementos após a coleção ser criada.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.IsReadOnly">
          <source>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</source>
          <target state="translated">Uma coleção somente leitura é apenas uma coleção com um wrapper que impede a modificação da coleção; por isso, caso as alterações sejam feitas na coleção subjacente, a coleção somente leitura reflete as alterações.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.IsReadOnly">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="P:System.Collections.BitArray.IsSynchronized">
          <source>Gets a value indicating whether access to the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> is synchronized (thread safe).</source>
          <target state="translated">Obtém um valor que indica se o acesso à <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> é sincronizado (thread-safe).</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.IsSynchronized">
          <source>This property is always <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Esta propriedade é sempre <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.IsSynchronized">
          <source><ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> implements the <ph id="ph2">&lt;xref:System.Collections.BitArray.IsSynchronized%2A&gt;</ph> property because it is required by the <ph id="ph3">&lt;xref:System.Collections.ICollection?displayProperty=nameWithType&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> implementa o <ph id="ph2">&lt;xref:System.Collections.BitArray.IsSynchronized%2A&gt;</ph> propriedade porque ele é necessário para o <ph id="ph3">&lt;xref:System.Collections.ICollection?displayProperty=nameWithType&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.IsSynchronized">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">A enumeração por meio de uma coleção não é um procedimento thread-safe intrínseco.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.IsSynchronized">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">Mesmo quando uma coleção está sincronizada, outros threads ainda podem modificar a coleção, o que faz o enumerador lançar uma exceção.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.IsSynchronized">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">Para garantir thread-safe durante a enumeração, é possível bloquear a coleção durante toda a enumeração ou verificar as exceções resultantes das alterações feitas por outros threads.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.IsSynchronized">
          <source>The following code example shows how to lock the collection using the <ph id="ph1">&lt;xref:System.Collections.BitArray.SyncRoot%2A&gt;</ph> during the entire enumeration.</source>
          <target state="translated">O exemplo de código a seguir mostra como bloquear a coleção usando o <ph id="ph1">&lt;xref:System.Collections.BitArray.SyncRoot%2A&gt;</ph> durante toda a enumeração.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.IsSynchronized">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="P:System.Collections.BitArray.Item(System.Int32)">
          <source>The zero-based index of the value to get or set.</source>
          <target state="translated">O índice baseado em zero do valor a ser obtido ou definido.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="P:System.Collections.BitArray.Item(System.Int32)">
          <source>Gets or sets the value of the bit at a specific position in the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">Obtém ou define o valor do bit em uma posição específica no <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Item(System.Int32)">
          <source>The value of the bit at position <ph id="ph1">&lt;paramref name="index" /&gt;</ph>.</source>
          <target state="translated">O valor do bit na posição <ph id="ph1">&lt;paramref name="index" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Item(System.Int32)">
          <source>This property provides the ability to access a specific element in the collection by using the following syntax: <ph id="ph1">`myCollection[index]`</ph>.</source>
          <target state="translated">Esta propriedade fornece a capacidade de acessar um elemento específico na coleção usando a seguinte sintaxe: <ph id="ph1">`myCollection[index]`</ph>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Item(System.Int32)">
          <source>The C# language uses the  keyword to define the indexers instead of implementing the <ph id="ph1">&lt;xref:System.Collections.BitArray.Item%2A&gt;</ph> property.</source>
          <target state="translated">A linguagem c# usa a palavra-chave para definir os indexadores em vez de implementar o <ph id="ph1">&lt;xref:System.Collections.BitArray.Item%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Item(System.Int32)">
          <source>Visual Basic implements <ph id="ph1">&lt;xref:System.Collections.BitArray.Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.</source>
          <target state="translated">Visual Basic implementa <ph id="ph1">&lt;xref:System.Collections.BitArray.Item%2A&gt;</ph> como uma propriedade padrão, que fornece a mesma funcionalidade de indexação.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Item(System.Int32)">
          <source>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</source>
          <target state="translated">Recuperar o valor dessa propriedade é uma operação de (1); definindo a propriedade também é uma operação de (1).</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="P:System.Collections.BitArray.Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é menor que zero.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="P:System.Collections.BitArray.Item(System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="P:System.Collections.BitArray.Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is equal to or greater than <ph id="ph2">&lt;see cref="P:System.Collections.BitArray.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é igual a ou maior que <ph id="ph2">&lt;see cref="P:System.Collections.BitArray.Count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="P:System.Collections.BitArray.Length">
          <source>Gets or sets the number of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">Obtém ou define o número de elementos no <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Length">
          <source>The number of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">O número de elementos em <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Length">
          <source><ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph> return the same value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph> retornam o mesmo valor.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Length">
          <source><ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> can be set to a specific value, but <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> pode ser definido como um valor específico, mas <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph> é somente leitura.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Length">
          <source>If <ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> is set to a value that is less than <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>, the <ph id="ph3">&lt;xref:System.Collections.BitArray&gt;</ph> is truncated and the elements after the index <ph id="ph4">`value`</ph> -1 are deleted.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> é definido como um valor que é menor que <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>, o <ph id="ph3">&lt;xref:System.Collections.BitArray&gt;</ph> será truncado e os elementos após o índice <ph id="ph4">`value`</ph> -1 são excluídos.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Length">
          <source>If <ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> is set to a value that is greater than <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>, the new elements are set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> é definido como um valor que é maior do que <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>, os novos elementos são definidos como <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Length">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">A recuperação do valor dessa propriedade é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Length">
          <source>Setting this property is an O(<ph id="ph1">`n`</ph>) operation.</source>
          <target state="translated">A definição dessa propriedade é um O (<ph id="ph1">`n`</ph>) operação.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="P:System.Collections.BitArray.Length">
          <source>The property is set to a value that is less than zero.</source>
          <target state="translated">A propriedade foi definida como um valor menor que zero.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Not">
          <source>Inverts all the bit values in the current <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>, so that elements set to <ph id="ph2">&lt;see langword="true" /&gt;</ph> are changed to <ph id="ph3">&lt;see langword="false" /&gt;</ph>, and elements set to <ph id="ph4">&lt;see langword="false" /&gt;</ph> are changed to <ph id="ph5">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Inverte todos os valores de bit no <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> atual, para que os elementos definidos como <ph id="ph2">&lt;see langword="true" /&gt;</ph> sejam alterados para <ph id="ph3">&lt;see langword="false" /&gt;</ph> e os elementos definidos como <ph id="ph4">&lt;see langword="false" /&gt;</ph> sejam alterados para <ph id="ph5">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Not">
          <source>The current instance with inverted bit values.</source>
          <target state="translated">A instância atual com valores de bit invertidos.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Not">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método é uma operação O(<ph id="ph1">`n`</ph>), em que <ph id="ph2">`n`</ph> é <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Not">
          <source>The following code example shows how to apply NOT to a <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph>.</source>
          <target state="translated">O exemplo de código a seguir mostra como aplicar não para um <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
          <source>The array with which to perform the bitwise OR operation.</source>
          <target state="translated">A matriz com a qual a operação OR bit a bit será executada.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
          <source>Performs the bitwise OR operation between the elements of the current <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> object and the corresponding elements in the specified array.</source>
          <target state="translated">Executa a operação OR bit a bit entre os elementos do objeto <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> atual e os elementos correspondentes na matriz especificada.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> object will be modified to store the result of the bitwise OR operation.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> atual será modificado para armazenar o resultado da operação OR bit a bit.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
          <source>An array containing the result of the bitwise OR operation, which is a reference to the current <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> object.</source>
          <target state="translated">Uma matriz que contém o resultado da operação OR bit a bit, que é uma referência ao objeto <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
          <source>The bitwise OR operation returns <ph id="ph1">`true`</ph> if one or both operands are <ph id="ph2">`true`</ph>, and returns <ph id="ph3">`false`</ph> if both operands are <ph id="ph4">`false`</ph>.</source>
          <target state="translated">A operação OR bit a bit retorna <ph id="ph1">`true`</ph> se um ou ambos os operandos forem <ph id="ph2">`true`</ph>e retorna <ph id="ph3">`false`</ph> se ambos os operandos forem <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método é uma operação O(<ph id="ph1">`n`</ph>), em que <ph id="ph2">`n`</ph> é <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
          <source>The following code example shows how to perform the OR operation between two <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> objects.</source>
          <target state="translated">O exemplo de código a seguir mostra como executar a operação ou entre dois <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> objetos.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> and the current <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> do not have the same number of elements.</source>
          <target state="translated">O <ph id="ph1">&lt;paramref name="value" /&gt;</ph> e o <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> atual não têm o mesmo número de elementos.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
          <source>The zero-based index of the bit to set.</source>
          <target state="translated">O índice baseado em zero do bit a ser definido.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
          <source>The Boolean value to assign to the bit.</source>
          <target state="translated">O valor booliano a ser atribuído a cada bit.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
          <source>Sets the bit at a specific position in the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> to the specified value.</source>
          <target state="translated">Obtém o bit em uma posição específica no <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> para o valor especificado.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
          <source>The following code example shows how to set and get specific elements in a <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph>.</source>
          <target state="translated">O exemplo de código a seguir mostra como definir e obter elementos específicos de um <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é menor que zero.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is greater than or equal to the number of elements in the <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é maior ou igual ao número de elementos no <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.SetAll(System.Boolean)">
          <source>The Boolean value to assign to all bits.</source>
          <target state="translated">O valor booliano a ser atribuído a todos os bits.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.SetAll(System.Boolean)">
          <source>Sets all bits in the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> to the specified value.</source>
          <target state="translated">Define todos os bits no <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> como o valor especificado.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.SetAll(System.Boolean)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método é uma operação O(<ph id="ph1">`n`</ph>), em que <ph id="ph2">`n`</ph> é <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.SetAll(System.Boolean)">
          <source>The following code example shows how to set and get specific elements in a <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph>.</source>
          <target state="translated">O exemplo de código a seguir mostra como definir e obter elementos específicos de um <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="P:System.Collections.BitArray.SyncRoot">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">Obtém um objeto que pode ser usado para sincronizar o acesso ao <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.SyncRoot">
          <source>An object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">Um objeto que pode ser usado para sincronizar o acesso ao <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.SyncRoot">
          <source>Derived classes can provide their own synchronized version of the <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> using the <ph id="ph2">&lt;xref:System.Collections.BitArray.SyncRoot%2A&gt;</ph> property.</source>
          <target state="translated">Classes derivadas podem fornecer sua própria versão sincronizada de <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> usando o <ph id="ph2">&lt;xref:System.Collections.BitArray.SyncRoot%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.SyncRoot">
          <source>The synchronizing code must perform operations on the <ph id="ph1">&lt;xref:System.Collections.BitArray.SyncRoot%2A&gt;</ph> of the <ph id="ph2">&lt;xref:System.Collections.BitArray&gt;</ph>, not directly on the <ph id="ph3">&lt;xref:System.Collections.BitArray&gt;</ph>.</source>
          <target state="translated">O código de sincronização necessário realizar operações no <ph id="ph1">&lt;xref:System.Collections.BitArray.SyncRoot%2A&gt;</ph> do <ph id="ph2">&lt;xref:System.Collections.BitArray&gt;</ph>, não diretamente no <ph id="ph3">&lt;xref:System.Collections.BitArray&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.SyncRoot">
          <source>This ensures proper operation of collections that are derived from other objects.</source>
          <target state="translated">Isso garante a operação apropriada das coleções que são derivadas de outros objetos.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.SyncRoot">
          <source>Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> object.</source>
          <target state="translated">Especificamente, ele mantém uma sincronização adequada com outros threads que podem ser simultaneamente modificando o <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.SyncRoot">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">A enumeração por meio de uma coleção não é um procedimento thread-safe intrínseco.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.SyncRoot">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">Mesmo quando uma coleção está sincronizada, outros threads ainda podem modificar a coleção, o que faz o enumerador lançar uma exceção.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.SyncRoot">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">Para garantir thread-safe durante a enumeração, é possível bloquear a coleção durante toda a enumeração ou verificar as exceções resultantes das alterações feitas por outros threads.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.SyncRoot">
          <source>The following code example shows how to lock the collection using the <ph id="ph1">&lt;xref:System.Collections.BitArray.SyncRoot%2A&gt;</ph> during the entire enumeration.</source>
          <target state="translated">O exemplo de código a seguir mostra como bloquear a coleção usando o <ph id="ph1">&lt;xref:System.Collections.BitArray.SyncRoot%2A&gt;</ph> durante toda a enumeração.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.SyncRoot">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">A recuperação do valor dessa propriedade é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
          <source>The array with which to perform the bitwise exclusive OR operation.</source>
          <target state="translated">A matriz usada para executar a operação OR exclusiva bit a bit.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
          <source>Performs the bitwise exclusive OR operation between the elements of the current <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> object against the corresponding elements in the specified array.</source>
          <target state="translated">Executa a operação OR exclusiva bit a bit entre os elementos do objeto <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> atual em relação aos elementos correspondentes na matriz especificada.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> object will be modified to store the result of the bitwise exclusive OR operation.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> atual será modificado para armazenar o resultado da operação OR exclusiva bit a bit.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
          <source>An array containing the result of the bitwise exclusive OR operation, which is a reference to the current <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> object.</source>
          <target state="translated">Uma matriz que contém o resultado da operação OR exclusiva bit a bit, que é uma referência ao objeto <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
          <source>The bitwise exclusive OR operation returns <ph id="ph1">`true`</ph> if exactly one operand is <ph id="ph2">`true`</ph>, and returns <ph id="ph3">`false`</ph> if both operands have the same Boolean value.</source>
          <target state="translated">A operação OR exclusiva bit a bit retorna <ph id="ph1">`true`</ph> se exatamente um operando for <ph id="ph2">`true`</ph>e retorna <ph id="ph3">`false`</ph> se ambos os operandos têm o mesmo valor booliano.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método é uma operação O(<ph id="ph1">`n`</ph>), em que <ph id="ph2">`n`</ph> é <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
          <source>The following code example shows how to perform the XOR operation between two <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> objects.</source>
          <target state="translated">O exemplo de código a seguir mostra como executar a operação de XOR entre dois <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> objetos.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> and the current <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> do not have the same number of elements.</source>
          <target state="translated">O <ph id="ph1">&lt;paramref name="value" /&gt;</ph> e o <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> atual não têm o mesmo número de elementos.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>