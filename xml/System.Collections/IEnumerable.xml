<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IEnumerable.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e05b5b2-d481-4262-b7b7-7de7ac2afe072b174fa23a4232cd0583f55c9377b122c0b4e183.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b174fa23a4232cd0583f55c9377b122c0b4e183</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df6cf590aa3087f6c7c202712eee781c6a3c8f96</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/07/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Collections.IEnumerable">
          <source>Exposes an enumerator, which supports a simple iteration over a non-generic collection.</source>
          <target state="translated">Expõe um enumerador que dá suporte a uma iteração simples em uma coleção não genérica.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerable">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> is the base interface for all non-generic collections that can be enumerated.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> é a interface base para todas as coleções não genéricas que podem ser enumerados.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerable">
          <source>For the generic version of this interface see <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Para a versão genérica dessa interface consulte <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerable">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> contains a single method, <ph id="ph2">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;</ph>, which returns an <ph id="ph3">&lt;xref:System.Collections.IEnumerator&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> contém um único método, <ph id="ph2">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;</ph>, que retorna um <ph id="ph3">&lt;xref:System.Collections.IEnumerator&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerable">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> provides the ability to iterate through the collection by exposing a <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property and <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> fornece a capacidade de iterar pela coleção ao expor um <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> propriedade e <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> e <ph id="ph4">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerable">
          <source>It is a best practice to implement <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> on your collection classes to enable the <ph id="ph3">`foreach`</ph> (<ph id="ph4">`For Each`</ph> in Visual Basic) syntax, however implementing <ph id="ph5">&lt;xref:System.Collections.IEnumerable&gt;</ph> is not required.</source>
          <target state="translated">É uma prática recomendada para implementar <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> e <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> em suas classes de coleção para habilitar o <ph id="ph3">`foreach`</ph> (<ph id="ph4">`For Each`</ph> no Visual Basic) sintaxe, no entanto implementando <ph id="ph5">&lt;xref:System.Collections.IEnumerable&gt;</ph> não é necessária.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerable">
          <source>If your collection does not implement <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph>, you must still follow the iterator pattern to support this syntax by providing a <ph id="ph2">`GetEnumerator`</ph> method that returns an interface, class or struct.</source>
          <target state="translated">Se sua coleção não implementa <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph>, você ainda deve seguir o padrão de iterador para oferecer suporte a essa sintaxe, fornecendo um <ph id="ph2">`GetEnumerator`</ph> método que retorna uma interface, classe ou estrutura.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerable">
          <source>When using Visual Basic, you must provide an <ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> implementation, which is returned by <ph id="ph2">`GetEnumerator`</ph>.</source>
          <target state="translated">Ao usar o Visual Basic, você deve fornecer um <ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> implementação, o que é retornada pelo <ph id="ph2">`GetEnumerator`</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerable">
          <source>When developing with C# you must provide a class that contains a <ph id="ph1">`Current`</ph> property, and <ph id="ph2">`MoveNext`</ph> and <ph id="ph3">`Reset`</ph> methods as described by <ph id="ph4">&lt;xref:System.Collections.IEnumerator&gt;</ph>, but the class does not have to implement <ph id="ph5">&lt;xref:System.Collections.IEnumerator&gt;</ph>.</source>
          <target state="translated">Quando o desenvolvimento com o c#, você deve fornecer uma classe que contém um <ph id="ph1">`Current`</ph> propriedade e <ph id="ph2">`MoveNext`</ph> e <ph id="ph3">`Reset`</ph> métodos conforme descrito pelo <ph id="ph4">&lt;xref:System.Collections.IEnumerator&gt;</ph>, mas a classe precisa implementar <ph id="ph5">&lt;xref:System.Collections.IEnumerator&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerable">
          <source>The following code example demonstrates the best practice for iterating a custom collection by implementing the <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> interfaces.</source>
          <target state="translated">O exemplo de código a seguir demonstra a prática recomendada para iterar uma coleção personalizada Implementando o <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> e <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> interfaces.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerable">
          <source>In this example, members of these interfaces are not explicitly called, but they are implemented to support the use of <ph id="ph1">`foreach`</ph> (<ph id="ph2">`For Each`</ph> in Visual Basic) to iterate through the collection.</source>
          <target state="translated">Neste exemplo, os membros dessas interfaces não forem chamados explicitamente, mas eles são implementados para suporte ao uso de <ph id="ph1">`foreach`</ph> (<ph id="ph2">`For Each`</ph> no Visual Basic) para iterar pela coleção.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerable">
          <source>This example is a complete Console app.</source>
          <target state="translated">Este exemplo é um aplicativo de Console concluído.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerable">
          <source>To compile the Visual Basic app, change the <bpt id="p1">**</bpt>Startup object<ept id="p1">**</ept> to <bpt id="p2">**</bpt>Sub Main<ept id="p2">**</ept> in the project’s <bpt id="p3">**</bpt>Properties<ept id="p3">**</ept> page.</source>
          <target state="translated">Para compilar o aplicativo do Visual Basic, altere o <bpt id="p1">**</bpt>objeto de inicialização<ept id="p1">**</ept> para <bpt id="p2">**</bpt>Sub Main<ept id="p2">**</ept> do projeto <bpt id="p3">**</bpt>propriedades<ept id="p3">**</ept> página.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IEnumerable">
          <source>For a sample that shows how to implement the <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface, see <bpt id="p1">[</bpt>Implementing the IEnumerable Interface in a Collection Class<ept id="p1">](https://code.msdn.microsoft.com/Implementing-the-e1708a24)</ept></source>
          <target state="translated">Para obter um exemplo que mostra como implementar a <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface, consulte <bpt id="p1">[</bpt>Implementando a IEnumerable Interface em uma classe de coleção<ept id="p1">](https://code.msdn.microsoft.com/Implementing-the-e1708a24)</ept></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>Returns an enumerator that iterates through a collection.</source>
          <target state="translated">Retorna um enumerador que itera em uma coleção.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> object that can be used to iterate through the collection.</source>
          <target state="translated">Um objeto <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> que pode ser usado para iterar pela coleção.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">O <ph id="ph1">`foreach`</ph> instrução de linguagem c# (<ph id="ph2">`For Each`</ph> no Visual Basic) oculta a complexidade dos enumeradores.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Portanto, o uso de <ph id="ph1">`foreach`</ph> é recomendado, em vez de manipular diretamente o enumerador.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Os enumeradores podem ser usados para ler os dados na coleção, mas não podem ser usados para modificar a coleção subjacente.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">Inicialmente, o enumerador é posicionado antes do primeiro elemento da coleção.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> method also brings the enumerator back to this position.</source>
          <target state="translated">O método <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> também retorna o enumerador a essa posição.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>At this position, the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property is undefined.</source>
          <target state="translated">Nesta posição, o <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> propriedade está definida.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>Therefore, you must call the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">Por isso, você deve chamar o método <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> para avançar o enumerador até o primeiro elemento da coleção antes de ler o valor de <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> retorna o mesmo objeto até <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> ou <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> ser chamado.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> define <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> como o próximo elemento.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Caso <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passe o final da coleção, o enumerador é posicionado após o último elemento na coleção e <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> retorna <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Quando o enumerador está nessa posição, as chamadas subsequentes para <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> também retornam <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Se a última chamada <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> retorna <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> é indefinido.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">Para definir <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> como o primeiro elemento da coleção novamente, é possível chamar <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> seguido de <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Um enumerador permanece válido desde que a coleção continue inalterada.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Se forem feitas alterações na coleção, como adicionar, modificar ou excluir elementos, o enumerador será invalidado de maneira irrevogável e seu comportamento permanecerá indefinido.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">O enumerador não tem acesso exclusivo à coleção; por isso, a enumeração por meio de uma coleção não é um procedimento thread-safe intrínseco.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Para garantir acesso thread-safe durante a enumeração, é possível bloquear a coleção durante toda a enumeração.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para permitir que a coleção a ser acessado por vários threads para leitura e gravação, você deve implementar sua sincronização.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>The following code example demonstrates the implementation of the <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> interfaces for a custom collection.</source>
          <target state="translated">O exemplo de código a seguir demonstra a implementação do <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> interfaces para uma coleção personalizada.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>In this example, <ph id="ph1">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;</ph> is not explicitly called, but it is implemented to support the use of <ph id="ph2">`foreach`</ph> (<ph id="ph3">`For Each`</ph> in Visual Basic).</source>
          <target state="translated">Neste exemplo, <ph id="ph1">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;</ph> não for chamado explicitamente, mas ele é implementado para suporte ao uso de <ph id="ph2">`foreach`</ph> (<ph id="ph3">`For Each`</ph> no Visual Basic).</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IEnumerable.GetEnumerator">
          <source>This code example is part of a larger example for the <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface.</source>
          <target state="translated">Este exemplo de código é parte de um exemplo maior para o <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>