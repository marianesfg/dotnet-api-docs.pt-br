<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Stack.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b364bfdec5920f343b57c572dbfbe97d9389647b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b364bfdec5920f343b57c572dbfbe97d9389647b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Collections.Stack">
          <source>Represents a simple last-in-first-out (LIFO) non-generic collection of objects.</source>
          <target state="translated">Representa uma coleção não genérica simples UEPS (último a entrar, primeiro a sair) de objetos.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Stack">
          <source>For the generic version of this collection, see <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Para obter a versão genérica dessa coleção, consulte <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Stack">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> is the number of elements the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> can hold.</source>
          <target state="translated">A capacidade de um <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> é o número de elementos de <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> pode conter.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Stack">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, the capacity is automatically increased as required through reallocation.</source>
          <target state="translated">Como os elementos são adicionados a um <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, a capacidade é aumentada automaticamente conforme necessário por meio de realocação.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Stack">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> is less than the capacity of the stack, <ph id="ph2">&lt;xref:System.Collections.Stack.Push%2A&gt;</ph> is an O(1) operation.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> é menor que a capacidade da pilha, <ph id="ph2">&lt;xref:System.Collections.Stack.Push%2A&gt;</ph> é uma operação de (1).</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Stack">
          <source>If the capacity needs to be increased to accommodate the new element, <ph id="ph1">&lt;xref:System.Collections.Stack.Push%2A&gt;</ph> becomes an O(<ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is <ph id="ph4">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</source>
          <target state="translated">Se a capacidade precisa ser aumentado para acomodar o novo elemento, <ph id="ph1">&lt;xref:System.Collections.Stack.Push%2A&gt;</ph> se torna um O (<ph id="ph2">`n`</ph>) operação, onde <ph id="ph3">`n`</ph> é <ph id="ph4">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Stack">
          <source><ph id="ph1">&lt;xref:System.Collections.Stack.Pop%2A&gt;</ph> is an O(1) operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Stack.Pop%2A&gt;</ph> é uma operação de (1).</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Stack">
          <source><ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> aceita <ph id="ph2">`null`</ph> como um valor válido e permite elementos duplicados.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Stack">
          <source>The following example shows how to create and add values to a <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> and how to display its values.</source>
          <target state="translated">O exemplo a seguir mostra como criar e adicionar valores para um <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> e como exibir seus valores.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Stack">
          <source>Public static (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) members of this type are thread safe.</source>
          <target state="translated">Os membros estáticos públicos (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> no Visual Basic) desse são thread-safe.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Stack">
          <source>Any instance members are not guaranteed to be thread safe.</source>
          <target state="translated">Não há garantia de que qualquer membro de instância seja thread-safe.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Stack">
          <source>To guarantee the thread safety of the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>, all operations must be done through the wrapper returned by the <ph id="ph2">&lt;see cref="M:System.Collections.Stack.Synchronized(System.Collections.Stack)" /&gt;</ph> method.</source>
          <target state="translated">Para garantir a segurança de thread do <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>, todas as operações devem ser feitas por meio do wrapper retornado pelo <ph id="ph2">&lt;see cref="M:System.Collections.Stack.Synchronized(System.Collections.Stack)" /&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Stack">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">A enumeração por meio de uma coleção não é um procedimento thread-safe intrínseco.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Stack">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">Mesmo quando uma coleção está sincronizada, outros threads ainda podem modificar a coleção, o que faz o enumerador lançar uma exceção.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Stack">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">Para garantir thread-safe durante a enumeração, é possível bloquear a coleção durante toda a enumeração ou verificar as exceções resultantes das alterações feitas por outros threads.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="T:System.Collections.Stack">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> class that is empty and has the default initial capacity.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> que está vazia e tem a capacidade inicial padrão.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.#ctor">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> can hold.</source>
          <target state="translated">A capacidade de um <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> é o número de elementos que o <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> pode conter.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.#ctor">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">Como os elementos são adicionados a um <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, a capacidade é aumentada automaticamente conforme necessário ao realocar a matriz interna.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.#ctor">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated">Se o tamanho da coleção pode ser estimado, especificando a capacidade inicial elimina a necessidade de executar um número de operações de redimensionamento durante a adição de elementos para o <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.#ctor">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">Este construtor é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.#ctor(System.Collections.ICollection)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> to copy elements from.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> da qual copiar elementos.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.#ctor(System.Collections.ICollection)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> class that contains elements copied from the specified collection and has the same initial capacity as the number of elements copied.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>, que contém os elementos copiados da coleção especificada e tem a mesma capacidade inicial que o número de elementos copiados.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.#ctor(System.Collections.ICollection)">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> can hold.</source>
          <target state="translated">A capacidade de um <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> é o número de elementos que o <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> pode conter.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.#ctor(System.Collections.ICollection)">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">Como os elementos são adicionados a um <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, a capacidade é aumentada automaticamente conforme necessário ao realocar a matriz interna.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.#ctor(System.Collections.ICollection)">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated">Se o tamanho da coleção pode ser estimado, especificando a capacidade inicial elimina a necessidade de executar um número de operações de redimensionamento durante a adição de elementos para o <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.#ctor(System.Collections.ICollection)">
          <source>The elements are copied onto the <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> in the same order they are read by the <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> of the <ph id="ph3">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated">Os elementos são copiados para o <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> na mesma ordem em que são lidas pelo <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> do <ph id="ph3">&lt;xref:System.Collections.ICollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.#ctor(System.Collections.ICollection)">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in <ph id="ph3">`col`</ph>.</source>
          <target state="translated">Este construtor é um O (<ph id="ph1">`n`</ph>) operação, onde <ph id="ph2">`n`</ph> é o número de elementos em <ph id="ph3">`col`</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.#ctor(System.Collections.ICollection)">
          <source><ph id="ph1">&lt;paramref name="col" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="col" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.#ctor(System.Int32)">
          <source>The initial number of elements that the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> can contain.</source>
          <target state="translated">O número inicial de elementos que o <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> pode conter.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> que está vazia e tem a capacidade inicial especificada ou a capacidade inicial padrão, a que for maior.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.#ctor(System.Int32)">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> can hold.</source>
          <target state="translated">A capacidade de um <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> é o número de elementos que o <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> pode conter.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.#ctor(System.Int32)">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">Como os elementos são adicionados a um <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, a capacidade é aumentada automaticamente conforme necessário ao realocar a matriz interna.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.#ctor(System.Int32)">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated">Se o tamanho da coleção pode ser estimado, especificando a capacidade inicial elimina a necessidade de executar um número de operações de redimensionamento durante a adição de elementos para o <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.#ctor(System.Int32)">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`initialCapacity`</ph>.</source>
          <target state="translated">Este construtor é um O (<ph id="ph1">`n`</ph>) operação, onde <ph id="ph2">`n`</ph> é <ph id="ph3">`initialCapacity`</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="initialCapacity" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="initialCapacity" /&gt;</ph> é menor que zero.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Clear">
          <source>Removes all objects from the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Remove todos os objetos da <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Clear">
          <source><ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> is set to zero, and references to other objects from elements of the collection are also released.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> é definido como zero, e referências a outros objetos de elementos da coleção também são liberadas.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Clear">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método é uma operação O(<ph id="ph1">`n`</ph>), em que <ph id="ph2">`n`</ph> é <ph id="ph3">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Clear">
          <source>The following example shows how to clear the values of the <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir mostra como limpar os valores de <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Clone">
          <source>Creates a shallow copy of the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Cria uma cópia superficial do <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Clone">
          <source>A shallow copy of the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Uma cópia superficial do <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Clone">
          <source>A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to.</source>
          <target state="translated">Uma cópia superficial de uma coleção copia apenas os elementos da coleção, se eles são tipos de referência ou tipos de valor, mas não copia os objetos que se referem as referências a.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Clone">
          <source>The references in the new collection point to the same objects that the references in the original collection point to.</source>
          <target state="translated">As referências na nova coleção apontam para os mesmos objetos que as referências na coleção original apontem para.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Clone">
          <source>In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</source>
          <target state="translated">Em contraste, uma cópia profunda de uma coleção copia os elementos e tudo direta ou indiretamente referenciado por elementos.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Clone">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método é uma operação O(<ph id="ph1">`n`</ph>), em que <ph id="ph2">`n`</ph> é <ph id="ph3">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Contains(System.Object)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">O objeto a ser localizado no <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Contains(System.Object)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O valor pode ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Contains(System.Object)">
          <source>Determines whether an element is in the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Determina se um elemento está no <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Contains(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph>, if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> is found in the <ph id="ph3">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> for encontrado no <ph id="ph3">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>; caso contrário, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Contains(System.Object)">
          <source>This method determines equality by calling the <ph id="ph1">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Este método determina a igualdade chamando o <ph id="ph1">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Contains(System.Object)">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método executa uma pesquisa linear; por isso, esse método é uma operação O(<ph id="ph1">`n`</ph>), em que <ph id="ph2">`n`</ph> é <ph id="ph3">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Contains(System.Object)">
          <source>Starting with the .NET Framework 2.0, this method tests for equality by passing the <ph id="ph1">`obj`</ph> argument to the <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> method of individual objects in the collection.</source>
          <target state="translated">Começando com o .NET Framework 2.0, este método testa a igualdade passando o <ph id="ph1">`obj`</ph> argumento para o <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> método objetos individuais na coleção.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Contains(System.Object)">
          <source>In the earlier versions of the .NET Framework, this determination was made by using passing the individual items in the collection to the <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> method of the <ph id="ph2">`obj`</ph> argument.</source>
          <target state="translated">Nas versões anteriores do .NET Framework, isso foi feito usando passando os itens individuais na coleção para a <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> método o <ph id="ph2">`obj`</ph> argumento.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> unidimensional que é o destino dos elementos copiados de <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> deve ter indexação com base em zero.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">O índice baseado em zero na <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> na qual a cópia começa.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
          <source>Copies the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> to an existing one-dimensional <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at the specified array index.</source>
          <target state="translated">Copia o <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> para um unidimensional <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph> existente, começando no índice da matriz especificada.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
          <source>The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <ph id="ph1">&lt;xref:System.Collections.Stack.Pop%2A&gt;</ph>.</source>
          <target state="translated">Os elementos são copiados para a matriz na ordem do último a entrar, primeiro a sair (UEPS), semelhante à ordem dos elementos retornados por uma sucessão de chamadas para <ph id="ph1">&lt;xref:System.Collections.Stack.Pop%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método é uma operação O(<ph id="ph1">`n`</ph>), em que <ph id="ph2">`n`</ph> é <ph id="ph3">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
          <source>The following example shows how to copy a <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> into a one-dimensional array.</source>
          <target state="translated">O exemplo a seguir mostra como copiar um <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> em uma matriz unidimensional.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> é menor que zero.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> é multidimensional.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="index" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">O número de elementos na origem <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> é maior do que o espaço disponível de <ph id="ph2">&lt;paramref name="index" /&gt;</ph> até o final do <ph id="ph3">&lt;paramref name="array" /&gt;</ph> de destino.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">O tipo do <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> de origem não pode ser automaticamente convertido para o tipo de <ph id="ph2">&lt;paramref name="array" /&gt;</ph> de destino.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="P:System.Collections.Stack.Count">
          <source>Gets the number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Obtém o número de elementos contidos no <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.Count">
          <source>The number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">O número de elementos contidos no <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.Count">
          <source>The capacity is the number of elements that the <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> can store.</source>
          <target state="translated">A capacidade é o número de elementos que o <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> pode armazenar.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> é o número de elementos que estão realmente no <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.Count">
          <source>The capacity is always greater than or equal to <ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</source>
          <target state="translated">A capacidade é sempre maior que ou igual a <ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.Count">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> excede a capacidade durante a adição de elementos, a capacidade é aumentada automaticamente realocando a matriz interna antes de copiar os elementos antigos e adição de novos elementos.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.Count">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">A recuperação do valor dessa propriedade é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.GetEnumerator">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Retorna um <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> para o <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> para o <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>[Visual Basic, C#]</source>
          <target state="translated">[Visual Basic, C#]</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">O <ph id="ph1">`foreach`</ph> instrução de linguagem c# (<ph id="ph2">`for each`</ph> no Visual Basic) oculta a complexidade dos enumeradores.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Portanto, o uso de <ph id="ph1">`foreach`</ph> é recomendado, em vez de manipular diretamente o enumerador.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Os enumeradores podem ser usados para ler os dados na coleção, mas não podem ser usados para modificar a coleção subjacente.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">Inicialmente, o enumerador é posicionado antes do primeiro elemento da coleção.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> também traz o enumerador de volta para essa posição.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Nesta posição, <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> está indefinido.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">Por isso, você deve chamar <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> para avançar o enumerador até o primeiro elemento da coleção antes de ler o valor de <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> retorna o mesmo objeto até <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> ou <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> ser chamado.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> define <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> como o próximo elemento.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Caso <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passe o final da coleção, o enumerador é posicionado após o último elemento na coleção e <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> retorna <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Quando o enumerador está nessa posição, as chamadas subsequentes para <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> também retornam <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Caso a última chamada para <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> tenha retornado <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> está indefinido.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">Para definir <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> como o primeiro elemento da coleção novamente, é possível chamar <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> seguido de <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Um enumerador permanece válido desde que a coleção continue inalterada.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Se forem feitas alterações na coleção, como adicionar, modificar ou excluir elementos, o enumerador será invalidado de maneira irrevogável e seu comportamento permanecerá indefinido.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">O enumerador não tem acesso exclusivo à coleção; por isso, a enumeração por meio de uma coleção não é um procedimento thread-safe intrínseco.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Para garantir acesso thread-safe durante a enumeração, é possível bloquear a coleção durante toda a enumeração.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para permitir que a coleção a ser acessado por vários threads para leitura e gravação, você deve implementar sua sincronização.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="P:System.Collections.Stack.IsSynchronized">
          <source>Gets a value indicating whether access to the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> is synchronized (thread safe).</source>
          <target state="translated">Obtém um valor que indica se o acesso à <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> é sincronizado (thread-safe).</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.IsSynchronized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph>, if access to the <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> is synchronized (thread safe); otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, se acesse o <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> é sincronizado (thread-safe); caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.IsSynchronized">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">O padrão é <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.IsSynchronized">
          <source>To guarantee the thread safety of the <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, all operations must be done through the wrapper returned by the <ph id="ph2">&lt;xref:System.Collections.Stack.Synchronized%2A&gt;</ph> method.</source>
          <target state="translated">Para garantir a segurança de thread do <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, todas as operações devem ser feitas por meio do wrapper retornado pelo <ph id="ph2">&lt;xref:System.Collections.Stack.Synchronized%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.IsSynchronized">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">A enumeração por meio de uma coleção não é um procedimento thread-safe intrínseco.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.IsSynchronized">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">Mesmo quando uma coleção está sincronizada, outros threads ainda podem modificar a coleção, o que faz o enumerador lançar uma exceção.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.IsSynchronized">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">Para garantir thread-safe durante a enumeração, é possível bloquear a coleção durante toda a enumeração ou verificar as exceções resultantes das alterações feitas por outros threads.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.IsSynchronized">
          <source>The following code example shows how to lock the collection using the <ph id="ph1">&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;</ph> during the entire enumeration.</source>
          <target state="translated">O exemplo de código a seguir mostra como bloquear a coleção usando o <ph id="ph1">&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;</ph> durante toda a enumeração.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.IsSynchronized">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">A recuperação do valor dessa propriedade é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.IsSynchronized">
          <source>The following example shows how to synchronize a <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, determine if a <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> is synchronized, and use a synchronized <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir mostra como sincronizar um <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, determinar se um <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> está sincronizado e usar um sincronizado <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Peek">
          <source>Returns the object at the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> without removing it.</source>
          <target state="translated">Remove o objeto na parte superior do <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> sem removê-lo.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Peek">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> at the top of the <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> na parte superior do <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Peek">
          <source>This method is similar to the <ph id="ph1">&lt;xref:System.Collections.Stack.Pop%2A&gt;</ph> method, but <ph id="ph2">&lt;xref:System.Collections.Stack.Peek%2A&gt;</ph> does not modify the <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated">Esse método é semelhante do <ph id="ph1">&lt;xref:System.Collections.Stack.Pop%2A&gt;</ph> método, mas <ph id="ph2">&lt;xref:System.Collections.Stack.Peek%2A&gt;</ph> não modifica o <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Peek">
          <source><ph id="ph1">`null`</ph> can be pushed onto the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> as a placeholder, if needed.</source>
          <target state="translated"><ph id="ph1">`null`</ph> pode ser enviado para o <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> como um espaço reservado, se necessário.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Peek">
          <source>To distinguish between a null value and the end of the stack, check the <ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> property or catch the <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>, which is thrown when the <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph> is empty.</source>
          <target state="translated">Para distinguir entre um valor nulo e o fim da pilha, verifique o <ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> catch ou propriedade de <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>, que é gerado quando o <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph> está vazio.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Peek">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Peek">
          <source>The following example shows how to add elements to the <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, remove elements from the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph>, or view the element at the top of the <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir mostra como adicionar elementos para o <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, remover elementos do <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph>, ou exibir o elemento na parte superior do <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Peek">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> is empty.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> está vazio.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Pop">
          <source>Removes and returns the object at the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Remove e retorna o objeto na parte superior do <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Pop">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> removed from the top of the <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> foi removido da parte superior do <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Pop">
          <source>This method is similar to the <ph id="ph1">&lt;xref:System.Collections.Stack.Peek%2A&gt;</ph> method, but <ph id="ph2">&lt;xref:System.Collections.Stack.Peek%2A&gt;</ph> does not modify the <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated">Esse método é semelhante do <ph id="ph1">&lt;xref:System.Collections.Stack.Peek%2A&gt;</ph> método, mas <ph id="ph2">&lt;xref:System.Collections.Stack.Peek%2A&gt;</ph> não modifica o <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Pop">
          <source><ph id="ph1">`null`</ph> can be pushed onto the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> as a placeholder, if needed.</source>
          <target state="translated"><ph id="ph1">`null`</ph> pode ser enviado para o <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> como um espaço reservado, se necessário.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Pop">
          <source>To distinguish between a null value and the end of the stack, check the <ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> property or catch the <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>, which is thrown when the <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph> is empty.</source>
          <target state="translated">Para distinguir entre um valor nulo e o fim da pilha, verifique o <ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> catch ou propriedade de <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>, que é gerado quando o <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph> está vazio.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Pop">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Pop">
          <source>The following example shows how to add elements to the <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, remove elements from the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph>, or view the element at the top of the <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir mostra como adicionar elementos para o <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, remover elementos do <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph>, ou exibir o elemento na parte superior do <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Pop">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> is empty.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> está vazio.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Push(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to push onto the <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> a ser enviado por push para o <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Push(System.Object)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O valor pode ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Push(System.Object)">
          <source>Inserts an object at the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Insere um objeto na parte superior do <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Push(System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> already equals the capacity, the capacity of the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> já for igual à capacidade, a capacidade do <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> é aumentado, automaticamente realocando matriz interna, e os elementos existentes são copiados para a nova matriz antes de adicionar o novo elemento.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Push(System.Object)">
          <source><ph id="ph1">`null`</ph> can be pushed onto the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> as a placeholder, if needed.</source>
          <target state="translated"><ph id="ph1">`null`</ph> pode ser enviado para o <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> como um espaço reservado, se necessário.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Push(System.Object)">
          <source>It occupies a slot in the stack and is treated like any object.</source>
          <target state="translated">Ele ocupa um slot da pilha e é tratado como qualquer objeto.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Push(System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> is less than the capacity of the stack, <ph id="ph2">&lt;xref:System.Collections.Stack.Push%2A&gt;</ph> is an O(1) operation.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> é menor que a capacidade da pilha, <ph id="ph2">&lt;xref:System.Collections.Stack.Push%2A&gt;</ph> é uma operação de (1).</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Push(System.Object)">
          <source>If the capacity needs to be increased to accommodate the new element, <ph id="ph1">&lt;xref:System.Collections.Stack.Push%2A&gt;</ph> becomes an O(<ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is <ph id="ph4">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</source>
          <target state="translated">Se a capacidade precisa ser aumentado para acomodar o novo elemento, <ph id="ph1">&lt;xref:System.Collections.Stack.Push%2A&gt;</ph> se torna um O (<ph id="ph2">`n`</ph>) operação, onde <ph id="ph3">`n`</ph> é <ph id="ph4">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Push(System.Object)">
          <source>The following example shows how to add elements to the <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, remove elements from the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph>, or view the element at the top of the <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir mostra como adicionar elementos para o <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, remover elementos do <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph>, ou exibir o elemento na parte superior do <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Synchronized(System.Collections.Stack)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> to synchronize.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> a ser sincronizado.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Synchronized(System.Collections.Stack)">
          <source>Returns a synchronized (thread safe) wrapper for the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Retorna um wrapper sincronizado (thread-safe) para o <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Synchronized(System.Collections.Stack)">
          <source>A synchronized wrapper around the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Um wrapper sincronizado em torno do <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Synchronized(System.Collections.Stack)">
          <source>To guarantee the thread safety of the <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, all operations must be done through this wrapper.</source>
          <target state="translated">Para garantir a segurança de thread do <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, todas as operações devem ser feitas por meio desse wrapper.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Synchronized(System.Collections.Stack)">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">A enumeração por meio de uma coleção não é um procedimento thread-safe intrínseco.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Synchronized(System.Collections.Stack)">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">Mesmo quando uma coleção está sincronizada, outros threads ainda podem modificar a coleção, o que faz o enumerador lançar uma exceção.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Synchronized(System.Collections.Stack)">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">Para garantir thread-safe durante a enumeração, é possível bloquear a coleção durante toda a enumeração ou verificar as exceções resultantes das alterações feitas por outros threads.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Synchronized(System.Collections.Stack)">
          <source>The following code example shows how to lock the collection using the <ph id="ph1">&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;</ph> during the entire enumeration.</source>
          <target state="translated">O exemplo de código a seguir mostra como bloquear a coleção usando o <ph id="ph1">&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;</ph> durante toda a enumeração.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Synchronized(System.Collections.Stack)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Synchronized(System.Collections.Stack)">
          <source>The following example shows how to synchronize a <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, determine if a <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> is synchronized, and use a synchronized <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir mostra como sincronizar um <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, determinar se um <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> está sincronizado e usar um sincronizado <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Synchronized(System.Collections.Stack)">
          <source><ph id="ph1">&lt;paramref name="stack" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stack" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="P:System.Collections.Stack.SyncRoot">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Obtém um objeto que pode ser usado para sincronizar o acesso ao <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.SyncRoot">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that can be used to synchronize access to the <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que pode ser usado para sincronizar o acesso a <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.SyncRoot">
          <source>To create a synchronized version of the <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Collections.Stack.Synchronized%2A&gt;</ph> method.</source>
          <target state="translated">Para criar uma versão sincronizada do <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, use o <ph id="ph2">&lt;xref:System.Collections.Stack.Synchronized%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.SyncRoot">
          <source>However, derived classes can provide their own synchronized version of the <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> using the <ph id="ph2">&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;</ph> property.</source>
          <target state="translated">No entanto, as classes derivadas podem fornecer sua própria versão sincronizada de <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> usando o <ph id="ph2">&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.SyncRoot">
          <source>The synchronizing code must perform operations on the <ph id="ph1">&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;</ph> of the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph>, not directly on the <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated">O código de sincronização necessário realizar operações no <ph id="ph1">&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;</ph> do <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph>, não diretamente no <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.SyncRoot">
          <source>This ensures proper operation of collections that are derived from other objects.</source>
          <target state="translated">Isso garante a operação apropriada das coleções que são derivadas de outros objetos.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.SyncRoot">
          <source>Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> object.</source>
          <target state="translated">Especificamente, ele mantém uma sincronização adequada com outros threads que podem ser simultaneamente modificando o <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.SyncRoot">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">A enumeração por meio de uma coleção não é um procedimento thread-safe intrínseco.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.SyncRoot">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">Mesmo quando uma coleção está sincronizada, outros threads ainda podem modificar a coleção, o que faz o enumerador lançar uma exceção.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.SyncRoot">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">Para garantir thread-safe durante a enumeração, é possível bloquear a coleção durante toda a enumeração ou verificar as exceções resultantes das alterações feitas por outros threads.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.SyncRoot">
          <source>The following code example shows how to lock the collection using the <ph id="ph1">&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;</ph> during the entire enumeration.</source>
          <target state="translated">O exemplo de código a seguir mostra como bloquear a coleção usando o <ph id="ph1">&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;</ph> durante toda a enumeração.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.SyncRoot">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">A recuperação do valor dessa propriedade é uma operação O(1).</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.ToArray">
          <source>Copies the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> to a new array.</source>
          <target state="translated">Copia o <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> em uma nova matriz.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.ToArray">
          <source>A new array containing copies of the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Uma nova matriz que contém cópias dos elementos do <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.ToArray">
          <source>The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <ph id="ph1">&lt;xref:System.Collections.Stack.Pop%2A&gt;</ph>.</source>
          <target state="translated">Os elementos são copiados para a matriz na ordem do último a entrar, primeiro a sair (UEPS), semelhante à ordem dos elementos retornados por uma sucessão de chamadas para <ph id="ph1">&lt;xref:System.Collections.Stack.Pop%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.ToArray">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método é uma operação O(<ph id="ph1">`n`</ph>), em que <ph id="ph2">`n`</ph> é <ph id="ph3">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.ToArray">
          <source>The following example shows how to copy a <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> into a one-dimensional array.</source>
          <target state="translated">O exemplo a seguir mostra como copiar um <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> em uma matriz unidimensional.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>