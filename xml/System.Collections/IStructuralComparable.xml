<Type Name="IStructuralComparable" FullName="System.Collections.IStructuralComparable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="625ac9d081d1ec3de268eae09f25563fa017a9e7" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58698230" /></Metadata><TypeSignature Language="C#" Value="public interface IStructuralComparable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStructuralComparable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.IStructuralComparable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStructuralComparable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStructuralComparable" />
  <TypeSignature Language="F#" Value="type IStructuralComparable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Dá suporte à comparação estrutural de objetos da coleção.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Collections.IStructuralComparable> interface permite que você implemente comparações personalizadas de membros da coleção. Ou seja, você pode definir exatamente o que significa um objeto de coleção preceder, siga ou ocorrem na mesma posição na ordem de classificação como um segundo objeto de coleção. Você pode especificar que essa definição de ser usado com um tipo de coleção que aceita o <xref:System.Collections.IStructuralComparable> interface.  
  
 A interface tem um único membro, <xref:System.Collections.IStructuralComparable.CompareTo%2A>, que determina se o objeto da coleção atual é menor, igual ou maior que um segundo objeto na ordem de classificação. Os membros ou os elementos na instância atual com os de um segundo objeto a comparação real é executada por um <xref:System.Collections.IComparer> implementação de interface, que contém a definição da sua comparação personalizada.  
  
> [!NOTE]
>  O <xref:System.Collections.IStructuralComparable> interface dá suporte a apenas estruturais comparações de classificação ou ordenação. O <xref:System.Collections.IStructuralEquatable> interface dá suporte a comparações personalizadas para igualdade estrutural.  
  
 O .NET Framework fornece dois comparadores de padrão. Um é retornado pela <xref:System.Collections.StructuralComparisons.StructuralComparer%2A?displayProperty=nameWithType> propriedade; o outro é retornado pelo <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> propriedade.  
  
 As classes de tupla genérico (<xref:System.Tuple%601>, <xref:System.Tuple%602>, <xref:System.Tuple%603>e assim por diante) e o <xref:System.Array> classe forneça implementações explícitas do <xref:System.Collections.IStructuralComparable> interface. Conversão (em C#) ou convertendo (no Visual Basic) a instância atual de uma matriz ou uma tupla a um <xref:System.Collections.IStructuralComparable> valor da interface e fornecendo sua <xref:System.Collections.IComparer> implementação como um argumento para o <xref:System.Collections.IStructuralComparable.CompareTo%2A> método, você pode definir uma ordem de classificação personalizada para o matriz ou coleção. No entanto, você não chamar o <xref:System.Collections.IStructuralComparable.CompareTo%2A> método diretamente na maioria dos casos. Em vez disso, o <xref:System.Collections.IStructuralComparable.CompareTo%2A> método é chamado por métodos de classificação, como <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29>. Nesse caso, você define sua <xref:System.Collections.IComparer> implementação e passá-lo como um argumento ao construtor de classe de uma classificação método ou uma coleção do objeto. O <xref:System.Collections.IStructuralComparable.CompareTo%2A> método com o comparador personalizado, em seguida, é chamado automaticamente sempre que a coleção é classificada.  
  
   
  
## Examples  
 O exemplo a seguir cria uma matriz de <xref:System.Tuple%606> objetos que contém dados de preenchimento para três cidades dos EUA de 1960 para 2000. Primeiro de componente do sêxtupla é o nome da cidade. Os cinco componentes restantes representam a população em intervalos de dez anos de 1960 para 2000.  
  
 O `PopulationComparer` classe fornece um <xref:System.Collections.IComparer> implementação que permite que a matriz de sextuples seja classificada por qualquer um de seus componentes. Dois valores são fornecidos para o `PopulationComparer` classe em seu construtor: a posição do componente que define a ordem de classificação e um valor booliano que indica se os objetos de tupla devem ser classificados em ordem crescente ou decrescente.  
  
 O exemplo, em seguida, exibe os elementos na matriz em ordem classificada, classifica-os pelo componente de terceiro (preenchimento de 1970) e exibi-los e, em seguida, classifica-os pelo sexto componente (a população em 2000) e exibe-os. Observe que o exemplo não chama diretamente o <xref:System.Collections.IStructuralComparable.CompareTo%2A> método. O método é chamado implicitamente pelo <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29> método para cada objeto de tupla na matriz.  
  
 [!code-csharp[System.Tuple\`6.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`6.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.Collections.IStructuralEquatable" />
    <altmember cref="P:System.Collections.StructuralComparisons.StructuralComparer" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As Object, comparer As IComparer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj * System.Collections.IComparer -&gt; int" Usage="iStructuralComparable.CompareTo (other, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">O objeto a ser comparado com a instância atual.</param>
        <param name="comparer">Um objeto que compara os membros do objeto da coleção atual com os membros correspondentes de <paramref name="other" />.</param>
        <summary>Determina se o objeto da coleção atual precede, ocorre na mesma posição ou segue a outro objeto na ordem de classificação.</summary>
        <returns>Um inteiro com sinal que indica a relação do objeto da coleção atual para <paramref name="other" /> na ordem de classificação:<br /> – Se for menor do que 0, a instância atual precede <paramref name="other" />.<br /> – Se 0, a instância atual e <paramref name="other" /> são iguais.<br /> – Se maior do que 0, a instância atual segue <paramref name="other" />.  
  
 <list type="table"><listheader><term> Valor retornado 
 </term><description> Descrição 
 </description></listheader><item><term> -1 
 </term><description> A instância atual precede <paramref name="other" />.  
  
 </description></item><item><term> 0 
 </term><description> A instância atual e <paramref name="other" /> são iguais.  
  
 </description></item><item><term> 1 
 </term><description> A instância atual segue <paramref name="other" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Collections.IStructuralComparable.CompareTo%2A> método dá suporte à comparação estrutural personalizada e a classificação de objetos de matriz e de tupla. O <xref:System.Collections.IStructuralComparable.CompareTo%2A> chamadas de método de `comparer` do objeto <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> método para comparar elementos individuais da matriz ou componentes de tupla, começando com o primeiro elemento ou um componente. Chama o indivíduo <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> final e o <xref:System.Collections.IStructuralComparable.CompareTo%2A> método retorna um valor quando uma das seguintes condições for verdadeira:  
  
-   O <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> método retornará -1.  
  
-   O <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> método retornará 1.  
  
-   O <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> método é chamado para o último elemento ou componente no objeto da coleção.  
  
   
  
## Examples  
 O exemplo a seguir cria uma matriz de <xref:System.Tuple%606> objetos que contém dados de preenchimento para três cidades dos EUA de 1960 para 2000. Primeiro de componente do sêxtupla é o nome da cidade. Os cinco componentes restantes representam a população em intervalos de dez anos de 1960 para 2000.  
  
 O `PopulationComparer` classe fornece um <xref:System.Collections.IComparer> implementação que permite que a matriz de sextuples seja classificada por qualquer um de seus componentes. Dois valores são fornecidos para o `PopulationComparer` classe em seu construtor: a posição do componente que define a ordem de classificação, e um <xref:System.Boolean> valor que indica se os objetos de tupla devem ser classificados em ordem crescente ou decrescente.  
  
 O exemplo, em seguida, exibe os elementos na matriz em ordem classificada, classifica-os pelo componente de terceiro (preenchimento de 1970) e exibi-los e, em seguida, classifica-os pelo sexto componente (a população em 2000) e exibe-os. Observe que o exemplo não chama diretamente o <xref:System.Collections.IStructuralComparable.CompareTo%2A?displayProperty=nameWithType> implementação. O método é chamado implicitamente pelo <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29> método para cada objeto de tupla na matriz.  
  
 [!code-csharp[System.Tuple\`6.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`6.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Essa instância e <paramref name="other" /> não são do mesmo tipo.</exception>
        <altmember cref="T:System.Collections.IComparer" />
      </Docs>
    </Member>
  </Members>
</Type>