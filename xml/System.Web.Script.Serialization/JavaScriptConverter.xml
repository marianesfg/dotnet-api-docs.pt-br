<Type Name="JavaScriptConverter" FullName="System.Web.Script.Serialization.JavaScriptConverter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="485319f71e70d94fa0f7b64c6b311c3c41bbec72" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52604968" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class JavaScriptConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit JavaScriptConverter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Script.Serialization.JavaScriptConverter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class JavaScriptConverter" />
  <TypeSignature Language="C++ CLI" Value="public ref class JavaScriptConverter abstract" />
  <TypeSignature Language="F#" Value="type JavaScriptConverter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece uma classe base abstrata para um conversor de tipo personalizado.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Script.Serialization.JavaScriptConverter> classe permite que você implementar a serialização e desserialização de processos para tipos gerenciados que não são suportados nativamente pelo <xref:System.Web.Script.Serialization.JavaScriptSerializer> classe. Você também pode usar <xref:System.Web.Script.Serialization.JavaScriptConverter> quando precisar de mais controle sobre o processo de serialização e desserialização.  
  
 O <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A> propriedade indica os tipos para o qual um conversor personalizado fornece serviços de conversor.  
  
 Para indicar que um conversor personalizado deve ser usado pelo <xref:System.Web.Script.Serialization.JavaScriptSerializer> instância, você deve registrar o conversor com a instância. Se você estiver usando o <xref:System.Web.Script.Serialization.JavaScriptSerializer> diretamente da classe, você deve usar o <xref:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters%2A> método para registrar o conversor. Caso contrário, se você estiver chamando métodos da Web do ECMAScript (JavaScript) e você deseja usar o conversor personalizado, você pode registrá-lo adicionando um `converters` elemento no arquivo de configuração. Para obter mais informações, consulte [como: configurar os serviços ASP.NET no Microsoft Ajax](https://msdn.microsoft.com/library/ea4fb56e-bc1d-405a-9877-00cf5e552a30).  
  
 Quando o <xref:System.Web.Script.Serialization.JavaScriptSerializer> instância está serializando um tipo para o qual ele tem um conversor personalizado registrado, as chamadas do serializador a <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> método. Da mesma forma, quando o <xref:System.Web.Script.Serialization.JavaScriptSerializer> instância é desserializar uma cadeia de caracteres do objeto notação JSON (JavaScript) e reconhece que um tipo de cadeia de caracteres JSON tem um conversor personalizado associado a ele, as chamadas do serializador a <xref:System.Web.Script.Serialization.JavaScriptConverter.Deserialize%2A> método.  
  
   
  
## Examples  
 O exemplo a seguir mostra como criar um conversor personalizado para o <xref:System.Web.UI.WebControls.ListItemCollection> classe.  
  
 [!code-csharp[System.Web.Script.Serialization#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.Script.Serialization/CS/App_Code/ListItemCollectionConverter.cs#2)]
 [!code-vb[System.Web.Script.Serialization#2](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.Script.Serialization/VB/App_Code/ListItemCollectionConverter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Ao herdar da <see cref="T:System.Web.Script.Serialization.JavaScriptConverter" />, você deve substituir os seguintes membros: 
-   <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)" />  
  
-   <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)" />  
  
-   <see cref="P:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" /><see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> fornece o <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> método que será usado por implementadores de <see cref="T:System.Web.Script.Serialization.JavaScriptConverter" />. Código de conversor deve ser capaz de levar um valor que está contido no dicionário de que o serializador passa para ele e, em seguida, converter esse valor em um objeto do tipo <paramref name="T" />. Em vez de reimplementar o código de conversão personalizada para fazer isso, você pode chamar o <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> método.</para>
    </block>
    <altmember cref="T:System.Web.Configuration.Converter" />
    <related type="Article" href="https://msdn.microsoft.com/library/8290e543-7eff-47a4-aace-681f3c07229b">Serviços Web no ASP.NET AJAX</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected JavaScriptConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; JavaScriptConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Web.Script.Serialization.JavaScriptConverter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public abstract object Deserialize (System.Collections.Generic.IDictionary&lt;string,object&gt; dictionary, Type type, System.Web.Script.Serialization.JavaScriptSerializer serializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Deserialize(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; dictionary, class System.Type type, class System.Web.Script.Serialization.JavaScriptSerializer serializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ Deserialize(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ dictionary, Type ^ type, System::Web::Script::Serialization::JavaScriptSerializer ^ serializer);" />
      <MemberSignature Language="F#" Value="abstract member Deserialize : System.Collections.Generic.IDictionary&lt;string, obj&gt; * Type * System.Web.Script.Serialization.JavaScriptSerializer -&gt; obj" Usage="javaScriptConverter.Deserialize (dictionary, type, serializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dictionary" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="serializer" Type="System.Web.Script.Serialization.JavaScriptSerializer" />
      </Parameters>
      <Docs>
        <param name="dictionary">Uma instância <see cref="T:System.Collections.Generic.IDictionary`2" /> de dados de propriedade armazenada como pares nome-valor.</param>
        <param name="type">O tipo do objeto resultante.</param>
        <param name="serializer">A instância <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" />.</param>
        <summary>Quando substituído em uma classe derivada, converte o dicionário fornecido em um objeto do tipo especificado.</summary>
        <returns>O objeto desserializado.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>O <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)" /> método percorre os valores a <paramref name="dictionary" /> parâmetro para construir uma instância do tipo solicitado no <paramref name="type" /> parâmetro. Embora um conversor de pode usar diretamente os valores de <paramref name="dictionary" />, é recomendável usar o implementador de conversor de <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> método em vez disso. O conversor deve chamar esse método da <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> instância disponível do <paramref name="serializer" /> parâmetro.  
  
O <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> método permite que o conversor passar um valor da propriedade <paramref name="dictionary" />e, em seguida, retornar um valor do tipo esperado. Em alguns casos, um conversor para um tipo personalizado pode estar trabalhando com propriedades que se registraram conversores (por exemplo, um tipo tem uma propriedade do tipo B e tipo B também está associado um conversor personalizado). Nesse caso, invocar <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> torna-se de que conversores personalizados será chamado para os dados de propriedade que estão contidos no dicionário recursivamente. Quando o conversor tem iterado por meio de todas as entradas no dicionário, ele retorna uma instância construída do tipo de destino.  
  
Se o conversor de encontrar um problema durante a desserialização, ele deve gerar um <see cref="T:System.InvalidOperationException" /> erro que descreve o problema.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IDictionary&lt;string,object&gt; Serialize (object obj, System.Web.Script.Serialization.JavaScriptSerializer serializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Serialize(object obj, class System.Web.Script.Serialization.JavaScriptSerializer serializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Serialize (obj As Object, serializer As JavaScriptSerializer) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Serialize(System::Object ^ obj, System::Web::Script::Serialization::JavaScriptSerializer ^ serializer);" />
      <MemberSignature Language="F#" Value="abstract member Serialize : obj * System.Web.Script.Serialization.JavaScriptSerializer -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="javaScriptConverter.Serialize (obj, serializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="serializer" Type="System.Web.Script.Serialization.JavaScriptSerializer" />
      </Parameters>
      <Docs>
        <param name="obj">O objeto a ser serializado.</param>
        <param name="serializer">O objeto que é responsável pela serialização.</param>
        <summary>Quando substituído em uma classe derivada, cria um dicionário de pares nome/valor.</summary>
        <returns>Um objeto que contém pares chave/valor que representam os dados do objeto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando você serializa um tipo para o qual um conversor personalizado é registrado, o <xref:System.Web.Script.Serialization.JavaScriptSerializer> instância invoca o <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> método.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>O valor de retorno <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)" /> deve ser um <see cref="T:System.Collections.Generic.IDictionary`2" /> instância com zero ou mais pares de nome/valor que representam dados de um objeto a ser convertido em JSON. O conversor em si não serializar dados como JSON. Em vez disso, o conversor cria um dicionário de pares nome/valor que contêm os nomes de propriedade (a chave de cadeia de caracteres para o dicionário) e a propriedade correspondente (o valor do objeto no dicionário) de valores. O <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> instância subsequentemente converte-as para JSON.  
  
Se o conversor de encontrar uma exceção, ele deve gerar um <see cref="T:System.InvalidOperationException" /> erro que descreve o problema.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SupportedTypes">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerable&lt;Type&gt; SupportedTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; SupportedTypes" />
      <MemberSignature Language="DocId" Value="P:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property SupportedTypes As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ SupportedTypes { System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportedTypes : seq&lt;Type&gt;" Usage="System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando substituída em uma classe derivada, obtém uma coleção de tipos compatíveis.</summary>
        <value>Um objeto que implementa <see cref="T:System.Collections.Generic.IEnumerable`1" /> que representa os tipos com suporte pelo conversor.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A> propriedade lista os tipos que são compatíveis com o conversor. Em tempo de execução, um <xref:System.Web.Script.Serialization.JavaScriptSerializer> instância usa essa propriedade para determinar o mapeamento de tipos gerenciados para seus correspondentes conversores personalizados.  
  
   
  
## Examples  
 O exemplo a seguir mostra como substituir o <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A> propriedade em uma classe derivada. Neste exemplo, o conversor dá suporte apenas a <xref:System.Web.UI.WebControls.ListItemCollection> tipo. Este exemplo de código é parte de um exemplo maior fornecido para o <xref:System.Web.Script.Serialization.JavaScriptConverter> classe.  
  
 [!code-csharp[System.Web.Script.Serialization#3](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.Script.Serialization/CS/App_Code/ListItemCollectionConverter.cs#3)]
 [!code-vb[System.Web.Script.Serialization#3](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.Script.Serialization/VB/App_Code/ListItemCollectionConverter.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="P:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" /> deve sempre retornar que uma coleção e a coleção devem conter pelo menos uma entrada.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>