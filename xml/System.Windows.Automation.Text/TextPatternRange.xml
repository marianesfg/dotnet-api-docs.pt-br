<Type Name="TextPatternRange" FullName="System.Windows.Automation.Text.TextPatternRange">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ef0652356d536636531ed444533877bd5e2bb994" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37583474" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TextPatternRange" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextPatternRange extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Text.TextPatternRange" />
  <TypeSignature Language="VB.NET" Value="Public Class TextPatternRange" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextPatternRange" />
  <TypeSignature Language="F#" Value="type TextPatternRange = class" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationClient</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="f96c2-101">Representa um intervalo de texto contínuo em um contêiner <see cref="T:System.Windows.Automation.TextPattern" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f96c2-101">Represents a span of continuous text in a <see cref="T:System.Windows.Automation.TextPattern" /> container.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f96c2-102">Um <xref:System.Windows.Automation.Text.TextPatternRange> pode representar um ponto de inserção, um subconjunto ou todo o texto em um <xref:System.Windows.Automation.TextPattern> contêiner.</span><span class="sxs-lookup"><span data-stu-id="f96c2-102">A <xref:System.Windows.Automation.Text.TextPatternRange> can represent an insertion point, a subset, or all of the text in a <xref:System.Windows.Automation.TextPattern> container.</span></span>  
  
 <span data-ttu-id="f96c2-103">Um <xref:System.Windows.Automation.Text.TextPatternRange> se tornará inválido caso um dos seguintes: o texto na <xref:System.Windows.Automation.TextPattern> contêiner é alterado devido a alguma atividade de usuário, ou o <xref:System.Windows.Automation.ValuePattern.SetValue%2A> método de <xref:System.Windows.Automation.ValuePattern> é usado para alterar programaticamente o valor do texto em que o <xref:System.Windows.Automation.TextPattern> recipiente.</span><span class="sxs-lookup"><span data-stu-id="f96c2-103">A <xref:System.Windows.Automation.Text.TextPatternRange> will become invalid if one of the following occurs: the text in the <xref:System.Windows.Automation.TextPattern> container changes because of some user activity, or the <xref:System.Windows.Automation.ValuePattern.SetValue%2A> method of <xref:System.Windows.Automation.ValuePattern> is used to programmatically change the value of the text in the <xref:System.Windows.Automation.TextPattern> container.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.Provider.ITextRangeProvider" />
  </Docs>
  <Members>
    <Member MemberName="AddToSelection">
      <MemberSignature Language="C#" Value="public void AddToSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToSelection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.AddToSelection" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToSelection ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToSelection();" />
      <MemberSignature Language="F#" Value="member this.AddToSelection : unit -&gt; unit" Usage="textPatternRange.AddToSelection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f96c2-104">Adiciona à coleção do texto realçado em um contêiner de texto que dá suporte a várias seleções não contíguas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-104">Adds to the collection of highlighted text in a text container that supports multiple, disjoint selections.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f96c2-105">Move o ponto de inserção de texto para a área da nova seleção.</span><span class="sxs-lookup"><span data-stu-id="f96c2-105">The text insertion point moves to the area of the new selection.</span></span>  
  
 <span data-ttu-id="f96c2-106">Fornece um intervalo de texto de degeneração move o ponto de inserção.</span><span class="sxs-lookup"><span data-stu-id="f96c2-106">Providing a degenerate text range moves the insertion point.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="f96c2-107">Se o provedor de texto não der suporte a várias seleções não contíguas (por exemplo, <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> deve ter um valor de <see langword="Multiple" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-107">If text provider does not support multiple, disjoint selections (for example, <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> must have a value of <see langword="Multiple" />).</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.Select" />
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection" />
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Text.TextPatternRange Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.Text.TextPatternRange Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As TextPatternRange" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Text::TextPatternRange ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Windows.Automation.Text.TextPatternRange" Usage="textPatternRange.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Text.TextPatternRange</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f96c2-108">Recupera um novo <see cref="T:System.Windows.Automation.Text.TextPatternRange" /> idêntico ao <see cref="T:System.Windows.Automation.Text.TextPatternRange" /> original e herdando todas as propriedades do original.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-108">Retrieves a new <see cref="T:System.Windows.Automation.Text.TextPatternRange" /> identical to the original <see cref="T:System.Windows.Automation.Text.TextPatternRange" /> and inheriting all properties of the original.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f96c2-109">O novo intervalo de texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-109">The new text range.</span>
          </span>
          <span data-ttu-id="f96c2-110">Uma referência nula (<see langword="Nothing" /> no Visual Basic) nunca é retornada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-110">A null reference (<see langword="Nothing" /> in Visual Basic) is never returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f96c2-111">Como alternativa, crie um novo <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> do <xref:System.Windows.Automation.TextPattern> e mover os dois pontos de extremidade que correspondam aos pontos de extremidade do intervalo de texto original.</span><span class="sxs-lookup"><span data-stu-id="f96c2-111">Alternatively, create a new <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> from the <xref:System.Windows.Automation.TextPattern> and move the two endpoints to correspond with the endpoints of the original text range.</span></span>  
  
 <span data-ttu-id="f96c2-112">O novo intervalo de pode ser manipulado de forma independente do original.</span><span class="sxs-lookup"><span data-stu-id="f96c2-112">The new range can be manipulated independently from the original.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1060](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1060)]  
  
 [!code-vb[UIATextPattern_snip#2060](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2060)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <altmember cref="M:System.Windows.Automation.TextPattern.RangeFromChild(System.Windows.Automation.AutomationElement)" />
        <altmember cref="M:System.Windows.Automation.TextPattern.RangeFromPoint(System.Windows.Point)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public bool Compare (System.Windows.Automation.Text.TextPatternRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Compare(class System.Windows.Automation.Text.TextPatternRange range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.Compare(System.Windows.Automation.Text.TextPatternRange)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compare (range As TextPatternRange) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Compare(System::Windows::Automation::Text::TextPatternRange ^ range);" />
      <MemberSignature Language="F#" Value="member this.Compare : System.Windows.Automation.Text.TextPatternRange -&gt; bool" Usage="textPatternRange.Compare range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="System.Windows.Automation.Text.TextPatternRange" />
      </Parameters>
      <Docs>
        <param name="range">
          <span data-ttu-id="f96c2-113">Um intervalo de texto a ser comparado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-113">A text range to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f96c2-114">Retorna um valor <see cref="T:System.Boolean" /> que indica se o alcance (o ponto de extremidade <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> até o ponto de extremidade <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" />) de um intervalo de texto é igual a outro intervalo de texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-114">Returns a <see cref="T:System.Boolean" /> value indicating whether the span (the <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> endpoint to the <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint) of a text range is the same as another text range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f96c2-115">
            <see langword="true" /> se o alcance dos dois intervalos de texto for idêntico, caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-115">
              <see langword="true" /> if the span of both text ranges is identical; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1061](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1061)]  
  
 [!code-vb[UIATextPattern_snip#2061](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2061)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f96c2-116">Se o intervalo sendo comparado não vem do mesmo provedor de texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-116">If the range being compared does not come from the same text provider.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="CompareEndpoints">
      <MemberSignature Language="C#" Value="public int CompareEndpoints (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextPatternRange targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareEndpoints(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, class System.Windows.Automation.Text.TextPatternRange targetRange, valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareEndpoints (endpoint As TextPatternRangeEndpoint, targetRange As TextPatternRange, targetEndpoint As TextPatternRangeEndpoint) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareEndpoints(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Text::TextPatternRange ^ targetRange, System::Windows::Automation::Text::TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="F#" Value="member this.CompareEndpoints : System.Windows.Automation.Text.TextPatternRangeEndpoint * System.Windows.Automation.Text.TextPatternRange * System.Windows.Automation.Text.TextPatternRangeEndpoint -&gt; int" Usage="textPatternRange.CompareEndpoints (endpoint, targetRange, targetEndpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="targetRange" Type="System.Windows.Automation.Text.TextPatternRange" />
        <Parameter Name="targetEndpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint">
          <span data-ttu-id="f96c2-117">O ponto de extremidade <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> ou <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> do chamador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-117">The <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> or <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint of the caller.</span>
          </span>
        </param>
        <param name="targetRange">
          <span data-ttu-id="f96c2-118">O intervalo de destino para comparação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-118">The target range for comparison.</span>
          </span>
        </param>
        <param name="targetEndpoint">
          <span data-ttu-id="f96c2-119">O ponto de extremidade <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> ou <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> do destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-119">The <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> or <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint of the target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f96c2-120">Retorna um <see cref="T:System.Int32" /> que indica se dois intervalos de texto têm pontos de extremidade idênticos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-120">Returns an <see cref="T:System.Int32" /> indicating whether two text ranges have identical endpoints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f96c2-121">Retorna um valor negativo se o ponto de extremidade do chamador ocorre antes no texto do que o ponto de extremidade de destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-121">Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint.</span>
          </span>
          <span data-ttu-id="f96c2-122">Retorna zero se o ponto de extremidade do chamador está no mesmo local que o ponto de extremidade de destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-122">Returns zero if the caller's endpoint is at the same location as the target endpoint.</span>
          </span>
          <span data-ttu-id="f96c2-123">Retorna um valor positivo se o ponto de extremidade do chamador ocorre depois no texto do que o ponto de extremidade de destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-123">Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f96c2-124">Comparando os pontos de extremidade inicial e finais do mesmo intervalo de texto, você pode identificar se um intervalo de texto é degenerado ou se os pontos de extremidade estão na ordem de fluxo de lógica de texto.</span><span class="sxs-lookup"><span data-stu-id="f96c2-124">By comparing the starting and ending endpoints of the same text range you can identify if a text range is degenerate or if the endpoints are in the order of logical text flow.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1062](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1062)]  
  
 [!code-vb[UIATextPattern_snip#2062](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2062)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f96c2-125">Se o intervalo é uma referência nula (<see langword="Nothing" /> no Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-125">If range is a null reference (<see langword="Nothing" /> in Visual Basic).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f96c2-126">Se o intervalo for de outro contêiner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-126">If range is from another container.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="ExpandToEnclosingUnit">
      <MemberSignature Language="C#" Value="public void ExpandToEnclosingUnit (System.Windows.Automation.Text.TextUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExpandToEnclosingUnit(valuetype System.Windows.Automation.Text.TextUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExpandToEnclosingUnit (unit As TextUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExpandToEnclosingUnit(System::Windows::Automation::Text::TextUnit unit);" />
      <MemberSignature Language="F#" Value="member this.ExpandToEnclosingUnit : System.Windows.Automation.Text.TextUnit -&gt; unit" Usage="textPatternRange.ExpandToEnclosingUnit unit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
      </Parameters>
      <Docs>
        <param name="unit">
          <span data-ttu-id="f96c2-127">A unidade textual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-127">The textual unit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f96c2-128">Expande o intervalo de texto para o <see cref="T:System.Windows.Automation.Text.TextUnit" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-128">Expands the text range to the specified <see cref="T:System.Windows.Automation.Text.TextUnit" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f96c2-129">Se o intervalo já é uma quantidade exata de unidades especificadas permanece inalterado.</span><span class="sxs-lookup"><span data-stu-id="f96c2-129">If the range is already an exact quantity of the specified units then it remains unchanged.</span></span>  
  
 <span data-ttu-id="f96c2-130">Para que o <xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> método a ser executado com êxito, uma sequência de ações é executada em segundo plano.</span><span class="sxs-lookup"><span data-stu-id="f96c2-130">In order for the <xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> method to execute successfully, a sequence of actions is performed behind the scenes.</span></span>  
  
1.  <span data-ttu-id="f96c2-131">O intervalo de texto é normalizado; ou seja, o intervalo de texto é recolhido em um intervalo de degeneração a <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> ponto de extremidade, tornando o <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> supérfluo de ponto de extremidade.</span><span class="sxs-lookup"><span data-stu-id="f96c2-131">The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint, making the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint superfluous.</span></span> <span data-ttu-id="f96c2-132">Essa etapa é necessária para remover a ambiguidade em situações onde um intervalo de texto abrange `unit` limites; por exemplo, "{a U} RL [ https://www.microsoft.com/ ](https://www.microsoft.com/) é inserido no texto" onde "{" e "}" é o texto de pontos de extremidade do intervalo.</span><span class="sxs-lookup"><span data-stu-id="f96c2-132">This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, "{The U}RL [https://www.microsoft.com/](https://www.microsoft.com/) is embedded in text" where "{" and "}" are the text range endpoints.</span></span>  
  
2.  <span data-ttu-id="f96c2-133">O intervalo resultante é movido para trás na <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> para o início da solicitada `unit` limites.</span><span class="sxs-lookup"><span data-stu-id="f96c2-133">The resulting range is moved backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to the beginning of the requested `unit` boundary.</span></span>  
  
3.  <span data-ttu-id="f96c2-134">O intervalo é movido para frente ou para trás na <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> pelo número solicitado de `unit` limites.</span><span class="sxs-lookup"><span data-stu-id="f96c2-134">The range is moved forward or backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> by the requested number of `unit` boundaries.</span></span>  
  
4.  <span data-ttu-id="f96c2-135">O intervalo é expandido de um estado de intervalo de degeneração, em seguida, movendo o <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> ponto de extremidade por um solicitado `unit` limites.</span><span class="sxs-lookup"><span data-stu-id="f96c2-135">The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint by one requested `unit` boundary.</span></span>  
  
 <span data-ttu-id="f96c2-136">![Ajustes de intervalo por Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "ajustes de intervalo por Move & ExpandToEnclosingUnit")</span><span class="sxs-lookup"><span data-stu-id="f96c2-136">![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "Range adjustments by Move & ExpandToEnclosingUnit")</span></span>  
<span data-ttu-id="f96c2-137">Exemplos de como um intervalo de texto é ajustado para Move () e ExpandToEnclosingUnit)</span><span class="sxs-lookup"><span data-stu-id="f96c2-137">Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f96c2-138">Essas etapas são necessárias, pois é comum que um leitor de tela sejam lidos uma palavra inteira, frase ou parágrafo inteiro em qualquer posição do cursor virtual ou o ponto de inserção.</span><span class="sxs-lookup"><span data-stu-id="f96c2-138">These steps are necessary since it is common for a screen reader to read out a full word, sentence, or entire paragraph at the insertion point or any virtual cursor position.</span></span>  
  
 <span data-ttu-id="f96c2-139"><xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> respeita o texto oculto e visível.</span><span class="sxs-lookup"><span data-stu-id="f96c2-139"><xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> respects both hidden and visible text.</span></span> <span data-ttu-id="f96c2-140">O cliente de automação de interface do usuário pode verificar o <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> quanto à visibilidade do texto.</span><span class="sxs-lookup"><span data-stu-id="f96c2-140">The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.</span></span>  
  
 <span data-ttu-id="f96c2-141"><xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> adia para a próxima maior <xref:System.Windows.Automation.Text.TextUnit> com suporte se o determinado <xref:System.Windows.Automation.Text.TextUnit> não é compatível com o controle.</span><span class="sxs-lookup"><span data-stu-id="f96c2-141"><xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.</span></span>  
  
 <span data-ttu-id="f96c2-142">A ordem, da unidade menor ao maior, é listada abaixo.</span><span class="sxs-lookup"><span data-stu-id="f96c2-142">The order, from smallest unit to largest, is listed below.</span></span>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1063](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1063)]  
  
 [!code-vb[UIATextPattern_snip#2063](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2063)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="FindAttribute">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Text.TextPatternRange FindAttribute (System.Windows.Automation.AutomationTextAttribute attribute, object value, bool backward);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.Text.TextPatternRange FindAttribute(class System.Windows.Automation.AutomationTextAttribute attribute, object value, bool backward) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindAttribute (attribute As AutomationTextAttribute, value As Object, backward As Boolean) As TextPatternRange" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Text::TextPatternRange ^ FindAttribute(System::Windows::Automation::AutomationTextAttribute ^ attribute, System::Object ^ value, bool backward);" />
      <MemberSignature Language="F#" Value="member this.FindAttribute : System.Windows.Automation.AutomationTextAttribute * obj * bool -&gt; System.Windows.Automation.Text.TextPatternRange" Usage="textPatternRange.FindAttribute (attribute, value, backward)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Text.TextPatternRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Windows.Automation.AutomationTextAttribute" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="backward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="f96c2-143">O atributo a ser pesquisado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-143">The attribute to search for.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="f96c2-144">O valor de atributo a ser pesquisado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-144">The attribute value to search for.</span>
          </span>
          <span data-ttu-id="f96c2-145">Esse valor deve corresponder ao tipo especificado para o atributo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-145">This value must match the type specified for the attribute.</span>
          </span>
        </param>
        <param name="backward">
          <span data-ttu-id="f96c2-146">
            <see langword="true" /> se o último intervalo de texto que ocorre por último deve ser retornada em vez da primeira, caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-146">
              <see langword="true" /> if the last occurring text range should be returned instead of the first; otherwise <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f96c2-147">Retorna um subconjunto do intervalo de texto que tem o valor de atributo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-147">Returns a text range subset that has the specified attribute value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f96c2-148">Um intervalo de texto com um atributo e um valor de atributo correspondentes, caso contrário, nulo (<see langword="Nothing" /> no Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-148">A text range having a matching attribute and attribute value; otherwise null (<see langword="Nothing" /> in Visual Basic).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f96c2-149">Não há nenhuma diferenciação entre texto oculto e visível.</span><span class="sxs-lookup"><span data-stu-id="f96c2-149">There is no differentiation between hidden and visible text.</span></span> <span data-ttu-id="f96c2-150">Clientes de automação de interface do usuário podem usar <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> para verificar a visibilidade do texto.</span><span class="sxs-lookup"><span data-stu-id="f96c2-150">UI Automation clients can use <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> to check text visibility.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f96c2-151">Use <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> para pesquisar o documento inteiro.</span><span class="sxs-lookup"><span data-stu-id="f96c2-151">Use <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to search the entire document.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1064](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1064)]  
  
 [!code-vb[UIATextPattern_snip#2064](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2064)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.TextPattern" />
      </Docs>
    </Member>
    <Member MemberName="FindText">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Text.TextPatternRange FindText (string text, bool backward, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.Text.TextPatternRange FindText(string text, bool backward, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindText (text As String, backward As Boolean, ignoreCase As Boolean) As TextPatternRange" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Text::TextPatternRange ^ FindText(System::String ^ text, bool backward, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="member this.FindText : string * bool * bool -&gt; System.Windows.Automation.Text.TextPatternRange" Usage="textPatternRange.FindText (text, backward, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Text.TextPatternRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="backward" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">
          <span data-ttu-id="f96c2-152">A cadeia de caracteres de texto a ser pesquisada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-152">The text string to search for.</span>
          </span>
        </param>
        <param name="backward">
          <span data-ttu-id="f96c2-153">
            <see langword="true" /> se o último intervalo de texto que ocorre por último deve ser retornada em vez da primeira, caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-153">
              <see langword="true" /> if the last occurring text range should be returned instead of the first; otherwise <see langword="false" />.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="f96c2-154">
            <see langword="true" /> se o uso de maiúsculas e minúsculas deve ser ignorado, caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-154">
              <see langword="true" /> if case should be ignored; otherwise <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f96c2-155">Retorna um subconjunto do intervalo de texto que contém o texto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-155">Returns a text range subset that contains the specified text.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f96c2-156">Um intervalo de texto que corresponde ao texto especificado, caso contrário, nulo (<see langword="Nothing" /> no Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-156">A text range matching the specified text; otherwise null (<see langword="Nothing" /> in Visual Basic).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f96c2-157">Não há nenhuma diferenciação entre texto oculto e visível.</span><span class="sxs-lookup"><span data-stu-id="f96c2-157">There is no differentiation between hidden and visible text.</span></span> <span data-ttu-id="f96c2-158">Clientes de automação de interface do usuário podem usar <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> para verificar a visibilidade do texto.</span><span class="sxs-lookup"><span data-stu-id="f96c2-158">UI Automation clients can use <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> to check text visibility.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f96c2-159">Use <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> para pesquisar o documento inteiro.</span><span class="sxs-lookup"><span data-stu-id="f96c2-159">Use <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to search the entire document.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1065](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1065)]  
  
 [!code-vb[UIATextPattern_snip#2065](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2065)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.TextPattern" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeValue">
      <MemberSignature Language="C#" Value="public object GetAttributeValue (System.Windows.Automation.AutomationTextAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetAttributeValue(class System.Windows.Automation.AutomationTextAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttributeValue (attribute As AutomationTextAttribute) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetAttributeValue(System::Windows::Automation::AutomationTextAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="member this.GetAttributeValue : System.Windows.Automation.AutomationTextAttribute -&gt; obj" Usage="textPatternRange.GetAttributeValue attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Windows.Automation.AutomationTextAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="f96c2-160">O atributo de texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-160">The text attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f96c2-161">Retorna o valor do atributo especificado em todo o intervalo de texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-161">Returns the value of the specified attribute across the entire text range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f96c2-162">Retorna o valor do atributo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-162">Returns the value of the specified attribute.</span>
          </span>
          <span data-ttu-id="f96c2-163">Por exemplo, GetAttributeValue(TextPattern.FontNameAttribute) retornaria uma cadeia de caracteres que representa o nome da fonte, se for único, do intervalo de texto, ao passo que GetAttributeValue(TextPattern.IsItalicAttribute) retornaria um booliano.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-163">For example, GetAttributeValue(TextPattern.FontNameAttribute) would return a string that represents the font name, if unique, of the text range while GetAttributeValue(TextPattern.IsItalicAttribute) would return a boolean.</span>
          </span>
          <span data-ttu-id="f96c2-164">Retorna <see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" /> se o valor do atributo especificado varia ao longo do intervalo de texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-164">Returns <see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" /> if the value of the specified attribute varies over the text range.</span>
          </span>
          <span data-ttu-id="f96c2-165">Retorna <see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /> se o atributo especificado não for compatível com o provedor ou com o controle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-165">Returns <see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /> if the specified attribute is not supported by the provider or the control.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f96c2-166">Não há nenhuma diferenciação entre texto oculto e visível.</span><span class="sxs-lookup"><span data-stu-id="f96c2-166">There is no differentiation between hidden and visible text.</span></span> <span data-ttu-id="f96c2-167">Clientes de automação de interface do usuário podem usar <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> para verificar a visibilidade do texto.</span><span class="sxs-lookup"><span data-stu-id="f96c2-167">UI Automation clients can use <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> to check text visibility.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1066](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1066)]  
  
 [!code-vb[UIATextPattern_snip#2066](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2066)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f96c2-168">Se o atributo especificado não for válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-168">If the specified attribute is not valid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetBoundingRectangles">
      <MemberSignature Language="C#" Value="public System.Windows.Rect[] GetBoundingRectangles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Rect[] GetBoundingRectangles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBoundingRectangles () As Rect()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Rect&gt; ^ GetBoundingRectangles();" />
      <MemberSignature Language="F#" Value="member this.GetBoundingRectangles : unit -&gt; System.Windows.Rect[]" Usage="textPatternRange.GetBoundingRectangles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f96c2-169">Recupera uma coleção de retângulos delimitadores para cada linha de texto parcial ou totalmente visível em um intervalo de texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-169">Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f96c2-170">Uma matriz de retângulos delimitadores para cada linha de texto total ou parcial em um intervalo de texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-170">An array of bounding rectangles for each full or partial line of text in a text range.</span>
          </span>
          <span data-ttu-id="f96c2-171">Uma matriz vazia para um intervalo de texto de degeneração.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-171">An empty array for a degenerate text range.</span>
          </span>
          <span data-ttu-id="f96c2-172">Uma matriz vazia para um intervalo de texto que tem as coordenadas da tela colocando-o completamente fora da tela, rolado para fora da exibição ou obscurecido por uma janela sobreposta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-172">An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1067](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1067)]  
  
 [!code-vb[UIATextPattern_snip#2067](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2067)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationElement[] GetChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.AutomationElement[] GetChildren() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetChildren" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChildren () As AutomationElement()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Automation::AutomationElement ^&gt; ^ GetChildren();" />
      <MemberSignature Language="F#" Value="member this.GetChildren : unit -&gt; System.Windows.Automation.AutomationElement[]" Usage="textPatternRange.GetChildren " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationElement[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f96c2-173">Recupera uma coleção de todos os objetos inseridos que estão dentro do intervalo de texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-173">Retrieves a collection of all embedded objects that fall within the text range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f96c2-174">Uma coleção de todos os objetos filho que estão dentro do intervalo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-174">A collection of all child objects that fall within the range.</span>
          </span>
          <span data-ttu-id="f96c2-175">Os filhos que sobrepõem o intervalo, mas não estão totalmente dentro dele também serão incluídos na coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-175">Children that overlap with the range but are not entirely enclosed by it will also be included in the collection.</span>
          </span>
          <span data-ttu-id="f96c2-176">Retorna uma coleção vazia se não há nenhum objeto filho.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-176">Returns an empty collection if there are no child objects.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIATextPattern_snip#StartTarget](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#starttarget)]
 [!code-vb[UIATextPattern_snip#StartTarget](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#starttarget)]  
[!code-csharp[UIATextPattern_snip#GetTextElement](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#gettextelement)]
[!code-vb[UIATextPattern_snip#GetTextElement](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#gettextelement)]  
[!code-csharp[UIATextPattern_snip#GetEmbeddedObjects](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#getembeddedobjects)]
[!code-vb[UIATextPattern_snip#GetEmbeddedObjects](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#getembeddedobjects)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnclosingElement">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationElement GetEnclosingElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.AutomationElement GetEnclosingElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnclosingElement () As AutomationElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::AutomationElement ^ GetEnclosingElement();" />
      <MemberSignature Language="F#" Value="member this.GetEnclosingElement : unit -&gt; System.Windows.Automation.AutomationElement" Usage="textPatternRange.GetEnclosingElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f96c2-177">Retorna o <see cref="T:System.Windows.Automation.AutomationElement" /> mais interno que inclui o intervalo de texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-177">Returns the innermost <see cref="T:System.Windows.Automation.AutomationElement" /> that encloses the text range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f96c2-178">O elemento mais interno que inclui o chamador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-178">The innermost element enclosing the caller.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f96c2-179">O delimitador <xref:System.Windows.Automation.AutomationElement>, geralmente, o provedor de texto que fornece o intervalo de texto.</span><span class="sxs-lookup"><span data-stu-id="f96c2-179">The enclosing <xref:System.Windows.Automation.AutomationElement>, typically the text provider that supplies the text range.</span></span> <span data-ttu-id="f96c2-180">No entanto, se o provedor de texto é compatível com elementos filhos como tabelas ou hiperlinks, o elemento de fechamento pode ser um descendente do provedor de texto.</span><span class="sxs-lookup"><span data-stu-id="f96c2-180">However, if the text provider supports child elements such as tables or hyperlinks, then the enclosing element could be a descendant of the text provider.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1069](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1069)]  
  
 [!code-vb[UIATextPattern_snip#2069](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2069)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetText">
      <MemberSignature Language="C#" Value="public string GetText (int maxLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetText(int32 maxLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetText (maxLength As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetText(int maxLength);" />
      <MemberSignature Language="F#" Value="member this.GetText : int -&gt; string" Usage="textPatternRange.GetText maxLength" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxLength">
          <span data-ttu-id="f96c2-181">O tamanho máximo da cadeia de caracteres a ser retornada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-181">The maximum length of the string to return.</span>
          </span>
          <span data-ttu-id="f96c2-182">Use <c>-1</c> se não for necessário nenhum limite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-182">Use <c>-1</c> if no limit is required.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f96c2-183">Retorna o texto sem formatação do intervalo de texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-183">Returns the plain text of the text range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f96c2-184">O texto sem formatação do intervalo de texto, possivelmente truncado no <paramref name="maxLength" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-184">The plain text of the text range, possibly truncated at the specified <paramref name="maxLength" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f96c2-185"><xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A> respeita o texto oculto e visível.</span><span class="sxs-lookup"><span data-stu-id="f96c2-185"><xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A> respects both hidden and visible text.</span></span> <span data-ttu-id="f96c2-186">O cliente de automação de interface do usuário pode verificar o <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> quanto à visibilidade do texto.</span><span class="sxs-lookup"><span data-stu-id="f96c2-186">The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.</span></span>  
  
 <span data-ttu-id="f96c2-187">Se `maxLength` é maior que o comprimento do intervalo de texto do chamador, a cadeia de caracteres retornada será o texto sem formatação do intervalo de texto.</span><span class="sxs-lookup"><span data-stu-id="f96c2-187">If `maxLength` is greater than the length of the text span of the caller, the string returned will be the plain text of the text range.</span></span>  
  
 <span data-ttu-id="f96c2-188"><xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A> não serão afetados pela ordem dos pontos de extremidade no fluxo de texto; ele sempre retornará o texto entre os pontos de extremidade de início e término do intervalo de texto na ordem de fluxo de texto lógico.</span><span class="sxs-lookup"><span data-stu-id="f96c2-188"><xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A> will not be affected by the order of endpoints in the text flow; it will always return the text between the Start and End endpoints of the text range in the logical text flow order.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1070](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1070)]  
  
 [!code-vb[UIATextPattern_snip#2070](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2070)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="f96c2-189">Se <paramref name="maxLength" /> for menor que -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-189">If <paramref name="maxLength" /> is less than -1.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public int Move (System.Windows.Automation.Text.TextUnit unit, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Move(valuetype System.Windows.Automation.Text.TextUnit unit, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Move (unit As TextUnit, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Move(System::Windows::Automation::Text::TextUnit unit, int count);" />
      <MemberSignature Language="F#" Value="member this.Move : System.Windows.Automation.Text.TextUnit * int -&gt; int" Usage="textPatternRange.Move (unit, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unit">
          <span data-ttu-id="f96c2-190">O limite da unidade de texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-190">The text unit boundary.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="f96c2-191">O número de unidades de texto a serem movidas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-191">The number of text units to move.</span>
          </span>
          <span data-ttu-id="f96c2-192">Um valor positivo move o intervalo de texto para frente, um valor negativo move o intervalo de texto para trás e 0 não tem nenhum efeito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-192">A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f96c2-193">Move o intervalo de texto conforme o número de unidades de texto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-193">Moves the text range the specified number of text units.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f96c2-194">O número de unidades realmente movidas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-194">The number of units actually moved.</span>
          </span>
          <span data-ttu-id="f96c2-195">Isso pode ser menos que o número solicitado se um dos pontos de extremidade do novo intervalo de texto for maior ou menor do que os pontos de extremidade de <see cref="P:System.Windows.Automation.TextPattern.DocumentRange" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-195">This can be less than the number requested if either of the new text range endpoints is greater than or less than the <see cref="P:System.Windows.Automation.TextPattern.DocumentRange" /> endpoints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f96c2-196">Quando for necessário atravessar o conteúdo de um intervalo de texto, uma série de etapas envolvidas nos bastidores para que o <xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> método a ser executado com êxito.</span><span class="sxs-lookup"><span data-stu-id="f96c2-196">When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> method to execute successfully.</span></span>  
  
1.  <span data-ttu-id="f96c2-197">O intervalo de texto é normalizado; ou seja, o intervalo de texto é recolhido em um intervalo de degeneração a <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> ponto de extremidade, o que torna o <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> supérfluo de ponto de extremidade.</span><span class="sxs-lookup"><span data-stu-id="f96c2-197">The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint superfluous.</span></span> <span data-ttu-id="f96c2-198">Essa etapa é necessária para remover a ambiguidade em situações onde um intervalo de texto abrange `unit` limites; por exemplo, "{a U} RL [ https://www.microsoft.com/ ](https://www.microsoft.com/) é inserido no texto" onde "{" e "}" é o texto de pontos de extremidade do intervalo.</span><span class="sxs-lookup"><span data-stu-id="f96c2-198">This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, "{The U}RL [https://www.microsoft.com/](https://www.microsoft.com/) is embedded in text" where "{" and "}" are the text range endpoints.</span></span>  
  
2.  <span data-ttu-id="f96c2-199">O intervalo resultante é movido para trás na <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> para o início da solicitada `unit` limites.</span><span class="sxs-lookup"><span data-stu-id="f96c2-199">The resulting range is moved backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to the beginning of the requested `unit` boundary.</span></span>  
  
3.  <span data-ttu-id="f96c2-200">O intervalo é movido para frente ou para trás na <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> pelo número solicitado de `unit` limites.</span><span class="sxs-lookup"><span data-stu-id="f96c2-200">The range is moved forward or backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> by the requested number of `unit` boundaries.</span></span>  
  
4.  <span data-ttu-id="f96c2-201">O intervalo é expandido de um estado de intervalo de degeneração, em seguida, movendo o <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> ponto de extremidade por um solicitado `unit` limites.</span><span class="sxs-lookup"><span data-stu-id="f96c2-201">The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint by one requested `unit` boundary.</span></span>  
  
 <span data-ttu-id="f96c2-202">![Ajustes de intervalo por Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "ajustes de intervalo por Move & ExpandToEnclosingUnit")</span><span class="sxs-lookup"><span data-stu-id="f96c2-202">![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "Range adjustments by Move & ExpandToEnclosingUnit")</span></span>  
<span data-ttu-id="f96c2-203">Exemplos de como um intervalo de texto é ajustado para Move () e ExpandToEnclosingUnit)</span><span class="sxs-lookup"><span data-stu-id="f96c2-203">Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</span></span>  
  
 <span data-ttu-id="f96c2-204">O conteúdo textual (ou texto interno) de um contêiner de texto e um objeto inserido, como um hiperlink ou célula de tabela, é exposto como um fluxo de texto única e contínua na visualização de controle e exibição de conteúdo a [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] de árvore; objeto limites são ignorados.</span><span class="sxs-lookup"><span data-stu-id="f96c2-204">The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] tree; object boundaries are ignored.</span></span> <span data-ttu-id="f96c2-205">Se um cliente de automação de interface do usuário está recuperando o texto com a finalidade de citar, interpretar ou analisar de alguma maneira, o intervalo de texto deve ser verificado para casos especiais, como uma tabela com textuais conteúdos ou outros objetos inseridos.</span><span class="sxs-lookup"><span data-stu-id="f96c2-205">If a UI Automation client is retrieving the text for the purpose of reciting, interpreting, or analyzing in some manner, the text range should be checked for special cases, such as a table with textual content or other embedded objects.</span></span> <span data-ttu-id="f96c2-206">Isso pode ser feito por meio da chamada <xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> para obter uma <xref:System.Windows.Automation.AutomationElement> para cada embedded objeto e, em seguida, chamar <xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> para obter um intervalo de texto para cada elemento; isso é feito de forma recursiva até que todo o conteúdo textual foi recuperado.</span><span class="sxs-lookup"><span data-stu-id="f96c2-206">This can be accomplished by calling <xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> to obtain an <xref:System.Windows.Automation.AutomationElement> for each embedded object and then calling <xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> to obtain a text range for each element; this is done recursively until all textual content has been retrieved.</span></span>  
  
 <span data-ttu-id="f96c2-207">![Intervalos de texto abrangidos por objetos inseridos. ] (~/add/media/uia-textpattern-embeddedobjecttextranges.png "Intervalos de texto abrangidos por objetos inseridos.")</span><span class="sxs-lookup"><span data-stu-id="f96c2-207">![Text ranges spanned by embedded objects.](~/add/media/uia-textpattern-embeddedobjecttextranges.png "Text ranges spanned by embedded objects.")</span></span>  
<span data-ttu-id="f96c2-208">Exemplo de um fluxo de texto com objetos inseridos e seus intervalos abrangentes</span><span class="sxs-lookup"><span data-stu-id="f96c2-208">Example of a text stream with embedded objects and their range spans</span></span>  
  
 <span data-ttu-id="f96c2-209"><xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> respeita o texto oculto e visível.</span><span class="sxs-lookup"><span data-stu-id="f96c2-209"><xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> respects both hidden and visible text.</span></span> <span data-ttu-id="f96c2-210">O cliente de automação de interface do usuário pode verificar o <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> quanto à visibilidade do texto.</span><span class="sxs-lookup"><span data-stu-id="f96c2-210">The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.</span></span>  
  
 <span data-ttu-id="f96c2-211"><xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> adia para a próxima maior <xref:System.Windows.Automation.Text.TextUnit> com suporte se o determinado <xref:System.Windows.Automation.Text.TextUnit> não é compatível com o controle.</span><span class="sxs-lookup"><span data-stu-id="f96c2-211"><xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.</span></span>  
  
 <span data-ttu-id="f96c2-212">A ordem, da unidade menor ao maior, é listada abaixo.</span><span class="sxs-lookup"><span data-stu-id="f96c2-212">The order, from smallest unit to largest, is listed below.</span></span>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
> [!NOTE]
>  <span data-ttu-id="f96c2-213">O texto não é alterado de forma alguma, como o intervalo de texto abrange apenas uma parte diferente do texto.</span><span class="sxs-lookup"><span data-stu-id="f96c2-213">The text is not altered in any way as the text range just spans a different part of the text.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#StartTarget](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#starttarget)]
 [!code-vb[UIATextPattern_snip#StartTarget](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#starttarget)]  
[!code-csharp[UIATextPattern_snip#GetTextElement](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#gettextelement)]
[!code-vb[UIATextPattern_snip#GetTextElement](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#gettextelement)]  
[!code-csharp[UIATextPattern_snip#MoveSelection](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#moveselection)]
[!code-vb[UIATextPattern_snip#MoveSelection](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#moveselection)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="MoveEndpointByRange">
      <MemberSignature Language="C#" Value="public void MoveEndpointByRange (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextPatternRange targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveEndpointByRange(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, class System.Windows.Automation.Text.TextPatternRange targetRange, valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveEndpointByRange (endpoint As TextPatternRangeEndpoint, targetRange As TextPatternRange, targetEndpoint As TextPatternRangeEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveEndpointByRange(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Text::TextPatternRange ^ targetRange, System::Windows::Automation::Text::TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="F#" Value="member this.MoveEndpointByRange : System.Windows.Automation.Text.TextPatternRangeEndpoint * System.Windows.Automation.Text.TextPatternRange * System.Windows.Automation.Text.TextPatternRangeEndpoint -&gt; unit" Usage="textPatternRange.MoveEndpointByRange (endpoint, targetRange, targetEndpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="targetRange" Type="System.Windows.Automation.Text.TextPatternRange" />
        <Parameter Name="targetEndpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint">
          <span data-ttu-id="f96c2-214">O ponto de extremidade a ser movido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-214">The endpoint to move.</span>
          </span>
        </param>
        <param name="targetRange">
          <span data-ttu-id="f96c2-215">Outro intervalo do mesmo provedor de texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-215">Another range from the same text provider.</span>
          </span>
        </param>
        <param name="targetEndpoint">
          <span data-ttu-id="f96c2-216">Um ponto de extremidade no outro intervalo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-216">An endpoint on the other range.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f96c2-217">Move um ponto de extremidade de um intervalo de texto para o ponto de extremidade especificado de um segundo intervalo de texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-217">Moves one endpoint of a text range to the specified endpoint of a second text range.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f96c2-218">Se o ponto de extremidade que está sendo movido cruza o outro ponto de extremidade do mesmo intervalo de texto, em seguida, outro ponto de extremidade é movido também, resultando em um intervalo de degeneração e assegurar a ordenação correta dos pontos de extremidade (ou seja, <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> é sempre menor ou igual a <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End>).</span><span class="sxs-lookup"><span data-stu-id="f96c2-218">If the endpoint being moved crosses the other endpoint of the same text range then that other endpoint is moved also, resulting in a degenerate range and ensuring the correct ordering of the endpoints (that is, <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> is always less than or equal to <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End>).</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1072](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1072)]  
  
 [!code-vb[UIATextPattern_snip#2072](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2072)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveEndpointByUnit">
      <MemberSignature Language="C#" Value="public int MoveEndpointByUnit (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextUnit unit, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 MoveEndpointByUnit(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, valuetype System.Windows.Automation.Text.TextUnit unit, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveEndpointByUnit (endpoint As TextPatternRangeEndpoint, unit As TextUnit, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int MoveEndpointByUnit(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Text::TextUnit unit, int count);" />
      <MemberSignature Language="F#" Value="member this.MoveEndpointByUnit : System.Windows.Automation.Text.TextPatternRangeEndpoint * System.Windows.Automation.Text.TextUnit * int -&gt; int" Usage="textPatternRange.MoveEndpointByUnit (endpoint, unit, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="endpoint">
          <span data-ttu-id="f96c2-219">O ponto de extremidade a ser movido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-219">The endpoint to move.</span>
          </span>
        </param>
        <param name="unit">
          <span data-ttu-id="f96c2-220">A unidade textual para mover.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-220">The textual unit for moving.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="f96c2-221">O número de unidades a serem movidas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-221">The number of units to move.</span>
          </span>
          <span data-ttu-id="f96c2-222">Uma contagem positiva move o ponto de extremidade para frente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-222">A positive count moves the endpoint forward.</span>
          </span>
          <span data-ttu-id="f96c2-223">Uma contagem negativa move para trás.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-223">A negative count moves backward.</span>
          </span>
          <span data-ttu-id="f96c2-224">Uma contagem de 0 não tem nenhum efeito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-224">A count of 0 has no effect.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f96c2-225">Move um ponto de extremidade do intervalo de texto conforme o número especificado de <see cref="T:System.Windows.Automation.Text.TextUnit" />s dentro do intervalo do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-225">Moves one endpoint of the text range the specified number of <see cref="T:System.Windows.Automation.Text.TextUnit" />s within the document range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f96c2-226">O número de unidades realmente movidos, que pode ser menor que o número solicitado se mover que o ponto de extremidade é executado no início ou no final do documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-226">The number of units actually moved, which can be less than the number requested if moving the endpoint runs into the beginning or end of the document.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f96c2-227">Quando for necessário atravessar o conteúdo de um intervalo de texto, uma série de etapas envolvidas nos bastidores para que o <xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> método a ser executado com êxito.</span><span class="sxs-lookup"><span data-stu-id="f96c2-227">When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> method to execute successfully.</span></span>  
  
1.  <span data-ttu-id="f96c2-228">O intervalo de texto é normalizado; ou seja, o intervalo de texto é recolhido em um intervalo de degeneração a <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> ponto de extremidade, o que torna o <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> supérfluo de ponto de extremidade.</span><span class="sxs-lookup"><span data-stu-id="f96c2-228">The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint superfluous.</span></span> <span data-ttu-id="f96c2-229">Essa etapa é necessária para remover a ambiguidade em situações onde um intervalo de texto abrange `unit` limites; por exemplo, "{a U} RL [ https://www.microsoft.com/ ](https://www.microsoft.com/) é inserido no texto" onde "{" e "}" é o texto de pontos de extremidade do intervalo.</span><span class="sxs-lookup"><span data-stu-id="f96c2-229">This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, "{The U}RL [https://www.microsoft.com/](https://www.microsoft.com/) is embedded in text" where "{" and "}" are the text range endpoints.</span></span>  
  
2.  <span data-ttu-id="f96c2-230">O intervalo resultante é movido para trás na <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> para o início da solicitada `unit` limites.</span><span class="sxs-lookup"><span data-stu-id="f96c2-230">The resulting range is moved backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to the beginning of the requested `unit` boundary.</span></span>  
  
3.  <span data-ttu-id="f96c2-231">O intervalo é expandido de um estado de intervalo de degeneração, em seguida, movendo o <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> ponto de extremidade por um solicitado `unit` limites.</span><span class="sxs-lookup"><span data-stu-id="f96c2-231">The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint by one requested `unit` boundary.</span></span>  
  
 <span data-ttu-id="f96c2-232">![Ajustes de intervalo por Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "ajustes de intervalo por Move & ExpandToEnclosingUnit")</span><span class="sxs-lookup"><span data-stu-id="f96c2-232">![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "Range adjustments by Move & ExpandToEnclosingUnit")</span></span>  
<span data-ttu-id="f96c2-233">Exemplos de como um intervalo de texto é ajustado para Move () e ExpandToEnclosingUnit)</span><span class="sxs-lookup"><span data-stu-id="f96c2-233">Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</span></span>  
  
 <span data-ttu-id="f96c2-234">O conteúdo textual (ou texto interno) de um contêiner de texto e um objeto inserido, como um hiperlink ou célula de tabela, é exposto como um fluxo de texto única e contínua na visualização de controle e exibição de conteúdo a [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] de árvore; objeto limites são ignorados.</span><span class="sxs-lookup"><span data-stu-id="f96c2-234">The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] tree; object boundaries are ignored.</span></span> <span data-ttu-id="f96c2-235">Se um cliente de automação de interface do usuário está recuperando o texto com a finalidade de citar, interpretar ou analisar de alguma maneira, o intervalo de texto deve ser verificado para casos especiais, como uma tabela com textuais conteúdos ou outros objetos inseridos.</span><span class="sxs-lookup"><span data-stu-id="f96c2-235">If a UI Automation client is retrieving the text for the purpose of reciting, interpreting, or analyzing in some manner, the text range should be checked for special cases, such as a table with textual content or other embedded objects.</span></span> <span data-ttu-id="f96c2-236">Isso pode ser feito por meio da chamada <xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> para obter uma <xref:System.Windows.Automation.AutomationElement> para cada embedded objeto e, em seguida, chamar <xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> para obter um intervalo de texto para cada elemento; isso é feito de forma recursiva até que todo o conteúdo textual foi recuperado.</span><span class="sxs-lookup"><span data-stu-id="f96c2-236">This can be accomplished by calling <xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> to obtain an <xref:System.Windows.Automation.AutomationElement> for each embedded object and then calling <xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> to obtain a text range for each element; this is done recursively until all textual content has been retrieved.</span></span>  
  
 <span data-ttu-id="f96c2-237">![Intervalos de texto abrangidos por objetos inseridos. ] (~/add/media/uia-textpattern-embeddedobjecttextranges.png "Intervalos de texto abrangidos por objetos inseridos.")</span><span class="sxs-lookup"><span data-stu-id="f96c2-237">![Text ranges spanned by embedded objects.](~/add/media/uia-textpattern-embeddedobjecttextranges.png "Text ranges spanned by embedded objects.")</span></span>  
<span data-ttu-id="f96c2-238">Exemplo de um fluxo de texto com objetos inseridos e seus intervalos abrangentes</span><span class="sxs-lookup"><span data-stu-id="f96c2-238">Example of a text stream with embedded objects and their range spans</span></span>  
  
 <span data-ttu-id="f96c2-239"><xref:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit%2A> adia para a próxima maior <xref:System.Windows.Automation.Text.TextUnit> com suporte se o determinado <xref:System.Windows.Automation.Text.TextUnit> não é compatível com o controle.</span><span class="sxs-lookup"><span data-stu-id="f96c2-239"><xref:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit%2A> defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.</span></span>  
  
 <span data-ttu-id="f96c2-240">A ordem, da unidade menor ao maior, é listada abaixo.</span><span class="sxs-lookup"><span data-stu-id="f96c2-240">The order, from smallest unit to largest, is listed below.</span></span>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1073](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1073)]  
  
 [!code-vb[UIATextPattern_snip#2073](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2073)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromSelection">
      <MemberSignature Language="C#" Value="public void RemoveFromSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFromSelection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveFromSelection ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveFromSelection();" />
      <MemberSignature Language="F#" Value="member this.RemoveFromSelection : unit -&gt; unit" Usage="textPatternRange.RemoveFromSelection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f96c2-241">Remove uma seção realçada de texto, correspondente aos pontos de extremidade <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> e <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> do intervalo de texto de chamada de uma coleção existente do texto realçado em um contêiner de texto que dá suporte a várias seleções não contíguas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-241">Removes a highlighted section of text, corresponding to the calling text range <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoints, from an existing collection of highlighted text in a text container that supports multiple, disjoint selections.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f96c2-242">O ponto de inserção de texto será movido para a área do realce removido.</span><span class="sxs-lookup"><span data-stu-id="f96c2-242">The text insertion point will move to the area of the removed highlight.</span></span>  
  
 <span data-ttu-id="f96c2-243">Fornece um intervalo de texto de degeneração moverá o ponto de inserção.</span><span class="sxs-lookup"><span data-stu-id="f96c2-243">Providing a degenerate text range will move the insertion point.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="f96c2-244">Se o provedor de texto não der suporte a várias seleções não contíguas (por exemplo, <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> deve ter um valor de <see langword="Multiple" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-244">If text provider does not support multiple, disjoint selections (for example, <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> must have a value of <see langword="Multiple" />).</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.Select" />
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.AddToSelection" />
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="ScrollIntoView">
      <MemberSignature Language="C#" Value="public void ScrollIntoView (bool alignToTop);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollIntoView(bool alignToTop) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollIntoView (alignToTop As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollIntoView(bool alignToTop);" />
      <MemberSignature Language="F#" Value="member this.ScrollIntoView : bool -&gt; unit" Usage="textPatternRange.ScrollIntoView alignToTop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alignToTop" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="alignToTop">
          <span data-ttu-id="f96c2-245">
            <see langword="true" /> se o controle de texto deve ser rolado para que o intervalo de texto seja alinhado à parte superior do visor, <see langword="false" /> se ele deve ser alinhado à parte inferior do visor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-245">
              <see langword="true" /> if the text control should be scrolled so the text range is flush with the top of the viewport; <see langword="false" /> if it should be flush with the bottom of the viewport.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f96c2-246">Faz com que o controle de texto role verticalmente até o intervalo do texto ser visível no visor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-246">Causes the text control to scroll vertically until the text range is visible in the viewport.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f96c2-247"><xref:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView%2A> respeita o texto oculto e visível.</span><span class="sxs-lookup"><span data-stu-id="f96c2-247"><xref:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView%2A> respects both hidden and visible text.</span></span> <span data-ttu-id="f96c2-248">O cliente de automação de interface do usuário pode verificar o <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> quanto à visibilidade do texto.</span><span class="sxs-lookup"><span data-stu-id="f96c2-248">The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.</span></span> <span data-ttu-id="f96c2-249">Se o intervalo de texto estiver oculta, o controle de texto rolará somente se o texto oculto tem uma âncora no visor.</span><span class="sxs-lookup"><span data-stu-id="f96c2-249">If the text range is hidden, the text control will scroll only if the hidden text has an anchor in the viewport.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1074](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1074)]  
  
 [!code-vb[UIATextPattern_snip#2074](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2074)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="f96c2-250">Se a rolagem não for compatível com o controle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-250">If scrolling is not supported by the control.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.Select" />
      <MemberSignature Language="VB.NET" Value="Public Sub Select ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Select();" />
      <MemberSignature Language="F#" Value="member this.Select : unit -&gt; unit" Usage="textPatternRange.Select " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f96c2-251">Realça o texto no controle de texto correspondente aos pontos de extremidade <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> e <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> do intervalo de texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-251">Highlights text in the text control corresponding to the text range <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoints.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f96c2-252">Se um intervalo de texto de degeneração for fornecido, o ponto de inserção de texto será movido para o <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> ponto de extremidade do intervalo de texto.</span><span class="sxs-lookup"><span data-stu-id="f96c2-252">If a degenerate text range is provided, the text insertion point will move to the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint of the text range.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1075](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1075)]  
  
 [!code-vb[UIATextPattern_snip#2075](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2075)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="f96c2-253">Ocorre quando a seleção de texto não é compatível com o controle de texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-253">Occurs when text selection is not supported by the text control.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.AddToSelection" />
        <altmember cref="M:System.Windows.Automation.SelectionItemPattern.RemoveFromSelection" />
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="TextPattern">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.TextPattern TextPattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Automation.TextPattern TextPattern" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Text.TextPatternRange.TextPattern" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TextPattern As TextPattern" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::TextPattern ^ TextPattern { System::Windows::Automation::TextPattern ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TextPattern : System.Windows.Automation.TextPattern" Usage="System.Windows.Automation.Text.TextPatternRange.TextPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.TextPattern</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f96c2-254">Obtém o <see cref="T:System.Windows.Automation.TextPattern" /> associado ao intervalo de texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-254">Gets the <see cref="T:System.Windows.Automation.TextPattern" /> associated with the text range.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f96c2-255">O provedor de texto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f96c2-255">The text provider.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1076](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1076)]  
  
 [!code-vb[UIATextPattern_snip#2076](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2076)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>