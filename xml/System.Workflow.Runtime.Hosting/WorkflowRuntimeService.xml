<Type Name="WorkflowRuntimeService" FullName="System.Workflow.Runtime.Hosting.WorkflowRuntimeService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7ab23a51523641b0fb1578542115b55cb31ce463" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48730145" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class WorkflowRuntimeService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WorkflowRuntimeService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WorkflowRuntimeService" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowRuntimeService abstract" />
  <TypeSignature Language="F#" Value="type WorkflowRuntimeService = class" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa a classe base abstrata da qual os serviços principais do mecanismo de tempo de execução de fluxo de trabalho são derivados.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 Serviços que derivam de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> classe pode ser iniciado e interrompido pelo mecanismo de tempo de execução de fluxo de trabalho. A ordem na qual os serviços são iniciados ou interrompidos, no entanto, é indeterminada, e os serviços podem exigir o suporte de outros serviços fim de inicializar corretamente em si quando eles são iniciados e, por outro lado, podem exigir o para dar suporte a outros serviços para corretamente desligado quando eles são interrompidos. Para resolver esse problema, o mecanismo de tempo de execução do fluxo de trabalho fornece mecanismos de duas fases para iniciar e interromper serviços. Quando <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> é chamado, o fluxo de trabalho o mecanismo de tempo de execução invoca o <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> método para cada um dos seus serviços que derivam de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> classe.  Depois que todos esses serviços forem iniciados, o mecanismo de tempo de execução do fluxo de trabalho gera o <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType> evento, que faz com que o <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> método a ser invocado para cada serviço de mecanismo de tempo de execução de fluxo de trabalho. O serviço pode substituir o <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> método para participar desse processo de duas fases. Da mesma forma, quando <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> é chamado, o <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> método, o <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> eventos e o <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> método fornecem esse mecanismo de duas fases.  A propriedade de estado contém um <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState> valor que indica se o serviço está iniciando ou parando ou está totalmente iniciado ou parado.  
  
 Serviços que derivam do <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> classe pode acionar a <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=nameWithType> eventos quando encontra uma condição que faz com que uma exceção sem tratamento ao chamar <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A>.  
  
 Derivam de serviços do <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> classe, o <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> classe, o <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> classe e o <xref:System.Workflow.Runtime.Tracking.TrackingService> classe, por fim, deriva o <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> classe.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WorkflowRuntimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WorkflowRuntimeService();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Quando implementado em uma classe derivada, inicializa uma nova instância da classe <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> é inicializado como <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStarted">
      <MemberSignature Language="C#" Value="protected virtual void OnStarted ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStarted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStarted ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStarted();" />
      <MemberSignature Language="F#" Value="abstract member OnStarted : unit -&gt; unit&#xA;override this.OnStarted : unit -&gt; unit" Usage="workflowRuntimeService.OnStarted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando substituído em uma classe derivada, representa o método que será chamado quando o mecanismo de tempo de execução de fluxo de trabalho gerar o evento <see cref="E:System.Workflow.Runtime.WorkflowRuntime.Started" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> classe implementa um mecanismo inicial em duas fases para que os serviços de mecanismo de tempo de execução do fluxo de trabalho podem realizar nenhuma inicialização que depende de outros serviços depois que o mecanismo de tempo de execução do fluxo de trabalho foi invocado o <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> método para todos os seus Serviços de mecanismo de tempo de execução de fluxo de trabalho. Após o fluxo de trabalho, o mecanismo de tempo de execução é chamado de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> método de todos os seus serviços de mecanismo de tempo de execução de fluxo de trabalho, ele gera o <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType> eventos. Você pode substituir a <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> método para fornecer qualquer funcionalidade de inicialização final necessária para o serviço quando o <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType> é gerado. A mecânica de assinar e cancelar a assinatura a <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType> evento é tratado internamente.  
  
> [!NOTE]
>  Se seu serviço será adicionado ao mecanismo de tempo de execução de fluxo de trabalho por uma chamada para <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> depois que o mecanismo de tempo de execução do fluxo de trabalho já tiver sido iniciado, o mecanismo de tempo de execução do fluxo de trabalho chamará <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> em seu serviço. No entanto, nessa situação, o <xref:System.Workflow.Runtime.WorkflowRuntime.Started> evento já ocorreu, portanto, seu serviço pode ter que executar qualquer inicialização que normalmente executaria no <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> de dentro de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> método. Você pode testar <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> para determinar se o mecanismo de tempo de execução do fluxo de trabalho foi iniciado.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> é definido como <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Started> antes de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> é invocado.  A implementação padrão de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> não realiza nenhuma ação.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStopped">
      <MemberSignature Language="C#" Value="protected virtual void OnStopped ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStopped() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStopped ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStopped();" />
      <MemberSignature Language="F#" Value="abstract member OnStopped : unit -&gt; unit&#xA;override this.OnStopped : unit -&gt; unit" Usage="workflowRuntimeService.OnStopped " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando substituído em uma classe derivada, representa o método que será chamado quando o mecanismo de tempo de execução de fluxo de trabalho gerar o evento <see cref="E:System.Workflow.Runtime.WorkflowRuntime.Stopped" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> classe implementa um mecanismo de parada em duas fases para que os serviços de mecanismo de tempo de execução do fluxo de trabalho poderão reter algumas funcionalidades após sua <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> método é chamado pelo mecanismo de tempo de execução de fluxo de trabalho para que eles podem, se necessário, dar suporte o desligamento de outros serviços. Após o fluxo de trabalho, o mecanismo de tempo de execução é chamado de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> método de todos os seus serviços de mecanismo de tempo de execução de fluxo de trabalho, ele gera o <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> eventos. Você pode substituir a <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> método para fornecer qualquer funcionalidade de final de desligamento exigida pelo seu serviço quando o <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> é gerado. A mecânica de assinar e cancelar a assinatura a <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> evento é tratado internamente.  
  
> [!NOTE]
>  Se sua <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> é removido do mecanismo de tempo de execução de fluxo de trabalho por uma chamada para <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A> enquanto o mecanismo de tempo de execução do fluxo de trabalho é executado, o mecanismo de tempo de execução do fluxo de trabalho chamará <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> em seu serviço. No entanto, nessa situação, o <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> método não será chamado para seu serviço. Portanto, o serviço pode ter que executar qualquer desligamento final que normalmente executaria no <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> de dentro de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> método. Você pode testar <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> para determinar se o mecanismo de tempo de execução do fluxo de trabalho está em execução.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> é definido como <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped> antes de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> é invocado.  A implementação padrão de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> não realiza nenhuma ação.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseServicesExceptionNotHandledEvent">
      <MemberSignature Language="C#" Value="protected void RaiseServicesExceptionNotHandledEvent (Exception exception, Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseServicesExceptionNotHandledEvent(class System.Exception exception, valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseServicesExceptionNotHandledEvent(Exception ^ exception, Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.RaiseServicesExceptionNotHandledEvent : Exception * Guid -&gt; unit" Usage="workflowRuntimeService.RaiseServicesExceptionNotHandledEvent (exception, instanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="exception">A exceção que não pôde ser tratada.</param>
        <param name="instanceId">O <see cref="T:System.Guid" /> da instância de fluxo de trabalho associada à exceção sem tratamento.</param>
        <summary>Aciona o evento <see cref="E:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ele pode chamar <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A> para gerar o <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=nameWithType> eventos quando ele encontra uma exceção que não é possível manipular durante sua execução. Você deve passar o <xref:System.Guid> da instância de fluxo de trabalho associada com a exceção sem tratamento. Por exemplo, um serviço de timer pode passar o <xref:System.Guid> associado ao temporizador para o qual a exceção ocorreu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Runtime">
      <MemberSignature Language="C#" Value="protected System.Workflow.Runtime.WorkflowRuntime Runtime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.Runtime.WorkflowRuntime Runtime" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Runtime As WorkflowRuntime" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Workflow::Runtime::WorkflowRuntime ^ Runtime { System::Workflow::Runtime::WorkflowRuntime ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Runtime : System.Workflow.Runtime.WorkflowRuntime" Usage="System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowRuntime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> para este serviço.</summary>
        <value>O objeto <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O mecanismo de tempo de execução do fluxo de trabalho define essa propriedade antes de chamar <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> no serviço.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="protected internal virtual void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void Start();" />
      <MemberSignature Language="F#" Value="abstract member Start : unit -&gt; unit&#xA;override this.Start : unit -&gt; unit" Usage="workflowRuntimeService.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando substituído em uma classe derivada, inicia o serviço e altera o <see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State" /> para <see cref="F:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> é invocado pelo mecanismo de tempo de execução de fluxo de trabalho em todos os seus serviços que derivam de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> quando <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> é chamado.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> também é chamado pelo mecanismo de tempo de execução de fluxo de trabalho quando um serviço de mecanismo de tempo de execução de fluxo de trabalho é adicionado ao mecanismo de tempo de execução de fluxo de trabalho por uma chamada para <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> depois que o mecanismo de tempo de execução do fluxo de trabalho já foi iniciado. A implementação padrão de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> controla se o serviço foi iniciado e usa essas informações para gerar a exceção apropriada, se o serviço for iniciado enquanto ainda estiver sendo executado.  
  
 Você pode fornecer funcionalidade adicional necessária configurar seu serviço iniciado pelo mecanismo de tempo de execução de fluxo de trabalho substituindo esse método. Não há nenhuma garantia sobre o que, se houver, os serviços serão executados quando o mecanismo de tempo de execução do fluxo de trabalho chama <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> em seu serviço. Portanto, o <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> método, você só deve executar qualquer inicialização que não depende da funcionalidade fornecida por outros serviços. Isso inclui a funcionalidade fornecida por serviços principais como o serviço do Agendador. O mecanismo de tempo de execução do fluxo de trabalho gera o <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType> evento depois que ele é chamado o <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> método de todos os seus serviços de mecanismo de tempo de execução de fluxo de trabalho. Se seu serviço requer a inicialização adicional depois que todos os serviços de mecanismo de tempo de execução de fluxo de trabalho tiveram sido iniciados, você pode substituir a <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> método para realizar essa inicialização quando o <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> é gerado.  
  
> [!NOTE]
>  Se seu serviço será adicionado ao mecanismo de tempo de execução de fluxo de trabalho por uma chamada para <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> depois que o mecanismo de tempo de execução do fluxo de trabalho já tiver sido iniciado, o mecanismo de tempo de execução do fluxo de trabalho chamará <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> em seu serviço. No entanto, nessa situação, o <xref:System.Workflow.Runtime.WorkflowRuntime.Started> evento já ocorreu, portanto, seu serviço pode ter que executar qualquer inicialização que normalmente executaria no <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> de dentro de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> método. Você pode testar <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> para determinar se o mecanismo de tempo de execução do fluxo de trabalho foi iniciado.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> só deve ser chamado pelo mecanismo de tempo de execução de fluxo de trabalho.  
  
   
  
## Examples  
 O exemplo a seguir demonstra isso chamando o método Start em um objeto derivado de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>, TerminationTrackingService.  Este exemplo é do exemplo do SDK de serviço de controle de encerramento.  Para obter mais informações, consulte [exemplo de serviço de controle de encerramento](http://msdn.microsoft.com/library/29b7c0d7-cece-4bb9-96d0-c5b6c6e14439).  
  
 [!code-csharp[WF_Samples#112](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#112)]
 [!code-vb[WF_Samples#112](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#112)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime" /> é uma referência nula (<see langword="Nothing" /> no Visual Basic) 
- ou - 
O serviço já foi iniciado.</exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="protected System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState State" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property State As WorkflowRuntimeServiceState" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Workflow::Runtime::Hosting::WorkflowRuntimeServiceState State { System::Workflow::Runtime::Hosting::WorkflowRuntimeServiceState get(); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState" Usage="System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o estado do <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />.</summary>
        <value>Um dos valores de <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> classe implementa mecanismos de duas fases para iniciar e parar um serviço de mecanismo de tempo de execução de fluxo de trabalho. A primeira fase do mecanismo de início é iniciada quando o mecanismo de tempo de execução do fluxo de trabalho chama a implementação da <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> método para o serviço. Esse método deve chamar a implementação base de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>, que define <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> para <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting>. A segunda fase ocorre depois que o mecanismo de tempo de execução do fluxo de trabalho inicia todos os seus serviços de mecanismo de tempo de execução de fluxo de trabalho quando ele aciona o <xref:System.Workflow.Runtime.WorkflowRuntime.Started> eventos. O <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> gerencia internamente uma assinatura para esse evento e definirá seu manipulador <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> para <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Started>.  
  
 O mecanismo de duas fases para interromper um serviço de mecanismo de tempo de execução de fluxo de trabalho é iniciada quando o mecanismo de tempo de execução do fluxo de trabalho chama a implementação da <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> método para o serviço. Esse método deve chamar a implementação base de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>, que define <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> para <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping>. Após ele ter sido parada todos os seus serviços de mecanismo de tempo de execução de fluxo de trabalho, o mecanismo de tempo de execução do fluxo de trabalho aciona o <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> eventos. O <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> gerencia internamente uma assinatura para esse evento e definirá seu manipulador <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> para <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="protected internal virtual void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void Stop();" />
      <MemberSignature Language="F#" Value="abstract member Stop : unit -&gt; unit&#xA;override this.Stop : unit -&gt; unit" Usage="workflowRuntimeService.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando substituído em uma classe derivada, interrompe o serviço e altera o <see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State" /> para <see cref="F:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> é invocado pelo mecanismo de tempo de execução de fluxo de trabalho em todos os seus serviços que derivam de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> quando <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> é chamado.  <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> também é chamado pelo mecanismo de tempo de execução de fluxo de trabalho quando um serviço de mecanismo de tempo de execução de fluxo de trabalho é removido do mecanismo de tempo de execução de fluxo de trabalho por uma chamada para <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A>. A implementação padrão de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> controla se o serviço foi iniciado e usa essas informações para lançar a exceção apropriada se o serviço for interrompido antes que ele é iniciado.  
  
 Você pode fornecer funcionalidade adicional necessária configurar seu serviço interrompido pelo mecanismo de tempo de execução de fluxo de trabalho substituindo esse método. Não há nenhuma garantia sobre o que, se houver, os serviços estar interrompidos ou em execução quando <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> é chamado em seu serviço. O mecanismo de tempo de execução do fluxo de trabalho gera o <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> evento depois que ele é chamado o <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> método de todos os seus serviços de mecanismo de tempo de execução de fluxo de trabalho. Seu serviço precisará reter algumas funcionalidades residual para dar suporte a outros serviços até que todos os serviços de mecanismo de tempo de execução fluxo de trabalho tiveram seus métodos de parada invocados pelo mecanismo de tempo de execução de fluxo de trabalho. Se seu serviço deve manter essa funcionalidade, você pode substituir a <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> método para executar nenhuma ação adicional necessária para concluir a interromper o serviço quando o <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> é gerado.  
  
> [!NOTE]
>  Se sua <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> é removido do mecanismo de tempo de execução de fluxo de trabalho por uma chamada para <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A> enquanto o mecanismo de tempo de execução do fluxo de trabalho é executado, o mecanismo de tempo de execução do fluxo de trabalho chamará <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> em seu serviço. No entanto, nessa situação, o <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> método não será chamado para seu serviço. Portanto, o serviço pode ter que executar qualquer funcionalidade adicional de desligamento que normalmente executaria no <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> de dentro de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> método. Você pode testar <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> para determinar se o mecanismo de tempo de execução do fluxo de trabalho está em execução.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> só deve ser chamado pelo mecanismo de tempo de execução de fluxo de trabalho.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime" /> é uma referência nula (<see langword="Nothing" /> no Visual Basic).  
  
- ou - 
O serviço ainda não foi iniciado.</exception>
      </Docs>
    </Member>
  </Members>
</Type>