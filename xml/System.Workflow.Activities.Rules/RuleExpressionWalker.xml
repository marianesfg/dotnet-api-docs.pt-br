<Type Name="RuleExpressionWalker" FullName="System.Workflow.Activities.Rules.RuleExpressionWalker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cb6c611a0ffdc0a2397645df09fed25c88af50ab" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39915360" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class RuleExpressionWalker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit RuleExpressionWalker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Activities.Rules.RuleExpressionWalker" />
  <TypeSignature Language="VB.NET" Value="Public Class RuleExpressionWalker" />
  <TypeSignature Language="C++ CLI" Value="public ref class RuleExpressionWalker abstract sealed" />
  <TypeSignature Language="F#" Value="type RuleExpressionWalker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Activities</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Propaga o comportamento atual na expressão para nós filho. Essa classe não pode ser herdada.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa classe é usada por todos os <xref:System.Workflow.Activities.Rules.IRuleExpression> métodos para propagar o comportamento de nós filho.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AnalyzeUsage">
      <MemberSignature Language="C#" Value="public static void AnalyzeUsage (System.Workflow.Activities.Rules.RuleAnalysis analysis, System.CodeDom.CodeExpression expression, bool isRead, bool isWritten, System.Workflow.Activities.Rules.RulePathQualifier qualifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AnalyzeUsage(class System.Workflow.Activities.Rules.RuleAnalysis analysis, class System.CodeDom.CodeExpression expression, bool isRead, bool isWritten, class System.Workflow.Activities.Rules.RulePathQualifier qualifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.Rules.RuleExpressionWalker.AnalyzeUsage(System.Workflow.Activities.Rules.RuleAnalysis,System.CodeDom.CodeExpression,System.Boolean,System.Boolean,System.Workflow.Activities.Rules.RulePathQualifier)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AnalyzeUsage (analysis As RuleAnalysis, expression As CodeExpression, isRead As Boolean, isWritten As Boolean, qualifier As RulePathQualifier)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AnalyzeUsage(System::Workflow::Activities::Rules::RuleAnalysis ^ analysis, System::CodeDom::CodeExpression ^ expression, bool isRead, bool isWritten, System::Workflow::Activities::Rules::RulePathQualifier ^ qualifier);" />
      <MemberSignature Language="F#" Value="static member AnalyzeUsage : System.Workflow.Activities.Rules.RuleAnalysis * System.CodeDom.CodeExpression * bool * bool * System.Workflow.Activities.Rules.RulePathQualifier -&gt; unit" Usage="System.Workflow.Activities.Rules.RuleExpressionWalker.AnalyzeUsage (analysis, expression, isRead, isWritten, qualifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="analysis" Type="System.Workflow.Activities.Rules.RuleAnalysis" />
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="isRead" Type="System.Boolean" />
        <Parameter Name="isWritten" Type="System.Boolean" />
        <Parameter Name="qualifier" Type="System.Workflow.Activities.Rules.RulePathQualifier" />
      </Parameters>
      <Docs>
        <param name="analysis">A instância <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" /> que armazena os símbolos que representam as propriedades e os campos usados por ações e condições de regra.</param>
        <param name="expression">A expressão que está sendo executada.</param>
        <param name="isRead">
          <see langword="true" /> se os campos e as propriedades lidos por um <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> precisarem ser adicionados ao <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" />; caso contrário, <see langword="false" />.</param>
        <param name="isWritten">
          <see langword="true" /> se os campos e as propriedades gravados por um <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> precisarem ser adicionados ao <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" />; caso contrário, <see langword="false" />.</param>
        <param name="qualifier">O caminho de um campo ou propriedade determinado até este ponto.</param>
        <summary>Identifica os campos e as propriedades usados por uma expressão e adiciona-os como símbolos à instância <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="analysis" /> é uma referência nula (<see langword="Nothing" /> no Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeExpression Clone (System.CodeDom.CodeExpression originalExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeExpression Clone(class System.CodeDom.CodeExpression originalExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.Rules.RuleExpressionWalker.Clone(System.CodeDom.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clone (originalExpression As CodeExpression) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeExpression ^ Clone(System::CodeDom::CodeExpression ^ originalExpression);" />
      <MemberSignature Language="F#" Value="static member Clone : System.CodeDom.CodeExpression -&gt; System.CodeDom.CodeExpression" Usage="System.Workflow.Activities.Rules.RuleExpressionWalker.Clone originalExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalExpression" Type="System.CodeDom.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="originalExpression">A expressão em que o clone se baseia.</param>
        <summary>Cria uma cópia profunda dos nós filho do <see cref="T:System.CodeDom.CodeExpression" /> atual.</summary>
        <returns>Um <see cref="T:System.CodeDom.CodeExpression" /> que é idêntico a esta instância.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decompile">
      <MemberSignature Language="C#" Value="public static void Decompile (System.Text.StringBuilder stringBuilder, System.CodeDom.CodeExpression expression, System.CodeDom.CodeExpression parentExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Decompile(class System.Text.StringBuilder stringBuilder, class System.CodeDom.CodeExpression expression, class System.CodeDom.CodeExpression parentExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.Rules.RuleExpressionWalker.Decompile(System.Text.StringBuilder,System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Decompile(System::Text::StringBuilder ^ stringBuilder, System::CodeDom::CodeExpression ^ expression, System::CodeDom::CodeExpression ^ parentExpression);" />
      <MemberSignature Language="F#" Value="static member Decompile : System.Text.StringBuilder * System.CodeDom.CodeExpression * System.CodeDom.CodeExpression -&gt; unit" Usage="System.Workflow.Activities.Rules.RuleExpressionWalker.Decompile (stringBuilder, expression, parentExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720:AvoidTypeNamesInParameters", MessageId="0#")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringBuilder" Type="System.Text.StringBuilder" />
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="parentExpression" Type="System.CodeDom.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="stringBuilder">O <see cref="T:System.Text.StringBuilder" /> que contém a cadeia de caracteres mutável.</param>
        <param name="expression">O <see cref="T:System.CodeDom.CodeExpression" /> atual.</param>
        <param name="parentExpression">O <see cref="T:System.CodeDom.CodeExpression" /> pai.</param>
        <summary>Descompila os nós filho de uma expressão na forma de cadeia de caracteres.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Evaluate">
      <MemberSignature Language="C#" Value="public static System.Workflow.Activities.Rules.RuleExpressionResult Evaluate (System.Workflow.Activities.Rules.RuleExecution execution, System.CodeDom.CodeExpression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Workflow.Activities.Rules.RuleExpressionResult Evaluate(class System.Workflow.Activities.Rules.RuleExecution execution, class System.CodeDom.CodeExpression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.Rules.RuleExpressionWalker.Evaluate(System.Workflow.Activities.Rules.RuleExecution,System.CodeDom.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Evaluate (execution As RuleExecution, expression As CodeExpression) As RuleExpressionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Workflow::Activities::Rules::RuleExpressionResult ^ Evaluate(System::Workflow::Activities::Rules::RuleExecution ^ execution, System::CodeDom::CodeExpression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Evaluate : System.Workflow.Activities.Rules.RuleExecution * System.CodeDom.CodeExpression -&gt; System.Workflow.Activities.Rules.RuleExpressionResult" Usage="System.Workflow.Activities.Rules.RuleExpressionWalker.Evaluate (execution, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Activities.Rules.RuleExpressionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="execution" Type="System.Workflow.Activities.Rules.RuleExecution" />
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="execution">O <see cref="T:System.Workflow.Activities.Rules.RuleExecution" /> para executar a expressão.</param>
        <param name="expression">O <see cref="T:System.CodeDom.CodeExpression" /> a ser avaliado.</param>
        <summary>Avalia a expressão e todas as expressões filho.</summary>
        <returns>O <see cref="T:System.Workflow.Activities.Rules.RuleExpressionResult" /> que indica o resultado da avaliação de expressão.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="execution" /> é uma referência nula (<see langword="Nothing" /> no Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public static bool Match (System.CodeDom.CodeExpression firstExpression, System.CodeDom.CodeExpression secondExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Match(class System.CodeDom.CodeExpression firstExpression, class System.CodeDom.CodeExpression secondExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.Rules.RuleExpressionWalker.Match(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Match (firstExpression As CodeExpression, secondExpression As CodeExpression) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Match(System::CodeDom::CodeExpression ^ firstExpression, System::CodeDom::CodeExpression ^ secondExpression);" />
      <MemberSignature Language="F#" Value="static member Match : System.CodeDom.CodeExpression * System.CodeDom.CodeExpression -&gt; bool" Usage="System.Workflow.Activities.Rules.RuleExpressionWalker.Match (firstExpression, secondExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1062:ValidateArgumentsOfPublicMethods")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="firstExpression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="secondExpression" Type="System.CodeDom.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="firstExpression">O primeiro <see cref="T:System.CodeDom.CodeExpression" /> na comparação.</param>
        <param name="secondExpression">O segundo <see cref="T:System.CodeDom.CodeExpression" /> na comparação.</param>
        <summary>Compara os nós de expressão e filho atuais com outra expressão para determinar se são iguais.</summary>
        <returns>
          <see langword="true" /> se as expressões forem iguais; caso contrário, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static System.Workflow.Activities.Rules.RuleExpressionInfo Validate (System.Workflow.Activities.Rules.RuleValidation validation, System.CodeDom.CodeExpression expression, bool isWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Workflow.Activities.Rules.RuleExpressionInfo Validate(class System.Workflow.Activities.Rules.RuleValidation validation, class System.CodeDom.CodeExpression expression, bool isWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.Rules.RuleExpressionWalker.Validate(System.Workflow.Activities.Rules.RuleValidation,System.CodeDom.CodeExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Validate (validation As RuleValidation, expression As CodeExpression, isWritten As Boolean) As RuleExpressionInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Workflow::Activities::Rules::RuleExpressionInfo ^ Validate(System::Workflow::Activities::Rules::RuleValidation ^ validation, System::CodeDom::CodeExpression ^ expression, bool isWritten);" />
      <MemberSignature Language="F#" Value="static member Validate : System.Workflow.Activities.Rules.RuleValidation * System.CodeDom.CodeExpression * bool -&gt; System.Workflow.Activities.Rules.RuleExpressionInfo" Usage="System.Workflow.Activities.Rules.RuleExpressionWalker.Validate (validation, expression, isWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Activities.Rules.RuleExpressionInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="validation" Type="System.Workflow.Activities.Rules.RuleValidation" />
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="isWritten" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="validation">O <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> para gerenciar o processo de validação.</param>
        <param name="expression">O <see cref="T:System.CodeDom.CodeExpression" /> a ser avaliado.</param>
        <param name="isWritten">
          <see langword="true" /> se campos e propriedades gravados por um <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> forem armazenados por <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" />; caso contrário, <see langword="false" />.</param>
        <summary>Verifica se os nós filho e de expressão estão configurados corretamente e não têm erros.</summary>
        <returns>O <see cref="T:System.Workflow.Activities.Rules.RuleExpressionInfo" /> para o <see cref="T:System.CodeDom.CodeExpression" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="validation" /> é uma referência nula (<see langword="Nothing" /> no Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">O <paramref name="expression" /> é nulo e a coleção de erros sobre o objeto <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> é uma referência nula (<see langword="Nothing" />).</exception>
      </Docs>
    </Member>
  </Members>
</Type>