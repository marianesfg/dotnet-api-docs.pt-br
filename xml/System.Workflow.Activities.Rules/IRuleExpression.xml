<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IRuleExpression.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac50a4e06b295cb40f2c76b3237d90ae284e5a00650.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0a4e06b295cb40f2c76b3237d90ae284e5a00650</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Workflow.Activities.Rules.IRuleExpression">
          <source>Represents the base class from which custom expression writers must derive to write custom expressions.</source>
          <target state="translated">Representa a classe base da qual os gravadores de expressão personalizados devem derivar para escrever expressões personalizadas.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Workflow.Activities.Rules.IRuleExpression">
          <source>The following code creates an expression that can be used in declarative conditions and rule sets.</source>
          <target state="translated">O código a seguir cria uma expressão que pode ser usada em condições declarativas e conjuntos de regras.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Workflow.Activities.Rules.IRuleExpression">
          <source>The expression is named <ph id="ph1">`TwoOfThree`</ph>, and takes 3 parameters, all of which must evaluate to Booleans.</source>
          <target state="translated">A expressão é denominada <ph id="ph1">`TwoOfThree`</ph>e leva 3 parâmetros, todos os quais devem ser avaliados como valores booleanos.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Workflow.Activities.Rules.IRuleExpression">
          <source>This expression returns <ph id="ph1">`true`</ph> if 2 of the 3 expressions return <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Essa expressão retorna <ph id="ph1">`true`</ph> se 2 de 3 expressões de retorno <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Workflow.Activities.Rules.IRuleExpression">
          <source>To use this code, add it to a Class Library project and reference the library from your workflow project.</source>
          <target state="translated">Para usar esse código, adicione-a um projeto de biblioteca de classes e a biblioteca de referência do seu projeto de fluxo de trabalho.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Workflow.Activities.Rules.IRuleExpression.AnalyzeUsage(System.Workflow.Activities.Rules.RuleAnalysis,System.Boolean,System.Boolean,System.Workflow.Activities.Rules.RulePathQualifier)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" /&gt;</ph> method to store fields and properties read by a condition or read by an action.</source>
          <target state="translated">O método <ph id="ph1">&lt;see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" /&gt;</ph> para armazenar os campos e propriedades lidos por uma condição ou lidos por uma ação.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Workflow.Activities.Rules.IRuleExpression.AnalyzeUsage(System.Workflow.Activities.Rules.RuleAnalysis,System.Boolean,System.Boolean,System.Workflow.Activities.Rules.RulePathQualifier)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the expression is being read from; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the expression is not being read from.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se a expressão estiver sendo lida; <ph id="ph2">&lt;see langword="false" /&gt;</ph> se a expressão não estiver sendo lida.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Workflow.Activities.Rules.IRuleExpression.AnalyzeUsage(System.Workflow.Activities.Rules.RuleAnalysis,System.Boolean,System.Boolean,System.Workflow.Activities.Rules.RulePathQualifier)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the expression is being written to; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the expression is not being written to.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se a expressão estiver sendo gravada; <ph id="ph2">&lt;see langword="false" /&gt;</ph> se a expressão não estiver sendo gravada.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Workflow.Activities.Rules.IRuleExpression.AnalyzeUsage(System.Workflow.Activities.Rules.RuleAnalysis,System.Boolean,System.Boolean,System.Workflow.Activities.Rules.RulePathQualifier)">
          <source>The path of a field or property.</source>
          <target state="translated">O caminho de um campo ou propriedade.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Workflow.Activities.Rules.IRuleExpression.AnalyzeUsage(System.Workflow.Activities.Rules.RuleAnalysis,System.Boolean,System.Boolean,System.Workflow.Activities.Rules.RulePathQualifier)">
          <source>When overridden in a derived class, reports on how the object uses fields and properties in the context type.</source>
          <target state="translated">Quando substituído em uma classe derivada, informa como o objeto usa campos e propriedades no tipo de contexto.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Workflow.Activities.Rules.IRuleExpression.Clone">
          <source>When overridden in a derived class, creates a deep copy of the current <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeExpression" /&gt;</ph>.</source>
          <target state="translated">Quando substituído em uma classe derivada, cria uma cópia em profundidade do <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeExpression" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Workflow.Activities.Rules.IRuleExpression.Clone">
          <source>A deep copy of the current <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeExpression" /&gt;</ph>.</source>
          <target state="translated">Uma cópia profunda do <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeExpression" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Workflow.Activities.Rules.IRuleExpression.Decompile(System.Text.StringBuilder,System.CodeDom.CodeExpression)">
          <source>A mutable string for the decompiled expression.</source>
          <target state="translated">Uma cadeia de caracteres mutável para a expressão descompilada.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Workflow.Activities.Rules.IRuleExpression.Decompile(System.Text.StringBuilder,System.CodeDom.CodeExpression)">
          <source>This method should append the decompiled syntax for this subexpression.</source>
          <target state="translated">Esse método deve acrescentar a sintaxe descompilada para essa subexpressão.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Workflow.Activities.Rules.IRuleExpression.Decompile(System.Text.StringBuilder,System.CodeDom.CodeExpression)">
          <source>The parent code expression.</source>
          <target state="translated">A expressão de código pai.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Workflow.Activities.Rules.IRuleExpression.Decompile(System.Text.StringBuilder,System.CodeDom.CodeExpression)">
          <source>This can be used to determine operator precedence, and whether this subexpression needs to be parenthesized.</source>
          <target state="translated">Pode ser usada para determinar a precedência de operador e se essa subexpressão precisa estar entre parênteses.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Workflow.Activities.Rules.IRuleExpression.Decompile(System.Text.StringBuilder,System.CodeDom.CodeExpression)">
          <source>When overridden in a derived class, decompiles the custom expression into string form.</source>
          <target state="translated">Quando substituído em uma classe derivada, descompila a expressão personalizada em formato de cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Workflow.Activities.Rules.IRuleExpression.Evaluate(System.Workflow.Activities.Rules.RuleExecution)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Workflow.Activities.Rules.RuleExecution" /&gt;</ph> to execute the expression.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Workflow.Activities.Rules.RuleExecution" /&gt;</ph> para executar a expressão.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Workflow.Activities.Rules.IRuleExpression.Evaluate(System.Workflow.Activities.Rules.RuleExecution)">
          <source>When overridden in a derived class, evaluates the custom expression.</source>
          <target state="translated">Quando substituído em uma classe derivada, avalia a expressão personalizada.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Workflow.Activities.Rules.IRuleExpression.Evaluate(System.Workflow.Activities.Rules.RuleExecution)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Workflow.Activities.Rules.RuleExpressionResult" /&gt;</ph> that indicates the result of the rule execution.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Workflow.Activities.Rules.RuleExpressionResult" /&gt;</ph> que indica o resultado da execução da regra.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Workflow.Activities.Rules.IRuleExpression.Match(System.CodeDom.CodeExpression)">
          <source>The expression to compare the current expression to.</source>
          <target state="translated">A expressão à qual comparar a expressão atual.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Workflow.Activities.Rules.IRuleExpression.Match(System.CodeDom.CodeExpression)">
          <source>Compares the current expression to another expression to determine whether they are equal.</source>
          <target state="translated">Compara a expressão atual a outra expressão para determinar se são iguais.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Workflow.Activities.Rules.IRuleExpression.Match(System.CodeDom.CodeExpression)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to show that the expressions are equal; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> para mostrar se as expressões são iguais; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Workflow.Activities.Rules.IRuleExpression.Validate(System.Workflow.Activities.Rules.RuleValidation,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Workflow.Activities.Rules.RuleValidation" /&gt;</ph> to manage the validation process.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Workflow.Activities.Rules.RuleValidation" /&gt;</ph> para gerenciar o processo de validação.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Workflow.Activities.Rules.IRuleExpression.Validate(System.Workflow.Activities.Rules.RuleValidation,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the expression is being written to; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the expression is not being written to.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se a expressão estiver sendo gravada; <ph id="ph2">&lt;see langword="false" /&gt;</ph> se a expressão não estiver sendo gravada.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Workflow.Activities.Rules.IRuleExpression.Validate(System.Workflow.Activities.Rules.RuleValidation,System.Boolean)">
          <source>When overridden in a derived class, verifies that the expression is configured correctly and has no errors.</source>
          <target state="translated">Quando substituído em uma classe derivada, verifica se a expressão está configurada corretamente e não tem erros.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Workflow.Activities.Rules.IRuleExpression.Validate(System.Workflow.Activities.Rules.RuleValidation,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Workflow.Activities.Rules.RuleExpressionInfo" /&gt;</ph> for the expression.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Workflow.Activities.Rules.RuleExpressionInfo" /&gt;</ph> para a expressão.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>