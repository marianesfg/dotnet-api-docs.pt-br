<Type Name="VisualBasicReference&lt;TResult&gt;" FullName="Microsoft.VisualBasic.Activities.VisualBasicReference&lt;TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9ce8ed3ac1409ef469331f43d7e27049822d00c3" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48639457" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class VisualBasicReference&lt;TResult&gt; : System.Activities.CodeActivity&lt;System.Activities.Location&lt;TResult&gt;&gt;, System.Activities.Expressions.ITextExpression, System.Activities.XamlIntegration.IValueSerializableExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit VisualBasicReference`1&lt;TResult&gt; extends System.Activities.CodeActivity`1&lt;class System.Activities.Location`1&lt;!TResult&gt;&gt; implements class System.Activities.Expressions.ITextExpression, class System.Activities.XamlIntegration.IValueSerializableExpression" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class VisualBasicReference(Of TResult)&#xA;Inherits CodeActivity(Of Location(Of TResult))&#xA;Implements ITextExpression, IValueSerializableExpression" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public ref class VisualBasicReference sealed : System::Activities::CodeActivity&lt;System::Activities::Location&lt;TResult&gt; ^&gt;, System::Activities::Expressions::ITextExpression, System::Activities::XamlIntegration::IValueSerializableExpression" />
  <TypeSignature Language="F#" Value="type VisualBasicReference&lt;'Result&gt; = class&#xA;    inherit CodeActivity&lt;Location&lt;'Result&gt;&gt;&#xA;    interface IValueSerializableExpression&#xA;    interface ITextExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Activities.CodeActivity&lt;System.Activities.Location&lt;TResult&gt;&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TResult">System.Activities.Location&lt;TResult&gt;</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Activities.Expressions.ITextExpression</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Activities.XamlIntegration.IValueSerializableExpression</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TResult">
      <span data-ttu-id="f05b5-101">O tipo de expressão.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f05b5-101">The type of the expression.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="f05b5-102">Contém uma expressão na sintaxe do Visual Basic que é avaliada para um valor l, que é compatível com a associação de argumentos <see cref="F:System.Activities.ArgumentDirection.Out" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f05b5-102">Contains an expression in Visual Basic syntax that evaluates to an l-value, which supports binding of the <see cref="F:System.Activities.ArgumentDirection.Out" /> arguments.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f05b5-103">Essa atividade usa o provedor LINQ to entidades para avaliar expressões LINQ.</span><span class="sxs-lookup"><span data-stu-id="f05b5-103">This activity uses the LINQ to Entity provider to evaluate LINQ expressions.</span></span> <span data-ttu-id="f05b5-104">Todas as expressões LINQ usadas com essa atividade devem ser evaluatable pelo modelo de dados de entidade ADO.Net.</span><span class="sxs-lookup"><span data-stu-id="f05b5-104">Any LINQ expressions used with this activity must be evaluatable by the ADO.Net Entity Data Model.</span></span> <span data-ttu-id="f05b5-105">Por exemplo, expressões de LINQ não podem ser usadas para fazer referência a atividades, variáveis ou argumentos de fluxo de trabalho em si.</span><span class="sxs-lookup"><span data-stu-id="f05b5-105">For example, LINQ expressions cannot be used to reference activities, variables, or arguments of the workflow itself.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f05b5-106">Inicializa uma nova instância da classe <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f05b5-106">Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualBasicReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Activities.VisualBasicReference`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualBasicReference();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f05b5-107">Inicializa uma nova instância da classe <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f05b5-107">Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualBasicReference (string expressionText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string expressionText) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Activities.VisualBasicReference`1.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (expressionText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualBasicReference(System::String ^ expressionText);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.Activities.VisualBasicReference&lt;'Result&gt; : string -&gt; Microsoft.VisualBasic.Activities.VisualBasicReference&lt;'Result&gt;" Usage="new Microsoft.VisualBasic.Activities.VisualBasicReference&lt;'Result&gt; expressionText" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expressionText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expressionText">
          <span data-ttu-id="f05b5-108">A cadeia de caracteres de expressão na sintaxe do Visual Basic.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f05b5-108">The expression string in Visual Basic syntax.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f05b5-109">Inicializa uma nova instância da classe <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> usando a expressão específica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f05b5-109">Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> class using the specific expression.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheMetadata">
      <MemberSignature Language="C#" Value="protected override void CacheMetadata (System.Activities.CodeActivityMetadata metadata);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CacheMetadata(valuetype System.Activities.CodeActivityMetadata metadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Activities.VisualBasicReference`1.CacheMetadata(System.Activities.CodeActivityMetadata)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CacheMetadata (metadata As CodeActivityMetadata)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CacheMetadata(System::Activities::CodeActivityMetadata metadata);" />
      <MemberSignature Language="F#" Value="override this.CacheMetadata : System.Activities.CodeActivityMetadata -&gt; unit" Usage="visualBasicReference.CacheMetadata metadata" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Activities.CodeActivityMetadata" />
      </Parameters>
      <Docs>
        <param name="metadata">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertToString">
      <MemberSignature Language="C#" Value="public bool CanConvertToString (System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertToString(class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Activities.VisualBasicReference`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanConvertToString (context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertToString(System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertToString : System.Windows.Markup.IValueSerializerContext -&gt; bool&#xA;override this.CanConvertToString : System.Windows.Markup.IValueSerializerContext -&gt; bool" Usage="visualBasicReference.CanConvertToString context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Activities.XamlIntegration.IValueSerializableExpression.CanConvertToString(System.Windows.Markup.IValueSerializerContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="f05b5-110">As informações de contexto usadas para conversão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f05b5-110">The context information that is used for conversion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f05b5-111">Determina se o <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> pode ser convertido em um <see cref="T:System.String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f05b5-111">Determines whether the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> can be converted into a <see cref="T:System.String" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f05b5-112">
            <see langword="true" /> se o <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> puder ser convertido em uma cadeia de caracteres; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f05b5-112">
              <see langword="true" /> if the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> can be converted into a string; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f05b5-113">Esse método sempre retorna `true`.</span><span class="sxs-lookup"><span data-stu-id="f05b5-113">This method always returns `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToString">
      <MemberSignature Language="C#" Value="public string ConvertToString (System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ConvertToString(class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Activities.VisualBasicReference`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConvertToString (context As IValueSerializerContext) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ConvertToString(System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ConvertToString : System.Windows.Markup.IValueSerializerContext -&gt; string&#xA;override this.ConvertToString : System.Windows.Markup.IValueSerializerContext -&gt; string" Usage="visualBasicReference.ConvertToString context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Activities.XamlIntegration.IValueSerializableExpression.ConvertToString(System.Windows.Markup.IValueSerializerContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="f05b5-114">As informações de contexto usadas para conversão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f05b5-114">The context information that is used for conversion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f05b5-115">Converte o <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> para um <see cref="T:System.String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f05b5-115">Converts the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> to a <see cref="T:System.String" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f05b5-116">Uma representação da cadeia de caracteres do <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f05b5-116">A string representation of the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f05b5-117">A representação de cadeia de caracteres consiste o <xref:Microsoft.VisualBasic.Activities.VisualBasicReference%601.ExpressionText%2A> entre colchetes.</span><span class="sxs-lookup"><span data-stu-id="f05b5-117">The string representation consists of the <xref:Microsoft.VisualBasic.Activities.VisualBasicReference%601.ExpressionText%2A> surrounded by brackets.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="protected override System.Activities.Location&lt;TResult&gt; Execute (System.Activities.CodeActivityContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Activities.Location`1&lt;!TResult&gt; Execute(class System.Activities.CodeActivityContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Activities.VisualBasicReference`1.Execute(System.Activities.CodeActivityContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function Execute (context As CodeActivityContext) As Location(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Activities::Location&lt;TResult&gt; ^ Execute(System::Activities::CodeActivityContext ^ context);" />
      <MemberSignature Language="F#" Value="override this.Execute : System.Activities.CodeActivityContext -&gt; System.Activities.Location&lt;'Result&gt;" Usage="visualBasicReference.Execute context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Location&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.CodeActivityContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpressionText">
      <MemberSignature Language="C#" Value="public string ExpressionText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ExpressionText" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Activities.VisualBasicReference`1.ExpressionText" />
      <MemberSignature Language="VB.NET" Value="Public Property ExpressionText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ExpressionText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ExpressionText : string with get, set" Usage="Microsoft.VisualBasic.Activities.VisualBasicReference&lt;'Result&gt;.ExpressionText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f05b5-118">Obtém ou define a expressão do Visual Basic representada por este <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f05b5-118">Gets or set the Visual Basic expression represented by this <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f05b5-119">A expressão do Visual Basic.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f05b5-119">The Visual Basic expression.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExpressionTree">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetExpressionTree ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetExpressionTree() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Activities.VisualBasicReference`1.GetExpressionTree" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExpressionTree () As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Linq::Expressions::Expression ^ GetExpressionTree();" />
      <MemberSignature Language="F#" Value="abstract member GetExpressionTree : unit -&gt; System.Linq.Expressions.Expression&#xA;override this.GetExpressionTree : unit -&gt; System.Linq.Expressions.Expression" Usage="visualBasicReference.GetExpressionTree " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Activities.Expressions.ITextExpression.GetExpressionTree</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f05b5-120">Obtém a árvore de expressão usada na referência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f05b5-120">Gets the expression tree used in the reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f05b5-121">A árvore de expressão usada na referência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f05b5-121">The expression tree used in the reference.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public string Language { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Language" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Activities.VisualBasicReference`1.Language" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Language As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Language { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Language : string" Usage="Microsoft.VisualBasic.Activities.VisualBasicReference&lt;'Result&gt;.Language" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Activities.Expressions.ITextExpression.Language</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f05b5-122">Obtém o idioma usado na referência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f05b5-122">Gets the language used in the reference.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f05b5-123">O idioma usado na referência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f05b5-123">The language used in the reference.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequiresCompilation">
      <MemberSignature Language="C#" Value="public bool RequiresCompilation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RequiresCompilation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Activities.VisualBasicReference`1.RequiresCompilation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RequiresCompilation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RequiresCompilation { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RequiresCompilation : bool" Usage="Microsoft.VisualBasic.Activities.VisualBasicReference&lt;'Result&gt;.RequiresCompilation" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Activities.Expressions.ITextExpression.RequiresCompilation</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f05b5-124">Indica se a referência exige compilação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f05b5-124">Gets whether the reference requires compilation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f05b5-125">
            <see langword="True" /> Se a referência exige compilação; Caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f05b5-125">
              <see langword="True" /> if the reference requires compilation; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>