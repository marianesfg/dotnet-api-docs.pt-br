<Type Name="VisualBasicValue&lt;TResult&gt;" FullName="Microsoft.VisualBasic.Activities.VisualBasicValue&lt;TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6de10ae7d6e475a14ce52c54e7568c37173fd014" />
    <Meta Name="ms.sourcegitcommit" Value="1b899505ed6d42225f2b3c9150bfdc080d0d1f9b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/28/2018" />
    <Meta Name="ms.locfileid" Value="32086130" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class VisualBasicValue&lt;TResult&gt; : System.Activities.CodeActivity&lt;TResult&gt;, System.Activities.Expressions.ITextExpression, System.Activities.XamlIntegration.IValueSerializableExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit VisualBasicValue`1&lt;TResult&gt; extends System.Activities.CodeActivity`1&lt;!TResult&gt; implements class System.Activities.Expressions.ITextExpression, class System.Activities.XamlIntegration.IValueSerializableExpression" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class VisualBasicValue(Of TResult)&#xA;Inherits CodeActivity(Of TResult)&#xA;Implements ITextExpression, IValueSerializableExpression" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public ref class VisualBasicValue sealed : System::Activities::CodeActivity&lt;TResult&gt;, System::Activities::Expressions::ITextExpression, System::Activities::XamlIntegration::IValueSerializableExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Activities.CodeActivity&lt;TResult&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TResult">TResult</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Activities.Expressions.ITextExpression</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Activities.XamlIntegration.IValueSerializableExpression</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TResult">O tipo de expressão.</typeparam>
    <summary>Contém uma expressão na sintaxe do Visual Basic que é avaliada para um valor r, que é compatível com a associação de argumentos <see cref="F:System.Activities.ArgumentDirection.In" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa atividade usa o provedor de entidade LINQ to para avaliar expressões LINQ. Todas as expressões LINQ usadas com essa atividade devem ser evaluatable pelo modelo de dados de entidade ADO.Net. Por exemplo, as expressões LINQ não podem ser usadas para referenciar atividades, variáveis ou argumentos do fluxo de trabalho em si.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualBasicValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Activities.VisualBasicValue`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualBasicValue();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualBasicValue (string expressionText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string expressionText) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Activities.VisualBasicValue`1.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (expressionText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualBasicValue(System::String ^ expressionText);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expressionText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expressionText">A cadeia de caracteres de expressão na sintaxe do Visual Basic.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> usando a expressão especificada.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheMetadata">
      <MemberSignature Language="C#" Value="protected override void CacheMetadata (System.Activities.CodeActivityMetadata metadata);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CacheMetadata(valuetype System.Activities.CodeActivityMetadata metadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Activities.VisualBasicValue`1.CacheMetadata(System.Activities.CodeActivityMetadata)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CacheMetadata (metadata As CodeActivityMetadata)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CacheMetadata(System::Activities::CodeActivityMetadata metadata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Activities.CodeActivityMetadata" />
      </Parameters>
      <Docs>
        <param name="metadata">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertToString">
      <MemberSignature Language="C#" Value="public bool CanConvertToString (System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertToString(class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Activities.VisualBasicValue`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanConvertToString (context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertToString(System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Activities.XamlIntegration.IValueSerializableExpression.CanConvertToString(System.Windows.Markup.IValueSerializerContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="context">As informações de contexto usadas para conversão.</param>
        <summary>Determina se o <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> pode ser convertido em um <see cref="T:System.String" />.</summary>
        <returns>
          <see langword="true" /> se o <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> puder ser convertido em uma cadeia de caracteres; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método sempre retorna `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToString">
      <MemberSignature Language="C#" Value="public string ConvertToString (System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ConvertToString(class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Activities.VisualBasicValue`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConvertToString (context As IValueSerializerContext) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ConvertToString(System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Activities.XamlIntegration.IValueSerializableExpression.ConvertToString(System.Windows.Markup.IValueSerializerContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="context">As informações de contexto usadas para conversão.</param>
        <summary>Converte o <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> para um <see cref="T:System.String" />.</summary>
        <returns>Uma representação da cadeia de caracteres do <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A representação de cadeia de caracteres consiste de <xref:Microsoft.VisualBasic.Activities.VisualBasicValue%601.ExpressionText%2A> entre colchetes.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="protected override TResult Execute (System.Activities.CodeActivityContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance !TResult Execute(class System.Activities.CodeActivityContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Activities.VisualBasicValue`1.Execute(System.Activities.CodeActivityContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function Execute (context As CodeActivityContext) As TResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override TResult Execute(System::Activities::CodeActivityContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.CodeActivityContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpressionText">
      <MemberSignature Language="C#" Value="public string ExpressionText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ExpressionText" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Activities.VisualBasicValue`1.ExpressionText" />
      <MemberSignature Language="VB.NET" Value="Public Property ExpressionText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ExpressionText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a expressão do Visual Basic representada por este <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" />.</summary>
        <value>A expressão do Visual Basic.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExpressionTree">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetExpressionTree ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetExpressionTree() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Activities.VisualBasicValue`1.GetExpressionTree" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExpressionTree () As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Linq::Expressions::Expression ^ GetExpressionTree();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Activities.Expressions.ITextExpression.GetExpressionTree</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna a árvore de expressão para o valor.</summary>
        <returns>A árvore de expressão para o valor.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public string Language { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Language" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Activities.VisualBasicValue`1.Language" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Language As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Language { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Activities.Expressions.ITextExpression.Language</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o idioma usado para o valor.</summary>
        <value>O idioma usado.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequiresCompilation">
      <MemberSignature Language="C#" Value="public bool RequiresCompilation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RequiresCompilation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Activities.VisualBasicValue`1.RequiresCompilation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RequiresCompilation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RequiresCompilation { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Activities.Expressions.ITextExpression.RequiresCompilation</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indica se o valor exige compilação.</summary>
        <value>
          <see langword="True" /> Se o valor requer compilação; Caso contrário, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>