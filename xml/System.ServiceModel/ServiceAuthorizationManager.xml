<Type Name="ServiceAuthorizationManager" FullName="System.ServiceModel.ServiceAuthorizationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="60ceee2686fdc732791617129cdf4bab1fa3eeae" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51874987" /></Metadata><TypeSignature Language="C#" Value="public class ServiceAuthorizationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceAuthorizationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.ServiceAuthorizationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceAuthorizationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceAuthorizationManager" />
  <TypeSignature Language="F#" Value="type ServiceAuthorizationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece verificação de acesso de autorização para operações de serviço.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa classe é responsável por avaliar todas as políticas (regras que definem o que um usuário tem permissão para fazer), comparando as políticas a serem feitas por uma configuração de cliente, resultante de declarações <xref:System.IdentityModel.Policy.AuthorizationContext> para o <xref:System.ServiceModel.ServiceSecurityContext>e fornecendo a decisão de autorização se para permitir ou negar o acesso de uma operação de determinado serviço para um chamador.  
  
 O <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> método é chamado pela infraestrutura do Windows Communication Foundation (WCF) sempre que for feita uma tentativa de acessar um recurso. O método retornará `true` ou `false` para permitir ou negar acesso, respectivamente.  
  
 O <xref:System.ServiceModel.ServiceAuthorizationManager> faz parte do WCF*modelo de identidade* infraestrutura. O modelo de identidade permite que você crie políticas de autorização personalizado e esquemas de autorização personalizado. Para obter mais informações sobre como funciona o modelo de identidade, consulte [Gerenciando reivindicações e autorização com o modelo de identidade](~/docs/framework/wcf/feature-details/managing-claims-and-authorization-with-the-identity-model.md).  
  
## <a name="custom-authorization"></a>Autorização personalizada  
 Essa classe não realiza nenhuma autorização e permite aos usuários acessar todas as operações de serviço. Para fornecer autorização mais restritiva, você deve criar uma autorização personalizada Gerenciador que verifica as políticas personalizadas. Para fazer isso, herdar dessa classe e substituir o <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> método. Especifique a instância da classe derivada por meio de <xref:System.ServiceModel.Dispatcher.DispatchRuntime.ServiceAuthorizationManager%2A> propriedade.  
  
 Na <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>, o aplicativo pode usar o <xref:System.ServiceModel.OperationContext> objeto para acessar a identidade do chamador (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>).  
  
 Obtendo o <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> propriedade, que retorna um <xref:System.ServiceModel.Channels.MessageHeaders> do objeto, o aplicativo pode acessar o serviço (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>) e a operação (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>).  
  
 Obtendo o <xref:System.ServiceModel.OperationContext.RequestContext%2A> propriedade, que retorna um <xref:System.ServiceModel.Channels.RequestContext> do objeto, o aplicativo pode acessar a mensagem de solicitação inteira (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>) e executar a decisão de autorização de acordo.  
  
 Por exemplo, consulte [como: criar um Gerenciador de autorização personalizado para um serviço](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-manager-for-a-service.md).  
  
 Para criar políticas de autorização personalizado, implemente o <xref:System.IdentityModel.Policy.IAuthorizationPolicy> classe.  Por exemplo, consulte [como: criar uma política de autorização personalizada](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-policy.md).  
  
 Para criar uma declaração personalizada, use o <xref:System.IdentityModel.Claims.Claim> classe.  Por exemplo, consulte [como: criar uma declaração personalizada](~/docs/framework/wcf/extending/how-to-create-a-custom-claim.md). Para comparar declarações personalizadas, você deve comparar declarações, conforme mostrado na [como: comparar declarações](~/docs/framework/wcf/extending/how-to-compare-claims.md).  
  
 Para obter mais informações, consulte [autorização personalizada](~/docs/framework/wcf/extending/custom-authorization.md).  
  
 Você pode definir o tipo de um Gerenciador de autorização personalizada usando o [ &lt;serviceAuthorization&gt; ](~/docs/framework/configure-apps/file-schema/wcf/serviceauthorization-element.md) em um arquivo de configuração de aplicativo do cliente.  
  
   
  
## Examples  
 O exemplo a seguir mostra uma classe chamada `MyServiceAuthorizationManager` que herda de <xref:System.ServiceModel.ServiceAuthorizationManager> e substitui o <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> método.  
  
 [!code-csharp[c_CustomAuthMgr#2](~/samples/snippets/csharp/VS_Snippets_CFX/c_customauthmgr/cs/c_customauthmgr.cs#2)]
 [!code-vb[c_CustomAuthMgr#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_customauthmgr/vb/c_customauthmgr.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Claims.ClaimSet" />
    <altmember cref="T:System.IdentityModel.Claims.Claim" />
    <related type="Article" href="https://msdn.microsoft.com/library/4f90311a-2593-462e-9174-2f7ac78217b9">Autorização personalizada</related>
    <related type="Article" href="https://msdn.microsoft.com/library/6214afde-44c1-4bf5-ba07-5ad6493620ea">Como: Criar um AuthorizationManager personalizado para um serviço</related>
    <related type="Article" href="https://msdn.microsoft.com/library/05b0549b-882d-4660-b6f0-5678543e5475">Como: Criar uma política de autorização personalizada</related>
    <related type="Article" href="https://msdn.microsoft.com/library/d619976b-eda3-475e-ac23-c7988a2dceb0">Como: Criar uma declaração personalizada</related>
    <related type="Article" href="https://msdn.microsoft.com/library/0c4ec84d-53df-408f-8953-9bc437f56c28">Como: Comparar declarações</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceAuthorizationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceAuthorizationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.ServiceModel.ServiceAuthorizationManager" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CheckAccess">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Verifica a autorização para o contexto de operação fornecido e a mensagem opcional.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.ServiceModel.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.ServiceModel.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::ServiceModel::OperationContext ^ operationContext);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccess : System.ServiceModel.OperationContext -&gt; bool&#xA;override this.CheckAccess : System.ServiceModel.OperationContext -&gt; bool" Usage="serviceAuthorizationManager.CheckAccess operationContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
      </Parameters>
      <Docs>
        <param name="operationContext">O <see cref="T:System.ServiceModel.OperationContext" />.</param>
        <summary>Verifica a autorização para o contexto de operação fornecido.</summary>
        <returns><see langword="true" /> se o acesso for concedido; caso contrário, <see langword="false" />. O padrão é <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Em geral, os aplicativos devem substituir <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> em vez deste método.  
  
 Substituir <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccess%2A> se o aplicativo associa ou apresenta um conjunto diferente de políticas para resultante <xref:System.ServiceModel.ServiceSecurityContext> ou fornecer um modelo de avaliação (encadeamento) de política diferente.  
  
 Esse método é responsável por chamar <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>.  
  
   
  
## Examples  
 O código a seguir mostra como substituir esse método para impor requisitos de controle de acesso personalizado.  
  
 [!code-csharp[c_Federation#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_federation/cs/source.cs#1)]
 [!code-vb[c_Federation#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_federation/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.ServiceModel.OperationContext operationContext, ref System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.ServiceModel.OperationContext operationContext, class System.ServiceModel.Channels.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::ServiceModel::OperationContext ^ operationContext, System::ServiceModel::Channels::Message ^ % message);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccess : System.ServiceModel.OperationContext *  -&gt; bool&#xA;override this.CheckAccess : System.ServiceModel.OperationContext *  -&gt; bool" Usage="serviceAuthorizationManager.CheckAccess (operationContext, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="operationContext">O <see cref="T:System.ServiceModel.OperationContext" />.</param>
        <param name="message">O <see cref="T:System.ServiceModel.Channels.Message" /> a ser examinado para se determinar a autorização.</param>
        <summary>Verifica a autorização para o contexto de operação fornecido quando o acesso a uma mensagem é necessário.</summary>
        <returns><see langword="true" /> se o acesso for concedido; caso contrário, <see langword="false" />. O padrão é <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Em geral, os aplicativos devem substituir <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> ao invés desse método, que só deve ser usado se a decisão de autorização depende do corpo da mensagem. Devido a problemas de desempenho, se possível você deve recriar seu aplicativo para que a decisão de autorização não requer acesso ao corpo da mensagem.  
  
 Substitua este método se o aplicativo associa ou apresenta um conjunto diferente de políticas para resultante <xref:System.ServiceModel.ServiceSecurityContext> e <xref:System.ServiceModel.Channels.Message> ou fornecer um modelo de avaliação (encadeamento) de política diferente.  
  
 Esse método é responsável por chamar <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>.  
  
   
  
## Examples  
 O código a seguir mostra como substituir esse método para impor requisitos de controle de acesso personalizadas que requerem acesso ao corpo da mensagem.  
  
 [!code-csharp[c_Federation#6](~/samples/snippets/csharp/VS_Snippets_CFX/c_federation/cs/source.cs#6)]
 [!code-vb[c_Federation#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_federation/vb/source.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccessCore">
      <MemberSignature Language="C#" Value="protected virtual bool CheckAccessCore (System.ServiceModel.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool CheckAccessCore(class System.ServiceModel.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool CheckAccessCore(System::ServiceModel::OperationContext ^ operationContext);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccessCore : System.ServiceModel.OperationContext -&gt; bool&#xA;override this.CheckAccessCore : System.ServiceModel.OperationContext -&gt; bool" Usage="serviceAuthorizationManager.CheckAccessCore operationContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
      </Parameters>
      <Docs>
        <param name="operationContext">O <see cref="T:System.ServiceModel.OperationContext" /> para a solicitação de autorização atual.</param>
        <summary>Verifica a autorização para um determinado contexto de operação com base na avaliação de política padrão.</summary>
        <returns><see langword="true" /> se o acesso for concedido; caso contrário, <see langword="false" />. O padrão é <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> geralmente é o resultado da avaliação da política padrão.  
  
 Substitua este método para fornecer decisões de autorização personalizado.  
  
 Esse método pode ser usado para fazer as decisões com base em conjuntos de declarações que são inferidos com base em tokens de entrada de autorização ou adicionado por meio de políticas de autorização externas. Ele também pode tomar decisões de autorização com base nas propriedades da mensagem de entrada: por exemplo, o cabeçalho de ação.  
  
 Nesse método, o aplicativo pode usar o `operationContext` parâmetro para acessar a identidade do chamador (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>). Retornando o <xref:System.ServiceModel.Channels.RequestContext> do objeto do <xref:System.ServiceModel.OperationContext.RequestContext%2A> propriedade, o aplicativo pode acessar a mensagem de solicitação inteira (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>). Retornando o <xref:System.ServiceModel.Channels.MessageHeaders> do objeto do <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> propriedade, o aplicativo pode acessar a URL do serviço (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>) e a operação (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>). Com essas informações, o aplicativo pode executar a decisão de autorização adequadamente.  
  
 As declarações feitas por um usuário são encontradas na <xref:System.IdentityModel.Claims.ClaimSet> retornado pela <xref:System.IdentityModel.Policy.AuthorizationContext.ClaimSets%2A> propriedade do `AuthorizationContext`. Atual `AuthorizationContext` é retornado pelo <xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> propriedade do <xref:System.ServiceModel.OperationContext> classe.  
  
   
  
## Examples  
 O exemplo a seguir mostra uma substituição do <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> método.  
  
 [!code-csharp[c_CustomAuthMgr#6](~/samples/snippets/csharp/VS_Snippets_CFX/c_customauthmgr/cs/c_customauthmgr.cs#6)]
 [!code-vb[c_CustomAuthMgr#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_customauthmgr/vb/c_customauthmgr.vb#6)]  
  
 Para obter outro exemplo, consulte [como: criar um Gerenciador de autorização personalizado para um serviço](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-manager-for-a-service.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAuthorizationPolicies">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt; GetAuthorizationPolicies (System.ServiceModel.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IdentityModel.Policy.IAuthorizationPolicy&gt; GetAuthorizationPolicies(class System.ServiceModel.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::Policy::IAuthorizationPolicy ^&gt; ^ GetAuthorizationPolicies(System::ServiceModel::OperationContext ^ operationContext);" />
      <MemberSignature Language="F#" Value="abstract member GetAuthorizationPolicies : System.ServiceModel.OperationContext -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt;&#xA;override this.GetAuthorizationPolicies : System.ServiceModel.OperationContext -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt;" Usage="serviceAuthorizationManager.GetAuthorizationPolicies operationContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
      </Parameters>
      <Docs>
        <param name="operationContext">O <see cref="T:System.ServiceModel.OperationContext" /> da solicitação de autorização atual.</param>
        <summary>Obtém o conjunto de políticas que participam de avaliação de políticas.</summary>
        <returns>Um <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> do tipo <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A implementação do Windows Communication Foundation (WCF) oferece um conjunto padrão de diretivas de autorização. Isso inclui o token primário que contém as credenciais do solicitante e tokens de suporte de todos, tokens de transporte e diretivas externas se especificado.  
  
 Você pode substituir essa implementação e fornecer um conjunto diferente de políticas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>