<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ConcurrencyMode.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac505ec8ae681b81889f4dba2cfb53bcd59c150db65.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05ec8ae681b81889f4dba2cfb53bcd59c150db65</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.ConcurrencyMode">
          <source>Specifies whether a service class supports single-threaded or multi-threaded modes of operation.</source>
          <target state="translated">Especifica se uma classe de serviço dá suporte a modos de operação single-thread ou multithread.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ConcurrencyMode">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ConcurrencyMode&gt;</ph> is used in conjunction with the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A&gt;</ph> property to specify whether a service class supports single-threaded or multi-threaded modes of operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ConcurrencyMode&gt;</ph> é usado em conjunto com o <ph id="ph2">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A&gt;</ph> propriedade para especificar se uma classe de serviço oferece suporte a modos de thread único ou vários threads de operação.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ConcurrencyMode">
          <source>A single-threaded operation can be either reentrant or non-reentrant.</source>
          <target state="translated">Uma operação de thread único pode ser reentrante ou não reentrante.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ConcurrencyMode">
          <source>The following table shows when <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> permits an operation to be invoked while another one is in progress, depending upon the <ph id="ph2">&lt;xref:System.ServiceModel.ConcurrencyMode&gt;</ph>.</source>
          <target state="translated">A tabela a seguir mostra quando <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> permite uma operação a ser chamado enquanto outro está em andamento, dependendo do <ph id="ph2">&lt;xref:System.ServiceModel.ConcurrencyMode&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ConcurrencyMode">
          <source>ConcurrencyMode Value</source>
          <target state="translated">Valor de ConcurrencyMode</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ConcurrencyMode">
          <source>Can a new operation be invoked?</source>
          <target state="translated">Uma nova operação pode ser invocada?</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ConcurrencyMode">
          <source>Single</source>
          <target state="translated">Simples</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ConcurrencyMode">
          <source>Never.</source>
          <target state="translated">Nunca.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ConcurrencyMode">
          <source>Reentrant</source>
          <target state="translated">Reentrante</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ConcurrencyMode">
          <source>Only while invoking another service or a callback.</source>
          <target state="translated">Apenas ao chamar outro serviço ou um retorno de chamada.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ConcurrencyMode">
          <source>Multiple</source>
          <target state="translated">Múltiplo</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ConcurrencyMode">
          <source>Always.</source>
          <target state="translated">Sempre.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ConcurrencyMode">
          <source>The following code example demonstrates the different between using Single, Reentrant, and Multiple.</source>
          <target state="translated">O exemplo de código a seguir demonstra a diferença entre usar reentrante, único e vários.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ConcurrencyMode">
          <source>This sample does not compile without a real implementation behind it, but does demonstrate the kind of threading guarantees that <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> makes and what that means for your operation code.</source>
          <target state="translated">Este exemplo não é compilado sem uma implementação real por trás dele, mas demonstram o tipo de threading garante que <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> faz e o que isso significa que para o código de operação.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="F:System.ServiceModel.ConcurrencyMode.Multiple">
          <source>The service instance is multi-threaded.</source>
          <target state="translated">A instância do serviço é multithread.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="F:System.ServiceModel.ConcurrencyMode.Multiple">
          <source>No synchronization guarantees are made.</source>
          <target state="translated">Nenhuma garantia de sincronização é feita.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="F:System.ServiceModel.ConcurrencyMode.Multiple">
          <source>Because other threads can change your service object at any time, you must handle synchronization and state consistency at all times.</source>
          <target state="translated">Como outros threads podem alterar o objeto de serviço a qualquer momento, você deve tratar a sincronização e consistência de estado o tempo todo.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="F:System.ServiceModel.ConcurrencyMode.Reentrant">
          <source>The service instance is single-threaded and accepts reentrant calls.</source>
          <target state="translated">A instância de serviço é single-thread e aceita chamadas reentrantes.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="F:System.ServiceModel.ConcurrencyMode.Reentrant">
          <source>The reentrant service accepts calls when you call another service; it is therefore your responsibility to leave your object state consistent before callouts and you must confirm that operation-local data is valid after callouts.</source>
          <target state="translated">O serviço reentrante aceita chamadas quando você chama outro serviço, portanto, é sua responsabilidade manter o estado de seu objeto consistente antes dos textos explicativos e você deve confirmar se os dados de local da operação são válidos após os textos explicativos.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="F:System.ServiceModel.ConcurrencyMode.Reentrant">
          <source>Note that the service instance is unlocked only by calling another service over a <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> channel.</source>
          <target state="translated">Observe que a instância do serviço é desbloqueada somente chamando outro serviço em um canal <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="F:System.ServiceModel.ConcurrencyMode.Reentrant">
          <source>In this case, the called service can reenter the first service via a callback.</source>
          <target state="translated">Nesse caso, o serviço chamado pode reinserir o primeiro serviço por meio de um retorno de chamada.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="F:System.ServiceModel.ConcurrencyMode.Reentrant">
          <source>If the first service is not reentrant, the sequence of calls results in a deadlock.</source>
          <target state="translated">Se o primeiro serviço não for reentrante, a sequência de chamadas resultará em um deadlock.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="F:System.ServiceModel.ConcurrencyMode.Reentrant">
          <source>For details, see <ph id="ph1">&lt;see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode" /&gt;</ph>.</source>
          <target state="translated">Para obter detalhes, consulte <ph id="ph1">&lt;see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="F:System.ServiceModel.ConcurrencyMode.Single">
          <source>The service instance is single-threaded and does not accept reentrant calls.</source>
          <target state="translated">A instância do serviço é single-thread e não aceita chamadas reentrantes.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="F:System.ServiceModel.ConcurrencyMode.Single">
          <source>If the <ph id="ph1">&lt;see cref="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode" /&gt;</ph> property is <ph id="ph2">&lt;see cref="F:System.ServiceModel.InstanceContextMode.Single" /&gt;</ph>, and additional messages arrive while the instance services a call, these messages must wait until the service is available or until the messages time out.</source>
          <target state="translated">Se a propriedade <ph id="ph1">&lt;see cref="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode" /&gt;</ph> for <ph id="ph2">&lt;see cref="F:System.ServiceModel.InstanceContextMode.Single" /&gt;</ph> e chegarem mensagens adicionais enquanto a instância atende a uma chamada, essas mensagens deverão aguardar até que o serviço esteja disponível ou até as mensagens atingirem o tempo limite.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>