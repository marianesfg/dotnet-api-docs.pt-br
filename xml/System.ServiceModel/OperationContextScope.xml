<Type Name="OperationContextScope" FullName="System.ServiceModel.OperationContextScope">
  <TypeSignature Language="C#" Value="public sealed class OperationContextScope : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OperationContextScope extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.OperationContextScope" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OperationContextScope&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class OperationContextScope sealed : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="78ca5-101">Cria um bloco no qual um objeto <see cref="T:System.ServiceModel.OperationContext" /> está no escopo.</span><span class="sxs-lookup"><span data-stu-id="78ca5-101">Creates a block within which an <see cref="T:System.ServiceModel.OperationContext" /> object is in scope.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ca5-102">Use o <xref:System.ServiceModel.OperationContextScope> classe para criar um escopo para um determinado <xref:System.ServiceModel.OperationContext> objeto ou um escopo para um novo <xref:System.ServiceModel.OperationContext> usando um especificado do objeto <xref:System.ServiceModel.IContextChannel> objeto.</span><span class="sxs-lookup"><span data-stu-id="78ca5-102">Use the <xref:System.ServiceModel.OperationContextScope> class to create a scope for a specific <xref:System.ServiceModel.OperationContext> object or a scope for a new <xref:System.ServiceModel.OperationContext> object using a specified <xref:System.ServiceModel.IContextChannel> object.</span></span> <span data-ttu-id="78ca5-103">Um <xref:System.ServiceModel.OperationContextScope> pode ser usado em um [!INCLUDE[indigo1](~/includes/indigo1-md.md)] serviço ou aplicativo de cliente do WCF.</span><span class="sxs-lookup"><span data-stu-id="78ca5-103">An <xref:System.ServiceModel.OperationContextScope> can be used in a [!INCLUDE[indigo1](~/includes/indigo1-md.md)] service or WCF client application.</span></span>  
  
 <span data-ttu-id="78ca5-104">Uma vez o <xref:System.ServiceModel.OperationContextScope> objeto estabeleceu o contexto da operação atual, você pode usar o <xref:System.ServiceModel.OperationContext> para:</span><span class="sxs-lookup"><span data-stu-id="78ca5-104">Once the <xref:System.ServiceModel.OperationContextScope> object has established the current operation context, you can use the <xref:System.ServiceModel.OperationContext> to:</span></span>  
  
-   <span data-ttu-id="78ca5-105">Acessar e modificar os cabeçalhos de mensagem de entrada e saída e outras propriedades.</span><span class="sxs-lookup"><span data-stu-id="78ca5-105">Access and modify incoming and outgoing message headers and other properties.</span></span>  
  
-   <span data-ttu-id="78ca5-106">O tempo de execução, incluindo distribuidores, o host, canal e extensões de acesso.</span><span class="sxs-lookup"><span data-stu-id="78ca5-106">Access the runtime, including dispatchers, the host, channel, and extensions.</span></span>  
  
-   <span data-ttu-id="78ca5-107">Outros tipos de contextos, como segurança, instância e contextos de solicitação de acesso.</span><span class="sxs-lookup"><span data-stu-id="78ca5-107">Access other types of contexts, such as security, instance, and request contexts.</span></span>  
  
-   <span data-ttu-id="78ca5-108">Acessar o canal associado a <xref:System.ServiceModel.OperationContext> objeto ou (se o canal implementa <xref:System.ServiceModel.Channels.ISession?displayProperty=nameWithType>) identificador de sessão do canal associado.</span><span class="sxs-lookup"><span data-stu-id="78ca5-108">Access the channel associated with the <xref:System.ServiceModel.OperationContext> object or (if the channel implements <xref:System.ServiceModel.Channels.ISession?displayProperty=nameWithType>) the associated channel's session identifier.</span></span>  
  
 <span data-ttu-id="78ca5-109">Quando um <xref:System.ServiceModel.OperationContextScope> é criado, atual <xref:System.ServiceModel.OperationContext> é armazenado e o novo <xref:System.ServiceModel.OperationContext> torna-se aquele retornado pelo <xref:System.ServiceModel.OperationContext.Current%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="78ca5-109">When an <xref:System.ServiceModel.OperationContextScope> is created, the current <xref:System.ServiceModel.OperationContext> is stored and the new <xref:System.ServiceModel.OperationContext> becomes the one returned by the <xref:System.ServiceModel.OperationContext.Current%2A> property.</span></span> <span data-ttu-id="78ca5-110">Quando o <xref:System.ServiceModel.OperationContextScope> é descartado, o original <xref:System.ServiceModel.OperationContext> for restaurado.</span><span class="sxs-lookup"><span data-stu-id="78ca5-110">When the <xref:System.ServiceModel.OperationContextScope> is disposed, the original <xref:System.ServiceModel.OperationContext> is restored.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="78ca5-111">Não use o padrão assíncrono "await" dentro de um bloco OperationContextScope.</span><span class="sxs-lookup"><span data-stu-id="78ca5-111">Do not use the asynchronous "await" pattern within a OperationContextScope block.</span></span> <span data-ttu-id="78ca5-112">Quando ocorre a continuação, ela poderá ser executada em um thread diferente e OperationContextScope está thread específico.</span><span class="sxs-lookup"><span data-stu-id="78ca5-112">When the continuation occurs, it may run on a different thread and OperationContextScope is thread specific.</span></span> <span data-ttu-id="78ca5-113">Se você precisar chamar "await" para uma chamada assíncrona, usá-lo fora do bloco OperationContextScope.</span><span class="sxs-lookup"><span data-stu-id="78ca5-113">If you need to call "await" for an async call, use it outside of the OperationContextScope block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78ca5-114">O exemplo a seguir mostra como usar o <xref:System.ServiceModel.OperationContextScope> para criar um novo contexto em um aplicativo cliente para adicionar um cabeçalho personalizado à mensagem de saída.</span><span class="sxs-lookup"><span data-stu-id="78ca5-114">The following example shows how to use the <xref:System.ServiceModel.OperationContextScope> to create a new context in a client application to add a custom header to the outgoing message.</span></span>  
  
 [!code-csharp[OperationContextScope#3](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontextscope/cs/client.cs#3)]
 [!code-vb[OperationContextScope#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontextscope/vb/client.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="78ca5-115">Inicializa uma nova instância da classe <see cref="T:System.ServiceModel.OperationContextScope" />.</span><span class="sxs-lookup"><span data-stu-id="78ca5-115">Initializes a new instance of the <see cref="T:System.ServiceModel.OperationContextScope" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OperationContextScope (System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (channel As IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OperationContextScope(System::ServiceModel::IContextChannel ^ channel);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="channel"><span data-ttu-id="78ca5-116">O canal a ser usado ao criar o escopo de um novo <see cref="T:System.ServiceModel.OperationContext" />.</span><span class="sxs-lookup"><span data-stu-id="78ca5-116">The channel to use when creating the scope for a new <see cref="T:System.ServiceModel.OperationContext" />.</span></span></param>
        <summary><span data-ttu-id="78ca5-117">Inicializa uma nova instância da classe <see cref="T:System.ServiceModel.OperationContextScope" /> que usa o <see cref="T:System.ServiceModel.IContextChannel" /> especificado para criar um novo <see cref="T:System.ServiceModel.OperationContext" /> para o escopo.</span><span class="sxs-lookup"><span data-stu-id="78ca5-117">Initializes a new instance of the <see cref="T:System.ServiceModel.OperationContextScope" /> class that uses the specified <see cref="T:System.ServiceModel.IContextChannel" /> to create a new <see cref="T:System.ServiceModel.OperationContext" /> for the scope.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ca5-118">Use o <xref:System.ServiceModel.OperationContextScope.%23ctor%2A> construtor para criar um novo <xref:System.ServiceModel.OperationContext> para um canal de cliente que pode ser usado para adicionar ou modificar os cabeçalhos de mensagem de saída, ler os cabeçalhos de mensagem de entrada, ou acessar outras propriedades de tempo de execução do <xref:System.ServiceModel.OperationContext>.</span><span class="sxs-lookup"><span data-stu-id="78ca5-118">Use the <xref:System.ServiceModel.OperationContextScope.%23ctor%2A> constructor to create a new <xref:System.ServiceModel.OperationContext> for a client channel that can be used to add or modify outbound message headers, read incoming message headers, or access other run-time properties of the <xref:System.ServiceModel.OperationContext>.</span></span>  
  
 <span data-ttu-id="78ca5-119">Os cabeçalhos adicionados para o <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A?displayProperty=nameWithType> propriedade recém-criado <xref:System.ServiceModel.OperationContext> se aplicam somente ao canal que foi passado para o <xref:System.ServiceModel.OperationContextScope.%23ctor%2A> construtor.</span><span class="sxs-lookup"><span data-stu-id="78ca5-119">The headers added to the <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A?displayProperty=nameWithType> property of the newly created <xref:System.ServiceModel.OperationContext> apply only to the channel that was passed to the <xref:System.ServiceModel.OperationContextScope.%23ctor%2A> constructor.</span></span> <span data-ttu-id="78ca5-120">Se o usuário cria um novo canal de dentro de seu escopo os cabeçalhos não são aplicados às mensagens enviadas no canal de novo.</span><span class="sxs-lookup"><span data-stu-id="78ca5-120">If the user creates a new channel within its scope then the headers are not applied to messages sent on the new channel.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78ca5-121">O exemplo a seguir mostra como usar o <xref:System.ServiceModel.OperationContextScope> para criar um novo contexto em um aplicativo cliente para adicionar um cabeçalho personalizado à mensagem de saída.</span><span class="sxs-lookup"><span data-stu-id="78ca5-121">The following example shows how to use the <xref:System.ServiceModel.OperationContextScope> to create a new context in a client application in order to add a custom header to the outgoing message.</span></span>  
  
 [!code-csharp[OperationContextScope#4](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontextscope/cs/client.cs#4)]
 [!code-vb[OperationContextScope#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontextscope/vb/client.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OperationContextScope (System.ServiceModel.OperationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ServiceModel.OperationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (context As OperationContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OperationContextScope(System::ServiceModel::OperationContext ^ context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="context" Type="System.ServiceModel.OperationContext" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="78ca5-122">O <see cref="T:System.ServiceModel.OperationContext" /> ativo no escopo criado.</span><span class="sxs-lookup"><span data-stu-id="78ca5-122">The active <see cref="T:System.ServiceModel.OperationContext" /> in the created scope.</span></span></param>
        <summary><span data-ttu-id="78ca5-123">Inicializa uma nova instância da classe <see cref="T:System.ServiceModel.OperationContextScope" /> para criar um escopo para o objeto <see cref="T:System.ServiceModel.OperationContext" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="78ca5-123">Initializes a new instance of the <see cref="T:System.ServiceModel.OperationContextScope" /> class to create a scope for the specified <see cref="T:System.ServiceModel.OperationContext" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ca5-124">Use o <xref:System.ServiceModel.OperationContextScope.%23ctor%2A> construtor para criar um bloco de código dentro do qual especificado <xref:System.ServiceModel.OperationContextScope> objeto é o escopo atual.</span><span class="sxs-lookup"><span data-stu-id="78ca5-124">Use the <xref:System.ServiceModel.OperationContextScope.%23ctor%2A> constructor to create a code block within which the specified <xref:System.ServiceModel.OperationContextScope> object is the current scope.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.OperationContextScope.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="78ca5-125">Restaura o <see cref="T:System.ServiceModel.OperationContext" /> original para o contexto ativo e recicla o objeto <see cref="T:System.ServiceModel.OperationContextScope" />.</span><span class="sxs-lookup"><span data-stu-id="78ca5-125">Restores the original <see cref="T:System.ServiceModel.OperationContext" /> to the active context and recycles the <see cref="T:System.ServiceModel.OperationContextScope" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>