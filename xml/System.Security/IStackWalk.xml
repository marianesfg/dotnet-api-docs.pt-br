<Type Name="IStackWalk" FullName="System.Security.IStackWalk">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="68bb1d581343b243676d9e52c3b1ec47ab5eed42" />
    <Meta Name="ms.sourcegitcommit" Value="0d6aa6694f157a08fe52cd25b4d9d3dcf913e812" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="10/12/2018" />
    <Meta Name="ms.locfileid" Value="49143192" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IStackWalk" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStackWalk" />
  <TypeSignature Language="DocId" Value="T:System.Security.IStackWalk" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStackWalk" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStackWalk" />
  <TypeSignature Language="F#" Value="type IStackWalk = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Gerencia a movimentação da pilha que determina se todos os chamadores na pilha de chamadas têm as permissões necessárias para acessar um recurso protegido.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Código parcialmente confiável sempre apresenta um risco à segurança. Às vezes, podem ser manipulado para executar ações em nome de um código mal-intencionado que não tem permissão para acessar um recurso. Dessa forma, o código mal-intencionado pode alcançar mais altos de acesso de segurança que ele deve ser permitido.  
  
 O common language runtime ajuda a proteger o código gerenciado contra esses ataques, executando um exame da pilha em todas as chamadas. A movimentação da pilha exige que todo o código na pilha de chamada tem permissão para acessar um recurso protegido. Como o código que a tentativa de ataque sempre será em algum lugar na pilha de chamadas, ele conseguirá exceder suas próprias permissões de segurança.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public void Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Assert" />
      <MemberSignature Language="VB.NET" Value="Public Sub Assert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Assert();" />
      <MemberSignature Language="F#" Value="abstract member Assert : unit -&gt; unit" Usage="iStackWalk.Assert " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Declara que código de chamada pode acessar o recurso identificado pelo objeto de permissão atual, mesmo que os chamadores na pilha não tenham recebido permissão para acessar o recurso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamar <xref:System.Security.IStackWalk.Assert%2A> interrompe a verificação de permissão de chamadores na pilha de chamadas. Portanto, mesmo se esses chamadores não tiver as permissões necessárias, eles ainda podem acessar recursos. Uma declaração é eficaz somente se o código que chama <xref:System.Security.IStackWalk.Assert%2A> passa na verificação de segurança para a permissão que ele está declarando.  
  
 Uma chamada para <xref:System.Security.IStackWalk.Assert%2A> está em vigor até que o código de chamada retorne para seu chamador ou até que uma chamada subsequente para <xref:System.Security.IStackWalk.Assert%2A> renderiza a declaração anterior ineficaz. Além disso, <xref:System.Security.CodeAccessPermission.RevertAssert%2A> ou <xref:System.Security.CodeAccessPermission.RevertAll%2A> remove um pendente <xref:System.Security.IStackWalk.Assert%2A>.  
  
 <xref:System.Security.IStackWalk.Assert%2A> é ignorado para uma permissão concedida não porque uma demanda para essa permissão não terão êxito. No entanto, se chama código inferior na pilha de chamadas <xref:System.Security.IStackWalk.Demand%2A> para essa permissão, um <xref:System.Security.SecurityException> é gerada quando a movimentação da pilha atinge o código que tentou chamar <xref:System.Security.IStackWalk.Assert%2A>. Isso acontece porque o código chamado <xref:System.Security.IStackWalk.Assert%2A> não recebeu a permissão, mesmo que ele tentou <xref:System.Security.IStackWalk.Assert%2A> -lo.  
  
> [!CAUTION]
>  Uma vez chamando <xref:System.Security.IStackWalk.Assert%2A> remove o requisito de que todo o código na cadeia de chamada deve ter a permissão para acessar o recurso especificado, ele pode abrir vulnerabilidades de segurança se usado incorretamente ou inadequadamente. Portanto, ele deve ser usado com muito cuidado.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">O código de chamada não tem <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />.</exception>
        <related type="Article" href="~/docs/framework/misc/using-the-assert-method.md">Usando o método Assert</related>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Demand();" />
      <MemberSignature Language="F#" Value="abstract member Demand : unit -&gt; unit" Usage="iStackWalk.Demand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Determina em tempo de execução se a permissão especificada pelo objeto de permissão atual foi ou não concedida a todos os chamadores na pilha de chamadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, esse método é usado pelas bibliotecas seguras para garantir que os chamadores tenham permissão para acessar um recurso. Por exemplo, uma classe de arquivo em uma biblioteca de classe seguras chama <xref:System.Security.IStackWalk.Demand%2A> para que o necessário <xref:System.Security.Permissions.FileIOPermission> antes de executar uma operação de arquivo solicitada pelo chamador.  
  
 As permissões do código que chama esse método não são examinadas; a seleção começa do chamador imediato desse código e continua na pilha. <xref:System.Security.IStackWalk.Demand%2A> é bem-sucedido somente se nenhuma <xref:System.Security.SecurityException> é gerado.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Um chamador superior na pilha de chamadas não tem a permissão especificada no objeto de permissão atual.  
  
- ou - 
Um chamador na pilha de chamadas chamou <see cref="M:System.Security.IStackWalk.Deny" /> no objeto de permissão atual.</exception>
      </Docs>
    </Member>
    <Member MemberName="Deny">
      <MemberSignature Language="C#" Value="public void Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Deny" />
      <MemberSignature Language="VB.NET" Value="Public Sub Deny ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Deny();" />
      <MemberSignature Language="F#" Value="abstract member Deny : unit -&gt; unit" Usage="iStackWalk.Deny " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Faz com que cada <see cref="M:System.Security.IStackWalk.Demand" /> para o objeto atual que passa pelo código de chamada falhe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método impede que os chamadores na pilha de chamadas através do código que chama esse método, o acesso ao recurso protegido, mesmo se os chamadores tenham recebidos permissão para acessá-lo. A pilha de chamadas é representada geralmente como crescente para baixo, para que o mais alto na pilha de chamadas de métodos chama métodos inferior na pilha de chamadas.  
  
 <xref:System.Security.IStackWalk.Deny%2A> pode limitar a responsabilidade do programador ou ajudar a evitar vulnerabilidades de segurança acidentais, pois ajuda a impedir que o método que chama <xref:System.Security.IStackWalk.Deny%2A> sejam usados para acessar o recurso protegido pela permissão negada. Se um método chama <xref:System.Security.IStackWalk.Deny%2A> em uma permissão e se um <xref:System.Security.IStackWalk.Demand%2A> para essa permissão é invocada por um chamador inferior na pilha de chamadas, essa verificação de segurança falharão quando ele atinge a <xref:System.Security.IStackWalk.Deny%2A>.  
  
 <xref:System.Security.IStackWalk.Deny%2A> é ignorado para uma permissão concedida não porque uma demanda para essa permissão não terão êxito.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Você não pode substituir esse método.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PermitOnly">
      <MemberSignature Language="C#" Value="public void PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.PermitOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub PermitOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PermitOnly();" />
      <MemberSignature Language="F#" Value="abstract member PermitOnly : unit -&gt; unit" Usage="iStackWalk.PermitOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Faz com que cada <see cref="M:System.Security.IStackWalk.Demand" /> para todos os objetos, com exceção do atual, que passam pelo código de chamada falhe, mesmo se a permissão para acessar outros recursos foi concedida a código superior na pilha de chamadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.IStackWalk.PermitOnly%2A> é semelhante ao <xref:System.Security.IStackWalk.Deny%2A>, em que ambos fazem com que as movimentações de pilha falhe quando eles teria êxito caso contrário. A diferença é que <xref:System.Security.IStackWalk.Deny%2A> Especifica as permissões que fará com que a movimentação da pilha falhe, mas <xref:System.Security.IStackWalk.PermitOnly%2A> Especifica as únicas permissões que não causam a movimentação da pilha falhe. Chame esse método para garantir que seu código pode ser usado para acessar somente os recursos especificados.  
  
 <xref:System.Security.IStackWalk.PermitOnly%2A> é ignorado para uma permissão concedida não porque uma demanda para essa permissão não terão êxito. No entanto, se o código inferior na chamada de pilha mais tarde chamadas <xref:System.Security.IStackWalk.Demand%2A> para essa permissão, um <xref:System.Security.SecurityException> é gerada quando a movimentação da pilha atinge o código que tentou chamar <xref:System.Security.IStackWalk.PermitOnly%2A>. Isso ocorre porque o código chamado <xref:System.Security.IStackWalk.PermitOnly%2A> não recebeu a permissão, mesmo que ele chamado <xref:System.Security.IStackWalk.PermitOnly%2A> para essa permissão. A pilha de chamadas é representada geralmente como crescente para baixo, para que o mais alto na pilha de chamadas de métodos chama métodos inferior na pilha de chamadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>