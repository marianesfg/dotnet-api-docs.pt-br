<Type Name="IStackWalk" FullName="System.Security.IStackWalk">
  <TypeSignature Language="C#" Value="public interface IStackWalk" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStackWalk" />
  <TypeSignature Language="DocId" Value="T:System.Security.IStackWalk" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStackWalk" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStackWalk" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="34502-101">Gerencia a movimentação da pilha que determina se todos os chamadores na pilha de chamadas têm as permissões necessárias para acessar um recurso protegido.</span><span class="sxs-lookup"><span data-stu-id="34502-101">Manages the stack walk that determines whether all callers in the call stack have the required permissions to access a protected resource.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34502-102">Código parcialmente confiável sempre apresenta um risco de segurança.</span><span class="sxs-lookup"><span data-stu-id="34502-102">Partially trusted code always presents a security risk.</span></span> <span data-ttu-id="34502-103">Às vezes, podem ser manipulado para executar ações em nome de um código mal-intencionado que não tem permissão para acessar um recurso.</span><span class="sxs-lookup"><span data-stu-id="34502-103">It can sometimes be manipulated to perform actions on behalf of malicious code that does not have permission to access a resource.</span></span> <span data-ttu-id="34502-104">Dessa forma, o código mal-intencionado pode alcançar maior acesso de segurança que ele deve ter permissão.</span><span class="sxs-lookup"><span data-stu-id="34502-104">In this way, malicious code can achieve higher security access than it should be allowed.</span></span>  
  
 <span data-ttu-id="34502-105">O common language runtime ajuda a proteger o código gerenciado contra esses ataques executando um exame da pilha em todas as chamadas.</span><span class="sxs-lookup"><span data-stu-id="34502-105">The common language runtime helps protect managed code from these attacks by running a stack walk on all calls.</span></span> <span data-ttu-id="34502-106">A movimentação da pilha requer que todo o código na pilha de chamadas tem permissão para acessar um recurso protegido.</span><span class="sxs-lookup"><span data-stu-id="34502-106">The stack walk requires that all code in the call stack has permission to access a protected resource.</span></span> <span data-ttu-id="34502-107">Porque o código de tentativa de ataque sempre será em algum lugar na pilha de chamadas, será possível exceder suas próprias permissões de segurança.</span><span class="sxs-lookup"><span data-stu-id="34502-107">Because the code attempting the attack will always be somewhere in the call stack, it will be unable to exceed its own security permissions.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public void Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Assert" />
      <MemberSignature Language="VB.NET" Value="Public Sub Assert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Assert();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="34502-108">Declara que código de chamada pode acessar o recurso identificado pelo objeto de permissão atual, mesmo que os chamadores na pilha não tenham recebido permissão para acessar o recurso.</span><span class="sxs-lookup"><span data-stu-id="34502-108">Asserts that the calling code can access the resource identified by the current permission object, even if callers higher in the stack have not been granted permission to access the resource.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34502-109">Chamando <xref:System.Security.IStackWalk.Assert%2A> interrompe a verificação de permissão chamadores mais acima na pilha de chamadas.</span><span class="sxs-lookup"><span data-stu-id="34502-109">Calling <xref:System.Security.IStackWalk.Assert%2A> stops the permission check on callers higher in the call stack.</span></span> <span data-ttu-id="34502-110">Portanto, mesmo se esses chamadores não tem as permissões necessárias, eles ainda podem acessar recursos.</span><span class="sxs-lookup"><span data-stu-id="34502-110">Therefore, even if these callers do not have the requisite permissions, they can still access resources.</span></span> <span data-ttu-id="34502-111">Uma asserção é eficaz somente se o código que chama <xref:System.Security.IStackWalk.Assert%2A> passa na verificação de segurança para a permissão que está declarando.</span><span class="sxs-lookup"><span data-stu-id="34502-111">An assertion is effective only if the code that calls <xref:System.Security.IStackWalk.Assert%2A> passes the security check for the permission that it is asserting.</span></span>  
  
 <span data-ttu-id="34502-112">Uma chamada para <xref:System.Security.IStackWalk.Assert%2A> é eficiente, até que o código de chamada retorna ao chamador ou até que uma chamada subsequente para <xref:System.Security.IStackWalk.Assert%2A> renderiza a declaração anterior ineficazes.</span><span class="sxs-lookup"><span data-stu-id="34502-112">A call to <xref:System.Security.IStackWalk.Assert%2A> is effective until the calling code returns to its caller or until a subsequent call to <xref:System.Security.IStackWalk.Assert%2A> renders the previous assertion ineffective.</span></span> <span data-ttu-id="34502-113">Além disso, <xref:System.Security.CodeAccessPermission.RevertAssert%2A> ou <xref:System.Security.CodeAccessPermission.RevertAll%2A> remove um pendente <xref:System.Security.IStackWalk.Assert%2A>.</span><span class="sxs-lookup"><span data-stu-id="34502-113">Also, <xref:System.Security.CodeAccessPermission.RevertAssert%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> removes a pending <xref:System.Security.IStackWalk.Assert%2A>.</span></span>  
  
 <span data-ttu-id="34502-114"><xref:System.Security.IStackWalk.Assert%2A> é ignorado para uma permissão concedida não porque uma solicitação de permissão não terá êxito.</span><span class="sxs-lookup"><span data-stu-id="34502-114"><xref:System.Security.IStackWalk.Assert%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span> <span data-ttu-id="34502-115">No entanto, se inferior na pilha de chamadas de código chama <xref:System.Security.IStackWalk.Demand%2A> para essa permissão, um <xref:System.Security.SecurityException> é gerada quando a movimentação da pilha atinge o código que tentou chamar <xref:System.Security.IStackWalk.Assert%2A>.</span><span class="sxs-lookup"><span data-stu-id="34502-115">However, if code lower on the call stack calls <xref:System.Security.IStackWalk.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.IStackWalk.Assert%2A>.</span></span> <span data-ttu-id="34502-116">Isso ocorre porque o código que chamou <xref:System.Security.IStackWalk.Assert%2A> não recebeu a permissão, mesmo que ele tentou <xref:System.Security.IStackWalk.Assert%2A> -lo.</span><span class="sxs-lookup"><span data-stu-id="34502-116">This happens because the code that called <xref:System.Security.IStackWalk.Assert%2A> has not been granted the permission, even though it tried to <xref:System.Security.IStackWalk.Assert%2A> it.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="34502-117">Como chamar <xref:System.Security.IStackWalk.Assert%2A> remove o requisito de que todos os código da cadeia de chamada deve ter permissão para acessar o recurso especificado, ele pode abrir vulnerabilidades de segurança se usado incorretamente ou inadequadamente.</span><span class="sxs-lookup"><span data-stu-id="34502-117">Because calling <xref:System.Security.IStackWalk.Assert%2A> removes the requirement that all code in the call chain must be granted permission to access the specified resource, it can open up security vulnerabilities if used incorrectly or inappropriately.</span></span> <span data-ttu-id="34502-118">Portanto, ele deve ser usado com cuidado.</span><span class="sxs-lookup"><span data-stu-id="34502-118">Therefore, it should be used with great caution.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="34502-119">O código de chamada não tem <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />.</span><span class="sxs-lookup"><span data-stu-id="34502-119">The calling code does not have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Demand();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="34502-120">Determina em tempo de execução se a permissão especificada pelo objeto de permissão atual foi ou não concedida a todos os chamadores na pilha de chamadas.</span><span class="sxs-lookup"><span data-stu-id="34502-120">Determines at run time whether all callers in the call stack have been granted the permission specified by the current permission object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34502-121">Normalmente, esse método é usado pelas bibliotecas seguras para garantir que os chamadores tem permissão para acessar um recurso.</span><span class="sxs-lookup"><span data-stu-id="34502-121">This method is typically used by secure libraries to ensure that callers have permission to access a resource.</span></span> <span data-ttu-id="34502-122">Por exemplo, uma classe de arquivo em uma biblioteca de classe seguro chama <xref:System.Security.IStackWalk.Demand%2A> para necessários <xref:System.Security.Permissions.FileIOPermission> antes de executar uma operação de arquivo solicitada pelo chamador.</span><span class="sxs-lookup"><span data-stu-id="34502-122">For example, a file class in a secure class library calls <xref:System.Security.IStackWalk.Demand%2A> for the necessary <xref:System.Security.Permissions.FileIOPermission> before performing a file operation requested by the caller.</span></span>  
  
 <span data-ttu-id="34502-123">As permissões do código que chama esse método não são examinadas; a seleção começa o chamador imediato do código e continua na pilha.</span><span class="sxs-lookup"><span data-stu-id="34502-123">The permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack.</span></span> <span data-ttu-id="34502-124"><xref:System.Security.IStackWalk.Demand%2A> é realizada somente se nenhuma <xref:System.Security.SecurityException> é gerado.</span><span class="sxs-lookup"><span data-stu-id="34502-124"><xref:System.Security.IStackWalk.Demand%2A> succeeds only if no <xref:System.Security.SecurityException> is raised.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="34502-125">Um chamador superior na pilha de chamadas não tem a permissão especificada no objeto de permissão atual.</span><span class="sxs-lookup"><span data-stu-id="34502-125">A caller higher in the call stack does not have the permission specified by the current permission object.</span></span>  
  
 <span data-ttu-id="34502-126">- ou -</span><span class="sxs-lookup"><span data-stu-id="34502-126">-or-</span></span>  
  
 <span data-ttu-id="34502-127">Um chamador na pilha de chamadas chamou <see cref="M:System.Security.IStackWalk.Deny" /> no objeto de permissão atual.</span><span class="sxs-lookup"><span data-stu-id="34502-127">A caller in the call stack has called <see cref="M:System.Security.IStackWalk.Deny" /> on the current permission object.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deny">
      <MemberSignature Language="C#" Value="public void Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Deny" />
      <MemberSignature Language="VB.NET" Value="Public Sub Deny ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Deny();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="34502-128">Faz com que cada <see cref="M:System.Security.IStackWalk.Demand" /> para o objeto atual que passa pelo código de chamada falhe.</span><span class="sxs-lookup"><span data-stu-id="34502-128">Causes every <see cref="M:System.Security.IStackWalk.Demand" /> for the current object that passes through the calling code to fail.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34502-129">Esse método impede que os chamadores mais acima na pilha de chamadas acessando o recurso protegido por meio do código que chama esse método, mesmo que os chamadores tiverem permissão para acessá-lo.</span><span class="sxs-lookup"><span data-stu-id="34502-129">This method prevents callers higher in the call stack from accessing the protected resource through the code that calls this method, even if those callers have been granted permission to access it.</span></span> <span data-ttu-id="34502-130">A pilha de chamadas é representada geralmente como crescimento para baixo, para que os métodos superiores na pilha de chamadas chamam métodos inferior na pilha de chamadas.</span><span class="sxs-lookup"><span data-stu-id="34502-130">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span>  
  
 <span data-ttu-id="34502-131"><xref:System.Security.IStackWalk.Deny%2A> pode limitar a responsabilidade do programador ou ajudar a evitar vulnerabilidades de segurança acidental, pois ajuda a impedir que o método que chama <xref:System.Security.IStackWalk.Deny%2A> seja usado para acessar o recurso protegido pela permissão negada.</span><span class="sxs-lookup"><span data-stu-id="34502-131"><xref:System.Security.IStackWalk.Deny%2A> can limit the liability of the programmer or help prevent accidental security vulnerabilities because it helps prevent the method that calls <xref:System.Security.IStackWalk.Deny%2A> from being used to access the resource protected by the denied permission.</span></span> <span data-ttu-id="34502-132">Se chama um método <xref:System.Security.IStackWalk.Deny%2A> em uma permissão e se um <xref:System.Security.IStackWalk.Demand%2A> para essa permissão é invocado por um chamador inferior na pilha de chamadas, essa verificação de segurança falharão quando atingir o <xref:System.Security.IStackWalk.Deny%2A>.</span><span class="sxs-lookup"><span data-stu-id="34502-132">If a method calls <xref:System.Security.IStackWalk.Deny%2A> on a permission, and if a <xref:System.Security.IStackWalk.Demand%2A> for that permission is invoked by a caller lower in the call stack, that security check will fail when it reaches the <xref:System.Security.IStackWalk.Deny%2A>.</span></span>  
  
 <span data-ttu-id="34502-133"><xref:System.Security.IStackWalk.Deny%2A> é ignorado para uma permissão concedida não porque uma solicitação de permissão não terá êxito.</span><span class="sxs-lookup"><span data-stu-id="34502-133"><xref:System.Security.IStackWalk.Deny%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="34502-134">Você não pode substituir esse método.</span><span class="sxs-lookup"><span data-stu-id="34502-134">You cannot override this method.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PermitOnly">
      <MemberSignature Language="C#" Value="public void PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.PermitOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub PermitOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PermitOnly();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="34502-135">Faz com que cada <see cref="M:System.Security.IStackWalk.Demand" /> para todos os objetos, com exceção do atual, que passam pelo código de chamada falhe, mesmo se a permissão para acessar outros recursos foi concedida a código superior na pilha de chamadas.</span><span class="sxs-lookup"><span data-stu-id="34502-135">Causes every <see cref="M:System.Security.IStackWalk.Demand" /> for all objects except the current one that passes through the calling code to fail, even if code higher in the call stack has been granted permission to access other resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34502-136"><xref:System.Security.IStackWalk.PermitOnly%2A> é semelhante ao <xref:System.Security.IStackWalk.Deny%2A>, ambos causam movimentações de pilha falhe quando eles conseguirão caso contrário.</span><span class="sxs-lookup"><span data-stu-id="34502-136"><xref:System.Security.IStackWalk.PermitOnly%2A> is similar to <xref:System.Security.IStackWalk.Deny%2A>, in that both cause stack walks to fail when they would otherwise succeed.</span></span> <span data-ttu-id="34502-137">A diferença é que <xref:System.Security.IStackWalk.Deny%2A> Especifica as permissões que fará com que a movimentação da pilha falhe, mas <xref:System.Security.IStackWalk.PermitOnly%2A> Especifica as permissões somente que fazem com que a movimentação da pilha falha.</span><span class="sxs-lookup"><span data-stu-id="34502-137">The difference is that <xref:System.Security.IStackWalk.Deny%2A> specifies permissions that will cause the stack walk to fail, but <xref:System.Security.IStackWalk.PermitOnly%2A> specifies the only permissions that do not cause the stack walk to fail.</span></span> <span data-ttu-id="34502-138">Chame este método para garantir que seu código pode ser usado para acessar somente os recursos especificados.</span><span class="sxs-lookup"><span data-stu-id="34502-138">Call this method to ensure that your code can be used to access only the specified resources.</span></span>  
  
 <span data-ttu-id="34502-139"><xref:System.Security.IStackWalk.PermitOnly%2A> é ignorado para uma permissão concedida não porque uma solicitação de permissão não terá êxito.</span><span class="sxs-lookup"><span data-stu-id="34502-139"><xref:System.Security.IStackWalk.PermitOnly%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span> <span data-ttu-id="34502-140">No entanto, se o código inferior na chamada de pilha mais tarde chamadas <xref:System.Security.IStackWalk.Demand%2A> para essa permissão, um <xref:System.Security.SecurityException> é gerada quando a movimentação da pilha atinge o código que tentou chamar <xref:System.Security.IStackWalk.PermitOnly%2A>.</span><span class="sxs-lookup"><span data-stu-id="34502-140">However, if code lower on the call stack later calls <xref:System.Security.IStackWalk.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.IStackWalk.PermitOnly%2A>.</span></span> <span data-ttu-id="34502-141">Isso ocorre porque o código chamado <xref:System.Security.IStackWalk.PermitOnly%2A> não recebeu a permissão, mesmo que ela chamou <xref:System.Security.IStackWalk.PermitOnly%2A> para essa permissão.</span><span class="sxs-lookup"><span data-stu-id="34502-141">This is because the code that called <xref:System.Security.IStackWalk.PermitOnly%2A> has not been granted the permission, even though it called <xref:System.Security.IStackWalk.PermitOnly%2A> for that permission.</span></span> <span data-ttu-id="34502-142">A pilha de chamadas é representada geralmente como crescimento para baixo, para que os métodos superiores na pilha de chamadas chamam métodos inferior na pilha de chamadas.</span><span class="sxs-lookup"><span data-stu-id="34502-142">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>