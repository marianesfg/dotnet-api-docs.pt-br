<Type Name="Extensions" FullName="System.Xml.Schema.Extensions">
  <TypeSignature Language="C#" Value="public static class Extensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Extensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Schema.Extensions" />
  <TypeSignature Language="VB.NET" Value="Public Module Extensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class Extensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="549aa-101">Essa classe contém os métodos de extensão LINQ para XML para validação de XSD.</span><span class="sxs-lookup"><span data-stu-id="549aa-101">This class contains the LINQ to XML extension methods for XSD validation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="549aa-102">Essa classe também contém métodos para obter infoset post-schema-validação (psvi POST) de um nó XML validado.</span><span class="sxs-lookup"><span data-stu-id="549aa-102">This class also contains methods to get the post-schema-validation infoset (PSVI) of a validated XML node.</span></span>  
  
 <span data-ttu-id="549aa-103">Quando você validar um <xref:System.Xml.Linq.XDocument>, <xref:System.Xml.Linq.XElement>, ou <xref:System.Xml.Linq.XAttribute>, você também pode preencher a árvore XML com o infoset post-schema a validação.</span><span class="sxs-lookup"><span data-stu-id="549aa-103">When you validate an <xref:System.Xml.Linq.XDocument>, <xref:System.Xml.Linq.XElement>, or <xref:System.Xml.Linq.XAttribute>, you can also optionally populate the XML tree with the post-schema-validation infoset.</span></span> <span data-ttu-id="549aa-104">Informações de psvi POST são adicionadas como uma anotação de tipo <xref:System.Xml.Schema.XmlSchemaInfo?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="549aa-104">PSVI information is added as an annotation of type <xref:System.Xml.Schema.XmlSchemaInfo?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="549aa-105">O XSD em [arquivo XSD de exemplo: clientes e pedidos](http://msdn.microsoft.com/library/8b05efe3-cc5e-4c7b-b322-892dbda41687) contém um esquema que pode ser usado para validar o documento XML [arquivo XML de exemplo: clientes e pedidos (LINQ para XML)](http://msdn.microsoft.com/library/26790c41-5976-4558-a096-d0f67bfc4d92).</span><span class="sxs-lookup"><span data-stu-id="549aa-105">The XSD in [Sample XSD File: Customers and Orders](http://msdn.microsoft.com/library/8b05efe3-cc5e-4c7b-b322-892dbda41687) contains a schema that can be used to validate the XML document in [Sample XML File: Customers and Orders (LINQ to XML)](http://msdn.microsoft.com/library/26790c41-5976-4558-a096-d0f67bfc4d92).</span></span> <span data-ttu-id="549aa-106">O exemplo a seguir carrega o esquema e o documento, valida o documento, o documento é alterado para que o `xs:key` e `xs:keyref` relação não é válida e, em seguida, tenta validar novamente.</span><span class="sxs-lookup"><span data-stu-id="549aa-106">The following example loads the schema and the document, validates the document, changes the document so that the `xs:key` and `xs:keyref` relationship is not valid, and then attempts to validate again.</span></span>  
  
```csharp  
  
                XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", "CustomersOrders.xsd");  
  
XDocument custOrd = XDocument.Load("CustomersOrders.xml");  
  
Console.WriteLine("Validating custOrd");  
bool errors = false;  
custOrd.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     });  
Console.WriteLine("custOrd {0}", errors ? "did not validate" : "validated");  
  
// Modify the custOrd tree so that it is no longer valid.  
custOrd.Root.Element("Orders").Element("Order").Element("CustomerID").Value = "AAAAA";  
  
Console.WriteLine();  
Console.WriteLine("Validating custOrd");  
errors = false;  
custOrd.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     });  
Console.WriteLine("custOrd {0}", errors ? "did not validate" : "validated");  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", "CustomersOrders.xsd")  
  
    Console.WriteLine("Validating custOrd")  
    Dim custOrd As XDocument = XDocument.Load("CustomersOrders.xml")  
    errors = False  
    custOrd.Validate(schemas, AddressOf XSDErrors)  
    Console.WriteLine("custOrd {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating custOrd")  
    ' Modify the source document so that it will not validate.  
    custOrd.Root.Element("Orders").Element("Order").Element("CustomerID").Value = "AAAAA"  
    errors = False  
    custOrd.Validate(schemas, AddressOf XSDErrors)  
    Console.WriteLine("custOrd {0}", IIf(errors, "did not validate", "validated"))  
End Sub  
```  
  
 <span data-ttu-id="549aa-107">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="549aa-107">This example produces the following output:</span></span>  
  
```  
Validating custOrd  
custOrd validated  
  
Validating custOrd  
The key sequence 'AAAAA' in Keyref fails to refer to some key.  
custOrd did not validate  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetSchemaInfo">
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="549aa-108">Obtém o PSVI (infoset de validação pós-esquema) de um nó validado.</span><span class="sxs-lookup"><span data-stu-id="549aa-108">Gets the post-schema-validation infoset (PSVI) of a validated node.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="549aa-109">Após validar um <xref:System.Xml.Linq.XDocument>, você pode recuperar infoset post-schema de validação para um <xref:System.Xml.Linq.XElement> ou <xref:System.Xml.Linq.XAttribute> que está contida no documento.</span><span class="sxs-lookup"><span data-stu-id="549aa-109">After you have validated an <xref:System.Xml.Linq.XDocument>, you can retrieve the post-schema-validation infoset for an <xref:System.Xml.Linq.XElement> or <xref:System.Xml.Linq.XAttribute> that is contained in the document.</span></span>  
  
 <span data-ttu-id="549aa-110">Depois de recuperar o <xref:System.Xml.Schema.IXmlSchemaInfo> do objeto, você pode usar o <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A> ou <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A> propriedades para obter um tipo de validação parcial (<xref:System.Xml.Schema.XmlSchemaElement> ou <xref:System.Xml.Schema.XmlSchemaAttribute>).</span><span class="sxs-lookup"><span data-stu-id="549aa-110">After retrieving the <xref:System.Xml.Schema.IXmlSchemaInfo> object, you can use the <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A> or <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A> properties to get a partial validation type (<xref:System.Xml.Schema.XmlSchemaElement> or <xref:System.Xml.Schema.XmlSchemaAttribute>).</span></span> <span data-ttu-id="549aa-111">Você pode usar os tipos de validação parcial para validar um atributo ou uma subárvore.</span><span class="sxs-lookup"><span data-stu-id="549aa-111">You can use the partial validation types to validate an attribute or a sub-tree.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSchemaInfo">
      <MemberSignature Language="C#" Value="public static System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo (this System.Xml.Linq.XAttribute source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo(class System.Xml.Linq.XAttribute source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XAttribute)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSchemaInfo (source As XAttribute) As IXmlSchemaInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Xml::Schema::IXmlSchemaInfo ^ GetSchemaInfo(System::Xml::Linq::XAttribute ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.IXmlSchemaInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XAttribute" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="549aa-112">Um <see cref="T:System.Xml.Linq.XAttribute" /> que foi validado anteriormente.</span><span class="sxs-lookup"><span data-stu-id="549aa-112">An <see cref="T:System.Xml.Linq.XAttribute" /> that has been previously validated.</span></span></param>
        <summary><span data-ttu-id="549aa-113">Obtém o PSVI (infoset de validação pós-esquema) de um atributo validado.</span><span class="sxs-lookup"><span data-stu-id="549aa-113">Gets the post-schema-validation infoset (PSVI) of a validated attribute.</span></span></summary>
        <returns><span data-ttu-id="549aa-114">Um <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> que contém o infoset de validação pós-esquema para um <see cref="T:System.Xml.Linq.XAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="549aa-114">A <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> that contains the post-schema-validation infoset for an <see cref="T:System.Xml.Linq.XAttribute" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="549aa-115">Você pode usar o <xref:System.Xml.Schema.IXmlSchemaInfo> retornado por esse método para determinar a certas características de um atributo validado.</span><span class="sxs-lookup"><span data-stu-id="549aa-115">You can use the <xref:System.Xml.Schema.IXmlSchemaInfo> returned by this method to determine certain characteristics of a validated attribute.</span></span> <span data-ttu-id="549aa-116">Por exemplo, você pode determinar se o atributo veio de um valor de atributo padrão em XSD.</span><span class="sxs-lookup"><span data-stu-id="549aa-116">For example, you can determine if the attribute came from a default attribute value in an XSD.</span></span>  
  
 <span data-ttu-id="549aa-117">Você usa o <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A> propriedade para obter um tipo de validação parcial (<xref:System.Xml.Schema.XmlSchemaAttribute>).</span><span class="sxs-lookup"><span data-stu-id="549aa-117">You use the <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A> property to get a partial validation type (<xref:System.Xml.Schema.XmlSchemaAttribute>).</span></span> <span data-ttu-id="549aa-118">Você pode usá-lo para revalidar um atributo sem validar um documento inteiro.</span><span class="sxs-lookup"><span data-stu-id="549aa-118">You can use it to revalidate an attribute without validating an entire document.</span></span>  
  
 <span data-ttu-id="549aa-119">Para obter um exemplo dessa propriedade, consulte <xref:System.Xml.Schema.Extensions.Validate%2A>.</span><span class="sxs-lookup"><span data-stu-id="549aa-119">For an example of this property, see <xref:System.Xml.Schema.Extensions.Validate%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaInfo">
      <MemberSignature Language="C#" Value="public static System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo (this System.Xml.Linq.XElement source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo(class System.Xml.Linq.XElement source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XElement)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSchemaInfo (source As XElement) As IXmlSchemaInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Xml::Schema::IXmlSchemaInfo ^ GetSchemaInfo(System::Xml::Linq::XElement ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.IXmlSchemaInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XElement" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="549aa-120">Um <see cref="T:System.Xml.Linq.XElement" /> que foi validado anteriormente.</span><span class="sxs-lookup"><span data-stu-id="549aa-120">An <see cref="T:System.Xml.Linq.XElement" /> that has been previously validated.</span></span></param>
        <summary><span data-ttu-id="549aa-121">Obtém o PSVI (post-schema-validation infoset) de um elemento validado.</span><span class="sxs-lookup"><span data-stu-id="549aa-121">Gets the post-schema-validation infoset (PSVI) of a validated element.</span></span></summary>
        <returns><span data-ttu-id="549aa-122">Uma <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> que contém o PSVI (post-schema-validation infoset) para um <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="549aa-122">A <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> that contains the post-schema-validation infoset (PSVI) for an <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="549aa-123">Você pode usar o <xref:System.Xml.Schema.IXmlSchemaInfo> retornado por esse método para determinar a certas características de um elemento validado.</span><span class="sxs-lookup"><span data-stu-id="549aa-123">You can use the <xref:System.Xml.Schema.IXmlSchemaInfo> returned by this method to determine certain characteristics of a validated element.</span></span> <span data-ttu-id="549aa-124">Por exemplo, você pode determinar o tipo de esquema dinâmico do elemento.</span><span class="sxs-lookup"><span data-stu-id="549aa-124">For example, you can determine the dynamic schema type of the element.</span></span>  
  
 <span data-ttu-id="549aa-125">Você usa o <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A> propriedade para obter um tipo de validação parcial (<xref:System.Xml.Schema.XmlSchemaElement>).</span><span class="sxs-lookup"><span data-stu-id="549aa-125">You use the <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A> property to get a partial validation type (<xref:System.Xml.Schema.XmlSchemaElement>).</span></span> <span data-ttu-id="549aa-126">Você pode usá-lo para revalidar uma subárvore com um elemento na raiz sem validar um documento inteiro.</span><span class="sxs-lookup"><span data-stu-id="549aa-126">You can use it to revalidate a sub-tree with an element at its root without validating an entire document.</span></span>  
  
 <span data-ttu-id="549aa-127">Para obter um exemplo dessa propriedade, consulte <xref:System.Xml.Schema.Extensions.Validate%2A>.</span><span class="sxs-lookup"><span data-stu-id="549aa-127">For an example of this property, see <xref:System.Xml.Schema.Extensions.Validate%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="549aa-128">O exemplo a seguir preenche a árvore com um psvi POST.</span><span class="sxs-lookup"><span data-stu-id="549aa-128">The following example populates the tree with a PSVI.</span></span> <span data-ttu-id="549aa-129">Após a validação, imprime todos os elementos e atributos na árvore que são inválidos de acordo com a psvi POST.</span><span class="sxs-lookup"><span data-stu-id="549aa-129">After validation, it prints all elements and attributes in the tree that are invalid according to the PSVI.</span></span>  
  
```csharp  
  
                static void DumpInvalidNodes(XElement el)  
{  
    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
        Console.WriteLine("Invalid Element {0}",  
            el.AncestorsAndSelf()  
            .InDocumentOrder()  
            .Aggregate("", (s, i) => s + "/" + i.Name.ToString()));  
    foreach (XAttribute att in el.Attributes())  
        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
            Console.WriteLine("Invalid Attribute {0}",  
                att  
                .Parent  
                .AncestorsAndSelf()  
                .InDocumentOrder()  
                .Aggregate("",  
                    (s, i) => s + "/" + i.Name.ToString()) + "/@" + att.Name.ToString()  
                );  
    foreach (XElement child in el.Elements())  
        DumpInvalidNodes(child);  
}  
  
static void Main(string[] args)  
{  
    string xsdMarkup =  
         @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
   <xsd:simpleType name='GCType'>  
    <xsd:restriction base='xsd:token'>  
     <xsd:enumeration value='AAA'/>  
     <xsd:enumeration value='BBB'/>  
    </xsd:restriction>  
   </xsd:simpleType>  
   <xsd:element name='Root'>  
    <xsd:complexType>  
     <xsd:sequence>  
      <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
       <xsd:complexType>  
        <xsd:sequence>  
         <xsd:element name='GrandChild1' type='GCType'/>  
         <xsd:element name='GrandChild2' type='GCType'/>  
         <xsd:element name='GrandChild3' type='GCType'/>  
        </xsd:sequence>  
       </xsd:complexType>  
      </xsd:element>  
     </xsd:sequence>  
    </xsd:complexType>  
   </xsd:element>  
  </xsd:schema>";  
  
    XmlSchemaSet schemas = new XmlSchemaSet();  
    schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
    XDocument doc1 = new XDocument(  
        new XElement("Root",  
            new XElement("Child1",  
                new XElement("GrandChild1", "AAA"),  
                new XElement("GrandChild2", "ZZZ"),  
                new XElement("GrandChild3", "ZZZ")  
            )  
        )  
    );  
  
    Console.WriteLine("Validating doc1 ...");  
    bool errors = false;  
    doc1.Validate(schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
    Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
    DumpInvalidNodes(doc1.Root);  
}  
```  
  
```vb  
  
                Private Sub DumpInvalidNodes(ByVal el As XElement)  
    If el.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
        Console.WriteLine("Invalid Element {0}", _  
            el _  
            .AncestorsAndSelf _  
            .InDocumentOrder() _  
            .Aggregate("", _  
                Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()))  
    End If  
    For Each att As XAttribute In el.Attributes()  
        If att.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
            Console.WriteLine("Invalid Attribute {0}", _  
                att _  
                .Parent _  
                .AncestorsAndSelf() _  
                .InDocumentOrder() _  
                .Aggregate("", _  
                    Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()) + _  
                    "/@" + att.Name.ToString())  
        End If  
    Next  
    For Each child As XElement In el.Elements()  
        DumpInvalidNodes(child)  
    Next  
End Sub  
  
Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
    <?xml version='1.0'?>  
    <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
        <xsd:simpleType name='GCType'>  
            <xsd:restriction base='xsd:token'>  
                <xsd:enumeration value='AAA'/>  
                <xsd:enumeration value='BBB'/>  
            </xsd:restriction>  
        </xsd:simpleType>  
        <xsd:element name='Root'>  
            <xsd:complexType>  
                <xsd:sequence>  
                    <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
                        <xsd:complexType>  
                            <xsd:sequence>  
                                <xsd:element name='GrandChild1' type='GCType'/>  
                                <xsd:element name='GrandChild2' type='GCType'/>  
                                <xsd:element name='GrandChild3' type='GCType'/>  
                            </xsd:sequence>  
                        </xsd:complexType>  
                    </xsd:element>  
                </xsd:sequence>  
            </xsd:complexType>  
        </xsd:element>  
    </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = _  
    <?xml version='1.0'?>  
    <Root>  
        <Child1>  
            <GrandChild1>AAA</GrandChild1>  
            <GrandChild2>ZZZ</GrandChild2>  
            <GrandChild3>ZZZ</GrandChild3>  
        </Child1>  
    </Root>  
  
    Console.WriteLine("Validating doc1 ...")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
    DumpInvalidNodes(doc1.Root)  
End Sub  
```  
  
 <span data-ttu-id="549aa-130">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="549aa-130">This example produces the following output:</span></span>  
  
```  
Validating doc1 ...  
The 'GrandChild2' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  
The 'GrandChild3' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  
doc1 did not validate  
Invalid Element /Root  
Invalid Element /Root/Child1  
Invalid Element /Root/Child1/GrandChild2  
Invalid Element /Root/Child1/GrandChild3  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Validate">
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="549aa-131">Valida se um <see cref="T:System.Xml.Linq.XDocument" />, um <see cref="T:System.Xml.Linq.XElement" /> ou um <see cref="T:System.Xml.Linq.XAttribute" /> está em conformidade com um XSD em um <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span><span class="sxs-lookup"><span data-stu-id="549aa-131">Validates that an <see cref="T:System.Xml.Linq.XDocument" />, an <see cref="T:System.Xml.Linq.XElement" />, or an <see cref="T:System.Xml.Linq.XAttribute" /> conforms to an XSD in an <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="549aa-132">Esses métodos usam um subjacente <xref:System.Xml.XmlReader> para validar a árvore XML em relação a um XSD.</span><span class="sxs-lookup"><span data-stu-id="549aa-132">These methods use an underlying <xref:System.Xml.XmlReader> to validate the XML tree against an XSD.</span></span>  
  
 <span data-ttu-id="549aa-133">Erro de validação e mensagens de aviso são tratadas usando a <xref:System.Xml.Schema.ValidationEventHandler> delegate.</span><span class="sxs-lookup"><span data-stu-id="549aa-133">Validation error and warning messages are handled using the <xref:System.Xml.Schema.ValidationEventHandler> delegate.</span></span> <span data-ttu-id="549aa-134">Se nenhum manipulador de eventos é fornecido para esses métodos, erros de validação são expostos como um <xref:System.Xml.Schema.XmlSchemaValidationException>.</span><span class="sxs-lookup"><span data-stu-id="549aa-134">If no event handler is provided to these methods, validation errors are exposed as an <xref:System.Xml.Schema.XmlSchemaValidationException>.</span></span> <span data-ttu-id="549aa-135">Avisos de validação não causam uma <xref:System.Xml.Schema.XmlSchemaValidationException> seja gerada.</span><span class="sxs-lookup"><span data-stu-id="549aa-135">Validation warnings do not cause an <xref:System.Xml.Schema.XmlSchemaValidationException> to be thrown.</span></span>  
  
 <span data-ttu-id="549aa-136">Alguns desses métodos de extensão, opcionalmente, permitem que a população do infoset post-schema-validação (psvi POST).</span><span class="sxs-lookup"><span data-stu-id="549aa-136">Some of these extension methods optionally allow population of the post-schema-validation infoset (PSVI).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XDocument source, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XDocument source, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XDocument ^ source, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XDocument" RefType="this" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="549aa-137">O <see cref="T:System.Xml.Linq.XDocument" /> a ser validado.</span><span class="sxs-lookup"><span data-stu-id="549aa-137">The <see cref="T:System.Xml.Linq.XDocument" /> to validate.</span></span></param>
        <param name="schemas"><span data-ttu-id="549aa-138">Um <see cref="T:System.Xml.Schema.XmlSchemaSet" /> em relação ao qual validar.</span><span class="sxs-lookup"><span data-stu-id="549aa-138">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span></span></param>
        <param name="validationEventHandler"><span data-ttu-id="549aa-139">Um <see cref="T:System.Xml.Schema.ValidationEventHandler" /> para um evento que ocorre quando o leitor encontra erros de validação.</span><span class="sxs-lookup"><span data-stu-id="549aa-139">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span></span> <span data-ttu-id="549aa-140">Se <see langword="null" />, gera uma exceção nos erros de validação.</span><span class="sxs-lookup"><span data-stu-id="549aa-140">If <see langword="null" />, throws an exception upon validation errors.</span></span></param>
        <summary><span data-ttu-id="549aa-141">Esse método valida se um <see cref="T:System.Xml.Linq.XDocument" /> está em conformidade com um XSD em um <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span><span class="sxs-lookup"><span data-stu-id="549aa-141">This method validates that an <see cref="T:System.Xml.Linq.XDocument" /> conforms to an XSD in an <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="549aa-142">Esse método de extensão valida que o <xref:System.Xml.Linq.XDocument> está de acordo com o modelo de conteúdo de esquema em <xref:System.Xml.Schema.XmlSchemaSet>.</span><span class="sxs-lookup"><span data-stu-id="549aa-142">This extension method validates that the <xref:System.Xml.Linq.XDocument> conforms to the schema content model in <xref:System.Xml.Schema.XmlSchemaSet>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="549aa-143">O exemplo a seguir cria um <xref:System.Xml.Schema.XmlSchemaSet> e, em seguida, valida dois objetos <xref:System.Xml.Linq.XDocument> no conjunto de esquemas.</span><span class="sxs-lookup"><span data-stu-id="549aa-143">The following example creates an <xref:System.Xml.Schema.XmlSchemaSet>, then validates two <xref:System.Xml.Linq.XDocument> objects against the schema set.</span></span> <span data-ttu-id="549aa-144">Um dos documentos é válido, o outro não.</span><span class="sxs-lookup"><span data-stu-id="549aa-144">One of the documents is valid, the other is not.</span></span>  
  
```csharp  
  
                string xsdMarkup =  
    @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:sequence>  
          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
          <xsd:element name='Child2' minOccurs='1' maxOccurs='1'/>  
         </xsd:sequence>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
XDocument doc1 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "content1"),  
        new XElement("Child2", "content1")  
    )  
);  
  
XDocument doc2 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "content1"),  
        new XElement("Child3", "content1")  
    )  
);  
  
Console.WriteLine("Validating doc1");  
bool errors = false;  
doc1.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     });  
Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Validating doc2");  
errors = false;  
doc2.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     });  
Console.WriteLine("doc2 {0}", errors ? "did not validate" : "validated");  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
    <?xml version='1.0'?>  
    <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
        <xsd:element name='Root'>  
            <xsd:complexType>  
                <xsd:sequence>  
                    <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
                    <xsd:element name='Child2' minOccurs='1' maxOccurs='1'/>  
                </xsd:sequence>  
            </xsd:complexType>  
        </xsd:element>  
    </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = _  
    <?xml version='1.0'?>  
    <Root>  
        <Child1>content1</Child1>  
        <Child2>content2</Child2>  
    </Root>  
  
    Dim doc2 As XDocument = _  
    <?xml version='1.0'?>  
    <Root>  
        <Child1>content1</Child1>  
        <Child3>content1</Child3>  
    </Root>  
  
    Console.WriteLine("Validating doc1")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating doc2")  
    errors = False  
    doc2.Validate(schemas, AddressOf XSDErrors)  
    Console.WriteLine("doc2 {0}", IIf(errors, "did not validate", "validated"))  
End Sub  
```  
  
 <span data-ttu-id="549aa-145">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="549aa-145">This example produces the following output:</span></span>  
  
```  
Validating doc1  
doc1 validated  
  
Validating doc2  
The element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  
doc2 did not validate  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><span data-ttu-id="549aa-146">Gerado para erros de validação de XSD (linguagem de definição de esquema XML).</span><span class="sxs-lookup"><span data-stu-id="549aa-146">Thrown for XML Schema Definition Language (XSD) validation errors.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XAttribute source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XAttribute source, class System.Xml.Schema.XmlSchemaObject partialValidationType, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XAttribute ^ source, System::Xml::Schema::XmlSchemaObject ^ partialValidationType, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XAttribute" RefType="this" />
        <Parameter Name="partialValidationType" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="549aa-147">O <see cref="T:System.Xml.Linq.XAttribute" /> a ser validado.</span><span class="sxs-lookup"><span data-stu-id="549aa-147">The <see cref="T:System.Xml.Linq.XAttribute" /> to validate.</span></span></param>
        <param name="partialValidationType"><span data-ttu-id="549aa-148">Um <see cref="T:System.Xml.Schema.XmlSchemaObject" /> que especifica a subárvore a ser validada.</span><span class="sxs-lookup"><span data-stu-id="549aa-148">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that specifies the sub-tree to validate.</span></span></param>
        <param name="schemas"><span data-ttu-id="549aa-149">Um <see cref="T:System.Xml.Schema.XmlSchemaSet" /> em relação ao qual validar.</span><span class="sxs-lookup"><span data-stu-id="549aa-149">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span></span></param>
        <param name="validationEventHandler"><span data-ttu-id="549aa-150">Um <see cref="T:System.Xml.Schema.ValidationEventHandler" /> para um evento que ocorre quando o leitor encontra erros de validação.</span><span class="sxs-lookup"><span data-stu-id="549aa-150">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span></span> <span data-ttu-id="549aa-151">Se <see langword="null" />, gera uma exceção nos erros de validação.</span><span class="sxs-lookup"><span data-stu-id="549aa-151">If <see langword="null" />, throws an exception upon validation errors.</span></span></param>
        <summary><span data-ttu-id="549aa-152">Esse método valida que um <see cref="T:System.Xml.Linq.XAttribute" /> está em conformidade com um <see cref="T:System.Xml.Schema.XmlSchemaObject" /> e um <see cref="T:System.Xml.Schema.XmlSchemaSet" /> especificados.</span><span class="sxs-lookup"><span data-stu-id="549aa-152">This method validates that an <see cref="T:System.Xml.Linq.XAttribute" /> conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> and an <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="549aa-153">Você pode usar esse método para validar que um <xref:System.Xml.Linq.XAttribute> está em conformidade com um esquema.</span><span class="sxs-lookup"><span data-stu-id="549aa-153">You can use this method to validate that an <xref:System.Xml.Linq.XAttribute> conforms to a schema.</span></span> <span data-ttu-id="549aa-154">Você normalmente usa esse método quando você modificou um atributo, e você deseja certificar-se de que ainda está de acordo com seu esquema.</span><span class="sxs-lookup"><span data-stu-id="549aa-154">You typically use this method when you have modified an attribute, and you want to make sure that it still conforms to its schema.</span></span> <span data-ttu-id="549aa-155">Você pode validar o documento inteiro, mas leva menos tempo de processamento para validar apenas o atributo.</span><span class="sxs-lookup"><span data-stu-id="549aa-155">You could validate the entire document, but it takes less processing time to validate just the attribute.</span></span>  
  
 <span data-ttu-id="549aa-156">Se você passar `null` para `validationEventHandler`, esse método gerará uma exceção após erros de validação.</span><span class="sxs-lookup"><span data-stu-id="549aa-156">If you pass `null` for `validationEventHandler`, this method raises an exception upon validation errors.</span></span> <span data-ttu-id="549aa-157">Avisos de validação não gerará uma exceção.</span><span class="sxs-lookup"><span data-stu-id="549aa-157">Validation warnings will not raise an exception.</span></span>  
  
 <span data-ttu-id="549aa-158">Para validar um atributo, você pode usar uma instância de <xref:System.Xml.Schema.XmlSchemaObject>.</span><span class="sxs-lookup"><span data-stu-id="549aa-158">To validate an attribute, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>.</span></span> <span data-ttu-id="549aa-159">Você pode obter essa instância de várias maneiras.</span><span class="sxs-lookup"><span data-stu-id="549aa-159">You can obtain this instance in various ways.</span></span> <span data-ttu-id="549aa-160">Uma maneira fácil é da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="549aa-160">An easy way is as follows:</span></span>  
  
1.  <span data-ttu-id="549aa-161">Valide que um documento está de acordo com um esquema.</span><span class="sxs-lookup"><span data-stu-id="549aa-161">Validate that a document conforms to a schema.</span></span>  
  
2.  <span data-ttu-id="549aa-162">Adicionar validação post-schema infoset (psvi POST) ao chamar o <xref:System.Xml.Schema.Extensions.Validate%2A> método de extensão.</span><span class="sxs-lookup"><span data-stu-id="549aa-162">Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.</span></span>  
  
3.  <span data-ttu-id="549aa-163">Chamar o <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> método de extensão para recuperar um objeto que implementa <xref:System.Xml.Schema.IXmlSchemaInfo>.</span><span class="sxs-lookup"><span data-stu-id="549aa-163">Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>.</span></span> <span data-ttu-id="549aa-164">O objeto recuperado, você pode obter um <xref:System.Xml.Schema.XmlSchemaObject>.</span><span class="sxs-lookup"><span data-stu-id="549aa-164">From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.</span></span>  
  
    -   <span data-ttu-id="549aa-165">Se você receber um <xref:System.Xml.Schema.XmlSchemaObject> para um <xref:System.Xml.Linq.XElement>, o tipo será <xref:System.Xml.Schema.XmlSchemaElement>.</span><span class="sxs-lookup"><span data-stu-id="549aa-165">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.</span></span>  
  
    -   <span data-ttu-id="549aa-166">Se você receber um <xref:System.Xml.Schema.XmlSchemaObject> para um <xref:System.Xml.Linq.XAttribute>, o tipo será <xref:System.Xml.Schema.XmlSchemaAttribute>.</span><span class="sxs-lookup"><span data-stu-id="549aa-166">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.</span></span>  
  
 <span data-ttu-id="549aa-167">Depois que você tiver uma instância de um <xref:System.Xml.Schema.XmlSchemaObject>, você pode usar esse método para validar um atributo.</span><span class="sxs-lookup"><span data-stu-id="549aa-167">After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate an attribute.</span></span>  
  
   
  
## Examples  
  
```csharp  
  
                string xsdMarkup =  
    @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:simpleContent>  
          <xsd:extension base='xsd:string'>  
           <xsd:attribute name='Lang' use='required'>  
            <xsd:simpleType>  
             <xsd:restriction base='xsd:token'>  
              <xsd:enumeration value='C#'/>  
              <xsd:enumeration value='VB'/>  
             </xsd:restriction>  
            </xsd:simpleType>  
           </xsd:attribute>  
          </xsd:extension>  
         </xsd:simpleContent>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
  
XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
XDocument doc1 = new XDocument(  
    new XElement("Root",  
        new XAttribute("Lang", "C#")  
    )  
);  
  
Console.WriteLine("Validating doc1 ...");  
bool errors = false;  
doc1.Validate(schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Validating Lang attribute ...");  
XAttribute lang = doc1.Root.Attribute("Lang");  
  
errors = false;  
lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    });  
Console.WriteLine("lang {0}", errors ? "did not validate" : "validated");  
  
// the following makes the Lang attribute invalid according to the schema  
lang.Value = "VC";  
  
Console.WriteLine();  
Console.WriteLine("Validating Lang attribute ...");  
  
errors = false;  
lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    });  
Console.WriteLine("lang {0}", errors ? "did not validate" : "validated");  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
      <?xml version='1.0'?>  
      <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
          <xsd:element name='Root'>  
              <xsd:complexType>  
                  <xsd:simpleContent>  
                      <xsd:extension base='xsd:string'>  
                          <xsd:attribute name='Lang' use='required'>  
                              <xsd:simpleType>  
                                  <xsd:restriction base='xsd:token'>  
                                      <xsd:enumeration value='C#'/>  
                                      <xsd:enumeration value='VB'/>  
                                  </xsd:restriction>  
                              </xsd:simpleType>  
                          </xsd:attribute>  
                      </xsd:extension>  
                  </xsd:simpleContent>  
              </xsd:complexType>  
          </xsd:element>  
      </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = <?xml version='1.0'?>  
                            <Root Lang='C#'/>  
  
    Console.WriteLine("Validating doc1 ...")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating Lang attribute ...")  
    Dim lang As XAttribute = doc1.Root.Attribute("Lang")  
  
    errors = False  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors)  
    Console.WriteLine("lang {0}", IIf(errors, "did not validate", "validated"))  
  
    ' the following makes the Lang attribute invalid according to the schema  
    lang.Value = "VC"  
  
    Console.WriteLine()  
    Console.WriteLine("Validating Lang attribute ...")  
  
    errors = False  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors)  
    Console.WriteLine("lang {0}", IIf(errors, "did not validate", "validated"))  
End Sub  
```  
  
 <span data-ttu-id="549aa-168">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="549aa-168">This example produces the following output:</span></span>  
  
```  
Validating doc1 ...  
doc1 validated  
  
Validating Lang attribute ...  
lang validated  
  
Validating Lang attribute ...  
The 'Lang' attribute is invalid - The value 'VC' is invalid according to its datatype 'Token' - The Enumeration constraint failed.  
lang did not validate  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><span data-ttu-id="549aa-169">Gerado para erros de validação de XSD (linguagem de definição de esquema XML).</span><span class="sxs-lookup"><span data-stu-id="549aa-169">Thrown for XML Schema Definition Language (XSD) validation errors.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XDocument source, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XDocument source, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XDocument ^ source, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler, bool addSchemaInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XDocument" RefType="this" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
        <Parameter Name="addSchemaInfo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="549aa-170">O <see cref="T:System.Xml.Linq.XDocument" /> a ser validado.</span><span class="sxs-lookup"><span data-stu-id="549aa-170">The <see cref="T:System.Xml.Linq.XDocument" /> to validate.</span></span></param>
        <param name="schemas"><span data-ttu-id="549aa-171">Um <see cref="T:System.Xml.Schema.XmlSchemaSet" /> em relação ao qual validar.</span><span class="sxs-lookup"><span data-stu-id="549aa-171">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span></span></param>
        <param name="validationEventHandler"><span data-ttu-id="549aa-172">Um <see cref="T:System.Xml.Schema.ValidationEventHandler" /> para um evento que ocorre quando o leitor encontra erros de validação.</span><span class="sxs-lookup"><span data-stu-id="549aa-172">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span></span> <span data-ttu-id="549aa-173">Se <see langword="null" />, gera uma exceção nos erros de validação.</span><span class="sxs-lookup"><span data-stu-id="549aa-173">If <see langword="null" />, throws an exception upon validation errors.</span></span></param>
        <param name="addSchemaInfo"><span data-ttu-id="549aa-174">Um <see cref="T:System.Boolean" /> indicando se deve popular o PSVI (post-schema-validation infoset).</span><span class="sxs-lookup"><span data-stu-id="549aa-174">A <see cref="T:System.Boolean" /> indicating whether to populate the post-schema-validation infoset (PSVI).</span></span></param>
        <summary><span data-ttu-id="549aa-175">Valida que um <see cref="T:System.Xml.Linq.XDocument" /> está em conformidade com um XSD em um <see cref="T:System.Xml.Schema.XmlSchemaSet" />, opcionalmente, preenchendo a árvore XML com o PSVI (post-schema-validation infoset).</span><span class="sxs-lookup"><span data-stu-id="549aa-175">Validates that an <see cref="T:System.Xml.Linq.XDocument" /> conforms to an XSD in an <see cref="T:System.Xml.Schema.XmlSchemaSet" />, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="549aa-176">Esse método de extensão valida que o <xref:System.Xml.Linq.XDocument> está de acordo com o modelo de conteúdo de esquema em <xref:System.Xml.Schema.XmlSchemaSet>.</span><span class="sxs-lookup"><span data-stu-id="549aa-176">This extension method validates that the <xref:System.Xml.Linq.XDocument> conforms to the schema content model in <xref:System.Xml.Schema.XmlSchemaSet>.</span></span>  
  
 <span data-ttu-id="549aa-177">Se `addSchemaInfo` é `true`, este método preenche a árvore XML com o infoset de post-schema-validação (psvi POST).</span><span class="sxs-lookup"><span data-stu-id="549aa-177">If `addSchemaInfo` is `true`, this method populates the XML tree with the post-schema-validation infoset (PSVI).</span></span>  
  
 <span data-ttu-id="549aa-178">Há duas etapas para popular a árvore XML com a psvi POST.</span><span class="sxs-lookup"><span data-stu-id="549aa-178">There are two steps to populating the XML tree with the PSVI.</span></span>  
  
1.  <span data-ttu-id="549aa-179">Primeiro, uma anotação é adicionada a todos os nós na árvore para que você possa chamar <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType> ou <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType> em um elemento ou atributo na árvore.</span><span class="sxs-lookup"><span data-stu-id="549aa-179">First, an annotation is added to all nodes in the tree to enable you to call <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType> or <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType> on an element or attribute in the tree.</span></span>  
  
2.  <span data-ttu-id="549aa-180">Em segundo lugar, os elementos padrão e os atributos definidos no XSD são adicionados à árvore XML.</span><span class="sxs-lookup"><span data-stu-id="549aa-180">Second, default elements and attributes defined in the XSD are added to the XML tree.</span></span> <span data-ttu-id="549aa-181">Chamando uma da <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> métodos, você pode determinar se um atributo ou elemento específico foi adicionado de XSD como um padrão de elemento ou atributo.</span><span class="sxs-lookup"><span data-stu-id="549aa-181">By calling one of the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> methods, you can determine if a specific element or attribute was added from the XSD as a default element or attribute.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="549aa-182">O exemplo a seguir contém um XSD que define o `Child2` elemento com um `Att1` atributo com um valor padrão.</span><span class="sxs-lookup"><span data-stu-id="549aa-182">The following example contains an XSD that defines the `Child2` element with an `Att1` attribute with a default value.</span></span> <span data-ttu-id="549aa-183">Após validar com êxito o documento, o atributo com o valor padrão é adicionado à árvore XML.</span><span class="sxs-lookup"><span data-stu-id="549aa-183">After successfully validating the document, the attribute with the default value is added to the XML tree.</span></span> <span data-ttu-id="549aa-184">Observe que o atributo padrão não será adicionado ao `doc2`, que não valida em relação ao esquema.</span><span class="sxs-lookup"><span data-stu-id="549aa-184">Note that the default attribute is not added to `doc2`, which does not validate against the schema.</span></span>  
  
```csharp  
  
                string xsdMarkup =  
    @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:sequence>  
          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
          <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  
           <xsd:complexType>  
            <xsd:simpleContent>  
             <xsd:extension base='xsd:string'>  
              <xsd:attribute name='Att1' default='Att1 Default Value'/>  
             </xsd:extension>  
            </xsd:simpleContent>  
           </xsd:complexType>  
          </xsd:element>  
         </xsd:sequence>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
XDocument doc1 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "c1"),  
        new XElement("Child2", "c2")  
    )  
);  
  
XDocument doc2 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "content1"),  
        new XElement("Child3", "content1")  
    )  
);  
  
Console.WriteLine("Validating doc1");  
bool errors = false;  
doc1.Validate(schemas, (o, e) =>  
                           {  
                               Console.WriteLine("{0}", e.Message);  
                               errors = true;  
                           }, true);  
Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Validating doc2");  
errors = false;  
doc2.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     }, true);  
Console.WriteLine("doc2 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Contents of doc1:");  
Console.WriteLine(doc1);  
  
Console.WriteLine();  
Console.WriteLine("Contents of doc2:");  
Console.WriteLine(doc2);  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
    <?xml version='1.0'?>  
    <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
        <xsd:element name='Root'>  
            <xsd:complexType>  
                <xsd:sequence>  
                    <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
                    <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  
                        <xsd:complexType>  
                            <xsd:simpleContent>  
                                <xsd:extension base='xsd:string'>  
                                    <xsd:attribute name='Att1' default='Att1 Default Value'/>  
                                </xsd:extension>  
                            </xsd:simpleContent>  
                        </xsd:complexType>  
                    </xsd:element>  
                </xsd:sequence>  
            </xsd:complexType>  
        </xsd:element>  
    </xsd:schema>  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = <?xml version='1.0'?>  
                            <Root>  
                                <Child1>c1</Child1>  
                                <Child2>c2</Child2>  
                            </Root>  
    Dim doc2 As XDocument = <?xml version='1.0'?>  
                            <Root>  
                                <Child1>content1</Child1>  
                                <Child3>content1</Child3>  
                            </Root>  
  
    Console.WriteLine("Validating doc1")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating doc2")  
    errors = False  
    doc2.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc2 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Contents of doc1:")  
    Console.WriteLine(doc1)  
  
    Console.WriteLine()  
    Console.WriteLine("Contents of doc2:")  
    Console.WriteLine(doc2)  
End Sub  
```  
  
 <span data-ttu-id="549aa-185">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="549aa-185">This example produces the following output:</span></span>  
  
```  
Validating doc1  
doc1 validated  
  
Validating doc2  
The element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  
doc2 did not validate  
  
Contents of doc1:  
<Root>  
  <Child1>c1</Child1>  
  <Child2 Att1="Att1 Default Value">c2</Child2>  
</Root>  
  
Contents of doc2:  
<Root>  
  <Child1>content1</Child1>  
  <Child3>content1</Child3>  
</Root>  
```  
  
 <span data-ttu-id="549aa-186">O exemplo a seguir preenche a árvore com psvi POST.</span><span class="sxs-lookup"><span data-stu-id="549aa-186">The following example populates the tree with PSVI.</span></span> <span data-ttu-id="549aa-187">Após a validação, imprime todos os elementos e atributos na árvore que são inválidos de acordo com a psvi POST.</span><span class="sxs-lookup"><span data-stu-id="549aa-187">After validation, it prints all elements and attributes in the tree that are invalid according to the PSVI.</span></span>  
  
```csharp  
  
                static void DumpInvalidNodes(XElement el)  
{  
    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
        Console.WriteLine("Invalid Element {0}",  
            el.AncestorsAndSelf()  
            .InDocumentOrder()  
            .Aggregate("", (s, i) => s + "/" + i.Name.ToString()));  
    foreach (XAttribute att in el.Attributes())  
        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
            Console.WriteLine("Invalid Attribute {0}",  
                att  
                .Parent  
                .AncestorsAndSelf()  
                .InDocumentOrder()  
                .Aggregate("",  
                    (s, i) => s + "/" + i.Name.ToString()) + "/@" + att.Name.ToString()  
                );  
    foreach (XElement child in el.Elements())  
        DumpInvalidNodes(child);  
}  
  
static void Main(string[] args)  
{  
   string xsdMarkup =  
        @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
           <xsd:simpleType name='GCType'>  
            <xsd:restriction base='xsd:token'>  
             <xsd:enumeration value='AAA'/>  
             <xsd:enumeration value='BBB'/>  
            </xsd:restriction>  
           </xsd:simpleType>  
           <xsd:element name='Root'>  
            <xsd:complexType>  
             <xsd:sequence>  
              <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
               <xsd:complexType>  
                <xsd:sequence>  
                 <xsd:element name='GrandChild1' type='GCType'/>  
                 <xsd:element name='GrandChild2' type='GCType'/>  
                 <xsd:element name='GrandChild3' type='GCType'/>  
                </xsd:sequence>  
               </xsd:complexType>  
              </xsd:element>  
             </xsd:sequence>  
            </xsd:complexType>  
           </xsd:element>  
          </xsd:schema>";  
  
    XmlSchemaSet schemas = new XmlSchemaSet();  
    schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
    XDocument doc1 = new XDocument(  
        new XElement("Root",  
            new XElement("Child1",  
                new XElement("GrandChild1", "AAA"),  
                new XElement("GrandChild2", "ZZZ"),  
                new XElement("GrandChild3", "ZZZ")  
            )  
        )  
    );  
  
    Console.WriteLine("Validating doc1 ...");  
    bool errors = false;  
    doc1.Validate(schemas, (sender, e) =>  
        {  
            Console.WriteLine(e.Message);  
            errors = true;  
        }, true);  
    Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
    DumpInvalidNodes(doc1.Root);  
}  
```  
  
```vb  
  
                Private Sub DumpInvalidNodes(ByVal el As XElement)  
    If el.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
        Console.WriteLine("Invalid Element {0}", _  
            el _  
            .AncestorsAndSelf _  
            .InDocumentOrder() _  
            .Aggregate("", _  
                Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()))  
    End If  
    For Each att As XAttribute In el.Attributes()  
        If att.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
            Console.WriteLine("Invalid Attribute {0}", _  
                att _  
                .Parent _  
                .AncestorsAndSelf() _  
                .InDocumentOrder() _  
                .Aggregate("", _  
                    Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()) + _  
                    "/@" + att.Name.ToString())  
        End If  
    Next  
    For Each child As XElement In el.Elements()  
        DumpInvalidNodes(child)  
    Next  
End Sub  
  
Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
        <?xml version='1.0'?>  
        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
            <xsd:simpleType name='GCType'>  
                <xsd:restriction base='xsd:token'>  
                    <xsd:enumeration value='AAA'/>  
                    <xsd:enumeration value='BBB'/>  
                </xsd:restriction>  
            </xsd:simpleType>  
            <xsd:element name='Root'>  
                <xsd:complexType>  
                    <xsd:sequence>  
                        <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
                            <xsd:complexType>  
                                <xsd:sequence>  
                                    <xsd:element name='GrandChild1' type='GCType'/>  
                                    <xsd:element name='GrandChild2' type='GCType'/>  
                                    <xsd:element name='GrandChild3' type='GCType'/>  
                                </xsd:sequence>  
                            </xsd:complexType>  
                        </xsd:element>  
                    </xsd:sequence>  
                </xsd:complexType>  
            </xsd:element>  
        </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = _  
        <?xml version='1.0'?>  
        <Root>  
            <Child1>  
                <GrandChild1>AAA</GrandChild1>  
                <GrandChild2>ZZZ</GrandChild2>  
                <GrandChild3>ZZZ</GrandChild3>  
            </Child1>  
        </Root>  
  
    Console.WriteLine("Validating doc1 ...")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
    DumpInvalidNodes(doc1.Root)  
End Sub  
```  
  
 <span data-ttu-id="549aa-188">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="549aa-188">This example produces the following output:</span></span>  
  
```  
Validating doc1 ...  
The 'GrandChild2' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  
The 'GrandChild3' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  
doc1 did not validate  
Invalid Element /Root  
Invalid Element /Root/Child1  
Invalid Element /Root/Child1/GrandChild2  
Invalid Element /Root/Child1/GrandChild3  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><span data-ttu-id="549aa-189">Gerado para erros de validação de XSD (linguagem de definição de esquema XML).</span><span class="sxs-lookup"><span data-stu-id="549aa-189">Thrown for XML Schema Definition Language (XSD) validation errors.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XElement source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XElement source, class System.Xml.Schema.XmlSchemaObject partialValidationType, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XElement ^ source, System::Xml::Schema::XmlSchemaObject ^ partialValidationType, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XElement" RefType="this" />
        <Parameter Name="partialValidationType" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="549aa-190">O <see cref="T:System.Xml.Linq.XElement" /> a ser validado.</span><span class="sxs-lookup"><span data-stu-id="549aa-190">The <see cref="T:System.Xml.Linq.XElement" /> to validate.</span></span></param>
        <param name="partialValidationType"><span data-ttu-id="549aa-191">Um <see cref="T:System.Xml.Schema.XmlSchemaObject" /> que especifica a subárvore a ser validada.</span><span class="sxs-lookup"><span data-stu-id="549aa-191">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that specifies the sub-tree to validate.</span></span></param>
        <param name="schemas"><span data-ttu-id="549aa-192">Um <see cref="T:System.Xml.Schema.XmlSchemaSet" /> em relação ao qual validar.</span><span class="sxs-lookup"><span data-stu-id="549aa-192">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span></span></param>
        <param name="validationEventHandler"><span data-ttu-id="549aa-193">Um <see cref="T:System.Xml.Schema.ValidationEventHandler" /> para um evento que ocorre quando o leitor encontra erros de validação.</span><span class="sxs-lookup"><span data-stu-id="549aa-193">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span></span> <span data-ttu-id="549aa-194">Se <see langword="null" />, gera uma exceção nos erros de validação.</span><span class="sxs-lookup"><span data-stu-id="549aa-194">If <see langword="null" />, throws an exception upon validation errors.</span></span></param>
        <summary><span data-ttu-id="549aa-195">Esse método valida que uma subárvore <see cref="T:System.Xml.Linq.XElement" /> está em conformidade com um <see cref="T:System.Xml.Schema.XmlSchemaObject" /> e um <see cref="T:System.Xml.Schema.XmlSchemaSet" /> especificados.</span><span class="sxs-lookup"><span data-stu-id="549aa-195">This method validates that an <see cref="T:System.Xml.Linq.XElement" /> sub-tree conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> and an <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="549aa-196">Você pode usar esse método para validar que uma subárvore (com um <xref:System.Xml.Linq.XElement> na raiz) é compatível com um esquema.</span><span class="sxs-lookup"><span data-stu-id="549aa-196">You can use this method to validate that a sub-tree (with an <xref:System.Xml.Linq.XElement> at its root) conforms to a schema.</span></span> <span data-ttu-id="549aa-197">Você normalmente usa esse método quando você tiver modificado uma subárvore e você deseja certificar-se de que ainda está de acordo com seu esquema.</span><span class="sxs-lookup"><span data-stu-id="549aa-197">You typically use this method when you have modified a sub-tree, and you want to make sure that it still conforms to its schema.</span></span> <span data-ttu-id="549aa-198">Você pode validar o documento inteiro, mas leva menos tempo de processamento para validar apenas uma subárvore.</span><span class="sxs-lookup"><span data-stu-id="549aa-198">You could validate the entire document, but it takes less processing time to validate a just a sub-tree.</span></span>  
  
 <span data-ttu-id="549aa-199">Se você passar `null` para `validationEventHandler`, em seguida, esse método gerará uma exceção após erros de validação.</span><span class="sxs-lookup"><span data-stu-id="549aa-199">If you pass `null` for `validationEventHandler`, then this method raises an exception upon validation errors.</span></span> <span data-ttu-id="549aa-200">Avisos de validação não gerará uma exceção.</span><span class="sxs-lookup"><span data-stu-id="549aa-200">Validation warnings will not raise an exception.</span></span>  
  
 <span data-ttu-id="549aa-201">Para validar uma subárvore, você pode usar uma instância de <xref:System.Xml.Schema.XmlSchemaObject>.</span><span class="sxs-lookup"><span data-stu-id="549aa-201">To validate a sub-tree, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>.</span></span> <span data-ttu-id="549aa-202">Você pode obter essa instância de várias maneiras.</span><span class="sxs-lookup"><span data-stu-id="549aa-202">You can obtain this instance in various ways.</span></span> <span data-ttu-id="549aa-203">Uma maneira fácil é da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="549aa-203">An easy way is as follows:</span></span>  
  
1.  <span data-ttu-id="549aa-204">Valide que um documento está de acordo com um esquema.</span><span class="sxs-lookup"><span data-stu-id="549aa-204">Validate that a document conforms to a schema.</span></span>  
  
2.  <span data-ttu-id="549aa-205">Adicionar validação post-schema infoset (psvi POST) ao chamar o <xref:System.Xml.Schema.Extensions.Validate%2A> método de extensão.</span><span class="sxs-lookup"><span data-stu-id="549aa-205">Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.</span></span>  
  
3.  <span data-ttu-id="549aa-206">Chamar o <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> método de extensão para recuperar um objeto que implementa <xref:System.Xml.Schema.IXmlSchemaInfo>.</span><span class="sxs-lookup"><span data-stu-id="549aa-206">Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>.</span></span> <span data-ttu-id="549aa-207">O objeto recuperado, você pode obter um <xref:System.Xml.Schema.XmlSchemaObject>.</span><span class="sxs-lookup"><span data-stu-id="549aa-207">From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.</span></span>  
  
    -   <span data-ttu-id="549aa-208">Se você receber um <xref:System.Xml.Schema.XmlSchemaObject> para um <xref:System.Xml.Linq.XElement>, o tipo será <xref:System.Xml.Schema.XmlSchemaElement>.</span><span class="sxs-lookup"><span data-stu-id="549aa-208">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.</span></span>  
  
    -   <span data-ttu-id="549aa-209">Se você receber um <xref:System.Xml.Schema.XmlSchemaObject> para um <xref:System.Xml.Linq.XAttribute>, o tipo será <xref:System.Xml.Schema.XmlSchemaAttribute>.</span><span class="sxs-lookup"><span data-stu-id="549aa-209">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.</span></span>  
  
 <span data-ttu-id="549aa-210">Depois que você tiver uma instância de um <xref:System.Xml.Schema.XmlSchemaObject>, você pode usar esse método para validar uma subárvore.</span><span class="sxs-lookup"><span data-stu-id="549aa-210">After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate an sub-tree.</span></span>  
  
   
  
## Examples  
  
```csharp  
  
                string xsdMarkup =  
    @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:sequence>  
          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
           <xsd:complexType>  
            <xsd:sequence>  
             <xsd:element name='GrandChild1' minOccurs='1' maxOccurs='1'/>  
             <xsd:element name='GrandChild2' minOccurs='1' maxOccurs='2'/>  
            </xsd:sequence>  
           </xsd:complexType>  
          </xsd:element>  
         </xsd:sequence>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
  
XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
XDocument doc1 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1",  
            new XElement("GrandChild1", "gc"),  
            new XElement("GrandChild2", "gc")  
        )  
    )  
);  
  
Console.WriteLine("Validating doc1 ...");  
bool errors = false;  
doc1.Validate(schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Validating Child1 after first edit ...");  
XElement child1 = doc1.Element("Root").Element("Child1");  
child1.Add(new XElement("GrandChild2", "gc"));  
errors = false;  
child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    });  
Console.WriteLine("child1 {0}", errors ? "did not validate" : "validated");  
  
// the following makes the Child1 element invalid according to the schema  
child1.Add(new XElement("GrandChild3", "gc"));  
Console.WriteLine();  
Console.WriteLine("Validating Child1 after second edit ...");  
child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    });  
Console.WriteLine("child1 {0}", errors ? "did not validate" : "validated");  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
  
    Dim xsdMarkup As XDocument = _  
        <?xml version='1.0'?>  
        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
            <xsd:element name='Root'>  
                <xsd:complexType>  
                    <xsd:sequence>  
                        <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
                            <xsd:complexType>  
                                <xsd:sequence>  
                                    <xsd:element name='GrandChild1' minOccurs='1' maxOccurs='1'/>  
                                    <xsd:element name='GrandChild2' minOccurs='1' maxOccurs='2'/>  
                                </xsd:sequence>  
                            </xsd:complexType>  
                        </xsd:element>  
                    </xsd:sequence>  
                </xsd:complexType>  
            </xsd:element>  
        </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = _  
        <?xml version='1.0'?>  
        <Root>  
            <Child1>  
                <GrandChild1>gc</GrandChild1>  
                <GrandChild2>gc</GrandChild2>  
            </Child1>  
        </Root>  
  
    Console.WriteLine("Validating doc1 ...")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating Child1 after first edit ...")  
    Dim child1 As XElement = doc1.Element("Root").Element("Child1")  
    child1.Add(<GrandChild2>gc</GrandChild2>)  
    errors = False  
    child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, AddressOf XSDErrors)  
    Console.WriteLine("child1 {0}", IIf(errors, "did not validate", "validated"))  
  
    ' the following makes the Child1 element invalid according to the schema  
    child1.Add(<GrandChild3>gc</GrandChild3>)  
    Console.WriteLine()  
    Console.WriteLine("Validating Child1 after second edit ...")  
    child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, AddressOf XSDErrors)  
    Console.WriteLine("child1 {0}", IIf(errors, "did not validate", "validated"))  
End Sub  
```  
  
 <span data-ttu-id="549aa-211">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="549aa-211">This example produces the following output:</span></span>  
  
```  
Validating doc1 ...  
doc1 validated  
  
Validating Child1 after first edit ...  
child1 validated  
  
Validating Child1 after second edit ...  
The element 'Child1' has invalid child element 'GrandChild3'.  
child1 did not validate  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><span data-ttu-id="549aa-212">Gerado para erros de validação de XSD (linguagem de definição de esquema XML).</span><span class="sxs-lookup"><span data-stu-id="549aa-212">Thrown for XML Schema Definition Language (XSD) validation errors.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XAttribute source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XAttribute source, class System.Xml.Schema.XmlSchemaObject partialValidationType, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XAttribute ^ source, System::Xml::Schema::XmlSchemaObject ^ partialValidationType, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler, bool addSchemaInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XAttribute" RefType="this" />
        <Parameter Name="partialValidationType" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
        <Parameter Name="addSchemaInfo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="549aa-213">O <see cref="T:System.Xml.Linq.XAttribute" /> a ser validado.</span><span class="sxs-lookup"><span data-stu-id="549aa-213">The <see cref="T:System.Xml.Linq.XAttribute" /> to validate.</span></span></param>
        <param name="partialValidationType"><span data-ttu-id="549aa-214">Um <see cref="T:System.Xml.Schema.XmlSchemaObject" /> que especifica a subárvore a ser validada.</span><span class="sxs-lookup"><span data-stu-id="549aa-214">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that specifies the sub-tree to validate.</span></span></param>
        <param name="schemas"><span data-ttu-id="549aa-215">Um <see cref="T:System.Xml.Schema.XmlSchemaSet" /> em relação ao qual validar.</span><span class="sxs-lookup"><span data-stu-id="549aa-215">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span></span></param>
        <param name="validationEventHandler"><span data-ttu-id="549aa-216">Um <see cref="T:System.Xml.Schema.ValidationEventHandler" /> para um evento que ocorre quando o leitor encontra erros de validação.</span><span class="sxs-lookup"><span data-stu-id="549aa-216">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span></span> <span data-ttu-id="549aa-217">Se <see langword="null" />, gera uma exceção nos erros de validação.</span><span class="sxs-lookup"><span data-stu-id="549aa-217">If <see langword="null" />, throws an exception upon validation errors.</span></span></param>
        <param name="addSchemaInfo"><span data-ttu-id="549aa-218">Um <see cref="T:System.Boolean" /> indicando se deve popular o PSVI (post-schema-validation infoset).</span><span class="sxs-lookup"><span data-stu-id="549aa-218">A <see cref="T:System.Boolean" /> indicating whether to populate the post-schema-validation infoset (PSVI).</span></span></param>
        <summary><span data-ttu-id="549aa-219">Valida se um <see cref="T:System.Xml.Linq.XAttribute" /> está em conformidade com um <see cref="T:System.Xml.Schema.XmlSchemaObject" /> e <see cref="T:System.Xml.Schema.XmlSchemaSet" /> especificados, opcionalmente, populando a árvore XML com o PSVI (infoset de validação pós-esquema).</span><span class="sxs-lookup"><span data-stu-id="549aa-219">Validates that an <see cref="T:System.Xml.Linq.XAttribute" /> conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> and an <see cref="T:System.Xml.Schema.XmlSchemaSet" />, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="549aa-220">Você pode usar esse método para validar que um <xref:System.Xml.Linq.XAttribute> está em conformidade com um esquema.</span><span class="sxs-lookup"><span data-stu-id="549aa-220">You can use this method to validate that an <xref:System.Xml.Linq.XAttribute> conforms to a schema.</span></span> <span data-ttu-id="549aa-221">Você normalmente usa esse método quando você modificou um atributo, e você deseja certificar-se de que ainda está de acordo com seu esquema.</span><span class="sxs-lookup"><span data-stu-id="549aa-221">You typically use this method when you have modified an attribute, and you want to make sure that it still conforms to its schema.</span></span> <span data-ttu-id="549aa-222">Você pode validar o documento inteiro, mas leva menos tempo de processamento para validar apenas o atributo.</span><span class="sxs-lookup"><span data-stu-id="549aa-222">You could validate the entire document, but it takes less processing time to validate just the attribute.</span></span>  
  
 <span data-ttu-id="549aa-223">Se `addSchemaInfo` é `true`, este método preenche o atributo com o infoset de post-schema-validação (psvi POST).</span><span class="sxs-lookup"><span data-stu-id="549aa-223">If `addSchemaInfo` is `true`, this method populates the attribute with the post-schema-validation infoset (PSVI).</span></span> <span data-ttu-id="549aa-224">Após preencher a árvore XML com a psvi POST, você pode chamar <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType> no atributo validado.</span><span class="sxs-lookup"><span data-stu-id="549aa-224">After you have populated the XML tree with the PSVI, you can call <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType> on the validated attribute.</span></span> <span data-ttu-id="549aa-225">Isso é útil se você estiver escrevendo código que depende dos dados retornados por <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>.</span><span class="sxs-lookup"><span data-stu-id="549aa-225">This is useful if you are writing code that relies on data returned by <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>.</span></span>  
  
 <span data-ttu-id="549aa-226">Se você passar `null` para `validationEventHandler`, em seguida, esse método gerará uma exceção após erros de validação.</span><span class="sxs-lookup"><span data-stu-id="549aa-226">If you pass `null` for `validationEventHandler`, then this method raises an exception upon validation errors.</span></span> <span data-ttu-id="549aa-227">Avisos de validação não gerará uma exceção.</span><span class="sxs-lookup"><span data-stu-id="549aa-227">Validation warnings will not raise an exception.</span></span>  
  
 <span data-ttu-id="549aa-228">Para validar um atributo, você pode usar uma instância de <xref:System.Xml.Schema.XmlSchemaObject>.</span><span class="sxs-lookup"><span data-stu-id="549aa-228">To validate an attribute, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>.</span></span> <span data-ttu-id="549aa-229">Você pode obter essa instância de várias maneiras.</span><span class="sxs-lookup"><span data-stu-id="549aa-229">You can obtain this instance in various ways.</span></span> <span data-ttu-id="549aa-230">Uma maneira fácil é da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="549aa-230">An easy way is as follows:</span></span>  
  
1.  <span data-ttu-id="549aa-231">Valide que um documento está de acordo com um esquema.</span><span class="sxs-lookup"><span data-stu-id="549aa-231">Validate that a document conforms to a schema.</span></span>  
  
2.  <span data-ttu-id="549aa-232">Adicionar validação post-schema infoset (psvi POST) ao chamar o <xref:System.Xml.Schema.Extensions.Validate%2A> método de extensão.</span><span class="sxs-lookup"><span data-stu-id="549aa-232">Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.</span></span>  
  
3.  <span data-ttu-id="549aa-233">Chamar o <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> método de extensão para recuperar um objeto que implementa <xref:System.Xml.Schema.IXmlSchemaInfo>.</span><span class="sxs-lookup"><span data-stu-id="549aa-233">Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>.</span></span> <span data-ttu-id="549aa-234">O objeto recuperado, você pode obter um <xref:System.Xml.Schema.XmlSchemaObject>.</span><span class="sxs-lookup"><span data-stu-id="549aa-234">From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.</span></span>  
  
    -   <span data-ttu-id="549aa-235">Se você receber um <xref:System.Xml.Schema.XmlSchemaObject> para um <xref:System.Xml.Linq.XElement>, o tipo será <xref:System.Xml.Schema.XmlSchemaElement>.</span><span class="sxs-lookup"><span data-stu-id="549aa-235">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.</span></span>  
  
    -   <span data-ttu-id="549aa-236">Se você receber um <xref:System.Xml.Schema.XmlSchemaObject> para um <xref:System.Xml.Linq.XAttribute>, o tipo será <xref:System.Xml.Schema.XmlSchemaAttribute>.</span><span class="sxs-lookup"><span data-stu-id="549aa-236">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.</span></span>  
  
 <span data-ttu-id="549aa-237">Depois que você tiver uma instância de um <xref:System.Xml.Schema.XmlSchemaObject>, você pode usar esse método para validar um atributo.</span><span class="sxs-lookup"><span data-stu-id="549aa-237">After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate an attribute.</span></span>  
  
   
  
## Examples  
  
```csharp  
  
                static void DumpInvalidNodes(XElement el)  
{  
    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
        Console.WriteLine("Invalid Element {0}",  
            el.AncestorsAndSelf()  
            .InDocumentOrder()  
            .Aggregate("", (s, i) => s + "/" + i.Name.ToString()));  
    foreach (XAttribute att in el.Attributes())  
        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
            Console.WriteLine("Invalid Attribute {0}",  
                att  
                .Parent  
                .AncestorsAndSelf()  
                .InDocumentOrder()  
                .Aggregate("",  
                    (s, i) => s + "/" + i.Name.ToString()) + "/@" + att.Name.ToString()  
                );  
    foreach (XElement child in el.Elements())  
        DumpInvalidNodes(child);  
}  
  
static void Main(string[] args)  
{  
    string xsdMarkup =  
        @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:simpleContent>  
          <xsd:extension base='xsd:string'>  
           <xsd:attribute name='Lang' use='required'>  
            <xsd:simpleType>  
             <xsd:restriction base='xsd:token'>  
              <xsd:enumeration value='C#'/>  
              <xsd:enumeration value='VB'/>  
             </xsd:restriction>  
            </xsd:simpleType>  
           </xsd:attribute>  
          </xsd:extension>  
         </xsd:simpleContent>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
  
    XmlSchemaSet schemas = new XmlSchemaSet();  
    schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
    XDocument doc1 = new XDocument(  
        new XElement("Root",  
            new XAttribute("Lang", "C#")  
        )  
    );  
  
    Console.WriteLine("Validating doc1 ...");  
    bool errors = false;  
    doc1.Validate(schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
    Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
    DumpInvalidNodes(doc1.Root);  
  
    Console.WriteLine();  
    Console.WriteLine("Validating Lang attribute ...");  
    XAttribute lang = doc1.Element("Root").Attribute("Lang");  
  
    errors = false;  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
    Console.WriteLine("lang {0}", errors ? "did not validate" : "validated");  
    DumpInvalidNodes(doc1.Root);  
  
    // the following makes the Lang attribute invalid according to the schema  
    lang.Value = "VC";  
  
    Console.WriteLine();  
    Console.WriteLine("Validating Lang attribute ...");  
  
    errors = false;  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
    Console.WriteLine("lang {0}", errors ? "did not validate" : "validated");  
    DumpInvalidNodes(doc1.Root);  
}  
```  
  
```vb  
  
                Private Sub DumpInvalidNodes(ByVal el As XElement)  
    If el.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
        Console.WriteLine("Invalid Element {0}", _  
            el _  
            .AncestorsAndSelf _  
            .InDocumentOrder() _  
            .Aggregate("", _  
                Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()))  
    End If  
    For Each att As XAttribute In el.Attributes()  
        If att.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
            Console.WriteLine("Invalid Attribute {0}", _  
                att _  
                .Parent _  
                .AncestorsAndSelf() _  
                .InDocumentOrder() _  
                .Aggregate("", _  
                    Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()) + _  
                    "/@" + att.Name.ToString())  
        End If  
    Next  
    For Each child As XElement In el.Elements()  
        DumpInvalidNodes(child)  
    Next  
End Sub  
  
Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
  
    Dim xsdMarkup As XDocument = _  
        <?xml version='1.0'?>  
        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
            <xsd:element name='Root'>  
                <xsd:complexType>  
                    <xsd:simpleContent>  
                        <xsd:extension base='xsd:string'>  
                            <xsd:attribute name='Lang' use='required'>  
                                <xsd:simpleType>  
                                    <xsd:restriction base='xsd:token'>  
                                        <xsd:enumeration value='C#'/>  
                                        <xsd:enumeration value='VB'/>  
                                    </xsd:restriction>  
                                </xsd:simpleType>  
                            </xsd:attribute>  
                        </xsd:extension>  
                    </xsd:simpleContent>  
                </xsd:complexType>  
            </xsd:element>  
        </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = <?xml version='1.0'?>  
                            <Root Lang='C#'/>  
  
    Console.WriteLine("Validating doc1 ...")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
    DumpInvalidNodes(doc1.Root)  
  
    Console.WriteLine()  
    Console.WriteLine("Validating Lang attribute ...")  
    Dim lang As XAttribute = doc1.Element("Root").Attribute("Lang")  
  
    errors = False  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("lang {0}", IIf(errors, "did not validate", "validated"))  
    DumpInvalidNodes(doc1.Root)  
  
    ' the following makes the Lang attribute invalid according to the schema  
    lang.Value = "VC"  
  
    Console.WriteLine()  
    Console.WriteLine("Validating Lang attribute ...")  
  
    errors = False  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("lang {0}", IIf(errors, "did not validate", "validated"))  
    DumpInvalidNodes(doc1.Root)  
End Sub  
```  
  
 <span data-ttu-id="549aa-238">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="549aa-238">This example produces the following output:</span></span>  
  
```  
Validating doc1 ...  
doc1 validated  
  
Validating Lang attribute ...  
lang validated  
  
Validating Lang attribute ...  
The 'Lang' attribute is invalid - The value 'VC' is invalid according to its datatype 'Token' - The Enumeration constraint failed.  
lang did not validate  
Invalid Attribute /Root/@Lang  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><span data-ttu-id="549aa-239">Gerado para erros de validação de XSD (linguagem de definição de esquema XML).</span><span class="sxs-lookup"><span data-stu-id="549aa-239">Thrown for XML Schema Definition Language (XSD) validation errors.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XElement source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XElement source, class System.Xml.Schema.XmlSchemaObject partialValidationType, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XElement ^ source, System::Xml::Schema::XmlSchemaObject ^ partialValidationType, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler, bool addSchemaInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XElement" RefType="this" />
        <Parameter Name="partialValidationType" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
        <Parameter Name="addSchemaInfo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="549aa-240">O <see cref="T:System.Xml.Linq.XElement" /> a ser validado.</span><span class="sxs-lookup"><span data-stu-id="549aa-240">The <see cref="T:System.Xml.Linq.XElement" /> to validate.</span></span></param>
        <param name="partialValidationType"><span data-ttu-id="549aa-241">Um <see cref="T:System.Xml.Schema.XmlSchemaObject" /> que especifica a subárvore a ser validada.</span><span class="sxs-lookup"><span data-stu-id="549aa-241">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that specifies the sub-tree to validate.</span></span></param>
        <param name="schemas"><span data-ttu-id="549aa-242">Um <see cref="T:System.Xml.Schema.XmlSchemaSet" /> em relação ao qual validar.</span><span class="sxs-lookup"><span data-stu-id="549aa-242">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span></span></param>
        <param name="validationEventHandler"><span data-ttu-id="549aa-243">Um <see cref="T:System.Xml.Schema.ValidationEventHandler" /> para um evento que ocorre quando o leitor encontra erros de validação.</span><span class="sxs-lookup"><span data-stu-id="549aa-243">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span></span> <span data-ttu-id="549aa-244">Se <see langword="null" />, gera uma exceção nos erros de validação.</span><span class="sxs-lookup"><span data-stu-id="549aa-244">If <see langword="null" />, throws an exception upon validation errors.</span></span></param>
        <param name="addSchemaInfo"><span data-ttu-id="549aa-245">Um <see cref="T:System.Boolean" /> indicando se deve popular o PSVI (post-schema-validation infoset).</span><span class="sxs-lookup"><span data-stu-id="549aa-245">A <see cref="T:System.Boolean" /> indicating whether to populate the post-schema-validation infoset (PSVI).</span></span></param>
        <summary><span data-ttu-id="549aa-246">Valida se uma subárvore <see cref="T:System.Xml.Linq.XElement" /> está em conformidade com um <see cref="T:System.Xml.Schema.XmlSchemaObject" /> e <see cref="T:System.Xml.Schema.XmlSchemaSet" /> especificados, opcionalmente, populando a árvore XML com o PSVI (infoset de validação pós-esquema).</span><span class="sxs-lookup"><span data-stu-id="549aa-246">Validates that an <see cref="T:System.Xml.Linq.XElement" /> sub-tree conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> and an <see cref="T:System.Xml.Schema.XmlSchemaSet" />, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="549aa-247">Você pode usar esse método para validar que uma subárvore (com um <xref:System.Xml.Linq.XElement> na raiz da subárvore) está em conformidade com um esquema.</span><span class="sxs-lookup"><span data-stu-id="549aa-247">You can use this method to validate that a sub-tree (with an <xref:System.Xml.Linq.XElement> at the root of the sub-tree) conforms to a schema.</span></span> <span data-ttu-id="549aa-248">Você normalmente usa esse método quando você tiver modificado uma subárvore e você deseja certificar-se de que ainda está de acordo com seu esquema.</span><span class="sxs-lookup"><span data-stu-id="549aa-248">You typically use this method when you have modified a sub-tree, and you want to make sure that it still conforms to its schema.</span></span> <span data-ttu-id="549aa-249">Você pode validar o documento inteiro, mas leva menos tempo de processamento para validar apenas uma subárvore.</span><span class="sxs-lookup"><span data-stu-id="549aa-249">You could validate the entire document, but it takes less processing time to validate a just a sub-tree.</span></span>  
  
 <span data-ttu-id="549aa-250">Se `addSchemaInfo` é `true`, em seguida, esse método popula a árvore XML com o infoset de post-schema-validação (psvi POST).</span><span class="sxs-lookup"><span data-stu-id="549aa-250">If `addSchemaInfo` is `true`, then this method populates the XML tree with the post-schema-validation infoset (PSVI).</span></span>  
  
 <span data-ttu-id="549aa-251">Há dois aspectos de populando a árvore XML com a psvi POST.</span><span class="sxs-lookup"><span data-stu-id="549aa-251">There are two aspects of populating the XML tree with the PSVI.</span></span>  
  
 <span data-ttu-id="549aa-252">Primeiro, uma anotação é adicionada a todos os nós na árvore de modo que você pode chamar <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> em um elemento ou atributo na árvore.</span><span class="sxs-lookup"><span data-stu-id="549aa-252">First, an annotation is added to all nodes in the tree such that you can now call <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> on an element or attribute in the tree.</span></span>  
  
 <span data-ttu-id="549aa-253">Em segundo lugar, os elementos padrão e os atributos definidos no XSD são adicionados à árvore XML.</span><span class="sxs-lookup"><span data-stu-id="549aa-253">Second, default elements and attributes defined in the XSD are added to the XML tree.</span></span> <span data-ttu-id="549aa-254">Chamando uma da <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> métodos, você pode determinar se um atributo ou elemento específico foi adicionado de XSD como um padrão de elemento ou atributo.</span><span class="sxs-lookup"><span data-stu-id="549aa-254">By calling one of the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> methods, you can determine if a specific element or attribute was added from the XSD as a default element or attribute.</span></span>  
  
 <span data-ttu-id="549aa-255">Se você passar `null` para `validationEventHandler`, em seguida, esse método gerará uma exceção após erros de validação.</span><span class="sxs-lookup"><span data-stu-id="549aa-255">If you pass `null` for `validationEventHandler`, then this method raises an exception upon validation errors.</span></span> <span data-ttu-id="549aa-256">Avisos de validação não gerará uma exceção.</span><span class="sxs-lookup"><span data-stu-id="549aa-256">Validation warnings will not raise an exception.</span></span>  
  
 <span data-ttu-id="549aa-257">Para validar uma subárvore, você pode usar uma instância de <xref:System.Xml.Schema.XmlSchemaObject>.</span><span class="sxs-lookup"><span data-stu-id="549aa-257">To validate a sub-tree, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>.</span></span> <span data-ttu-id="549aa-258">Você pode obter essa instância de várias maneiras.</span><span class="sxs-lookup"><span data-stu-id="549aa-258">You can obtain this instance in various ways.</span></span> <span data-ttu-id="549aa-259">Uma maneira fácil é da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="549aa-259">An easy way is as follows:</span></span>  
  
1.  <span data-ttu-id="549aa-260">Valide que um documento está de acordo com um esquema.</span><span class="sxs-lookup"><span data-stu-id="549aa-260">Validate that a document conforms to a schema.</span></span>  
  
2.  <span data-ttu-id="549aa-261">Adicionar validação post-schema infoset (psvi POST) ao chamar o <xref:System.Xml.Schema.Extensions.Validate%2A> método de extensão.</span><span class="sxs-lookup"><span data-stu-id="549aa-261">Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.</span></span>  
  
3.  <span data-ttu-id="549aa-262">Chamar o <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> método de extensão para recuperar um objeto que implementa <xref:System.Xml.Schema.IXmlSchemaInfo>.</span><span class="sxs-lookup"><span data-stu-id="549aa-262">Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>.</span></span> <span data-ttu-id="549aa-263">O objeto recuperado, você pode obter um <xref:System.Xml.Schema.XmlSchemaObject>.</span><span class="sxs-lookup"><span data-stu-id="549aa-263">From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.</span></span>  
  
    -   <span data-ttu-id="549aa-264">Se você receber um <xref:System.Xml.Schema.XmlSchemaObject> para um <xref:System.Xml.Linq.XElement>, o tipo será <xref:System.Xml.Schema.XmlSchemaElement>.</span><span class="sxs-lookup"><span data-stu-id="549aa-264">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.</span></span>  
  
    -   <span data-ttu-id="549aa-265">Se você receber um <xref:System.Xml.Schema.XmlSchemaObject> para um <xref:System.Xml.Linq.XAttribute>, o tipo será <xref:System.Xml.Schema.XmlSchemaAttribute>.</span><span class="sxs-lookup"><span data-stu-id="549aa-265">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.</span></span>  
  
 <span data-ttu-id="549aa-266">Depois que você tiver uma instância de um <xref:System.Xml.Schema.XmlSchemaObject>, você pode usar esse método para validar uma subárvore.</span><span class="sxs-lookup"><span data-stu-id="549aa-266">After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate a sub-tree..</span></span>  
  
   
  
## Examples  
  
```csharp  
  
                string xsdMarkup =  
    @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:sequence>  
          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
          <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  
           <xsd:complexType>  
            <xsd:simpleContent>  
             <xsd:extension base='xsd:string'>  
              <xsd:attribute name='Att1' default='Att1 Default Value'/>  
             </xsd:extension>  
            </xsd:simpleContent>  
           </xsd:complexType>  
          </xsd:element>  
         </xsd:sequence>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
XDocument doc1 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "c1"),  
        new XElement("Child2", "c2")  
    )  
);  
  
XDocument doc2 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "content1"),  
        new XElement("Child3", "content1")  
    )  
);  
  
Console.WriteLine("Validating doc1");  
bool errors = false;  
doc1.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     }, true);  
Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Validating doc2");  
errors = false;  
doc2.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     }, true);  
Console.WriteLine("doc2 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Contents of doc1:");  
Console.WriteLine(doc1);  
  
Console.WriteLine();  
Console.WriteLine("Contents of doc2:");  
Console.WriteLine(doc2);  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
        <?xml version='1.0'?>  
        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
            <xsd:element name='Root'>  
                <xsd:complexType>  
                    <xsd:sequence>  
                        <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
                        <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  
                            <xsd:complexType>  
                                <xsd:simpleContent>  
                                    <xsd:extension base='xsd:string'>  
                                        <xsd:attribute name='Att1' default='Att1 Default Value'/>  
                                    </xsd:extension>  
                                </xsd:simpleContent>  
                            </xsd:complexType>  
                        </xsd:element>  
                    </xsd:sequence>  
                </xsd:complexType>  
            </xsd:element>  
        </xsd:schema>  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = _  
        <?xml version='1.0'?>  
        <Root>  
            <Child1>c1</Child1>  
            <Child2>c2</Child2>  
        </Root>  
  
    Dim doc2 As XDocument = _  
        <?xml version='1.0'?>  
        <Root>  
            <Child1>content1</Child1>  
            <Child3>content1</Child3>  
        </Root>  
  
    Console.WriteLine("Validating doc1")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating doc2")  
    errors = False  
    doc2.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc2 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Contents of doc1:")  
    Console.WriteLine(doc1)  
  
    Console.WriteLine()  
    Console.WriteLine("Contents of doc2:")  
    Console.WriteLine(doc2)  
End Sub  
```  
  
 <span data-ttu-id="549aa-267">Este exemplo gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="549aa-267">This example produces the following output:</span></span>  
  
```  
Validating doc1  
doc1 validated  
  
Validating doc2  
The element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  
doc2 did not validate  
  
Contents of doc1:  
<Root>  
  <Child1>c1</Child1>  
  <Child2 Att1="Att1 Default Value">c2</Child2>  
</Root>  
  
Contents of doc2:  
<Root>  
  <Child1>content1</Child1>  
  <Child3>content1</Child3>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><span data-ttu-id="549aa-268">Gerado para erros de validação de XSD (linguagem de definição de esquema XML).</span><span class="sxs-lookup"><span data-stu-id="549aa-268">Thrown for XML Schema Definition Language (XSD) validation errors.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>