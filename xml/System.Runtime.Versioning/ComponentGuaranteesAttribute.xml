<Type Name="ComponentGuaranteesAttribute" FullName="System.Runtime.Versioning.ComponentGuaranteesAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b2074d12e1adf5e1521480a31fee44197ad632d1" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39756320" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ComponentGuaranteesAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ComponentGuaranteesAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Versioning.ComponentGuaranteesAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ComponentGuaranteesAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ComponentGuaranteesAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type ComponentGuaranteesAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Module | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Constructor | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Event | System.AttributeTargets.Interface | System.AttributeTargets.Delegate, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Constructor | System.AttributeTargets.Delegate | System.AttributeTargets.Enum | System.AttributeTargets.Event | System.AttributeTargets.Interface | System.AttributeTargets.Method | System.AttributeTargets.Module | System.AttributeTargets.Property | System.AttributeTargets.Struct, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Define a garantia de compatibilidade de um componente, tipo ou membro de tipo que podem abranger várias versões.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> é usado por desenvolvedores de componentes e bibliotecas de classes para indicar o nível de compatibilidade que os consumidores de suas bibliotecas podem esperar entre várias versões. Ele indica o nível de garantia de que uma versão futura da biblioteca ou componente não será interrompido para um cliente existente. Os clientes podem, em seguida, usar o <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> como um auxílio na criação de suas próprias interfaces para garantir a estabilidade entre versões.  
  
> [!NOTE]
>  O common language runtime (CLR) não usa esse atributo de forma alguma. Seu valor está em documentar formalmente a intenção do autor do componente. Ferramentas de tempo de compilação também podem usar essas declarações para detectar erros de tempo de compilação que interromperiam caso contrário, a garantia de declarado.  
  
## <a name="levels-of-compatibility"></a>Níveis de compatibilidade  
 O <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> suporta os seguintes níveis de compatibilidade, que são representados por membros do <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> enumeração:  
  
-   Não há compatibilidade com a versão (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None?displayProperty=nameWithType>). O cliente pode esperar que futuras versões interromperá o cliente existente. Para obter mais informações, consulte o [sem compatibilidade](#None) seção mais adiante neste tópico.  
  
-   Compatibilidade de versão para versão lado a lado (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide?displayProperty=nameWithType>). O componente foi testado para funcionar quando mais de uma versão do assembly é carregada no mesmo domínio do aplicativo. Em geral, as versões futuras poderão interromper a compatibilidade. No entanto, quando são feitas alterações significativas, a versão antiga não é modificada, mas existe junto com a nova versão. Execução lado a lado é a forma esperada para fazer com que os clientes existentes funcionar quando forem feitas alterações significativas. Para obter mais informações, consulte o [Side-by-Side compatibilidade](#SideBySide) seção mais adiante neste tópico.  
  
-   Estável compatibilidade de versão para versão (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable?displayProperty=nameWithType>). Versões futuras não devem ser interrompido o cliente e execução lado a lado não deve ser necessário. No entanto, se o cliente for interrompido inadvertidamente, pode ser possível usar a execução lado a lado para corrigir o problema. Para obter mais informações, consulte o [compatibilidade estável](#Standard) seção.  
  
-   Compatibilidade com a versão do Exchange (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange?displayProperty=nameWithType>). Extraordinária cuidado para garantir que a versões futuras não interrompam o cliente. O cliente deve usar apenas esses tipos na assinatura de interfaces que são usados para comunicação com outros assemblies que são implantados independentemente um do outro. Somente uma versão desses tipos deve estar em um domínio de determinado aplicativo, o que significa que, se um cliente for interrompido, a execução lado a lado não é possível corrigir o problema de compatibilidade. Para obter mais informações, consulte o [compatibilidade de tipo de Exchange](#Exchange) seção.  
  
 As seções a seguir discutem cada nível de garantia mais detalhadamente.  
  
<a name="None"></a>   
### <a name="no-compatibility"></a>Não há compatibilidade  
 Marcar um componente como <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None?displayProperty=nameWithType> indica que o provedor não oferece garantias sobre a compatibilidade. Os clientes devem evitar fazer todas as dependências nas interfaces expostas. Esse nível de compatibilidade é útil para tipos que são experimentais ou que são expostos publicamente, mas servem apenas para os componentes que estão sempre atualizados ao mesmo tempo. <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None> indica explicitamente que este componente não deve ser usado por componentes externos.  
  
<a name="SideBySide"></a>   
### <a name="side-by-side-compatibility"></a>Compatibilidade lado a lado  
 Marcar um componente como <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide?displayProperty=nameWithType> indica que o componente foi testado para funcionar quando mais de uma versão do assembly é carregada no mesmo domínio do aplicativo. Alterações significativas são permitidas, desde que elas são feitas para o assembly que tem o maior número de versão. Componentes que estão associados a uma versão antiga do assembly deverão continuar a associar à versão antiga e outros componentes podem associar a nova versão. Também é possível atualizar um componente que é declarado como <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide> modificando a versão antiga de forma destrutiva.  
  
<a name="Standard"></a>   
### <a name="stable-compatibility"></a>Compatibilidade estável  
 Marcação de um tipo como <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable?displayProperty=nameWithType> indica que o tipo deve permanecer estável entre versões. No entanto, também é possível que versões lado a lado de um tipo estável para existir no mesmo domínio do aplicativo.  
  
 Tipos estáveis mantém uma barra de alta compatibilidade binária. Por causa disso, provedores devem evitar fazer alterações significativas para tipos estáveis. Os seguintes tipos de alterações são aceitáveis:  
  
-   Adicionando campos de instância privados para ou remoção de campos de um tipo, desde que isso não interrompe o formato de serialização.  
  
-   Alterando um tipo não serializável para um tipo serializável. (No entanto, um tipo serializável não pode ser alterado para um tipo não serializável.)  
  
-   Gerando novo, mais as exceções derivadas de um método.  
  
-   Melhorando o desempenho de um método.  
  
-   Alterar o intervalo de valores de retorno, desde que a alteração não afeta negativamente a maioria dos clientes.  
  
-   Corrigindo sérios erros, se a justificativa de negócios é alta e o número de clientes afetados negativamente é baixa.  
  
 Como as novas versões dos componentes estáveis não são esperadas para dividir os clientes existentes, geralmente, apenas uma versão de um componente estável é necessária em um domínio de aplicativo. No entanto, isso não é um requisito porque estáveis tipos não são usados como tipos conhecidos do exchange que todos os componentes concordem com. Portanto, se uma nova versão de um componente estável, inadvertidamente, interromper algum componente, e outros componentes precisam a nova versão, é possível corrigir o problema Carregando tanto o componente novo e antigo.  
  
 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> Fornece uma maior garantia de compatibilidade de versão que <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>. É um padrão comum para várias versões de componentes.  
  
 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> pode ser combinado com <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide>, que declara que o componente não interromperá a compatibilidade, mas é testado para funcionar quando mais de uma versão é carregada em um determinado domínio de aplicativo.  
  
 Depois que um tipo ou método é marcado como <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>, ele pode ser atualizado para <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>. No entanto, não é possível fazer downgrade para <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>.  
  
<a name="Exchange"></a>   
### <a name="exchange-type-compatibility"></a>Compatibilidade de tipo do Exchange  
 Marcação de um tipo como <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange?displayProperty=nameWithType> fornece uma maior garantia de compatibilidade de versão que <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>e deve ser aplicada a todos os tipos mais estável. Esses tipos destinam-se a ser usado para o intercâmbio entre os componentes internos de forma independente entre todos os limites de componente em tempo de ambos (qualquer versão do CLR) ou qualquer versão de um componente ou aplicativo e o espaço (processo cruzado, cross-CLR em um processo, entre domínios do aplicativo em um CLR). Se uma alteração significativa é feita para um tipo de troca, é impossível corrigir o problema ao carregar várias versões do tipo.  
  
 Tipos de troca devem ser alterados somente quando um problema é muito sério (como um problema de segurança grave) ou a probabilidade de ruptura for muito baixa (ou seja, se o comportamento já foi interrompido de forma aleatória código pode não ter perfeitamente obtido uma dependência na). Você pode fazer os seguintes tipos de alterações para um tipo de troca:  
  
-   Adicione a herança das novas definições de interface.  
  
-   Adicione novos métodos particulares que implementam os métodos de definições de interface herdada recentemente.  
  
-   Adicione novos campos estáticos.  
  
-   Adicione novos métodos estáticos.  
  
-   Adicione novos métodos de instância não virtual.  
  
 A seguir é consideradas alterações significativas e não é permitidas para tipos primitivos:  
  
-   Alterando formatos de serialização. Serialização tolerante a versão é necessária.  
  
-   Adicionar ou remover campos de instância privados. Isso gera o risco de alterar o formato de serialização do tipo e quebra de código do cliente que usa a reflexão.  
  
-   Alterando a capacidade de serialização de um tipo. Um tipo não serializável não pode ser tornado serializável e vice-versa.  
  
-   Lançando exceções diferentes de um método.  
  
-   Alterar o intervalo de valores de retorno do método, a menos que a definição de membro gera essa possibilidade e indica claramente como os clientes devem tratar valores desconhecidos.  
  
-   Corrigir a maioria dos bugs. Os consumidores do tipo dependerá do comportamento existente.  
  
 Depois de um componente, tipo ou membro é marcado com o <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange> garantir, ele não pode ser alterado para um <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> ou <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>.  
  
 Normalmente, os tipos do exchange são os tipos básicos (como <xref:System.Int32> e <xref:System.String> no .NET Framework) e interfaces (como <xref:System.Collections.Generic.IList%601>, <xref:System.Collections.Generic.IEnumerable%601>, e <xref:System.IComparable%601>) que são comumente usados em interfaces públicas.  
  
 Tipos de troca podem expor publicamente somente outros tipos que também são marcados com <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange> compatibilidade. Além disso, os tipos de intercâmbio não podem depender do comportamento das APIs do Windows que estão sujeitos a alteração.  
  
## <a name="component-guarantees-a-summary"></a>Garantias de componente: Um resumo  
 A tabela a seguir indica como as características e o uso de um componente afetam sua garantia de compatibilidade.  
  
|Características de componente|Exchange|Estável|Lado a lado|Nenhum|  
|-------------------------------|--------------|------------|--------------------|----------|  
|Pode ser usado nas interfaces entre componentes dessa versão independentemente.|S|N|N|N|  
|Pode ser usada (em particular) por um assembly que as versões de forma independente.|S|S|S|N|  
|Pode ter várias versões em um único domínio de aplicativo.|N|S|S|S|  
|Pode fazer alterações significativas|N|N|S|S|  
|Testado para certificar-se de que várias versões do assembly podem ser carregadas juntos.|N|N|S|N|  
|Pode fazer alterações significativas em vigor.|N|N|N|S|  
|Pode fazer muito seguro sem interrupção manutenção alterações em vigor.|S|S|S|S|  
  
## <a name="applying-the-attribute"></a>Aplicando o atributo  
 Você pode aplicar o <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> para um assembly, um tipo ou um membro de tipo. Seu aplicativo é hierárquico. Isto é, por padrão, a garantia de definido pelo <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> propriedade do atributo no nível de assembly define a garantia de todos os tipos no assembly e todos os membros desses tipos. Da mesma forma, se a garantia é aplicada ao tipo, por padrão ele também se aplica a cada membro do tipo.  
  
 Essa garantia herdada pode ser substituída aplicando o <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> para tipos individuais e membros de tipo. No entanto, garantias de que substituem o padrão só podem reduzir a garantia; eles não podem fortalecê-la. Por exemplo, se um assembly é marcado com o <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None> garantir, seus tipos e membros não tem nenhuma garantia de compatibilidade e quaisquer outra garantia de que é aplicada a tipos ou membros no assembly será ignorada.  
  
## <a name="testing-the-guarantee"></a>Testando a garantia de  
 O <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> propriedade retorna um membro a <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> enumeração, que é marcada com o <xref:System.FlagsAttribute> atributo. Isso significa que você deve testar para o sinalizador que você está interessado mascarando distante sinalizadores potencialmente desconhecidos. Por exemplo, o exemplo a seguir testa se um tipo é marcado como <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>.  
  
 [!code-csharp[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#1)]
 [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#1)]  
  
 O exemplo a seguir testa se um tipo é marcado como <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> ou <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>.  
  
 [!code-csharp[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#2)]
 [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#2)]  
  
 O seguinte exemplo para testes de redução de um tipo está marcado como <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None> (ou seja, nenhum dos dois <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> nem <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>).  
  
 [!code-csharp[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#3)]
 [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Versioning.ComponentGuaranteesOptions" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComponentGuaranteesAttribute (System.Runtime.Versioning.ComponentGuaranteesOptions guarantees);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.Versioning.ComponentGuaranteesOptions guarantees) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (guarantees As ComponentGuaranteesOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ComponentGuaranteesAttribute(System::Runtime::Versioning::ComponentGuaranteesOptions guarantees);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Versioning.ComponentGuaranteesAttribute : System.Runtime.Versioning.ComponentGuaranteesOptions -&gt; System.Runtime.Versioning.ComponentGuaranteesAttribute" Usage="new System.Runtime.Versioning.ComponentGuaranteesAttribute guarantees" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="guarantees" Type="System.Runtime.Versioning.ComponentGuaranteesOptions" />
      </Parameters>
      <Docs>
        <param name="guarantees">Um dos valores de enumeração que especifica o nível de compatibilidade garantido entre várias versões.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.Versioning.ComponentGuaranteesAttribute" /> com um valor que indica o nível de compatibilidade garantido de uma biblioteca, um tipo ou um membro entre várias versões.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando o <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> classe é instanciada, o valor da `guarantees` parâmetro é atribuído ao <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> propriedade.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Guarantees">
      <MemberSignature Language="C#" Value="public System.Runtime.Versioning.ComponentGuaranteesOptions Guarantees { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.Versioning.ComponentGuaranteesOptions Guarantees" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Guarantees As ComponentGuaranteesOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Versioning::ComponentGuaranteesOptions Guarantees { System::Runtime::Versioning::ComponentGuaranteesOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Guarantees : System.Runtime.Versioning.ComponentGuaranteesOptions" Usage="System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Versioning.ComponentGuaranteesOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica o nível de compatibilidade garantido de uma biblioteca, um tipo ou um membro que abrange várias versões.</summary>
        <value>Um dos valores de enumeração que especifica o nível de compatibilidade garantido entre várias versões.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor da <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> propriedade corresponde à `guarantees` parâmetro do <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.%23ctor%2A> construtor.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>