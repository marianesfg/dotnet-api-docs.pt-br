<Type Name="IdnMapping" FullName="System.Globalization.IdnMapping">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="57a3f1970833b876294c8fd9ac91b8e658233e24" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37655168" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class IdnMapping" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit IdnMapping extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.IdnMapping" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IdnMapping" />
  <TypeSignature Language="C++ CLI" Value="public ref class IdnMapping sealed" />
  <TypeSignature Language="F#" Value="type IdnMapping = class" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization.Extensions</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Suporta o uso de caracteres não ASCII para nomes de domínio da Internet. Essa classe não pode ser herdada.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um nome de domínio da Internet consiste em uma ou mais partes, chamados rótulos de nome de domínio, separados por separadores de rótulo. Por exemplo, o nome de domínio "www.proseware.com" consiste de rótulos, "www", "proseware" e "com", separados por pontos. Nomes de domínio padrão consistem em caracteres designados no intervalo de caracteres US-ASCII (ou Latim básico), de u+0021 a U + 007E. Para facilitar o uso da Internet em culturas que não usam o conjunto de caracteres US-ASCII, os nomes de domínio em aplicativos (IDNA) internacionalização padrão foi adotado em 2003 para dar suporte à inclusão de caracteres Unicode fora do intervalo de caracteres US-ASCII. No entanto, a resolução de nome de domínio e servidores de nomes continuam contar caracteres dentro do intervalo de caracteres US-ASCII.  
  
 O mecanismo IDNA usa Punycode para mapear um nome de domínio internacionalizados que contém caracteres Unicode fora do intervalo de caracteres US-ASCII no intervalo de caracteres US-ASCII com suporte pelo sistema de nomes de domínio. O mecanismo IDNA é usado para converter nomes de domínio apenas, não há suporte para os dados transmitidos pela Internet.  
  
> [!IMPORTANT]
>  No [!INCLUDE[net_v45](~/includes/net-v45-md.md)], o <xref:System.Globalization.IdnMapping> classe dá suporte a versões diferentes do padrão IDNA, dependendo do sistema operacional em uso:  
>   
>  -   Quando executado no [!INCLUDE[win8](~/includes/win8-md.md)], ele dá suporte à versão 2008 do padrão IDNA descrito pela [RFC 5891: nomes de domínio internacionalizados em aplicativos IDNA (): protocolo](http://go.microsoft.com/fwlink/?LinkId=231875).  
> -   Quando executado em versões anteriores do sistema operacional Windows, ele oferece suporte a versão 2003 standard descrito pela [RFC 3490: internacionalização IDNA Domain Names in Applications ()](http://go.microsoft.com/fwlink/?LinkId=158110).  
>   
>  Ver [Unicode Technical Standard #46: processamento de compatibilidade IDNA](http://go.microsoft.com/fwlink/?LinkId=232459) para as diferenças na maneira como esses padrões lidar com determinados conjuntos de caracteres.  
  
 O <xref:System.Globalization.IdnMapping.GetAscii%2A?displayProperty=nameWithType> método normaliza um nome de domínio, converte o nome normalizado em uma representação que consiste em caracteres Unicode exibíveis no intervalo de ponto de código (U + 0020 a U + 007E) US-ASCII e precede um prefixo de codificação (ACE) compatíveis com ASCII (" xn--") a cada rótulo. O <xref:System.Globalization.IdnMapping.GetUnicode%2A?displayProperty=nameWithType> método restaura os rótulos de nome de domínio convertidos pelo <xref:System.Globalization.IdnMapping.GetAscii%2A> método.  
  
 Se a cadeia de caracteres a ser convertida inclui o separador de rótulo caracteres IDEOGRÁFICOS FINALO (U + 3002), largura total FINALO (U + FF0E) e SEMILARGURA IDEOGRÁFICOS FINALO (U + FF61), o <xref:System.Globalization.IdnMapping.GetAscii%2A> método converte-os para o separador de rótulo FINALO (período, U + 002E). O <xref:System.Globalization.IdnMapping.GetUnicode%2A> método, no entanto, não restaure o caractere separador de rótulo original.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> internacionalizados de método para converter uma matriz de nomes de domínio em Punycode. O <xref:System.Globalization.IdnMapping.GetUnicode%2A> método converte o nome de domínio Punycode novamente para o nome de domínio original, mas substitui os separadores de rótulo original com o separador de rótulo padrão.  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Todos os métodos públicos das <see cref="T:System.Globalization.IdnMapping" /> são thread-safe e podem ser usados simultaneamente de vários threads, contanto que o <see cref="T:System.Globalization.IdnMapping" /> propriedades da instância não também são definidas ao mesmo tempo.</threadsafe>
    <altmember cref="Overload:System.String.Normalize" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IdnMapping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IdnMapping();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Globalization.IdnMapping" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Globalization.IdnMapping.AllowUnassigned%2A?displayProperty=nameWithType> e <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A?displayProperty=nameWithType> as propriedades são inicializadas para `false`. (U + 002D), de caracteres de um pequeno subconjunto de caracteres ASCII que não seja A-Z, 0-9, hífen (-) e o caractere de ponto (.) são permitidos em nomes de domínio, mas não são de pontos de código Unicode não atribuídos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowUnassigned">
      <MemberSignature Language="C#" Value="public bool AllowUnassigned { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUnassigned" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.AllowUnassigned" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowUnassigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowUnassigned { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowUnassigned : bool with get, set" Usage="System.Globalization.IdnMapping.AllowUnassigned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se os pontos de código Unicode não atribuídos são usados em operações realizadas por membros do objeto <see cref="T:System.Globalization.IdnMapping" /> atual.</summary>
        <value>
          <see langword="true" /> Se os pontos de código não atribuídos são usados em operações; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um nome de domínio registrado não pode conter pontos de código não atribuídos. Consequentemente, o valor padrão de <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> é de propriedade `false`. A especificação de IDNA permite que pontos de código não atribuídos apenas em consultas para correspondência de cadeias de caracteres (isto é, na pesquisa de nome de domínio). Para obter mais informações sobre o uso de pontos de código não atribuídos em nomes de domínio, consulte [RFC 3454, "Preparação de cadeias de caracteres internacionalizado (stringprep)"](http://go.microsoft.com/fwlink/?LinkId=231873) e [RFC 5891, "nomes de domínio internacionalizado em aplicativos ( IDNA): protocolo "](http://go.microsoft.com/fwlink/?LinkId=231875).  
  
> [!IMPORTANT]
>  Se o <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> é de propriedade `false`, o comportamento associado com a propriedade depende do sistema operacional subjacente. Na [!INCLUDE[win8](~/includes/win8-md.md)], o <xref:System.Globalization.IdnMapping> classe está em conformidade com IDNA 2008, que se baseia no padrão Unicode 6.0. Em versões anteriores do Windows, o <xref:System.Globalization.IdnMapping> classe baseia-se no IDNA 2003, que é baseado em Unicode 3.* x*. Alguns pontos de código que estavam não atribuídos no IDNA 2003 foram atribuídos caracteres e têm suporte no 2008 IDNA. Por exemplo, a U + 0221 foi introduzido no Unicode 4.0. Em [!INCLUDE[win8](~/includes/win8-md.md)], ele é codificado como "xn — 6la". Em versões anteriores do Windows, ele gerará um <xref:System.ArgumentException> exceção.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="idnMapping.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">O objeto a ser comparado com o objeto atual.</param>
        <summary>Indica se um objeto especificado e o objeto <see cref="T:System.Globalization.IdnMapping" /> atual são iguais.</summary>
        <returns>
          <see langword="true" /> se o objeto especificado pelo parâmetro <paramref name="obj" /> é derivado de <see cref="T:System.Globalization.IdnMapping" /> e suas propriedades <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> e <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> são iguais; caso contrário, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAscii">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Codifica uma cadeia de caracteres de rótulos de nome de domínio que incluem caracteres Unicode fora do intervalo de caracteres US-ASCII para uma cadeia de caracteres Unicode exibíveis no intervalo de caracteres US-ASCII (U+0020 a U+007E). A cadeia de caracteres é formatada de acordo com o padrão IDNA.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string -&gt; string" Usage="idnMapping.GetAscii unicode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="unicode">A cadeia de caracteres a converter, que consiste em um ou mais rótulos de nome de domínio delimitados com separadores de rótulo.</param>
        <summary>Codifica uma cadeia de caracteres de rótulos de nome de domínio que consistem em caracteres Unicode para uma cadeia de caracteres Unicode exibíveis no intervalo de caracteres US-ASCII. A cadeia de caracteres é formatada de acordo com o padrão IDNA.</summary>
        <returns>O equivalente à cadeia de caracteres especificada pelo parâmetro <paramref name="unicode" />, consistindo de caracteres Unicode exibíveis no intervalo de caracteres US-ASCII (U+0020 a U+007E) e formatados de acordo com o padrão IDNA.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `unicode` parâmetro especifica uma cadeia de caracteres de um ou mais rótulos que consistem em caracteres Unicode válidos. Os rótulos são separados por separadores de rótulo. O `unicode` parâmetro não pode começar com um separador de rótulo, mas ele pode incluir e, opcionalmente, terminar com um separador. Os separadores de rótulo são o ponto final (002E períodos, U +), completo IDEOGRÁFICO parar (U + 3002), largura total FINALO (U + FF0E) e SEMILARGURA IDEOGRÁFICOS FINALO (U + FF61). Por exemplo, o nome de domínio "www.adatum.com" consiste de rótulos, "www", "adatum" e "com", separados por pontos.  
  
 Um rótulo não pode conter nenhum dos seguintes caracteres:  
  
-   Caracteres de controle Unicode de U + 0001 por meio de U + 001F e U + 007F.  
  
-   Não atribuídos a caracteres Unicode, se o valor da <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> é de propriedade `false`.  
  
-   Intervalo, como o espaço de caracteres de caracteres não-padrão em US-ASCII (u+0020), EXCLAMAÇÃO marcar (u+0021), e baixa os caracteres de linha (U + 005F), se o valor da <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> é de propriedade `true`.  
  
-   Caracteres que são proibidos por uma versão específica do padrão IDNA. Para obter mais informações sobre caracteres proibidos, consulte [RFC 3454: preparação de internacionalizados cadeias de caracteres ("stringprep")](http://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003, e [RFC 5982: os pontos de código Unicode e nomes de domínio internacionalizados para Aplicativos](http://go.microsoft.com/fwlink/?LinkId=231877) IDNA 2008.  
  
 O <xref:System.Globalization.IdnMapping.GetAscii%2A> método converte todos os separadores de rótulo para o ponto final (002E períodos, U +).  
  
 Se `unicode` não contém caracteres US-ASCII fora do intervalo de caracteres e nenhum caractere dentro do intervalo de caracteres US-ASCII é proibido, o método retorna `unicode` inalterado.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> método para converter uma matriz de internacionalizados nomes de domínio em Punycode, que é o equivalente codificado que consiste em caracteres no intervalo de caracteres US-ASCII. O <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29> método converte o nome de domínio Punycode volta para o nome de domínio original, mas substitui os separadores de rótulo original com o separador de rótulo padrão.  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unicode" /> é inválido, com base nas propriedades <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> e <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> e no padrão IDNA.</exception>
        <block subset="none" type="usage">
          <para>No [!INCLUDE[net_v45](~/includes/net-v45-md.md)], o <see cref="T:System.Globalization.IdnMapping" /> classe dá suporte a versões diferentes do padrão IDNA, dependendo do sistema operacional em uso: - quando executado no [!INCLUDE[win8](~/includes/win8-md.md)], dá suporte à versão 2008 do padrão IDNA descrito pela [5891 RFC: Nomes de domínio em aplicativos (IDNA) internacionalizados: protocolo](http://go.microsoft.com/fwlink/?LinkId=231875).  -Quando executados em versões anteriores do sistema operacional Windows, ele oferece suporte a versão 2003 standard descrito pela [RFC 3490: internacionalização IDNA Domain Names in Applications ()](http://go.microsoft.com/fwlink/?LinkId=158110).  Ver [Unicode Technical Standard #46: processamento de compatibilidade IDNA](http://go.microsoft.com/fwlink/?LinkId=232459) para as diferenças na maneira como esses padrões lidar com determinados conjuntos de caracteres.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode, int index);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string * int -&gt; string" Usage="idnMapping.GetAscii (unicode, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">A cadeia de caracteres a converter, que consiste em um ou mais rótulos de nome de domínio delimitados com separadores de rótulo.</param>
        <param name="index">Um deslocamento de base zero em <c>unicode</c> que especifica o início da subcadeia de caracteres a converter. A operação de conversão continua até o final da cadeia de caracteres <c>unicode</c>.</param>
        <summary>Codifica uma subcadeia de caracteres de rótulos de nome de domínio que incluem caracteres Unicode fora do intervalo de caracteres US-ASCII. A subcadeia de caracteres é convertida em uma cadeia de caracteres Unicode exibíveis no intervalo de caracteres US-ASCII e é formatada segundo o padrão IDNA.</summary>
        <returns>O equivalente à subcadeia de caracteres especificada pelos parâmetros <paramref name="unicode" /> e <paramref name="index" />, consistindo de caracteres Unicode exibíveis no intervalo de caracteres US-ASCII (U+0020 a U+007E) e formatados de acordo com o padrão IDNA.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `unicode` e `index` parâmetros definem uma subcadeia de caracteres com um ou mais rótulos que consistem em caracteres Unicode válidos. Os rótulos são separados por separadores de rótulo. O primeiro caractere da subcadeia de caracteres não pode começar com um separador de rótulo, mas ele pode incluir e, opcionalmente, terminar com um separador. Os separadores de rótulo são o ponto final (002E períodos, U +), completo IDEOGRÁFICO parar (U + 3002), largura total FINALO (U + FF0E) e SEMILARGURA IDEOGRÁFICOS FINALO (U + FF61). Por exemplo, o nome de domínio "www.adatum.com" consiste de rótulos, "www", "adatum" e "com", separados por pontos.  
  
 Um rótulo não pode conter nenhum dos seguintes caracteres:  
  
-   Caracteres de controle Unicode de U + 0001 por meio de U + 001F e U + 007F.  
  
-   Não atribuídos a caracteres Unicode, dependendo do valor da <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> propriedade.  
  
-   Intervalo, como o espaço de caracteres de caracteres não-padrão em US-ASCII (u+0020), ponto de EXCLAMAÇÃO marcar (u+0021) e caracteres de linha de baixo (U + 005F), dependendo do valor da <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> propriedade.  
  
-   Caracteres que são proibidos por uma versão específica do padrão IDNA. Para obter mais informações sobre caracteres proibidos, consulte [RFC 3454: preparação de internacionalizados cadeias de caracteres ("stringprep")](http://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003, e [RFC 5982: os pontos de código Unicode e nomes de domínio internacionalizados para Aplicativos](http://go.microsoft.com/fwlink/?LinkId=231877) IDNA 2008.  
  
 O <xref:System.Globalization.IdnMapping.GetAscii%2A> método converte todos os separadores de rótulo para o ponto final (002E períodos, U +).  
  
 Se `unicode` não contém caracteres US-ASCII fora do intervalo de caracteres e nenhum caractere dentro do intervalo de caracteres US-ASCII é proibido, o método retorna `unicode` inalterado.  
  
   
  
## Examples  
 O exemplo a seguir remove a parte local e o caractere de um endereço de email e passa @ o resultante nome de domínio para o <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29> método para criar um nome de domínio Punycode, que é o equivalente codificado que consiste em caracteres US-ASCII intervalo de caracteres. O <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> método converte o nome de domínio Punycode volta para o nome de domínio original, mas substitui os separadores de rótulo original com o separador de rótulo padrão.  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1a.cs#2)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> é menor que zero.  
  
- ou - 
 <paramref name="index" /> é maior que o comprimento do <paramref name="unicode" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unicode" /> é inválido, com base nas propriedades <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> e <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> e no padrão IDNA.</exception>
        <block subset="none" type="usage">
          <para>No [!INCLUDE[net_v45](~/includes/net-v45-md.md)], o <see cref="T:System.Globalization.IdnMapping" /> classe dá suporte a versões diferentes do padrão IDNA, dependendo do sistema operacional em uso: - quando executado no [!INCLUDE[win8](~/includes/win8-md.md)], dá suporte à versão 2008 do padrão IDNA descrito pela [5891 RFC: Nomes de domínio em aplicativos (IDNA) internacionalizados: protocolo](http://go.microsoft.com/fwlink/?LinkId=231875).  -Quando executados em versões anteriores do sistema operacional Windows, ele oferece suporte a versão 2003 standard descrito pela [RFC 3490: internacionalização IDNA Domain Names in Applications ()](http://go.microsoft.com/fwlink/?LinkId=158110).  Ver [Unicode Technical Standard #46: processamento de compatibilidade IDNA](http://go.microsoft.com/fwlink/?LinkId=232459) para as diferenças na maneira como esses padrões lidar com determinados conjuntos de caracteres.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String, index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string * int * int -&gt; string" Usage="idnMapping.GetAscii (unicode, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">A cadeia de caracteres a converter, que consiste em um ou mais rótulos de nome de domínio delimitados com separadores de rótulo.</param>
        <param name="index">Um deslocamento de base zero em <c>unicode</c> que especifica o início da subcadeia de caracteres.</param>
        <param name="count">O número de caracteres a converter na subcadeia de caracteres que começa na posição especificada por <c>index</c> na cadeia de caracteres <c>unicode</c>.</param>
        <summary>Codifica o número de caracteres especificados em uma subcadeia de caracteres de rótulos de nome de domínio que incluem caracteres Unicode fora do intervalo de caracteres US-ASCII. A subcadeia de caracteres é convertida em uma cadeia de caracteres Unicode exibíveis no intervalo de caracteres US-ASCII e é formatada segundo o padrão IDNA.</summary>
        <returns>O equivalente à subcadeia de caracteres especificada pelos parâmetros <paramref name="unicode" />, <paramref name="index" /> e <paramref name="count" />, consistindo de caracteres Unicode exibíveis no intervalo de caracteres US-ASCII (U+0020 a U+007E) e formatados de acordo com o padrão IDNA.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `Unicode`, `index`, e `count` parâmetros definem uma subcadeia de caracteres com um ou mais rótulos que consistem em caracteres Unicode válidos. Os rótulos são separados por separadores de rótulo. O primeiro caractere da subcadeia de caracteres não pode começar com um separador de rótulo, mas ele pode incluir e, opcionalmente, terminar com um separador. Os separadores de rótulo são o ponto final (002E períodos, U +), completo IDEOGRÁFICO parar (U + 3002), largura total FINALO (U + FF0E) e SEMILARGURA IDEOGRÁFICOS FINALO (U + FF61). Por exemplo, o nome de domínio "www.adatum.com" consiste de rótulos, "www", "adatum" e "com", separados por pontos.  
  
 Um rótulo não pode conter nenhum dos seguintes caracteres:  
  
-   Caracteres de controle Unicode de U + 0001 por meio de U + 001F e U + 007F.  
  
-   Não atribuídos a caracteres Unicode, dependendo do valor da <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> propriedade.  
  
-   Intervalo, como o espaço de caracteres de caracteres não-padrão em US-ASCII (u+0020), ponto de EXCLAMAÇÃO marcar (u+0021) e caracteres de linha de baixo (U + 005F), dependendo do valor da <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> propriedade.  
  
-   Caracteres que são proibidos por uma versão específica do padrão IDNA. Para obter mais informações sobre caracteres proibidos, consulte [RFC 3454: preparação de internacionalizados cadeias de caracteres ("stringprep")](http://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003, e [RFC 5982: os pontos de código Unicode e nomes de domínio internacionalizados para Aplicativos](http://go.microsoft.com/fwlink/?LinkId=231877) IDNA 2008.  
  
 O <xref:System.Globalization.IdnMapping.GetAscii%2A> método converte todos os separadores de rótulo para o ponto final (002E períodos, U +). Se a subcadeia de caracteres não contém nenhum caractere fora do intervalo de caracteres US-ASCII e nenhum caractere dentro do intervalo de caracteres US-ASCII é proibido, o método retorna a subcadeia de caracteres inalterada.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> método para converter nomes de domínio internacionalizados para um nome de domínio que está em conformidade com o padrão IDNA. O <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> método converte o nome de domínio padronizado volta para o nome de domínio original, mas substitui os separadores de rótulo original com o separador de rótulo padrão.  
  
 [!code-csharp[IdnMapping.GetX#1](~/samples/snippets/csharp/VS_Snippets_CLR/IdnMapping.GetX/CS/getx.cs#1)]
 [!code-vb[IdnMapping.GetX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IdnMapping.GetX/VB/getx.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> ou <paramref name="count" /> é menor que zero.  
  
- ou - 
 <paramref name="index" /> é maior que o comprimento do <paramref name="unicode" />.  
  
- ou - 
 <paramref name="index" /> é maior que o tamanho de <paramref name="unicode" /> menos <paramref name="count" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unicode" /> é inválido, com base nas propriedades <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> e <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> e no padrão IDNA.</exception>
        <block subset="none" type="usage">
          <para>No [!INCLUDE[net_v45](~/includes/net-v45-md.md)], o <see cref="T:System.Globalization.IdnMapping" /> classe dá suporte a versões diferentes do padrão IDNA, dependendo do sistema operacional em uso: - quando executado no [!INCLUDE[win8](~/includes/win8-md.md)], dá suporte à versão 2008 do padrão IDNA descrito pela [5891 RFC: Nomes de domínio em aplicativos (IDNA) internacionalizados: protocolo](http://go.microsoft.com/fwlink/?LinkId=231875).  -Quando executados em versões anteriores do sistema operacional Windows, ele oferece suporte a versão 2003 standard descrito pela [RFC 3490: internacionalização IDNA Domain Names in Applications ()](http://go.microsoft.com/fwlink/?LinkId=158110).  Ver [Unicode Technical Standard #46: processamento de compatibilidade IDNA](http://go.microsoft.com/fwlink/?LinkId=232459) para as diferenças na maneira como esses padrões lidar com determinados conjuntos de caracteres.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="idnMapping.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna um código hash para esse objeto <see cref="T:System.Globalization.IdnMapping" />.</summary>
        <returns>Uma de quatro constantes com sinal de 32 bits derivadas das propriedades de um objeto <see cref="T:System.Globalization.IdnMapping" />.  O valor retornado não tem nenhum significado especial e não é adequado para uso em um algoritmo de código hash.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Substituir o <xref:System.Globalization.IdnMapping.GetHashCode%2A> método se seu aplicativo precisa para implementar um algoritmo de código hash significativo.  
  
   
  
## Examples  
 O exemplo a seguir pressupõe que uma única cadeia de caracteres pode conter vários endereços de email separados por espaços. Ele remove a parte local e o caractere de cada endereço de email e passa @ o resultante nome de domínio para o <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29> ou <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> método para criar um nome de domínio Punycode. O <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> , em seguida, o método converte o nome de domínio Punycode volta para o nome de domínio original.  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1b.cs#3)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1b.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicode">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Decodifica um ou mais rótulos de nome de domínio, codificados de acordo com o padrão IDNA, em uma cadeia de caracteres Unicode.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string -&gt; string" Usage="idnMapping.GetUnicode ascii" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ascii">A cadeia de caracteres para decodificar, que consiste em um ou mais rótulos no intervalo de caracteres US-ASCII (U+0020 U+007E) codificados de acordo com o padrão IDNA.</param>
        <summary>Decodifica uma cadeia de caracteres de um ou mais rótulos de nome de domínio, codificados de acordo com o padrão IDNA, em uma cadeia de caracteres Unicode.</summary>
        <returns>O equivalente Unicode da subcadeia de caracteres IDNA especificada pelo parâmetro <paramref name="ascii" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações sobre separadores de rótulo, rótulos e nomes de domínio, consulte os comentários para o <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> internacionalizados de método para converter uma matriz de nomes de domínio em Punycode. O <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29> método converte o nome de domínio Punycode volta para o nome de domínio original, mas substitui os separadores de rótulo original com o separador de rótulo padrão.  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ascii" /> é inválido, com base nas propriedades <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> e <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> e no padrão IDNA.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii, int index);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string * int -&gt; string" Usage="idnMapping.GetUnicode (ascii, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">A cadeia de caracteres para decodificar, que consiste em um ou mais rótulos no intervalo de caracteres US-ASCII (U+0020 U+007E) codificados de acordo com o padrão IDNA.</param>
        <param name="index">Um deslocamento de base zero em <c>ascii</c> que especifica o início da subcadeia de caracteres a decodificar. A operação de decodificação continua até o final da cadeia de caracteres <c>ascii</c>.</param>
        <summary>Decodifica uma subcadeia de caracteres de um ou mais rótulos de nome de domínio, codificados de acordo com o padrão IDNA, em uma cadeia de caracteres Unicode.</summary>
        <returns>O equivalente Unicode da subcadeia de caracteres IDNA especificada pelos parâmetros <paramref name="ascii" /> e <paramref name="index" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações sobre separadores de rótulo, rótulos e nomes de domínio, consulte os comentários para o <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> é menor que zero.  
  
- ou - 
 <paramref name="index" /> é maior que o comprimento do <paramref name="ascii" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ascii" /> é inválido, com base nas propriedades <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> e <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> e no padrão IDNA.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String, index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string * int * int -&gt; string" Usage="idnMapping.GetUnicode (ascii, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">A cadeia de caracteres para decodificar, que consiste em um ou mais rótulos no intervalo de caracteres US-ASCII (U+0020 U+007E) codificados de acordo com o padrão IDNA.</param>
        <param name="index">Um deslocamento de base zero em <c>ascii</c> que especifica o início da subcadeia de caracteres.</param>
        <param name="count">O número de caracteres a converter na subcadeia de caracteres que começa na posição especificada por <c>index</c> na cadeia de caracteres <c>ascii</c>.</param>
        <summary>Decodifica uma subcadeia de caracteres de um tamanho especificado que contém um ou mais rótulos de nome de domínio, codificados de acordo com o padrão IDNA, em uma cadeia de caracteres Unicode.</summary>
        <returns>O equivalente Unicode da subcadeia de caracteres IDNA especificada pelos parâmetros <paramref name="ascii" />, <paramref name="index" /> e <paramref name="count" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações sobre separadores de rótulo, rótulos e nomes de domínio, consulte os comentários para o <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> ou <paramref name="count" /> é menor que zero.  
  
- ou - 
 <paramref name="index" /> é maior que o comprimento do <paramref name="ascii" />.  
  
- ou - 
 <paramref name="index" /> é maior que o tamanho de <paramref name="ascii" /> menos <paramref name="count" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ascii" /> é inválido, com base nas propriedades <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> e <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> e no padrão IDNA.</exception>
      </Docs>
    </Member>
    <Member MemberName="UseStd3AsciiRules">
      <MemberSignature Language="C#" Value="public bool UseStd3AsciiRules { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseStd3AsciiRules" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />
      <MemberSignature Language="VB.NET" Value="Public Property UseStd3AsciiRules As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseStd3AsciiRules { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseStd3AsciiRules : bool with get, set" Usage="System.Globalization.IdnMapping.UseStd3AsciiRules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se convenções de nomenclatura padrão ou amenas são usadas em operações realizadas por membros do objeto <see cref="T:System.Globalization.IdnMapping" /> atual.</summary>
        <value>
          <see langword="true" /> Se as convenções de nomenclatura padrão são usadas em operações; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nomes de domínio que seguem as regras de nomenclatura padrão consistem em um subconjunto específico de caracteres no intervalo de caracteres US-ASCII. Os caracteres são letras da a Z, os dígitos de 0 a 9, o caractere de hífen (-) (U + 002D) e o caractere de ponto (.). O caso dos caracteres não é significativo. Convenções de nomenclatura flexíveis permitem o uso de um intervalo mais amplo de ASCII (u+0020) de caracteres de caracteres, incluindo o espaço, o ponto de exclamação (u+0021) de caracteres e a barra inferior (U + 005F) de caracteres. Se <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> está `true`, somente caracteres padrão podem aparecer em um rótulo retornado pelo <xref:System.Globalization.IdnMapping.GetAscii%2A> método.  
  
 Por padrão, o valor de <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> é de propriedade `false`, e um subconjunto de caracteres ASCII de expandido é permitido em um rótulo.  
  
> [!NOTE]
>  O <xref:System.Globalization.IdnMapping> classe proíbe o uso dos caracteres nondisplayable u+0000 a U + 001F e U + 007F em nome de domínio rótulos independentemente da configuração do <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> propriedade. Esta proibição reduz o risco de ataques à segurança, como falsificação de nome.  
  
   
  
## Examples  
 O exemplo a seguir gera URLs que contêm caracteres no intervalo ASCII de u+0000 a U + 007F e passa para o <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> método de dois <xref:System.Globalization.IdnMapping> objetos. Um objeto tem seu <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> propriedade definida como `true`, e o outro objeto esteja definido como `false`. A saída exibe os caracteres inválidos quando o <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> é de propriedade `true` mas válida quando for `false`.  
  
 [!code-csharp[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/cs/usestd3asciirules1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/vb/usestd3asciirules1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>