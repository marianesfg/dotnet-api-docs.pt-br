<Type Name="IdnMapping" FullName="System.Globalization.IdnMapping">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4825d2cbe8edc0b55312a892a1a873eff67e20b6" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36486014" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class IdnMapping" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit IdnMapping extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.IdnMapping" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IdnMapping" />
  <TypeSignature Language="C++ CLI" Value="public ref class IdnMapping sealed" />
  <TypeSignature Language="F#" Value="type IdnMapping = class" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization.Extensions</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Supports the use of non-ASCII characters for Internet domain names. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um nome de domínio da Internet consiste em uma ou mais partes, chamados de rótulos de nome de domínio, separados por separadores de rótulo. Por exemplo, o nome de domínio "www.proseware.com" consiste de rótulos, "www", "proseware" e "com", separados por pontos. Nomes de domínio padrão consistem em caracteres designados no intervalo de caracteres US-ASCII (ou Latim básico), de U + 0021 a U + 007E. Para facilitar o uso da Internet em culturas que não usam o conjunto de caracteres US-ASCII, os nomes de domínio de internacionalização de aplicativos (IDNA) padrão foi adotada em 2003 para dar suporte à inclusão de caracteres Unicode fora do intervalo de caracteres US-ASCII. No entanto, servidores de nome e resolução de nome de domínio continuam a confiar em caracteres dentro do intervalo de caracteres US-ASCII.  
  
 O mecanismo IDNA usa Punycode para mapear um nome de domínio internacionalizados que contém caracteres Unicode fora do intervalo de caracteres US-ASCII para o intervalo de caracteres US-ASCII suportado pelo sistema de nomes de domínio. O mecanismo IDNA é usado para converter nomes de domínio apenas, não há suporte para os dados transmitidos pela Internet.  
  
> [!IMPORTANT]
>  No [!INCLUDE[net_v45](~/includes/net-v45-md.md)], o <xref:System.Globalization.IdnMapping> classe oferece suporte a versões diferentes do padrão IDNA, dependendo do sistema operacional em uso:  
>   
>  -   Quando executado em [!INCLUDE[win8](~/includes/win8-md.md)], ele dá suporte a versão 2008 do padrão IDNA descrito pela [RFC 5891: nomes de domínio internacionalizados em aplicativos (IDNA): protocolo](http://go.microsoft.com/fwlink/?LinkId=231875).  
> -   Quando executado em versões anteriores do sistema operacional Windows, ele oferece suporte a versão 2003 do padrão descrito pela [RFC 3490: nomes de domínio de internacionalização de aplicativos (IDNA)](http://go.microsoft.com/fwlink/?LinkId=158110).  
>   
>  Consulte [Unicode Technical Standard 46: processamento de compatibilidade IDNA](http://go.microsoft.com/fwlink/?LinkId=232459) para as diferenças no modo como esses padrões lidar com determinados conjuntos de caracteres.  
  
 O <xref:System.Globalization.IdnMapping.GetAscii%2A?displayProperty=nameWithType> método normaliza um nome de domínio, converte o nome em uma representação que consiste em caracteres de Unicode pode ser exibidas no intervalo de ponto de código de US-ASCII (U + 0020 U + 007E) e adiciona um prefixo de codificação (ACE) compatível ASCII (" xn--") para cada rótulo. O <xref:System.Globalization.IdnMapping.GetUnicode%2A?displayProperty=nameWithType> método restaura os rótulos de nome de domínio convertidos pelo <xref:System.Globalization.IdnMapping.GetAscii%2A> método.  
  
 Se a cadeia de caracteres a ser convertida inclui o separador de rótulo caracteres IDEOGRÁFICOS ponto final (U + 3002), largura ponto final (U + FF0E) e pare o completo MEIA IDEOGRÁFICO (U + FF61), o <xref:System.Globalization.IdnMapping.GetAscii%2A> método converte-os para o separador de rótulo de ponto final (período, U + 002E). O <xref:System.Globalization.IdnMapping.GetUnicode%2A> método, no entanto, não restaure o caractere separador de rótulo original.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> internacionalizados de método para converter uma matriz de nomes de domínio Punycode. O <xref:System.Globalization.IdnMapping.GetUnicode%2A> método converte o nome de domínio Punycode para o nome de domínio original, mas substitui os separadores de rótulo original com o separador de rótulo padrão.  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Todos os métodos públicos de <see cref="T:System.Globalization.IdnMapping" /> são thread-safe e podem ser usados simultaneamente em vários threads, contanto que o <see cref="T:System.Globalization.IdnMapping" /> propriedades da instância não também são definidas simultaneamente.</threadsafe>
    <altmember cref="Overload:System.String.Normalize" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IdnMapping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IdnMapping();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Globalization.IdnMapping" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Globalization.IdnMapping.AllowUnassigned%2A?displayProperty=nameWithType> e <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A?displayProperty=nameWithType> propriedades são inicializadas para `false`. Um pequeno subconjunto de caracteres ASCII que não seja A-Z, 0-9, o hífen (-) caractere (U + 002D) e o caractere de ponto (.) são permitidos em nomes de domínio, mas não atribuídos pontos de código Unicode não são.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowUnassigned">
      <MemberSignature Language="C#" Value="public bool AllowUnassigned { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUnassigned" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.AllowUnassigned" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowUnassigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowUnassigned { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowUnassigned : bool with get, set" Usage="System.Globalization.IdnMapping.AllowUnassigned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether unassigned Unicode code points are used in operations performed by members of the current <see cref="T:System.Globalization.IdnMapping" /> object.</summary>
        <value>
          <see langword="true" /> Se os pontos de código não atribuídos são usados em operações; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um nome de domínio registrado não pode conter pontos de código não atribuído. Consequentemente, o valor padrão de <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> é de propriedade `false`. A especificação de IDNA permite que os pontos de código não atribuídos apenas em consultas para correspondência de cadeias de caracteres (ou seja, na pesquisa de nome de domínio). Para obter mais informações sobre o uso de pontos de código não atribuídos em nomes de domínio, consulte [RFC 3454, "Preparação de cadeias de caracteres internacionalizado (stringprep)"](http://go.microsoft.com/fwlink/?LinkId=231873) e [RFC 5891, "nomes de domínio internacionalizado no (de aplicativos IDNA): protocolo "](http://go.microsoft.com/fwlink/?LinkId=231875).  
  
> [!IMPORTANT]
>  Se o <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> é de propriedade `false`, o comportamento associado com a propriedade depende do sistema operacional subjacente. Em [!INCLUDE[win8](~/includes/win8-md.md)], o <xref:System.Globalization.IdnMapping> classe está em conformidade com IDNA 2008, que é baseado no padrão Unicode 6.0. Em versões anteriores do Windows, o <xref:System.Globalization.IdnMapping> classe baseia-se no IDNA 2003, que se baseia em Unicode 3.* x*. Alguns pontos de código que foram atribuídos no IDNA 2003 caracteres foram atribuídos e têm suporte no IDNA 2008. Por exemplo, U + 0221 foi introduzido em Unicode 4.0. Em [!INCLUDE[win8](~/includes/win8-md.md)], ele será codificado como "xn — 6la". Em versões anteriores do Windows, ele lança uma <xref:System.ArgumentException> exceção.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="idnMapping.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The object to compare to the current object.</param>
        <summary>Indicates whether a specified object and the current <see cref="T:System.Globalization.IdnMapping" /> object are equal.</summary>
        <returns>
          <see langword="true" /> if the object specified by the <paramref name="obj" /> parameter is derived from <see cref="T:System.Globalization.IdnMapping" /> and its <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties are equal; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAscii">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Encodes a string of domain name labels that include Unicode characters outside the US-ASCII character range to a string of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E). The string is formatted according to the IDNA standard.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string -&gt; string" Usage="idnMapping.GetAscii unicode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="unicode">The string to convert, which consists of one or more domain name labels delimited with label separators.</param>
        <summary>Encodes a string of domain name labels that consist of Unicode characters to a string of displayable Unicode characters in the US-ASCII character range. The string is formatted according to the IDNA standard.</summary>
        <returns>The equivalent of the string specified by the <paramref name="unicode" /> parameter, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `unicode` parâmetro especifica uma cadeia de caracteres de um ou mais rótulos que consistem em caracteres Unicode válidos. Os rótulos são separados por separadores de rótulo. O `unicode` parâmetro não pode começar com um separador de rótulo, mas pode incluir e terminar com um separador. Os separadores de rótulo são o ponto final (período, U + 002E), completo IDEOGRÁFICO parar (U + 3002), largura ponto final (U + FF0E) e pare o completo MEIA IDEOGRÁFICO (U + FF61). Por exemplo, o nome de domínio "www.adatum.com" consiste de rótulos, "www", "adatum" e "com", separados por pontos.  
  
 Um rótulo não pode conter nenhum dos seguintes caracteres:  
  
-   Caracteres de controle Unicode de U + 0001 por meio de U + 001F e U + 007F.  
  
-   Não atribuídos caracteres Unicode, se o valor de <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> é de propriedade `false`.  
  
-   Caracteres não-padrão em US-ASCII de caracteres intervalo, como o espaço (U + 0020), EXCLAMAÇÃO marcar (U + 0021), e baixa os caracteres de linha (U + 005F), se o valor da <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> é de propriedade `true`.  
  
-   Caracteres que são proibidos por uma versão específica do padrão IDNA. Para obter mais informações sobre caracteres proibidos, consulte [RFC 3454: preparação de internacionalizados cadeias de caracteres ("stringprep")](http://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003, e [5982 apenas de RFC: os pontos de código Unicode e nomes de domínio internacionalizados para Aplicativos](http://go.microsoft.com/fwlink/?LinkId=231877) IDNA 2008.  
  
 O <xref:System.Globalization.IdnMapping.GetAscii%2A> método converte todos os separadores de rótulo de ponto final (período, U + 002E).  
  
 Se `unicode` não contém nenhum caractere fora US-ASCII é proibida intervalo de caracteres e nenhum caractere dentro do intervalo de caracteres US-ASCII, o método retorna `unicode` inalterado.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> método para converter uma matriz de internacionalizados nomes de domínio Punycode, que é um equivalente codificado que consiste em caracteres no intervalo de caracteres US-ASCII. O <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29> método converte o nome de domínio Punycode volta para o nome de domínio original, mas substitui os separadores de rótulo original com o separador de rótulo padrão.  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unicode" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
        <block subset="none" type="usage">
          <para>No [! INCLUDE[net_v45](~/Includes/NET-v45-MD.MD)] o <see cref="T:System.Globalization.IdnMapping" /> classe oferece suporte a versões diferentes do padrão IDNA, dependendo do sistema operacional em uso: - quando executado em [! INCLUDE[Win8](~/Includes/Win8-MD.MD)], ele dá suporte a versão 2008 do padrão IDNA descrito pela [RFC 5891: nomes de domínio internacionalizados em aplicativos (IDNA): protocolo] (http://go.microsoft.com/fwlink/?LinkId=231875).  -Quando executados em versões anteriores do sistema operacional Windows, ele oferece suporte a versão 2003 do padrão descrito pela [RFC 3490: nomes de domínio de internacionalização de aplicativos (IDNA)] (http://go.microsoft.com/fwlink/?LinkId=158110).  Consulte [Unicode Technical Standard 46: processamento de compatibilidade IDNA] (http://go.microsoft.com/fwlink/?LinkId=232459) para as diferenças no modo como esses padrões lidar com determinados conjuntos de caracteres.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode, int index);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string * int -&gt; string" Usage="idnMapping.GetAscii (unicode, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">The string to convert, which consists of one or more domain name labels delimited with label separators.</param>
        <param name="index">A zero-based offset into <c>unicode</c> that specifies the start of the substring to convert. The conversion operation continues to the end of the <c>unicode</c> string.</param>
        <summary>Encodes a substring of domain name labels that include Unicode characters outside the US-ASCII character range. The substring is converted to a string of displayable Unicode characters in the US-ASCII character range and is formatted according to the IDNA standard.</summary>
        <returns>The equivalent of the substring specified by the <paramref name="unicode" /> and <paramref name="index" /> parameters, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `unicode` e `index` parâmetros definem uma subcadeia de caracteres com um ou mais rótulos que consistem em caracteres Unicode válidos. Os rótulos são separados por separadores de rótulo. O primeiro caractere da subcadeia de caracteres não pode começar com um separador de rótulo, mas pode incluir e terminar com um separador. Os separadores de rótulo são o ponto final (período, U + 002E), completo IDEOGRÁFICO parar (U + 3002), largura ponto final (U + FF0E) e pare o completo MEIA IDEOGRÁFICO (U + FF61). Por exemplo, o nome de domínio "www.adatum.com" consiste de rótulos, "www", "adatum" e "com", separados por pontos.  
  
 Um rótulo não pode conter nenhum dos seguintes caracteres:  
  
-   Caracteres de controle Unicode de U + 0001 por meio de U + 001F e U + 007F.  
  
-   Não atribuídos caracteres Unicode, dependendo do valor da <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> propriedade.  
  
-   Caracteres não-padrão em US-ASCII de caracteres intervalo, como o espaço (U + 0020), marca de EXCLAMAÇÃO (U + 0021) e caracteres de linha de baixo (U + 005F), dependendo do valor da <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> propriedade.  
  
-   Caracteres que são proibidos por uma versão específica do padrão IDNA. Para obter mais informações sobre caracteres proibidos, consulte [RFC 3454: preparação de internacionalizados cadeias de caracteres ("stringprep")](http://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003, e [5982 apenas de RFC: os pontos de código Unicode e nomes de domínio internacionalizados para Aplicativos](http://go.microsoft.com/fwlink/?LinkId=231877) IDNA 2008.  
  
 O <xref:System.Globalization.IdnMapping.GetAscii%2A> método converte todos os separadores de rótulo de ponto final (período, U + 002E).  
  
 Se `unicode` não contém nenhum caractere fora US-ASCII é proibida intervalo de caracteres e nenhum caractere dentro do intervalo de caracteres US-ASCII, o método retorna `unicode` inalterado.  
  
   
  
## Examples  
 O exemplo a seguir remove a parte local e o caractere de um endereço de email e passa @ o resultante nome de domínio para o <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29> método para criar um nome de domínio Punycode, que é um equivalente codificado que consiste em caracteres US-ASCII intervalo de caracteres. O <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> método converte o nome de domínio Punycode volta para o nome de domínio original, mas substitui os separadores de rótulo original com o separador de rótulo padrão.  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1a.cs#2)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than zero.  -or-  <paramref name="index" /> is greater than the length of <paramref name="unicode" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unicode" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
        <block subset="none" type="usage">
          <para>No [! INCLUDE[net_v45](~/Includes/NET-v45-MD.MD)] o <see cref="T:System.Globalization.IdnMapping" /> classe oferece suporte a versões diferentes do padrão IDNA, dependendo do sistema operacional em uso: - quando executado em [! INCLUDE[Win8](~/Includes/Win8-MD.MD)], ele dá suporte a versão 2008 do padrão IDNA descrito pela [RFC 5891: nomes de domínio internacionalizados em aplicativos (IDNA): protocolo] (http://go.microsoft.com/fwlink/?LinkId=231875).  -Quando executados em versões anteriores do sistema operacional Windows, ele oferece suporte a versão 2003 do padrão descrito pela [RFC 3490: nomes de domínio de internacionalização de aplicativos (IDNA)] (http://go.microsoft.com/fwlink/?LinkId=158110).  Consulte [Unicode Technical Standard 46: processamento de compatibilidade IDNA] (http://go.microsoft.com/fwlink/?LinkId=232459) para as diferenças no modo como esses padrões lidar com determinados conjuntos de caracteres.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String, index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string * int * int -&gt; string" Usage="idnMapping.GetAscii (unicode, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">The string to convert, which consists of one or more domain name labels delimited with label separators.</param>
        <param name="index">A zero-based offset into <c>unicode</c> that specifies the start of the substring.</param>
        <param name="count">The number of characters to convert in the substring that starts at the position specified by  <c>index</c> in the <c>unicode</c> string.</param>
        <summary>Encodes the specified number of characters in a  substring of domain name labels that include Unicode characters outside the US-ASCII character range. The substring is converted to a string of displayable Unicode characters in the US-ASCII character range and is formatted according to the IDNA standard.</summary>
        <returns>The equivalent of the substring specified by the <paramref name="unicode" />, <paramref name="index" />, and <paramref name="count" /> parameters, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `Unicode`, `index`, e `count` parâmetros definem uma subcadeia de caracteres com um ou mais rótulos que consistem em caracteres Unicode válidos. Os rótulos são separados por separadores de rótulo. O primeiro caractere da subcadeia de caracteres não pode começar com um separador de rótulo, mas pode incluir e terminar com um separador. Os separadores de rótulo são o ponto final (período, U + 002E), completo IDEOGRÁFICO parar (U + 3002), largura ponto final (U + FF0E) e pare o completo MEIA IDEOGRÁFICO (U + FF61). Por exemplo, o nome de domínio "www.adatum.com" consiste de rótulos, "www", "adatum" e "com", separados por pontos.  
  
 Um rótulo não pode conter nenhum dos seguintes caracteres:  
  
-   Caracteres de controle Unicode de U + 0001 por meio de U + 001F e U + 007F.  
  
-   Não atribuídos caracteres Unicode, dependendo do valor da <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> propriedade.  
  
-   Caracteres não-padrão em US-ASCII de caracteres intervalo, como o espaço (U + 0020), marca de EXCLAMAÇÃO (U + 0021) e caracteres de linha de baixo (U + 005F), dependendo do valor da <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> propriedade.  
  
-   Caracteres que são proibidos por uma versão específica do padrão IDNA. Para obter mais informações sobre caracteres proibidos, consulte [RFC 3454: preparação de internacionalizados cadeias de caracteres ("stringprep")](http://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003, e [5982 apenas de RFC: os pontos de código Unicode e nomes de domínio internacionalizados para Aplicativos](http://go.microsoft.com/fwlink/?LinkId=231877) IDNA 2008.  
  
 O <xref:System.Globalization.IdnMapping.GetAscii%2A> método converte todos os separadores de rótulo de ponto final (período, U + 002E). Se a subcadeia de caracteres não contém nenhum caractere fora do intervalo de caracteres US-ASCII e não é proibida nenhum caractere dentro do intervalo de caracteres US-ASCII, o método retorna a subcadeia de caracteres inalterada.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> método para converter um nome de domínio internacionalizados para um nome de domínio que está em conformidade com o padrão IDNA. O <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> método converte o nome de domínio padronizado volta para o nome de domínio original, mas substitui os separadores de rótulo original com o separador de rótulo padrão.  
  
 [!code-csharp[IdnMapping.GetX#1](~/samples/snippets/csharp/VS_Snippets_CLR/IdnMapping.GetX/CS/getx.cs#1)]
 [!code-vb[IdnMapping.GetX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IdnMapping.GetX/VB/getx.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> or <paramref name="count" /> is less than zero.  -or-  <paramref name="index" /> is greater than the length of <paramref name="unicode" />.  -or-  <paramref name="index" /> is greater than the length of <paramref name="unicode" /> minus <paramref name="count" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unicode" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
        <block subset="none" type="usage">
          <para>No [! INCLUDE[net_v45](~/Includes/NET-v45-MD.MD)] o <see cref="T:System.Globalization.IdnMapping" /> classe oferece suporte a versões diferentes do padrão IDNA, dependendo do sistema operacional em uso: - quando executado em [! INCLUDE[Win8](~/Includes/Win8-MD.MD)], ele dá suporte a versão 2008 do padrão IDNA descrito pela [RFC 5891: nomes de domínio internacionalizados em aplicativos (IDNA): protocolo] (http://go.microsoft.com/fwlink/?LinkId=231875).  -Quando executados em versões anteriores do sistema operacional Windows, ele oferece suporte a versão 2003 do padrão descrito pela [RFC 3490: nomes de domínio de internacionalização de aplicativos (IDNA)] (http://go.microsoft.com/fwlink/?LinkId=158110).  Consulte [Unicode Technical Standard 46: processamento de compatibilidade IDNA] (http://go.microsoft.com/fwlink/?LinkId=232459) para as diferenças no modo como esses padrões lidar com determinados conjuntos de caracteres.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="idnMapping.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a hash code for this <see cref="T:System.Globalization.IdnMapping" /> object.</summary>
        <returns>One of four 32-bit signed constants derived from the properties of an <see cref="T:System.Globalization.IdnMapping" /> object.  The return value has no special meaning and is not suitable for use in a hash code algorithm.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Substituir o <xref:System.Globalization.IdnMapping.GetHashCode%2A> método se seu aplicativo precisa implementar um algoritmo hash significativo.  
  
   
  
## Examples  
 O exemplo a seguir pressupõe que uma única cadeia de caracteres pode conter vários endereços de email separados por espaços. Remove a parte local e o @ caractere de cada endereço de email e passa o resultante nome de domínio para o <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29> ou <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> método para criar um nome de domínio Punycode. O <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> método converte o nome de domínio Punycode de volta para o nome de domínio original.  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1b.cs#3)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1b.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicode">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Decodes one or more domain name labels encoded according to the IDNA standard to a string of Unicode characters.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string -&gt; string" Usage="idnMapping.GetUnicode ascii" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ascii">The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.</param>
        <summary>Decodes a string of one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.</summary>
        <returns>The Unicode equivalent of the IDNA substring specified by the <paramref name="ascii" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações sobre nomes de domínio, rótulos e separadores de rótulo, consulte os comentários para o <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> internacionalizados de método para converter uma matriz de nomes de domínio Punycode. O <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29> método converte o nome de domínio Punycode volta para o nome de domínio original, mas substitui os separadores de rótulo original com o separador de rótulo padrão.  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ascii" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii, int index);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string * int -&gt; string" Usage="idnMapping.GetUnicode (ascii, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.</param>
        <param name="index">A zero-based offset into <c>ascii</c> that specifies the start of the substring to decode. The decoding operation continues to the end of the <c>ascii</c> string.</param>
        <summary>Decodes a substring of one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.</summary>
        <returns>The Unicode equivalent of the IDNA substring specified by the <paramref name="ascii" /> and <paramref name="index" /> parameters.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações sobre nomes de domínio, rótulos e separadores de rótulo, consulte os comentários para o <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than zero.  -or-  <paramref name="index" /> is greater than the length of <paramref name="ascii" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ascii" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String, index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string * int * int -&gt; string" Usage="idnMapping.GetUnicode (ascii, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.</param>
        <param name="index">A zero-based offset into <c>ascii</c> that specifies the start of the substring.</param>
        <param name="count">The number of characters to convert in the substring that starts at the position specified by <c>index</c> in the <c>ascii</c> string.</param>
        <summary>Decodes a substring of a specified length that contains one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.</summary>
        <returns>The Unicode equivalent of the IDNA substring specified by the <paramref name="ascii" />, <paramref name="index" />, and <paramref name="count" /> parameters.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações sobre nomes de domínio, rótulos e separadores de rótulo, consulte os comentários para o <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> or <paramref name="count" /> is less than zero.  -or-  <paramref name="index" /> is greater than the length of <paramref name="ascii" />.  -or-  <paramref name="index" /> is greater than the length of <paramref name="ascii" /> minus <paramref name="count" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ascii" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
      </Docs>
    </Member>
    <Member MemberName="UseStd3AsciiRules">
      <MemberSignature Language="C#" Value="public bool UseStd3AsciiRules { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseStd3AsciiRules" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />
      <MemberSignature Language="VB.NET" Value="Public Property UseStd3AsciiRules As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseStd3AsciiRules { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseStd3AsciiRules : bool with get, set" Usage="System.Globalization.IdnMapping.UseStd3AsciiRules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether standard or relaxed naming conventions are used in operations performed by members of the current <see cref="T:System.Globalization.IdnMapping" /> object.</summary>
        <value>
          <see langword="true" /> Se as convenções de nomenclatura padrão são usadas em operações; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nomes de domínio que segue as regras de nomenclatura padrão consistem em um subconjunto específico de caracteres no intervalo de caracteres US-ASCII. Os caracteres são as letras da a Z, dígitos de 0 a 9, o caractere de hífen (-) (U + 002D) e o caractere de ponto (.). No caso dos caracteres não é significativo. Convenções de nomenclatura reduzidas permitem o uso de um intervalo mais amplo de ASCII caracteres, incluindo o espaço (U + 0020) de caracteres, o ponto de exclamação (U + 0021) de caracteres e a barra inferior (U + 005F) de caracteres. Se <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> é `true`, somente caracteres padrão podem aparecer em um rótulo retornado pelo <xref:System.Globalization.IdnMapping.GetAscii%2A> método.  
  
 Por padrão, o valor de <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> é de propriedade `false`, e um subconjunto expandido de caracteres ASCII é permitido em um rótulo.  
  
> [!NOTE]
>  O <xref:System.Globalization.IdnMapping> classe proíbe o uso dos caracteres nondisplayable U + 0000 a U + 001F e U + 007F no nome de domínio rótulos, independentemente da configuração de <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> propriedade. Essa proibição reduz o risco de ataques de segurança, como falsificação de nome.  
  
   
  
## Examples  
 O exemplo a seguir gera URLs que contêm caracteres no intervalo ASCII de U + 0000 a U + 007F e os passa para o <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> método dois <xref:System.Globalization.IdnMapping> objetos. Um objeto tem seus <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> propriedade definida como `true`, e o outro objeto foi definido como `false`. A saída exibe os caracteres que são inválidos quando o <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> é de propriedade `true` mas válido quando é `false`.  
  
 [!code-csharp[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/cs/usestd3asciirules1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/vb/usestd3asciirules1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>