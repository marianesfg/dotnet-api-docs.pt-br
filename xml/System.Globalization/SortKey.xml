<Type Name="SortKey" FullName="System.Globalization.SortKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d9583647f8d326d2edd1c4c16ad0c8dc37fcd69b" /><Meta Name="ms.sourcegitcommit" Value="d2dc7b29150110865ef8f199ee7463d9568fc696" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="03/25/2019" /><Meta Name="ms.locfileid" Value="58414015" /></Metadata><TypeSignature Language="C#" Value="public class SortKey" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit SortKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.SortKey" />
  <TypeSignature Language="VB.NET" Value="Public Class SortKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class SortKey" />
  <TypeSignature Language="F#" Value="type SortKey = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa o resultado do mapeamento de uma cadeia de caracteres pela sua chave de classificação.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma comparação sensível à cultura de duas cadeias de caracteres depende de cada caractere em cadeias de caracteres tendo várias categorias de pesos de classificação, incluindo o script, em ordem alfabética, os pesos de maiusculas e minúsculas e diacríticos. Uma chave de classificação funciona como repositório desses pesos para uma determinada cadeia de caracteres.  
  
 O <xref:System.Globalization.CompareInfo.GetSortKey%2A?displayProperty=nameWithType> método retorna uma instância da <xref:System.Globalization.SortKey> classe que reflete o mapeamento de cultura de caracteres em uma cadeia de caracteres especificada. O valor de uma <xref:System.Globalization.SortKey> seus dados de chave, que são retornados do objeto é o <xref:System.Globalization.SortKey.KeyData%2A> propriedade. Esses dados de chave consistem em uma série de bytes que codificar a cadeia de caracteres, as regras de classificação específicas da cultura e opções de comparação especificada pelo usuário. Uma comparação usando chaves de classificação consiste em uma comparação bit a bit dos dados da chave correspondentes em cada chave de classificação.  Por exemplo, se você criar uma chave de classificação, chamando o <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29> método com um valor de <xref:System.Globalization.CompareOptions.IgnoreCase?displayProperty=nameWithType>, uma operação de comparação de cadeia de caracteres que usa a chave de classificação diferencia maiusculas de minúsculas.  
  
 Depois de criar uma chave de classificação para uma cadeia de caracteres, comparar chaves de classificação chamando estático <xref:System.Globalization.SortKey.Compare%2A?displayProperty=nameWithType> método. Esse método executa uma comparação byte por byte simples, portanto, é muito mais rápido que o <xref:System.String.Compare%2A?displayProperty=nameWithType> ou <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> método.  

> [!NOTE]
> Você pode baixar o [tabelas de peso de classificação](https://www.microsoft.com/en-us/download/details.aspx?id=10921), um conjunto de arquivos de texto que contêm informações sobre os pesos de caractere usado em operações de classificação e comparação para os sistemas operacionais Windows, o [padrão Unicode Tabela do elemento de agrupamento](https://www.unicode.org/Public/UCA/latest/allkeys.txt), a tabela de peso de classificação para Linux e macOS.

## <a name="performance-considerations"></a>Considerações sobre desempenho  
 Ao executar uma comparação de cadeia de caracteres, o <xref:System.Globalization.SortKey.Compare%2A> e <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> métodos geram os mesmos resultados, mas eles se destinam a cenários diferentes.  
  
 Em um alto nível, o <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> método gera a chave de classificação para cada cadeia de caracteres, executa a comparação e, em seguida, descarta a chave de classificação e retorna o resultado da comparação. No entanto, o <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> método, na verdade, não gera uma chave de classificação de inteiro para executar a comparação. Em vez disso, o método gera os dados de chave para cada elemento de texto (ou seja, caractere base, par substituto ou combinação de sequência de caracteres) em cada cadeia de caracteres. O método, em seguida, compara os dados de chave para os elementos de texto correspondentes. A operação termina assim que o resultado final da comparação é determinado. Informações de chave de classificação são computadas, mas nenhum <xref:System.Globalization.SortKey> objeto é criado. Essa estratégia é econômica em termos de desempenho se ambas as cadeias de caracteres são comparadas de uma vez, mas se torna cara, se as mesmas cadeias de caracteres são comparadas muitas vezes.  
  
 O <xref:System.Globalization.SortKey.Compare%2A> método requer a geração de um <xref:System.Globalization.SortKey> objeto para cada cadeia de caracteres antes de executar a comparação. Essa estratégia é cara em termos de desempenho para a comparação primeiro devido ao tempo e memória investido para gerar o <xref:System.Globalization.SortKey> objetos. No entanto, ele se torna econômico se as mesmas chaves de classificação são comparadas muitas vezes.  
  
 Por exemplo, suponha que você escreve um aplicativo que pesquisa uma tabela de banco de dados para a linha na qual a coluna de índice com base em cadeia de caracteres corresponde a uma cadeia de caracteres de pesquisa especificado. A tabela contém milhares de linhas e comparar a cadeia de caracteres de pesquisa para o índice em cada linha levará um longo tempo. Portanto, quando o aplicativo armazena uma linha e sua coluna de índice, ele também gera e armazena a chave de classificação para o índice em uma coluna dedicada ao aprimoramento de desempenho da pesquisa. Quando o aplicativo procura por uma linha de destino, ele compara a chave de classificação para a cadeia de caracteres de pesquisa para a chave de classificação para a cadeia de caracteres de índice, em vez de comparar a cadeia de caracteres de pesquisa para a cadeia de caracteres do índice.  
  
## <a name="security-considerations"></a>Considerações sobre segurança  
 O <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> método retorna um <xref:System.Globalization.SortKey> objeto com o valor com base em uma cadeia de caracteres especificada e <xref:System.Globalization.CompareOptions> valor e a cultura associada com subjacente <xref:System.Globalization.CompareInfo> objeto. Se uma decisão de segurança depende de uma comparação de cadeia de caracteres ou a alteração de caso, você deve usar o <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> método da cultura invariável para garantir que o comportamento da operação é consistente, independentemente das configurações de cultura do sistema operacional.  
  
 Use as etapas a seguir para obter uma chave de classificação:  
  
1.  Recuperar a cultura invariável do <xref:System.Globalization.CultureInfo.InvariantCulture?displayProperty=nameWithType> propriedade.  
  
2.  Recuperar um <xref:System.Globalization.CompareInfo> objeto para a cultura invariável do <xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=nameWithType> propriedade.  
  
3.  Chame o método <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType>.  
  
 Trabalhando com o valor de uma <xref:System.Globalization.SortKey> objeto é equivalente a chamar o Windows `LCMapString` método com o valor LCMAP_SORTKEY especificado. No entanto, para o <xref:System.Globalization.SortKey> do objeto, as chaves de classificação de caracteres em inglês precedem as chaves de classificação para caracteres coreanos.  
  
 <xref:System.Globalization.SortKey> objetos podem ser serializados, mas somente para que eles podem cruzar <xref:System.AppDomain> objetos. Se um aplicativo serializa um <xref:System.Globalization.SortKey> do objeto, o aplicativo deve gerar novamente as chaves de classificação quando há uma nova versão do .NET Framework.  
  
 Para obter mais informações sobre chaves de classificação, consulte Unicode Technical Standard #10, "Algoritmo de agrupamento de Unicode" sobre o [site do consórcio Unicode](https://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 O exemplo a seguir compara a cadeia de caracteres "llama" usando o "en-US" e culturas "es-ES" e as culturas tradicionais "en-US" e "es-ES".  
  
 [!code-cpp[System.Globalization.SortKey.Compare#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.SortKey.Compare/CPP/sortkey_compare.cpp#1)]
 [!code-csharp[System.Globalization.SortKey.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.SortKey.Compare/CS/sortkey_compare.cs#1)]
 [!code-vb[System.Globalization.SortKey.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.SortKey.Compare/VB/sortkey_compare.vb#1)]  
  
 O exemplo a seguir mostra como você pode usar o <xref:System.Globalization.SortKey> classe para melhorar o desempenho em um aplicativo que depende amplamente de classificação e pesquisa uma matriz grande. O exemplo cria uma matriz não ordenada de nomes, que nesse caso, tem 13 elementos. Em seguida, armazena a chave de classificação de cada nome em uma matriz paralela, que é passada para o <xref:System.Array.Sort%28System.Array%2CSystem.Array%29?displayProperty=nameWithType> método. O resultado é uma matriz classificada. O exemplo, em seguida, procura a matriz de três cadeias de caracteres. Para cada cadeia de caracteres de pesquisa, ele chama o <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> método para recuperar a cadeia de caracteres chave de classificação e, em seguida, chama o <xref:System.Array.FindIndex%2A?displayProperty=nameWithType> método para recuperar o índice dessa chave de classificação da matriz das chaves de classificação. Como as matrizes de chave de classificação e o nome são paralelas, o índice retornado também é o índice do nome no `names` matriz.  
  
 [!code-csharp[System.Globalization.SortKey.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.sortkey.class/cs/sortkey1.cs#1)]
 [!code-vb[System.Globalization.SortKey.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.sortkey.class/vb/sortkey1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)" />
    <altmember cref="P:System.Globalization.SortKey.KeyData" />
  </Docs>
  <Members>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (System.Globalization.SortKey sortkey1, System.Globalization.SortKey sortkey2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(class System.Globalization.SortKey sortkey1, class System.Globalization.SortKey sortkey2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.Compare(System.Globalization.SortKey,System.Globalization.SortKey)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (sortkey1 As SortKey, sortkey2 As SortKey) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::Globalization::SortKey ^ sortkey1, System::Globalization::SortKey ^ sortkey2);" />
      <MemberSignature Language="F#" Value="static member Compare : System.Globalization.SortKey * System.Globalization.SortKey -&gt; int" Usage="System.Globalization.SortKey.Compare (sortkey1, sortkey2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sortkey1" Type="System.Globalization.SortKey" />
        <Parameter Name="sortkey2" Type="System.Globalization.SortKey" />
      </Parameters>
      <Docs>
        <param name="sortkey1">A primeira chave de classificação a ser comparada.</param>
        <param name="sortkey2">A segunda chave de classificação a ser comparada.</param>
        <summary>Compara duas chaves de classificação.</summary>
        <returns>Um inteiro com sinal que indica a relação entre <paramref name="sortkey1" /> e <paramref name="sortkey2" />.  
  
 <list type="table"><listheader><term> Valor 
 </term><description> Condição 
 </description></listheader><item><term> Menor que zero 
 </term><description><paramref name="sortkey1" /> é menor que <paramref name="sortkey2" />.  
  
 </description></item><item><term> Zero 
 </term><description><paramref name="sortkey1" /> é igual a <paramref name="sortkey2" />.  
  
 </description></item><item><term> Maior que zero 
 </term><description><paramref name="sortkey1" /> é maior que <paramref name="sortkey2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Globalization.SortKey.Compare%2A> método compara os <xref:System.Globalization.SortKey.KeyData%2A> propriedades da `sortkey1` e `sortkey2` parâmetros. O método produz os mesmos resultados que o <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> método.  
  
 Para obter mais informações sobre o <xref:System.Globalization.SortKey.Compare%2A> método e a comparação de chaves de classificação, consulte o <xref:System.Globalization.SortKey> tópico da classe.  
  
   
  
## Examples  
 O exemplo de código a seguir compara duas cadeias de caracteres usando o <xref:System.Globalization.SortKey.Compare%2A> método e o equivalente <xref:System.Globalization.CompareInfo.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> método.  
  
 [!code-csharp[sys.glob.sortkey.compare#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.compare/cs/skcmp.cs#1)]
 [!code-vb[sys.glob.sortkey.compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.compare/vb/skcmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="sortkey1" /> ou <paramref name="sortkey2" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="sortKey.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">O objeto a ser comparado com o objeto <see cref="T:System.Globalization.SortKey" /> atual.</param>
        <summary>Determina se o objeto especificado é igual ao objeto <see cref="T:System.Globalization.SortKey" /> atual.</summary>
        <returns><see langword="true" /> se o parâmetro <paramref name="value" /> for igual ao objeto <see cref="T:System.Globalization.SortKey" /> atual, caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Duas <xref:System.Globalization.SortKey> objetos são considerados iguais se suas <xref:System.Globalization.SortKey.KeyData%2A> propriedades são iguais.  
  
 Este método substitui <xref:System.Object.Equals%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra os resultados de <xref:System.Globalization.SortKey.Equals%2A> em comparação com diferentes <xref:System.Globalization.SortKey> objetos.  
  
 [!code-cpp[System.Globalization.SortKey.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.SortKey.Equals/CPP/sortkey_equals.cpp#1)]
 [!code-csharp[System.Globalization.SortKey.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.SortKey.Equals/CS/sortkey_equals.cs#1)]
 [!code-vb[System.Globalization.SortKey.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.SortKey.Equals/VB/sortkey_equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" /> é <see langword="null" />.</exception>
        <altmember cref="M:System.Object.Equals(System.Object)" />
        <altmember cref="P:System.Globalization.SortKey.KeyData" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="sortKey.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Funciona como uma função de hash para o objeto <see cref="T:System.Globalization.SortKey" /> atual, adequada para algoritmos de hash e estruturas de dados, como uma tabela de hash.</summary>
        <returns>Um código hash para o objeto <see cref="T:System.Globalization.SortKey" /> atual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método gera o mesmo código hash para dois objetos são iguais de acordo com o <xref:System.Globalization.SortKey.Equals%2A> método.  
  
 Este método substitui <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.SortKey.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="KeyData">
      <MemberSignature Language="C#" Value="public virtual byte[] KeyData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] KeyData" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.SortKey.KeyData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property KeyData As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::Byte&gt; ^ KeyData { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyData : byte[]" Usage="System.Globalization.SortKey.KeyData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a matriz de bytes que representa o objeto <see cref="T:System.Globalization.SortKey" /> atual.</summary>
        <value>Uma matriz de bytes que representa o atual <see cref="T:System.Globalization.SortKey" /> objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações sobre o uso dos dados retornados pela <xref:System.Globalization.SortKey.KeyData%2A> propriedade na comparação de cadeias de caracteres, consulte o <xref:System.Globalization.SortKey> tópico da classe.  
  
   
  
## Examples  
 O exemplo de código a seguir exibe uma cadeia de caracteres original e a cadeia de caracteres equivalente e dados de chave de uma chave de classificação diferencia maiusculas de minúsculas e uma chave de classificação diferencia maiusculas de minúsculas.  
  
 [!code-csharp[sys.glob.sortkey.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.tostring/cs/ts.cs#1)]
 [!code-vb[sys.glob.sortkey.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.tostring/vb/ts.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalString">
      <MemberSignature Language="C#" Value="public virtual string OriginalString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OriginalString" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.SortKey.OriginalString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OriginalString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ OriginalString { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OriginalString : string" Usage="System.Globalization.SortKey.OriginalString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a cadeia de caracteres original usada para criar o objeto <see cref="T:System.Globalization.SortKey" /> atual.</summary>
        <value>A cadeia de caracteres original usada para criar atual <see cref="T:System.Globalization.SortKey" /> objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir exibe uma cadeia de caracteres original e a cadeia de caracteres equivalente e dados de chave de uma chave de classificação diferencia maiusculas de minúsculas e uma chave de classificação diferencia maiusculas de minúsculas.  
  
 [!code-csharp[sys.glob.sortkey.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.tostring/cs/ts.cs#1)]
 [!code-vb[sys.glob.sortkey.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.tostring/vb/ts.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="sortKey.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna uma cadeia de caracteres que representa o objeto <see cref="T:System.Globalization.SortKey" /> atual.</summary>
        <returns>Uma cadeia de caracteres que representa o objeto <see cref="T:System.Globalization.SortKey" /> atual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor retornado será a concatenação da cadeia de caracteres "SortKey -", o identificador de cultura e opções de comparação do atual <xref:System.Globalization.SortKey> objeto e o valor da <xref:System.Globalization.SortKey.OriginalString%2A> propriedade.  
  
 Este método substitui <xref:System.Object.ToString%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 O exemplo de código a seguir exibe uma cadeia de caracteres original, as cadeias de caracteres geradas pelo <xref:System.Globalization.SortKey.ToString%2A> método para chaves de classificação diferencia maiusculas de minúsculas e maiusculas e minúsculas e os dados de chave para chaves de classificação diferencia maiusculas de minúsculas e maiusculas e minúsculas.  
  
 [!code-csharp[sys.glob.sortkey.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.tostring/cs/ts.cs#1)]
 [!code-vb[sys.glob.sortkey.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.tostring/vb/ts.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
  </Members>
</Type>