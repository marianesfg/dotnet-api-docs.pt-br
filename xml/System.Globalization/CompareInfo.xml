<Type Name="CompareInfo" FullName="System.Globalization.CompareInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9f3bf5a3aaf7ea3d9d383e2679b24c5ea8cc47e3" /><Meta Name="ms.sourcegitcommit" Value="9a6da88bd5455e8274257ca7ad259b42f1de114f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="05/22/2019" /><Meta Name="ms.locfileid" Value="66007553" /></Metadata><TypeSignature Language="C#" Value="public class CompareInfo : System.Runtime.Serialization.IDeserializationCallback" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CompareInfo extends System.Object implements class System.Runtime.Serialization.IDeserializationCallback" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CompareInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CompareInfo&#xA;Implements IDeserializationCallback" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompareInfo : System::Runtime::Serialization::IDeserializationCallback" />
  <TypeSignature Language="F#" Value="type CompareInfo = class&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Implementa um conjunto de métodos para comparações de cadeia de caracteres sensíveis à cultura.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Convenções para comparar e classificar dados variam de culturas. Por exemplo, a ordem de classificação pode se basear fonética ou a representação visual dos caracteres. Em idiomas do Leste Asiático, os caracteres são classificados pelo traço e radical de ideogramas. Também classificação depende das linguagens de ordem e culturas usam para o alfabeto. Por exemplo, o idioma dinamarquês tem um caractere de "Æ" que ele classifica após "Z" no alfabeto. Além disso, as comparações podem ser maiusculas e minúsculas ou maiusculas de minúsculas e regras de maiusculas e minúsculas também podem ser diferentes por cultura. O <xref:System.Globalization.CompareInfo> classe é responsável por manter esses dados de comparação de cadeia de caracteres sensíveis à cultura e realizar operações de cadeia de caracteres sensíveis à cultura.  
  
 Normalmente, você não precisa criar uma instância de um <xref:System.Globalization.CompareInfo> do objeto diretamente, porque um é usado implicitamente por todas as operações de comparação de cadeia de caracteres não-ordinal, inclusive chamadas para o <xref:System.String.Compare%2A?displayProperty=nameWithType> método. No entanto, se você quiser recuperar um <xref:System.Globalization.CompareInfo> do objeto, você pode fazê-lo em uma das seguintes maneiras:  
  
-   Recuperando o valor da <xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=nameWithType> propriedade para uma determinada cultura.  
  
-   Chamando estático <xref:System.Globalization.CompareInfo.GetCompareInfo%2A> método com um nome de cultura. Isso permite acesso de associação tardia a um <xref:System.Globalization.CompareInfo> objeto.  
  
## <a name="ignored-search-values"></a>Ignorado os valores de pesquisa  
 Conjuntos de caracteres incluem caracteres ignoráveis, que são caracteres que não são considerados ao durante a realização de uma comparação linguística ou sensível à cultura. Métodos de comparação, como <xref:System.Globalization.CompareInfo.IndexOf%2A> e <xref:System.Globalization.CompareInfo.LastIndexOf%2A> não considere esses caracteres quando eles executam uma comparação sensível à cultura. Caracteres ignoráveis incluem:  
  
-   <xref:System.String.Empty?displayProperty=nameWithType>. Métodos de comparação sensível à cultura sempre encontrarão uma cadeia de caracteres vazia no início (índice zero) da cadeia de caracteres que está sendo pesquisado.  
  
-   Um caractere ou uma cadeia de caracteres consistindo em caracteres com pontos de código que não são considerados na operação devido às opções de comparação, em particular, o <xref:System.Globalization.CompareOptions.IgnoreNonSpace?displayProperty=nameWithType> e <xref:System.Globalization.CompareOptions.IgnoreSymbols?displayProperty=nameWithType> opções produzem pesquisas em quais símbolos e combinação sem espaçamento caracteres são ignorados.  
  
-   Uma cadeia de caracteres com pontos de código que não têm nenhum significado linguístico. Por exemplo, um hífen (U + 00AD) é sempre ignorado em uma comparação de cadeia de caracteres sensíveis à cultura.  
  
## <a name="security-considerations"></a>Considerações sobre segurança  
 Se uma decisão de segurança depende de uma comparação de cadeia de caracteres ou uma alteração, você deve usar o <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriedade para garantir que o comportamento é consistente, independentemente das configurações de cultura do sistema operacional.  
  
> [!NOTE]
>  Quando possível, você deve usar métodos de comparação de cadeia de caracteres que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> para comparações de segurança.  
  
   
  
## Examples  
 A exemplo a seguir mostra como o <xref:System.Globalization.CompareInfo> objeto associado a um <xref:System.Globalization.CultureInfo> objeto afeta a comparação de cadeia de caracteres.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  

 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://www.microsoft.com/download/details.aspx?id=10921">Classificação de sistemas operacionais de tabelas de peso para Windows</related>
    <related type="ExternalDocumentation" href="https://www.unicode.org/Public/UCA/latest/allkeys.txt">Padrão Unicode agrupamento elemento de tabela, para Linux e macOS</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Compara duas cadeias de caracteres.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, string string2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, string string2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, string2 As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, System::String ^ string2);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * string -&gt; int&#xA;override this.Compare : string * string -&gt; int" Usage="compareInfo.Compare (string1, string2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="string2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="string1">A primeira cadeia de caracteres a ser comparada.</param>
        <param name="string2">A segunda cadeia de caracteres a ser comparada.</param>
        <summary>Compara duas cadeias de caracteres.</summary>
        <returns>Um inteiro com sinal de 32 bits que indica a relação léxica entre os dois termos de comparação.  
  
 <list type="table"><listheader><term> Valor 
 </term><description> Condição 
 </description></listheader><item><term> zero 
 </term><description> As duas cadeias são iguais.  
  
 </description></item><item><term> menor que zero 
 </term><description><paramref name="string1" /> é menor que <paramref name="string2" />.  
  
 </description></item><item><term> maior que zero 
 </term><description><paramref name="string1" /> é maior que <paramref name="string2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por padrão, a comparação é executada usando <xref:System.Globalization.CompareOptions.None?displayProperty=nameWithType>. Se uma decisão de segurança depende de uma comparação de cadeia de caracteres ou uma alteração, você deve usar o <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriedade para garantir que o comportamento é consistente, independentemente das configurações de cultura do sistema operacional.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir compara duas cadeias de caracteres usando as diferentes partes <xref:System.Globalization.CompareInfo> objetos:  
  
-   <xref:System.Globalization.CompareInfo> objeto associado com a cultura de espanhol (Espanha) com classificação internacional  
  
-   <xref:System.Globalization.CompareInfo> objeto associado com a cultura de espanhol (Espanha) com classificação tradicional  
  
-   <xref:System.Globalization.CompareInfo> objeto associado a <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 O exemplo a seguir demonstra a chamada a <xref:System.Globalization.CompareInfo.Compare%2A> método.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>Conjuntos de caracteres incluem caracteres ignoráveis, que são caracteres que não são considerados ao durante a realização de uma comparação linguística ou sensível à cultura. O <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String)" /> método não considera esses caracteres quando ele executa uma comparação sensível à cultura. Por exemplo, uma comparação sensível à cultura de "animal" com "ani-sites perigosos" (usando um hífen ou 00AD U +) indica que duas cadeias de caracteres são equivalentes, como mostra o exemplo a seguir.  
  
[!code-vb[System.Globalization.CompareInfo.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.compare/vb/compare1.vb#1)] 
Para reconhecer caracteres ignoráveis em uma comparação de cadeia de caracteres, chame o <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" /> método e fornecer um valor de <see cref="F:System.Globalization.CompareOptions.Ordinal" /> ou <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> para o <paramref name="options" /> parâmetro.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, string string2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, string string2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, string2 As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, System::String ^ string2, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * string * System.Globalization.CompareOptions -&gt; int&#xA;override this.Compare : string * string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.Compare (string1, string2, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">A primeira cadeia de caracteres a ser comparada.</param>
        <param name="string2">A segunda cadeia de caracteres a ser comparada.</param>
        <param name="options">Um valor que define como <paramref name="string1" /> e <paramref name="string2" /> devem ser comparados. <paramref name="options" /> é o <see cref="F:System.Globalization.CompareOptions.Ordinal" /> valor de enumeração ou uma combinação bit a bit de um ou mais dos seguintes valores: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> e <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Compara duas cadeias de caracteres usando o valor <see cref="T:System.Globalization.CompareOptions" /> especificado.</summary>
        <returns>Um inteiro com sinal de 32 bits que indica a relação léxica entre os dois termos de comparação.  
  
 <list type="table"><listheader><term> Valor 
 </term><description> Condição 
 </description></listheader><item><term> zero 
 </term><description> As duas cadeias são iguais.  
  
 </description></item><item><term> menor que zero 
 </term><description><paramref name="string1" /> é menor que <paramref name="string2" />.  
  
 </description></item><item><term> maior que zero 
 </term><description><paramref name="string1" /> é maior que <paramref name="string2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se uma decisão de segurança depende de uma comparação de cadeia de caracteres ou uma alteração, você deve usar o <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriedade para garantir que o comportamento é consistente, independentemente das configurações de cultura do sistema operacional.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir compara duas cadeias de caracteres usando diferentes <xref:System.Globalization.CompareOptions> configurações.  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/CPP/comparestrstropt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/CS/comparestrstropt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/VB/comparestrstropt.vb#1)]  
  
 O exemplo a seguir demonstra a chamada a <xref:System.Globalization.CompareInfo.Compare%2A> método.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> contém um valor <see cref="T:System.Globalization.CompareOptions" /> inválido.</exception>
        <block subset="none" type="usage"><para>Conjuntos de caracteres incluem caracteres ignoráveis, que são caracteres que não são considerados ao durante a realização de uma comparação linguística ou sensível à cultura. O <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" /> método não considera esses caracteres quando ele executa uma comparação sensível à cultura. Para reconhecer caracteres ignoráveis em sua comparação, fornecer um valor de <see cref="F:System.Globalization.CompareOptions.Ordinal" /> ou <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> para o <paramref name="options" /> parâmetro.</para></block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, string string2, int offset2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, string string2, int32 offset2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, string2 As String, offset2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, System::String ^ string2, int offset2);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * string * int -&gt; int&#xA;override this.Compare : string * int * string * int -&gt; int" Usage="compareInfo.Compare (string1, offset1, string2, offset2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="string1">A primeira cadeia de caracteres a ser comparada.</param>
        <param name="offset1">O índice de base zero do caractere de <paramref name="string1" /> no qual iniciar a comparação.</param>
        <param name="string2">A segunda cadeia de caracteres a ser comparada.</param>
        <param name="offset2">O índice de base zero do caractere de <paramref name="string2" /> no qual iniciar a comparação.</param>
        <summary>Compara a seção final de uma cadeia de caracteres com a seção final de outra.</summary>
        <returns>Um inteiro com sinal de 32 bits que indica a relação léxica entre os dois termos de comparação.  
  
 <list type="table"><listheader><term> Valor 
 </term><description> Condição 
 </description></listheader><item><term> zero 
 </term><description> As duas cadeias são iguais.  
  
 </description></item><item><term> menor que zero 
 </term><description> A seção especificada de <paramref name="string1" /> é menor do que a seção especificada de <paramref name="string2" />.  
  
 </description></item><item><term> maior que zero 
 </term><description> A seção especificada de <paramref name="string1" /> é maior do que a seção especificada de <paramref name="string2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se uma decisão de segurança depende de uma comparação de cadeia de caracteres ou uma alteração, você deve usar o <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriedade para garantir que o comportamento é consistente, independentemente das configurações de cultura do sistema operacional.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir compara duas cadeias de caracteres usando as diferentes partes <xref:System.Globalization.CompareInfo> objetos:  
  
-   <xref:System.Globalization.CompareInfo> objeto associado com a cultura de espanhol (Espanha) com classificação internacional  
  
-   <xref:System.Globalization.CompareInfo> objeto associado com a cultura de espanhol (Espanha) com classificação tradicional  
  
-   <xref:System.Globalization.CompareInfo> objeto associado a <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/CPP/comparestrintstrint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/CS/comparestrintstrint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/VB/comparestrintstrint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset1" /> ou <paramref name="offset2" /> é menor que zero.  
  
- ou - 
 <paramref name="offset1" /> é maior ou igual ao número de caracteres em <paramref name="string1" />.  
  
- ou - 
 <paramref name="offset2" /> é maior ou igual ao número de caracteres em <paramref name="string2" />.</exception>
        <block subset="none" type="usage"><para>Entre conjuntos de caracteres estão caracteres ignoráveis. O <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)" /> método não considera esses caracteres quando ele executa uma comparação linguística ou sensível à cultura. Para reconhecer caracteres ignoráveis em sua comparação, chame o <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" /> método e fornecer um valor de <see cref="F:System.Globalization.CompareOptions.Ordinal" /> ou <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> para o <paramref name="options" /> parâmetro.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, string string2, int offset2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, string string2, int32 offset2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, string2 As String, offset2 As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, System::String ^ string2, int offset2, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * string * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.Compare : string * int * string * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.Compare (string1, offset1, string2, offset2, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">A primeira cadeia de caracteres a ser comparada.</param>
        <param name="offset1">O índice de base zero do caractere de <paramref name="string1" /> no qual iniciar a comparação.</param>
        <param name="string2">A segunda cadeia de caracteres a ser comparada.</param>
        <param name="offset2">O índice de base zero do caractere de <paramref name="string2" /> no qual iniciar a comparação.</param>
        <param name="options">Um valor que define como <paramref name="string1" /> e <paramref name="string2" /> devem ser comparados. <paramref name="options" /> é o <see cref="F:System.Globalization.CompareOptions.Ordinal" /> valor de enumeração ou uma combinação bit a bit de um ou mais dos seguintes valores: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> e <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Compara a seção final de uma cadeia de caracteres com a seção final de outra usando o valor de <see cref="T:System.Globalization.CompareOptions" /> especificado.</summary>
        <returns>Um inteiro com sinal de 32 bits que indica a relação léxica entre os dois termos de comparação.  
  
 <list type="table"><listheader><term> Valor 
 </term><description> Condição 
 </description></listheader><item><term> zero 
 </term><description> As duas cadeias são iguais.  
  
 </description></item><item><term> menor que zero 
 </term><description> A seção especificada de <paramref name="string1" /> é menor do que a seção especificada de <paramref name="string2" />.  
  
 </description></item><item><term> maior que zero 
 </term><description> A seção especificada de <paramref name="string1" /> é maior do que a seção especificada de <paramref name="string2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se uma decisão de segurança depende de uma comparação de cadeia de caracteres ou uma alteração, você deve usar o <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriedade para garantir que o comportamento é consistente, independentemente das configurações de cultura do sistema operacional.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir compara duas cadeias de caracteres usando diferentes partes <xref:System.Globalization.CompareOptions> configurações.  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/CPP/comparestrintstrintopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/CS/comparestrintstrintopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/VB/comparestrintstrintopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset1" /> ou <paramref name="offset2" /> é menor que zero.  
  
- ou - 
 <paramref name="offset1" /> é maior ou igual ao número de caracteres em <paramref name="string1" />.  
  
- ou - 
 <paramref name="offset2" /> é maior ou igual ao número de caracteres em <paramref name="string2" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> contém um valor <see cref="T:System.Globalization.CompareOptions" /> inválido.</exception>
        <block subset="none" type="usage"><para>Conjuntos de caracteres incluem caracteres ignoráveis, que são caracteres que não são considerados ao durante a realização de uma comparação linguística ou sensível à cultura. O <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" /> método não considera esses caracteres ao realizar uma comparação sensível à cultura. Para reconhecer caracteres ignoráveis em sua comparação, fornecer um valor de <see cref="F:System.Globalization.CompareOptions.Ordinal" /> ou <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> para o <paramref name="options" /> parâmetro.</para></block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, int32 length1, string string2, int32 offset2, int32 length2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, length1 As Integer, string2 As String, offset2 As Integer, length2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, int length1, System::String ^ string2, int offset2, int length2);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * int * string * int * int -&gt; int&#xA;override this.Compare : string * int * int * string * int * int -&gt; int" Usage="compareInfo.Compare (string1, offset1, length1, string2, offset2, length2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="length1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="length2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="string1">A primeira cadeia de caracteres a ser comparada.</param>
        <param name="offset1">O índice de base zero do caractere de <paramref name="string1" /> no qual iniciar a comparação.</param>
        <param name="length1">O número de caracteres consecutivos em <paramref name="string1" /> a serem comparados.</param>
        <param name="string2">A segunda cadeia de caracteres a ser comparada.</param>
        <param name="offset2">O índice de base zero do caractere de <paramref name="string2" /> no qual iniciar a comparação.</param>
        <param name="length2">O número de caracteres consecutivos em <paramref name="string2" /> a serem comparados.</param>
        <summary>Compara uma seção de uma cadeia de caracteres com uma seção de outra.</summary>
        <returns>Um inteiro com sinal de 32 bits que indica a relação léxica entre os dois termos de comparação.  
  
 <list type="table"><listheader><term> Valor 
 </term><description> Condição 
 </description></listheader><item><term> zero 
 </term><description> As duas cadeias são iguais.  
  
 </description></item><item><term> menor que zero 
 </term><description> A seção especificada de <paramref name="string1" /> é menor do que a seção especificada de <paramref name="string2" />.  
  
 </description></item><item><term> maior que zero 
 </term><description> A seção especificada de <paramref name="string1" /> é maior do que a seção especificada de <paramref name="string2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se uma decisão de segurança depende de uma comparação de cadeia de caracteres ou uma alteração, você deve usar o <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriedade para garantir que o comportamento é consistente, independentemente das configurações de cultura do sistema operacional.  
  
> [!NOTE]
>  Quando possível, você deve usar métodos de comparação de cadeia de caracteres que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir compara duas cadeias de caracteres usando as diferentes partes <xref:System.Globalization.CompareInfo> objetos:  
  
-   <xref:System.Globalization.CompareInfo> objeto associado com a cultura de espanhol (Espanha) com classificação internacional  
  
-   <xref:System.Globalization.CompareInfo> objeto associado com a cultura de espanhol (Espanha) com classificação tradicional  
  
-   <xref:System.Globalization.CompareInfo> objeto associado a <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/CPP/comparestrintintstrintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/CS/comparestrintintstrintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/VB/comparestrintintstrintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset1" /> ou <paramref name="length1" /> ou <paramref name="offset2" /> ou <paramref name="length2" /> é menor que zero.  
  
- ou - 
 <paramref name="offset1" /> é maior ou igual ao número de caracteres em <paramref name="string1" />.  
  
- ou - 
 <paramref name="offset2" /> é maior ou igual ao número de caracteres em <paramref name="string2" />.  
  
- ou - 
 <paramref name="length1" /> é maior que o número de caracteres de <paramref name="offset1" /> até o final de <paramref name="string1" />.  
  
- ou - 
 <paramref name="length2" /> é maior que o número de caracteres de <paramref name="offset2" /> até o final de <paramref name="string2" />.</exception>
        <block subset="none" type="usage"><para>Entre conjuntos de caracteres estão caracteres ignoráveis. O <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)" /> método não considera esses caracteres quando ele executa uma comparação linguística ou sensível à cultura. Para reconhecer caracteres ignoráveis em sua comparação, chame o <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> método e fornecer um valor de <see cref="F:System.Globalization.CompareOptions.Ordinal" /> ou <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> para o <paramref name="options" /> parâmetro.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, int32 length1, string string2, int32 offset2, int32 length2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, length1 As Integer, string2 As String, offset2 As Integer, length2 As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, int length1, System::String ^ string2, int offset2, int length2, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * int * string * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.Compare : string * int * int * string * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.Compare (string1, offset1, length1, string2, offset2, length2, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="length1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="length2" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">A primeira cadeia de caracteres a ser comparada.</param>
        <param name="offset1">O índice de base zero do caractere de <paramref name="string1" /> no qual iniciar a comparação.</param>
        <param name="length1">O número de caracteres consecutivos em <paramref name="string1" /> a serem comparados.</param>
        <param name="string2">A segunda cadeia de caracteres a ser comparada.</param>
        <param name="offset2">O índice de base zero do caractere de <paramref name="string2" /> no qual iniciar a comparação.</param>
        <param name="length2">O número de caracteres consecutivos em <paramref name="string2" /> a serem comparados.</param>
        <param name="options">Um valor que define como <paramref name="string1" /> e <paramref name="string2" /> devem ser comparados. <paramref name="options" /> é o <see cref="F:System.Globalization.CompareOptions.Ordinal" /> valor de enumeração ou uma combinação bit a bit de um ou mais dos seguintes valores: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> e <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Compara uma seção de uma cadeia de caracteres com uma seção de outra usando o valor de <see cref="T:System.Globalization.CompareOptions" /> especificado.</summary>
        <returns>Um inteiro com sinal de 32 bits que indica a relação léxica entre os dois termos de comparação.  
  
 <list type="table"><listheader><term> Valor 
 </term><description> Condição 
 </description></listheader><item><term> zero 
 </term><description> As duas cadeias são iguais.  
  
 </description></item><item><term> menor que zero 
 </term><description> A seção especificada de <paramref name="string1" /> é menor do que a seção especificada de <paramref name="string2" />.  
  
 </description></item><item><term> maior que zero 
 </term><description> A seção especificada de <paramref name="string1" /> é maior do que a seção especificada de <paramref name="string2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se uma decisão de segurança depende de uma comparação de cadeia de caracteres ou uma alteração, você deve usar o <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriedade para garantir que o comportamento é consistente, independentemente das configurações de cultura do sistema operacional.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir compara duas cadeias de caracteres usando diferentes partes <xref:System.Globalization.CompareOptions> configurações.  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/CPP/comparestrintintstrintintopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/CS/comparestrintintstrintintopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/VB/comparestrintintstrintintopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset1" /> ou <paramref name="length1" /> ou <paramref name="offset2" /> ou <paramref name="length2" /> é menor que zero.  
  
- ou - 
 <paramref name="offset1" /> é maior ou igual ao número de caracteres em <paramref name="string1" />.  
  
- ou - 
 <paramref name="offset2" /> é maior ou igual ao número de caracteres em <paramref name="string2" />.  
  
- ou - 
 <paramref name="length1" /> é maior que o número de caracteres de <paramref name="offset1" /> até o final de <paramref name="string1" />.  
  
- ou - 
 <paramref name="length2" /> é maior que o número de caracteres de <paramref name="offset2" /> até o final de <paramref name="string2" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> contém um valor <see cref="T:System.Globalization.CompareOptions" /> inválido.</exception>
        <block subset="none" type="usage"><para>Entre conjuntos de caracteres estão caracteres ignoráveis. O <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> método não considera esses caracteres quando ele executa uma comparação sensível à cultura. Para reconhecer caracteres ignoráveis em sua comparação, fornecer um valor de <see cref="F:System.Globalization.CompareOptions.Ordinal" /> ou <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> para o <paramref name="options" /> parâmetro.</para></block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="compareInfo.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">O objeto a ser comparado com o <see cref="T:System.Globalization.CompareInfo" /> atual.</param>
        <summary>Determina se o objeto especificado é igual ao objeto <see cref="T:System.Globalization.CompareInfo" /> atual.</summary>
        <returns><see langword="true" /> se o objeto especificado for igual ao <see cref="T:System.Globalization.CompareInfo" /> atual; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Duas <xref:System.Globalization.CompareInfo> objetos são iguais se suas <xref:System.Globalization.CompareInfo.LCID%2A> e <xref:System.Globalization.CompareInfo.Name%2A> propriedades são iguais.  
  
 Este método substitui <xref:System.Object.Equals%2A?displayProperty=nameWithType>.  
  
 Se uma decisão de segurança depende de uma comparação de cadeia de caracteres ou uma alteração, você deve usar o <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriedade para garantir que o comportamento é consistente, independentemente das configurações de cultura do sistema operacional.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCompareInfo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa um novo objeto <see cref="T:System.Globalization.CompareInfo" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompareInfo (culture As Integer) As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(int culture);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : int -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="culture">Um inteiro que representa o identificador da cultura.</param>
        <summary>Inicializa um novo objeto <see cref="T:System.Globalization.CompareInfo" /> associado à cultura com o identificador especificado.</summary>
        <returns>Um novo objeto <see cref="T:System.Globalization.CompareInfo" /> associado à cultura com o identificador especificado e que usa métodos de comparação de cadeia de caracteres no <see cref="T:System.Reflection.Assembly" /> atual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir compara duas cadeias de caracteres usando as diferentes partes <xref:System.Globalization.CompareInfo> objetos:  
  
-   <xref:System.Globalization.CompareInfo> objeto associado com a cultura de espanhol (Espanha) com classificação internacional  
  
-   <xref:System.Globalization.CompareInfo> objeto associado com a cultura de espanhol (Espanha) com classificação tradicional  
  
-   <xref:System.Globalization.CompareInfo> objeto associado a <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompareInfo (name As String) As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : string -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Uma cadeia de caracteres que representa o nome da cultura.</param>
        <summary>Inicializa um novo objeto <see cref="T:System.Globalization.CompareInfo" /> associado à cultura com o nome especificado.</summary>
        <returns>Um novo objeto <see cref="T:System.Globalization.CompareInfo" /> associado à cultura com o identificador especificado e que usa métodos de comparação de cadeia de caracteres no <see cref="T:System.Reflection.Assembly" /> atual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir compara duas cadeias de caracteres usando as diferentes partes <xref:System.Globalization.CompareInfo> objetos:  
  
-   <xref:System.Globalization.CompareInfo> objeto associado com a cultura de espanhol (Espanha) com classificação internacional  
  
-   <xref:System.Globalization.CompareInfo> objeto associado com a cultura de espanhol (Espanha) com classificação tradicional  
  
-   <xref:System.Globalization.CompareInfo> objeto associado a <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> é um nome de cultura inválido.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (int culture, System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(int32 culture, class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32,System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(int culture, System::Reflection::Assembly ^ assembly);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : int * System.Reflection.Assembly -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo (culture, assembly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="culture">Um inteiro que representa o identificador da cultura.</param>
        <param name="assembly">Um <see cref="T:System.Reflection.Assembly" /> que contém os métodos de comparação de cadeia de caracteres a serem usados.</param>
        <summary>Inicializa um novo objeto <see cref="T:System.Globalization.CompareInfo" /> que está associado com a cultura especificada e que usa métodos de comparação de cadeia de caracteres no <see cref="T:System.Reflection.Assembly" /> especificado.</summary>
        <returns>Um novo objeto <see cref="T:System.Globalization.CompareInfo" /> associado à cultura com o identificador especificado e que usa métodos de comparação de cadeia de caracteres no <see cref="T:System.Reflection.Assembly" /> atual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O comportamento desse método é imprevisível. É recomendável para seu aplicativo para usar uma versão desse método que não utilize uma entrada do assembly.  
  
 O `assembly` parâmetro deve ser do mesmo tipo que <xref:System.Reflection.Module.Assembly%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="assembly" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="assembly" /> pertence a um tipo inválido.</exception>
        <altmember cref="P:System.Reflection.Module.Assembly" />
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (string name, System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(string name, class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.String,System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(System::String ^ name, System::Reflection::Assembly ^ assembly);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : string * System.Reflection.Assembly -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo (name, assembly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">Uma cadeia de caracteres que representa o nome da cultura.</param>
        <param name="assembly">Um <see cref="T:System.Reflection.Assembly" /> que contém os métodos de comparação de cadeia de caracteres a serem usados.</param>
        <summary>Inicializa um novo objeto <see cref="T:System.Globalization.CompareInfo" /> que está associado com a cultura especificada e que usa métodos de comparação de cadeia de caracteres no <see cref="T:System.Reflection.Assembly" /> especificado.</summary>
        <returns>Um novo objeto <see cref="T:System.Globalization.CompareInfo" /> associado à cultura com o identificador especificado e que usa métodos de comparação de cadeia de caracteres no <see cref="T:System.Reflection.Assembly" /> atual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  O comportamento desse método é imprevisível. É recomendável que você use uma versão desse método que não utilize uma entrada do assembly.  
  
 O `assembly` parâmetro deve ser do mesmo tipo que <xref:System.Reflection.Module.Assembly%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="assembly" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> é um nome de cultura inválido.  
  
- ou - 
 <paramref name="assembly" /> pertence a um tipo inválido.</exception>
        <altmember cref="P:System.Reflection.Module.Assembly" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetHashCode">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retorna um código hash para esta instância de <see cref="T:System.Globalization.CompareInfo" /> ou para uma determinada cadeia de caracteres.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="compareInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Funciona como uma função de hash para o <see cref="T:System.Globalization.CompareInfo" /> atual, para algoritmos de hash e estruturas de dados, como uma tabela de hash.</summary>
        <returns>Um código hash do <see cref="T:System.Globalization.CompareInfo" /> atual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método substitui <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.  
  
 Este método gera o mesmo código hash para dois objetos são iguais de acordo com o <xref:System.Globalization.CompareInfo.Equals%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.CompareInfo.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (ReadOnlySpan&lt;char&gt; source, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetHashCode(valuetype System.ReadOnlySpan`1&lt;char&gt; source, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetHashCode(System.ReadOnlySpan{System.Char},System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (source As ReadOnlySpan(Of Char), options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetHashCode(ReadOnlySpan&lt;char&gt; source, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : ReadOnlySpan&lt;char&gt; * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.GetHashCode (source, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public virtual int GetHashCode (string source, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(string source, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHashCode (source As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode(System::String ^ source, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.GetHashCode (source, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres cujo código hash deve ser retornado.</param>
        <param name="options">Um valor que determina como cadeias de caracteres são comparadas.</param>
        <summary>Obtém o código hash de uma cadeia de caracteres com base nas opções de comparação especificadas.</summary>
        <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O comportamento de <xref:System.Globalization.CompareInfo.GetHashCode%2A> depende de sua implementação, o que pode ser alterado de uma versão do common language runtime para outro ou de uma plataforma do .NET Framework para outro.  
  
> [!IMPORTANT]
>  Se dois objetos de cadeia de caracteres são iguais, o <xref:System.Globalization.CompareInfo.GetHashCode%2A> método retorna valores idênticos. No entanto, não há um valor de código hash exclusivo para cada valor de cadeia de caracteres exclusiva. Cadeias de caracteres diferentes podem retornar o mesmo código hash.  
>   
>  O código de hash em si não é garantido para ser estável. Códigos de hash para cadeias de caracteres idênticas podem ser diferentes entre versões do .NET Framework e entre plataformas (como 32 bits e 64 bits) para uma única versão do .NET Framework. Em alguns casos, pode até mesmo diferem por domínio de aplicativo.  
>   
>  Como resultado, hash códigos nunca devem ser usados fora do domínio de aplicativo no qual eles foram criados, eles nunca devem ser usados como campos de chave em uma coleção e nunca deve ser mantidos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.</exception>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSortKey">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtém um objeto <see cref="T:System.Globalization.SortKey" /> para uma cadeia de caracteres.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSortKey">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.SortKey GetSortKey (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.SortKey GetSortKey(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetSortKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSortKey (source As String) As SortKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Globalization::SortKey ^ GetSortKey(System::String ^ source);" />
      <MemberSignature Language="F#" Value="abstract member GetSortKey : string -&gt; System.Globalization.SortKey&#xA;override this.GetSortKey : string -&gt; System.Globalization.SortKey" Usage="compareInfo.GetSortKey source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.SortKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres para a qual um objeto <see cref="T:System.Globalization.SortKey" /> é obtido.</param>
        <summary>Obtém a chave de classificação da cadeia de caracteres especificada.</summary>
        <returns>O objeto <see cref="T:System.Globalization.SortKey" /> que contém a chave de classificação da cadeia de caracteres especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada caractere em uma cadeia de caracteres é atribuída diversas categorias de pesos de classificação, incluindo o script, alfabético, maiusculas e os pesos diacríticos. Uma chave de classificação é o repositório desses pesos para uma determinada cadeia de caracteres. Por exemplo, uma chave de classificação pode conter uma cadeia de pesos alfabéticos, seguida por uma cadeia de pesos de maiusculas e assim por diante. O <xref:System.Globalization.CompareInfo.GetSortKey%2A> método é equivalente ao método de API do Windows `LCMapString` com o sinalizador LCMAP_SORTKEY.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.SortKey" />
      </Docs>
    </Member>
    <Member MemberName="GetSortKey">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.SortKey GetSortKey (string source, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.SortKey GetSortKey(string source, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSortKey (source As String, options As CompareOptions) As SortKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Globalization::SortKey ^ GetSortKey(System::String ^ source, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member GetSortKey : string * System.Globalization.CompareOptions -&gt; System.Globalization.SortKey&#xA;override this.GetSortKey : string * System.Globalization.CompareOptions -&gt; System.Globalization.SortKey" Usage="compareInfo.GetSortKey (source, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.SortKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres para a qual um objeto <see cref="T:System.Globalization.SortKey" /> é obtido.</param>
        <param name="options">Uma combinação bit a bit de um ou mais dos seguintes valores de enumeração que definem como a chave de classificação é calculada: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> e <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Obtém um objeto <see cref="T:System.Globalization.SortKey" /> para a cadeia de caracteres especificada usando o valor <see cref="T:System.Globalization.CompareOptions" /> especificado.</summary>
        <returns>O objeto <see cref="T:System.Globalization.SortKey" /> que contém a chave de classificação da cadeia de caracteres especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada caractere em uma cadeia de caracteres é atribuída diversas categorias de pesos de classificação, incluindo o script, alfabético, maiusculas e os pesos diacríticos. Uma chave de classificação é o repositório desses pesos para uma determinada cadeia de caracteres. Por exemplo, uma chave de classificação pode conter uma cadeia de pesos alfabéticos, seguida por uma cadeia de pesos de maiusculas e assim por diante. O <xref:System.Globalization.CompareInfo.GetSortKey%2A> método é equivalente ao método de API do Windows `LCMapString` com o sinalizador LCMAP_SORTKEY.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> contém um valor <see cref="T:System.Globalization.CompareOptions" /> inválido.</exception>
        <altmember cref="T:System.Globalization.SortKey" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retorna o índice baseado em zero da primeira ocorrência de um valor dentro de uma cadeia de caracteres ou dentro de parte dela.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char -&gt; int&#xA;override this.IndexOf : string * char -&gt; int" Usage="compareInfo.IndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres a ser pesquisada.</param>
        <param name="value">O caractere a ser localizado no <paramref name="source" />.</param>
        <summary>Pesquisa a cadeia de caracteres especificada e retorna o índice baseado em zero da primeira ocorrência em toda a cadeia de caracteres de origem.</summary>
        <returns>O índice baseado em zero da primeira ocorrência de <paramref name="value" />, se encontrado, dentro do <paramref name="source" />, caso contrário, -1. Retornará 0 (zero) se <paramref name="value" /> for um caractere ignorável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método pesquisa a cadeia de caracteres de origem desde o início da cadeia de caracteres ao final da cadeia de caracteres.  
  
 Essa sobrecarga executa uma pesquisa sensível à cultura. Se `value` representa um pré-compostos caractere Unicode, como a Ligadura "Æ" (U + 00 C 6), ele pode ser considerado equivalente a qualquer ocorrência de seus componentes na sequência correta, como "AE" (u+0041, U + 0045), dependendo da cultura. Para executar uma pesquisa (sem diferenciação de cultura) ordinal, onde um caractere é considerado equivalente a um outro caractere somente se seus pontos de código Unicode são os mesmos, você deve chamar uma sobrecarga que tem um parâmetro do tipo <xref:System.Globalization.CompareOptions> e use o <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> valor. Diferentemente <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType>, que executa uma comparação sensível à cultura, sobrecargas do <xref:System.String.IndexOf%2A?displayProperty=nameWithType> método pesquisar um caractere realizam uma comparação ordinal e sobrecargas que pesquisam uma cadeia de caracteres executam uma comparação sensível à cultura.  
  
> [!NOTE]
>  Quando possível, você deve usar métodos de comparação de cadeia de caracteres que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir determina os índices de ocorrências e sobrenome de um caractere ou uma subcadeia de caracteres dentro de uma cadeia de caracteres.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.</exception>
        <block subset="none" type="usage"><para>Conjuntos de caracteres incluem caracteres ignoráveis, que são caracteres que não são considerados ao executar uma classificação linguística ou sensível à cultura. Em uma pesquisa sensível à cultura, se <paramref name="value" /> é um caractere ignorável, o resultado é equivalente à pesquisa com esse caractere removido. Nesse caso, o <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" /> método sempre retorna 0 (zero) para indicar que a correspondência for encontrada no início do <paramref name="source" />. No exemplo a seguir, o <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" /> método é usado para localizar o hífen (U + 00AD) em duas cadeias de caracteres. Apenas uma das cadeias de caracteres contém um hífen condicional. Em ambos os casos, porque o hífen condicional é um caractere ignorável, o método retorna 0 (zero) para indicar que encontrou uma correspondência no início da cadeia de caracteres.  
  
[!code-csharp[System.Globalization.CompareInfo.IndexOf#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable2.cs#3)] [!code-vb[System.Globalization.CompareInfo.IndexOf#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable2.vb#3)]</para></block>
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string -&gt; int&#xA;override this.IndexOf : string * string -&gt; int" Usage="compareInfo.IndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres a ser pesquisada.</param>
        <param name="value">A cadeia de caracteres a ser localizada dentro de <paramref name="source" />.</param>
        <summary>Pesquisa a subcadeia de caracteres especificada e retorna o índice baseado em zero da primeira ocorrência em toda a cadeia de caracteres de origem.</summary>
        <returns>O índice baseado em zero da primeira ocorrência de <paramref name="value" />, se encontrado, dentro do <paramref name="source" />, caso contrário, -1. Retornará 0 (zero) se <paramref name="value" /> for um caractere ignorável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de origem é pesquisada para frente desde o início da cadeia de caracteres e termina no final da cadeia de caracteres.  
  
 Essa sobrecarga executa uma pesquisa sensível à cultura. Um valor Unicode que representa um caractere pré-composto, como a Ligadura "Æ" (U + 00 C 6), pode ser considerado equivalente a qualquer ocorrência de componentes do caractere na sequência correta, como "AE" (u+0041, U + 0045), dependendo da cultura. Para executar uma pesquisa ordinal (diferencia a cultura), em que os valores de Unicode são comparados, você deve usar uma das sobrecargas que tem um parâmetro do tipo <xref:System.Globalization.CompareOptions> e use o <xref:System.Globalization.CompareOptions.Ordinal> valor.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir determina os índices de ocorrências e sobrenome de um caractere ou uma subcadeia de caracteres dentro de uma cadeia de caracteres.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="value" /> é <see langword="null" />.</exception>
        <block subset="none" type="usage"><para>Conjuntos de caracteres incluem caracteres ignoráveis, que são caracteres que não são considerados ao executar uma classificação linguística ou sensível à cultura. Em uma pesquisa sensível à cultura, caso <paramref name="value" /> contenha um caractere ignorável, o resultado é equivalente à pesquisa com esse caractere removido. Se <paramref name="value" /> consiste apenas em um ou mais caracteres ignoráveis, o <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" /> método sempre retorna 0 (zero) para indicar que a correspondência for encontrada no início do <paramref name="source" />. No exemplo a seguir, o <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" /> método é usado para encontrar subcadeias de três caracteres (um hífen (U + 00AD), um hífen seguido por "n" e um hífen seguido por "m") em duas cadeias de caracteres. Apenas uma das cadeias de caracteres contém um hífen condicional. Em cada caso, como o hífen condicional é um caractere ignorável, o resultado é o mesmo como se o hífen não havia sido incluído no <paramref name="value" />. Ao procurar por um hífen somente, o método retorna 0 (zero) para indicar que encontrou uma correspondência no início da cadeia de caracteres.  
  
[!code-csharp[System.Globalization.CompareInfo.IndexOf#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable1.cs#2)] [!code-vb[System.Globalization.CompareInfo.IndexOf#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable1.vb#2)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * char * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres a ser pesquisada.</param>
        <param name="value">O caractere a ser localizado no <paramref name="source" />.</param>
        <param name="options">Um valor que define como as cadeias de caracteres devem ser comparadas. <paramref name="options" /> é o valor de enumeração <see cref="F:System.Globalization.CompareOptions.Ordinal" /> ou uma combinação bit a bit de um ou mais dos seguintes valores: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> e <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Pesquisa a cadeia de caracteres especificada e retorna o índice baseado em zero da primeira ocorrência em toda a cadeia de caracteres de origem usando o valor <see cref="T:System.Globalization.CompareOptions" /> especificado.</summary>
        <returns>O índice baseado em zero da primeira ocorrência de <paramref name="value" />, se encontrado, em <paramref name="source" />, usando as opções de comparação especificadas; caso contrário, -1. Retornará 0 (zero) se <paramref name="value" /> for um caractere ignorável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de origem é pesquisada para frente desde o início da cadeia de caracteres e termina no final da cadeia de caracteres.  
  
 O <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valor não é válido para esse método.  
  
 Se `options` não inclui o <xref:System.Globalization.CompareOptions.Ordinal> valor, essa sobrecarga executa uma pesquisa sensível à cultura. Se o caractere for um valor Unicode que representa um caractere pré-composto, como a Ligadura "Æ" (U + 00 C 6), ele pode ser considerado equivalente a qualquer ocorrência de seus componentes na sequência correta, como "AE" (u+0041, U + 0045), dependendo da cultura. Se `options` inclui o <xref:System.Globalization.CompareOptions.Ordinal> valor, essa sobrecarga executa uma pesquisa de (sem diferenciação de cultura) ordinal. Um caractere é considerado equivalente a um outro caractere somente se os valores de Unicode são os mesmos. Sobrecargas de <xref:System.String.IndexOf%2A?displayProperty=nameWithType> que pesquisam um caractere de executar uma pesquisa ordinal, enquanto que aqueles que pesquisam uma cadeia de caracteres executam uma pesquisa sensível à cultura.  
  
> [!NOTE]
>  Quando possível, você deve usar métodos de comparação de cadeia de caracteres que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir determina os índices de ocorrências e sobrenome de um caractere ou uma subcadeia de caracteres dentro de uma cadeia de caracteres.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> contém um valor <see cref="T:System.Globalization.CompareOptions" /> inválido.</exception>
        <block subset="none" type="usage"><para>Conjuntos de caracteres incluem caracteres ignoráveis, que são caracteres que não são considerados ao executar uma classificação linguística ou sensível à cultura. Em uma pesquisa sensível à cultura, se <paramref name="value" /> é um caractere ignorável, o resultado é equivalente à pesquisa com esse caractere removido. Nesse caso, o <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> método sempre retorna 0 (zero) para indicar que a correspondência for encontrada no início do <paramref name="source" />. No exemplo a seguir, o <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> método é usado para pesquisar um hífen (U + 00AD) em duas cadeias de caracteres. Apenas uma das cadeias de caracteres contém um hífen condicional. Em ambos os casos, porque o hífen condicional é um caractere ignorável, uma pesquisa sensível à cultura retorna 0 (zero) para indicar que encontrou uma correspondência no início da cadeia de caracteres. Uma pesquisa ordinal, no entanto, localiza o hífen em uma cadeia de caracteres com êxito e relata que está ausente da segunda cadeia de caracteres.  
  
[!code-csharp[System.Globalization.CompareInfo.IndexOf#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable3.cs#4)] [!code-vb[System.Globalization.CompareInfo.IndexOf#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable3.vb#4)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int -&gt; int&#xA;override this.IndexOf : string * char * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.Char" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="startIndex" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres a ser pesquisada.</param>
        <param name="value">O caractere a ser localizado no <paramref name="source" />.</param>
        <param name="startIndex">O índice inicial com base em zero da pesquisa.</param>
        <summary>Pesquisa o caractere especificado e retorna o índice baseado em zero da primeira ocorrência dentro da seção da cadeia de caracteres de origem que se estende do índice especificado ao final da cadeia de caracteres.</summary>
        <returns>O índice baseado em zero da primeira ocorrência de <paramref name="value" />, se for encontrado, na seção de <paramref name="source" /> que se estende de <paramref name="startIndex" /> até o final de <paramref name="source" />; caso contrário, -1. Retorna <paramref name="startIndex" /> se <paramref name="value" /> é um caractere ignorável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de origem é pesquisada para frente, começando em `startIndex` e termina no final da cadeia de caracteres.  
  
 Essa sobrecarga executa uma pesquisa sensível à cultura. Se o caractere for um valor Unicode que representa um caractere pré-composto, como a Ligadura "Æ" (U + 00 C 6), ele pode ser considerado equivalente a qualquer ocorrência de seus componentes na sequência correta, como "AE" (u+0041, U + 0045), dependendo da cultura. Para executar uma pesquisa ordinal (diferencia a cultura), onde um caractere é considerado equivalente a um outro caractere somente se os valores de Unicode são os mesmos, você deve chamar uma das sobrecargas que tem um parâmetro do tipo <xref:System.Globalization.CompareOptions> e use o <xref:System.Globalization.CompareOptions.Ordinal> valor. Sobrecargas de <xref:System.String.IndexOf%2A?displayProperty=nameWithType> que pesquisam um caractere de executar uma pesquisa ordinal, enquanto que aqueles que pesquisam uma cadeia de caracteres executam uma pesquisa sensível à cultura.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir determina os índices de ocorrências e sobrenome de um caractere ou uma subcadeia de caracteres dentro de uma parte de uma cadeia de caracteres. Observe que <xref:System.Globalization.CompareInfo.IndexOf%2A> e <xref:System.Globalization.CompareInfo.LastIndexOf%2A> estiver pesquisando em diferentes partes da cadeia de caracteres, mesmo com o mesmo `startIndex` parâmetro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> está fora do intervalo de índices válidos para <paramref name="source" />.</exception>
        <block subset="none" type="usage"><para>Conjuntos de caracteres incluem caracteres ignoráveis, que são caracteres que não são considerados ao executar uma classificação linguística ou sensível à cultura. Em uma pesquisa sensível à cultura, se <paramref name="value" /> é um caractere ignorável, o resultado é equivalente à pesquisa com esse caractere removido. Nesse caso, o <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" /> método sempre retorna <paramref name="startIndex" />, que é a posição do caractere no qual a pesquisa começa. No exemplo a seguir, o <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" /> método é usado para localizar um hífen (U + 00AD) após um "n" em duas cadeias de caracteres. Apenas uma das cadeias de caracteres contém um hífen condicional. Em ambos os casos, porque o hífen condicional é um caractere ignorável, o método retorna 1 para indicar que encontrou uma correspondência na posição do "n".  
  
[!code-csharp[System.Globalization.CompareInfo.IndexOf#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable4.cs#5)] [!code-vb[System.Globalization.CompareInfo.IndexOf#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable4.vb#5)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres a ser pesquisada.</param>
        <param name="value">A cadeia de caracteres a ser localizada dentro de <paramref name="source" />.</param>
        <param name="options">Um valor que define como <paramref name="source" /> e <paramref name="value" /> devem ser comparados. <paramref name="options" /> é o valor de enumeração <see cref="F:System.Globalization.CompareOptions.Ordinal" /> ou uma combinação bit a bit de um ou mais dos seguintes valores: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> e <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Pesquisa a subcadeia de caracteres especificada e retorna o índice com base em zero da primeira ocorrência dentro de toda a cadeia de caracteres de origem usando o valor <see cref="T:System.Globalization.CompareOptions" /> especificado.</summary>
        <returns>O índice baseado em zero da primeira ocorrência de <paramref name="value" />, se encontrado, em <paramref name="source" />, usando as opções de comparação especificadas; caso contrário, -1. Retornará 0 (zero) se <paramref name="value" /> for um caractere ignorável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de origem é pesquisada para frente desde o início da cadeia de caracteres e termina no final da cadeia de caracteres.  
  
 O <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valor não é válido para esse método.  
  
 Se `options` não inclui o <xref:System.Globalization.CompareOptions.Ordinal> valor, essa sobrecarga executa uma pesquisa sensível à cultura. Um valor Unicode que representa um caractere pré-composto, como a Ligadura "Æ" (U + 00 C 6), pode ser considerado equivalente a qualquer ocorrência de componentes do caractere na sequência correta, como "AE" (u+0041, U + 0045), dependendo da cultura. Se `options` inclui o <xref:System.Globalization.CompareOptions.Ordinal> valor, essa sobrecarga executa uma pesquisa ordinal (diferencia a cultura), em que os valores de Unicode são comparados.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir determina os índices de ocorrências e sobrenome de um caractere ou uma subcadeia de caracteres dentro de uma cadeia de caracteres.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="value" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> contém um valor <see cref="T:System.Globalization.CompareOptions" /> inválido.</exception>
        <block subset="none" type="usage"><para>Conjuntos de caracteres incluem caracteres ignoráveis, que são caracteres que não são considerados ao executar uma classificação linguística ou sensível à cultura. Em uma pesquisa sensível à cultura (ou seja, caso <paramref name="options" /> não seja <see cref="F:System.Globalization.CompareOptions.Ordinal" /> ou <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), caso <paramref name="value" /> contenha um caractere ignorável, o resultado é equivalente à pesquisa com esse caractere removido. Se <paramref name="value" /> consiste apenas em um ou mais caracteres ignoráveis, o <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> método sempre retorna 0 (zero) para indicar que a correspondência for encontrada no início do <paramref name="source" />. No exemplo a seguir, o <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> método é usado para encontrar subcadeias de três caracteres (um hífen (U + 00AD), um hífen seguido por "n" e um hífen seguido por "m") em duas cadeias de caracteres. Apenas uma das cadeias de caracteres contém um hífen condicional. Como o hífen é um caractere ignorável, uma pesquisa sensível à cultura retorna o mesmo valor que será retornado se o hífen não foram incluídos na cadeia de caracteres de pesquisa. Uma pesquisa ordinal, no entanto, localiza o hífen em uma cadeia de caracteres com êxito e relata que está ausente da segunda cadeia de caracteres.  
  
[!code-csharp[System.Globalization.CompareInfo.IndexOf#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable5.cs#6)] [!code-vb[System.Globalization.CompareInfo.IndexOf#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable5.vb#6)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int -&gt; int&#xA;override this.IndexOf : string * string * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="startIndex" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres a ser pesquisada.</param>
        <param name="value">A cadeia de caracteres a ser localizada dentro de <paramref name="source" />.</param>
        <param name="startIndex">O índice inicial com base em zero da pesquisa.</param>
        <summary>Pesquisa a subcadeia de caracteres especificada e retorna o índice baseado em zero da primeira ocorrência dentro da seção da cadeia de caracteres que se estende do índice especificado para o final da cadeia de caracteres.</summary>
        <returns>O índice baseado em zero da primeira ocorrência de <paramref name="value" />, se for encontrado, na seção de <paramref name="source" /> que se estende de <paramref name="startIndex" /> até o final de <paramref name="source" />; caso contrário, -1. Retorna <paramref name="startIndex" /> se <paramref name="value" /> é um caractere ignorável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de origem é pesquisada para frente, começando em `startIndex` e termina no final da cadeia de caracteres.  
  
 Essa sobrecarga executa uma pesquisa sensível à cultura. Um valor Unicode que representa um caractere pré-composto, como a Ligadura "Æ" (U + 00 C 6), pode ser considerado equivalente a qualquer ocorrência de componentes do caractere na sequência correta, como "AE" (u+0041, U + 0045), dependendo da cultura. Para executar uma pesquisa ordinal (diferencia a cultura), em que os valores de Unicode são comparados, você deve chamar uma das sobrecargas que tem um parâmetro do tipo <xref:System.Globalization.CompareOptions> e use o <xref:System.Globalization.CompareOptions.Ordinal> valor.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir determina os índices de ocorrências e sobrenome de um caractere ou uma subcadeia de caracteres dentro de uma parte de uma cadeia de caracteres. Observe que <xref:System.Globalization.CompareInfo.IndexOf%2A> e <xref:System.Globalization.CompareInfo.LastIndexOf%2A> estiver pesquisando em diferentes partes da cadeia de caracteres, mesmo com o mesmo `startIndex` parâmetro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="value" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> está fora do intervalo de índices válidos para <paramref name="source" />.</exception>
        <block subset="none" type="usage"><para>Conjuntos de caracteres incluem caracteres ignoráveis, que são caracteres que não são considerados ao executar uma classificação linguística ou sensível à cultura. Em uma pesquisa sensível à cultura, caso <paramref name="value" /> contenha um caractere ignorável, o resultado é equivalente à pesquisa com esse caractere removido. Se <paramref name="value" /> consiste apenas em um ou mais caracteres ignoráveis, o <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" /> método sempre retorna <paramref name="startIndex" />, que é a posição do caractere no qual a pesquisa começa.  
  
No exemplo a seguir, o <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" /> método é usado para localizar a posição de um hífen (U + 00AD) seguida por um "m" em duas cadeias de caracteres. Apenas uma das cadeias de caracteres contém a subcadeia de caracteres necessária. Em ambos os casos, porque o hífen condicional é um caractere ignorável, o método retorna o índice do "m" na cadeia de caracteres. No caso da primeira cadeia de caracteres, que inclui o hífen condicional seguido de um "m", o método não retorna o índice do hífen virtual, mas retorna o índice do "m".  
  
[!code-csharp[System.Globalization.CompareInfo.IndexOf#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable13.cs#14)] [!code-vb[System.Globalization.CompareInfo.IndexOf#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable13.vb#14)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres a ser pesquisada.</param>
        <param name="value">O caractere a ser localizado no <paramref name="source" />.</param>
        <param name="startIndex">O índice inicial com base em zero da pesquisa.</param>
        <param name="options">Um valor que define como <paramref name="source" /> e <paramref name="value" /> devem ser comparados. <paramref name="options" /> é o valor de enumeração <see cref="F:System.Globalization.CompareOptions.Ordinal" /> ou uma combinação bit a bit de um ou mais dos seguintes valores: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> e <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Pesquisa o caractere especificado e retorna o índice baseado em zero da primeira ocorrência dentro da seção da cadeia de caracteres de origem que se estende do índice especificado ao final da cadeia de caracteres usando o valor de <see cref="T:System.Globalization.CompareOptions" /> especificado.</summary>
        <returns>O índice baseado em zero da primeira ocorrência de <paramref name="value" />, se encontrado, dentro da seção de <paramref name="source" /> que se estende de <paramref name="startIndex" /> até o final de <paramref name="source" />, usando as opções de comparação especificadas; caso contrário, -1. Retorna <paramref name="startIndex" /> se <paramref name="value" /> é um caractere ignorável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de origem é pesquisada para frente, começando em `startIndex` e termina no final da cadeia de caracteres.  
  
 O <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valor não é válido para esse método.  
  
 Se `options` não inclui o <xref:System.Globalization.CompareOptions.Ordinal> valor, essa sobrecarga executa uma pesquisa sensível à cultura. Se o caractere for um valor Unicode que representa um caractere pré-composto, como a Ligadura "Æ" (U + 00 C 6), ele pode ser considerado equivalente a qualquer ocorrência de seus componentes na sequência correta, como "AE" (u+0041, U + 0045), dependendo da cultura. Se `options` inclui o <xref:System.Globalization.CompareOptions.Ordinal> valor, essa sobrecarga executa uma pesquisa de (sem diferenciação de cultura) ordinal. Um caractere é considerado equivalente a um outro caractere somente se os valores de Unicode são os mesmos. Sobrecargas de <xref:System.String.IndexOf%2A?displayProperty=nameWithType> que pesquisam um caractere de executar uma pesquisa ordinal, enquanto que aqueles que pesquisam uma cadeia de caracteres executam uma pesquisa sensível à cultura.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir determina os índices de ocorrências e sobrenome de um caractere ou uma subcadeia de caracteres dentro de uma parte de uma cadeia de caracteres. Observe que <xref:System.Globalization.CompareInfo.IndexOf%2A> e <xref:System.Globalization.CompareInfo.LastIndexOf%2A> estiver pesquisando em diferentes partes da cadeia de caracteres, mesmo com o mesmo `startIndex` parâmetro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> está fora do intervalo de índices válidos para <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> contém um valor <see cref="T:System.Globalization.CompareOptions" /> inválido.</exception>
        <block subset="none" type="usage"><para>Conjuntos de caracteres incluem caracteres ignoráveis, que são caracteres que não são considerados ao executar uma classificação linguística ou sensível à cultura. Em uma pesquisa sensível à cultura, se <paramref name="value" /> é um caractere ignorável, o resultado é equivalente à pesquisa com esse caractere removido. Nesse caso, o <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> método sempre retorna <paramref name="startIndex" />, a posição do caractere no qual a pesquisa começou pela primeira vez. No exemplo a seguir, o <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> método é usado para localizar o hífen (U + 00AD) após um "n" em duas cadeias de caracteres. Apenas uma das cadeias de caracteres contém um hífen condicional. Em ambos os casos, porque o hífen condicional é um caractere ignorável, uma pesquisa sensível à cultura retorna 1 para indicar que encontrou uma correspondência na posição do "n". Uma pesquisa ordinal, no entanto, localiza o hífen em uma cadeia de caracteres com êxito e relata que está ausente da segunda cadeia de caracteres.  
  
[!code-csharp[System.Globalization.CompareInfo.IndexOf#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable7.cs#8)] [!code-vb[System.Globalization.CompareInfo.IndexOf#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable7.vb#8)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int * int -&gt; int&#xA;override this.IndexOf : string * char * int * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres a ser pesquisada.</param>
        <param name="value">O caractere a ser localizado no <paramref name="source" />.</param>
        <param name="startIndex">O índice inicial com base em zero da pesquisa.</param>
        <param name="count">O número de elementos na seção a ser pesquisada.</param>
        <summary>Pesquisa o caractere especificado e retorna o índice baseado em zero da primeira ocorrência dentro da seção da cadeia de caracteres de origem, que começa no índice especificado e contém o número de elementos especificado.</summary>
        <returns>O índice baseado em zero da primeira ocorrência de <paramref name="value" />, se encontrado, dentro da seção de <paramref name="source" /> que começa em <paramref name="startIndex" /> e contém o número de elementos especificado por <paramref name="count" />; caso contrário, -1. Retorna <paramref name="startIndex" /> se <paramref name="value" /> é um caractere ignorável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de origem é pesquisada forward começando `startIndex` e termina em `startIndex`  +  `count` - 1.  
  
 Essa sobrecarga executa uma pesquisa sensível à cultura. Se o caractere for um valor Unicode que representa um caractere pré-composto, como a Ligadura "Æ" (U + 00 C 6), ele pode ser considerado equivalente a qualquer ocorrência de seus componentes na sequência correta, como "AE" (u+0041, U + 0045), dependendo da cultura. Para executar uma pesquisa ordinal (diferencia a cultura), onde um caractere é considerado equivalente a um outro caractere somente se os valores de Unicode são os mesmos, você deve chamar uma das sobrecargas que tem um parâmetro do tipo <xref:System.Globalization.CompareOptions> e use o <xref:System.Globalization.CompareOptions.Ordinal> valor. Sobrecargas de <xref:System.String.IndexOf%2A?displayProperty=nameWithType> que pesquisam um caractere de executar uma pesquisa ordinal, enquanto que aqueles que pesquisam uma cadeia de caracteres executam uma pesquisa sensível à cultura.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir determina os índices de ocorrências e sobrenome de um caractere ou uma subcadeia de caracteres dentro de uma parte de uma cadeia de caracteres.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> está fora do intervalo de índices válidos para <paramref name="source" />.  
  
- ou - 
 <paramref name="count" /> é menor que zero.  
  
- ou - 
 <paramref name="startIndex" /> e <paramref name="count" /> não especificam uma seção válida em <paramref name="source" />.</exception>
        <block subset="none" type="usage"><para>Conjuntos de caracteres incluem caracteres ignoráveis, que são caracteres que não são considerados ao executar uma classificação linguística ou sensível à cultura. Em uma pesquisa sensível à cultura, se <paramref name="value" /> é um caractere ignorável, o resultado é equivalente à pesquisa com esse caractere removido. Nesse caso, o <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" /> método sempre retorna <paramref name="startIndex" />, que é a posição do caractere no qual a pesquisa começou pela primeira vez. No exemplo a seguir, o <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" /> método é usado para localizar um hífen (U + 00AD) após um "n" em duas cadeias de caracteres. Apenas uma das cadeias de caracteres contém um hífen condicional. Em ambos os casos, porque o hífen condicional é um caractere ignorável, o método retorna 1 para indicar que encontrou uma correspondência na posição do "n".  
  
[!code-csharp[System.Globalization.CompareInfo.IndexOf#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable8.cs#9)] [!code-vb[System.Globalization.CompareInfo.IndexOf#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable8.vb#9)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres a ser pesquisada.</param>
        <param name="value">A cadeia de caracteres a ser localizada dentro de <paramref name="source" />.</param>
        <param name="startIndex">O índice inicial com base em zero da pesquisa.</param>
        <param name="options">Um valor que define como <paramref name="source" /> e <paramref name="value" /> devem ser comparados. <paramref name="options" /> é o valor de enumeração <see cref="F:System.Globalization.CompareOptions.Ordinal" /> ou uma combinação bit a bit de um ou mais dos seguintes valores: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> e <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Pesquisa a subcadeia de caracteres especificada e retorna o índice baseado em zero da primeira ocorrência dentro da seção da cadeia de caracteres de origem que se estende do índice especificado ao final da cadeia de caracteres usando o valor de <see cref="T:System.Globalization.CompareOptions" /> especificado.</summary>
        <returns>O índice baseado em zero da primeira ocorrência de <paramref name="value" />, se encontrado, dentro da seção de <paramref name="source" /> que se estende de <paramref name="startIndex" /> até o final de <paramref name="source" />, usando as opções de comparação especificadas; caso contrário, -1. Retorna <paramref name="startIndex" /> se <paramref name="value" /> é um caractere ignorável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de origem é pesquisada para frente, começando em `startIndex` e termina no final da cadeia de caracteres.  
  
 O <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valor não é válido para esse método.  
  
 Se `options` não inclui o <xref:System.Globalization.CompareOptions.Ordinal> valor, essa sobrecarga executa uma pesquisa sensível à cultura. Um valor Unicode que representa um caractere pré-composto, como a Ligadura "Æ" (U + 00 C 6), pode ser considerado equivalente a qualquer ocorrência de componentes do caractere na sequência correta, como "AE" (u+0041, U + 0045), dependendo da cultura. Se `options` inclui o <xref:System.Globalization.CompareOptions.Ordinal> valor, essa sobrecarga executa uma pesquisa ordinal (diferencia a cultura), em que os valores de Unicode são comparados.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir determina os índices de ocorrências e sobrenome de um caractere ou uma subcadeia de caracteres dentro de uma parte de uma cadeia de caracteres. Observe que <xref:System.Globalization.CompareInfo.IndexOf%2A> e <xref:System.Globalization.CompareInfo.LastIndexOf%2A> estiver pesquisando em diferentes partes da cadeia de caracteres, mesmo com o mesmo `startIndex` parâmetro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="value" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> está fora do intervalo de índices válidos para <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> contém um valor <see cref="T:System.Globalization.CompareOptions" /> inválido.</exception>
        <block subset="none" type="usage"><para>Conjuntos de caracteres incluem caracteres ignoráveis, que são caracteres que não são considerados ao executar uma classificação linguística ou sensível à cultura. Em uma pesquisa sensível à cultura (ou seja, caso <paramref name="options" /> não seja <see cref="F:System.Globalization.CompareOptions.Ordinal" /> ou <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), caso <paramref name="value" /> contenha um caractere ignorável, o resultado é equivalente à pesquisa com esse caractere removido. Se <paramref name="value" /> consiste apenas em um ou mais caracteres ignoráveis, o <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> método sempre retorna <paramref name="startIndex" />, que é a posição do caractere no qual a pesquisa começa.  
  
No exemplo a seguir, o <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> método é usado para localizar a posição de um hífen (U + 00AD) seguida por um "m" a partir da posição do terceiro caractere duas cadeias de caracteres. Apenas uma das cadeias de caracteres contém a subcadeia de caracteres necessária. Em ambos os casos, como o hífen condicional é um caractere ignorável, o método retorna o índice de "m" na cadeia de caracteres ao realizar uma comparação sensível à cultura. No caso da primeira cadeia de caracteres, que inclui o hífen condicional seguido de um "m", o método não retorna o índice do hífen virtual, mas retorna o índice do "m". O método só retorna o índice do hífen condicional na primeira cadeia de caracteres quando executa uma comparação ordinal.  
  
[!code-csharp[System.Globalization.CompareInfo.IndexOf#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable14.cs#15)] [!code-vb[System.Globalization.CompareInfo.IndexOf#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable14.vb#15)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int * int -&gt; int&#xA;override this.IndexOf : string * string * int * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres a ser pesquisada.</param>
        <param name="value">A cadeia de caracteres a ser localizada dentro de <paramref name="source" />.</param>
        <param name="startIndex">O índice inicial com base em zero da pesquisa.</param>
        <param name="count">O número de elementos na seção a ser pesquisada.</param>
        <summary>Pesquisa a subcadeia de caracteres especificadas e retorna o índice baseado em zero da primeira ocorrência dentro da seção da cadeia de caracteres de origem, que começa no índice especificado e contém o número de elementos especificado.</summary>
        <returns>O índice baseado em zero da primeira ocorrência de <paramref name="value" />, se encontrado, dentro da seção de <paramref name="source" /> que começa em <paramref name="startIndex" /> e contém o número de elementos especificado por <paramref name="count" />; caso contrário, -1. Retorna <paramref name="startIndex" /> se <paramref name="value" /> é um caractere ignorável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de origem é pesquisada forward começando `startIndex` e termina em `startIndex`  +  `count` - 1.  
  
 Essa sobrecarga executa uma pesquisa sensível à cultura. Um valor Unicode que representa um caractere pré-composto, como a Ligadura "Æ" (U + 00 C 6), pode ser considerado equivalente a qualquer ocorrência de componentes do caractere na sequência correta, como "AE" (u+0041, U + 0045), dependendo da cultura. Para executar uma pesquisa ordinal (diferencia a cultura), em que os valores de Unicode são comparados, você deve chamar uma das sobrecargas que tem um parâmetro do tipo <xref:System.Globalization.CompareOptions> e use o <xref:System.Globalization.CompareOptions.Ordinal> valor.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir determina os índices de ocorrências e sobrenome de um caractere ou uma subcadeia de caracteres dentro de uma parte de uma cadeia de caracteres.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="value" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> está fora do intervalo de índices válidos para <paramref name="source" />.  
  
- ou - 
 <paramref name="count" /> é menor que zero.  
  
- ou - 
 <paramref name="startIndex" /> e <paramref name="count" /> não especificam uma seção válida em <paramref name="source" />.</exception>
        <block subset="none" type="usage"><para>Conjuntos de caracteres incluem caracteres ignoráveis, que são caracteres que não são considerados ao executar uma classificação linguística ou sensível à cultura. Em uma pesquisa sensível à cultura, caso <paramref name="value" /> contenha um caractere ignorável, o resultado é equivalente à pesquisa com esse caractere removido. Se <paramref name="value" /> consiste apenas em um ou mais caracteres ignoráveis, o <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" /> método sempre retorna <paramref name="startIndex" />, que é a posição do caractere no qual a pesquisa começa.  
  
No exemplo a seguir, o <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" /> método é usado para localizar a posição de um hífen (U + 00AD) seguida por um "m" a partir do terceiro ao sexto posições de caractere em duas cadeias de caracteres. Apenas uma das cadeias de caracteres contém a subcadeia de caracteres necessária. Em ambos os casos, como o hífen condicional é um caractere ignorável, o método retorna o índice de "m" na cadeia de caracteres ao realizar uma comparação sensível à cultura. No caso da primeira cadeia de caracteres, que inclui o hífen condicional seguido de um "m", o método não retorna o índice do hífen virtual, mas retorna o índice do "m".  
  
[!code-csharp[System.Globalization.CompareInfo.IndexOf#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable16.cs#17)] [!code-vb[System.Globalization.CompareInfo.IndexOf#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable16.vb#17)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres a ser pesquisada.</param>
        <param name="value">O caractere a ser localizado no <paramref name="source" />.</param>
        <param name="startIndex">O índice inicial com base em zero da pesquisa.</param>
        <param name="count">O número de elementos na seção a ser pesquisada.</param>
        <param name="options">Um valor que define como <paramref name="source" /> e <paramref name="value" /> devem ser comparados. <paramref name="options" /> é o valor de enumeração <see cref="F:System.Globalization.CompareOptions.Ordinal" /> ou uma combinação bit a bit de um ou mais dos seguintes valores: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> e <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Pesquisa o caractere especificado e retorna o índice baseado em zero da primeira ocorrência dentro de uma seção da cadeia de caracteres de origem que começa no índice especificado e contém o número de elementos especificado usando o valor <see cref="T:System.Globalization.CompareOptions" /> especificado.</summary>
        <returns>O índice baseado em zero da primeira ocorrência de <paramref name="value" />, se encontrado, dentro da seção de <paramref name="source" /> que começa em <paramref name="startIndex" /> e contém o número de elementos especificado por <paramref name="count" />, usando as opções de comparação especificadas; caso contrário, -1. Retorna <paramref name="startIndex" /> se <paramref name="value" /> é um caractere ignorável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de origem é pesquisada forward começando `startIndex` e termina em `startIndex`  +  `count` - 1.  
  
 O <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valor não é válido para esse método.  
  
 Se `options` não inclui o <xref:System.Globalization.CompareOptions.Ordinal> valor, essa sobrecarga executa uma pesquisa sensível à cultura. Se o caractere for um valor Unicode que representa um caractere pré-composto, como a Ligadura "Æ" (U + 00 C 6), ele pode ser considerado equivalente a qualquer ocorrência de seus componentes na sequência correta, como "AE" (u+0041, U + 0045), dependendo da cultura. Se `options` inclui o <xref:System.Globalization.CompareOptions.Ordinal> valor, essa sobrecarga executa uma pesquisa de (sem diferenciação de cultura) ordinal. Um caractere é considerado equivalente a um outro caractere somente se os valores de Unicode são os mesmos. Sobrecargas de <xref:System.String.IndexOf%2A?displayProperty=nameWithType> que pesquisam um caractere de executar uma pesquisa ordinal, enquanto que aqueles que pesquisam uma cadeia de caracteres executam uma pesquisa sensível à cultura.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir determina os índices de ocorrências e sobrenome de um caractere ou uma subcadeia de caracteres dentro de uma parte de uma cadeia de caracteres.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> está fora do intervalo de índices válidos para <paramref name="source" />.  
  
- ou - 
 <paramref name="count" /> é menor que zero.  
  
- ou - 
 <paramref name="startIndex" /> e <paramref name="count" /> não especificam uma seção válida em <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> contém um valor <see cref="T:System.Globalization.CompareOptions" /> inválido.</exception>
        <block subset="none" type="usage"><para>Conjuntos de caracteres incluem caracteres ignoráveis, que são caracteres que não são considerados ao executar uma classificação linguística ou sensível à cultura. Em uma pesquisa sensível à cultura, se <paramref name="value" /> é um caractere ignorável, o resultado é equivalente à pesquisa com esse caractere removido. Nesse caso, o <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> método sempre retorna <paramref name="startIndex" />, que é a posição do caractere no qual a pesquisa começou pela primeira vez. No exemplo a seguir, o <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> método é usado para localizar o hífen (U + 00AD) após um "n" em duas cadeias de caracteres. Apenas uma das cadeias de caracteres contém um hífen condicional. Em ambos os casos, porque o hífen condicional é um caractere ignorável, uma pesquisa sensível à cultura retorna 1 para indicar que encontrou uma correspondência na posição do "n". Uma pesquisa ordinal, no entanto, localiza o hífen em uma cadeia de caracteres com êxito e relata que está ausente da segunda cadeia de caracteres.  
  
[!code-csharp[System.Globalization.CompareInfo.IndexOf#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable11.cs#12)] [!code-vb[System.Globalization.CompareInfo.IndexOf#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable11.vb#12)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres a ser pesquisada.</param>
        <param name="value">A cadeia de caracteres a ser localizada dentro de <paramref name="source" />.</param>
        <param name="startIndex">O índice inicial com base em zero da pesquisa.</param>
        <param name="count">O número de elementos na seção a ser pesquisada.</param>
        <param name="options">Um valor que define como <paramref name="source" /> e <paramref name="value" /> devem ser comparados. <paramref name="options" /> é o valor de enumeração <see cref="F:System.Globalization.CompareOptions.Ordinal" /> ou uma combinação bit a bit de um ou mais dos seguintes valores: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> e <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Pesquisa a subcadeia de caracteres especificada e retorna o índice baseado em zero da primeira ocorrência dentro de uma seção da cadeia de caracteres de origem que começa no índice especificado e contém o número de elementos especificado usando o valor <see cref="T:System.Globalization.CompareOptions" /> especificado.</summary>
        <returns>O índice baseado em zero da primeira ocorrência de <paramref name="value" />, se encontrado, dentro da seção de <paramref name="source" /> que começa em <paramref name="startIndex" /> e contém o número de elementos especificado por <paramref name="count" />, usando as opções de comparação especificadas; caso contrário, -1. Retorna <paramref name="startIndex" /> se <paramref name="value" /> é um caractere ignorável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de origem é pesquisada forward começando `startIndex` e termina em `startIndex`  +  `count` - 1.  
  
 O <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valor não é válido para esse método.  
  
 Se `options` não inclui o <xref:System.Globalization.CompareOptions.Ordinal> valor, essa sobrecarga executa uma pesquisa sensível à cultura. Um valor Unicode que representa um caractere pré-composto, como a Ligadura "Æ" (U + 00 C 6), pode ser considerado equivalente a qualquer ocorrência de componentes do caractere na sequência correta, como "AE" (u+0041, U + 0045), dependendo da cultura. Se `options` inclui o <xref:System.Globalization.CompareOptions.Ordinal> valor, essa sobrecarga executa uma pesquisa ordinal (diferencia a cultura), em que os valores de Unicode são comparados.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir determina os índices de ocorrências e sobrenome de um caractere ou uma subcadeia de caracteres dentro de uma parte de uma cadeia de caracteres.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="value" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> está fora do intervalo de índices válidos para <paramref name="source" />.  
  
- ou - 
 <paramref name="count" /> é menor que zero.  
  
- ou - 
 <paramref name="startIndex" /> e <paramref name="count" /> não especificam uma seção válida em <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> contém um valor <see cref="T:System.Globalization.CompareOptions" /> inválido.</exception>
        <block subset="none" type="usage"><para>Conjuntos de caracteres incluem caracteres ignoráveis, que são caracteres que não são considerados ao executar uma classificação linguística ou sensível à cultura. Em uma pesquisa sensível à cultura (ou seja, caso <paramref name="options" /> não seja <see cref="F:System.Globalization.CompareOptions.Ordinal" /> ou <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), caso <paramref name="value" /> contenha um caractere ignorável, o resultado é equivalente à pesquisa com esse caractere removido. Se <paramref name="value" /> consiste apenas em um ou mais caracteres ignoráveis, o <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> método sempre retorna <paramref name="startIndex" />, que é a posição do caractere no qual a pesquisa começa.  
  
No exemplo a seguir, o <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> método é usado para localizar a posição de um hífen (U + 00AD) seguida por um "m" a partir do terceiro ao sexto posições de caractere em duas cadeias de caracteres. Apenas uma das cadeias de caracteres contém a subcadeia de caracteres necessária. Em ambos os casos, como o hífen condicional é um caractere ignorável, o método retorna o índice de "m" na cadeia de caracteres ao realizar uma comparação sensível à cultura. Quando ele executa uma comparação ordinal, no entanto, ele localiza a subcadeia de caracteres apenas na primeira cadeia de caracteres. Observe que no caso da primeira cadeia de caracteres, que inclui o hífen, seguido por um "m", o método não retorna o índice do hífen virtual, mas em vez disso, retorna o índice do "m", quando ele executa uma comparação sensível à cultura. O método só retorna o índice do hífen condicional na primeira cadeia de caracteres quando executa uma comparação ordinal.  
  
[!code-csharp[System.Globalization.CompareInfo.IndexOf#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable15.cs#16)] [!code-vb[System.Globalization.CompareInfo.IndexOf#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable15.vb#16)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsPrefix">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determina se uma cadeia de caracteres começa com um prefixo específico.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsPrefix">
      <MemberSignature Language="C#" Value="public virtual bool IsPrefix (string source, string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsPrefix(string source, string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsPrefix (source As String, prefix As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsPrefix(System::String ^ source, System::String ^ prefix);" />
      <MemberSignature Language="F#" Value="abstract member IsPrefix : string * string -&gt; bool&#xA;override this.IsPrefix : string * string -&gt; bool" Usage="compareInfo.IsPrefix (source, prefix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres a ser pesquisada.</param>
        <param name="prefix">A cadeia de caracteres a ser comparada com o início de <paramref name="source" />.</param>
        <summary>Determina se a cadeia de caracteres de origem determinada começa com o prefixo especificado.</summary>
        <returns><see langword="true" /> se o tamanho de <paramref name="prefix" /> for menor ou igual ao tamanho de <paramref name="source" /> e <paramref name="source" /> começar com <paramref name="prefix" />; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada cadeia de caracteres começa e termina com uma subcadeia de caracteres vazia (""); Portanto, se `prefix` é uma cadeia de caracteres vazia, este método retorna `true`.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir determina se uma cadeia de caracteres é o prefixo ou sufixo de outra cadeia de caracteres.  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CPP/isprefixsuffix.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CS/isprefixsuffix.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/VB/isprefixsuffix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="prefix" /> é <see langword="null" />.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="IsPrefix">
      <MemberSignature Language="C#" Value="public virtual bool IsPrefix (string source, string prefix, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsPrefix(string source, string prefix, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsPrefix (source As String, prefix As String, options As CompareOptions) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsPrefix(System::String ^ source, System::String ^ prefix, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IsPrefix : string * string * System.Globalization.CompareOptions -&gt; bool&#xA;override this.IsPrefix : string * string * System.Globalization.CompareOptions -&gt; bool" Usage="compareInfo.IsPrefix (source, prefix, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres a ser pesquisada.</param>
        <param name="prefix">A cadeia de caracteres a ser comparada com o início de <paramref name="source" />.</param>
        <param name="options">Um valor que define como <paramref name="source" /> e <paramref name="prefix" /> devem ser comparados. <paramref name="options" /> é o valor de enumeração <see cref="F:System.Globalization.CompareOptions.Ordinal" /> ou uma combinação bit a bit de um ou mais dos seguintes valores: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> e <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Determina se a cadeia de caracteres de origem determinada começa com o prefixo dado usando o valor <see cref="T:System.Globalization.CompareOptions" /> especificado.</summary>
        <returns><see langword="true" /> se o tamanho de <paramref name="prefix" /> for menor ou igual ao tamanho de <paramref name="source" /> e <paramref name="source" /> começar com <paramref name="prefix" />; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada cadeia de caracteres começa e termina com uma subcadeia de caracteres vazia (""); Portanto, se `prefix` é uma cadeia de caracteres vazia, este método retorna `true`.  
  
 O <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valor não é válido para esse método.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir determina se uma cadeia de caracteres é o prefixo ou sufixo de outra cadeia de caracteres usando <xref:System.Globalization.CompareOptions>.  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CPP/isprefixsuffixopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CS/isprefixsuffixopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/VB/isprefixsuffixopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="prefix" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> contém um valor <see cref="T:System.Globalization.CompareOptions" /> inválido.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSortable">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Indica se uma cadeia de caracteres ou um caractere Unicode especificado é classificável.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSortable">
      <MemberSignature Language="C#" Value="public static bool IsSortable (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSortable(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSortable(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSortable (ch As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSortable(char ch);" />
      <MemberSignature Language="F#" Value="static member IsSortable : char -&gt; bool" Usage="System.Globalization.CompareInfo.IsSortable ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="ch">Um caractere Unicode.</param>
        <summary>Indica se um caractere Unicode especificado é classificável.</summary>
        <returns><see langword="true" /> se o parâmetro <paramref name="ch" /> for classificável; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `ch` parâmetro é classificável, se for um caractere Unicode que é definido em interno <xref:System.Globalization.CompareInfo> tabela de classificação de classe, e não é um uso particular ou um caractere substituto alto ou baixo não emparelhado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSortable">
      <MemberSignature Language="C#" Value="public static bool IsSortable (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSortable(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSortable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSortable (text As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSortable(System::String ^ text);" />
      <MemberSignature Language="F#" Value="static member IsSortable : string -&gt; bool" Usage="System.Globalization.CompareInfo.IsSortable text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="text">Uma cadeia de caracteres de zero ou mais caracteres Unicode.</param>
        <summary>Indica se uma cadeira de caracteres Unicode especificada é classificável.</summary>
        <returns><see langword="true" /> se o parâmetro <paramref name="str" /> não for uma cadeia de caracteres vazia ("") e todos os caracteres Unicode em <paramref name="str" /> forem classificáveis; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada caractere Unicode na `str` parâmetro é representado por um ou mais UTF-16 codificado <xref:System.Char> objetos. O `str` parâmetro é classificável se cada caractere Unicode é definido em interno <xref:System.Globalization.CompareInfo> tabela de classificação de classe, e não é um uso particular ou um caractere substituto alto ou baixo não emparelhado.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="str" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSuffix">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determina se uma cadeia de caracteres começa com um sufixo específico.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSuffix">
      <MemberSignature Language="C#" Value="public virtual bool IsSuffix (string source, string suffix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSuffix(string source, string suffix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSuffix (source As String, suffix As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSuffix(System::String ^ source, System::String ^ suffix);" />
      <MemberSignature Language="F#" Value="abstract member IsSuffix : string * string -&gt; bool&#xA;override this.IsSuffix : string * string -&gt; bool" Usage="compareInfo.IsSuffix (source, suffix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="suffix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres a ser pesquisada.</param>
        <param name="suffix">A cadeia de caracteres a ser comparada com o final de <paramref name="source" />.</param>
        <summary>Determina se a cadeia de caracteres de origem especificada termina com o prefixo especificado.</summary>
        <returns><see langword="true" /> se o tamanho de <paramref name="suffix" /> for menor ou igual ao tamanho de <paramref name="source" /> e <paramref name="source" /> terminar com <paramref name="suffix" />; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada cadeia de caracteres começa e termina com uma subcadeia de caracteres vazia (""); Portanto, se `suffix` é uma cadeia de caracteres vazia, este método retorna `true`.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir determina se uma cadeia de caracteres é o prefixo ou sufixo de outra cadeia de caracteres.  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CPP/isprefixsuffix.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CS/isprefixsuffix.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/VB/isprefixsuffix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="suffix" /> é <see langword="null" />.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="IsSuffix">
      <MemberSignature Language="C#" Value="public virtual bool IsSuffix (string source, string suffix, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSuffix(string source, string suffix, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSuffix (source As String, suffix As String, options As CompareOptions) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSuffix(System::String ^ source, System::String ^ suffix, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IsSuffix : string * string * System.Globalization.CompareOptions -&gt; bool&#xA;override this.IsSuffix : string * string * System.Globalization.CompareOptions -&gt; bool" Usage="compareInfo.IsSuffix (source, suffix, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="suffix" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres a ser pesquisada.</param>
        <param name="suffix">A cadeia de caracteres a ser comparada com o final de <paramref name="source" />.</param>
        <param name="options">Um valor que define como <paramref name="source" /> e <paramref name="suffix" /> devem ser comparados. <paramref name="options" /> é o valor da enumeração <see cref="F:System.Globalization.CompareOptions.Ordinal" /> usado por si só ou a combinação bit a bit de um ou mais dos seguintes valores: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> e <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Determina se a cadeia de caracteres de origem determinada termina com o sufixo especificado usando o valor <see cref="T:System.Globalization.CompareOptions" /> especificado.</summary>
        <returns><see langword="true" /> se o tamanho de <paramref name="suffix" /> for menor ou igual ao tamanho de <paramref name="source" /> e <paramref name="source" /> terminar com <paramref name="suffix" />; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada cadeia de caracteres começa e termina com uma subcadeia de caracteres vazia (""); Portanto, se `suffix` é uma cadeia de caracteres vazia, este método retorna `true`.  
  
 O <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valor não é válido para esse método.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir determina se uma cadeia de caracteres é o prefixo ou sufixo de outra cadeia de caracteres usando <xref:System.Globalization.CompareOptions>.  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CPP/isprefixsuffixopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CS/isprefixsuffixopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/VB/isprefixsuffixopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="suffix" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> contém um valor <see cref="T:System.Globalization.CompareOptions" /> inválido.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retorna o índice baseado em zero da última ocorrência de um valor dentro de uma cadeia de caracteres ou dentro de parte dela.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char -&gt; int&#xA;override this.LastIndexOf : string * char -&gt; int" Usage="compareInfo.LastIndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres a ser pesquisada.</param>
        <param name="value">O caractere a ser localizado no <paramref name="source" />.</param>
        <summary>Pesquisa pelo caractere especificado e retorna o índice baseado em zero da última ocorrência em toda a cadeia de caracteres de origem.</summary>
        <returns>O índice baseado em zero da última ocorrência de <paramref name="value" />, se encontrado, em <paramref name="source" />; caso contrário, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de origem é pesquisada para trás começando no final da cadeia de caracteres e terminando no início da cadeia de caracteres.  
  
 Essa sobrecarga executa uma pesquisa sensível à cultura. Se o caractere for um valor Unicode que representa um caractere pré-composto, como a Ligadura "Æ" (U + 00 C 6), ele pode ser considerado equivalente a qualquer ocorrência de seus componentes na sequência correta, como "AE" (u+0041, U + 0045), dependendo da cultura. Para executar uma pesquisa ordinal (diferencia a cultura), onde um caractere é considerado equivalente a um outro caractere somente se os valores de Unicode são os mesmos, você deve chamar uma das sobrecargas que tem um parâmetro do tipo <xref:System.Globalization.CompareOptions> e use o <xref:System.Globalization.CompareOptions.Ordinal> valor. Sobrecargas de <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> que pesquisam um caractere de executar uma pesquisa ordinal, enquanto que aqueles que pesquisam uma cadeia de caracteres executam uma pesquisa sensível à cultura.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir determina os índices de ocorrências e sobrenome de um caractere ou uma subcadeia de caracteres dentro de uma cadeia de caracteres.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.</exception>
        <block subset="none" type="usage"><para>Conjuntos de caracteres incluem caracteres ignoráveis, que são caracteres que não são considerados ao executar uma classificação linguística ou sensível à cultura. Em uma pesquisa sensível à cultura, se <paramref name="value" /> é um caractere ignorável, o resultado é equivalente à pesquisa com esse caractere removido. Nesse caso, o <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" /> método sempre retorna a última posição de índice no <paramref name="source" /> para indicar que a correspondência for encontrada no final da <paramref name="source" />. No exemplo a seguir, o <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" /> método é usado para localizar o hífen (U + 00AD) em duas cadeias de caracteres. Apenas uma das cadeias de caracteres contém um hífen condicional. Em ambos os casos, porque o hífen condicional é um caractere ignorável, o método retorna a última posição de índice na cadeia de caracteres para indicar que encontrou uma correspondência no final da cadeia de caracteres.  
  
[!code-csharp[System.Globalization.CompareInfo.LastIndexOf#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable2.cs#3)] [!code-vb[System.Globalization.CompareInfo.LastIndexOf#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable2.vb#3)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string -&gt; int&#xA;override this.LastIndexOf : string * string -&gt; int" Usage="compareInfo.LastIndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres a ser pesquisada.</param>
        <param name="value">A cadeia de caracteres a ser localizada dentro de <paramref name="source" />.</param>
        <summary>Pesquisa a subcadeia de caracteres especificada e retorna o índice baseado em zero da última ocorrência em toda a cadeia de caracteres de origem.</summary>
        <returns>O índice baseado em zero da última ocorrência de <paramref name="value" />, se encontrado, em <paramref name="source" />; caso contrário, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de origem é pesquisada para trás começando no final da cadeia de caracteres e terminando no início da cadeia de caracteres.  
  
 Essa sobrecarga executa uma pesquisa sensível à cultura. Um valor Unicode que representa um caractere pré-composto, como a Ligadura "Æ" (U + 00 C 6), pode ser considerado equivalente a qualquer ocorrência de componentes do caractere na sequência correta, como "AE" (u+0041, U + 0045), dependendo da cultura. Para executar uma pesquisa ordinal (diferencia a cultura), em que os valores de Unicode são comparados, você deve chamar uma das sobrecargas que tem um parâmetro do tipo <xref:System.Globalization.CompareOptions> e use o <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> valor.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir determina os índices de ocorrências e sobrenome de um caractere ou uma subcadeia de caracteres dentro de uma cadeia de caracteres.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="value" /> é <see langword="null" />.</exception>
        <block subset="none" type="usage"><para>Conjuntos de caracteres incluem caracteres ignoráveis, que são caracteres que não são considerados ao executar uma classificação linguística ou sensível à cultura. Em uma pesquisa sensível à cultura, caso <paramref name="value" /> contenha um caractere ignorável, o resultado é equivalente à pesquisa com esse caractere removido. Se <paramref name="value" /> consiste apenas em um ou mais caracteres ignoráveis, o <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" /> método sempre retorna <paramref name="source" />.<see cref="P:System.String.Length" /> -1, que representa a última posição de índice em <paramref name="source" />. No exemplo a seguir, o <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" /> método é usado para encontrar subcadeias de três caracteres (um hífen (U + 00AD), um hífen seguido por "n" e um hífen seguido por "m") em duas cadeias de caracteres. Apenas uma das cadeias de caracteres contém um hífen condicional. Em cada caso, como o hífen condicional é um caractere ignorável, o resultado é o mesmo como se o hífen não havia sido incluído no <paramref name="value" />. Ao procurar por um hífen somente, o método retorna 6 e 5. Esses valores correspondem ao índice do último caractere em duas cadeias de caracteres.  
  
[!code-csharp[System.Globalization.CompareInfo.LastIndexOf#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable1.cs#2)] [!code-vb[System.Globalization.CompareInfo.LastIndexOf#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable1.vb#2)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * char * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres a ser pesquisada.</param>
        <param name="value">O caractere a ser localizado no <paramref name="source" />.</param>
        <param name="options">Um valor que define como <paramref name="source" /> e <paramref name="value" /> devem ser comparados. <paramref name="options" /> é o valor de enumeração <see cref="F:System.Globalization.CompareOptions.Ordinal" /> ou uma combinação bit a bit de um ou mais dos seguintes valores: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> e <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Pesquisa pelo caractere especificado e retorna o índice baseado em zero da última ocorrência em toda a cadeia de caracteres de origem usando o valor <see cref="T:System.Globalization.CompareOptions" /> especificado.</summary>
        <returns>O índice baseado em zero da última ocorrência de <paramref name="value" />, se encontrado, em <paramref name="source" />, usando as opções de comparação especificadas; caso contrário, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de origem é pesquisada para trás começando no final da cadeia de caracteres e terminando no início da cadeia de caracteres.  
  
 O <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valor não é válido para esse método.  
  
 Se `options` não inclui o <xref:System.Globalization.CompareOptions.Ordinal> valor, essa sobrecarga executa uma pesquisa sensível à cultura. Se o caractere for um valor Unicode que representa um caractere pré-composto, como a Ligadura "Æ" (U + 00 C 6), ele pode ser considerado equivalente a qualquer ocorrência de seus componentes na sequência correta, como "AE" (u+0041, U + 0045), dependendo da cultura. Se `options` inclui o <xref:System.Globalization.CompareOptions.Ordinal> valor, essa sobrecarga executa uma pesquisa de (sem diferenciação de cultura) ordinal. Um caractere é considerado equivalente a um outro caractere somente se os valores de Unicode são os mesmos. Sobrecargas de <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> que pesquisam um caractere de executar uma pesquisa ordinal, enquanto que aqueles que pesquisam uma cadeia de caracteres executam uma pesquisa sensível à cultura.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir determina os índices de ocorrências e sobrenome de um caractere ou uma subcadeia de caracteres dentro de uma cadeia de caracteres.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> contém um valor <see cref="T:System.Globalization.CompareOptions" /> inválido.</exception>
        <block subset="none" type="usage"><para>Conjuntos de caracteres incluem caracteres ignoráveis, que são caracteres que não são considerados ao executar uma classificação linguística ou sensível à cultura. Em uma pesquisa sensível à cultura, se <paramref name="value" /> é um caractere ignorável, o resultado é equivalente à pesquisa com esse caractere removido. Nesse caso, o <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> método sempre retorna a posição do último caractere no <paramref name="source" /> para indicar que a correspondência for encontrada no final da <paramref name="source" />. No exemplo a seguir, o <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> método é usado para pesquisar um hífen (U + 00AD) em duas cadeias de caracteres. Apenas uma das cadeias de caracteres contém um hífen condicional. Em ambos os casos, porque o hífen condicional é um caractere ignorável, uma pesquisa sensível à cultura retorna a última posição de índice na cadeia de caracteres de origem. Em contraste, uma pesquisa ordinal com êxito localiza o hífen em uma cadeia de caracteres e relata que está ausente da segunda cadeia de caracteres.  
  
[!code-csharp[System.Globalization.CompareInfo.LastIndexOf#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable3.cs#4)] [!code-vb[System.Globalization.CompareInfo.LastIndexOf#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable3.vb#4)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int -&gt; int&#xA;override this.LastIndexOf : string * char * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.Char" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="startIndex" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres a ser pesquisada.</param>
        <param name="value">O caractere a ser localizado no <paramref name="source" />.</param>
        <param name="startIndex">O índice inicial com base em zero da pesquisa inversa.</param>
        <summary>Pesquisa o caractere especificado e retorna o índice baseado em zero da última ocorrência na seção da cadeia de caracteres de origem que se estende do início da cadeia de caracteres até o índice especificado.</summary>
        <returns>O índice baseado em zero da última ocorrência de <paramref name="value" />, se for encontrado, na seção de <paramref name="source" /> que se estende do início do <paramref name="source" /> até o <paramref name="startIndex" />; caso contrário, -1. Retorna <paramref name="startIndex" /> se <paramref name="value" /> é um caractere ignorável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de origem é pesquisada começando com versões anteriores em `startIndex` e terminando no início da cadeia de caracteres.  
  
 Essa sobrecarga executa uma pesquisa sensível à cultura. Se o caractere for um valor Unicode que representa um caractere pré-composto, como a Ligadura "Æ" (U + 00 C 6), ele pode ser considerado equivalente a qualquer ocorrência de seus componentes na sequência correta, como "AE" (u+0041, U + 0045), dependendo da cultura. Para executar uma pesquisa ordinal (diferencia a cultura), onde um caractere é considerado equivalente a um outro caractere somente se os valores de Unicode são os mesmos, você deve chamar uma das sobrecargas que tem um parâmetro do tipo <xref:System.Globalization.CompareOptions> e use o <xref:System.Globalization.CompareOptions.Ordinal> valor. Sobrecargas de <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> que pesquisam um caractere de executar uma pesquisa ordinal, enquanto que aqueles que pesquisam uma cadeia de caracteres executam uma pesquisa sensível à cultura.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir determina os índices de ocorrências e sobrenome de um caractere ou uma subcadeia de caracteres dentro de uma parte de uma cadeia de caracteres. Observe que <xref:System.Globalization.CompareInfo.IndexOf%2A> e <xref:System.Globalization.CompareInfo.LastIndexOf%2A> estiver pesquisando em diferentes partes da cadeia de caracteres, mesmo com o mesmo `startIndex` parâmetro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> está fora do intervalo de índices válidos para <paramref name="source" />.</exception>
        <block subset="none" type="usage"><para>Conjuntos de caracteres incluem caracteres ignoráveis, que são caracteres que não são considerados ao executar uma classificação linguística ou sensível à cultura. Em uma pesquisa sensível à cultura, se <paramref name="value" /> é um caractere ignorável, o resultado é equivalente à pesquisa com esse caractere removido. Nesse caso, o <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" /> método sempre retorna <paramref name="startIndex" />, que é a posição do caractere no qual a pesquisa começa. No exemplo a seguir, o <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" /> método é usado para localizar um hífen virtual (U + 00AD) que precede o último "m" em duas cadeias de caracteres. Apenas uma das cadeias de caracteres contém um hífen condicional. Em ambos os casos, como o hífen condicional é um caractere ignorável, o método retorna a posição do índice do "m", que é o valor de <paramref name="startIndex" />.  
  
[!code-csharp[System.Globalization.CompareInfo.LastIndexOf#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable4.cs#5)] [!code-vb[System.Globalization.CompareInfo.LastIndexOf#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable4.vb#5)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres a ser pesquisada.</param>
        <param name="value">A cadeia de caracteres a ser localizada dentro de <paramref name="source" />.</param>
        <param name="options">Um valor que define como <paramref name="source" /> e <paramref name="value" /> devem ser comparados. <paramref name="options" /> é o valor de enumeração <see cref="F:System.Globalization.CompareOptions.Ordinal" /> ou uma combinação bit a bit de um ou mais dos seguintes valores: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> e <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Pesquisa a subcadeia de caracteres especificada e retorna o índice baseado em zero da última ocorrência dentro de toda a cadeia de caracteres usando o valor <see cref="T:System.Globalization.CompareOptions" /> especificado.</summary>
        <returns>O índice baseado em zero da última ocorrência de <paramref name="value" />, se encontrado, em <paramref name="source" />, usando as opções de comparação especificadas; caso contrário, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de origem é pesquisada para trás começando no final da cadeia de caracteres e terminando no início da cadeia de caracteres.  
  
 O <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valor não é válido para esse método.  
  
 Se `options` não inclui o <xref:System.Globalization.CompareOptions.Ordinal> valor, essa sobrecarga executa uma pesquisa sensível à cultura. Um valor Unicode que representa um caractere pré-composto, como a Ligadura "Æ" (U + 00 C 6), pode ser considerado equivalente a qualquer ocorrência de componentes do caractere na sequência correta, como "AE" (u+0041, U + 0045), dependendo da cultura. Se `options` inclui o <xref:System.Globalization.CompareOptions.Ordinal> valor, essa sobrecarga executa uma pesquisa ordinal (diferencia a cultura), em que os valores de Unicode são comparados.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir determina os índices de ocorrências e sobrenome de um caractere ou uma subcadeia de caracteres dentro de uma cadeia de caracteres.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="value" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> contém um valor <see cref="T:System.Globalization.CompareOptions" /> inválido.</exception>
        <block subset="none" type="usage"><para>Conjuntos de caracteres incluem caracteres ignoráveis, que são caracteres que não são considerados ao executar uma classificação linguística ou sensível à cultura. Em uma pesquisa sensível à cultura (ou seja, caso <paramref name="options" /> não seja <see cref="F:System.Globalization.CompareOptions.Ordinal" /> ou <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), caso <paramref name="value" /> contenha um caractere ignorável, o resultado é equivalente à pesquisa com esse caractere removido. Se <paramref name="value" /> consiste apenas em um ou mais caracteres ignoráveis, o <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> método sempre retorna <paramref name="source" />.<see cref="P:System.String.Length" /> -1, que representa a última posição de índice em <paramref name="source" />. No exemplo a seguir, o <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> método é usado para encontrar subcadeias de três caracteres (um hífen (U + 00AD), um hífen seguido por "n" e um hífen seguido por "m") em duas cadeias de caracteres. Apenas uma das cadeias de caracteres contém um hífen condicional. Como o hífen é um caractere ignorável, uma pesquisa sensível à cultura retorna o mesmo valor que será retornado se o hífen não foram incluídos na cadeia de caracteres de pesquisa. Uma pesquisa ordinal, no entanto, localiza o hífen em uma cadeia de caracteres com êxito e relata que está ausente da segunda cadeia de caracteres.  
  
[!code-csharp[System.Globalization.CompareInfo.LastIndexOf#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable5.cs#6)] [!code-vb[System.Globalization.CompareInfo.LastIndexOf#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable5.vb#6)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int -&gt; int&#xA;override this.LastIndexOf : string * string * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="startIndex" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres a ser pesquisada.</param>
        <param name="value">A cadeia de caracteres a ser localizada dentro de <paramref name="source" />.</param>
        <param name="startIndex">O índice inicial com base em zero da pesquisa inversa.</param>
        <summary>Pesquisa a subcadeia de caracteres especificada e retorna o índice baseado em zero da última ocorrência na seção da cadeia de caracteres de origem que se estende do início da cadeia de caracteres até o índice especificado.</summary>
        <returns>O índice baseado em zero da última ocorrência de <paramref name="value" />, se for encontrado, na seção de <paramref name="source" /> que se estende do início do <paramref name="source" /> até o <paramref name="startIndex" />; caso contrário, -1. Retorna <paramref name="startIndex" /> se <paramref name="value" /> é um caractere ignorável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de origem é pesquisada começando com versões anteriores em `startIndex` e terminando no início da cadeia de caracteres.  
  
 Essa sobrecarga executa uma pesquisa sensível à cultura. Um valor Unicode que representa um caractere pré-composto, como a Ligadura "Æ" (U + 00 C 6), pode ser considerado equivalente a qualquer ocorrência de componentes do caractere na sequência correta, como "AE" (u+0041, U + 0045), dependendo da cultura. Para executar uma pesquisa ordinal (diferencia a cultura), em que os valores de Unicode são comparados, você deve chamar uma das sobrecargas que tem um parâmetro do tipo <xref:System.Globalization.CompareOptions> e use o <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> valor.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir determina os índices de ocorrências e sobrenome de um caractere ou uma subcadeia de caracteres dentro de uma parte de uma cadeia de caracteres. Observe que <xref:System.Globalization.CompareInfo.IndexOf%2A> e <xref:System.Globalization.CompareInfo.LastIndexOf%2A> estiver pesquisando em diferentes partes da cadeia de caracteres, mesmo com o mesmo `startIndex` parâmetro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="value" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> está fora do intervalo de índices válidos para <paramref name="source" />.</exception>
        <block subset="none" type="usage"><para>Conjuntos de caracteres incluem caracteres ignoráveis, que são caracteres que não são considerados ao executar uma classificação linguística ou sensível à cultura. Em uma pesquisa sensível à cultura, caso <paramref name="value" /> contenha um caractere ignorável, o resultado é equivalente à pesquisa com esse caractere removido. Se <paramref name="value" /> consiste apenas em um ou mais caracteres ignoráveis, o <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" /> método sempre retorna <paramref name="startIndex" />, que é a posição do caractere no qual a pesquisa começa. No exemplo a seguir, o <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" /> método é usado para localizar uma subcadeia de caracteres que inclui um hífen (U + 00AD) e que precede ou inclui o "m" final em uma cadeia de caracteres. Porque o hífen na cadeia de caracteres de pesquisa é ignorado, chamando o método para localizar uma subcadeia de caracteres que consiste o hífen e o "m" retorna a posição do "m" na cadeia de caracteres, enquanto que chamá-lo para localizar uma subcadeia de caracteres que consiste o hífen e "n" retorna o  posição do "n". Quando a cadeia de caracteres de pesquisa contém apenas o hífen, o método retorna o índice do "m", que representa o valor de <paramref name="startIndex" />.  
  
[!code-csharp[System.Globalization.CompareInfo.LastIndexOf#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable6.cs#7)] [!code-vb[System.Globalization.CompareInfo.LastIndexOf#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable6.vb#7)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres a ser pesquisada.</param>
        <param name="value">O caractere a ser localizado no <paramref name="source" />.</param>
        <param name="startIndex">O índice inicial com base em zero da pesquisa inversa.</param>
        <param name="options">Um valor que define como <paramref name="source" /> e <paramref name="value" /> devem ser comparados. <paramref name="options" /> é o valor de enumeração <see cref="F:System.Globalization.CompareOptions.Ordinal" /> ou uma combinação bit a bit de um ou mais dos seguintes valores: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> e <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Pesquisa o caractere especificado e retorna o índice baseado em zero da última ocorrência na seção da cadeia de caracteres de origem que se estende do início da cadeia de caracteres até o índice especificado, usando o valor <see cref="T:System.Globalization.CompareOptions" /> especificado.</summary>
        <returns>O índice baseado em zero da última ocorrência de <paramref name="value" />, se encontrado, dentro da seção de <paramref name="source" /> que se estende do início do <paramref name="source" /> até o <paramref name="startIndex" />, usando as opções de comparação especificadas; caso contrário, -1. Retorna <paramref name="startIndex" /> se <paramref name="value" /> é um caractere ignorável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de origem é pesquisada começando com versões anteriores em `startIndex` e terminando no início da cadeia de caracteres.  
  
 O <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valor não é válido para esse método.  
  
 Se `options` não inclui o <xref:System.Globalization.CompareOptions.Ordinal> valor, essa sobrecarga executa uma pesquisa sensível à cultura. Se o caractere for um valor Unicode que representa um caractere pré-composto, como a Ligadura "Æ" (U + 00 C 6), ele pode ser considerado equivalente a qualquer ocorrência de seus componentes na sequência correta, como "AE" (u+0041, U + 0045), dependendo da cultura. Se `options` inclui o <xref:System.Globalization.CompareOptions.Ordinal> valor, essa sobrecarga executa uma pesquisa de (sem diferenciação de cultura) ordinal. Um caractere é considerado equivalente a um outro caractere somente se os valores de Unicode são os mesmos. Sobrecargas de <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> que pesquisam um caractere de executar uma pesquisa ordinal, enquanto que aqueles que pesquisam uma cadeia de caracteres executam uma pesquisa sensível à cultura.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir determina os índices de ocorrências e sobrenome de um caractere ou uma subcadeia de caracteres dentro de uma parte de uma cadeia de caracteres. Observe que <xref:System.Globalization.CompareInfo.IndexOf%2A> e <xref:System.Globalization.CompareInfo.LastIndexOf%2A> estiver pesquisando em diferentes partes da cadeia de caracteres, mesmo com o mesmo `startIndex` parâmetro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> está fora do intervalo de índices válidos para <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> contém um valor <see cref="T:System.Globalization.CompareOptions" /> inválido.</exception>
        <block subset="none" type="usage"><para>Conjuntos de caracteres incluem caracteres ignoráveis, que são caracteres que não são considerados ao executar uma classificação linguística ou sensível à cultura. Em uma pesquisa sensível à cultura, se <paramref name="value" /> é um caractere ignorável, o resultado é equivalente à pesquisa com esse caractere removido. Nesse caso, o <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> método sempre retorna <paramref name="startIndex" />, que é a posição do caractere no qual a pesquisa começa. No exemplo a seguir, o <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> método é usado para localizar um hífen virtual (U + 00AD) que precede o último "m" em duas cadeias de caracteres. Apenas uma das cadeias de caracteres contém um hífen condicional. Em ambos os casos, porque o hífen condicional é um caractere ignorável, uma pesquisa sensível à cultura retorna a posição de índice do "m". Uma pesquisa ordinal, no entanto, localiza o hífen em uma cadeia de caracteres com êxito e relata que está ausente da segunda cadeia de caracteres.  
  
[!code-csharp[System.Globalization.CompareInfo.LastIndexOf#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable7.cs#8)] [!code-vb[System.Globalization.CompareInfo.LastIndexOf#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable7.vb#8)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int * int -&gt; int&#xA;override this.LastIndexOf : string * char * int * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres a ser pesquisada.</param>
        <param name="value">O caractere a ser localizado no <paramref name="source" />.</param>
        <param name="startIndex">O índice inicial com base em zero da pesquisa inversa.</param>
        <param name="count">O número de elementos na seção a ser pesquisada.</param>
        <summary>Pesquisa o caractere especificado e retorna o índice baseado em zero da última ocorrência dentro da seção da cadeia de caracteres de origem que contém o número especificado de elementos e termina no índice especificado.</summary>
        <returns>O índice baseado em zero da última ocorrência de <paramref name="value" />, se encontrado, dentro da seção de <paramref name="source" /> que contém o número de elementos especificado por <paramref name="count" /> e termina com <paramref name="startIndex" />; caso contrário, -1. Retorna <paramref name="startIndex" /> se <paramref name="value" /> é um caractere ignorável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de origem é pesquisada com versões anteriores começando `startIndex` e termina em `startIndex`  -  `count` + 1.  
  
 Essa sobrecarga executa uma pesquisa sensível à cultura. Se o caractere for um valor Unicode que representa um caractere pré-composto, como a Ligadura "Æ" (U + 00 C 6), ele pode ser considerado equivalente a qualquer ocorrência de seus componentes na sequência correta, como "AE" (u+0041, U + 0045), dependendo da cultura. Para executar uma pesquisa ordinal (diferencia a cultura), onde um caractere é considerado equivalente a um outro caractere somente se os valores de Unicode são os mesmos, você deve chamar uma das sobrecargas que tem um parâmetro do tipo <xref:System.Globalization.CompareOptions> e use o <xref:System.Globalization.CompareOptions.Ordinal> valor. Sobrecargas de <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> que pesquisam um caractere de executar uma pesquisa ordinal, enquanto que aqueles que pesquisam uma cadeia de caracteres executam uma pesquisa sensível à cultura.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir determina os índices de ocorrências e sobrenome de um caractere ou uma subcadeia de caracteres dentro de uma parte de uma cadeia de caracteres.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> está fora do intervalo de índices válidos para <paramref name="source" />.  
  
- ou - 
 <paramref name="count" /> é menor que zero.  
  
- ou - 
 <paramref name="startIndex" /> e <paramref name="count" /> não especificam uma seção válida em <paramref name="source" />.</exception>
        <block subset="none" type="usage"><para>Conjuntos de caracteres incluem caracteres ignoráveis, que são caracteres que não são considerados ao executar uma classificação linguística ou sensível à cultura. Em uma pesquisa sensível à cultura, se <paramref name="value" /> é um caractere ignorável, o resultado é equivalente à pesquisa com esse caractere removido. Nesse caso, o <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" /> método sempre retorna <paramref name="startIndex" />, que é a posição do caractere no qual a pesquisa começa. No exemplo a seguir, o <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" /> método é usado para localizar um hífen virtual (U + 00AD) que precede o último "m" em duas cadeias de caracteres. Apenas uma das cadeias de caracteres contém um hífen condicional. Em ambos os casos, como o hífen condicional é um caractere ignorável, o método retorna a posição do índice do "m", que é o valor de <paramref name="startIndex" />.  
  
[!code-csharp[System.Globalization.CompareInfo.LastIndexOf#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable8.cs#9)] [!code-vb[System.Globalization.CompareInfo.LastIndexOf#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable8.vb#9)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres a ser pesquisada.</param>
        <param name="value">A cadeia de caracteres a ser localizada dentro de <paramref name="source" />.</param>
        <param name="startIndex">O índice inicial com base em zero da pesquisa inversa.</param>
        <param name="options">Um valor que define como <paramref name="source" /> e <paramref name="value" /> devem ser comparados. <paramref name="options" /> é o valor de enumeração <see cref="F:System.Globalization.CompareOptions.Ordinal" /> ou uma combinação bit a bit de um ou mais dos seguintes valores: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> e <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Pesquisa a subcadeia de caracteres especificada e retorna o índice baseado em zero da última ocorrência na seção da cadeia de caracteres de origem que se estende do início da cadeia de caracteres até o índice especificado, usando o valor <see cref="T:System.Globalization.CompareOptions" /> especificado.</summary>
        <returns>O índice baseado em zero da última ocorrência de <paramref name="value" />, se encontrado, dentro da seção de <paramref name="source" /> que se estende do início do <paramref name="source" /> até o <paramref name="startIndex" />, usando as opções de comparação especificadas; caso contrário, -1. Retorna <paramref name="startIndex" /> se <paramref name="value" /> é um caractere ignorável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de origem é pesquisada começando com versões anteriores em `startIndex` e terminando no início da cadeia de caracteres.  
  
 O <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valor não é válido para esse método.  
  
 Se `options` não inclui o <xref:System.Globalization.CompareOptions.Ordinal> valor, essa sobrecarga executa uma pesquisa sensível à cultura. Um valor Unicode que representa um caractere pré-composto, como a Ligadura "Æ" (U + 00 C 6), pode ser considerado equivalente a qualquer ocorrência de componentes do caractere na sequência correta, como "AE" (u+0041, U + 0045), dependendo da cultura. Se `options` inclui o <xref:System.Globalization.CompareOptions.Ordinal> valor, essa sobrecarga executa uma pesquisa ordinal (diferencia a cultura), em que os valores de Unicode são comparados.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir determina os índices de ocorrências e sobrenome de um caractere ou uma subcadeia de caracteres dentro de uma parte de uma cadeia de caracteres. Observe que <xref:System.Globalization.CompareInfo.IndexOf%2A> e <xref:System.Globalization.CompareInfo.LastIndexOf%2A> estiver pesquisando em diferentes partes da cadeia de caracteres, mesmo com o mesmo `startIndex` parâmetro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="value" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> está fora do intervalo de índices válidos para <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> contém um valor <see cref="T:System.Globalization.CompareOptions" /> inválido.</exception>
        <block subset="none" type="usage"><para>Conjuntos de caracteres incluem caracteres ignoráveis, que são caracteres que não são considerados ao executar uma classificação linguística ou sensível à cultura. Em uma pesquisa sensível à cultura (ou seja, caso <paramref name="options" /> não seja <see cref="F:System.Globalization.CompareOptions.Ordinal" /> ou <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), caso <paramref name="value" /> contenha um caractere ignorável, o resultado é equivalente à pesquisa com esse caractere removido. Se <paramref name="value" /> consiste apenas em um ou mais caracteres ignoráveis, o <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> método sempre retorna <paramref name="startIndex" />, que é a posição do caractere no qual a pesquisa começa.  
  
No exemplo a seguir, o <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> método é usado para localizar a posição de um hífen (U + 00AD) seguida por um "m", começando com o último "m" em duas cadeias de caracteres. Apenas uma das cadeias de caracteres contém a subcadeia de caracteres necessária. Em ambos os casos, como o hífen condicional é um caractere ignorável, o método retorna o índice de "m" na cadeia de caracteres ao realizar uma comparação sensível à cultura. No caso da primeira cadeia de caracteres, que inclui o hífen condicional seguido de um "m", o método não retorna o índice do hífen virtual, mas retorna o índice do "m". O método só retorna o índice do hífen condicional na primeira cadeia de caracteres quando executa uma comparação ordinal.  
  
[!code-csharp[System.Globalization.CompareInfo.LastIndexOf#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable14.cs#15)] [!code-vb[System.Globalization.CompareInfo.LastIndexOf#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable14.vb#15)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int * int -&gt; int&#xA;override this.LastIndexOf : string * string * int * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres a ser pesquisada.</param>
        <param name="value">A cadeia de caracteres a ser localizada dentro de <paramref name="source" />.</param>
        <param name="startIndex">O índice inicial com base em zero da pesquisa inversa.</param>
        <param name="count">O número de elementos na seção a ser pesquisada.</param>
        <summary>Pesquisa a subcadeia de caracteres especificada e retorna o índice baseado em zero da última ocorrência dentro da seção da cadeia de caracteres de origem que contém o número especificado de elementos e termina no índice especificado.</summary>
        <returns>O índice baseado em zero da última ocorrência de <paramref name="value" />, se encontrado, dentro da seção de <paramref name="source" /> que contém o número de elementos especificado por <paramref name="count" /> e termina com <paramref name="startIndex" />; caso contrário, -1. Retorna <paramref name="startIndex" /> se <paramref name="value" /> é um caractere ignorável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de origem é pesquisada com versões anteriores começando `startIndex` e termina em `startIndex`  -  `count` + 1.  
  
 Essa sobrecarga executa uma pesquisa sensível à cultura. Um valor Unicode que representa um caractere pré-composto, como a Ligadura "Æ" (U + 00 C 6), pode ser considerado equivalente a qualquer ocorrência de componentes do caractere na sequência correta, como "AE" (u+0041, U + 0045), dependendo da cultura. Para executar uma pesquisa ordinal (diferencia a cultura), em que os valores de Unicode são comparados, você deve chamar uma das sobrecargas que tem um parâmetro do tipo <xref:System.Globalization.CompareOptions> e use o <xref:System.Globalization.CompareOptions.Ordinal> valor.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir determina os índices de ocorrências e sobrenome de um caractere ou uma subcadeia de caracteres dentro de uma parte de uma cadeia de caracteres.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="value" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> está fora do intervalo de índices válidos para <paramref name="source" />.  
  
- ou - 
 <paramref name="count" /> é menor que zero.  
  
- ou - 
 <paramref name="startIndex" /> e <paramref name="count" /> não especificam uma seção válida em <paramref name="source" />.</exception>
        <block subset="none" type="usage"><para>Conjuntos de caracteres incluem caracteres ignoráveis, que são caracteres que não são considerados ao executar uma classificação linguística ou sensível à cultura. Em uma pesquisa sensível à cultura, caso <paramref name="value" /> contenha um caractere ignorável, o resultado é equivalente à pesquisa com esse caractere removido. Se <paramref name="value" /> consiste apenas em um ou mais caracteres ignoráveis, o <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" /> método sempre retorna <paramref name="startIndex" />, que é a posição do caractere no qual a pesquisa começa.  
  
No exemplo a seguir, o <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" /> método é usado para localizar a posição de um hífen (U + 00AD) seguida por um "m", os três caracteres que precedem o último "m" de duas cadeias de caracteres. Apenas uma das cadeias de caracteres contém a subcadeia de caracteres necessária. Em ambos os casos, como o hífen condicional é um caractere ignorável, o método retorna o índice de "m" na cadeia de caracteres ao realizar uma comparação sensível à cultura. No caso da primeira cadeia de caracteres, que inclui o hífen condicional seguido de um "m", o método não retorna o índice do hífen virtual, mas retorna o índice do "m".  
  
[!code-csharp[System.Globalization.CompareInfo.LastIndexOf#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable16.cs#17)] [!code-vb[System.Globalization.CompareInfo.LastIndexOf#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable16.vb#17)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres a ser pesquisada.</param>
        <param name="value">O caractere a ser localizado no <paramref name="source" />.</param>
        <param name="startIndex">O índice inicial com base em zero da pesquisa inversa.</param>
        <param name="count">O número de elementos na seção a ser pesquisada.</param>
        <param name="options">Um valor que define como <paramref name="source" /> e <paramref name="value" /> devem ser comparados. <paramref name="options" /> é o valor de enumeração <see cref="F:System.Globalization.CompareOptions.Ordinal" /> ou uma combinação bit a bit de um ou mais dos seguintes valores: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> e <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Pesquisa o caractere especificado e retorna o índice baseado em zero da última ocorrência dentro da seção da cadeia de caracteres de origem que contém o número especificado de elementos e termina no índice especificado usando o valor <see cref="T:System.Globalization.CompareOptions" /> especificado.</summary>
        <returns>O índice baseado em zero da última ocorrência de <paramref name="value" />, se encontrado, dentro da seção de <paramref name="source" /> que contém o número de elementos especificado por <paramref name="count" /> e termina em <paramref name="startIndex" />, usando as opções de comparação especificadas; caso contrário, -1. Retorna <paramref name="startIndex" /> se <paramref name="value" /> é um caractere ignorável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de origem é pesquisada com versões anteriores começando `startIndex` e termina em `startIndex`  -  `count` + 1.  
  
 O <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valor não é válido para esse método.  
  
 Se `options` não inclui o <xref:System.Globalization.CompareOptions.Ordinal> valor, essa sobrecarga executa uma pesquisa sensível à cultura. Se o caractere for um valor Unicode que representa um caractere pré-composto, como a Ligadura "Æ" (U + 00 C 6), ele pode ser considerado equivalente a qualquer ocorrência de seus componentes na sequência correta, como "AE" (u+0041, U + 0045), dependendo da cultura. Se `options` inclui o <xref:System.Globalization.CompareOptions.Ordinal> valor, essa sobrecarga executa uma pesquisa de (sem diferenciação de cultura) ordinal. Um caractere é considerado equivalente a um outro caractere somente se os valores de Unicode são os mesmos. Sobrecargas de <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> que pesquisam um caractere de executar uma pesquisa ordinal, enquanto que aqueles que pesquisam uma cadeia de caracteres executam uma pesquisa sensível à cultura.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir determina os índices de ocorrências e sobrenome de um caractere ou uma subcadeia de caracteres dentro de uma parte de uma cadeia de caracteres.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> está fora do intervalo de índices válidos para <paramref name="source" />.  
  
- ou - 
 <paramref name="count" /> é menor que zero.  
  
- ou - 
 <paramref name="startIndex" /> e <paramref name="count" /> não especificam uma seção válida em <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> contém um valor <see cref="T:System.Globalization.CompareOptions" /> inválido.</exception>
        <block subset="none" type="usage"><para>Conjuntos de caracteres incluem caracteres ignoráveis, que são caracteres que não são considerados ao executar uma classificação linguística ou sensível à cultura. Em uma pesquisa sensível à cultura, se <paramref name="value" /> é um caractere ignorável, o resultado é equivalente à pesquisa com esse caractere removido. Nesse caso, o <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> método sempre retorna <paramref name="startIndex" />, que é a posição do caractere no qual a pesquisa começa. No exemplo a seguir, o <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> método é usado para localizar um hífen virtual (U + 00AD) que precede o último "m" em duas cadeias de caracteres. Apenas uma das cadeias de caracteres contém um hífen condicional. Em ambos os casos, como o hífen condicional é um caractere ignorável, uma pesquisa sensível à cultura retorna a posição do índice do "m", que é o valor de <paramref name="startIndex" />. Uma pesquisa ordinal, no entanto, localiza o hífen em uma cadeia de caracteres com êxito e relata que está ausente da segunda cadeia de caracteres.  
  
[!code-csharp[System.Globalization.CompareInfo.LastIndexOf#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable11.cs#12)] [!code-vb[System.Globalization.CompareInfo.LastIndexOf#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable11.vb#12)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">A cadeia de caracteres a ser pesquisada.</param>
        <param name="value">A cadeia de caracteres a ser localizada dentro de <paramref name="source" />.</param>
        <param name="startIndex">O índice inicial com base em zero da pesquisa inversa.</param>
        <param name="count">O número de elementos na seção a ser pesquisada.</param>
        <param name="options">Um valor que define como <paramref name="source" /> e <paramref name="value" /> devem ser comparados. <paramref name="options" /> é o valor de enumeração <see cref="F:System.Globalization.CompareOptions.Ordinal" /> ou uma combinação bit a bit de um ou mais dos seguintes valores: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> e <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Pesquisa a subcadeia de caracteres especificada e retorna o índice baseado em zero da última ocorrência dentro da seção da cadeia de caracteres de origem que contém o número especificado de elementos e termina no índice especificado usando o valor <see cref="T:System.Globalization.CompareOptions" /> especificado.</summary>
        <returns>O índice baseado em zero da última ocorrência de <paramref name="value" />, se encontrado, dentro da seção de <paramref name="source" /> que contém o número de elementos especificado por <paramref name="count" /> e termina em <paramref name="startIndex" />, usando as opções de comparação especificadas; caso contrário, -1. Retorna <paramref name="startIndex" /> se <paramref name="value" /> é um caractere ignorável.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres de origem é pesquisada com versões anteriores começando `startIndex` e termina em `startIndex`  -  `count` + 1.  
  
 O <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valor não é válido para esse método.  
  
 Se `options` não inclui o <xref:System.Globalization.CompareOptions.Ordinal> valor, essa sobrecarga executa uma pesquisa sensível à cultura. Um valor Unicode que representa um caractere pré-composto, como a Ligadura "Æ" (U + 00 C 6), pode ser considerado equivalente a qualquer ocorrência de componentes do caractere na sequência correta, como "AE" (u+0041, U + 0045), dependendo da cultura. Se `options` inclui o <xref:System.Globalization.CompareOptions.Ordinal> valor, essa sobrecarga executa uma pesquisa ordinal (diferencia a cultura), em que os valores de Unicode são comparados.  
  
> [!NOTE]
>  Quando possível, você deve chamar cadeia de caracteres de métodos de comparação que têm um parâmetro de tipo <xref:System.Globalization.CompareOptions> para especificar o tipo de comparação esperado. Como regra geral, use opções linguísticas (usando a cultura atual) para comparar cadeias de caracteres exibidas na interface do usuário e especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> ou <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para comparações de segurança.  
  
   
  
## Examples  
 O exemplo a seguir determina os índices de ocorrências e sobrenome de um caractere ou uma subcadeia de caracteres dentro de uma parte de uma cadeia de caracteres.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="value" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> está fora do intervalo de índices válidos para <paramref name="source" />.  
  
- ou - 
 <paramref name="count" /> é menor que zero.  
  
- ou - 
 <paramref name="startIndex" /> e <paramref name="count" /> não especificam uma seção válida em <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" /> contém um valor <see cref="T:System.Globalization.CompareOptions" /> inválido.</exception>
        <block subset="none" type="usage"><para>Conjuntos de caracteres incluem caracteres ignoráveis, que são caracteres que não são considerados ao executar uma classificação linguística ou sensível à cultura. Em uma pesquisa sensível à cultura (ou seja, caso <paramref name="options" /> não seja <see cref="F:System.Globalization.CompareOptions.Ordinal" /> ou <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), caso <paramref name="value" /> contenha um caractere ignorável, o resultado é equivalente à pesquisa com esse caractere removido. Se <paramref name="value" /> consiste apenas em um ou mais caracteres ignoráveis, o <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> método sempre retorna <paramref name="startIndex" />, que é a posição do caractere no qual a pesquisa começa.  
  
No exemplo a seguir, o <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> método é usado para localizar a posição de um hífen (U + 00AD) seguido por um "m" em todos, mas a primeira posição de caractere antes do final "m" em duas cadeias de caracteres. Apenas uma das cadeias de caracteres contém a subcadeia de caracteres necessária. Em ambos os casos, como o hífen condicional é um caractere ignorável, o método retorna o índice de "m" na cadeia de caracteres ao realizar uma comparação sensível à cultura. Quando ele executa uma comparação ordinal, no entanto, ele localiza a subcadeia de caracteres apenas na primeira cadeia de caracteres. Observe que no caso da primeira cadeia de caracteres, que inclui o hífen, seguido por um "m", o método não retorna o índice do hífen virtual, mas em vez disso, retorna o índice do "m", quando ele executa uma comparação sensível à cultura. O método só retorna o índice do hífen condicional na primeira cadeia de caracteres quando executa uma comparação ordinal.  
  
[!code-vb[System.Globalization.CompareInfo.LastIndexOf#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable15.vb#16)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.LCID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LCID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LCID : int" Usage="System.Globalization.CompareInfo.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o identificador de cultura formado corretamente para o <see cref="T:System.Globalization.CompareInfo" /> atual.</summary>
        <value>O identificador de cultura formado corretamente atual <see cref="T:System.Globalization.CompareInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.Globalization.CompareInfo.LCID%2A> propriedade.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Globalization.CompareInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o nome da cultura usada para operações de classificação por este objeto <see cref="T:System.Globalization.CompareInfo" />.</summary>
        <value>O nome de uma cultura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Globalization.CompareInfo.Name%2A> e <xref:System.Globalization.CultureInfo.Name?displayProperty=nameWithType> propriedades podem ter valores diferentes. Por exemplo, um <xref:System.Globalization.CompareInfo.LCID%2A> propriedade valor hexadecimal 0x10407 identifica uma cultura de classificação alternativas que classifica os nomes que podem aparecer em uma lista telefônica alemã. O <xref:System.Globalization.CompareInfo.Name%2A> propriedade tem um valor de "de-de_phoneb", enquanto o <xref:System.Globalization.CultureInfo.Name?displayProperty=nameWithType> propriedade da cultura associada alemão (Alemanha) tem um valor de "de-DE".  
  
   
  
## Examples  
 O exemplo a seguir compara três cadeias de caracteres usando as culturas fr-FR e ja-JP. O <xref:System.Globalization.CultureInfo.Name%2A> propriedade é usada para exibir o nome de cada cultura.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="sender">O objeto que iniciou o retorno de chamada.</param>
        <summary>É executado quando o todo o grafo de objeto tiver sido desserializado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse membro é uma implementação de membro de interface explícita que pode ser usada somente quando o atual <xref:System.Globalization.CompareInfo> objeto é convertido em um <xref:System.Runtime.Serialization.IDeserializationCallback> interface. Para obter mais informações, consulte o método <xref:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.IDeserializationCallback" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="compareInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna uma cadeia de caracteres que representa o objeto <see cref="T:System.Globalization.CompareInfo" /> atual.</summary>
        <returns>Uma cadeia de caracteres que representa o objeto <see cref="T:System.Globalization.CompareInfo" /> atual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método substitui o <xref:System.Object.ToString%2A?displayProperty=nameWithType> método. Ele retorna uma cadeia de caracteres que consiste em nome de classe e o valor da instância <xref:System.Globalization.CompareInfo.Name%2A> propriedade, separada por um hífen.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>Iniciando com o .NET Framework 4, o <see cref="M:System.Globalization.CompareInfo.ToString" /> método retorna o nome da classe seguido por um espaço, um hífen, um espaço e o valor da <see cref="P:System.Globalization.CompareInfo.Name" /> propriedade. Por exemplo, para um <see cref="T:System.Globalization.CompareInfo" /> objeto que representa a cultura en-US, o <see cref="M:System.Globalization.CompareInfo.ToString" /> método retorna "CompareInfo - en-US". Nas versões anteriores do .NET Framework, ele retorna o nome da classe seguido por um espaço, um hífen, um espaço e o valor da <see cref="P:System.Globalization.CompareInfo.LCID" /> propriedade. Por exemplo, para um <see cref="T:System.Globalization.CompareInfo" /> objeto que representa a cultura en-US, o <see cref="M:System.Globalization.CompareInfo.ToString" /> método retorna "CompareInfo - 1033".</para></block>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public System.Globalization.SortVersion Version { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.SortVersion Version" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.Version" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Version As SortVersion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::SortVersion ^ Version { System::Globalization::SortVersion ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Version : System.Globalization.SortVersion" Usage="System.Globalization.CompareInfo.Version" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.SortVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém informações sobre a versão de Unicode usada para comparar e classificar cadeias de caracteres.</summary>
        <value>Um objeto que contém informações sobre a versão Unicode usada para comparar e classificar cadeias de caracteres.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O peso de caracteres individuais e, portanto, a maneira como cadeias de caracteres específicas são comparadas ou ordenadas, depende da versão da especificação Unicode que implementa uma versão específica do .NET Framework. No [!INCLUDE[net_v45](~/includes/net-v45-md.md)], isso também depende do sistema operacional do host, como mostra a tabela a seguir. Observe que essa lista de versões com suporte do Unicode aplica-se somente à comparação e classificação de caracteres. ela não se aplica à classificação de caracteres Unicode por categoria.  
  
|Versão do .NET Framework|Sistema operacional|Versão Unicode|  
|----------------------------|----------------------|---------------------|  
|[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]|Todos os sistemas operacionais|Unicode 5.0|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] e versões posteriores|[!INCLUDE[win7](~/includes/win7-md.md)]|Unicode 5.0|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] e versões posteriores|[!INCLUDE[win8](~/includes/win8-md.md)] e versões posteriores do sistema operacional Windows|Unicode 6.3|  
  
 O <xref:System.Globalization.SortVersion> objeto retornado pelo <xref:System.Globalization.CompareInfo.Version%2A> propriedade não identifica a versão Unicode precisa usada para comparar cadeias de caracteres. Ele só é útil quando comparar dois <xref:System.Globalization.SortVersion> objetos para determinar se eles usam a mesma versão Unicode e a cultura para comparar cadeias de caracteres. Para obter mais informações e um exemplo, consulte o <xref:System.Globalization.SortVersion> página de referência.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.SortVersion" />
      </Docs>
    </Member>
  </Members>
</Type>