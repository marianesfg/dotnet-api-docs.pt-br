<Type Name="CharUnicodeInfo" FullName="System.Globalization.CharUnicodeInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="82169adaf0495f8d99e2485f34319ae8fa2a91ca" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51866914" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class CharUnicodeInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CharUnicodeInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CharUnicodeInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CharUnicodeInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharUnicodeInfo abstract sealed" />
  <TypeSignature Language="F#" Value="type CharUnicodeInfo = class" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Recupera informações sobre um caractere Unicode. Essa classe não pode ser herdada.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O [padrão Unicode](https://go.microsoft.com/fwlink/?linkid=37123) define um número de categorias de caractere Unicode. Por exemplo, um caractere pode ser categorizado como uma letra maiuscula, uma letra minúscula, um número de dígito decimal, um número de letra, um separador de parágrafo, um símbolo matemático ou um símbolo de moeda. Seu aplicativo pode usar a categoria de caractere para controlar operações baseadas em cadeia de caracteres, como análise ou extrair subcadeia de caracteres com expressões regulares. O <xref:System.Globalization.UnicodeCategory> enumeração define as categorias de caracteres possíveis.  
  
 Você usa o <xref:System.Globalization.CharUnicodeInfo> classe para obter o <xref:System.Globalization.UnicodeCategory> valor para um caractere específico. O <xref:System.Globalization.CharUnicodeInfo> classe define os métodos que retornam valores de caractere Unicode a seguir:  
  
-   A categoria específica ao qual pertence um caractere ou par substituto. O valor retornado é um membro do <xref:System.Globalization.UnicodeCategory> enumeração.  
  
-   Valor numérico. Aplica-se apenas a caracteres numéricos, incluindo frações, subscritos, sobrescritos, numerais romanos, numeradores de moeda, números encircled e dígitos específicos de script.  
  
-   Valor do dígito. Aplica-se a caracteres numéricos que podem ser combinados com outros caracteres numéricos para representar um número inteiro em um sistema de numeração.  
  
-   Valor do dígito decimal. Aplica-se apenas a caracteres que representam os dígitos decimais no sistema decimal (base 10). Um dígito decimal pode ser um dos dez dígitos, de zero a nove. Esses caracteres são membros do <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> categoria.  
  
 Além disso, o <xref:System.Globalization.CharUnicodeInfo> classe é usada internamente por um número de outros tipos do .NET Framework e métodos que dependem da classificação de caractere. Elas incluem:  
  
-   O <xref:System.Globalization.StringInfo> classe, que funciona com elementos textuais, em vez de caracteres únicos em uma cadeia de caracteres.  
  
-   As sobrecargas de <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> método, que determinam a categoria à qual pertence um caractere ou par substituto.  
  
-   O [classes de caracteres](~/docs/standard/base-types/character-classes-in-regular-expressions.md) reconhecidas pelo <xref:System.Text.RegularExpressions.Regex>, o mecanismo de expressões regulares do .NET Framework.  
  
 Ao usar essa classe em seus aplicativos, mantenha em mente o seguinte as considerações de programação para usar o <xref:System.Char> tipo. O tipo pode ser difícil de usar e cadeias de caracteres são geralmente é preferíveis para representar o conteúdo linguístico.  
  
-   Um <xref:System.Char> objeto nem sempre correspondem a um único caractere. Embora o <xref:System.Char> tipo representa um único valor de 16 bits, alguns caracteres (como grafemas e pares substitutos) consistem em dois ou mais unidades de código UTF-16. Para obter mais informações, consulte "Char caracteres objetos e Unicode" no <xref:System.String> classe.  
  
-   A noção de "character" também é flexível. Um caractere geralmente é considerado como um glifo, mas muitos glifos exigem vários pontos de código. Por exemplo, ä pode ser representado por dois pontos de código ("a" + U + 0308, que é a combinação trema), ou por um único ponto de código ("ä" ou U + 00A4). Algumas linguagens têm várias letras, caracteres e glifos que exigem vários pontos de código, que podem causar confusão na representação de conteúdo linguística. Por exemplo, há um ΰ (U + 03B0, letra minúscula grega ipsilon com acento tonal), mas não há nenhum equivalente maiusculo. Maiusculas tal valor simplesmente irá recuperar o valor original.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra os valores retornados por cada método para diferentes tipos de caracteres.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="usage">
      <para>Caracteres reconhecidos e as categorias às quais eles pertencem são definidas pelo padrão Unicode e podem variar de uma versão do padrão Unicode para outro. Categorização de caracteres em uma versão específica do .NET Framework baseia-se em uma única versão do padrão Unicode, independentemente do sistema operacional subjacente no qual o .NET Framework está em execução. A tabela a seguir lista as versões do .NET Framework desde a [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] e as versões do padrão Unicode usavam para classificar caracteres.  
  
 <list type="table"><listheader><term> Versão do .NET Framework 
 </term><description> Versão do Padrão Unicode 
 </description></listheader><item><term> [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]  
  
 </term><description> [O padrão Unicode, versão 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v45](~/includes/net-v45-md.md)]  
  
 </term><description> [O padrão Unicode, versão 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v451](~/includes/net-v451-md.md)]  
  
 </term><description> [O padrão Unicode, versão 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v452](~/includes/net-v452-md.md)]  
  
 </term><description> [O padrão Unicode, versão 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v46](~/includes/net-v46-md.md)]  
  
 </term><description> [O padrão Unicode, versão 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v461](~/includes/net-v461-md.md)]  
  
 </term><description> [O padrão Unicode, versão 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v462](~/includes/net-v462-md.md)]  
  
 </term><description> [O padrão Unicode, versão 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/)  
  
 </description></item></list>  
  
 Cada versão do padrão Unicode inclui informações sobre as alterações no banco de dados de caractere Unicode desde a versão anterior. O banco de dados de caractere Unicode é usado pelo <see cref="T:System.Globalization.CharUnicodeInfo" /> classe para categorizar os caracteres.</para>
    </block>
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="N:System.Text" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetDecimalDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtém o valor do dígito decimal de um caractere Unicode numérico.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetDecimalDigitValue : char -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDecimalDigitValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">O caractere Unicode para o qual obter o valor do dígito decimal.</param>
        <summary>Obtém o valor do dígito decimal do caractere numérico especificado.</summary>
        <returns>O valor do dígito decimal do caractere numérico especificado.  
  
- ou - 
-1, se o caractere especificado não for um dígito decimal.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método converte caracteres que representam os dígitos decimais em valores integrais equivalentes. Dígitos decimais são caracteres no <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> categoria que pode representar uma das dez dígitos no decimal (base 10) o sistema, de zero a nove de numeração. Ele inclui os caracteres como u+0030 (DÍGITOS ZERO) até u+0039 (DÍGITO NOVE), U + 0660 (-ARÁBICOS DÍGITOS ZERO) por meio de U + 0669 (-ARÁBICOS DÍGITO NOVE), U + 07c 0 (ZERO de DÍGITO NKO) por meio de U + 07C 9 (NKO DÍGITO NOVE) e U + 1040 (MYANMAR DÍGITOS ZERO) a U + 1049 ( DÍGITO NOVE MYANMAR).  
  
 Para obter mais informações sobre caracteres Unicode, consulte o [padrão Unicode](https://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 O exemplo de código a seguir mostra os valores retornados por cada método para diferentes tipos de caracteres.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetDecimalDigitValue : string * int -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDecimalDigitValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">O <see cref="T:System.String" /> que contém o caractere Unicode para o qual obter o valor do dígito decimal.</param>
        <param name="index">O índice do caractere Unicode para o qual obter o valor do dígito decimal.</param>
        <summary>Obtém o valor do dígito decimal do caractere numérico no índice especificado da cadeia de caracteres especificada.</summary>
        <returns>O valor do dígito decimal do caractere numérico no índice especificado da cadeia de caracteres especificada.  
  
- ou - 
-1, se o caractere no índice especificado da cadeia de caracteres especificada não for um dígito decimal.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método converte caracteres que representam os dígitos decimais em valores integrais equivalentes. Dígitos decimais são caracteres no <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> categoria que pode representar uma das dez dígitos no decimal (base 10) o sistema, de zero a nove de numeração. Ele inclui os caracteres como u+0030 (DÍGITOS ZERO) até u+0039 (DÍGITO NOVE), U + 0660 (-ARÁBICOS DÍGITOS ZERO) por meio de U + 0669 (-ARÁBICOS DÍGITO NOVE), U + 07c 0 (ZERO de DÍGITO NKO) por meio de U + 07C 9 (NKO DÍGITO NOVE) e U + 1040 (MYANMAR DÍGITOS ZERO) a U + 1049 ( DÍGITO NOVE MYANMAR).  
  
 Para obter mais informações sobre caracteres Unicode, consulte o [padrão Unicode](https://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 O exemplo de código a seguir mostra os valores retornados por cada método para diferentes tipos de caracteres.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> está fora do intervalo de índices válidos em <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtém o valor do dígito de um caractere Unicode numérico.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetDigitValue : char -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDigitValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">O caractere Unicode para o qual obter o valor do dígito.</param>
        <summary>Obtém o valor do dígito do caractere numérico especificado.</summary>
        <returns>O valor do dígito do caractere numérico especificado.  
  
- ou - 
-1, se o caractere especificado não for um dígito.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Valor do dígito é uma propriedade que se aplica somente aos caracteres numéricos que podem ser usados como dígitos. Um dígito é um caractere numérico que pode ser combinado com outros dígitos para representar um número inteiro em um sistema de numeração.  
  
 Para obter mais informações sobre caracteres Unicode, consulte o [padrão Unicode](https://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 O exemplo de código a seguir mostra os valores retornados por cada método para diferentes tipos de caracteres.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetDigitValue : string * int -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDigitValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">O <see cref="T:System.String" /> que contém o caractere Unicode para o qual obter o valor do dígito.</param>
        <param name="index">O índice do caractere Unicode para o qual obter o valor do dígito.</param>
        <summary>Obtém o valor do dígito do caractere numérico no índice especificado da cadeia de caracteres especificada.</summary>
        <returns>O valor do dígito do caractere numérico no índice especificado da cadeia de caracteres especificada.  
  
- ou - 
-1, se o caractere no índice especificado da cadeia de caracteres especificada não for um dígito.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Valor do dígito é uma propriedade que se aplica somente aos caracteres numéricos que podem ser usados como dígitos. Um dígito é um caractere numérico que pode ser combinado com outros dígitos para representar um número inteiro em um sistema de numeração.  
  
 Para obter mais informações sobre caracteres Unicode, consulte o [padrão Unicode](https://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 O exemplo de código a seguir mostra os valores retornados por cada método para diferentes tipos de caracteres.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> está fora do intervalo de índices válidos em <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNumericValue">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtém o valor numérico associado ao caractere Unicode.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (ch As Char) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : char -&gt; double" Usage="System.Globalization.CharUnicodeInfo.GetNumericValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">O caractere Unicode para o qual obter o valor numérico.</param>
        <summary>Obtém o valor numérico associado ao caractere especificado.</summary>
        <returns>O valor numérico associado ao caractere especificado.  
  
- ou - 
-1, se o caractere especificado não for um caractere numérico.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Valor numérico é uma propriedade de caractere Unicode que se aplica apenas caracteres numéricos, que inclui frações, subscritos, sobrescritos, numerais romanos, numeradores de moeda, números encircled e dígitos específicos de script. Para obter mais informações sobre caracteres Unicode, consulte o [padrão Unicode](https://go.microsoft.com/fwlink/?linkid=37123).  
  
 O <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> método pressupõe que `ch` corresponde a um único caractere linguístico e verifica se esse caractere pode ser convertido para um dígito decimal. No entanto, alguns números no padrão Unicode são representados por dois <xref:System.Char> objetos que formam um par substituto. Por exemplo, o sistema de numeração Aegean consiste em pontos de código de U+10107 a U+10133. O exemplo a seguir usa o método <xref:System.Char.ConvertFromUtf32%2A> para instanciar uma cadeia de caracteres que representa AEGEAN NUMBER ONE. Como a saída do exemplo mostra o <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> método retornará -1 se ele é passado um substituto alto ou um substituto baixo desse caractere.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#2)]  
  
   
  
## Examples  
 O exemplo de código a seguir mostra os valores retornados por cada método para diferentes tipos de caracteres.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (s As String, index As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : string * int -&gt; double" Usage="System.Globalization.CharUnicodeInfo.GetNumericValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">O <see cref="T:System.String" /> que contém o caractere Unicode para o qual obter o valor numérico.</param>
        <param name="index">O índice do caractere Unicode para o qual obter o valor numérico.</param>
        <summary>Obtém o valor numérico associado ao caractere no índice especificado da cadeia de caracteres especificada.</summary>
        <returns>O valor numérico associado ao caractere no índice especificado da cadeia de caracteres especificada.  
  
- ou - 
-1, se o caractere no índice especificado da cadeia de caracteres especificada não for um caractere numérico.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Valor numérico é uma propriedade de caractere Unicode que se aplica apenas caracteres numéricos, que inclui frações, subscritos, sobrescritos, numerais romanos, numeradores de moeda, números encircled e dígitos específicos de script. Para obter mais informações sobre caracteres Unicode, consulte o [padrão Unicode](https://go.microsoft.com/fwlink/?linkid=37123).  
  
 Se o <xref:System.Char> objeto na posição `index` é o primeiro caractere de um par substituto válido, o <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> método determina se o par substituto forms um dígito numérico e, em caso afirmativo, retorna seu valor numérico. Por exemplo, o sistema de numeração Aegean consiste em pontos de código de U+10107 a U+10133. O exemplo a seguir usa o <xref:System.Char.ConvertFromUtf32%2A> método para instanciar uma cadeia de caracteres que representa cada número Aegean. Como a saída do exemplo mostra o <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> método retorna o valor numérico correto se ela for passada o substituto alto de um número Aegean. No entanto, se ele for passado o substituto baixo, ele considera somente o substituto baixo em isolamento e retornará -1.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#3)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#3)]  
  
   
  
## Examples  
 O exemplo de código a seguir mostra os valores retornados por cada método para diferentes tipos de caracteres.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> está fora do intervalo de índices válidos em <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicodeCategory">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtém a categoria Unicode de um caractere Unicode.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (ch As Char) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(char ch);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : char -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">O caractere Unicode para o qual a categoria Unicode será obtida.</param>
        <summary>Obtém a categoria Unicode do caractere especificado.</summary>
        <returns>Um valor de <see cref="T:System.Globalization.UnicodeCategory" /> que indica a categoria do caractere especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os caracteres Unicode são divididos em categorias. Categoria de um caractere é uma de suas propriedades. Por exemplo, um caractere pode ser uma letra maiuscula, uma letra minúscula, um número de dígito decimal, um letra, um número, uma pontuação de conector, um símbolo matemático ou um símbolo de moeda. O <xref:System.Globalization.UnicodeCategory> classe retorna a categoria de um caractere Unicode. Para obter mais informações sobre caracteres Unicode, consulte o [padrão Unicode](https://go.microsoft.com/fwlink/?linkid=37123).  
  
 O <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A> método pressupõe que `ch` corresponde a um único caractere linguístico e retorna sua categoria. Isso significa que, para os pares substitutos, ela retorna <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> em vez da categoria à qual pertence o substituto. Por exemplo, o alfabeto Ugaritic ocupa pontos de código U + 10380 a U + 1039F. O exemplo a seguir usa o <xref:System.Char.ConvertFromUtf32%2A> método para instanciar uma cadeia de caracteres que representa o UGARITIC LETRA ALPA (U + 10380), que é a primeira letra do alfabeto Ugaritic. Como a saída do exemplo mostra, o <xref:System.Char.IsNumber%28System.Char%29> método retorna `false` se ele é transmitido o substituto alto ou baixo alternativo desse caractere.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#1)]  
  
 Observe que <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> nem sempre retorna o mesmo <xref:System.Globalization.UnicodeCategory> de valor como o <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> quando passado um determinado caractere como um parâmetro de método. O <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> método foi projetado para refletir a versão atual do padrão Unicode. Por outro lado, embora o <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> método geralmente reflete a versão atual do padrão Unicode, ela pode retornar com base em uma versão anterior do padrão de categoria de um caractere ou ela pode retornar uma categoria que seja diferente do padrão atual para preserve a compatibilidade com versões anteriores.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra os valores retornados por cada método para diferentes tipos de caracteres.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (int codePoint);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(int32 codePoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (codePoint As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(int codePoint);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : int -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory codePoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codePoint" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codePoint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (s As String, index As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : string * int -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">O <see cref="T:System.String" /> que contém o caractere Unicode para o qual a categoria Unicode será obtida.</param>
        <param name="index">O índice do caractere Unicode para o qual a categoria Unicode será obtida.</param>
        <summary>Obtém a categoria Unicode do caractere no índice especificado da cadeia de caracteres especificada.</summary>
        <returns>Um valor <see cref="T:System.Globalization.UnicodeCategory" /> que indica a categoria do caractere no índice especificado da cadeia de caracteres especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os caracteres Unicode são divididos em categorias. Categoria de um caractere é uma de suas propriedades. Por exemplo, um caractere pode ser uma letra maiuscula, uma letra minúscula, um número de dígito decimal, um letra, um número, uma pontuação de conector, um símbolo matemático ou um símbolo de moeda. O <xref:System.Globalization.UnicodeCategory> classe retorna a categoria de um caractere Unicode. Para obter mais informações sobre caracteres Unicode, consulte o [padrão Unicode](https://go.microsoft.com/fwlink/?linkid=37123).  
  
 Se o <xref:System.Char> objeto na posição `index` é o primeiro caractere de um par substituto válido, o <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> método retorna a categoria Unicode do par alternativo em vez de retornar <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>. Por exemplo, o alfabeto Ugaritic ocupa pontos de código U + 10380 a U + 1039F. O exemplo a seguir usa o <xref:System.Char.ConvertFromUtf32%2A> método para instanciar uma cadeia de caracteres que representa o UGARITIC LETRA ALPA (U + 10380), que é a primeira letra do alfabeto Ugaritic. Como a saída do exemplo mostra, o <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> método retorna <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> se ele é transmitido o substituto alto desse caractere, o que indica que ele considera o par substituto. No entanto, se ele for passado o substituto baixo, ele considera somente o substituto baixo em isolamento e retorna <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#2)]  
  
 Observe que <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> método nem sempre retorna o mesmo <xref:System.Globalization.UnicodeCategory> de valor como o <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> quando passado um determinado caractere como um parâmetro de método. O <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> método foi projetado para refletir a versão atual do padrão Unicode. Por outro lado, embora o <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> método geralmente reflete a versão atual do padrão Unicode, ela pode retornar com base em uma versão anterior do padrão de categoria de um caractere ou ela pode retornar uma categoria que seja diferente do padrão atual para preserve a compatibilidade com versões anteriores.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra os valores retornados por cada método para diferentes tipos de caracteres.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> está fora do intervalo de índices válidos em <paramref name="s" />.</exception>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
  </Members>
</Type>