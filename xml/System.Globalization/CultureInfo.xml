<Type Name="CultureInfo" FullName="System.Globalization.CultureInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="def27fc8960e34162ed6faf152d89b8f64a9e167" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34174399" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CultureInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit CultureInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CultureInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CultureInfo&#xA;Implements ICloneable, IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class CultureInfo : ICloneable, IFormatProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fornece informações sobre uma cultura específica (chamada de *locale* para o desenvolvimento de código não gerenciado). As informações incluem os nomes da cultura, o sistema de escrita, o calendário usado, a ordem de classificação das cadeias de caracteres e a formatação de datas e números.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Globalization.CultureInfo> classe fornece informações específicas de cultura, como a linguagem de subidioma, país/região, calendário e convenções associadas a uma determinada cultura. Essa classe também fornece acesso a instâncias específicas de cultura do <xref:System.Globalization.DateTimeFormatInfo>, <xref:System.Globalization.NumberFormatInfo>, <xref:System.Globalization.CompareInfo>, e <xref:System.Globalization.TextInfo> objetos. Esses objetos contêm as informações necessárias para operações específicas de cultura, como maiusculas e minúsculas, formatação de datas e números e comparação de cadeias de caracteres. O <xref:System.Globalization.CultureInfo> classe é usada direta ou indiretamente por classes que formatam, analisam ou manipulam dados específicos de cultura, como <xref:System.String>, <xref:System.DateTime>, <xref:System.DateTimeOffset>e os tipos numéricos.  
  
 Nesta seção:  
  
 [Identificadores e nomes de cultura](#CultureNames)   
 [Culturas específicas invariáveis e neutras](#Invariant)   
 [Culturas personalizadas](#Custom)   
 [Dados de cultura dinâmico](#Dynamic)   
 [A cultura atual e a cultura de interface do usuário atual](#Current)   
 [Obter todas as culturas](#GetAll)   
 [Cultura e threads](#Threads)   
 [Domínios de aplicativo e cultura](#AppDomain)   
 [Cultura e baseado em tarefas de operações assíncronas](#Async)   
 [Serialização de objeto CultureInfo](#Serialization)   
 [Substituições de painel de controle](#CPanel)   
 [Ordens de classificação alternativo](#AlternateSort)   
 [Aplicativos do Windows e de cultura](#Windows)  
  
<a name="CultureNames"></a>   
## <a name="culture-names-and-identifiers"></a>Identificadores e nomes de cultura  
 O <xref:System.Globalization.CultureInfo> classe especifica um nome exclusivo para cada cultura, com base na RFC 4646. O nome é uma combinação de um código de cultura de duas letras minúsculas ISO 639 associado a um idioma e um código de subcultura de duas letras maiusculas ISO 3166 associado a um país ou região. Além disso, para aplicativos que se destinam a [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] ou posterior e estão em execução no Windows 10 ou posterior, os nomes de cultura que correspondem à linguagem BCP-47 válida marcas têm suporte.  
  
> [!NOTE]
>  Quando um nome de cultura é transmitido ao construtor de classe ou um método como <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> ou <xref:System.Globalization.CultureInfo>, seu caso não é significativo.  
  
 É o formato para o nome de cultura com base na RFC 4646 *formato código_de_idioma2*>-*país/regioncode2*, onde *formato código_de_idioma2* é o código de idioma de duas letras e *país/regioncode2* é o código de subcultura de duas letras. Exemplos incluem ja-JP para japonês (Japão) e en-US para inglês (Estados Unidos). Em casos em que não é um código de idioma de duas letras, um código de três letras derivado do ISO 639-2 é usado.  
  
 Observe que alguns nomes de cultura também especificar um script 15924 ISO. Por exemplo, Cyrl Especifica o script cirílico e Latn Especifica o script latino. Um nome de cultura que inclui um script usa o padrão de *formato código_de_idioma2*-*scripttag*-*país/regioncode2*. Um exemplo desse tipo de nome de cultura é uz-Cyrl-UZ para Uzbeque (Uzbequistão, cirílico). Em sistemas operacionais antes do Windows Vista, um nome de cultura que inclui um script usa o padrão de *formato código_de_idioma2*-*país/regioncode2*-*scripttag*, por exemplo, uz-UZ-Cyrl para Uzbeque (Uzbequistão, cirílico).  
  
 Uma cultura neutra é especificada pelo apenas o código de idioma de duas letras minúsculas. Por exemplo, fr Especifica a cultura neutra para francês e ir Especifica a cultura neutra para alemão.  
  
> [!NOTE]
>  Há dois nomes de cultura que contradigam a essa regra. Culturas chinês (simplificado), denominado zh-Hans e chinês (tradicional), denominado zh-Hant são culturas neutras. Os nomes de cultura representam o padrão atual e devem ser usados a menos que você tenha um motivo para usar os nomes zh-CHS e zh-CHT mais antigos.  
  
 Um identificador de cultura é uma abreviação numérica internacional padrão e tem os componentes necessários para identificar exclusivamente uma das culturas instaladas. Seu aplicativo pode usar identificadores de cultura predefinidos ou definir identificadores personalizados.  
  
 Certos predefinidas nomes de cultura e identificadores são usados por essa e outras classes de <xref:System.Globalization?displayProperty=nameWithType> namespace. Informações de cultura detalhadas são exibidas no [suporte ao idioma nacional (NLS) API referência](http://go.microsoft.com/fwlink/?LinkId=200048) no Go Global Developer Center.  
  
 Lembre-se de que os nomes de cultura e identificadores representam apenas um subconjunto de culturas que podem ser encontrados em um computador específico. Versões do Windows ou service packs podem alterar as culturas disponíveis. Aplicativos adicionam culturas personalizadas usando o <xref:System.Globalization.CultureAndRegionInfoBuilder> classe. Os usuários adicionar seus próprios culturas personalizadas usando a ferramenta construtor de localidade da Microsoft. Construtor de localidade da Microsoft é escrito em código gerenciado usando o `CultureAndRegionInfoBuilder` classe.  
  
 Vários nomes distintos estão estreitamente relacionados com uma cultura, especialmente os nomes associados aos seguintes membros de classe:  
  
-   <xref:System.Globalization.CultureInfo.ToString%2A?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.CompareInfo.Name%2A?displayProperty=nameWithType>  
  
<a name="Invariant"></a>   
## <a name="invariant-neutral-and-specific-cultures"></a>Culturas específicas invariáveis e neutras  
 Culturas geralmente são agrupadas em três conjuntos: invariáveis culturas, culturas neutras e culturas específicas.  
  
 A cultura invariável é não levam em conta a cultura. O aplicativo especifica a cultura invariável por nome usando uma cadeia de caracteres vazia ("") ou por seu identificador. <xref:System.Globalization.CultureInfo.InvariantCulture%2A> define uma instância da cultura invariável. Ele está associado com o idioma inglês, mas não com qualquer país/região. Ele é usado em praticamente qualquer método no `Globalization` namespace que requer uma cultura.  
  
 Uma cultura neutra é uma cultura que está associada com um idioma, mas não com um país/região. Uma cultura específica é uma cultura que está associada a um idioma e um país/região. Por exemplo, fr é o nome neutro para a cultura Francês e fr-FR é o nome da cultura Francês (França) específico. Observe que chinês (simplificado) e chinês (tradicional) também são considerados culturas neutras.  
  
 Criando uma instância de um <xref:System.Globalization.CompareInfo> de classe para uma cultura neutra não é recomendada porque os dados que ele contém são arbitrários. Para exibir e classificar dados, especifique o idioma e a região. Além disso, o <xref:System.Globalization.CompareInfo.Name%2A> propriedade de um <xref:System.Globalization.CompareInfo> objeto criado para uma cultura neutra retorna somente o país e não inclui a região.  
  
 As culturas definidas possui uma hierarquia em que o pai de uma cultura específica é uma cultura neutra e o pai de uma cultura neutra é a cultura invariável. O <xref:System.Globalization.CultureInfo.Parent%2A> propriedade contém a cultura neutra associada a uma cultura específica. Culturas personalizadas devem definir o <xref:System.Globalization.CultureInfo.Parent%2A> propriedade em conformidade com esse padrão.  
  
 Se os recursos para uma cultura específica não estão disponíveis no sistema operacional, os recursos para a cultura neutra associado são usados. Se os recursos para a cultura neutra não estiverem disponíveis, os recursos incorporados no assembly principal são usados. Para obter mais informações sobre o processo de fallback de recurso, consulte [Empacotando e implantando recursos](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md).  
  
 A lista de localidades na API do Windows é ligeiramente diferente da lista de culturas com suporte pelo .NET Framework. Se a interoperabilidade com o Windows é necessária, por exemplo, por meio do mecanismo p/invoke, o aplicativo deve usar uma cultura específica que está definida para o sistema operacional. Uso da cultura específica assegura a consistência com a localidade equivalente do Windows, que é identificada com um identificador de localidade que é o mesmo que <xref:System.Globalization.CultureInfo.LCID%2A>.  
  
 Um <xref:System.Globalization.DateTimeFormatInfo> ou <xref:System.Globalization.NumberFormatInfo> podem ser criados somente para a cultura invariável ou específicos de cultura, não para culturas neutras.  
  
 Se <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> é o <xref:System.Globalization.TaiwanCalendar> , mas o <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> não está definido como zh-TW, em seguida, <xref:System.Globalization.DateTimeFormatInfo.NativeCalendarName%2A?displayProperty=nameWithType>, <xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A?displayProperty=nameWithType>, e <xref:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName%2A?displayProperty=nameWithType> retornar uma cadeia de caracteres vazia ("").  
  
<a name="Custom"></a>   
## <a name="custom-cultures"></a>Culturas personalizadas  
 Além de culturas predefinidas suportadas pelo sistema operacional Windows e o .NET Framework, o .NET Framework dá suporte a três tipos de culturas personalizadas:  
  
-   Novo culturas que complementam as culturas disponíveis no Windows ou o .NET Framework. Por exemplo, um aplicativo pode instalar um <xref:System.Globalization.CultureInfo> objeto que representa o FJ fj (ou Fijan (Ilhas Fiji)) cultura em um sistema.  
  
-   Culturas de substituição cujas propriedades são diferentes das propriedades das culturas padrão com suporte do Windows e o .NET Framework.  
  
-   Culturas padrão com substituições do usuário. O usuário pode usar o **região e idioma** aplicativo em **painel de controle** para personalizar os valores de propriedade da cultura de um existente.  
  
> [!NOTE]
>  Você pode usar o <xref:System.Globalization.CultureAndRegionInfoBuilder> classe para definir, salvar e registrar culturas personalizadas que suplementam ou substituir culturas existentes. O <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A?displayProperty=nameWithType> método cria um arquivo de linguagem de marcação de dados de localidade (LDML) que pode ser usado para instalar uma cultura personalizada em sistemas de destino. Para obter informações passo passo sobre como usar o <xref:System.Globalization.CultureAndRegionInfoBuilder> classe para criar um novo ou cultura substituta, consulte o <xref:System.Globalization.CultureAndRegionInfoBuilder> tópico sobre a classe.  
  
 Como o .NET Framework oferece suporte a culturas personalizadas, você deve considerar o seguinte ao trabalhar com dados específicos da cultura:  
  
-   Culturas personalizadas podem ter valores que excedem os intervalos das culturas predefinidos. Por exemplo, algumas culturas têm nomes de mês muito longo, data inesperada ou formatos de hora ou outros dados incomuns.  
  
-   Quando você exibe dados específicos da cultura da interface do usuário, você deve respeitar as personalizações do usuário; Por exemplo, o usuário seja um relógio de 24 horas ou um formato de data AAAAMMDD.  
  
-   Lembre-se de culturas personalizadas substituam valores padrão. Portanto, você não pode considerar cultura dos dados estável. Nomes de país, formatos de número e data e grafias podem ser alteradas no futuro. Se você quiser serializar dados sensíveis à cultura, como cadeias de caracteres de data e hora a ser passado para a data e hora, funções de análise, você deve usar a cultura invariável ou um específico.  
  
 O <xref:System.Globalization.CultureInfo.CultureTypes%2A> inclui o valor da propriedade de culturas personalizadas instalado em um sistema de <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> sinalizador e culturas personalizadas são atribuídos um <xref:System.Globalization.CultureInfo.LCID%2A> valor da propriedade `LOCALE_CUSTOM_UNSPECIFIED` (0x1000 ou 4096). Observe que, começando com o Windows 10, esse valor também é atribuído ao culturas definidas pelo sistema que não têm dados culturais completa.  
  
<a name="Dynamic"></a>   
## <a name="dynamic-culture-data"></a>Dados de cultura dinâmico  
 Exceto para a cultura invariável, dados de cultura são dinâmicos. Isso é verdadeiro mesmo para as culturas predefinidas. Por exemplo, países ou regiões adotarem novas moedas, altere seus erros de ortografia de palavras ou alterar seu calendário preferencial e alterar as definições de cultura para controlar isso.  Culturas personalizadas estão sujeitos a alterações sem aviso prévio e qualquer cultura específica pode ser substituída por uma cultura personalizada substituta. Além disso, conforme discutido abaixo, um usuário individual pode substituir as preferências culturais. Aplicativos sempre devem obter dados de cultura em tempo de execução.  
  
> [!CAUTION]
>  Ao salvar os dados, seu aplicativo deve usar um formato independente de cultura específico, um formato binário ou a cultura invariável. Dados salvos de acordo com os valores atuais associados a uma cultura específica, que não seja a cultura invariável, poderão ficar ilegíveis ou podem ser alterado em significado se aquela cultura for alterado.  
  
<a name="Current"></a>   
## <a name="the-current-culture-and-current-ui-culture"></a>A cultura atual e a cultura de interface do usuário atual  
 Todos os threads em um aplicativo do .NET Framework tem uma cultura atual e uma cultura de interface do usuário atual. A cultura atual determina as convenções de formatação de datas, horas, números e valores de moeda, a ordem de classificação de texto, as convenções de maiusculas e minúsculas e as maneiras em que as cadeias de caracteres são comparadas. A cultura de interface do usuário atual é usada para recuperar recursos específicos de cultura em tempo de execução.  
  
> [!NOTE]
>  Para obter informações sobre como a cultura de interface do usuário atual e atual é determinada em uma base por thread, consulte o [cultura e threads](#Threads) seção. Para obter informações sobre como a cultura de interface do usuário atual e atual é determinada em threads em execução em um novo domínio de aplicativo e em threads que ultrapassam os limites de domínio de aplicativo, consulte o [cultura e domínios de aplicativo](#AppDomain) seção. Para obter informações sobre como o atual e o atual é determinada em threads de execução de baseados em tarefas de operações assíncronas, consulte o [cultura e baseado em tarefas de operações assíncronas](#Async) seção.  
  
 Para obter mais informações sobre a cultura atual, consulte o <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> tópico da propriedade. Para obter mais informações sobre a cultura de interface do usuário atual, consulte o <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> tópico da propriedade.  
  
### <a name="retrieving-the-current-and-current-ui-cultures"></a>Recuperando as culturas de interface do usuário atuais e atuais  
 Você pode obter um <xref:System.Globalization.CultureInfo> objeto que representa a cultura atual em uma das duas maneiras:  
  
-   Recuperando o valor de <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriedade.  
  
-   Recuperando o valor de [Thread.CurrentThread.CurrentCulture](<xref:System.Threading.Thread.CurrentCulture>) propriedade.  
  
 O exemplo a seguir recupera os valores de propriedade, compara-as para mostrar que eles são iguais e exibe o nome da cultura atual.  
  
 [!code-csharp[System.Globalization.CultureInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Current1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Current1.vb#1)]  
  
 Você pode obter um <xref:System.Globalization.CultureInfo> objeto que representa a cultura de interface do usuário atual em uma das duas maneiras:  
  
-   Recuperando o valor de <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propriedade.  
  
-   Recuperando o valor de [Thread.CurrentThread.CurrentUICulture](<xref:System.Threading.Thread.CurrentUICulture>) propriedade.  
  
 O exemplo a seguir recupera os valores de propriedade, compara-as para mostrar que eles são iguais e exibe o nome da cultura da interface do usuário atual.  
  
 [!code-csharp[System.Globalization.CultureInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/CurrentUI1.cs#2)]
 [!code-vb[System.Globalization.CultureInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/CurrentUI1.vb#2)]  
  
### <a name="setting-the-current-and-current-ui-cultures"></a>Definindo as culturas de interface do usuário atuais e atuais  
 Para alterar a cultura e cultura da interface do usuário de um thread, faça o seguinte:  
  
1.  Criar uma instância de um <xref:System.Globalization.CultureInfo> objeto que representa essa cultura chamando um <xref:System.Globalization.CultureInfo> classe construtor e passando o nome da cultura. O <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> construtor instancia um <xref:System.Globalization.CultureInfo> substituições de objeto que reflete o usuário se a cultura novo é o mesmo que a cultura atual do Windows.   O <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> construtor permite que você especifique se o recém-instanciado <xref:System.Globalization.CultureInfo> objeto reflete as substituições de usuário se a cultura novo é o mesmo que a cultura atual do Windows.  
  
2.  Atribuir o <xref:System.Globalization.CultureInfo> o objeto para o <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> ou <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> propriedade. Além disso, para aplicativos com a versão 4.6 ou posterior do .NET Framework da área de trabalho, você também pode atribuir o <xref:System.Globalization.CultureInfo> o objeto para o <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> ou <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propriedade.  
  
 O exemplo a seguir recupera a cultura atual. Se ele for diferente da cultura Francês (França), ele altera a cultura atual como francês (França). Caso contrário, ele altera a cultura atual como francês (Luxemburgo).  
  
 [!code-csharp[System.Globalization.CultureInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Change1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Change1.vb#3)]  
  
 O exemplo a seguir recupera a cultura atual. Se for diferente de cultura esloveno (Eslovênia), ele altera a cultura atual para esloveno (Eslovênia). Caso contrário, ele altera a cultura atual para Croata (Croácia).  
  
 [!code-csharp[System.Globalization.CultureInfo#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/ChangeUI1.cs#4)]
 [!code-vb[System.Globalization.CultureInfo#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/ChangeUI1.vb#4)]  
  
<a name="GetAll"></a>   
## <a name="getting-all-cultures"></a>Obter todas as culturas  
 Você pode recuperar um categorias específicas de matriz de culturas ou de todas as culturas disponíveis no computador local ao chamar o <xref:System.Globalization.CultureInfo.GetCultures%2A> método. Por exemplo, você pode recuperar culturas personalizadas, culturas específicas ou culturas neutras sozinhos ou em combinação.  
  
 A exemplo a seguir chama o <xref:System.Globalization.CultureInfo.GetCultures%2A> método duas vezes, primeiro com o <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> membro de enumeração para recuperar todas as culturas personalizadas e, em seguida, com o <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> membro de enumeração para recuperar todas as culturas de substituição.  
  
 [!code-csharp[System.Globalization.CultureInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/GetCultures1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/GetCultures1.vb#5)]  
  
<a name="Threads"></a>   
## <a name="culture-and-threads"></a>Cultura e threads  
 Quando um novo thread de aplicativo é iniciado, sua cultura atual e a cultura de interface do usuário atual são definidas pela cultura atual do sistema e não pela cultura do thread atual. O exemplo a seguir ilustra a diferença. Ele define a cultura atual e a cultura de interface do usuário atual de um thread de aplicativo para a cultura Francês (França) (fr-FR). Se a cultura atual já estiver fr-FR, o exemplo define a cultura do inglês (Estados Unidos) (en-US). Ele exibe três números aleatórios como valores de moeda e, em seguida, cria um novo thread, que, por sua vez, exibe três números aleatórios mais como valores de moeda. Mas, como a saída de exemplo mostra, os valores de moeda exibidos pelo novo thread não refletem as convenções de formatação da cultura Francês (França), ao contrário de saída do thread principal do aplicativo.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/defaultthread1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/defaultthread1.vb#1)]  
  
 Em versões do .NET Framework antes do [!INCLUDE[net_v45](~/includes/net-v45-md.md)], a maioria dos maneira comum de assegurar que o thread principal do aplicativo compartilha a mesma cultura com todos os outros threads de trabalho é passar o nome da cultura todo o aplicativo ou um <xref:System.Globalization.CultureInfo> objeto que representa a cultura de todo o aplicativo para um <xref:System.Threading.ParameterizedThreadStart?displayProperty=nameWithType> delegate. O exemplo a seguir usa essa abordagem para garantir que os valores de moeda exibidos por dois segmentos refletem as convenções de formatação da cultura do mesmo.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/perthread1.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/perthread1.vb#2)]  
  
 Você pode definir a cultura e cultura da interface do usuário do thread do pool de threads de maneira semelhante ao chamar o <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=nameWithType> método.  
  
 Começando com o [!INCLUDE[net_v45](~/includes/net-v45-md.md)], você pode definir a cultura e cultura da interface do usuário de todos os threads em um domínio de aplicativo mais diretamente, atribuindo um <xref:System.Globalization.CultureInfo> objeto que representa essa cultura para o <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> e <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedades. O exemplo a seguir usa essas propriedades para garantir que todos os threads no domínio de aplicativo padrão compartilham a mesma cultura.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/setthreads1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/setthreads1.vb#3)]  
  
> [!WARNING]
>  Embora o <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> e <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedades são membros estáticos, eles definem a cultura padrão e a cultura de interface do usuário padrão apenas para o domínio de aplicativo atual no momento em que os valores de propriedade são definidos. Para obter mais informações, consulte a próxima seção, [cultura e domínios de aplicativo](#AppDomain).  
  
 Quando você atribui valores a <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> e <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedades, a cultura e cultura da interface do usuário de threads no domínio do aplicativo também alterar se eles não explicitamente tem uma cultura. No entanto, esses segmentos refletem as novas configurações de cultura apenas enquanto elas são executadas no domínio do aplicativo atual. Se esses threads são executados em outro domínio de aplicativo, a cultura torna-se a cultura padrão definida para esse domínio de aplicativo. Como resultado, é recomendável que você sempre definir a cultura do thread principal do aplicativo e não contam com o <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> e <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedades para alterá-lo.  
  
<a name="AppDomain"></a>   
## <a name="culture-and-application-domains"></a>Domínios de aplicativo e cultura  
 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> e <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> são propriedades estáticas que definam explicitamente uma cultura padrão apenas para o domínio de aplicativo atual quando o valor da propriedade é definido ou recuperado. O exemplo a seguir define a cultura padrão e a cultura de interface do usuário padrão no domínio de aplicativo padrão para francês (França) e, em seguida, usa o <xref:System.AppDomainSetup> classe e o <xref:System.AppDomainInitializer> delegado para definir a cultura padrão e a cultura de interface do usuário em um novo domínio de aplicativo para Russo (Rússia). Um único thread, em seguida, executa dois métodos em cada domínio de aplicativo. Observe que o thread cultura e cultura da interface do usuário não são explicitamente definidas; eles são derivados da cultura padrão de cultura de interface do usuário do domínio do aplicativo no qual o thread está em execução. Observe também que o <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> e <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedades retornam o padrão <xref:System.Globalization.CultureInfo> valores do domínio do aplicativo atual quando é feita a chamada de método.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.AppDomain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.appdomain/cs/appdomainex1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.AppDomain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.appdomain/vb/appdomainex1.vb#1)]  
  
 Para obter mais informações sobre culturas e domínios de aplicativo, consulte a seção "Domínios de aplicativo e Threads" no tópico.  
  
<a name="Async"></a>   
## <a name="culture-and-task-based-asynchronous-operations"></a>Cultura e baseado em tarefas de operações assíncronas  
 O [padrão de programação assíncrono baseado em tarefa](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) usa <xref:System.Threading.Tasks.Task> e <xref:System.Threading.Tasks.Task%601> objetos a ser executado assincronamente delegados no thread do pool de threads. O thread específico no qual uma tarefa em particular é executado não for conhecido antecipadamente, mas é determinado somente em tempo de execução.  
  
 Para aplicativos que se destinam a [!INCLUDE[net_v46](~/includes/net-v46-md.md)] ou versões posteriores, a cultura é parte do contexto de uma operação assíncrona. Em outras palavras, iniciando com aplicativos destinados a [!INCLUDE[net_v46](~/includes/net-v46-md.md)], operações assíncronas, por padrão herdam os valores da <xref:System.Globalization.CultureInfo.CurrentCulture%2A> e <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriedades do thread da qual eles são iniciados. Se a cultura atual ou a cultura de interface do usuário atual difere a cultura do sistema, a cultura atual ultrapassar os limites de thread e torna-se a cultura atual do thread do pool que está executando uma operação assíncrona.  
  
 O exemplo a seguir fornece uma ilustração simples. Ele usa o <xref:System.Runtime.Versioning.TargetFrameworkAttribute> atributo como destino o [!INCLUDE[net_v46](~/includes/net-v46-md.md)]. O exemplo define uma <xref:System.Func%601> delegado, `formatDelegate`, que retorna números formatados como valores de moeda. O exemplo altera a cultura atual do sistema para o francês (França) ou, se francês (França) já é a cultura atual, em inglês (Estados Unidos). Ele então:  
  
-   Invoca o delegado diretamente para que seja executada de forma síncrona no thread do aplicativo principal.  
  
-   Cria uma tarefa que executa o delegado de forma assíncrona em um pool de threads.  
  
-   Cria uma tarefa que executa o representante de forma síncrona no thread principal do aplicativo ao chamar o <xref:System.Threading.Tasks.Task.RunSynchronously%2A?displayProperty=nameWithType> método.  
  
 Como mostra a saída do exemplo, quando a cultura atual é alterada para o francês (França), a cultura atual do thread do qual as tarefas são chamadas de maneira assíncrona se torna a cultura atual para essa operação assíncrona.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture1.vb#1)]  
  
 Para aplicativos que usam versões do .NET Framework antes do [!INCLUDE[net_v46](~/includes/net-v46-md.md)], ou para aplicativos que não uma versão específica do .NET Framework de destino, a cultura do thread de chamada não é parte do contexto de uma tarefa. Em vez disso, a menos que um for definido explicitamente, a cultura de novos threads por padrão é a cultura do sistema. O exemplo a seguir, que é idêntico ao exemplo anterior, exceto que ele não tem o <xref:System.Runtime.Versioning.TargetFrameworkAttribute> atributo, ilustra isso. Como a cultura do sistema do sistema no qual o exemplo é executado em inglês (Estados Unidos), a cultura da tarefa que executa de forma assíncrona em um pool de threads é en-US, em vez de fr-FR.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture2.vb#2)]  
  
 Para aplicativos que usam versões do .NET Framework a partir de [!INCLUDE[net_v45](~/includes/net-v45-md.md)] e posterior, mas antes do [!INCLUDE[net_v46](~/includes/net-v46-md.md)], você pode usar o <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> e <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedades para garantir que a cultura do thread de chamada é usada em tarefas assíncronas que execute no thread do pool de threads. O exemplo a seguir é idêntico ao exemplo anterior, exceto que ele usa o <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> propriedade para garantir que o thread do pool de threads tem a mesma cultura que o thread do aplicativo principal.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture3.cs#3)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture3.vb#3)]  
  
 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> e <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> é por aplicativo propriedades de domínio; ou seja, elas estabelecem uma cultura padrão para todos os threads não foi explicitamente atribuído a uma cultura em um domínio de aplicativo específico. No entanto, para aplicativos que se destinam a [!INCLUDE[net_v46](~/includes/net-v46-md.md)] ou posterior, a cultura do thread de chamada permanece parte do contexto de uma tarefa assíncrona mesmo se a tarefa cruza os limites de domínio de aplicativo.  
  
 O exemplo a seguir mostra que a chamada cultura do thread permaneça a cultura atual de uma operação assíncrona com base em tarefa mesmo se o método que está executando a tarefa cruza os limites de domínio de aplicativo. Define uma classe, `DataRetriever`, com um único método, `GetFormattedNumber`, que retorna um número de ponto flutuante de precisão dupla aleatório entre 1 e 1.000 formatado como um valor de moeda. Uma primeira tarefa é executada que simplesmente instancia um `DataRetriever` instância e chama seu `GetFormattedNumber` método. Uma segunda tarefa relata seu domínio de aplicativo atual, cria um novo domínio de aplicativo, cria um `DataRetriever` instância no novo domínio de aplicativo e chama seu `GetFormattedNumber` método. Como mostra a saída do exemplo, a cultura atual permanece o mesmo no thread de chamada, a primeira tarefa e a segunda tarefa ambos os quando estava sendo executado no domínio do aplicativo principal e o segundo domínio de aplicativo.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture4.cs#4)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture4.vb#4)]  
  
<a name="Serialization"></a>   
## <a name="cultureinfo-object-serialization"></a>Serialização de objeto CultureInfo  
 Quando um <xref:System.Globalization.CultureInfo> o objeto é serializado, tudo o que é armazenado na verdade é <xref:System.Globalization.CultureInfo.Name%2A> e <xref:System.Globalization.CultureInfo.UseUserOverride%2A>. Ele é desserializado com êxito apenas em um ambiente onde que <xref:System.Globalization.CultureInfo.Name%2A> tem o mesmo significado. Os três exemplos a seguir mostram por que isso não é sempre o caso:  
  
-   Se o <xref:System.Globalization.CultureInfo.CultureTypes%2A> é o valor da propriedade <xref:System.Globalization.CultureTypes?displayProperty=nameWithType>, e se aquela cultura foi introduzida no Windows Vista ou uma versão posterior do sistema operacional Windows, não é possível desserializar no Windows XP. Da mesma forma, se a cultura foi introduzida no Windows XP Service Pack 2, não é possível desserializar para um sistema Windows XP no qual a cultura não foi instalada.  
  
-   Se o <xref:System.Globalization.CultureInfo.CultureTypes%2A> valor é <xref:System.Globalization.CultureTypes?displayProperty=nameWithType>e o computador no qual ele é desserializado não tem essa cultura personalizada de usuário instalada, não é possível desserializar ele.  
  
-   Se o <xref:System.Globalization.CultureInfo.CultureTypes%2A> valor é <xref:System.Globalization.CultureTypes?displayProperty=nameWithType>e o computador no qual ele é desserializado não tem essa cultura substituta, ele desfaz a serialização para o mesmo nome, mas não todas as mesmas características. Por exemplo, en-US é uma cultura de substituição no computador A, mas não no computador B e se um <xref:System.Globalization.CultureInfo> do objeto que faz referência a essa cultura é serializado no computador A e desserializado no computador B, nenhuma das características da cultura personalizadas são transmitidas. A cultura desfaz a serialização com êxito, mas com um significado diferente.  
  
<a name="CPanel"></a>   
## <a name="control-panel-overrides"></a>Substituições de painel de controle  
 O usuário pode optar por substituir alguns dos valores associados com a cultura atual do Windows por meio de parte de opções regionais e de idioma do painel de controle. Por exemplo, o usuário pode escolher para exibir a data em um formato diferente ou usar uma moeda diferente do padrão para a cultura. Em geral, os aplicativos devem honrar essas substituições do usuário.  
  
 Se <xref:System.Globalization.CultureInfo.UseUserOverride%2A> é `true` e a cultura especificada corresponde a cultura atual do Windows, o <xref:System.Globalization.CultureInfo> usa essas substituições, inclusive configurações de usuário para as propriedades do <xref:System.Globalization.DateTimeFormatInfo> instância retornada pelo <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriedade e as propriedades do <xref:System.Globalization.NumberFormatInfo> instância retornada pelo <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade. Se as configurações do usuário são incompatíveis com a cultura associada com o <xref:System.Globalization.CultureInfo>, por exemplo, se o calendário selecionado não é um do <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, os resultados dos métodos e os valores das propriedades são indefinidos.  
  
<a name="AlternateSort"></a>   
## <a name="alternate-sort-orders"></a>Ordens de classificação alternativo  
 Algumas culturas oferecem suporte a mais de uma ordem de classificação. Por exemplo:  
  
-   A cultura Espanhol (Espanha) tem duas ordens de classificação: a ordem de classificação internacional padrão e a ordem de classificação tradicional. Quando você instancia um <xref:System.Globalization.CultureInfo> do objeto com o nome de cultura es-ES, a ordem de classificação internacional é usada. Quando você instancia um <xref:System.Globalization.CultureInfo> do objeto com o nome de cultura es-ES-tradnl, a ordem de classificação tradicional é usada.  
  
-   A cultura zh-CN (chinês (simplificado, República Popular da China)) dá suporte a duas ordens de classificação: por pronúncia (padrão) e pelo número de traços. Quando você instancia um <xref:System.Globalization.CultureInfo> do objeto com o nome de cultura zh-CN, a ordem de classificação padrão é usada. Quando você instancia um <xref:System.Globalization.CultureInfo> do objeto com um identificador de local de 0x00020804, cadeias de caracteres são classificadas pela contagem de traço.  
  
 A tabela a seguir lista as culturas que oferecem suporte a ordens de classificação alternativas e os identificadores para o padrão e as ordens de classificação alternativo.  
  
|Nome da cultura|Cultura|Identificador e nome de classificação padrão|Identificador e nome de classificação alternativo|  
|------------------|-------------|--------------------------------------|----------------------------------------|  
|es-ES|Espanhol (Espanha)|Internacional: 0x00000C0A|Tradicional: 0x0000040A|  
|zh-TW|Chinês (Taiwan)|Número de traços: 0x00000404|Bopomofo: 0x00030404|  
|zh-CN|Chinês (República Popular da China)|Pronúncia: 0x00000804|Número de traços: 0x00020804|  
|zh-HK|Chinês (RAE de Hong Kong)|Número de traços: 0x00000c04|Número de traços: 0x00020c04|  
|zh-SG|Chinês (Cingapura)|Pronúncia: 0x00001004|Número de traços: 0x00021004|  
|zh-MO|Chinês (RAE de MACAU)|Pronúncia: 0x00001404|Número de traços: 0x00021404|  
|ja-JP|Japonês (Japão)|Padrão: 0x00000411|Unicode: 0x00010411|  
|ko-KR|Coreano (Coreia)|Padrão: 0x00000412|Coreano Xwansung - Unicode: 0x00010412|  
|de-DE|Alemão (Alemanha)|Dicionário: 0x00000407|Classificação de catálogo telefônico DIN: 0x00010407|  
|hu-HU|Húngaro (Hungria)|Padrão: 0x0000040e|Classificação técnica: 0x0001040e|  
|GE Ka|Georgiano (Geórgia)|Tradicional: 0x00000437|Moderno: 0x00010437|  
  
<a name="Windows"></a>   
## <a name="the-current-culture-and-uwp-apps"></a>A cultura atual e os aplicativos UWP  
 Em aplicativos do Windows UWP (plataforma Universal), o <xref:System.Globalization.CultureInfo.CurrentCulture%2A> e <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriedades são de leitura-gravação apenas em aplicativos do .NET Framework e o .NET Core. No entanto, os aplicativos UWP reconhecem uma única cultura. O <xref:System.Globalization.CultureInfo.CurrentCulture%2A> e <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriedades são mapeados para o primeiro valor de [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) coleção.  

Em aplicativos do .NET Framework e o .NET Core, a cultura atual é uma configuração por thread e o <xref:System.Globalization.CultureInfo.CurrentCulture%2A> e <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriedades refletem a cultura e cultura da interface do usuário do thread atual. Em aplicativos UWP, a cultura atual é mapeada para o [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) coleção, que é uma configuração global. Definindo o <xref:System.Globalization.CultureInfo.CurrentCulture%2A> ou <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> a cultura do aplicativo inteiro de alterações de propriedade; cultura não pode ser definida em uma base por thread.
  
## Examples  
 O exemplo a seguir mostra como criar um <xref:System.Globalization.CultureInfo> objeto para Espanhol (Espanha) com a classificação internacional e outro <xref:System.Globalization.CultureInfo> objeto com a classificação tradicional.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
    <altmember cref="T:System.Globalization.RegionInfo" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Globalization.CultureInfo" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(int culture);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="culture">Um identificador <see cref="T:System.Globalization.CultureInfo" /> predefinido, a propriedade <see cref="P:System.Globalization.CultureInfo.LCID" /> de um objeto <see cref="T:System.Globalization.CultureInfo" /> existente ou identificador de cultura somente do Windows.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Globalization.CultureInfo" /> com base na cultura especificada pelo identificador de cultura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de cultura predefinidos são listados no [suporte ao idioma nacional (NLS) API referência](http://go.microsoft.com/fwlink/?LinkId=200048) no Go Global Developer Center.  
  
 Na maioria dos casos, o `culture` parâmetro é mapeado para o identificador de localidade de suporte de idioma nacional (NLS) correspondente. O valor da `culture` parâmetro torna-se o valor da <xref:System.Globalization.CultureInfo.LCID%2A> propriedade do novo <xref:System.Globalization.CultureInfo>.  
  
 É recomendável que você chame o construtor de nome de localidade <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>, como nomes de localidades são preferível LCIDs. Para localidades personalizadas, é necessário um nome de localidade.  
  
 O usuário pode optar por substituir alguns dos valores associados com a cultura atual do Windows por meio de parte de opções regionais e de idioma do painel de controle. Por exemplo, o usuário pode escolher para exibir a data em um formato diferente ou usar uma moeda diferente do padrão para a cultura. Se o identificador de cultura especificado corresponde ao identificador de cultura da cultura atual do Windows, este construtor cria um <xref:System.Globalization.CultureInfo> que usa essas substituições, inclusive configurações de usuário para as propriedades do <xref:System.Globalization.DateTimeFormatInfo> instância retornada pelo <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriedade e as propriedades do <xref:System.Globalization.NumberFormatInfo> instância retornada pelo <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade. Se as configurações do usuário são incompatíveis com a cultura associada com o <xref:System.Globalization.CultureInfo> (por exemplo, se o calendário selecionado não é um do <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>) os resultados dos métodos e os valores das propriedades são indefinidos.  
  
 Se o identificador de cultura especificada não coincide com o identificador da cultura atual do Windows, este construtor cria um <xref:System.Globalization.CultureInfo> que usa os valores padrão para a cultura especificada.  
  
 O <xref:System.Globalization.CultureInfo.UseUserOverride%2A> propriedade é sempre definida como `true`.  
  
 Por exemplo, suponha que árabe (Arábia Saudita) é a cultura atual do Windows e o usuário alterou o calendário de islâmico para gregoriano.  
  
-   Com `CultureInfo("0x0401")` (ar-SA do nome de cultura), <xref:System.Globalization.CultureInfo.Calendar%2A> é definido como <xref:System.Globalization.GregorianCalendar> (que é a configuração do usuário) e <xref:System.Globalization.CultureInfo.UseUserOverride%2A> é definido como `true`.  
  
-   Com `CultureInfo("0x041E")` (th-Ésimo de nome de cultura), <xref:System.Globalization.CultureInfo.Calendar%2A> é definido como <xref:System.Globalization.ThaiBuddhistCalendar> (que é o calendário padrão para th-TH) e <xref:System.Globalization.CultureInfo.UseUserOverride%2A> é definido como `true`.  
  
 Para culturas que usam o euro, o .NET Framework e o Windows XP definem a moeda padrão como euro. No entanto, versões mais antigas do Windows não. Portanto, se o usuário de uma versão mais antiga do Windows não alterou a configuração de moeda por meio de parte de opções regionais e de idioma do painel de controle, a moeda pode ser incorretova. Para usar a configuração padrão do .NET Framework para a moeda, o aplicativo deve usar um <xref:System.Globalization.CultureInfo> sobrecarga de construtor que aceita um `useUserOverride` parâmetro e defini-lo como `false`.  
  
> [!NOTE]
>  Para versões anteriores compatibilidade, uma cultura construído usando um `culture` parâmetro 0x0004 ou 0x7c04 terá um <xref:System.Globalization.CultureInfo.Name%2A> propriedade zh-CHS ou zh-CHT, respectivamente. Em vez disso, você deve preferir para construir a cultura usando os nomes de cultura padrão atual do zh-Hans ou zh-Hant, a menos que você tenha um motivo para usar os nomes antigos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="culture" /> é menor que zero.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="culture" /> não é um identificador de cultura válido. Para obter mais informações, consulte a seção Observações para chamadores.</exception>
        <block subset="none" type="usage">
          <para>O [! INCLUDE[net_v35_long](~/Includes/NET-v35-Long-MD.MD)] e versões anteriores lançam um <see cref="T:System.ArgumentException" /> se <paramref name="culture" /> não é um identificador de cultura válida. Começando com a [! INCLUDE[net_v40_long](~/Includes/NET-v40-Long-MD.MD)] este construtor lança um <see cref="T:System.Globalization.CultureNotFoundException" />. Aplicativos que são executados sob a partir de [! INCLUDE[net_v40_long](~/Includes/NET-v40-Long-MD.MD)] ou posterior no Windows 7 ou posterior, o método tenta recuperar um <see cref="T:System.Globalization.CultureInfo" /> objeto cujo identificador é <paramref name="culture" /> do sistema operacional; se o sistema operacional não oferece suporte para aquela cultura , o método gera uma <see cref="T:System.Globalization.CultureNotFoundException" /> exceção.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(System::String ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Um nome de <see cref="T:System.Globalization.CultureInfo" /> predefinido, <see cref="P:System.Globalization.CultureInfo.Name" /> de um <see cref="T:System.Globalization.CultureInfo" /> existente, ou o nome da cultura somente do Windows. <c>name</c> não diferencia maiúsculas de minúsculas.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Globalization.CultureInfo" /> com base na cultura especificada por nome.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter uma lista de nomes de cultura predefinidos, consulte o [suporte ao idioma nacional (NLS) API referência](http://go.microsoft.com/fwlink/?LinkId=200048) no Go Global Developer Center. Além disso, começando com o Windows 10, `name` pode ser qualquer marca de linguagem BCP-47 válida.  
  
 Se `name` é <xref:System.String.Empty?displayProperty=nameWithType>, o construtor cria uma instância da cultura invariável; isso é equivalente ao recuperar o valor da <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriedade.  
  
 O usuário pode optar por substituir alguns dos valores associados com a cultura atual do Windows por meio de parte de opções regionais e de idioma do painel de controle. Por exemplo, o usuário pode escolher para exibir a data em um formato diferente ou usar uma moeda diferente do padrão para a cultura. Se o identificador de cultura associado `name` corresponde ao identificador de cultura da cultura atual do Windows, este construtor cria um <xref:System.Globalization.CultureInfo> que usa essas substituições, incluindo as configurações de usuário para as propriedades do objeto o <xref:System.Globalization.DateTimeFormatInfo> instância retornada pelo <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriedade e as propriedades do <xref:System.Globalization.NumberFormatInfo> instância retornada pelo <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade. Se as configurações do usuário são incompatíveis com a cultura associada com o <xref:System.Globalization.CultureInfo>, por exemplo, se o calendário selecionado não é um do <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, os resultados dos métodos e os valores das propriedades são indefinidos.  
  
 Se o identificador de cultura associado `name` não corresponder o identificador de cultura da cultura atual do Windows, este construtor cria um <xref:System.Globalization.CultureInfo> objeto que usa os valores padrão para a cultura especificada.  
  
 O <xref:System.Globalization.CultureInfo.UseUserOverride%2A> propriedade é sempre definida como `true`.  
  
 Por exemplo, suponha que árabe (Arábia Saudita) é a cultura atual do Windows e o usuário alterou o calendário do islâmico para gregoriano.  
  
-   Com `CultureInfo("ar-SA")`, <xref:System.Globalization.CultureInfo.Calendar%2A> é definido como <xref:System.Globalization.GregorianCalendar> (que é a configuração do usuário) e <xref:System.Globalization.CultureInfo.UseUserOverride%2A> é definido como `true`.  
  
-   Com `CultureInfo("th-TH")`, <xref:System.Globalization.CultureInfo.Calendar%2A> é definido como <xref:System.Globalization.ThaiBuddhistCalendar> (que é o calendário padrão para th-TH) e <xref:System.Globalization.CultureInfo.UseUserOverride%2A> é definido como `true`.  
  
 O <xref:System.Globalization.CultureInfo.LCID%2A> propriedade do novo <xref:System.Globalization.CultureInfo> é definido como o identificador de cultura associado com o nome especificado.  
  
 Para culturas que usam o euro, o .NET Framework e o Windows XP definem a moeda padrão como euro. No entanto, versões mais antigas do Windows não fazem isso. Portanto, se o usuário de uma versão mais antiga do Windows não alterou a configuração de moeda por meio de parte de opções regionais e de idioma do painel de controle, a moeda pode ser incorretova. Para usar a configuração padrão do .NET Framework para a moeda, o aplicativo deve usar um <xref:System.Globalization.CultureInfo> sobrecarga de construtor que aceita um `useUserOverride` parâmetro e defini-lo como `false`.  
  
   
  
## Examples  
 O exemplo a seguir recupera a cultura atual. Se ele for diferente da cultura Francês (França), ele chama o <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> construtor para instanciar um <xref:System.Globalization.CultureInfo> objeto que representa a cultura Francês (França) e torna a cultura do thread atual. Caso contrário, ele cria um <xref:System.Globalization.CultureInfo> objeto que representa a cultura Francês (Luxemburgo) e torna a cultura atual.  
  
 [!code-csharp[System.Globalization.CultureInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Change1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Change1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> é nulo.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> não é um nome de cultura válido. Para obter mais informações, consulte a seção Observações para Chamadores.</exception>
        <block subset="none" type="usage">
          <para>O [! INCLUDE[net_v35_long](~/Includes/NET-v35-Long-MD.MD)] e versões anteriores lançam um <see cref="T:System.ArgumentException" /> se <paramref name="name" /> não é um nome de cultura válido. Começando com a [! INCLUDE[net_v40_long](~/Includes/NET-v40-Long-MD.MD)] este construtor lança um <see cref="T:System.Globalization.CultureNotFoundException" />. Aplicativos que são executados sob a partir de [! INCLUDE[net_v40_long](~/Includes/NET-v40-Long-MD.MD)] ou posterior no Windows 7 ou posterior, o método tenta recuperar um <see cref="T:System.Globalization.CultureInfo" /> objeto cujo identificador é <paramref name="name" /> do sistema operacional; se o sistema operacional não oferece suporte para aquela cultura e se <paramref name="name" /> não é o nome de uma cultura suplementar ou de substituição, a método gera uma <see cref="T:System.Globalization.CultureNotFoundException" /> exceção.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (int culture, bool useUserOverride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 culture, bool useUserOverride) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As Integer, useUserOverride As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(int culture, bool useUserOverride);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
        <Parameter Name="useUserOverride" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="culture">Um identificador <see cref="T:System.Globalization.CultureInfo" /> predefinido, a propriedade <see cref="P:System.Globalization.CultureInfo.LCID" /> de um objeto <see cref="T:System.Globalization.CultureInfo" /> existente ou identificador de cultura somente do Windows.</param>
        <param name="useUserOverride">Um valor booliano que indica se é necessário usar as configurações de cultura selecionadas pelo usuário (<see langword="true" />) ou as configurações de cultura padrão (<see langword="false" />).</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Globalization.CultureInfo" /> com base na cultura especificada pelo identificador de cultura e no booliano que especifica se é necessário usar as configurações de cultura do selecionadas pelo usuário do sistema.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de cultura predefinidos são listados no [suporte ao idioma nacional (NLS) API referência](http://go.microsoft.com/fwlink/?LinkId=200048) no Go Global Developer Center.  
  
 Na maioria dos casos, o `culture` parâmetro é mapeado para o identificador de localidade de suporte de idioma nacional (NLS) correspondente. O valor da `culture` parâmetro torna-se o valor da <xref:System.Globalization.CultureInfo.LCID%2A> propriedade do novo <xref:System.Globalization.CultureInfo>.  
  
 É recomendável que você chame o construtor de nome de localidade <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>, como nomes de localidades são preferível LCIDs. Para localidades personalizadas, é necessário um nome de localidade.  
  
 O usuário pode optar por substituir alguns dos valores associados com a cultura atual do Windows por meio de parte de opções regionais e de idioma do painel de controle. Por exemplo, o usuário pode escolher para exibir a data em um formato diferente ou usar uma moeda diferente do padrão para a cultura.  
  
 Aplicativos normalmente não devem permitir substituições do usuário. Observe que a desabilitação de substituições não é garantia de estabilidade de dados; Consulte a postagem do blog [dados de cultura não devem ser considerados estáveis (exceto invariável)](http://go.microsoft.com/fwlink/?LinkId=156850).  
  
 Se o <xref:System.Globalization.CultureInfo.UseUserOverride%2A> está definida como `true` e o identificador de cultura especificado corresponde ao identificador de cultura atual do Windows, este construtor cria um <xref:System.Globalization.CultureInfo> que usa essas substituições, inclusive configurações de usuário para as propriedades do <xref:System.Globalization.DateTimeFormatInfo> instância retornada pelo <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriedade e as propriedades do <xref:System.Globalization.NumberFormatInfo> instância retornada pelo <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade. Se as configurações do usuário são incompatíveis com a cultura associada com o <xref:System.Globalization.CultureInfo>, por exemplo, se o calendário selecionado não é um do <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, os resultados dos métodos e os valores das propriedades são indefinidos.  
  
 Caso contrário, este construtor cria um <xref:System.Globalization.CultureInfo> que usa os valores padrão para a cultura especificada.  
  
 O valor da `useUserOverride` parâmetro se tornará o valor de <xref:System.Globalization.CultureInfo.UseUserOverride%2A> propriedade.  
  
 Por exemplo, suponha que árabe (Arábia Saudita) é a cultura atual do Windows e o usuário alterou o calendário de islâmico para gregoriano.  
  
-   Com `CultureInfo("0x0401", true)` (ar-SA do nome de cultura), <xref:System.Globalization.CultureInfo.Calendar%2A> é definido como <xref:System.Globalization.GregorianCalendar> (que é a configuração do usuário) e <xref:System.Globalization.CultureInfo.UseUserOverride%2A> é definido como `true`.  
  
-   Com `CultureInfo("0x0401", false)` (ar-SA do nome de cultura), <xref:System.Globalization.CultureInfo.Calendar%2A> é definido como <xref:System.Globalization.HijriCalendar> (que é o calendário padrão para ar-SA) e <xref:System.Globalization.CultureInfo.UseUserOverride%2A> é definido como `false`.  
  
-   Com `CultureInfo("0x041E", true)` (th-Ésimo de nome de cultura), <xref:System.Globalization.CultureInfo.Calendar%2A> é definido como <xref:System.Globalization.ThaiBuddhistCalendar> (que é o calendário padrão para th-TH) e <xref:System.Globalization.CultureInfo.UseUserOverride%2A> é definido como `true`.  
  
-   Com `CultureInfo("0x041E", false)` (th-Ésimo de nome de cultura), <xref:System.Globalization.CultureInfo.Calendar%2A> é definido como <xref:System.Globalization.ThaiBuddhistCalendar> (que é o calendário padrão para th-TH) e <xref:System.Globalization.CultureInfo.UseUserOverride%2A> é definido como `false`.  
  
 Para culturas que usam o euro, o .NET Framework e o Windows XP definem a moeda padrão como euro. No entanto, versões mais antigas do Windows não. Portanto, se o usuário de uma versão mais antiga do Windows não alterou a configuração de moeda por meio de parte de opções regionais e de idioma do painel de controle, a moeda pode ser incorretova. Para usar a configuração padrão do .NET Framework para a moeda, o aplicativo deve definir o `useUserOverride` parâmetro `false`.  
  
> [!NOTE]
>  Para versões anteriores compatibilidade, uma cultura construído usando um `culture` parâmetro 0x0004 ou 0x7c04 terá um <xref:System.Globalization.CultureInfo.Name%2A> propriedade zh-CHS ou zh-CHT, respectivamente. Em vez disso, você deve preferir para construir a cultura usando os nomes de cultura padrão atual do zh-Hans ou zh-Hant, a menos que você tenha um motivo para usar os nomes antigos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="culture" /> é menor que zero.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="culture" /> não é um identificador de cultura válido. Para obter mais informações, consulte a seção Observações para chamadores.</exception>
        <block subset="none" type="usage">
          <para>O [! INCLUDE[net_v35_long](~/Includes/NET-v35-Long-MD.MD)] e versões anteriores lançam um <see cref="T:System.ArgumentException" /> se <paramref name="culture" /> não é um identificador de cultura válida. Começando com a [! INCLUDE[net_v40_long](~/Includes/NET-v40-Long-MD.MD)] este construtor lança um <see cref="T:System.Globalization.CultureNotFoundException" />. Aplicativos que são executados sob a partir de [! INCLUDE[net_v40_long](~/Includes/NET-v40-Long-MD.MD)] ou posterior no Windows 7 ou posterior, o método tenta recuperar um <see cref="T:System.Globalization.CultureInfo" /> objeto cujo identificador é <paramref name="culture" /> do sistema operacional; se o sistema operacional não oferece suporte para aquela cultura , o método gera uma <see cref="T:System.Globalization.CultureNotFoundException" /> exceção.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (string name, bool useUserOverride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, bool useUserOverride) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, useUserOverride As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(System::String ^ name, bool useUserOverride);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="useUserOverride" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Um nome de <see cref="T:System.Globalization.CultureInfo" /> predefinido, <see cref="P:System.Globalization.CultureInfo.Name" /> de um <see cref="T:System.Globalization.CultureInfo" /> existente, ou o nome da cultura somente do Windows. <c>name</c> não diferencia maiúsculas de minúsculas.</param>
        <param name="useUserOverride">Um valor booliano que indica se é necessário usar as configurações de cultura selecionadas pelo usuário (<see langword="true" />) ou as configurações de cultura padrão (<see langword="false" />).</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Globalization.CultureInfo" /> com base na cultura especificada pelo nome e no booliano que especifica se é necessário usar as configurações de cultura do selecionadas pelo usuário do sistema.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter uma lista de nomes de cultura predefinidos, consulte o [suporte ao idioma nacional (NLS) API referência](http://go.microsoft.com/fwlink/?LinkId=200048) no Go Global Developer Center. Além disso, começando com o Windows 10, `name` pode ser qualquer marca de linguagem BCP-47 válida.  
  
 Se `name` é <xref:System.String.Empty?displayProperty=nameWithType>, o construtor cria uma instância da cultura invariável; isso é equivalente ao recuperar o valor da <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriedade.  
  
 O usuário pode optar por substituir alguns dos valores associados com a cultura atual do Windows por meio de parte de opções regionais e de idioma do painel de controle. Por exemplo, o usuário pode escolher para exibir a data em um formato diferente ou usar uma moeda diferente do padrão para a cultura.  
  
 Aplicativos normalmente não devem permitir substituições do usuário. Observe que a desabilitação de substituições não é garantia de estabilidade de dados; Consulte a postagem do blog [dados de cultura não devem ser considerados estáveis (exceto invariável)](http://go.microsoft.com/fwlink/?LinkId=156850).  
  
 Se o <xref:System.Globalization.CultureInfo.UseUserOverride%2A> está definida como `true` e o identificador de cultura associado com o nome de cultura especificado corresponde ao identificador de cultura da cultura atual do Windows, este construtor cria um <xref:System.Globalization.CultureInfo> que usa essas substituições, inclusive configurações de usuário para as propriedades do <xref:System.Globalization.DateTimeFormatInfo> instância retornada pelo <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriedade e as propriedades do <xref:System.Globalization.NumberFormatInfo> instância retornada pelo <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade. Se as configurações do usuário são incompatíveis com a cultura associada com o <xref:System.Globalization.CultureInfo>, por exemplo, se o calendário selecionado não é um do <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, os resultados dos métodos e os valores das propriedades são indefinidos.  
  
 Caso contrário, este construtor cria um <xref:System.Globalization.CultureInfo> que usa os valores padrão para a cultura especificada.  
  
 O valor da `useUserOverride` parâmetro se tornará o valor de <xref:System.Globalization.CultureInfo.UseUserOverride%2A> propriedade.  
  
 Por exemplo, suponha que árabe (Arábia Saudita) é a cultura atual do Windows e o usuário alterou o calendário do islâmico para gregoriano.  
  
-   Com `CultureInfo("ar-SA", true)`, <xref:System.Globalization.CultureInfo.Calendar%2A> é definido como <xref:System.Globalization.GregorianCalendar> (que é a configuração do usuário) e <xref:System.Globalization.CultureInfo.UseUserOverride%2A> é definido como `true`.  
  
-   Com `CultureInfo("ar-SA", false)`, <xref:System.Globalization.CultureInfo.Calendar%2A> é definido como <xref:System.Globalization.HijriCalendar> (que é o calendário padrão para ar-SA) e <xref:System.Globalization.CultureInfo.UseUserOverride%2A> é definido como `false`.  
  
-   Com `CultureInfo("th-TH", true)`, <xref:System.Globalization.CultureInfo.Calendar%2A> é definido como <xref:System.Globalization.ThaiBuddhistCalendar> (que é o calendário padrão para th-TH) e <xref:System.Globalization.CultureInfo.UseUserOverride%2A> é definido como `true`.  
  
-   Com `CultureInfo("th-TH", false)`, <xref:System.Globalization.CultureInfo.Calendar%2A> é definido como <xref:System.Globalization.ThaiBuddhistCalendar> (que é o calendário padrão para th-TH) e <xref:System.Globalization.CultureInfo.UseUserOverride%2A> é definido como `false`.  
  
 O <xref:System.Globalization.CultureInfo.LCID%2A> propriedade do novo <xref:System.Globalization.CultureInfo> é definido como o identificador de cultura associado com o nome especificado.  
  
 Para culturas que usam o euro, o .NET Framework e o Windows XP definem a moeda padrão como euro. No entanto, versões mais antigas do Windows não fazem isso. Portanto, se o usuário de uma versão mais antiga do Windows não alterou a configuração de moeda por meio de parte de opções regionais e de idioma do painel de controle, a moeda pode ser incorretova. Para usar a configuração padrão do .NET Framework para a moeda, o aplicativo deve definir o `useUserOverride` parâmetro `false`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> é nulo.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> não é um nome de cultura válido. Para obter mais informações, consulte a seção Observações para chamadores.</exception>
        <block subset="none" type="usage">
          <para>O [! INCLUDE[net_v35_long](~/Includes/NET-v35-Long-MD.MD)] e versões anteriores lançam um <see cref="T:System.ArgumentException" /> se <paramref name="name" /> não é um nome de cultura válido. Começando com a [! INCLUDE[net_v40_long](~/Includes/NET-v40-Long-MD.MD)] este construtor lança um <see cref="T:System.Globalization.CultureNotFoundException" />. Aplicativos que são executados sob a partir de [! INCLUDE[net_v40_long](~/Includes/NET-v40-Long-MD.MD)] ou posterior no Windows 7 ou posterior, o método tenta recuperar um <see cref="T:System.Globalization.CultureInfo" /> objeto cujo identificador é <paramref name="name" /> do sistema operacional; se o sistema operacional não oferece suporte para aquela cultura e se <paramref name="name" /> não é o nome de uma cultura suplementar ou de substituição, a método gera uma <see cref="T:System.Globalization.CultureNotFoundException" /> exceção.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Calendar">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.Calendar Calendar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar Calendar" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Calendar" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Calendar As Calendar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::Calendar ^ Calendar { System::Globalization::Calendar ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o calendário padrão usado pela cultura.</summary>
        <value>Um <see cref="T:System.Globalization.Calendar" /> que representa o calendário padrão usado pela cultura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O usuário pode optar por substituir alguns dos valores associados com a cultura atual do Windows por meio de parte de opções regionais e de idioma do painel de controle. Por exemplo, o usuário pode escolher para exibir a data em um formato diferente ou usar uma moeda diferente do padrão para a cultura.  
  
 Se <xref:System.Globalization.CultureInfo.UseUserOverride%2A> é `true` e a cultura especificada corresponde a cultura atual do Windows, o <xref:System.Globalization.CultureInfo> usa essas substituições, inclusive configurações de usuário para as propriedades do <xref:System.Globalization.DateTimeFormatInfo> instância retornada pelo <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriedade e as propriedades do <xref:System.Globalization.NumberFormatInfo> instância retornada pelo <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade. Se as configurações do usuário são incompatíveis com a cultura associada com o <xref:System.Globalization.CultureInfo>, por exemplo, se o calendário selecionado não é um do <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, os resultados dos métodos e os valores das propriedades são indefinidos.  
  
 Portanto, se <xref:System.Globalization.CultureInfo.UseUserOverride%2A> é `true`, o valor dessa propriedade pode ser diferente do padrão de calendário usado pela cultura.  
  
 Seu aplicativo altera o calendário usado por atual <xref:System.Globalization.CultureInfo> definindo o <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> propriedade <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, que é uma instância do <xref:System.Globalization.DateTimeFormatInfo> classe. O novo calendário deve ser um dos calendários listados em <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> também inclui outras propriedades que personalizar a formatação de data e hora associados a esse <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearCachedData();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Atualiza as informações relacionadas à cultura armazenadas em cache.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Informações, como os padrões de cultura e formato padrão é armazenado em cache na primeira vez que forem solicitados. Que informações podem alterar durante a vida do <xref:System.AppDomain>, por exemplo, quando o usuário modifica a parte de opções regionais e de idioma do painel de controle. No entanto, a <xref:System.Globalization.CultureInfo> classe não detecta automaticamente as alterações nas configurações do sistema.  
  
 O <xref:System.Globalization.CultureInfo.ClearCachedData%2A> método limpa o cache de <xref:System.Globalization.CultureInfo> objetos criados por <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> e atualiza as informações de <xref:System.Globalization.CultureInfo.CurrentCulture%2A>, <xref:System.Globalization.CultureInfo.CurrentUICulture%2A>, e <xref:System.Globalization.RegionInfo.CurrentRegion%2A> propriedades, com base nas configurações do sistema atual.  
  
 O <xref:System.Globalization.CultureInfo.ClearCachedData%2A> método não atualiza as informações de <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> propriedade threads existentes. No entanto, threads futuras terá qualquer novo <xref:System.Globalization.CultureInfo> valores de propriedade.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cria uma cópia das <see cref="T:System.Globalization.CultureInfo" /> atuais.</summary>
        <returns>Uma cópia das <see cref="T:System.Globalization.CultureInfo" /> atuais.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O clone é gravável mesmo que o original <xref:System.Globalization.CultureInfo> é somente leitura. Portanto, as propriedades do clone podem ser modificadas.  
  
 Uma cópia superficial de um objeto é uma cópia do objeto somente. Se o objeto contiver referências a outros objetos, a cópia superficial não cria cópias dos objetos referenciados. Ela se refere aos objetos originais em vez disso. Em contraste, uma cópia em profundidade de um objeto cria uma cópia do objeto e uma cópia de tudo direta ou indiretamente referenciado por esse objeto.  
  
 O <xref:System.Globalization.CultureInfo.Clone%2A> método cria uma cópia superficial aprimorada. Os objetos retornados pelo <xref:System.Globalization.CultureInfo.NumberFormat%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.TextInfo%2A>, e <xref:System.Globalization.CultureInfo.Calendar%2A> propriedades também serão copiadas. Consequentemente, o clonado <xref:System.Globalization.CultureInfo> objeto pode modificar suas propriedades copiadas sem afetar o original <xref:System.Globalization.CultureInfo> objeto.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra que CultureInfo.Clone também copia o <xref:System.Globalization.DateTimeFormatInfo> e <xref:System.Globalization.NumberFormatInfo> instâncias associadas a <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CompareInfo">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.CompareInfo CompareInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CompareInfo CompareInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CompareInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CompareInfo As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CompareInfo ^ CompareInfo { System::Globalization::CompareInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o <see cref="T:System.Globalization.CompareInfo" /> que define como comparar a cultura de cadeias de caracteres.</summary>
        <value>O <see cref="T:System.Globalization.CompareInfo" /> que define como comparar a cultura de cadeias de caracteres.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Globalization.CultureInfo.CompareInfo%2A> propriedade retorna um <xref:System.Globalization.CompareInfo> objeto que fornece informações específicas de cultura usadas em operações de comparação de classificação e a cadeia de caracteres sensíveis à cultura.  
  
 O usuário pode optar por substituir alguns dos valores associados com a cultura atual do Windows por meio de parte de opções regionais e de idioma do painel de controle. Por exemplo, o usuário pode escolher para exibir a data em um formato diferente ou usar uma moeda diferente do padrão para a cultura.  
  
 Se <xref:System.Globalization.CultureInfo.UseUserOverride%2A> é `true` e a cultura especificada corresponde a cultura atual do Windows, o <xref:System.Globalization.CultureInfo> usa essas substituições, inclusive configurações de usuário para as propriedades do <xref:System.Globalization.DateTimeFormatInfo> instância retornada pelo <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriedade e as propriedades do <xref:System.Globalization.NumberFormatInfo> instância retornada pelo <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade. Se as configurações do usuário são incompatíveis com a cultura associada com o <xref:System.Globalization.CultureInfo>, por exemplo, se o calendário selecionado não é um do <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, os resultados dos métodos e os valores das propriedades são indefinidos.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como criar um <xref:System.Globalization.CultureInfo> para Espanhol (Espanha) com a classificação internacional e outra <xref:System.Globalization.CultureInfo> com a classificação tradicional.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CompareInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateSpecificCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CreateSpecificCulture (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo CreateSpecificCulture(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateSpecificCulture (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ CreateSpecificCulture(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Um nome <see cref="T:System.Globalization.CultureInfo" /> predefinido ou o nome de um objeto <see cref="T:System.Globalization.CultureInfo" /> existente. <c>name</c> não diferencia maiúsculas de minúsculas.</param>
        <summary>Cria um <see cref="T:System.Globalization.CultureInfo" /> que representa a cultura específica associada ao nome especificado.</summary>
        <returns>Um objeto <see cref="T:System.Globalization.CultureInfo" /> que representa: a cultura invariável, se <paramref name="name" /> é uma cadeia de caracteres vazia ("").  -ou- A cultura específica associada a <paramref name="name" />, se <paramref name="name" /> for uma cultura neutra.  -ou- A cultura especificada por <paramref name="name" />, se <paramref name="name" /> já for uma cultura específica.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> método ajusta uma chamada para o <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> construtor.  
  
> [!NOTE]
>  Para obter uma lista de nomes de cultura predefinidos, consulte o [suporte ao idioma nacional (NLS) API referência](http://go.microsoft.com/fwlink/?LinkId=200048) no Go Global Developer Center. Além disso, começando com o Windows 10, `name` pode ser qualquer marca de linguagem BCP-47 válida.  
  
 Culturas são agrupadas em três conjuntos: a cultura invariável, as culturas neutras e culturas específicas. Para obter mais informações, consulte a descrição do <xref:System.Globalization.CultureInfo> classe.  
  
 Se o identificador de cultura da cultura específico retornado por esse método corresponde ao identificador de cultura da cultura atual do Windows, esse método cria um <xref:System.Globalization.CultureInfo> substituições de objeto que usa a cultura do Windows. As substituições incluem configurações de usuário para as propriedades do <xref:System.Globalization.DateTimeFormatInfo> objeto retornado pelo <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriedade e o <xref:System.Globalization.NumberFormatInfo> objeto retornado pelo <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade. Para instanciar um <xref:System.Globalization.CultureInfo> do objeto que padrão configurações de cultura em vez de substituições de usuário, chame o <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> construtor com um valor de `false` para o `useUserOverride` argumento.  
  
 Embora o <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> nome do método inclui o termo "Específica", lembre-se de que os dados de cultura podem ser alterados entre versões, ou devido a culturas personalizadas ou por causa de substituições do usuário. Use a cultura invariável ou formulários binários ou fixos para salvar dados.  
  
   
  
## Examples  
 O exemplo a seguir recupera uma matriz de <xref:System.Globalization.CultureInfo> objetos que representam as culturas neutras do <xref:System.Globalization.CultureInfo.GetCultures%2A> método e classifica a matriz. Quando ele é iterado os elementos na matriz, ele passa o nome de cada cultura neutra para o <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> método e exibe o nome de cultura específico retornado pelo método.  
  
> [!NOTE]
>  O exemplo usa os nomes de cultura zh-CHS e zh-CHT. No entanto, os aplicativos que direcione o Windows Vista e posterior devem usar zh-Hans em vez de zh-CHS e zh-Hant em vez de zh-CHT. zh-Hans e zh-Hant representam o padrão atual e devem ser usados, a menos que você tenha um motivo para usar os nomes antigos.  
>   
>  Observe também que os resultados do exemplo podem ser diferente em uma instalação do Windows o, em que a entrada de uma chinês (tradicional) cultura neutra (zh, zh-CHT ou zh-Hant) retornará zh-TW.  
  
 [!code-csharp[System.Globalization.CultureInfo.CreateSpecificCulture2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CreateSpecificCulture2/CS/createspecificculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.CreateSpecificCulture2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CreateSpecificCulture2/VB/createspecificculture2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> não é um nome de cultura válido.  -ou- A cultura especificada por <paramref name="name" /> não tem uma cultura específica associada a ela.</exception>
        <exception cref="T:System.NullReferenceException">
          <paramref name="name" /> é nulo.</exception>
        <block subset="none" type="usage">
          <para>O [! INCLUDE[net_v35_long](~/Includes/NET-v35-Long-MD.MD)] e versões anteriores lançam um <see cref="T:System.ArgumentException" /> se <paramref name="name" /> não é um nome de cultura válido. Começando com a [! INCLUDE[net_v40_long](~/Includes/NET-v40-Long-MD.MD)], este método lança um <see cref="T:System.Globalization.CultureNotFoundException" />.</para>
        </block>
        <altmember cref="Overload:System.Globalization.CultureInfo.#ctor" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
      </Docs>
    </Member>
    <Member MemberName="CultureTypes">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureTypes CultureTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CultureTypes CultureTypes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CultureTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CultureTypes As CultureTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureTypes CultureTypes { System::Globalization::CultureTypes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém os tipos de cultura que pertencem ao objeto <see cref="T:System.Globalization.CultureInfo" /> atual.</summary>
        <value>Uma combinação bit a bit de um ou mais valores <see cref="T:System.Globalization.CultureTypes" />. Nenhum valor padrão.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir demonstra o <xref:System.Globalization.CultureTypes> enumeração e <xref:System.Globalization.CultureInfo.CultureTypes%2A> propriedade.  
  
 [!code-cpp[system.globalization.cultureTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.globalization.cultureTypes/cpp/ct.cpp#1)]
 [!code-csharp[system.globalization.cultureTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureTypes/cs/ct.cs#1)]
 [!code-vb[system.globalization.cultureTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureTypes/vb/ct.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureTypes" />
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o objeto <see cref="T:System.Globalization.CultureInfo" /> que representa a cultura usada pelo thread atual.</summary>
        <value>Um objeto que representa a cultura usada pelo thread atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Globalization.CultureInfo> objeto retornado por essa propriedade e seus objetos associados determinar o formato padrão para datas, horas, números, valores de moeda, a ordenação de texto, convenções de maiusculas e minúsculas e comparações de cadeia de caracteres.  
  
 A cultura atual é uma propriedade de thread em execução, que é retornado pelo estático <xref:System.Threading.Thread.CurrentThread%2A?displayProperty=nameWithType> propriedade. O valor de <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriedade corresponde ao valor da <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> propriedade. Recuperar o valor da <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriedade é equivalente ao recuperar o <xref:System.Globalization.CultureInfo> objeto retornado pelo `Thread.CurrentThread.CurrentCulture` propriedade. Começando com o [!INCLUDE[net_v46](~/includes/net-v46-md.md)], definindo o valor da <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriedade também altera a cultura do thread atual.  
  
> [!NOTE]
>  O .NET Framework 4.5.2 e versões anteriores, o <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriedade é somente leitura;  ou seja, você pode recuperar o valor da propriedade, mas você não pode defini-lo. Para alterar a cultura atual, você deve atribuir o <xref:System.Globalization.CultureInfo> objeto que representa a cultura de novo para o `Thread.CurrentThread.CurrentCulture` propriedade. Começando com o [!INCLUDE[net_v46](~/includes/net-v46-md.md)], o <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriedade é leitura / gravação; você pode definir e recuperar o valor da propriedade. Se você definir o valor da propriedade um <xref:System.Globalization.CultureInfo> objeto que representa uma nova cultura, o valor da `Thread.CurrentThread.CurrentCulture` propriedade também será alterado.  
  
 Nesta seção:  
  
 [Como a cultura do Thread é determinada](#ThreadCulture)   
 [Obtendo a cultura atual](#Getting)   
 [Definir explicitamente a propriedade CurrentCulture](#ExplicitSetting)   
 [A cultura atual e substituições de usuário](#Overrides)   
 [Cultura e aplicativos do Windows](#WindowsAndCurr)  
  
<a name="ThreadCulture"></a>   
## <a name="how-a-threads-culture-is-determined"></a>Como a cultura de um thread é determinada  
 Quando um thread é iniciado, sua cultura inicialmente é determinada como segue:  
  
-   Recuperando a cultura que é especificada pelo <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> propriedade no domínio de aplicativo no qual o thread está em execução, se o valor da propriedade não é `null`.  
  
-   Se o thread é um thread do pool que está executando uma operação assíncrona com base em tarefa e o aplicativo é destinado a [!INCLUDE[net_v46](~/includes/net-v46-md.md)] ou uma versão posterior do .NET Framework, a cultura é determinada pela cultura do thread de chamada.  O exemplo a seguir altera a cultura atual para português (Brasil) e inicia seis tarefas, cada uma delas exibe sua ID de thread, sua ID da tarefa e a cultura atual. Cada uma das tarefas (e os threads) foi herdada a cultura do thread de chamada.  
  
     [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/Async1.cs#14)]
     [!code-vb[System.Globalization.CultureInfo.CurrentCulture#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/Async1.vb#14)]  
  
     Para obter mais informações, consulte a seção "Cultura e baseado em tarefas de operações assíncronas" o <xref:System.Globalization.CultureInfo> tópico.  
  
-   Chamando o Windows `GetUserDefaultLocaleName` função.  
  
 Observe que, se você definir uma cultura específica que é diferente da cultura do sistema instalado ou cultura preferencial do usuário e o aplicativo iniciar vários threads, a cultura atual desses threads será a cultura que é retornada pelo `GetUserDefaultLocaleName` funcionar, a menos que você atribuir uma cultura para o <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> propriedade no domínio de aplicativo no qual o thread está em execução.  
  
 Para obter mais informações sobre como a cultura de um segmento é determinada, consulte a seção "Cultura e threads" o <xref:System.Globalization.CultureInfo> página de referência.  
  
<a name="Getting"></a>   
## <a name="getting-the-current-culture"></a>Obtendo a cultura atual  
 O <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriedade é uma configuração por thread; ou seja, cada thread pode ter sua própria cultura. Você obtém a cultura do thread atual ao recuperar o valor da <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriedade, como o exemplo a seguir ilustra.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/Get1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/Get1.vb#5)]  
  
 Você também pode recuperar o valor de cultura do thread atual a partir de <xref:System.Threading.Thread.CurrentThread%2A?displayProperty=nameWithType> propriedade.  
  
<a name="ExplicitSetting"></a>   
## <a name="explicitly-setting-the-currentculture-property"></a>Definindo explicitamente a propriedade CurrentCulture  
 Começando com o [!INCLUDE[net_v46](~/includes/net-v46-md.md)], para alterar a cultura que é usada por um thread existente, você definir o <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriedade para a cultura de novo. Se você alterar a cultura do thread dessa forma, o que alterar explicitamente persiste se o thread de cruzar os limites de domínio de aplicativo. O exemplo a seguir altera a cultura do thread atual como holandês (Holanda). Ele também mostra que, quando o thread atual ultrapassar os limites de domínio de aplicativo, a cultura atual permanece alterada.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/changeculture11.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/changeculture11.vb#11)]  
  
> [!NOTE]
>  Alterar a cultura usando a <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriedade requer um <xref:System.Security.Permissions.SecurityPermission> permissão com o <xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> conjunto de valor. Manipular segmentos é perigoso devido ao estado de segurança associado com segmentos. Portanto, essa permissão deve ser fornecida apenas para o código confiável e, em seguida, somente quando necessário. Você não pode alterar a cultura do thread no código de confiança parcial.  
  
 Começando com o [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], você pode alterar explicitamente a cultura do thread atual para uma cultura específica (por exemplo, francês (Canadá)) ou uma cultura neutra (como francês). Quando um <xref:System.Globalization.CultureInfo> objeto representa uma cultura neutra, os valores de <xref:System.Globalization.CultureInfo> propriedades como <xref:System.Globalization.CultureInfo.Calendar%2A>, <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.NumberFormat%2A>, e <xref:System.Globalization.CultureInfo.TextInfo%2A> refletir a cultura específica que está associada com a cultura neutra. Por exemplo, a cultura dominante para a cultura neutra inglês é o inglês (Estados Unidos); a cultura dominante para a cultura alemã é alemão (Alemanha). O exemplo a seguir ilustra a diferença na formatação quando a cultura atual está definida para uma cultura específica, francês (Canadá) e uma cultura neutra, francês.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/specific12.cs#12)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/specific12.vb#12)]  
  
 Você também pode usar o <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriedade juntamente com o <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType> propriedade para definir o <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriedade de um aplicativo ASP.NET para o usuário preferencial da cultura, como mostra o exemplo a seguir.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/aspculture13.cs#13)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/aspculture13.vb#13)]  
  
<a name="Overrides"></a>   
## <a name="the-current-culture-and-user-overrides"></a>A cultura atual e as substituições de usuário  
 Windows permite que os usuários substituir os valores de propriedade padrão de <xref:System.Globalization.CultureInfo> objeto e seus objetos associados usando **opções regionais e idiomas** no painel de controle. O <xref:System.Globalization.CultureInfo> objeto retornado pelo <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriedade reflete essas usuário substitui nos seguintes casos:  
  
-   Se a cultura do thread atual é definida implicitamente pelo Windows `GetUserDefaultLocaleName` função.  
  
-   Se a cultura do thread atual definida pelo <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> propriedade corresponde à cultura atual do sistema Windows.  
  
-   Se a cultura do thread atual é definida explicitamente como uma cultura retornada pelo <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> método e que a cultura corresponde a cultura atual do sistema Windows.  
  
-   Se a cultura do thread atual está definida explicitamente como uma cultura instanciada pelo <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> construtor e que a cultura corresponde a cultura atual do sistema Windows.  
  
 Em alguns casos, particularmente para aplicativos de servidor, definir a cultura atual como uma <xref:System.Globalization.CultureInfo> objeto que reflete as substituições de usuário pode ser indesejável. Em vez disso, você pode definir a cultura do thread atual para um <xref:System.Globalization.CultureInfo> substituições de objeto que não reflete o usuário das seguintes maneiras:  
  
-   Chamando o <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> construtor com um valor de `false` para o `useUserOverride` argumento.  
  
-   Chamando o <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> método, que retorna um cache somente leitura <xref:System.Globalization.CultureInfo> objeto.  
  
<a name="WindowsAndCurr"></a>   
## <a name="the-current-culture-and-uwp-apps"></a>A cultura atual e os aplicativos UWP  
 Em aplicativos do Windows UWP (plataforma Universal), o <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriedade é leitura / gravação, exatamente como ele está em aplicativos do .NET Framework e o .NET Core; você pode usá-lo para obter e definir a cultura atual. No entanto, os aplicativos UWP não fazem distinção entre a cultura atual e a cultura de interface do usuário atual. O <xref:System.Globalization.CultureInfo.CurrentCulture%2A> e <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriedades são mapeados para o primeiro valor de [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) coleção.  

Em aplicativos do .NET Framework e o .NET Core, a cultura atual é uma configuração por thread e o <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriedade reflete a cultura do thread atual. Em aplicativos UWP, a cultura atual é mapeada para o [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) propriedade, que é uma configuração global. Definindo o <xref:System.Globalization.CultureInfo.CurrentCulture%2A> a cultura do aplicativo inteiro de alterações de propriedade; cultura não pode ser definida em uma base por thread.
  
## Examples  
 O exemplo a seguir demonstra como alterar o <xref:System.Globalization.CultureInfo.CurrentCulture%2A> e <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> do thread atual.  
  
 [!code-cpp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CPP/currentculture.cpp#11)]
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CS/currentculture.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/VB/currentculture.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">A propriedade é definida como <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para definir a cultura atual. Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></permission>
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
        <altmember cref="T:System.Security.Permissions.SecurityPermission" />
        <altmember cref="T:System.Security.Permissions.SecurityPermissionAttribute" />
      </Docs>
    </Member>
    <Member MemberName="CurrentUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o objeto <see cref="T:System.Globalization.CultureInfo" /> que representa a cultura de interface do usuário atual usada pelo Gerenciador de Recursos para procurar recursos específicos da cultura no tempo de execução.</summary>
        <value>A cultura usada pelo Gerenciador de Recursos para pesquisar recursos específicos da cultura no tempo de execução.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cultura de interface do usuário atual é uma propriedade por thread. Ou seja, cada thread tem seu próprio cultura de interface do usuário atual. Esta propriedade é equivalente à recuperação ou, começando com o [!INCLUDE[net_v46](~/includes/net-v46-md.md)], a definição de <xref:System.Globalization.CultureInfo> objeto atribuído ao `System.Threading.Thread.CurrentThread.CurrentUICulture` propriedade. Quando um thread é iniciado, a cultura de interface do usuário é inicialmente determinada da seguinte maneira:  
  
-   Recuperando a cultura que é especificada pelo <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedade no domínio de aplicativo no qual o thread está em execução, se o valor da propriedade não é `null`.  
  
-   Se o thread é um thread do pool que está executando uma operação assíncrona com base em tarefa e o aplicativo é destinado a [!INCLUDE[net_v46](~/includes/net-v46-md.md)] ou uma versão posterior do .NET Framework, sua cultura de interface do usuário é determinada pela cultura da interface do usuário do thread de chamada.  O exemplo a seguir altera a cultura de interface do usuário atual para português (Brasil) e inicia seis tarefas, cada uma delas exibe sua ID de thread, sua ID da tarefa e a cultura de interface do usuário atual. Cada uma das tarefas (e os threads) foi herdada a cultura de interface do usuário do thread de chamada.  
  
     [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/Async1.cs#14)]
     [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/Async1.vb#14)]  
  
     Para obter mais informações, consulte a seção "Cultura e baseado em tarefas de operações assíncronas" o <xref:System.Globalization.CultureInfo> tópico.  
  
-   Chamando o Windows `GetUserDefaultUILanguage` função.  
  
> [!NOTE]
>  No [!INCLUDE[Compact](~/includes/compact-md.md)], o <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriedade é somente leitura. A cultura de interface do usuário atual é determinada pelas configurações regionais do sistema e não pode ser alterada de forma programática.  
  
 Começando com o [!INCLUDE[net_v46](~/includes/net-v46-md.md)]alterar a cultura de interface de usuário usado por um thread, defina o <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> propriedade para a cultura de novo. Se você alterar a cultura de interface do usuário do thread dessa forma, o que alterar explicitamente persiste se o thread de cruzar os limites de domínio de aplicativo.  
  
> [!NOTE]
>  O .NET Framework 4.5.2 e versões anteriores, o <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriedade é somente leitura;  ou seja, você pode recuperar o valor da propriedade, mas você não pode defini-lo. Para alterar a cultura de interface do usuário atual, você deve atribuir o <xref:System.Globalization.CultureInfo> objeto que representa a cultura de interface de usuário nova para o `Thread.CurrentThread.CurrentUICulture` propriedade. Começando com o [!INCLUDE[net_v46](~/includes/net-v46-md.md)], o <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propriedade é leitura / gravação; você pode definir e recuperar o valor da propriedade. Se você definir o valor da propriedade um <xref:System.Globalization.CultureInfo> objeto que representa uma nova cultura, o valor da `Thread.CurrentThread.CurrentCulture` propriedade também será alterado.  
  
 Nesta seção:  
  
 [Obtendo a cultura de interface do usuário atual](#Getting)   
 [Definir explicitamente a cultura de interface do usuário atual](#Explicit)   
 [Definindo implicitamente a cultura de interface do usuário atual](#Implicit)   
 [Considerações sobre segurança](#Security)   
 [Os aplicativos de Windows e de cultura de interface do usuário atuais](#WindowsAndCurrUI)  
  
<a name="Getting"></a>   
## <a name="getting-the-current-ui-culture"></a>Obtendo a cultura de interface do usuário atual  
 O <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propriedade é uma configuração por thread; ou seja, cada thread pode ter sua própria cultura de interface do usuário. Você obtém a cultura de interface do usuário do thread atual ao recuperar o valor da <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propriedade, como o exemplo a seguir ilustra.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/Get1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/Get1.vb#5)]  
  
 Você também pode recuperar o valor de cultura de interface do usuário do thread atual do <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> propriedade.  
  
<a name="Explicit"></a>   
## <a name="explicitly-setting-the-current-ui-culture"></a>Definindo explicitamente a cultura da interface do usuário atual  
 Começando com o [!INCLUDE[net_v46](~/includes/net-v46-md.md)], você pode alterar a cultura de interface do usuário atual, atribuindo um <xref:System.Globalization.CultureInfo> objeto que representa a cultura de novo para o <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propriedade. A cultura de interface do usuário atual pode ser definida para uma cultura específica (por exemplo, en-US ou de-DE) ou para uma cultura neutra (como en ou de). O exemplo a seguir define a cultura de interface do usuário atual para fr-FR ou francês (França).  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/currentuiculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/currentuiculture1.vb#1)]  
  
 Em um aplicativo multithread, você pode definir explicitamente a cultura de interface do usuário de qualquer thread, atribuindo um <xref:System.Globalization.CultureInfo> objeto que representa essa cultura do thread <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> propriedade. Se o thread cuja cultura que você deseja definir o thread atual, você pode atribuir a nova cultura para o <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propriedade. Quando a cultura de interface do usuário de um segmento é definida explicitamente, que o thread retém a mesma cultura, mesmo se ele ultrapassar os limites de domínio de aplicativo e executa código em outro domínio de aplicativo.  
  
<a name="Implicit"></a>   
## <a name="implicitly-setting-the-current-ui-culture"></a>Definindo implicitamente a cultura da interface do usuário atual  
 Quando um thread, incluindo o thread principal do aplicativo, é primeiro criado, por padrão, que a cultura de interface do usuário atual é definida da seguinte maneira:  
  
-   Usando a cultura definida pelo <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedade para o domínio de aplicativo atual se o valor da propriedade não é `null`.  
  
-   Usando a cultura do padrão do sistema. Em sistemas que usam o sistema operacional Windows, o common language runtime chama o Windows `GetUserDefaultUILanguage` função para definir a cultura de interface do usuário atual. `GetUserDefaultUILanguage` Retorna a cultura de interface do usuário padrão definida pelo usuário. Se o usuário não tiver definido um idioma da interface do usuário padrão, ele retorna a cultura originalmente instalada no sistema.  
  
 Se o thread de cruza os limites para o aplicativo e executa código em outro domínio de aplicativo, a cultura é determinada da mesma maneira que um thread recém-criado.  
  
 Observe que, se você definir uma cultura de interface do usuário específica que é diferente da cultura da interface do sistema instalado ou cultura de interface do usuário preferencial do usuário e o aplicativo iniciar vários threads, a cultura de interface do usuário atual desses threads será a cultura retornada pelo `GetUserDefaultUILanguage` funcionar, a menos que você atribuir uma cultura para o <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedade no domínio de aplicativo no qual o thread está em execução.  
  
<a name="Security"></a>   
## <a name="security-considerations"></a>Considerações sobre segurança  
 Alterar a cultura do thread atual requer um <xref:System.Security.Permissions.SecurityPermission> permissão com o <xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> conjunto de valor.  
  
> [!CAUTION]
>  Manipular segmentos é perigoso devido ao estado de segurança associado com segmentos. Portanto, essa permissão deve ser fornecida apenas para o código confiável e, em seguida, somente quando necessário. Você não pode alterar a cultura do thread no código de confiança parcial.  
  
<a name="WindowsAndCurrUI"></a>   
## <a name="the-current-ui-culture-and-uwp-apps"></a>A cultura de interface do usuário atual e os aplicativos UWP  
 
Em aplicativos do Windows UWP (plataforma Universal), o <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriedade é leitura / gravação, exatamente como ele está em aplicativos do .NET Framework e o .NET Core; você pode usá-lo para obter e definir a cultura atual. No entanto, os aplicativos UWP não fazem distinção entre a cultura atual e a cultura de interface do usuário atual. O <xref:System.Globalization.CultureInfo.CurrentCulture%2A> e <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriedades são mapeados para o primeiro valor de [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) coleção.

Em aplicativos do .NET Framework e o .NET Core, a cultura de interface do usuário atual é uma configuração por thread e o <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriedade reflete a cultura de interface do usuário do thread atual. Em aplicativos UWP, a cultura atual é mapeada para o [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) propriedade, que é uma configuração global. Definindo o <xref:System.Globalization.CultureInfo.CurrentCulture%2A> a cultura do aplicativo inteiro de alterações de propriedade; cultura não pode ser definida em uma base por thread.    
  
## Examples  
 O exemplo de código a seguir demonstra como alterar o <xref:System.Globalization.CultureInfo.CurrentCulture%2A> e <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> do thread atual.  
  
 [!code-cpp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CPP/currentculture.cpp#11)]
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CS/currentculture.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/VB/currentculture.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">A propriedade é definida como <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">A propriedade é definida como um nome de cultura não pode ser usado para localizar um arquivo de recurso. Nomes de arquivos de recursos podem incluir somente letras, números, hifens ou sublinhados.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para definir a cultura de interface do usuário atual. Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></permission>
        <altmember cref="T:System.Resources.ResourceManager" />
        <altmember cref="P:System.Threading.Thread.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      </Docs>
    </Member>
    <Member MemberName="DateTimeFormat">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.DateTimeFormatInfo DateTimeFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.DateTimeFormatInfo DateTimeFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DateTimeFormat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DateTimeFormat As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::DateTimeFormatInfo ^ DateTimeFormat { System::Globalization::DateTimeFormatInfo ^ get(); void set(System::Globalization::DateTimeFormatInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um <see cref="T:System.Globalization.DateTimeFormatInfo" /> que define o formato culturalmente apropriado de exibição de datas e horas.</summary>
        <value>Um <see cref="T:System.Globalization.DateTimeFormatInfo" /> que define o formato culturalmente apropriado de exibição de datas e horas.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overrides"></a>Substituições  
 O usuário pode optar por substituir alguns dos valores associados com a cultura atual do Windows por meio de parte de opções regionais e de idioma do painel de controle. Por exemplo, o usuário pode escolher para exibir a data em um formato diferente ou usar uma moeda diferente do padrão para a cultura.  
  
 Se <xref:System.Globalization.CultureInfo.UseUserOverride%2A> é `true` e a cultura especificada corresponde a cultura atual do Windows, o <xref:System.Globalization.CultureInfo> usa essas substituições, inclusive configurações de usuário para as propriedades do <xref:System.Globalization.DateTimeFormatInfo> instância retornada pelo <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriedade e as propriedades do <xref:System.Globalization.NumberFormatInfo> instância retornada pelo <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade. Se as configurações do usuário são incompatíveis com a cultura associada com o <xref:System.Globalization.CultureInfo>, por exemplo, se o calendário selecionado não é um do <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, os resultados dos métodos e os valores das propriedades são indefinidos.  
  
 O valor de <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriedade e o <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade não será calculada até que seu aplicativo acessa a propriedade. Se o usuário pode alterar a cultura atual para uma nova cultura, enquanto o aplicativo está em execução e, em seguida, o aplicativo acessa o <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> ou <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade, o aplicativo recupera os valores padrão para a cultura novo em vez de substituições para a cultura original. Para preservar as substituições para a cultura atual original, o aplicativo deve acessar o <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> e <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedades antes de alterar a cultura atual.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra que CultureInfo.Clone também copia o <xref:System.Globalization.DateTimeFormatInfo> e <xref:System.Globalization.NumberFormatInfo> instâncias associadas a <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">A propriedade é definida como nula.</exception>
        <exception cref="T:System.InvalidOperationException">A propriedade <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> ou uma das propriedades <see cref="T:System.Globalization.DateTimeFormatInfo" /> é definida e o <see cref="T:System.Globalization.CultureInfo" /> é somente leitura.</exception>
        <block subset="none" type="usage">
          <para>Se <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> é o <see cref="T:System.Globalization.TaiwanCalendar" /> , mas o <see cref="P:System.Threading.Thread.CurrentCulture" /> não está definido como chinês (Taiwan), denominado zh-TW, em seguida, <see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />, <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />, e <see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" /> retornar uma cadeia de caracteres vazia ("").</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadCurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo DefaultThreadCurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo DefaultThreadCurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultThreadCurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ DefaultThreadCurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a cultura padrão para threads no domínio de aplicativo atual.</summary>
        <value>A cultura padrão para threads no domínio de aplicativo atual, ou <see langword="null" />, se a cultura do sistema atual for a cultura do thread padrão no domínio do aplicativo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] e versões anteriores, por padrão, a cultura de todos os threads é definida como a cultura do sistema Windows. Para aplicativos cuja cultura atual difere a cultura do sistema padrão, esse comportamento é geralmente indesejável. No [!INCLUDE[net_v45](~/includes/net-v45-md.md)], o <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> propriedade permite que um aplicativo definir a cultura padrão de todos os threads em um domínio de aplicativo.  
  
> [!IMPORTANT]
>  Se você não tiver definido explicitamente a cultura de qualquer existente threads em execução em um domínio de aplicativo, definindo o <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> propriedade também altera a cultura desses threads. No entanto, se esses threads são executados em outro domínio de aplicativo, a cultura é definida pelo <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> propriedade no domínio de aplicativo ou, se nenhum valor padrão for definido, a cultura de sistema padrão. Por isso, recomendamos que você sempre explicitamente definir a cultura do thread principal do aplicativo e não dependem de <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> propriedade para definir a cultura do thread principal do aplicativo.  
  
 A menos que ele é definido explicitamente, o valor da <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> é de propriedade `null`, e a cultura de threads em um domínio de aplicativo que não tenha sido atribuída uma cultura explícita é definida pela cultura de sistema do Windows padrão.  
  
 Para obter mais informações sobre culturas, threads e domínios de aplicativo, consulte "cultura e threads" e "cultura e domínios de aplicativo" seções o <xref:System.Globalization.CultureInfo> página de referência.  
  
   
  
## Examples  
 O exemplo a seguir ilustra o comportamento padrão do .NET Framework para definir a cultura atual de um novo thread. Na inicialização, o exemplo define a cultura atual e a cultura de interface do usuário atual para o francês (França) em todos os sistemas, exceto aqueles em que a cultura do sistema padrão já está francês (França). Se a cultura do sistema padrão já estiver francês (França), o código define a cultura atual e a cultura de interface do usuário atual para inglês (Estados Unidos). Depois, ele chama o `DisplayRandomNumbers` rotina, que gera três números aleatórios e exibe-as como valores de moeda. Em seguida, ele cria um novo thread, que também executa o `DisplayRandomNumbers` rotina.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/cs/defaultculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/vb/defaultculture1.vb#1)]  
  
 Como mostra a saída do exemplo, quando o exemplo for executado em um computador cuja cultura do sistema for inglês (Estados Unidos), o thread principal exibe seus valores de moeda usando as convenções de formatação da cultura Francês (França). No entanto, como a cultura do thread de trabalho é derivada da cultura atual do sistema Windows em vez de cultura atual do aplicativo, o thread de trabalho exibe seus valores de moeda usando as convenções de formatação da cultura do inglês (Estados Unidos).  
  
 O exemplo a seguir usa o <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> e <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedades para definir a cultura atual e a cultura de interface do usuário atual de um novo thread de aplicativo. Na inicialização, o exemplo define a cultura atual e a cultura de interface do usuário atual para o francês (França) em todos os sistemas, exceto aqueles em que a cultura do sistema padrão já está francês (França). Se a cultura do sistema padrão já estiver francês (França), ele define a cultura atual e a cultura de interface do usuário atual para inglês (Estados Unidos). Depois, ele chama o `DisplayRandomNumbers` rotina, que gera três números aleatórios e exibe-as como valores de moeda. Em seguida, ele cria um novo thread, que também executa o `DisplayRandomNumbers` rotina.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/cs/defaultculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/vb/defaultculture2.vb#2)]  
  
 Como mostra a saída do exemplo, quando o exemplo for executado em um computador cuja cultura do sistema for inglês (Estados Unidos), o thread principal e o thread de trabalho exibem os valores de moeda usando as convenções de formatação da cultura Francês (França).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadCurrentUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo DefaultThreadCurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo DefaultThreadCurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultThreadCurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ DefaultThreadCurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a cultura padrão interface do usuário para threads no domínio do aplicativo atual.</summary>
        <value>A cultura padrão da interface do usuário para threads no domínio do aplicativo atual ou <see langword="null" /> se a cultura da interface do usuário do sistema atual for a cultura padrão para threads da interface do usuário no domínio do aplicativo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] e versões anteriores, por padrão, a cultura de interface do usuário de todos os threads é definida como a cultura do sistema Windows. Para aplicativos cuja cultura de interface do usuário atual difere a cultura do sistema padrão, esse comportamento é geralmente indesejável. No [!INCLUDE[net_v45](~/includes/net-v45-md.md)], o <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedade permite que você definir a cultura de interface do usuário padrão de todos os threads em um domínio de aplicativo.  
  
> [!IMPORTANT]
>  Se você não tiver definido explicitamente a cultura de interface do usuário de qualquer existente threads em execução em um domínio de aplicativo, definindo o <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedade também altera a cultura desses threads. No entanto, se esses threads são executados em outro domínio de aplicativo, a cultura é definida pelo <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedade no domínio de aplicativo ou, se nenhum valor padrão for definido, a cultura de sistema padrão. Por isso, é recomendável sempre definir a cultura do thread principal do aplicativo e não dependa do <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedade para definir a cultura do thread principal do aplicativo.  
  
 A menos que ele é definido explicitamente, o valor da <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> é de propriedade `null`, e a cultura atual de todos os threads em um domínio de aplicativo que não tenha sido atribuída uma cultura explícita é definida pela cultura de sistema do Windows padrão.  
  
 Para obter mais informações sobre culturas, threads e domínios de aplicativo, consulte "cultura e threads" e "cultura e domínios de aplicativo" seções o <xref:System.Globalization.CultureInfo> página de referência.  
  
   
  
## Examples  
 O exemplo a seguir ilustra o comportamento padrão do .NET Framework para definir a cultura atual de um novo thread. Ele usa recursos de idioma inglês e russo. O seguinte arquivo de texto chamado GreetingStrings.txt contém os recursos de idioma inglês:  
  
```  
greeting =Hello again!  
newGreeting=Hello!  
```  
  
 Ele é compilado em um arquivo. Resources binário chamado GreetingStrings.resources usando o [gerador de arquivo](~/docs/framework/tools/resgen-exe-resource-file-generator.md) com o comando a seguir.  
  
```console  
resgen greetingstrings.txt  
```  
  
 O seguinte arquivo de texto chamado GreetingStrings.ru RU.txt contém os recursos do idioma russo:  
  
```  
greeting=Еще раз привет!  
newGreeting=Привет!  
```  
  
 Ele é compilado em um arquivo. Resources binário chamado GreetingStrings.ru RU.resources usando o [gerador de arquivo](~/docs/framework/tools/resgen-exe-resource-file-generator.md) com o comando a seguir.  
  
```console  
resgen greetingstrings.ru-RU.txt  
```  
  
 O código do aplicativo, que é mostrado abaixo, reside em um arquivo chamado Example1.vb ou Example1.cs. Ele é compilado em um executável usando o seguinte comando para o compilador do Visual Basic:  
  
```console  
vbc Example1.vb /resource:GreetingStrings.resources  
```  
  
 Para o compilador c#, o comando é semelhante:  
  
```console  
csc /resource:GreetingStrings.resources Example1.cs  
```  
  
 Isso cria um conjunto que inclui de código executável do exemplo junto com os recursos para sua cultura de fallback. Você também pode usar o [Assembly Linker](~/docs/framework/tools/al-exe-assembly-linker.md) para criar o arquivo de recurso para a cultura russo (Rússia) com o seguinte comando:  
  
```console  
>al /embed:greetingstrings.ru-RU.resources /c:ru-RU /template:example1.exe /out:ru-RU\Example1.resources.dll  
```  
  
 Na inicialização, o exemplo define a cultura atual e a cultura de interface do usuário atual para Russo (Rússia) em todos os sistemas, exceto aqueles nos quais a cultura do sistema padrão já é russa (Rússia). Se a cultura do sistema padrão já estiver russo (Rússia), o código define a cultura atual e a interface do usuário atual cultura para inglês (Estados Unidos). Depois, ele chama o `ShowGreeting` rotina, que exibe uma cadeia de caracteres simple na primeira vez que ele é chamado e uma cadeia de caracteres ligeiramente diferente em chamadas de método subsequentes. Em seguida, ele cria um novo thread, que também executa o `ShowGreeting` rotina.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/cs/example1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/vb/example1.vb#1)]  
  
 Como mostra a saída do exemplo, quando o exemplo for executado em um computador cuja cultura do sistema for inglês (Estados Unidos), o thread principal exibe sua cadeia de caracteres inicial em russo. No entanto, como a cultura do thread de trabalho é derivada da cultura atual do sistema Windows em vez de cultura atual do aplicativo, o thread de trabalho exibe sua cadeia de caracteres em inglês.  
  
 O exemplo a seguir usa o <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> e <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedades para definir a cultura atual e a cultura de interface do usuário atual de um novo thread de aplicativo.  
  
 O exemplo usa os mesmos arquivos de recursos do exemplo anterior. Os comandos para compilar e inserir os recursos do idioma russo localizado em um assembly satélite também são idênticos, exceto que altera o nome do assembly executável.  
  
 Na inicialização, o exemplo define a cultura atual e a cultura de interface do usuário atual para Russo (Rússia) em todos os sistemas, exceto aqueles nos quais a cultura do sistema padrão já é russa (Rússia). Se a cultura do sistema padrão já estiver russa (Rússia), ele define a cultura atual e a cultura de interface do usuário atual para inglês (Estados Unidos). Depois, ele chama o `ShowGreeting` rotina, que exibe uma cadeia de caracteres simple na primeira vez que ele é chamado e uma cadeia de caracteres ligeiramente diferente em chamadas de método subsequentes. Em seguida, ele cria um novo thread, que também executa o `ShowGreeting` rotina.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/cs/example2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/vb/example2.vb#2)]  
  
 Como mostra a saída do exemplo, quando o exemplo for executado em um computador cuja cultura do sistema for inglês (Estados Unidos), o thread principal e o thread de trabalho exibam suas cadeias de caracteres no idioma russo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Em uma operação de conjuntos, o valor da propriedade <see cref="P:System.Globalization.CultureInfo.Name" /> é inválido.</exception>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public virtual string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o nome da cultura totalmente localizado.</summary>
        <value>O nome de cultura localizada completo no formato * languagefull * [* País / regionfull *], onde * languagefull * é o nome completo da linguagem e * país regionfull * é o nome completo do país/região.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propriedade representa o nome localizado do <xref:System.Globalization.CultureInfo> objeto.  
  
 Nomes de cultura podem variar por script ou as convenções de formatação. Você deve usar o nome retornado para exibição e não tentará analisá-lo.  
  
 Se uma cultura personalizada é criada por meio do <xref:System.Globalization.CultureAndRegionInfoBuilder> classe, o <xref:System.Globalization.CultureInfo.DisplayName%2A> propriedade é inicializada com o valor da <xref:System.Globalization.CultureInfo.NativeName%2A> propriedade.  
  
   
  
## Examples  
 O exemplo de código a seguir exibe várias propriedades das culturas neutras.  
  
> [!NOTE]
>  O exemplo exibe as culturas zh-CHS e zh-CHT com os identificadores de cultura 0x0004 e 0x7C04, respectivamente. No entanto, os aplicativos do Windows Vista devem usar o nome de zh-Hans em vez de zh-CHS e o nome de zh-Hant em vez de zh-CHT. O zh-Hans e zh-Hant nomes representam o padrão atual e deve ser usados, a menos que você tenha um motivo para usar os nomes antigos.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="EnglishName">
      <MemberSignature Language="C#" Value="public virtual string EnglishName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.EnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EnglishName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o nome da cultura no formato *languagefull* [*country/regionfull*] em inglês.</summary>
        <value>O nome de cultura no formato * languagefull * [* País / regionfull *] em inglês, onde * languagefull * é o nome completo da linguagem e * país regionfull * é o nome completo do país/região.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por exemplo, o <xref:System.Globalization.CultureInfo.EnglishName%2A> para determinada cultura en-US do nome é "Inglês (Estados Unidos)".  
  
 O valor dessa propriedade é o mesmo, independentemente da versão de idioma do .NET Framework.  
  
   
  
## Examples  
 O exemplo de código a seguir exibe várias propriedades das culturas neutras.  
  
> [!NOTE]
>  O exemplo exibe o zh-CHS mais antigos e os nomes de cultura zh-CHT com os identificadores de cultura 0x0004 e 0x7C04, respectivamente. No entanto, os aplicativos do Windows Vista devem usar o nome de zh-Hans em vez de zh-CHS e o nome de zh-Hant em vez de zh-CHT. O zh-Hans e zh-Hant nomes representam o padrão atual e deve ser usados, a menos que você tenha um motivo para usar os nomes antigos.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">O objeto a ser comparado com o <see cref="T:System.Globalization.CultureInfo" /> atual.</param>
        <summary>Determina se o objeto especificado é a mesma cultura que a <see cref="T:System.Globalization.CultureInfo" /> atual.</summary>
        <returns>
          <see langword="true" /> se <paramref name="value" /> for a mesma cultura que a <see cref="T:System.Globalization.CultureInfo" /> atual, caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método substitui <xref:System.Object.Equals%2A?displayProperty=nameWithType>.  
  
 Dois <xref:System.Globalization.CultureInfo> objetos são considerados iguais se seus <xref:System.Globalization.CultureInfo.Name%2A> e <xref:System.Globalization.CultureInfo.CompareInfo%2A> propriedades são iguais.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetConsoleFallbackUICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetConsoleFallbackUICulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetConsoleFallbackUICulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetConsoleFallbackUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConsoleFallbackUICulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetConsoleFallbackUICulture();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtém uma cultura de interface do usuário alternativa adequada para aplicativos de console quando a cultura padrão da interface gráfica do usuário é inadequada.</summary>
        <returns>Uma cultura alternativa usada para ler e exibir texto no console.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Idiomas como árabe, hebraico, Urdu e Síria são baseados em texto bidirecional. Aplicativos do Windows, que têm uma interface gráfica do usuário, suportam a idiomas bidirecionais. No entanto, os aplicativos de console, que utilizam a interface do usuário do texto do console do sistema operacional, não fornecem suporte bidirecional. Portanto, se você localizar um aplicativo de console para árabe ou hebraico, o aplicativo exibe texto ilegível na tela do console.  
  
 A cultura de interface do usuário Especifica os recursos de um aplicativo precisa oferecer suporte à entrada do usuário e a saída e por padrão é o mesmo que a cultura do sistema operacional. Por exemplo, o <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propriedade retorna uma cultura árabe para um sistema operacional árabe. Use o <xref:System.Globalization.CultureInfo.GetConsoleFallbackUICulture%2A> método para recuperar uma cultura adequada para uma interface de usuário do aplicativo de console. Depois que o aplicativo recupera a cultura de interface do usuário de fallback, ele deve atribuir a cultura para a cultura de interface do usuário atual do thread atual. Para obter mais informações, consulte a seção "Explicitamente configuração a cultura atual do usuário" o <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriedade.  
  
 A seguir estão as culturas predefinidas que têm um nome de cultura de interface do usuário fallback diferente do nome de cultura predefinidos.  
  
|Cultura predefinida|Nome da cultura|Nome de cultura de interface do usuário de fallback|  
|------------------------|------------------|------------------------------------------|  
|Amárico|Estou|en-US|  
|Amárico (Etiópia)|ET AM|en-US|  
|(neutro árabe)|ar|en-US|  
|Árabe (EAU)|ar AE|en-US|  
|Árabe (Bahrein)|ar BH|en-US|  
|Árabe (Argélia)|ar DZ|fr-FR|  
|Árabe (Egito)|ar-por exemplo|en-US|  
|Árabe (Iraque)|ar QI|en-US|  
|Árabe (Jordânia)|ar-JO|en-US|  
|Árabe (Kuwait)|ar-KW|en-US|  
|Árabe (Líbano)|balanceamento de carga de ar|en-US|  
|Árabe (Líbia)|ar-r|en-US|  
|Árabe (Marrocos)|ar-MA|fr-FR|  
|Árabe (Omã)|ar-OM|en-US|  
|Árabe (Catar)|controle de qualidade de ar|en-US|  
|Árabe (Arábia Saudita)|ar-SA|en-US|  
|Árabe (Síria)|ar SY|en-US|  
|Árabe (Tunísia)|ar-TN|fr-FR|  
|Árabe (Iêmen)|ar-YE|en-US|  
|Assamês|as|en-US|  
|Assamês (Índia)|as-IN|en-US|  
|Bengali|bn|en-US|  
|Bengali (Austrália)|BD de bn|en-US|  
|Bengali (Índia)|bn-IN|en-US|  
|Tibetano|bO|en-US|  
|Tibetano (RPC)|bO CN|en-US|  
|Divehi|dv|en-US|  
|Divehi (Índia)|dv-MV|en-US|  
|Persa|FA|en-US|  
|Persa (Irã)|FA-IR|en-US|  
|Guzerate|gu|en-US|  
|Gujarati (Índia)|Gu IN|en-US|  
|Hebraico|he|en-US|  
|Hebraico (Israel)|he-IL|en-US|  
|Hindi|Oi|en-US|  
|Híndi (Índia)|hi-IN|en-US|  
|Yi|ii|en-US|  
|Yi (RPC)|ii-CN|en-US|  
|Inuktitut silábico|IU latas|en-US|  
|Silábico Inuktitut (Canadá)|iu-Cans-CA|en-US|  
|Khmer|km|en-US|  
|Khmer (Camboja)|km-KH|en-US|  
|Kannada|Kn|en-US|  
|Kannada (Índia)|IN Kn|en-US|  
|Konkani|kok|en-US|  
|Konkani (Índia)|kok-IN|en-US|  
|Lao|baixo|en-US|  
|Lao (Lao P.D.R.)|baixo-LA|en-US|  
|Malaiala|ml|en-US|  
|Malaiala (Índia)|IN ml|en-US|  
|Mohawk|MOH|en-US|  
|Mohawk (Canadá)|moh-CA|en-US|  
|Marata|Mr|en-US|  
|Marati (Índia)|IN MR|en-US|  
|Nepalês|ne|en-US|  
|Nepalês (Nepal)|ne NP|en-US|  
|Norueguês|no|nb-NO|  
|Oriá|ou|en-US|  
|Oriá (Índia)|ou IN|en-US|  
|Punjabi|PA|en-US|  
|Punjabi (Índia)|PA-IN|en-US|  
|Dari|PRS|en-US|  
|Dari (Afeganistão)|AF PRS|en-US|  
|Pashto|PS|en-US|  
|Pashto (Afeganistão)|ps-AF|en-US|  
|Sânscrito|SA|en-US|  
|Sânscrito (Índia)|IN SA|en-US|  
|Sinhala|si|en-US|  
|Sinhala (Sri Lanka)|si LK|en-US|  
|Siríaco|SYR|en-US|  
|Siríaco (Síria)|SY SYR|en-US|  
|Tâmil|TA|en-US|  
|Tâmil (Índia)|TA IN|en-US|  
|Telugu|te|en-US|  
|Télugo (Índia)|EM te|en-US|  
|Tailandês|th|en-US|  
|Tailandês (Tailândia)|-ésimo|en-US|  
|Uigur|ug|en-US|  
|Uighur (RPC)|ug-CN|en-US|  
|Urdu|seu|en-US|  
|Urdu (Paquistão)|PK seu|en-US|  
|Vietnamita|vi|en-US|  
|Vietnamita (Vietnã)|vi-VN|en-US|  
  
 Seu aplicativo pode usar <xref:System.Globalization.CultureAndRegionInfoBuilder> para criar uma substituição para aquela cultura e uma cultura podem ter uma cultura de fallback de console de sua escolha.  
  
   
  
## Examples  
 O exemplo de código a seguir exibe a cultura de interface de usuário fallback associada a um objeto de cultura.  
  
 [!code-cpp[sys.glob.ci.getCFUIC#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.ci.getCFUIC/cpp/cfuic.cpp#1)]
 [!code-csharp[sys.glob.ci.getCFUIC#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.ci.getCFUIC/CS/cfuic.cs#1)]
 [!code-vb[sys.glob.ci.getCFUIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.ci.getCFUIC/VB/cfuic.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCultureInfo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Recupera uma instância em cache, somente leitura de uma cultura.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (culture As Integer) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(int culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="culture">Um LCID (ID de localidade).</param>
        <summary>Recupera uma instância somente leitura armazenada em cache de uma cultura usando o identificador de cultura especificado.</summary>
        <returns>Um objeto somente leitura de <see cref="T:System.Globalization.CultureInfo" /> .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Recomendamos que você use a sobrecarga de cadeia de caracteres desse método (<xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29>), como nomes de localidades devem ser usados em vez de LCIDs. Para localidades personalizadas, é necessário o nome da localidade.  
  
 Se `culture` é o identificador de localidade da cultura atual, retornado <xref:System.Globalization.CultureInfo> objeto não reflete qualquer substituições do usuário.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="culture" /> é menor que zero.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="culture" /> especifica uma cultura que não tem suporte. Para obter mais informações, consulte a seção Observações para chamadores.</exception>
        <block subset="none" type="usage">
          <para>O [! INCLUDE[net_v35_long](~/Includes/NET-v35-Long-MD.MD)] e versões anteriores lançam um <see cref="T:System.ArgumentException" /> se <paramref name="culture" /> não é um identificador de cultura válida. Começando com a [! INCLUDE[net_v40_long](~/Includes/NET-v40-Long-MD.MD)], este método lança um <see cref="T:System.Globalization.CultureNotFoundException" />. Aplicativos que são executados sob a partir de [! INCLUDE[net_v40_long](~/Includes/NET-v40-Long-MD.MD)] ou posterior no Windows 7 ou posterior, o método tenta recuperar um <see cref="T:System.Globalization.CultureInfo" /> objeto cujo identificador é <paramref name="culture" /> do sistema operacional; se o sistema operacional não oferece suporte para aquela cultura , o método gera uma <see cref="T:System.Globalization.CultureNotFoundException" />.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">O nome de uma cultura. <c>name</c> não diferencia maiúsculas de minúsculas.</param>
        <summary>Recupera uma instância armazenada em cache somente leitura de uma cultura usando o nome da cultura especificada.</summary>
        <returns>Um objeto somente leitura de <see cref="T:System.Globalization.CultureInfo" /> .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter uma lista de nomes de cultura predefinidos, consulte o [suporte ao idioma nacional (NLS) API referência](http://go.microsoft.com/fwlink/?LinkId=200048) no Go Global Developer Center. Além disso, começando com o Windows 10, `name` pode ser qualquer marca de linguagem BCP-47 válida.  
  
 O <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> método recupera um cache somente leitura <xref:System.Globalization.CultureInfo> objeto. Ele oferece desempenho melhor do que uma chamada correspondente para o <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29?displayProperty=nameWithType> construtor.  
  
 Se `name` é o nome da cultura atual, retornado <xref:System.Globalization.CultureInfo> objeto não reflete qualquer substituições do usuário. Isso torna o método adequado para aplicativos de servidor ou ferramentas que não têm uma conta de usuário no sistema e que precisam carregar várias culturas com eficiência.  
  
 Se `name` é <xref:System.String.Empty?displayProperty=nameWithType>, o método retorna a cultura invariável. Isso é equivalente ao recuperar o valor da <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriedade.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> é nulo.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> especifica uma cultura que não tem suporte. Para obter mais informações, consulte a seção Observações para chamadores.</exception>
        <block subset="none" type="usage">
          <para>O [! INCLUDE[net_v35_long](~/Includes/NET-v35-Long-MD.MD)] e versões anteriores lançam um <see cref="T:System.ArgumentException" /> se <paramref name="name" /> não é um nome de cultura válido. Começando com a [! INCLUDE[net_v40_long](~/Includes/NET-v40-Long-MD.MD)], este método lança um <see cref="T:System.Globalization.CultureNotFoundException" />. Aplicativos que são executados sob a partir de [! INCLUDE[net_v40_long](~/Includes/NET-v40-Long-MD.MD)] ou posterior no Windows 7 ou posterior, o método tenta recuperar um <see cref="T:System.Globalization.CultureInfo" /> objeto cujo identificador é <paramref name="name" /> do sistema operacional; se o sistema operacional não oferece suporte para aquela cultura e se <paramref name="name" /> não é o nome de uma cultura suplementar ou de substituição, a método gera uma <see cref="T:System.Globalization.CultureNotFoundException" />.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name, string altName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name, string altName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (name As String, altName As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(System::String ^ name, System::String ^ altName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="altName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">O nome de uma cultura. <c>name</c> não diferencia maiúsculas de minúsculas.</param>
        <param name="altName">O nome de uma cultura que fornece os objetos <see cref="T:System.Globalization.TextInfo" /> e <see cref="T:System.Globalization.CompareInfo" /> usados para inicializar <c>name</c>. <c>altName</c> não diferencia maiúsculas de minúsculas.</param>
        <summary>Recupera uma instância em cache, somente leitura de uma cultura. Os parâmetros especificam uma cultura que é inicializada com os objetos <see cref="T:System.Globalization.TextInfo" /> e <see cref="T:System.Globalization.CompareInfo" /> especificados por outra cultura.</summary>
        <returns>Um objeto somente leitura de <see cref="T:System.Globalization.CultureInfo" /> .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter uma lista de nomes de cultura predefinidos, consulte o [suporte ao idioma nacional (NLS) API referência](http://go.microsoft.com/fwlink/?LinkId=200048) no Go Global Developer Center. Além disso, começando com o Windows 10, `name` pode ser qualquer marca de linguagem BCP-47 válida.  
  
 O <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> método obtém um cache somente leitura <xref:System.Globalization.CultureInfo> objeto. Ele oferece desempenho melhor do que uma chamada correspondente para um <xref:System.Globalization.CultureInfo.%23ctor%2A> construtor. O método é usado para criar uma cultura semelhante àquela especificada pelo `name` regras de parâmetro, mas com diferentes de classificação e de maiusculas e minúsculas.  
  
 Se `name` ou `altName` é o nome da cultura atual, os objetos retornados não refletem quaisquer substituições do usuário. Se `name` é <xref:System.String.Empty?displayProperty=nameWithType>, o método retorna a cultura invariável. Isso é equivalente ao recuperar o valor da <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriedade. Se `altName` é <xref:System.String.Empty?displayProperty=nameWithType>, o método usa o sistema de escrita e comparação regras especificadas pela cultura invariável.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ou <paramref name="altName" /> é nulo.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> ou <paramref name="altName" /> especifica uma cultura que não tem suporte. Para obter mais informações, consulte a seção Observações para chamadores.</exception>
        <block subset="none" type="usage">
          <para>O [! INCLUDE[net_v35_long](~/Includes/NET-v35-Long-MD.MD)] e versões anteriores lançam um <see cref="T:System.ArgumentException" /> se <paramref name="name" /> ou <paramref name="altName" /> não é um nome de cultura válido. Começando com a [! INCLUDE[net_v40_long](~/Includes/NET-v40-Long-MD.MD)], este método lança um <see cref="T:System.Globalization.CultureNotFoundException" />. Aplicativos que são executados sob a partir de [! INCLUDE[net_v40_long](~/Includes/NET-v40-Long-MD.MD)] ou posterior no Windows 7 ou posterior, o método tenta recuperar um <see cref="T:System.Globalization.CultureInfo" /> objeto cujo identificador é <paramref name="name" /> do sistema operacional; se o sistema operacional não oferece suporte para aquela cultura e se <paramref name="name" /> não é o nome de uma cultura suplementar ou de substituição, a método gera uma <see cref="T:System.Globalization.CultureNotFoundException" /> exceção. Aplicativos que são executados sob a partir de [! INCLUDE[net_v40_long](~/Includes/NET-v40-Long-MD.MD)] ou posterior no Windows 7 ou posterior, o método tenta recuperar um <see cref="T:System.Globalization.CultureInfo" /> objeto cujo identificador é <paramref name="name" /> do sistema operacional; se o sistema operacional não oferece suporte para aquela cultura e se <paramref name="name" /> não é o nome de uma cultura suplementar ou de substituição, a método gera uma <see cref="T:System.Globalization.CultureNotFoundException" /> exceção.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfoByIetfLanguageTag">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfoByIetfLanguageTag (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfoByIetfLanguageTag(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">O nome de uma linguagem conforme especificado pelo padrão RFC 4646.</param>
        <summary>Preterido. Recupera um objeto <see cref="T:System.Globalization.CultureInfo" /> somente leitura tendo características linguísticas que são identificadas pela marca de idioma RFC 4646 especificada.</summary>
        <returns>Um objeto somente leitura de <see cref="T:System.Globalization.CultureInfo" /> .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Este método e o <xref:System.Globalization.CultureInfo.IetfLanguageTag%2A> propriedade foram preteridos. Em vez de usar esses elementos, o aplicativo deve usar um novo <xref:System.Globalization.CultureInfo> objeto e as chamadas para o <xref:System.Globalization.CultureInfo.Name%2A> propriedade. Marcas IETF e nomes são idênticos.  
  
 O padrão de RFC 4646 que é mantido pelo Task Force IETF (Internet Engineering) define uma marca de idioma da IETF, que fornece uma maneira uniforme de identificação de um idioma. O formato de uma marca de idioma da IETF é igual ao nome de cultura retornado pelo <xref:System.Globalization.CultureInfo.Name%2A> propriedade, mas não identifica exclusivamente uma cultura. Diferentes culturas compartilham a mesma marca de idioma da IETF se essas culturas têm características linguísticas idênticas. As características linguísticas de uma cultura que estão contidas no <xref:System.Globalization.TextInfo> objeto associado a um <xref:System.Globalization.CultureInfo> objeto.  
  
 Uma marca de idioma da IETF consiste em um identificador de idioma obrigatório, um identificador de script opcional e um identificador de região opcional.  
  
 Seus aplicativos devem usar a cultura recuperada para controlar tarefas específicas de idioma, como gerenciar um verificador ortográfico ou gramatical. Aplicativos não devem usar a cultura recuperada para controlar tarefas específicas de cultura, como datas e horas de formatação ou de classificação de texto.  
  
 Para obter mais informações, consulte RFC 4646, "Marcas para identificar idiomas" e o mais recente rascunho padrão, rascunho-phillips-langtags-05.txt, em [ http://go.microsoft.com/fwlink/?LinkId=100231 ](http://go.microsoft.com/fwlink/?LinkId=100231).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> é nulo.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> não corresponde a uma cultura com suporte.</exception>
        <block subset="none" type="usage">
          <para>O [! INCLUDE[net_v35_long](~/Includes/NET-v35-Long-MD.MD)] e versões anteriores lançam um <see cref="T:System.ArgumentException" /> se <paramref name="name" /> não corresponde ao nome de uma cultura suportados. Começando com a [! INCLUDE[net_v40_long](~/Includes/NET-v40-Long-MD.MD)], este método lança um <see cref="T:System.Globalization.CultureNotFoundException" />.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.TextInfo" />
        <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultures">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo[] GetCultures (System.Globalization.CultureTypes types);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo[] GetCultures(valuetype System.Globalization.CultureTypes types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultures (types As CultureTypes) As CultureInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Globalization::CultureInfo ^&gt; ^ GetCultures(System::Globalization::CultureTypes types);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Globalization.CultureTypes" />
      </Parameters>
      <Docs>
        <param name="types">Uma combinação bit a bit dos valores de enumeração que filtram as culturas a serem recuperadas.</param>
        <summary>Obtém a lista de culturas com suporte filtradas por parâmetro <see cref="T:System.Globalization.CultureTypes" /> especificado.</summary>
        <returns>Uma matriz que contém as culturas especificadas pelo parâmetro <paramref name="types" />. A matriz de culturas não está classificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Globalization.CultureInfo.GetCultures%2A> é mais comumente chamado de método com o `types` parâmetro definido para os seguintes valores:  
  
-   <xref:System.Globalization.CultureTypes.SpecificCultures>, que retorna todas as culturas específicas.  
  
-   <xref:System.Globalization.CultureTypes.NeutralCultures>, que retorna todas as culturas neutras e a cultura invariável.  
  
-   <xref:System.Globalization.CultureTypes.AllCultures>, que retorna todas as culturas neutras e específicas, culturas instaladas no sistema Windows e culturas personalizadas criadas pelo usuário.  
  
-   <xref:System.Globalization.CultureTypes.UserCustomCulture>, que retorna todas as culturas personalizadas, como aqueles registrados pela <xref:System.Globalization.CultureAndRegionInfoBuilder> classe. Em versões do Windows anteriores ao Windows 10, o <xref:System.Globalization.CultureTypes.UserCustomCulture> valor se aplica a todas as culturas personalizadas definidas pelo usuário. Começando com o Windows 10, ela se aplica a culturas de sistema que não têm dados culturais completa e que não têm um identificador local exclusivo, conforme indicado pelo <xref:System.Globalization.CultureInfo.LCID%2A> o valor da propriedade. Como resultado, o código como o seguinte retornará resultados diferentes quando executado no Windows 10 e uma versão anterior do Windows.  
  
     [!code-csharp[System.Globalization.CultureInfo.GetCultures#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures3.cs#2)]
     [!code-vb[System.Globalization.CultureInfo.GetCultures#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures3.vb#2)]  
  
   
  
## Examples  
 O exemplo de código a seguir exibe várias propriedades das culturas neutras.  
  
> [!NOTE]
>  O exemplo exibe as culturas zh-CHS e zh-CHT com os identificadores de cultura 0x0004 e 0x7C04, respectivamente. No entanto, os aplicativos do Windows Vista devem usar o nome de zh-Hans em vez de zh-CHS e o nome de zh-Hant em vez de zh-CHT. O zh-Hans e zh-Hant nomes representam o padrão atual e deve ser usados, a menos que você tenha um motivo para usar os nomes antigos.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O <paramref name="types" /> especifica uma combinação inválida de valores <see cref="T:System.Globalization.CultureTypes" />.</exception>
        <altmember cref="T:System.Globalization.CultureTypes" />
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public virtual object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormatProvider.GetFormat(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">O <see cref="T:System.Type" /> para o qual obter um objeto de formatação. Este método só tem suporte para os tipos <see cref="T:System.Globalization.NumberFormatInfo" /> e <see cref="T:System.Globalization.DateTimeFormatInfo" />.</param>
        <summary>Obtém um objeto que define como formatar o tipo especificado.</summary>
        <returns>O valor da <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> propriedade, que é uma <see cref="T:System.Globalization.NumberFormatInfo" /> que contém as informações de formato numéricas padrão atual <see cref="T:System.Globalization.CultureInfo" />, se <paramref name="formatType" /> é o objeto de <see cref="T:System.Type" /> para a <see cref="T:System.Globalization.NumberFormatInfo" /> classe.  -ou- O valor da propriedade <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" />, que é uma <see cref="T:System.Globalization.DateTimeFormatInfo" /> que contém as informações de formato de data e hora padrão para a <see cref="T:System.Globalization.CultureInfo" />atual, se <paramref name="formatType" /> for o objeto <see cref="T:System.Type" /> para a classe <see cref="T:System.Globalization.DateTimeFormatInfo" />.  -ou- nulo, se <paramref name="formatType" /> for qualquer outro objeto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.GetFormat%2A> implementa <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>.  
  
 `NumberFormatInfo` fornece o formato numérico específicos de cultura usado em conjunto com os métodos de formato em tipos de dados base. `DateTimeFormatInfo` Controla como os valores de data e hora são formatados para uma cultura específica.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Funciona como uma função de hash para o <see cref="T:System.Globalization.CultureInfo" /> atual, adequada para algoritmos de hash e estruturas de dados, como uma tabela de hash.</summary>
        <returns>Um código hash do <see cref="T:System.Globalization.CultureInfo" /> atual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método substitui <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.  
  
 Este método gera o mesmo código de hash de dois objetos são iguais de acordo com o <xref:System.Globalization.CultureInfo.Equals%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.CultureInfo.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Preterido. Obtém a identificação de RFC 4646 padrão de um idioma.</summary>
        <value>Uma cadeia de caracteres que é a identificação de RFC 4646 padrão de um idioma.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Essa propriedade e o <xref:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag%2A> método foram preteridos. Em vez disso, você deve usar um o <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> propriedade. Marcas IETF e nomes são idênticos.  
  
 O padrão de RFC 4646 que é mantido pelo Task Force IETF (Internet Engineering) define uma marca de idioma da IETF, que fornece uma maneira uniforme de identificação de um idioma. O formato de uma marca de idioma da IETF é semelhante para o nome de cultura retornado pelo <xref:System.Globalization.CultureInfo.Name%2A> propriedade, mas não identifica exclusivamente uma cultura. Ou seja, diferentes culturas compartilham a mesma marca de idioma da IETF se essas culturas têm características linguísticas idênticas. As características linguísticas de uma cultura que estão contidas no <xref:System.Globalization.TextInfo> objeto associado a um <xref:System.Globalization.CultureInfo> objeto.  
  
 Uma marca de idioma da IETF consiste em um identificador de idioma obrigatório, um identificador de script opcional e um identificador de região opcional.  
  
 Para obter mais informações, consulte [RFC 5646, "marcas de identificação idiomas](http://go.microsoft.com/fwlink/?LinkId=230876). Para obter uma lista de submarcas, consulte [IANA idioma submarca registro](http://go.microsoft.com/fwlink/?LinkId=230877).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.TextInfo" />
        <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
      </Docs>
    </Member>
    <Member MemberName="InstalledUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo InstalledUICulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo InstalledUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.InstalledUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InstalledUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ InstalledUICulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o <see cref="T:System.Globalization.CultureInfo" /> que representa a cultura instalada com o sistema operacional.</summary>
        <value>O <see cref="T:System.Globalization.CultureInfo" /> que representa a cultura instalada com o sistema operacional.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Em um sistema operacional localizado, como uma edição em japonês do Windows, essa propriedade retorna a cultura do sistema operacional. Essa propriedade é o equivalente de `GetSystemDefaultUILanguage` na API do Windows.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Resources.ResourceManager" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
      </Docs>
    </Member>
    <Member MemberName="InvariantCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo InvariantCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo InvariantCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.InvariantCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ InvariantCulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o objeto <see cref="T:System.Globalization.CultureInfo" /> que é independente de cultura (invariável).</summary>
        <value>O objeto que é independente de cultura (invariável).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cultura invariável faz diferenciação de cultura; ele está associado com o idioma inglês, mas não com qualquer país/região. Você especifica a cultura invariável por nome usando uma cadeia de caracteres vazia ("") na chamada para um <xref:System.Globalization.CultureInfo> método instanciação. <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> também recupera uma instância da cultura invariável. Ele pode ser usado em praticamente qualquer método no <xref:System.Globalization> namespace que requer uma cultura. Os objetos retornados pelas propriedades como <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, e <xref:System.Globalization.CultureInfo.NumberFormat%2A> também refletem a comparação de cadeia de caracteres e formatação convenções da cultura invariável.  
  
 Diferentemente dos dados sensíveis à cultura, o que estão sujeita a alterações por personalização de usuário ou por atualizações para o .NET Framework ou do sistema operacional, dados de cultura invariável é estáveis ao longo do tempo e entre culturas instaladas e não podem ser personalizados pelos usuários. Isso torna a cultura invariável particularmente útil para operações que exigem resultados independente de cultura, como formatação e análise de operações que persistem formatado dados, ou classificando e ordenação de operações que exigem que dados exibidos em uma ordem fixa, independentemente da cultura.  
  
## <a name="string-operations"></a>Operações da cadeia de caracteres  
 Você pode usar a cultura invariável para operações de cadeia de caracteres sensíveis à cultura que não são afetadas pelas convenções da cultura do thread atual e que são consistentes entre culturas. Por exemplo, convém dados classificados para aparecer em uma ordem fixa ou aplicar um conjunto padrão de convenções de maiusculas e minúsculas em cadeias de caracteres, independentemente da cultura do thread atual. Para fazer isso, você passa o <xref:System.Globalization.CultureInfo.InvariantCulture%2A> objeto para um método que tem um <xref:System.Globalization.CultureInfo> parâmetro, como <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Boolean%2CSystem.Globalization.CultureInfo%29> e <xref:System.String.ToUpper%28System.Globalization.CultureInfo%29>.  
  
## <a name="persisting-data"></a>Mantendo dados  
 O <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriedade pode ser usada para manter dados em um formato independente de cultura. Isso fornece um formato conhecido que não é alterada e que pode ser usado para serializar e desserializar dados entre culturas. Depois que os dados são desserializados, pode ser formatada adequadamente com base nas convenções culturais do usuário atual.  
  
 Por exemplo, se você optar por manter os dados de data e hora no formato de cadeia de caracteres, você pode passar o <xref:System.Globalization.CultureInfo.InvariantCulture%2A> do objeto para o <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> ou <xref:System.DateTimeOffset.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> método para criar a cadeia de caracteres e você pode passar o <xref:System.Globalization.CultureInfo.InvariantCulture%2A> o objeto para o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> ou <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método para converter a cadeia de caracteres como um valor de data e hora. Essa técnica garante que a data subjacente e valores de hora não são alterados quando os dados é lida ou gravados por usuários de diferentes culturas.  
  
 O exemplo a seguir usa a cultura invariável para manter um <xref:System.DateTime> valor como uma cadeia de caracteres. Em seguida, ele analisa a cadeia de caracteres e exibe seu valor usando as convenções de formatação de culturas alemão (Alemanha) e francês (França).  
  
 [!code-csharp[System.Globalization.CultureInfo.InvariantCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.invariantculture/cs/persist1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.InvariantCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.invariantculture/vb/persist1.vb#1)]  
  
## <a name="security-decisions"></a>Decisões de segurança  
 Se você estiver fazendo uma decisão de segurança (por exemplo, se deseja permitir acesso a um recurso do sistema) com base no resultado de uma comparação de cadeia de caracteres ou uma alteração, você não deve usar a cultura invariável. Em vez disso, você deve executar uma comparação ordinal diferencia maiusculas de minúsculas ou maiusculas de minúsculas, chamando um método que inclui um <xref:System.StringComparison> parâmetro e fornecendo um <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> ou <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> como um argumento. Código que executa operações de cadeia de caracteres sensíveis à cultura pode causar vulnerabilidades de segurança se a cultura atual é alterada ou se a cultura do computador que está executando o código é diferente da cultura que é usada para testar o código. Em contraste, uma comparação ordinal depende apenas o valor binário dos caracteres comparados.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
        <altmember cref="P:System.Globalization.CultureInfo.IsNeutralCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsNeutralCulture">
      <MemberSignature Language="C#" Value="public virtual bool IsNeutralCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNeutralCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IsNeutralCulture" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsNeutralCulture As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsNeutralCulture { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se o <see cref="T:System.Globalization.CultureInfo" /> atual representa uma cultura neutra.</summary>
        <value>
          <see langword="true" /> se a <see cref="T:System.Globalization.CultureInfo" /> atual representar uma cultura neutra, caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma cultura neutra é uma cultura que está associada com um idioma, mas não com um país ou região. Ele é diferente de uma cultura específica, que é uma cultura que está associada ao tanto uma linguagem e um país ou região. Por exemplo, fr é o nome para a cultura neutra francês, enquanto fr-FR é o nome para a cultura Francês na França.  
  
 Se essa propriedade retornará `false`, a cultura é uma cultura específica ou a cultura invariável.  
  
   
  
## Examples  
 O exemplo de código a seguir determina quais culturas usando o idioma chinês são culturas neutras.  
  
> [!NOTE]
>  O exemplo exibe o zh-CHS mais antigos e os nomes de cultura zh-CHT com os identificadores de cultura 0x0004 e 0x7C04, respectivamente. No entanto, os aplicativos do Windows Vista devem usar o nome de zh-Hans em vez de zh-CHS e o nome de zh-Hant em vez de zh-CHT. O zh-Hans e zh-Hant nomes representam o padrão atual e deve ser usados, a menos que você tenha um motivo para usar os nomes antigos.  
  
 [!code-cpp[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/CPP/neutralculture.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/CS/neutralculture.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/VB/neutralculture.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se o objeto <see cref="T:System.Globalization.CultureInfo" /> é somente leitura.</summary>
        <value>
          <see langword="true" /> Se o atual <see cref="T:System.Globalization.CultureInfo" /> é somente leitura; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o <xref:System.Globalization.CultureInfo> é somente leitura, o <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> e <xref:System.Globalization.CultureInfo.NumberFormat%2A> instâncias também são somente leitura.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra que <xref:System.Globalization.CultureInfo.IsReadOnly%2A> também ajuda a proteger o <xref:System.Globalization.DateTimeFormatInfo> e <xref:System.Globalization.NumberFormatInfo> instâncias associadas a <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CPP/yslin_cultureinfo_readonly.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CS/yslin_cultureinfo_readonly.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/VB/yslin_cultureinfo_readonly.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="KeyboardLayoutId">
      <MemberSignature Language="C#" Value="public virtual int KeyboardLayoutId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyboardLayoutId" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.KeyboardLayoutId" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property KeyboardLayoutId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int KeyboardLayoutId { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o identificador de localidade de entrada ativo.</summary>
        <value>Um número com sinal de 32 bits que especifica um identificador de localidade de entrada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O identificador de localidade de entrada era anteriormente chamado de layout do teclado. Um identificador de localidade de entrada é um conceito mais amplo que o layout do teclado desde que ele também pode indicar um conversor de fala em texto, um Editor de método de entrada (IME) ou qualquer outra forma de entrada.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public virtual int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.LCID" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int LCID { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o identificador de cultura para o <see cref="T:System.Globalization.CultureInfo" /> atual.</summary>
        <value>O identificador de cultura para o <see cref="T:System.Globalization.CultureInfo" /> atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na maioria dos casos, o identificador de cultura é mapeado para o identificador de localidade NLS correspondente.  
  
 Em versões do Windows anteriores ao Windows 10, o identificador de localidade `LOCALE_CUSTOM_UNSPECIFIED` (0x1000 ou 4096) é atribuído a culturas personalizadas criadas pelo usuário. Começando com o Windows 10, ele é atribuído a qualquer cultura que não tem um identificador de localidade exclusivo e não tem total dos dados fornecidos pelo sistema. Como resultado, o código que itera culturas e recupera aqueles com um <xref:System.Globalization.CultureInfo.LCID%2A> valor `LOCALE_CUSTOM_UNSPECIFIED` retorna um subconjunto maior de <xref:System.Globalization.CultureInfo> objetos se executado no Windows 10.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como criar um <xref:System.Globalization.CultureInfo> para Espanhol (Espanha) com a ordem de classificação internacionais e outra <xref:System.Globalization.CultureInfo> com a ordem de classificação tradicional.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o nome da cultura no formato *languagecode2*-*country/regioncode2*.</summary>
        <value>O nome de cultura no formato * formato código_de_idioma2 *-* país / regioncode2 *. * formato código_de_idioma2 * é um código de duas letras minúsculas, derivado do ISO 639-1. * País regioncode2 * é derivado da ISO 3166 e normalmente consiste em duas letras maiusculas ou uma marca de linguagem BCP-47.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter uma lista de identificadores e nomes de cultura predefinidos que o <xref:System.Globalization.CultureInfo.Name%2A> pode retornar a propriedade, consulte o [suporte ao idioma nacional (NLS) API referência](http://go.microsoft.com/fwlink/?LinkId=200048) no Go Global Developer Center. Além disso, começando com o Windows 10, `name` pode ser qualquer marca de linguagem BCP-47 válida. Observe que os nomes de cultura estão sujeitos a alteração e que eles também podem refletir os nomes de culturas personalizadas.  
  
 O <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> propriedade segue os padrões de nomenclatura fornecidos no <xref:System.Globalization.CultureInfo> tópico sobre a classe. Retorna a forma abreviada do nome de cultura que exclui qualquer indicação de uma ordem de classificação alternativa. Por exemplo, se você criar uma instância de um <xref:System.Globalization.CultureInfo> objeto usando a cadeia de caracteres "de DE_phoneb" para refletir uma ordem de classificação alternativa, o <xref:System.Globalization.CultureInfo.Name%2A> propriedade retorna "de-DE".  
  
 Para obter o nome completo da cultura, você deve usar o <xref:System.Globalization.CultureInfo.DisplayName%2A>, <xref:System.Globalization.CultureInfo.EnglishName%2A>, ou <xref:System.Globalization.CultureInfo.NativeName%2A> propriedade.  
  
   
  
## Examples  
 O exemplo de código a seguir exibe várias propriedades das culturas neutras.  
  
> [!NOTE]
>  O exemplo exibe o zh-CHS mais antigos e os nomes de cultura zh-CHT com os identificadores de cultura 0x0004 e 0x7C04, respectivamente. No entanto, os aplicativos do Windows Vista devem usar o nome de zh-Hans em vez de zh-CHS e o nome de zh-Hant em vez de zh-CHT. O zh-Hans e zh-Hant nomes representam o padrão atual e deve ser usados, a menos que você tenha um motivo para usar os nomes antigos.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="NativeName">
      <MemberSignature Language="C#" Value="public virtual string NativeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.NativeName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NativeName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o nome de cultura, composto pelo idioma, o país/região e o script opcional, que a cultura está configurada para exibir.</summary>
        <value>O nome da cultura. composto pelo nome completo do idioma, o nome completo do país/região e o script opcional. O formato é discutido na descrição da classe <see cref="T:System.Globalization.CultureInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor dessa propriedade é o mesmo, independentemente da versão de idioma do .NET Framework.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="NumberFormat">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.NumberFormatInfo NumberFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.NumberFormatInfo NumberFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.NumberFormat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property NumberFormat As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::NumberFormatInfo ^ NumberFormat { System::Globalization::NumberFormatInfo ^ get(); void set(System::Globalization::NumberFormatInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um <see cref="T:System.Globalization.NumberFormatInfo" /> que define o formato culturalmente apropriado de exibição de números, moeda e percentual.</summary>
        <value>Um <see cref="T:System.Globalization.NumberFormatInfo" /> que define o formato culturalmente apropriado de exibição de números, moeda e percentual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overrides"></a>Substituições  
 O usuário pode optar por substituir alguns dos valores associados com a cultura atual do Windows por meio de parte de opções regionais e de idioma do painel de controle. Por exemplo, o usuário pode escolher para exibir a data em um formato diferente ou usar uma moeda diferente do padrão para a cultura.  
  
 Se <xref:System.Globalization.CultureInfo.UseUserOverride%2A> é `true` e a cultura especificada corresponde a cultura atual do Windows, o <xref:System.Globalization.CultureInfo> usa essas substituições, inclusive configurações de usuário para as propriedades do <xref:System.Globalization.DateTimeFormatInfo> instância retornada pelo <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriedade e as propriedades do <xref:System.Globalization.NumberFormatInfo> instância retornada pelo <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade. Se as configurações do usuário são incompatíveis com a cultura associada com o <xref:System.Globalization.CultureInfo>, por exemplo, se o calendário selecionado não é um do <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, os resultados dos métodos e os valores das propriedades são indefinidos.  
  
 Os valores de <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriedade e o <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade não são calculadas até que o usuário acessa a propriedade. Se o usuário usa o painel de controle para alterar a cultura atual para uma nova cultura, enquanto o aplicativo está em execução e, em seguida, acessa o <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> ou <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade, o aplicativo recupera os valores padrão para a cultura de novo. não as substituições para a cultura original. Para preservar as substituições para a cultura atual original, o aplicativo deve acessar o <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> e <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedades antes de alterar a cultura atual.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra que CultureInfo.Clone também copia o <xref:System.Globalization.DateTimeFormatInfo> e <xref:System.Globalization.NumberFormatInfo> instâncias associadas a <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">A propriedade é definida como nula.</exception>
        <exception cref="T:System.InvalidOperationException">A propriedade <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> ou uma das propriedades <see cref="T:System.Globalization.NumberFormatInfo" /> é definida e o <see cref="T:System.Globalization.CultureInfo" /> é somente leitura.</exception>
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="OptionalCalendars">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.Calendar[] OptionalCalendars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar[] OptionalCalendars" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.OptionalCalendars" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OptionalCalendars As Calendar()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::Globalization::Calendar ^&gt; ^ OptionalCalendars { cli::array &lt;System::Globalization::Calendar ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a lista de calendários que pode ser usada pela cultura.</summary>
        <value>Uma matriz do tipo <see cref="T:System.Globalization.Calendar" /> que representa os calendários que podem ser usados pela cultura representada pelo <see cref="T:System.Globalization.CultureInfo" /> atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Seu aplicativo altera o calendário usado por atual <xref:System.Globalization.CultureInfo> definindo o <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> propriedade <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, que é uma instância do <xref:System.Globalization.DateTimeFormatInfo> classe. O novo calendário deve ser um dos calendários listados em <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> também inclui outras propriedades que personalizar a formatação de data e hora associados a esse <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como determinar o <xref:System.Globalization.GregorianCalendar> versões compatíveis com a cultura.  
  
 [!code-cpp[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/CPP/gregoriancalendartypes.cpp#1)]
 [!code-csharp[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/CS/gregoriancalendartypes.cs#1)]
 [!code-vb[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/VB/gregoriancalendartypes.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.CultureInfo Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Parent" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Parent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Parent As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CultureInfo ^ Parent { System::Globalization::CultureInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o <see cref="T:System.Globalization.CultureInfo" /> que representa a cultura pai do <see cref="T:System.Globalization.CultureInfo" /> atual.</summary>
        <value>O <see cref="T:System.Globalization.CultureInfo" /> que representa a cultura pai do <see cref="T:System.Globalization.CultureInfo" /> atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Culturas têm uma hierarquia em que o pai de uma cultura específica é uma cultura neutra, o pai de uma cultura neutra é o <xref:System.Globalization.CultureInfo.InvariantCulture%2A>e o pai do <xref:System.Globalization.CultureInfo.InvariantCulture%2A> é a cultura invariável em si. A cultura pai abrange apenas o conjunto de informações que são comuns entre seus filhos.  
  
 Se os recursos para a cultura específica não estão disponíveis no sistema, os recursos para a cultura neutra são usados. Se os recursos para a cultura neutra não estiverem disponíveis, os recursos incorporados no assembly principal são usados. Para obter mais informações sobre o processo de fallback de recurso, consulte [Empacotando e implantando recursos](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md).  
  
   
  
## Examples  
 O exemplo de código a seguir determina a cultura pai de cada cultura específica usando o idioma chinês.  
  
> [!NOTE]
>  O exemplo exibe o zh-CHS mais antigos e os nomes de cultura zh-CHT com os identificadores de cultura 0x0004 e 0x7C04, respectivamente. No entanto, os aplicativos do Windows Vista devem usar o nome de zh-Hans em vez de zh-CHS e o nome de zh-Hant em vez de zh-CHT. O zh-Hans e zh-Hant nomes representam o padrão atual e deve ser usados, a menos que você tenha um motivo para usar os nomes antigos.  
  
 [!code-cpp[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/CPP/parentculture.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/CS/parentculture.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/VB/parentculture.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Globalization.CultureInfo.#ctor" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo ReadOnly (System.Globalization.CultureInfo ci);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo ReadOnly(class System.Globalization.CultureInfo ci) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadOnly (ci As CultureInfo) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ ReadOnly(System::Globalization::CultureInfo ^ ci);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ci" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="ci">O objeto <see cref="T:System.Globalization.CultureInfo" /> a ser encapsulado.</param>
        <summary>Retorna um wrapper somente leitura em torno do objeto <see cref="T:System.Globalization.CultureInfo" /> especificado.</summary>
        <returns>Um wrapper <see cref="T:System.Globalization.CultureInfo" /> de somente leitura encapsula <paramref name="ci" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse wrapper impede que modificações `ci`, ou os objetos retornados pelo `ci`.<xref:System.Globalization.CultureInfo.DateTimeFormat%2A> e `ci`.<xref:System.Globalization.CultureInfo.NumberFormat%2A> Propriedades.  
  
   
  
## Examples  
 O exemplo a seguir mostra que o <xref:System.Globalization.CultureInfo.ReadOnly%2A> método ajuda a proteger o <xref:System.Globalization.DateTimeFormatInfo> e <xref:System.Globalization.NumberFormatInfo> instâncias associadas a <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CPP/yslin_cultureinfo_readonly.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CS/yslin_cultureinfo_readonly.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/VB/yslin_cultureinfo_readonly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ci" /> é nulo.</exception>
        <altmember cref="P:System.Globalization.CultureInfo.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="TextInfo">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.TextInfo TextInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.TextInfo TextInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.TextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TextInfo As TextInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::TextInfo ^ TextInfo { System::Globalization::TextInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.TextInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o <see cref="T:System.Globalization.TextInfo" /> que define o sistema de escrita associado à cultura.</summary>
        <value>O <see cref="T:System.Globalization.TextInfo" /> que define o sistema de escrita associado à cultura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Globalization.CultureInfo.TextInfo%2A> propriedade fornece informações específicas da cultura de maiusculas e minúsculas para cadeias de caracteres. Para executar o uso de maiusculas e minúsculas não levam em conta a cultura, o aplicativo deve usar o <xref:System.Globalization.CultureInfo.TextInfo%2A> propriedade <xref:System.Globalization.CultureInfo.InvariantCulture%2A>.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como criar um <xref:System.Globalization.CultureInfo> para Espanhol (Espanha) com a ordem de classificação internacionais e outra <xref:System.Globalization.CultureInfo> com a ordem de classificação tradicional.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.TextInfo" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public virtual string ThreeLetterISOLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ThreeLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ThreeLetterISOLanguageName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o código de três letras ISO 639-2 para o idioma do <see cref="T:System.Globalization.CultureInfo" /> atual.</summary>
        <value>O código de três letras ISO 639-2 para o idioma do <see cref="T:System.Globalization.CultureInfo" /> atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por exemplo, a abreviação de três letras para o inglês é "eng".  
  
> [!NOTE]
>  Quando a comunicação entre processos ou persistir dados geralmente é melhor usar completa <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>. Usar apenas o idioma pode perder dados e contexto.  
  
   
  
## Examples  
 O exemplo de código a seguir exibe várias propriedades das culturas neutras.  
  
> [!NOTE]
>  O exemplo exibe o zh-CHS mais antigos e os nomes de cultura zh-CHT com os identificadores de cultura 0x0004 e 0x7C04, respectivamente. No entanto, os aplicativos do Windows Vista devem usar o nome de zh-Hans em vez de zh-CHS e o nome de zh-Hant em vez de zh-CHT. O zh-Hans e zh-Hant nomes representam o padrão atual e deve ser usados, a menos que você tenha um motivo para usar os nomes antigos.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterWindowsLanguageName">
      <MemberSignature Language="C#" Value="public virtual string ThreeLetterWindowsLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ThreeLetterWindowsLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ThreeLetterWindowsLanguageName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o código de três letras do idioma, conforme definido na API do Windows.</summary>
        <value>O código de três letras do idioma, conforme definido na API do Windows.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade retorna o mesmo valor que o método de API do Windows `GetLocaleInfo` com o valor LOCALE_SABBREVLANGNAME. Por exemplo, o código de três letras para inglês (EUA) conforme definido na API do Windows é "enu".  
  
> [!NOTE]
>  Quando a comunicação entre processos ou persistir dados geralmente é melhor usar completa <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>. Usar apenas o idioma pode perder dados e contexto.  
  
   
  
## Examples  
 O exemplo de código a seguir exibe várias propriedades das culturas neutras.  
  
> [!NOTE]
>  O exemplo exibe o zh-CHS mais antigos e os nomes de cultura zh-CHT com os identificadores de cultura 0x0004 e 0x7C04, respectivamente. No entanto, os aplicativos do Windows Vista devem usar o nome de zh-Hans em vez de zh-CHS e o nome de zh-Hant em vez de zh-CHT. O zh-Hans e zh-Hant nomes representam o padrão atual e deve ser usados, a menos que você tenha um motivo para usar os nomes antigos.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna uma cadeia de caracteres que contém o nome da <see cref="T:System.Globalization.CultureInfo" /> atual no formato *languagecode2*-*country/regioncode2*.</summary>
        <returns>Uma cadeia de caracteres que contém o nome do <see cref="T:System.Globalization.CultureInfo" /> atual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método substitui <xref:System.Object.ToString%2A?displayProperty=nameWithType>. Retorna uma versão normalizada do nome de cultura que é passado para o <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> ou <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> construtor ou o <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> ou <xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29> método. Ele normaliza a cadeia de caracteres de resultado pela conversão de caracteres de *formato código_de_idioma2* para caracteres minúsculos e converter em *país/regioncode2* em maiusculas, se necessário.  
  
 Nomes de cultura predefinidos são listados no [suporte ao idioma nacional (NLS) API referência](http://go.microsoft.com/fwlink/?LinkId=200048) página no Go Global Developer Center.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
      </Docs>
    </Member>
    <Member MemberName="TwoLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public virtual string TwoLetterISOLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TwoLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TwoLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ TwoLetterISOLanguageName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o código de duas letras ISO 639-1 para o idioma do <see cref="T:System.Globalization.CultureInfo" /> atual.</summary>
        <value>O código de duas letras ISO 639-1 para o idioma do <see cref="T:System.Globalization.CultureInfo" /> atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por exemplo, a abreviação de duas letras para o inglês é "en". O <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> valor da propriedade para a cultura invariável é "iv".  
  
> [!NOTE]
>  Quando a comunicação entre processos ou persistir dados geralmente é melhor usar completa <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>. Usar apenas o idioma pode perder dados e contexto.  
  
 Se o ISO 639-1 não define um código de idioma de duas letras para uma cultura específica, o <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> propriedade retorna uma cadeia de caracteres que consiste em três ou mais letras. Para obter mais informações, consulte o exemplo.  
  
   
  
## Examples  
 O exemplo a seguir lista as culturas cuja <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> propriedade não consistem em um código de idioma de duas letras.  
  
 [!code-csharp[System.Globalization.CultureInfo.TwoLetterISOLanguageName#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.twoletterisolanguagename/cs/twoletterisolanguagename1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.TwoLetterISOLanguageName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.twoletterisolanguagename/vb/twoletterisolanguagename1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="UseUserOverride">
      <MemberSignature Language="C#" Value="public bool UseUserOverride { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseUserOverride" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.UseUserOverride" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UseUserOverride As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseUserOverride { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se o objeto <see cref="T:System.Globalization.CultureInfo" /> atual usa as configurações de cultura selecionadas pelo usuário.</summary>
        <value>
          <see langword="true" /> se o <see cref="T:System.Globalization.CultureInfo" /> atual usa as configurações de cultura selecionadas pelo usuário, caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O usuário pode optar por substituir alguns dos valores associados com a cultura atual do Windows por meio de parte de opções regionais e de idioma do painel de controle. Por exemplo, o usuário pode escolher para exibir a data em um formato diferente ou usar uma moeda diferente do padrão para a cultura.  
  
 Se <xref:System.Globalization.CultureInfo.UseUserOverride%2A> é `true` e a cultura especificada corresponde a cultura atual do Windows, o <xref:System.Globalization.CultureInfo> usa essas substituições, inclusive configurações de usuário para as propriedades do <xref:System.Globalization.DateTimeFormatInfo> instância retornada pelo <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriedade e as propriedades do <xref:System.Globalization.NumberFormatInfo> instância retornada pelo <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade. Se as configurações do usuário são incompatíveis com a cultura associada com o <xref:System.Globalization.CultureInfo>, por exemplo, se o calendário selecionado não é um do <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, os resultados dos métodos e os valores das propriedades são indefinidos.  
  
 Essa propriedade é definida quando o <xref:System.Globalization.CultureInfo> é criado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>