<Type Name="CultureInfo" FullName="System.Globalization.CultureInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6525e5b598a03aa0ecff5ef817c75a21fcd3aaf4" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51869930" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CultureInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit CultureInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CultureInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CultureInfo&#xA;Implements ICloneable, IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class CultureInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="F#" Value="type CultureInfo = class&#xA;    interface ICloneable&#xA;    interface IFormatProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fornece informações sobre uma cultura específica (chamada de *localidade* para o desenvolvimento de código não gerenciado). As informações incluem os nomes da cultura, o sistema de escrita, o calendário usado, a ordem de classificação das cadeias de caracteres e a formatação de datas e números.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Globalization.CultureInfo> classe fornece informações específicas de cultura, como a linguagem de subidioma, país/região, calendário e convenções associadas a uma determinada cultura. Essa classe também fornece acesso a instâncias específicas da cultura dos <xref:System.Globalization.DateTimeFormatInfo>, <xref:System.Globalization.NumberFormatInfo>, <xref:System.Globalization.CompareInfo>, e <xref:System.Globalization.TextInfo> objetos. Esses objetos contêm as informações necessárias para operações específicas de cultura, como maiusculas e minúsculas, formatação de datas e números e comparando cadeias de caracteres. O <xref:System.Globalization.CultureInfo> classe é usado direta ou indiretamente por classes que formatam, analisam ou manipulam dados específicos da cultura, como <xref:System.String>, <xref:System.DateTime>, <xref:System.DateTimeOffset>e os tipos numéricos.  
  
 Nesta seção:  
  
 [Identificadores e nomes de cultura](#CultureNames)   
 [Culturas invariáveis, neutras e específicas](#Invariant)   
 [Culturas personalizadas](#Custom)   
 [Dados de cultura dinâmica](#Dynamic)   
 [A cultura atual e a cultura de interface do usuário atual](#Current)   
 [Obter todas as culturas](#GetAll)   
 [Cultura e threads](#Threads)   
 [Domínios de aplicativo e de cultura](#AppDomain)   
 [Cultura e operações assíncronas baseadas em tarefa](#Async)   
 [Serialização de objeto CultureInfo](#Serialization)   
 [Substituições do painel de controle](#CPanel)   
 [Ordens de classificação alternativas](#AlternateSort)   
 [Aplicativos do Windows e de cultura](#Windows)  
  
<a name="CultureNames"></a>   
## <a name="culture-names-and-identifiers"></a>Identificadores e nomes de cultura  
 O <xref:System.Globalization.CultureInfo> classe especifica um nome exclusivo para cada cultura com base em RFC 4646. O nome é uma combinação de um código de cultura de duas letras minúsculas ISO 639 associado a um idioma e um código de subcultura de duas letras maiusculas ISO 3166 associado a um país ou região. Além disso, para aplicativos destinados a [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] ou posterior e estão em execução no Windows 10 ou posterior, os nomes de cultura que correspondem ao idioma BCP-47 válida, as marcas tem suporte.  
  
> [!NOTE]
>  Quando um nome de cultura é passado para um construtor de classe ou um método como <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> ou <xref:System.Globalization.CultureInfo>, seu caso de não é significativo.  
  
 É o formato para o nome da cultura com base em RFC 4646 *languagecode2*>-*país/código_de_região2*, onde *languagecode2* é o código de idioma de duas letras e *país/código_de_região2* é o código de subcultura de duas letras. Exemplos incluem ja-JP para japonês (Japão) e en-US para inglês (Estados Unidos). Em casos em que um código de idioma de duas letras não está disponível, um código de três letras derivado da ISO 639-2 é usado.  
  
 Observe que alguns nomes de cultura também especificam um script 15924 ISO. Por exemplo, Cyrl Especifica o script cirílico e Latn Especifica o script Latim. Um nome de cultura que inclui um script usa o padrão *languagecode2*-*scripttag*-*país/código_de_região2*. Um exemplo desse tipo de nome de cultura é uz-Cyrl-UZ para Uzbeque (cirílico, Uzbequistão). Em sistemas de operacionais Windows anteriores ao Windows Vista, um nome de cultura que inclui um script usa o padrão *languagecode2*-*país/código_de_região2* -  *scriptTag*, por exemplo, uz-UZ-Cyrl para Uzbeque (cirílico, Uzbequistão).  
  
 Uma cultura neutra é especificada pelo somente o código de idioma de duas letras minúsculas. Por exemplo, fr Especifica a cultura neutra para francês e Alemanha Especifica a cultura neutra do alemão.  
  
> [!NOTE]
>  Há dois nomes de cultura que contradizem essa regra. As culturas chinês (simplificado), denominado zh-Hans e chinês (tradicional), denominado zh-Hant são culturas neutras. Os nomes de cultura representam o padrão atual e devem ser usados a menos que você tenha um motivo para usar os nomes zh-CHS e zh-CHT mais antigos.  
  
 Um identificador de cultura é uma abreviação numérica internacional padrão e tem os componentes necessários para identificar exclusivamente uma das culturas instaladas. Seu aplicativo pode usar identificadores de cultura predefinidos ou definir identificadores de personalizado.  
  
 Certos predefinidas nomes de cultura e os identificadores são usados por essa e outras classes no <xref:System.Globalization?displayProperty=nameWithType> namespace. Informações de cultura detalhadas são exibidas na [suporte ao idioma nacional (NLS) API de referência](https://go.microsoft.com/fwlink/?LinkId=200048) no Go Global Developer Center.  
  
 Lembre-se de que os nomes de cultura e os identificadores representam apenas um subconjunto de culturas que podem ser encontrados em um computador específico. Versões do Windows ou service packs podem alterar as culturas disponíveis. Aplicativos adicionam culturas personalizadas usando o <xref:System.Globalization.CultureAndRegionInfoBuilder> classe. Os usuários adicionam suas próprias culturas personalizadas usando a ferramenta Microsoft Locale Builder. Microsoft Locale Builder é escrito em código gerenciado usando o `CultureAndRegionInfoBuilder` classe.  
  
 Vários nomes distintos estão estreitamente relacionados com uma cultura, especialmente os nomes associados com os seguintes membros de classe:  
  
-   <xref:System.Globalization.CultureInfo.ToString%2A?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.CompareInfo.Name%2A?displayProperty=nameWithType>  
  
<a name="Invariant"></a>   
## <a name="invariant-neutral-and-specific-cultures"></a>Culturas invariáveis, neutras e específicas  
 As culturas geralmente são agrupadas em três conjuntos: culturas invariáveis, culturas neutras e culturas específicas.  
  
 Uma cultura invariável é insensível à cultura. Seu aplicativo especifica a cultura invariável por nome usando uma cadeia de caracteres vazia ("") ou por seu identificador. <xref:System.Globalization.CultureInfo.InvariantCulture%2A> define uma instância da cultura invariável. Ele está associado com o idioma inglês, mas não com qualquer país/região. Ele é usado em quase qualquer método no `Globalization` namespace que requer uma cultura.  
  
 Uma cultura neutra é uma cultura que está associada com uma linguagem mas não com um país/região. Uma cultura específica é uma cultura que está associada um idioma e um país/região. Por exemplo, fr é o nome neutro para a cultura Francês e fr-FR é o nome da cultura Francês (França) específico. Observe que o chinês (simplificado) e chinês (tradicional) também são consideradas culturas neutras.  
  
 Criando uma instância de um <xref:System.Globalization.CompareInfo> classe para uma cultura neutra não é recomendada porque os dados que ele contém são arbitrários. Para exibir e classificar dados, especifique o idioma e a região. Além disso, o <xref:System.Globalization.CompareInfo.Name%2A> propriedade de um <xref:System.Globalization.CompareInfo> objeto criado para uma cultura neutra retorna somente o país e não inclui a região.  
  
 As culturas definidas possui uma hierarquia na qual o pai de uma cultura específica é uma cultura neutra e o pai de uma cultura neutra é a cultura invariável. O <xref:System.Globalization.CultureInfo.Parent%2A> propriedade contém a cultura neutra associada a uma cultura específica. Culturas personalizadas devem definir o <xref:System.Globalization.CultureInfo.Parent%2A> propriedade em conformidade com esse padrão.  
  
 Se os recursos para uma cultura específica não estão disponíveis no sistema operacional, os recursos para a cultura neutra associado são usados. Se os recursos para a cultura neutra não estiverem disponíveis, os recursos incorporados no assembly principal são usados. Para obter mais informações sobre o processo de fallback de recurso, consulte [Empacotando e implantando recursos](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md).  
  
 A lista de localidades na API do Windows é ligeiramente diferente na lista de culturas com suporte pelo .NET Framework. Se a interoperabilidade com o Windows é necessária, por exemplo, por meio do mecanismo p/invoke, o aplicativo deve usar uma cultura específica que está definida para o sistema operacional. Uso da cultura específica garante a consistência com a localidade do Windows equivalente, que é identificada com um identificador de localidade que é o mesmo que <xref:System.Globalization.CultureInfo.LCID%2A>.  
  
 Um <xref:System.Globalization.DateTimeFormatInfo> ou um <xref:System.Globalization.NumberFormatInfo> podem ser criados somente para a cultura invariável ou para culturas específicas, e não para culturas neutras.  
  
 Se <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> é o <xref:System.Globalization.TaiwanCalendar> , mas o <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> não está definido como zh-TW, então <xref:System.Globalization.DateTimeFormatInfo.NativeCalendarName%2A?displayProperty=nameWithType>, <xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A?displayProperty=nameWithType>, e <xref:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName%2A?displayProperty=nameWithType> retornar uma cadeia de caracteres vazia ("").  
  
<a name="Custom"></a>   
## <a name="custom-cultures"></a>Culturas personalizadas  
 Além das culturas predefinidas compatíveis com o sistema operacional Windows e o .NET Framework, o .NET Framework dá suporte a três tipos de culturas personalizadas:  
  
-   Novas culturas que complementam as culturas disponíveis no Windows ou o .NET Framework. Por exemplo, um aplicativo pode instalar um <xref:System.Globalization.CultureInfo> objeto que representa o fj-FJ (ou Fijan (Fiji)) de cultura em um sistema.  
  
-   Culturas de substituição cujas propriedades são diferentes das propriedades das culturas padrão com suporte do Windows e o .NET Framework.  
  
-   Culturas padrão com substituições do usuário. O usuário pode usar o **região e idioma** aplicativo **painel de controle** para personalizar os valores de propriedade da cultura de um existente.  
  
> [!NOTE]
>  Você pode usar o <xref:System.Globalization.CultureAndRegionInfoBuilder> classe para definir, salvar e registrar as culturas personalizadas que complementam ou substituem as culturas existentes. O <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A?displayProperty=nameWithType> método cria um arquivo de linguagem de marcação de dados de localidade (LDML) que pode ser usado para instalar uma cultura personalizada nos sistemas de destino. Para informações de etapas passo a passo sobre como usar o <xref:System.Globalization.CultureAndRegionInfoBuilder> classe para criar um novo ou cultura de substituição, consulte o <xref:System.Globalization.CultureAndRegionInfoBuilder> tópico da classe.  
  
 Como o .NET Framework dá suporte a culturas personalizadas, você deve considerar o seguinte ao trabalhar com dados específicos da cultura:  
  
-   Culturas personalizadas podem ter valores que excedem os intervalos das culturas predefinidos. Por exemplo, algumas culturas têm nomes de mês anormalmente longo, data inesperada ou formatos de hora ou outros dados incomuns.  
  
-   Quando você exibe dados específicos da cultura da interface do usuário, você deve respeitar as personalizações do usuário; Por exemplo, o usuário pode querer um relógio de 24 horas ou um formato de data AAAAMMDD.  
  
-   Lembre-se de culturas personalizadas substituem valores padrão. Portanto, você não pode considerar os dados de cultura sejam estáveis. Nomes de países, formatos de número e data e ortografias podem mudar no futuro. Se você deseja serializar os dados de diferenciação de cultura, como cadeias de caracteres de data e hora a serem passados para a data e hora, funções de análise, você deve usar a cultura invariável ou um específico.  
  
 O <xref:System.Globalization.CultureInfo.CultureTypes%2A> inclui o valor da propriedade de culturas personalizadas instaladas em um sistema de <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> sinalizador e culturas personalizadas são atribuídos um <xref:System.Globalization.CultureInfo.LCID%2A> valor da propriedade `LOCALE_CUSTOM_UNSPECIFIED` (0x1000 ou 4096). Observe que, começando com o Windows 10, esse valor também foi atribuído a culturas definidas pelo sistema que não têm dados culturais completa.  
  
<a name="Dynamic"></a>   
## <a name="dynamic-culture-data"></a>Dados de cultura dinâmica  
 Exceto para a cultura invariável, dados de cultura são dinâmicos. Isso é verdadeiro mesmo para as culturas predefinidas. Por exemplo, países ou regiões adotam novas moedas, alterar suas ortografias de palavras ou alterar seu calendário preferencial e definições de cultura alterar para controlar isso.  Culturas personalizadas estão sujeitos a alterações sem aviso prévio e qualquer cultura específica pode ser substituída por uma cultura substituta personalizado. Além disso, conforme discutido abaixo, um usuário individual pode substituir as preferências culturais. Aplicativos sempre devem obter dados de cultura em tempo de execução.  
  
> [!CAUTION]
>  Ao salvar os dados, seu aplicativo deve usar a cultura invariável, um formato binário ou um formato independente de cultura específico. Dados salvos de acordo com os valores atuais associados com uma determinada cultura, que não seja a cultura invariável, podem se tornar ilegíveis ou pode ser alterado em significado se aquela cultura for alterado.  
  
<a name="Current"></a>   
## <a name="the-current-culture-and-current-ui-culture"></a>A cultura atual e a cultura de interface do usuário atual  
 Cada thread em um aplicativo .NET Framework tem uma cultura atual e uma cultura de interface do usuário atual. A cultura atual determina as convenções de formatação de datas, horas, números e valores de moeda, a ordem de classificação de texto, convenções de maiusculas e minúsculas e as maneiras em que as cadeias de caracteres são comparadas. A cultura da interface do usuário atual é usada para recuperar recursos específicos de cultura em tempo de execução.  
  
> [!NOTE]
>  Para obter informações sobre como a cultura de interface do usuário atual e atual é determinada em uma base por thread, consulte o [cultura e threads](#Threads) seção. Para obter informações sobre como a cultura de interface do usuário atual e atual é determinada em threads em execução em um novo domínio de aplicativo e, em threads que ultrapassam os limites de domínio de aplicativo, consulte o [cultura e domínios de aplicativo](#AppDomain) seção. Para obter informações sobre como o atual e o atual é determinada em threads que executam operações assíncronas baseadas em tarefa, consulte o [cultura e operações assíncronas baseadas em tarefa](#Async) seção.  
  
 Para obter mais informações sobre a cultura atual, consulte o <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> tópico da propriedade. Para obter mais informações sobre a cultura de interface do usuário atual, consulte o <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> tópico da propriedade.  
  
### <a name="retrieving-the-current-and-current-ui-cultures"></a>Recuperando as culturas de interface do usuário atuais e atuais  
 Você pode obter um <xref:System.Globalization.CultureInfo> objeto que representa a cultura atual em qualquer uma das duas maneiras:  
  
-   Recuperando o valor da <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriedade.  
  
-   Recuperando o valor de [CurrentThread](<xref:System.Threading.Thread.CurrentCulture>) propriedade.  
  
 O exemplo a seguir recupera os dois valores de propriedade, compara-as para mostrar que eles são iguais e exibe o nome da cultura atual.  
  
 [!code-csharp[System.Globalization.CultureInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Current1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Current1.vb#1)]  
  
 Você pode obter um <xref:System.Globalization.CultureInfo> objeto que representa a cultura de interface do usuário atual em qualquer uma das duas maneiras:  
  
-   Recuperando o valor da <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propriedade.  
  
-   Recuperando o valor de [CurrentThread](<xref:System.Threading.Thread.CurrentUICulture>) propriedade.  
  
 O exemplo a seguir recupera os dois valores de propriedade, compara-as para mostrar que eles são iguais e exibe o nome da cultura da interface do usuário atual.  
  
 [!code-csharp[System.Globalization.CultureInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/CurrentUI1.cs#2)]
 [!code-vb[System.Globalization.CultureInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/CurrentUI1.vb#2)]  
  
### <a name="setting-the-current-and-current-ui-cultures"></a>Definindo as culturas de interface do usuário atuais e atuais  
 Para alterar a cultura e cultura da interface do usuário de um thread, faça o seguinte:  
  
1.  Criar uma instância de um <xref:System.Globalization.CultureInfo> objeto que representa a cultura chamando um <xref:System.Globalization.CultureInfo> da classe de construtor e passando o nome da cultura. O <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> construtor instancia um <xref:System.Globalization.CultureInfo> substituições de objeto que reflete o usuário se a nova cultura é o mesmo que a cultura atual do Windows.   O <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> construtor permite que você especifique se as instâncias recém-criadas <xref:System.Globalization.CultureInfo> objeto reflete as substituições de usuário se a nova cultura é o mesmo que a cultura atual do Windows.  
  
2.  Atribuir a <xref:System.Globalization.CultureInfo> do objeto para o <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> ou <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> propriedade. Além disso, para aplicativos em execução na versão 4.6 ou posterior do .NET Framework da área de trabalho, você também pode atribuir a <xref:System.Globalization.CultureInfo> do objeto para o <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> ou <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propriedade.  
  
 O exemplo a seguir recupera a cultura atual. Se for algo diferente de cultura Francês (França), ele muda a cultura atual para francês (França). Caso contrário, ele muda a cultura atual para francês (Luxemburgo).  
  
 [!code-csharp[System.Globalization.CultureInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Change1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Change1.vb#3)]  
  
 O exemplo a seguir recupera a cultura atual. Se qualquer coisa diferente é a cultura de esloveno (Eslovênia), ele altera a cultura atual para esloveno (Eslovênia). Caso contrário, ele muda a cultura atual para Croata (Croácia).  
  
 [!code-csharp[System.Globalization.CultureInfo#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/ChangeUI1.cs#4)]
 [!code-vb[System.Globalization.CultureInfo#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/ChangeUI1.vb#4)]  
  
<a name="GetAll"></a>   
## <a name="getting-all-cultures"></a>Obter todas as culturas  
 Você pode recuperar um categorias específicas de matriz de culturas ou de todas as culturas disponíveis no computador local chamando o <xref:System.Globalization.CultureInfo.GetCultures%2A> método. Por exemplo, você pode recuperar culturas personalizadas, culturas específicas ou culturas neutras sozinhos ou em combinação.  
  
 A exemplo a seguir chama o <xref:System.Globalization.CultureInfo.GetCultures%2A> método duas vezes, primeiro com o <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> membro de enumeração para recuperar todas as culturas personalizadas e, em seguida, com o <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> membro de enumeração para recuperar todas as culturas de substituição.  
  
 [!code-csharp[System.Globalization.CultureInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/GetCultures1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/GetCultures1.vb#5)]  
  
<a name="Threads"></a>   
## <a name="culture-and-threads"></a>Cultura e threads  
 Quando um novo thread de aplicativo é iniciado, sua cultura atual e a cultura de interface do usuário atual são definidas pela cultura atual do sistema e não pela cultura do thread atual. O exemplo a seguir ilustra a diferença. Ele define a cultura atual e a cultura de interface do usuário atual de um thread de aplicativo para a cultura Francês (França) (fr-FR). Se a cultura atual já for fr-FR, o exemplo define-o para a cultura do inglês (Estados Unidos) (en-US). Ele exibe três números aleatórios como valores de moeda e, em seguida, cria um novo thread, que, por sua vez, exibe três números mais aleatórios como valores de moeda. Mas, como a saída do exemplo mostra, os valores de moeda exibidos pelo novo thread não refletem as convenções de formatação da cultura Francês (França), ao contrário de saída do thread principal do aplicativo.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/defaultthread1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/defaultthread1.vb#1)]  
  
 Nas versões do .NET Framework antes do [!INCLUDE[net_v45](~/includes/net-v45-md.md)], a maioria dos maneira comum para garantir que o thread principal do aplicativo compartilha a mesma cultura com todos os outros threads de trabalho é passar o nome da cultura todo o aplicativo ou um <xref:System.Globalization.CultureInfo> do objeto representa a cultura de todo o aplicativo para um <xref:System.Threading.ParameterizedThreadStart?displayProperty=nameWithType> delegar. O exemplo a seguir usa essa abordagem para garantir que os valores de moeda exibidos por dois segmentos refletem as convenções de formatação da cultura a mesmo.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/perthread1.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/perthread1.vb#2)]  
  
 Você pode definir a cultura e cultura da interface do usuário do thread do pool de threads de maneira semelhante ao chamar o <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=nameWithType> método.  
  
 Começando com o [!INCLUDE[net_v45](~/includes/net-v45-md.md)], você pode definir a cultura e cultura da interface do usuário de todos os threads em um domínio de aplicativo mais diretamente por meio da atribuição uma <xref:System.Globalization.CultureInfo> objeto que representa a cultura para o <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> e <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedades. O exemplo a seguir usa essas propriedades para garantir que todos os threads no domínio do aplicativo padrão compartilham a mesma cultura.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/setthreads1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/setthreads1.vb#3)]  
  
> [!WARNING]
>  Embora o <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> e <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedades são membros estáticos, eles definem a cultura padrão e a cultura de interface do usuário padrão apenas para o domínio de aplicativo que está no momento em que esses valores de propriedade são definidos. Para obter mais informações, consulte a próxima seção, [cultura e domínios de aplicativo](#AppDomain).  
  
 Quando você atribui valores para o <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> e <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedades, a cultura e cultura da interface do usuário dos threads no domínio do aplicativo também alterar se eles não explicitamente receberam uma cultura. No entanto, esses segmentos refletem as novas configurações de cultura somente enquanto elas são executadas no domínio do aplicativo atual. Se esses threads são executados em outro domínio de aplicativo, sua cultura torna-se a cultura padrão definida para esse domínio de aplicativo. Como resultado, é recomendável que você sempre definir a cultura do thread principal do aplicativo e não contam com o <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> e <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedades alterá-la.  
  
<a name="AppDomain"></a>   
## <a name="culture-and-application-domains"></a>Domínios de aplicativo e de cultura  
 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> e <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> são propriedades estáticas que definem explicitamente uma cultura padrão apenas para o domínio de aplicativo que é o atual quando o valor da propriedade é definido ou recuperado. O exemplo a seguir define a cultura padrão e a cultura de interface do usuário padrão no domínio do aplicativo padrão para francês (França) e, em seguida, usa o <xref:System.AppDomainSetup> classe e o <xref:System.AppDomainInitializer> delegado para definir a cultura padrão e a cultura de interface do usuário em um novo domínio de aplicativo para Russo (Rússia). Um único thread, em seguida, executa dois métodos em cada domínio de aplicativo. Observe que o thread cultura e cultura da interface do usuário não estão explicitamente definidos; eles são derivados da cultura padrão e cultura de interface do usuário do domínio do aplicativo no qual o thread está em execução. Observe também que o <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> e <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedades retornam o padrão <xref:System.Globalization.CultureInfo> valores de domínio do aplicativo que é o atual quando é feita a chamada de método.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.AppDomain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.appdomain/cs/appdomainex1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.AppDomain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.appdomain/vb/appdomainex1.vb#1)]  
  
 Para obter mais informações sobre culturas e domínios de aplicativo, consulte a seção "Domínios de aplicativo e Threads" no tópico.  
  
<a name="Async"></a>   
## <a name="culture-and-task-based-asynchronous-operations"></a>Cultura e operações assíncronas baseadas em tarefa  
 O [padrão de programação assíncrono baseado em tarefa](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) usa <xref:System.Threading.Tasks.Task> e <xref:System.Threading.Tasks.Task%601> objetos sejam executadas assincronamente delegados no thread do pool de threads. O segmento específico no qual uma tarefa específica é executado não é conhecido de antemão, mas é determinado somente em tempo de execução.  
  
 Para aplicativos destinados a [!INCLUDE[net_v46](~/includes/net-v46-md.md)] ou versões posteriores, a cultura é parte do contexto de uma operação assíncrona. Em outras palavras, começando com os aplicativos que se destinam a [!INCLUDE[net_v46](~/includes/net-v46-md.md)], herdam de operações assíncronas, por padrão os valores da <xref:System.Globalization.CultureInfo.CurrentCulture%2A> e <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriedades do thread do qual eles são iniciados. Se a cultura atual ou a cultura de interface do usuário atual difere da cultura do sistema, a cultura atual cruza os limites de thread e torna-se a cultura atual do thread do pool que está executando uma operação assíncrona.  
  
 O exemplo a seguir fornece uma ilustração simples. Ele usa o <xref:System.Runtime.Versioning.TargetFrameworkAttribute> atributo como destino o [!INCLUDE[net_v46](~/includes/net-v46-md.md)]. O exemplo define uma <xref:System.Func%601> delegar, `formatDelegate`, que retorna alguns números formatados como valores de moeda. O exemplo altera a cultura atual do sistema para o francês (França) ou, caso o francês (França) já seja a cultura atual, o inglês (Estados Unidos). Ele então:  
  
-   Invoca o delegado diretamente para que seja executada de forma síncrona no thread principal do aplicativo.  
  
-   Cria uma tarefa que executa o delegado de forma assíncrona em um pool de threads.  
  
-   Cria uma tarefa que executa o delegado de forma síncrona no thread principal do aplicativo, chamando o <xref:System.Threading.Tasks.Task.RunSynchronously%2A?displayProperty=nameWithType> método.  
  
 Como mostra a saída do exemplo, quando a cultura atual é alterada para francês (França), a cultura atual do thread do qual as tarefas são invocadas de forma assíncrona torna-se a cultura atual para essa operação assíncrona.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture1.vb#1)]  
  
 Para aplicativos destinados a versões do .NET Framework anteriores ao [!INCLUDE[net_v46](~/includes/net-v46-md.md)], ou para aplicativos que não usam uma versão específica do .NET Framework, a cultura do thread de chamada não é parte do contexto da tarefa. Em vez disso, a menos que um é definido explicitamente, a cultura de novos threads por padrão é a cultura do sistema. O exemplo a seguir, que é idêntico ao exemplo anterior, exceto que ele não tem o <xref:System.Runtime.Versioning.TargetFrameworkAttribute> atributo, ilustra isso. Como a cultura do sistema do sistema no qual o exemplo é executado era inglês (Estados Unidos), a cultura da tarefa que executa de forma assíncrona em um pool de threads é en-US, em vez de fr-FR.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture2.vb#2)]  
  
 Para aplicativos destinados a versões do .NET Framework a partir o [!INCLUDE[net_v45](~/includes/net-v45-md.md)] e posterior, mas antes do [!INCLUDE[net_v46](~/includes/net-v46-md.md)], você pode usar o <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> e <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedades para garantir que a cultura do thread de chamada é usada em assíncrona as tarefas Execute em threads do pool. O exemplo a seguir é idêntico ao exemplo anterior, exceto que ele usa o <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> a propriedade para garantir que esse thread do pool de threads tem a mesma cultura que o thread principal do aplicativo.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture3.cs#3)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture3.vb#3)]  
  
 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> e <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> é por aplicativo propriedades de domínio; ou seja, eles estabelecem uma cultura padrão para todos os threads não foi explicitamente atribuído a uma cultura em um domínio de aplicativo específico. No entanto, para aplicativos destinados a [!INCLUDE[net_v46](~/includes/net-v46-md.md)] ou posterior, a cultura do thread de chamada continua a parte do contexto de uma tarefa assíncrona mesmo se a tarefa de cruza os limites de domínio de aplicativo.  
  
 O exemplo a seguir mostra que a cultura do thread de chamada permanece a cultura atual de uma operação assíncrona baseada em tarefa, mesmo se o método que a tarefa está em execução ultrapassa os limites de domínio de aplicativo. Ele define uma classe `DataRetriever`, com um único método, `GetFormattedNumber`, que retorna um número de ponto flutuante de precisão dupla aleatório entre 1 e 1.000 formatado como um valor de moeda. Uma primeira tarefa for executada e simplesmente cria uma instância de um `DataRetriever` instância e chama seu `GetFormattedNumber` método. Uma segunda tarefa relatórios de seu domínio de aplicativo atual, cria um novo domínio de aplicativo, cria uma instância de um `DataRetriever` instância no novo domínio de aplicativo e chama seu `GetFormattedNumber` método. Como mostra a saída do exemplo, a cultura atual permaneceu a mesma no thread de chamada, a primeira tarefa e a segunda tarefa ambos os quando ele estava em execução no domínio do aplicativo principal e o segundo domínio de aplicativo.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture4.cs#4)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture4.vb#4)]  
  
<a name="Serialization"></a>   
## <a name="cultureinfo-object-serialization"></a>Serialização de objeto CultureInfo  
 Quando um <xref:System.Globalization.CultureInfo> objeto é serializado, tudo o que é armazenado, na verdade, é <xref:System.Globalization.CultureInfo.Name%2A> e <xref:System.Globalization.CultureInfo.UseUserOverride%2A>. Ele é desserializado com êxito somente em um ambiente onde que <xref:System.Globalization.CultureInfo.Name%2A> tem o mesmo significado. Os três exemplos a seguir mostram por que isso não é sempre o caso:  
  
-   Se o <xref:System.Globalization.CultureInfo.CultureTypes%2A> é o valor da propriedade <xref:System.Globalization.CultureTypes?displayProperty=nameWithType>, e se aquela cultura originalmente introduzida no Windows Vista ou uma versão posterior do sistema operacional Windows, não é possível desserializar no Windows XP. Da mesma forma, se a cultura foi introduzido pela primeira vez no Windows XP Service Pack 2, não é possível desserializar para um sistema Windows XP em que a cultura não foi instalada.  
  
-   Se o <xref:System.Globalization.CultureInfo.CultureTypes%2A> valor é <xref:System.Globalization.CultureTypes?displayProperty=nameWithType>e o computador no qual ele é desserializado não tem essa cultura personalizada de usuário instalada, não é possível desserializar ele.  
  
-   Se o <xref:System.Globalization.CultureInfo.CultureTypes%2A> valor é <xref:System.Globalization.CultureTypes?displayProperty=nameWithType>e o computador no qual ele é desserializado não tem essa cultura de substituição, ela desfaz o mesmo nome, mas nem todas as mesmas características. Por exemplo, en-US é uma cultura substituta no computador A, mas não no computador B e se um <xref:System.Globalization.CultureInfo> referindo-se a essa cultura é serializado no computador A e desserializado no computador B, então nenhuma das características da cultura personalizadas é de objeto transmitidos. A cultura desfaz com êxito, mas com um significado diferente.  
  
<a name="CPanel"></a>   
## <a name="control-panel-overrides"></a>Substituições do painel de controle  
 O usuário pode optar por substituir alguns dos valores associados com a cultura atual do Windows por meio de parte de opções regionais e de idioma do painel de controle. Por exemplo, o usuário pode escolher para exibir a data em um formato diferente ou usar uma moeda diferente do padrão para a cultura. Em geral, os aplicativos devem honrar essas substituições do usuário.  
  
 Se <xref:System.Globalization.CultureInfo.UseUserOverride%2A> está `true` e a cultura especificada corresponde a cultura atual do Windows, o <xref:System.Globalization.CultureInfo> usa essas substituições, incluindo as configurações de usuário para as propriedades do <xref:System.Globalization.DateTimeFormatInfo> instância retornada pela <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriedade, e as propriedades do <xref:System.Globalization.NumberFormatInfo> instância retornada pela <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade. Se as configurações do usuário são incompatíveis com a cultura associada com o <xref:System.Globalization.CultureInfo>, por exemplo, se o calendário selecionado não é um do <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, os resultados dos métodos e os valores das propriedades são indefinidos.  
  
<a name="AlternateSort"></a>   
## <a name="alternate-sort-orders"></a>Ordens de classificação alternativas  
 Algumas culturas oferecem suporte a mais de uma ordem de classificação. Por exemplo:  
  
-   A cultura de espanhol (Espanha) tem duas ordens de classificação: a ordem de classificação internacional padrão e a ordem de classificação tradicional. Quando você instancia um <xref:System.Globalization.CultureInfo> do objeto com o nome da cultura es-ES, a ordem de classificação internacional é usada. Quando você instancia um <xref:System.Globalization.CultureInfo> do objeto com o nome de cultura es-ES-tradnl, a ordem de classificação tradicional é usada.  
  
-   A cultura zh-CN (chinês (simplificado, República Popular da China)) dá suporte a duas ordens de classificação: por pronúncia (padrão) e por contagem de traços. Quando você instancia um <xref:System.Globalization.CultureInfo> do objeto com o nome da cultura zh-CN, a ordem de classificação padrão é usada. Quando você instancia um <xref:System.Globalization.CultureInfo> do objeto com um identificador de local de 0x00020804, cadeias de caracteres são classificadas por contagem de traços.  
  
 A tabela a seguir lista as culturas que oferecem suporte a ordens de classificação alternativas e os identificadores para o padrão e as ordens de classificação alternativas.  
  
|Nome da cultura|Cultura|Identificador e nome de classificação padrão|Identificador e nome de classificação alternativas|  
|------------------|-------------|--------------------------------------|----------------------------------------|  
|es-ES|Espanhol (Espanha)|International: 0x00000C0A|Tradicional: 0x0000040A|  
|zh-TW|Chinês (Taiwan)|Contagem de traços: 0x00000404|Bopomofo: 0x00030404|  
|zh-CN|Chinês (República Popular da China)|Pronúncia: 0x00000804|Contagem de traços: 0x00020804|  
|zh-HK|Chinês (RAE de Hong Kong)|Contagem de traços: 0x00000c04|Contagem de traços: 0x00020c04|  
|zh-SG|Chinês (Cingapura)|Pronúncia: 0x00001004|Contagem de traços: 0x00021004|  
|zh-MO|Chinês (RAE de MACAU)|Pronúncia: 0x00001404|Contagem de traços: 0x00021404|  
|ja-JP|Japonês (Japão)|Padrão: 0x00000411|Unicode: 0x00010411|  
|ko-KR|Coreano (Coreia)|Padrão: 0x00000412|Coreano Xwansung - Unicode: 0x00010412|  
|de-DE|Alemão (Alemanha)|Dicionário: 0x00000407|DIN de classificação de catálogo telefônico: 0x00010407|  
|hu-HU|Húngaro (Hungria)|Padrão: 0x0000040e|Classificação técnica: 0x0001040e|  
|Ka-GE|Georgiano (Geórgia)|Tradicional: 0x00000437|Classificação moderna: 0x00010437|  
  
<a name="Windows"></a>   
## <a name="the-current-culture-and-uwp-apps"></a>A cultura atual e a aplicativos UWP  
 Em aplicativos da plataforma Universal do Windows (UWP), o <xref:System.Globalization.CultureInfo.CurrentCulture%2A> e <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriedades são leitura / gravação, como elas são em aplicativos do .NET Framework e .NET Core. No entanto, os aplicativos UWP reconhecem uma única cultura. O <xref:System.Globalization.CultureInfo.CurrentCulture%2A> e <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> mapa de propriedades para o primeiro valor a [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) coleção.  

Em aplicativos do .NET Framework e .NET Core, a cultura atual é uma configuração por thread e o <xref:System.Globalization.CultureInfo.CurrentCulture%2A> e <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriedades refletem a cultura e cultura da interface do usuário do thread atual. Em aplicativos UWP, a cultura atual é mapeado para o [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) coleção, que é uma configuração global. Definindo o <xref:System.Globalization.CultureInfo.CurrentCulture%2A> ou <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriedade altera a cultura do aplicativo inteiro; a cultura não pode ser definida em uma base por thread.
  
## Examples  
 O exemplo a seguir mostra como criar uma <xref:System.Globalization.CultureInfo> objeto para Espanhol (Espanha) com a classificação internacional e outro <xref:System.Globalization.CultureInfo> objeto com a classificação tradicional.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
    <altmember cref="T:System.Globalization.RegionInfo" />
    <related type="Article" href="/globalization/index">Go Global Developer Center</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Globalization.CultureInfo" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(int culture);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : int -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo culture" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="culture">Um identificador <see cref="T:System.Globalization.CultureInfo" /> predefinido, a propriedade <see cref="P:System.Globalization.CultureInfo.LCID" /> de um objeto <see cref="T:System.Globalization.CultureInfo" /> existente ou identificador de cultura somente do Windows.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Globalization.CultureInfo" /> com base na cultura especificada pelo identificador de cultura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de cultura predefinidos estão listados na [suporte ao idioma nacional (NLS) API de referência](https://go.microsoft.com/fwlink/?LinkId=200048) no Go Global Developer Center.  
  
 Na maioria dos casos, o `culture` parâmetro é mapeado para o identificador de localidade de suporte ao idioma nacional (NLS) correspondente. O valor da `culture` parâmetro se tornará o valor a <xref:System.Globalization.CultureInfo.LCID%2A> propriedade da nova <xref:System.Globalization.CultureInfo>.  
  
 É recomendável que você chame o construtor de nome de localidade <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>, porque os nomes de localidades são preferíveis aos LCIDs. Para localidades personalizadas, é necessário um nome de localidade.  
  
 O usuário pode optar por substituir alguns dos valores associados com a cultura atual do Windows por meio de parte de opções regionais e de idioma do painel de controle. Por exemplo, o usuário pode escolher para exibir a data em um formato diferente ou usar uma moeda diferente do padrão para a cultura. Se o identificador de cultura especificado corresponde ao identificador de cultura da cultura atual do Windows, este construtor cria um <xref:System.Globalization.CultureInfo> que usa essas substituições, incluindo as configurações de usuário para as propriedades do <xref:System.Globalization.DateTimeFormatInfo> instância retornada pela <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriedade e as propriedades do <xref:System.Globalization.NumberFormatInfo> instância retornada pela <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade. Se as configurações do usuário são incompatíveis com a cultura associada com o <xref:System.Globalization.CultureInfo> (por exemplo, se o calendário selecionado não é um do <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>) os resultados dos métodos e os valores das propriedades são indefinidos.  
  
 Se o identificador de cultura especificada não coincide com o identificador da cultura atual do Windows, este construtor cria um <xref:System.Globalization.CultureInfo> que usa os valores padrão para a cultura especificada.  
  
 O <xref:System.Globalization.CultureInfo.UseUserOverride%2A> propriedade é sempre definida como `true`.  
  
 Por exemplo, suponha que árabe (Arábia Saudita) é a cultura atual do Windows e o usuário alterou o calendário do islâmico como gregoriano.  
  
-   Com o `CultureInfo("0x0401")` (ar-SA de nome de cultura), <xref:System.Globalization.CultureInfo.Calendar%2A> é definido como <xref:System.Globalization.GregorianCalendar> (que é a configuração do usuário) e <xref:System.Globalization.CultureInfo.UseUserOverride%2A> está definido como `true`.  
  
-   Com o `CultureInfo("0x041E")` (th-TH de nome de cultura), <xref:System.Globalization.CultureInfo.Calendar%2A> é definido como <xref:System.Globalization.ThaiBuddhistCalendar> (que é o calendário padrão para th-TH) e <xref:System.Globalization.CultureInfo.UseUserOverride%2A> está definido como `true`.  
  
 Para as culturas que usam o euro, o .NET Framework e o Windows XP definem a moeda padrão como euro. No entanto, versões mais antigas do Windows não. Portanto, se o usuário de uma versão anterior do Windows não tiver alterado a configuração de moeda por meio de parte de opções regionais e de idioma do painel de controle, a moeda pode estar incorreta. Para usar a configuração padrão do .NET Framework para a moeda, o aplicativo deve usar um <xref:System.Globalization.CultureInfo> sobrecarga de construtor que aceita um `useUserOverride` parâmetro e defini-lo como `false`.  
  
> [!NOTE]
>  Para com versões anteriores compatibilidade, uma cultura construído usando um `culture` parâmetro 0x0004 ou 0x7c04 terá um <xref:System.Globalization.CultureInfo.Name%2A> propriedade de zh-CHS ou zh-CHT, respectivamente. Em vez disso, você deve preferir construir a cultura usando os nomes de cultura padrão atual de zh-Hans ou zh-Hant, a menos que você tenha um motivo para usar os nomes antigos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="culture" /> é menor que zero.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="culture" /> não é um identificador de cultura válido. Para obter mais informações, consulte a seção Observações para chamadores.</exception>
        <block subset="none" type="usage">
          <para>O [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] e versões anteriores geram uma <see cref="T:System.ArgumentException" /> se <paramref name="culture" /> não é um identificador de cultura válido. Começando com o [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], o construtor lança um <see cref="T:System.Globalization.CultureNotFoundException" />. Começando com os aplicativos que são executados sob o [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] ou posterior no Windows 7 ou posterior, o método tenta recuperar um <see cref="T:System.Globalization.CultureInfo" /> objeto cujo identificador é <paramref name="culture" /> do sistema operacional; se o sistema operacional não der suporte a essa cultura, o método lança um <see cref="T:System.Globalization.CultureNotFoundException" /> exceção.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : string -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Um nome de <see cref="T:System.Globalization.CultureInfo" /> predefinido, <see cref="P:System.Globalization.CultureInfo.Name" /> de um <see cref="T:System.Globalization.CultureInfo" /> existente, ou o nome da cultura somente do Windows. <c>name</c> não diferencia maiúsculas de minúsculas.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Globalization.CultureInfo" /> com base na cultura especificada por nome.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter uma lista de nomes de cultura predefinidos, consulte a [suporte ao idioma nacional (NLS) API de referência](https://go.microsoft.com/fwlink/?LinkId=200048) no Go Global Developer Center. Além disso, começando com o Windows 10, `name` pode ser qualquer marca de idioma BCP-47 válida.  
  
 Se `name` está <xref:System.String.Empty?displayProperty=nameWithType>, o construtor cria uma instância da cultura invariável; isso é equivalente a recuperar o valor da <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriedade.  
  
 O usuário pode optar por substituir alguns dos valores associados com a cultura atual do Windows por meio de parte de opções regionais e de idioma do painel de controle. Por exemplo, o usuário pode escolher para exibir a data em um formato diferente ou usar uma moeda diferente do padrão para a cultura. Se o identificador de cultura associada `name` corresponde ao identificador de cultura da cultura atual do Windows, esse construtor cria um <xref:System.Globalization.CultureInfo> objeto que usa essas substituições, incluindo as configurações de usuário das propriedades de <xref:System.Globalization.DateTimeFormatInfo>instância retornada pela <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriedade e as propriedades da <xref:System.Globalization.NumberFormatInfo> instância retornada pela <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade. Se as configurações do usuário são incompatíveis com a cultura associada com o <xref:System.Globalization.CultureInfo>, por exemplo, se o calendário selecionado não é um do <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, os resultados dos métodos e os valores das propriedades são indefinidos.  
  
 Se o identificador de cultura associada `name` não corresponde ao identificador de cultura da cultura atual do Windows, esse construtor cria um <xref:System.Globalization.CultureInfo> objeto que usa os valores padrão para a cultura especificada.  
  
 O <xref:System.Globalization.CultureInfo.UseUserOverride%2A> propriedade é sempre definida como `true`.  
  
 Por exemplo, suponha que árabe (Arábia Saudita) é a cultura atual do Windows e o usuário alterou o calendário da islâmico como gregoriano.  
  
-   Com o `CultureInfo("ar-SA")`, <xref:System.Globalization.CultureInfo.Calendar%2A> é definido como <xref:System.Globalization.GregorianCalendar> (que é a configuração do usuário) e <xref:System.Globalization.CultureInfo.UseUserOverride%2A> está definido como `true`.  
  
-   Com o `CultureInfo("th-TH")`, <xref:System.Globalization.CultureInfo.Calendar%2A> é definido como <xref:System.Globalization.ThaiBuddhistCalendar> (que é o calendário padrão para th-TH) e <xref:System.Globalization.CultureInfo.UseUserOverride%2A> está definido como `true`.  
  
 O <xref:System.Globalization.CultureInfo.LCID%2A> propriedade da nova <xref:System.Globalization.CultureInfo> é definido como o identificador de cultura associado com o nome especificado.  
  
 Para as culturas que usam o euro, o .NET Framework e o Windows XP definem a moeda padrão como euro. No entanto, versões mais antigas do Windows não fazem isso. Portanto, se o usuário de uma versão anterior do Windows não tiver alterado a configuração de moeda por meio de parte de opções regionais e de idioma do painel de controle, a moeda pode estar incorreta. Para usar a configuração padrão do .NET Framework para a moeda, o aplicativo deve usar um <xref:System.Globalization.CultureInfo> sobrecarga de construtor que aceita um `useUserOverride` parâmetro e defini-lo como `false`.  
  
   
  
## Examples  
 O exemplo a seguir recupera a cultura atual. Se for algo diferente de cultura Francês (França), ele chama o <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> construtor para instanciar um <xref:System.Globalization.CultureInfo> objeto que representa a cultura Francês (França) e torna a cultura do thread atual. Caso contrário, ele instancia um <xref:System.Globalization.CultureInfo> objeto que representa a cultura Francês (Luxemburgo) e torna a cultura atual.  
  
 [!code-csharp[System.Globalization.CultureInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Change1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Change1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> é nulo.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> não é um nome de cultura válido. Para obter mais informações, consulte a seção Observações para Chamadores.</exception>
        <block subset="none" type="usage">
          <para>O [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] e versões anteriores geram uma <see cref="T:System.ArgumentException" /> se <paramref name="name" /> não é um nome de cultura válido. Começando com o [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], o construtor lança um <see cref="T:System.Globalization.CultureNotFoundException" />. Começando com os aplicativos que são executados sob o [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] ou posterior no Windows 7 ou posterior, o método tenta recuperar um <see cref="T:System.Globalization.CultureInfo" /> objeto cujo identificador é <paramref name="name" /> do sistema operacional; se o sistema operacional não oferece suporte a essa cultura e se <paramref name="name" /> não é o nome de uma cultura suplementar ou de substituição, o método lança um <see cref="T:System.Globalization.CultureNotFoundException" /> exceção.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (int culture, bool useUserOverride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 culture, bool useUserOverride) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As Integer, useUserOverride As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(int culture, bool useUserOverride);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : int * bool -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo (culture, useUserOverride)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
        <Parameter Name="useUserOverride" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="culture">Um identificador <see cref="T:System.Globalization.CultureInfo" /> predefinido, a propriedade <see cref="P:System.Globalization.CultureInfo.LCID" /> de um objeto <see cref="T:System.Globalization.CultureInfo" /> existente ou identificador de cultura somente do Windows.</param>
        <param name="useUserOverride">Um valor booliano que indica se é necessário usar as configurações de cultura selecionadas pelo usuário (<see langword="true" />) ou as configurações de cultura padrão (<see langword="false" />).</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Globalization.CultureInfo" /> com base na cultura especificada pelo identificador de cultura e no booliano que especifica se é necessário usar as configurações de cultura do selecionadas pelo usuário do sistema.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de cultura predefinidos estão listados na [suporte ao idioma nacional (NLS) API de referência](https://go.microsoft.com/fwlink/?LinkId=200048) no Go Global Developer Center.  
  
 Na maioria dos casos, o `culture` parâmetro é mapeado para o identificador de localidade de suporte ao idioma nacional (NLS) correspondente. O valor da `culture` parâmetro se tornará o valor a <xref:System.Globalization.CultureInfo.LCID%2A> propriedade da nova <xref:System.Globalization.CultureInfo>.  
  
 É recomendável que você chame o construtor de nome de localidade <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>, porque os nomes de localidades são preferíveis aos LCIDs. Para localidades personalizadas, é necessário um nome de localidade.  
  
 O usuário pode optar por substituir alguns dos valores associados com a cultura atual do Windows por meio de parte de opções regionais e de idioma do painel de controle. Por exemplo, o usuário pode escolher para exibir a data em um formato diferente ou usar uma moeda diferente do padrão para a cultura.  
  
 Aplicativos normalmente não devem permitir substituições do usuário. Observe que a desabilitação de substituições em si garante a estabilidade dos dados; Consulte a entrada de blog [dados de cultura não devem ser considerados estáveis (exceto invariável)](https://go.microsoft.com/fwlink/?LinkId=156850).  
  
 Se o <xref:System.Globalization.CultureInfo.UseUserOverride%2A> estiver definida como `true` e o identificador de cultura especificado corresponde ao identificador da cultura atual do Windows, este construtor cria um <xref:System.Globalization.CultureInfo> que usa essas substituições, incluindo as configurações de usuário para as propriedades dos <xref:System.Globalization.DateTimeFormatInfo> instância retornada pela <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriedade e as propriedades da <xref:System.Globalization.NumberFormatInfo> instância retornada pela <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade. Se as configurações do usuário são incompatíveis com a cultura associada com o <xref:System.Globalization.CultureInfo>, por exemplo, se o calendário selecionado não é um do <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, os resultados dos métodos e os valores das propriedades são indefinidos.  
  
 Caso contrário, esse construtor cria um <xref:System.Globalization.CultureInfo> que usa os valores padrão para a cultura especificada.  
  
 O valor da `useUserOverride` parâmetro torna-se o valor da <xref:System.Globalization.CultureInfo.UseUserOverride%2A> propriedade.  
  
 Por exemplo, suponha que árabe (Arábia Saudita) é a cultura atual do Windows e o usuário alterou o calendário do islâmico como gregoriano.  
  
-   Com o `CultureInfo("0x0401", true)` (ar-SA de nome de cultura), <xref:System.Globalization.CultureInfo.Calendar%2A> é definido como <xref:System.Globalization.GregorianCalendar> (que é a configuração do usuário) e <xref:System.Globalization.CultureInfo.UseUserOverride%2A> está definido como `true`.  
  
-   Com o `CultureInfo("0x0401", false)` (ar-SA de nome de cultura), <xref:System.Globalization.CultureInfo.Calendar%2A> é definido como <xref:System.Globalization.HijriCalendar> (que é o calendário padrão para ar-SA) e <xref:System.Globalization.CultureInfo.UseUserOverride%2A> está definido como `false`.  
  
-   Com o `CultureInfo("0x041E", true)` (th-TH de nome de cultura), <xref:System.Globalization.CultureInfo.Calendar%2A> é definido como <xref:System.Globalization.ThaiBuddhistCalendar> (que é o calendário padrão para th-TH) e <xref:System.Globalization.CultureInfo.UseUserOverride%2A> está definido como `true`.  
  
-   Com o `CultureInfo("0x041E", false)` (th-TH de nome de cultura), <xref:System.Globalization.CultureInfo.Calendar%2A> é definido como <xref:System.Globalization.ThaiBuddhistCalendar> (que é o calendário padrão para th-TH) e <xref:System.Globalization.CultureInfo.UseUserOverride%2A> está definido como `false`.  
  
 Para as culturas que usam o euro, o .NET Framework e o Windows XP definem a moeda padrão como euro. No entanto, versões mais antigas do Windows não. Portanto, se o usuário de uma versão anterior do Windows não tiver alterado a configuração de moeda por meio de parte de opções regionais e de idioma do painel de controle, a moeda pode estar incorreta. Para usar a configuração padrão do .NET Framework para a moeda, o aplicativo deve definir a `useUserOverride` parâmetro para `false`.  
  
> [!NOTE]
>  Para com versões anteriores compatibilidade, uma cultura construído usando um `culture` parâmetro 0x0004 ou 0x7c04 terá um <xref:System.Globalization.CultureInfo.Name%2A> propriedade de zh-CHS ou zh-CHT, respectivamente. Em vez disso, você deve preferir construir a cultura usando os nomes de cultura padrão atual de zh-Hans ou zh-Hant, a menos que você tenha um motivo para usar os nomes antigos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="culture" /> é menor que zero.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="culture" /> não é um identificador de cultura válido. Para obter mais informações, consulte a seção Observações para chamadores.</exception>
        <block subset="none" type="usage">
          <para>O [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] e versões anteriores geram uma <see cref="T:System.ArgumentException" /> se <paramref name="culture" /> não é um identificador de cultura válido. Começando com o [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], o construtor lança um <see cref="T:System.Globalization.CultureNotFoundException" />. Começando com os aplicativos que são executados sob o [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] ou posterior no Windows 7 ou posterior, o método tenta recuperar um <see cref="T:System.Globalization.CultureInfo" /> objeto cujo identificador é <paramref name="culture" /> do sistema operacional; se o sistema operacional não der suporte a essa cultura, o método lança um <see cref="T:System.Globalization.CultureNotFoundException" /> exceção.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (string name, bool useUserOverride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, bool useUserOverride) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, useUserOverride As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(System::String ^ name, bool useUserOverride);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : string * bool -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo (name, useUserOverride)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="useUserOverride" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Um nome de <see cref="T:System.Globalization.CultureInfo" /> predefinido, <see cref="P:System.Globalization.CultureInfo.Name" /> de um <see cref="T:System.Globalization.CultureInfo" /> existente, ou o nome da cultura somente do Windows. <c>name</c> não diferencia maiúsculas de minúsculas.</param>
        <param name="useUserOverride">Um valor booliano que indica se é necessário usar as configurações de cultura selecionadas pelo usuário (<see langword="true" />) ou as configurações de cultura padrão (<see langword="false" />).</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Globalization.CultureInfo" /> com base na cultura especificada pelo nome e no booliano que especifica se é necessário usar as configurações de cultura do selecionadas pelo usuário do sistema.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter uma lista de nomes de cultura predefinidos, consulte a [suporte ao idioma nacional (NLS) API de referência](https://go.microsoft.com/fwlink/?LinkId=200048) no Go Global Developer Center. Além disso, começando com o Windows 10, `name` pode ser qualquer marca de idioma BCP-47 válida.  
  
 Se `name` está <xref:System.String.Empty?displayProperty=nameWithType>, o construtor cria uma instância da cultura invariável; isso é equivalente a recuperar o valor da <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriedade.  
  
 O usuário pode optar por substituir alguns dos valores associados com a cultura atual do Windows por meio de parte de opções regionais e de idioma do painel de controle. Por exemplo, o usuário pode escolher para exibir a data em um formato diferente ou usar uma moeda diferente do padrão para a cultura.  
  
 Aplicativos normalmente não devem permitir substituições do usuário. Observe que a desabilitação de substituições em si garante a estabilidade dos dados; Consulte a entrada de blog [dados de cultura não devem ser considerados estáveis (exceto invariável)](https://go.microsoft.com/fwlink/?LinkId=156850).  
  
 Se o <xref:System.Globalization.CultureInfo.UseUserOverride%2A> estiver definida como `true` e o identificador de cultura associado com o nome da cultura especificado corresponde ao identificador de cultura da cultura atual do Windows, este construtor cria um <xref:System.Globalization.CultureInfo> que usa essas substituições incluindo configurações do usuário para as propriedades do <xref:System.Globalization.DateTimeFormatInfo> instância retornada pela <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriedade e as propriedades da <xref:System.Globalization.NumberFormatInfo> instância retornada pela <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade. Se as configurações do usuário são incompatíveis com a cultura associada com o <xref:System.Globalization.CultureInfo>, por exemplo, se o calendário selecionado não é um do <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, os resultados dos métodos e os valores das propriedades são indefinidos.  
  
 Caso contrário, esse construtor cria um <xref:System.Globalization.CultureInfo> que usa os valores padrão para a cultura especificada.  
  
 O valor da `useUserOverride` parâmetro torna-se o valor da <xref:System.Globalization.CultureInfo.UseUserOverride%2A> propriedade.  
  
 Por exemplo, suponha que árabe (Arábia Saudita) é a cultura atual do Windows e o usuário alterou o calendário da islâmico como gregoriano.  
  
-   Com o `CultureInfo("ar-SA", true)`, <xref:System.Globalization.CultureInfo.Calendar%2A> é definido como <xref:System.Globalization.GregorianCalendar> (que é a configuração do usuário) e <xref:System.Globalization.CultureInfo.UseUserOverride%2A> está definido como `true`.  
  
-   Com o `CultureInfo("ar-SA", false)`, <xref:System.Globalization.CultureInfo.Calendar%2A> é definido como <xref:System.Globalization.HijriCalendar> (que é o calendário padrão para ar-SA) e <xref:System.Globalization.CultureInfo.UseUserOverride%2A> está definido como `false`.  
  
-   Com o `CultureInfo("th-TH", true)`, <xref:System.Globalization.CultureInfo.Calendar%2A> é definido como <xref:System.Globalization.ThaiBuddhistCalendar> (que é o calendário padrão para th-TH) e <xref:System.Globalization.CultureInfo.UseUserOverride%2A> está definido como `true`.  
  
-   Com o `CultureInfo("th-TH", false)`, <xref:System.Globalization.CultureInfo.Calendar%2A> é definido como <xref:System.Globalization.ThaiBuddhistCalendar> (que é o calendário padrão para th-TH) e <xref:System.Globalization.CultureInfo.UseUserOverride%2A> está definido como `false`.  
  
 O <xref:System.Globalization.CultureInfo.LCID%2A> propriedade da nova <xref:System.Globalization.CultureInfo> é definido como o identificador de cultura associado com o nome especificado.  
  
 Para as culturas que usam o euro, o .NET Framework e o Windows XP definem a moeda padrão como euro. No entanto, versões mais antigas do Windows não fazem isso. Portanto, se o usuário de uma versão anterior do Windows não tiver alterado a configuração de moeda por meio de parte de opções regionais e de idioma do painel de controle, a moeda pode estar incorreta. Para usar a configuração padrão do .NET Framework para a moeda, o aplicativo deve definir a `useUserOverride` parâmetro para `false`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> é nulo.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> não é um nome de cultura válido. Para obter mais informações, consulte a seção Observações para chamadores.</exception>
        <block subset="none" type="usage">
          <para>O [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] e versões anteriores geram uma <see cref="T:System.ArgumentException" /> se <paramref name="name" /> não é um nome de cultura válido. Começando com o [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], o construtor lança um <see cref="T:System.Globalization.CultureNotFoundException" />. Começando com os aplicativos que são executados sob o [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] ou posterior no Windows 7 ou posterior, o método tenta recuperar um <see cref="T:System.Globalization.CultureInfo" /> objeto cujo identificador é <paramref name="name" /> do sistema operacional; se o sistema operacional não oferece suporte a essa cultura e se <paramref name="name" /> não é o nome de uma cultura suplementar ou de substituição, o método lança um <see cref="T:System.Globalization.CultureNotFoundException" /> exceção.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Calendar">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.Calendar Calendar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar Calendar" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Calendar" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Calendar As Calendar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::Calendar ^ Calendar { System::Globalization::Calendar ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Calendar : System.Globalization.Calendar" Usage="System.Globalization.CultureInfo.Calendar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o calendário padrão usado pela cultura.</summary>
        <value>Um <see cref="T:System.Globalization.Calendar" /> que representa o calendário padrão usado pela cultura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O usuário pode optar por substituir alguns dos valores associados com a cultura atual do Windows por meio de parte de opções regionais e de idioma do painel de controle. Por exemplo, o usuário pode escolher para exibir a data em um formato diferente ou usar uma moeda diferente do padrão para a cultura.  
  
 Se <xref:System.Globalization.CultureInfo.UseUserOverride%2A> está `true` e a cultura especificada corresponde a cultura atual do Windows, o <xref:System.Globalization.CultureInfo> usa essas substituições, incluindo as configurações de usuário para as propriedades do <xref:System.Globalization.DateTimeFormatInfo> instância retornada pela <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriedade, e as propriedades do <xref:System.Globalization.NumberFormatInfo> instância retornada pela <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade. Se as configurações do usuário são incompatíveis com a cultura associada com o <xref:System.Globalization.CultureInfo>, por exemplo, se o calendário selecionado não é um do <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, os resultados dos métodos e os valores das propriedades são indefinidos.  
  
 Portanto, se <xref:System.Globalization.CultureInfo.UseUserOverride%2A> é `true`, o valor dessa propriedade pode ser diferente do calendário padrão usado pela cultura.  
  
 Seu aplicativo altera o calendário usado por atual <xref:System.Globalization.CultureInfo> definindo o <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> propriedade de <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, que é uma instância da <xref:System.Globalization.DateTimeFormatInfo> classe. O novo calendário deve ser um dos calendários listados no <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> também inclui outras propriedades que personalizar a formatação de data e hora associados a esse <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearCachedData();" />
      <MemberSignature Language="F#" Value="member this.ClearCachedData : unit -&gt; unit" Usage="cultureInfo.ClearCachedData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Atualiza as informações relacionadas à cultura armazenadas em cache.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Informações, como os padrões de formato e a cultura padrão, é armazenado em cache na primeira vez que ele é solicitado. Que informações podem alterar durante a vida útil do <xref:System.AppDomain>, por exemplo, quando o usuário modifica a parte de opções regionais e de idioma do painel de controle. No entanto, o <xref:System.Globalization.CultureInfo> classe não detecta automaticamente as alterações nas configurações do sistema.  
  
 O <xref:System.Globalization.CultureInfo.ClearCachedData%2A> método limpa o cache de <xref:System.Globalization.CultureInfo> objetos criados por <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> e atualiza as informações a <xref:System.Globalization.CultureInfo.CurrentCulture%2A>, <xref:System.Globalization.CultureInfo.CurrentUICulture%2A>, e <xref:System.Globalization.RegionInfo.CurrentRegion%2A> propriedades, com base nas configurações do sistema atual.  
  
 O <xref:System.Globalization.CultureInfo.ClearCachedData%2A> método não atualiza as informações de <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> propriedade para threads existentes. No entanto, threads futuras terão qualquer novo <xref:System.Globalization.CultureInfo> valores de propriedade.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="cultureInfo.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cria uma cópia das <see cref="T:System.Globalization.CultureInfo" /> atuais.</summary>
        <returns>Uma cópia das <see cref="T:System.Globalization.CultureInfo" /> atuais.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O clone é gravável, mesmo que o original <xref:System.Globalization.CultureInfo> é somente leitura. Portanto, as propriedades do clone podem ser modificadas.  
  
 Uma cópia superficial de um objeto é uma cópia do objeto apenas. Se o objeto contiver referências a outros objetos, a cópia superficial não cria cópias dos objetos referenciados. Ele se refere aos objetos originais em vez disso. Em contraste, uma cópia em profundidade de um objeto cria uma cópia do objeto e uma cópia de tudo direta ou indiretamente referenciado por esse objeto.  
  
 O <xref:System.Globalization.CultureInfo.Clone%2A> método cria uma cópia superficial aprimorada. Os objetos retornados pela <xref:System.Globalization.CultureInfo.NumberFormat%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.TextInfo%2A>, e <xref:System.Globalization.CultureInfo.Calendar%2A> propriedades também são copiadas. Consequentemente, clonado <xref:System.Globalization.CultureInfo> objeto pode modificar suas propriedades copiadas sem afetar o original <xref:System.Globalization.CultureInfo> objeto.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra CultureInfo.Clone também clona o <xref:System.Globalization.DateTimeFormatInfo> e <xref:System.Globalization.NumberFormatInfo> instâncias associadas a <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CompareInfo">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.CompareInfo CompareInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CompareInfo CompareInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CompareInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CompareInfo As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CompareInfo ^ CompareInfo { System::Globalization::CompareInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CompareInfo : System.Globalization.CompareInfo" Usage="System.Globalization.CultureInfo.CompareInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o <see cref="T:System.Globalization.CompareInfo" /> que define como comparar a cultura de cadeias de caracteres.</summary>
        <value>O <see cref="T:System.Globalization.CompareInfo" /> que define como comparar a cultura de cadeias de caracteres.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Globalization.CultureInfo.CompareInfo%2A> propriedade retorna um <xref:System.Globalization.CompareInfo> objeto que fornece informações específicas da cultura usadas em operações de comparação de cadeia de caracteres e de classificação sensíveis à cultura.  
  
 O usuário pode optar por substituir alguns dos valores associados com a cultura atual do Windows por meio de parte de opções regionais e de idioma do painel de controle. Por exemplo, o usuário pode escolher para exibir a data em um formato diferente ou usar uma moeda diferente do padrão para a cultura.  
  
 Se <xref:System.Globalization.CultureInfo.UseUserOverride%2A> está `true` e a cultura especificada corresponde a cultura atual do Windows, o <xref:System.Globalization.CultureInfo> usa essas substituições, incluindo as configurações de usuário para as propriedades do <xref:System.Globalization.DateTimeFormatInfo> instância retornada pela <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriedade, e as propriedades do <xref:System.Globalization.NumberFormatInfo> instância retornada pela <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade. Se as configurações do usuário são incompatíveis com a cultura associada com o <xref:System.Globalization.CultureInfo>, por exemplo, se o calendário selecionado não é um do <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, os resultados dos métodos e os valores das propriedades são indefinidos.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como criar uma <xref:System.Globalization.CultureInfo> para Espanhol (Espanha) com a classificação internacional e outra <xref:System.Globalization.CultureInfo> com a classificação tradicional.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CompareInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateSpecificCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CreateSpecificCulture (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo CreateSpecificCulture(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateSpecificCulture (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ CreateSpecificCulture(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member CreateSpecificCulture : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.CreateSpecificCulture name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Um nome <see cref="T:System.Globalization.CultureInfo" /> predefinido ou o nome de um objeto <see cref="T:System.Globalization.CultureInfo" /> existente. <c>name</c> não diferencia maiúsculas de minúsculas.</param>
        <summary>Cria um <see cref="T:System.Globalization.CultureInfo" /> que representa a cultura específica associada ao nome especificado.</summary>
        <returns>Um objeto <see cref="T:System.Globalization.CultureInfo" /> que representa: 
A cultura invariável, se <paramref name="name" /> for uma cadeia de caracteres vazia ("").  
  
- ou - 
A cultura específica associada a <paramref name="name" />, se <paramref name="name" /> for uma cultura neutra.  
  
- ou - 
A cultura especificada por <paramref name="name" />, se <paramref name="name" /> já for uma cultura específica.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> método encapsula uma chamada para o <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> construtor.  
  
> [!NOTE]
>  Para obter uma lista de nomes de cultura predefinidos, consulte a [suporte ao idioma nacional (NLS) API de referência](https://go.microsoft.com/fwlink/?LinkId=200048) no Go Global Developer Center. Além disso, começando com o Windows 10, `name` pode ser qualquer marca de idioma BCP-47 válida.  
  
 Culturas são agrupadas em três conjuntos: a cultura invariável, as culturas neutras e culturas específicas. Para obter mais informações, consulte a descrição do <xref:System.Globalization.CultureInfo> classe.  
  
 Se o identificador de cultura da cultura específico retornado por esse método corresponde ao identificador de cultura da cultura atual do Windows, esse método cria um <xref:System.Globalization.CultureInfo> substituições de objeto que usa a cultura do Windows. As substituições incluem configurações de usuário para as propriedades do <xref:System.Globalization.DateTimeFormatInfo> objeto retornado pela <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriedade e o <xref:System.Globalization.NumberFormatInfo> objeto retornado pelo <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade. Para criar uma instância de um <xref:System.Globalization.CultureInfo> do objeto que padrão as configurações de cultura em vez de substituições do usuário, chame o <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> construtor com um valor de `false` para o `useUserOverride` argumento.  
  
 Embora o <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> nome do método inclui o termo "Específica", lembre-se de que os dados de cultura podem alterar entre as versões, ou devido a culturas personalizadas ou por causa de substituições do usuário. Use a cultura invariável ou formulários binários ou fixos para salvar os dados.  
  
   
  
## Examples  
 O exemplo a seguir recupera uma matriz de <xref:System.Globalization.CultureInfo> objetos que representam as culturas neutras do <xref:System.Globalization.CultureInfo.GetCultures%2A> método e classifica a matriz. Quando ele itera os elementos na matriz, ele passa o nome de cada cultura neutra para o <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> método e exibe o nome da cultura específica retornado pelo método.  
  
> [!NOTE]
>  O exemplo usa os nomes de cultura zh-CHS e zh-CHT. No entanto, os aplicativos que se destinam a Windows Vista e posterior devem usar zh-Hans em vez de zh-CHS e zh-Hant em vez de zh-CHT. zh-Hans e zh-Hant representam o padrão atual e devem ser usados, a menos que você tenha um motivo para usar os nomes antigos.  
>   
>  Observe também que os resultados do exemplo podem ser diferente em uma instalação do Windows Taiwanês, onde a entrada de uma chinês (tradicional) cultura neutra (zh, zh-CHT ou zh-Hant) retornará zh-TW.  
  
 [!code-csharp[System.Globalization.CultureInfo.CreateSpecificCulture2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CreateSpecificCulture2/CS/createspecificculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.CreateSpecificCulture2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CreateSpecificCulture2/VB/createspecificculture2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> não é um nome de cultura válido.  
  
- ou - 
A cultura especificada por <paramref name="name" /> não tem uma cultura específica associada a ela.</exception>
        <exception cref="T:System.NullReferenceException">
          <paramref name="name" /> é nulo.</exception>
        <block subset="none" type="usage">
          <para>O [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] e versões anteriores geram uma <see cref="T:System.ArgumentException" /> se <paramref name="name" /> não é um nome de cultura válido. Começando com o [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], esse método lança um <see cref="T:System.Globalization.CultureNotFoundException" />.</para>
        </block>
        <altmember cref="Overload:System.Globalization.CultureInfo.#ctor" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
      </Docs>
    </Member>
    <Member MemberName="CultureTypes">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureTypes CultureTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CultureTypes CultureTypes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CultureTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CultureTypes As CultureTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureTypes CultureTypes { System::Globalization::CultureTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.CultureTypes : System.Globalization.CultureTypes" Usage="System.Globalization.CultureInfo.CultureTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém os tipos de cultura que pertencem ao objeto <see cref="T:System.Globalization.CultureInfo" /> atual.</summary>
        <value>Uma combinação bit a bit de um ou mais valores <see cref="T:System.Globalization.CultureTypes" />. Nenhum valor padrão.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir demonstra a <xref:System.Globalization.CultureTypes> enumeração e a <xref:System.Globalization.CultureInfo.CultureTypes%2A> propriedade.  
  
 [!code-csharp[system.globalization.cultureTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureTypes/cs/ct.cs#1)]
 [!code-vb[system.globalization.cultureTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureTypes/vb/ct.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureTypes" />
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.CurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o objeto <see cref="T:System.Globalization.CultureInfo" /> que representa a cultura usada pelo thread atual.</summary>
        <value>Um objeto que representa a cultura usada pelo thread atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Globalization.CultureInfo> objeto que é retornado por essa propriedade e seus objetos associados determinar o formato padrão para datas, horas, números, valores de moeda, a ordenação de texto, convenções de maiusculas e minúsculas e comparações de cadeia de caracteres.  
  
 A cultura atual é uma propriedade do thread em execução, que é retornado pelo estático <xref:System.Threading.Thread.CurrentThread%2A?displayProperty=nameWithType> propriedade. O valor da <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriedade corresponde ao valor da <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> propriedade. Recuperar o valor da <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriedade é equivalente ao recuperar o <xref:System.Globalization.CultureInfo> objeto retornado pelo `Thread.CurrentThread.CurrentCulture` propriedade. Começando com o [!INCLUDE[net_v46](~/includes/net-v46-md.md)], definindo o valor da <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriedade também altera a cultura do thread atual.  
  
> [!NOTE]
>  No .NET Framework 4.5.2 e versões anteriores, o <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriedade é somente leitura;  ou seja, você pode recuperar o valor da propriedade, mas você não pode defini-lo. Para alterar a cultura atual, você atribui a <xref:System.Globalization.CultureInfo> objeto que representa a cultura de novo para o `Thread.CurrentThread.CurrentCulture` propriedade. Começando com o [!INCLUDE[net_v46](~/includes/net-v46-md.md)], o <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriedade é leitura / gravação; você pode definir e recuperar o valor da propriedade. Se você definir o valor da propriedade como uma <xref:System.Globalization.CultureInfo> objeto que representa uma nova cultura, o valor da `Thread.CurrentThread.CurrentCulture` propriedade também é alterada.  
  
 Nesta seção:  
  
 [Como a cultura de um Thread é determinada](#ThreadCulture)   
 [Introdução a cultura atual](#Getting)   
 [Definir explicitamente a propriedade CurrentCulture](#ExplicitSetting)   
 [As substituições do usuário e a cultura atual](#Overrides)   
 [Cultura e aplicativos do Windows](#WindowsAndCurr)  
  
<a name="ThreadCulture"></a>   
## <a name="how-a-threads-culture-is-determined"></a>Como a cultura de um thread é determinada  
 Quando um thread é iniciado, sua cultura inicialmente é determinada da seguinte maneira:  
  
-   Recuperando a cultura especificada pelo <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> propriedade no domínio de aplicativo no qual o thread está em execução, se o valor da propriedade não for `null`.  
  
-   Se o thread é um pool de threads que está executando uma operação assíncrona baseada em tarefa e os destinos de aplicativo a [!INCLUDE[net_v46](~/includes/net-v46-md.md)] ou uma versão posterior do .NET Framework, sua cultura é determinada pela cultura do thread de chamada.  O exemplo a seguir altera a cultura atual para português (Brasil) e inicia as seis tarefas, cada um deles exibindo sua ID de thread, sua ID de tarefa e sua cultura atual. Cada uma das tarefas (e os threads) herdou a cultura do thread de chamada.  
  
     [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/Async1.cs#14)]
     [!code-vb[System.Globalization.CultureInfo.CurrentCulture#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/Async1.vb#14)]  
  
     Para obter mais informações, consulte a seção "Cultura e operações assíncronas baseadas em tarefas" no <xref:System.Globalization.CultureInfo> tópico.  
  
-   Chamando o Windows `GetUserDefaultLocaleName` função.  
  
 Observe que, se você definir uma cultura específica diferente da cultura sistema instalado ou cultura preferencial do usuário e o aplicativo for iniciado em vários threads, a cultura atual desses threads será a cultura que é retornada pelo `GetUserDefaultLocaleName` função, a menos que você atribuir uma cultura de <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> propriedade no domínio de aplicativo no qual o thread está em execução.  
  
 Para obter mais informações sobre como a cultura de um thread é determinada, consulte a seção "Cultura e threads" o <xref:System.Globalization.CultureInfo> página de referência.  
  
<a name="Getting"></a>   
## <a name="getting-the-current-culture"></a>Introdução a cultura atual  
 O <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriedade é uma configuração por thread; ou seja, cada thread pode ter sua própria cultura. Obter a cultura do thread atual, recuperando o valor da <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriedade, como o exemplo a seguir ilustra.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/Get1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/Get1.vb#5)]  
  
 Você também pode recuperar o valor de cultura do thread atual do <xref:System.Threading.Thread.CurrentThread%2A?displayProperty=nameWithType> propriedade.  
  
<a name="ExplicitSetting"></a>   
## <a name="explicitly-setting-the-currentculture-property"></a>Definindo explicitamente a propriedade CurrentCulture  
 Iniciando com o [!INCLUDE[net_v46](~/includes/net-v46-md.md)], para alterar a cultura que é usada por um thread existente, você definir o <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriedade para a nova cultura. Se você alterar a cultura do thread dessa forma, o que alterar explicitamente persiste se ele cruzar os limites de domínio de aplicativo. O exemplo a seguir altera a cultura do thread atual como holandês (países baixos). Ele também mostra que, quando o thread atual ultrapassa os limites de domínio de aplicativo, sua cultura atual permanecerá alterada.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/changeculture11.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/changeculture11.vb#11)]  
  
> [!NOTE]
>  Alterar a cultura usando o <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriedade requer um <xref:System.Security.Permissions.SecurityPermission> permissão com o <xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> conjunto de valores. Manipular threads é perigoso devido ao estado de segurança associado a threads. Portanto, essa permissão deve ser dada apenas ao código confiável e, em seguida, somente quando necessário. Você não pode alterar a cultura do thread no código de confiança parcial.  
  
 Começando com o [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], você pode alterar explicitamente a cultura do thread atual para uma cultura específica (por exemplo, francês (Canadá)) ou uma cultura neutra (por exemplo, francês). Quando um <xref:System.Globalization.CultureInfo> objeto representa uma cultura neutra, os valores de <xref:System.Globalization.CultureInfo> propriedades, como <xref:System.Globalization.CultureInfo.Calendar%2A>, <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.NumberFormat%2A>, e <xref:System.Globalization.CultureInfo.TextInfo%2A> refletir a cultura específica que está associada com o cultura neutra. Por exemplo, a cultura dominante para a cultura neutra em inglês é inglês (Estados Unidos); a cultura dominante para a cultura alemã é alemão (Alemanha). O exemplo a seguir ilustra a diferença na formatação quando a cultura atual é definida como uma cultura específica, francês (Canadá) e uma cultura neutra, francês.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/specific12.cs#12)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/specific12.vb#12)]  
  
 Você também pode usar o <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriedade juntamente com o <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType> propriedade para definir o <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriedade de um aplicativo ASP.NET para o usuário cultura preferencial do, como mostra o exemplo a seguir.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/aspculture13.cs#13)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/aspculture13.vb#13)]  
  
<a name="Overrides"></a>   
## <a name="the-current-culture-and-user-overrides"></a>A cultura atual e as substituições de usuário  
 Windows permite que os usuários substituam os valores de propriedade padrão de <xref:System.Globalization.CultureInfo> objeto e seus objetos associados por meio **opções regionais e idiomas** no painel de controle. O <xref:System.Globalization.CultureInfo> objeto retornado pelo <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriedade reflete essas usuário substitui nos seguintes casos:  
  
-   Se a cultura do thread atual é definida implicitamente pelo Windows `GetUserDefaultLocaleName` função.  
  
-   Se a cultura do thread atual definida pelo <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> propriedade corresponde à cultura atual do sistema Windows.  
  
-   Se a cultura do thread atual é definida explicitamente para uma cultura retornada pelo <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> método, e a que cultura corresponde a cultura atual do sistema Windows.  
  
-   Se a cultura do thread atual é definida explicitamente para uma cultura instanciada por meio de <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> construtor e que a cultura corresponde a cultura atual do sistema Windows.  
  
 Em alguns casos, particularmente para aplicativos de servidor, definindo a cultura atual um <xref:System.Globalization.CultureInfo> objeto que reflete as substituições do usuário pode ser indesejável. Em vez disso, você pode definir a cultura do thread atual para um <xref:System.Globalization.CultureInfo> substituições de objeto que não reflita o usuário das seguintes maneiras:  
  
-   Chamando o <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> construtor com um valor de `false` para o `useUserOverride` argumento.  
  
-   Chamando o <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> método, que retorna um cache somente leitura <xref:System.Globalization.CultureInfo> objeto.  
  
<a name="WindowsAndCurr"></a>   
## <a name="the-current-culture-and-uwp-apps"></a>A cultura atual e a aplicativos UWP  
 Em aplicativos da plataforma Universal do Windows (UWP), o <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriedade é leitura / gravação, assim ele está em aplicativos do .NET Framework e .NET Core; você pode usá-lo para obter e definir a cultura atual. No entanto, os aplicativos UWP não fazem distinção entre a cultura atual e a cultura de interface do usuário atual. O <xref:System.Globalization.CultureInfo.CurrentCulture%2A> e <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> mapa de propriedades para o primeiro valor a [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) coleção.  

Em aplicativos do .NET Framework e .NET Core, a cultura atual é uma configuração por thread e o <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriedade reflete a cultura do thread atual. Em aplicativos UWP, a cultura atual é mapeado para o [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) propriedade, que é uma configuração global. Definindo o <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriedade altera a cultura do aplicativo inteiro; a cultura não pode ser definida em uma base por thread.
  
## Examples  
 O exemplo a seguir demonstra como alterar o <xref:System.Globalization.CultureInfo.CurrentCulture%2A> e <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> do thread atual.  
  
 [!code-cpp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CPP/currentculture.cpp#11)]
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CS/currentculture.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/VB/currentculture.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">A propriedade é definida como <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para definir a cultura atual. Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></permission>
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
        <altmember cref="T:System.Security.Permissions.SecurityPermission" />
        <altmember cref="T:System.Security.Permissions.SecurityPermissionAttribute" />
      </Docs>
    </Member>
    <Member MemberName="CurrentUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.CurrentUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o objeto <see cref="T:System.Globalization.CultureInfo" /> que representa a cultura de interface do usuário atual usada pelo Gerenciador de Recursos para procurar recursos específicos da cultura no tempo de execução.</summary>
        <value>A cultura usada pelo Gerenciador de Recursos para pesquisar recursos específicos da cultura no tempo de execução.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cultura da interface do usuário atual é uma propriedade por thread. Ou seja, cada thread tem sua própria cultura de interface do usuário atual. Esta propriedade é equivalente à recuperação ou, começando com o [!INCLUDE[net_v46](~/includes/net-v46-md.md)], definindo o <xref:System.Globalization.CultureInfo> objeto atribuído ao `System.Threading.Thread.CurrentThread.CurrentUICulture` propriedade. Quando um thread é iniciado, sua cultura de interface do usuário inicialmente é determinada da seguinte maneira:  
  
-   Recuperando a cultura especificada pelo <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedade no domínio de aplicativo no qual o thread está em execução, se o valor da propriedade não for `null`.  
  
-   Se o thread é um pool de threads que está executando uma operação assíncrona baseada em tarefa e os destinos de aplicativo a [!INCLUDE[net_v46](~/includes/net-v46-md.md)] ou uma versão posterior do .NET Framework, sua cultura de interface do usuário é determinada pela cultura da interface do usuário do thread de chamada.  O exemplo a seguir altera a cultura de interface do usuário atual para português (Brasil) e inicia as seis tarefas, cada um deles exibindo sua ID de thread, sua ID de tarefa e sua cultura de interface do usuário atual. Cada uma das tarefas (e os threads) herdou a cultura de interface do usuário do thread de chamada.  
  
     [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/Async1.cs#14)]
     [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/Async1.vb#14)]  
  
     Para obter mais informações, consulte a seção "Cultura e operações assíncronas baseadas em tarefas" no <xref:System.Globalization.CultureInfo> tópico.  
  
-   Chamando o Windows `GetUserDefaultUILanguage` função.  
  
> [!NOTE]
>  No [!INCLUDE[Compact](~/includes/compact-md.md)], o <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriedade é somente leitura. A cultura da interface do usuário atual é determinada por configurações regionais do sistema e não pode ser alterada programaticamente.  
  
 Começando com o [!INCLUDE[net_v46](~/includes/net-v46-md.md)]alterar a cultura de interface do usuário usado por um thread, defina o <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> propriedade para a nova cultura. Se você alterar a cultura de interface do usuário do thread dessa forma, o que alterar explicitamente persiste se ele cruzar os limites de domínio de aplicativo.  
  
> [!NOTE]
>  No .NET Framework 4.5.2 e versões anteriores, o <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriedade é somente leitura;  ou seja, você pode recuperar o valor da propriedade, mas você não pode defini-lo. Para alterar a cultura de interface do usuário atual, você atribui a <xref:System.Globalization.CultureInfo> objeto que representa a cultura de interface do usuário de novo para o `Thread.CurrentThread.CurrentUICulture` propriedade. Começando com o [!INCLUDE[net_v46](~/includes/net-v46-md.md)], o <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propriedade é leitura / gravação; você pode definir e recuperar o valor da propriedade. Se você definir o valor da propriedade como uma <xref:System.Globalization.CultureInfo> objeto que representa uma nova cultura, o valor da `Thread.CurrentThread.CurrentCulture` propriedade também é alterada.  
  
 Nesta seção:  
  
 [Introdução a cultura de interface do usuário atual](#Getting)   
 [Definir explicitamente a cultura de interface do usuário atual](#Explicit)   
 [Definindo implicitamente a cultura de interface do usuário atual](#Implicit)   
 [Considerações sobre segurança](#Security)   
 [Aplicativos do Windows e a cultura de interface do usuário atuais](#WindowsAndCurrUI)  
  
<a name="Getting"></a>   
## <a name="getting-the-current-ui-culture"></a>Introdução a cultura de interface do usuário atual  
 O <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propriedade é uma configuração por thread; ou seja, cada thread pode ter sua própria cultura de interface do usuário. Obter a cultura de interface do usuário do thread atual, recuperando o valor da <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propriedade, como o exemplo a seguir ilustra.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/Get1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/Get1.vb#5)]  
  
 Você também pode recuperar o valor de cultura de interface do usuário do thread atual do <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> propriedade.  
  
<a name="Explicit"></a>   
## <a name="explicitly-setting-the-current-ui-culture"></a>Definindo explicitamente a cultura da interface do usuário atual  
 Começando com o [!INCLUDE[net_v46](~/includes/net-v46-md.md)], você pode alterar a cultura de interface do usuário atual, atribuindo um <xref:System.Globalization.CultureInfo> objeto que representa a cultura de novo para o <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propriedade. A cultura da interface do usuário atual pode ser definida para uma cultura específica (por exemplo, en-US ou de-DE) ou para uma cultura neutra (por exemplo, en ou de). O exemplo a seguir define a cultura de interface do usuário atual para francês (França) ou fr-FR.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/currentuiculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/currentuiculture1.vb#1)]  
  
 Em um aplicativo multithread, você pode definir explicitamente a cultura de interface do usuário de qualquer thread, atribuindo um <xref:System.Globalization.CultureInfo> objeto que representa a cultura para o thread <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> propriedade. Se o thread cuja cultura que você deseja definir é o thread atual, você pode atribuir a nova cultura para o <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propriedade. Quando a cultura de interface do usuário de um thread é definida explicitamente, o que o thread retém a mesma cultura, mesmo se ele cruza os limites de domínio de aplicativo e executa código em outro domínio de aplicativo.  
  
<a name="Implicit"></a>   
## <a name="implicitly-setting-the-current-ui-culture"></a>Definindo implicitamente a cultura da interface do usuário atual  
 Quando um thread, incluindo o thread principal do aplicativo, é o primeiro criado, por padrão, que sua cultura de interface do usuário atual é definida da seguinte maneira:  
  
-   Usando a cultura definida pela <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedade para o domínio de aplicativo atual se o valor da propriedade não for `null`.  
  
-   Usando a cultura do padrão do sistema. Em sistemas que usam o sistema operacional Windows, o common language runtime chama o Windows `GetUserDefaultUILanguage` função para definir a cultura de interface do usuário atual. `GetUserDefaultUILanguage` Retorna a cultura de interface do usuário padrão definida pelo usuário. Se o usuário não tiver definido um idioma de interface do usuário padrão, ele retorna a cultura originalmente instalada no sistema.  
  
 Se o segmento cruza os limites do aplicativo e executa código em outro domínio de aplicativo, sua cultura é determinada da mesma forma que um thread recém-criado.  
  
 Observe que, se você definir uma cultura de interface do usuário específica que é diferente da cultura da interface do sistema instalado ou cultura de interface do usuário preferencial do usuário e o aplicativo for iniciado em vários threads, a cultura de interface do usuário atual desses threads será a cultura retornada pela `GetUserDefaultUILanguage`funcionar, a menos que você atribuir uma cultura de <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedade no domínio de aplicativo no qual o thread está em execução.  
  
<a name="Security"></a>   
## <a name="security-considerations"></a>Considerações sobre segurança  
 Alterar a cultura do thread atual requer uma <xref:System.Security.Permissions.SecurityPermission> permissão com o <xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> conjunto de valores.  
  
> [!CAUTION]
>  Manipular threads é perigoso devido ao estado de segurança associado a threads. Portanto, essa permissão deve ser dada apenas ao código confiável e, em seguida, somente quando necessário. Você não pode alterar a cultura do thread no código de confiança parcial.  
  
<a name="WindowsAndCurrUI"></a>   
## <a name="the-current-ui-culture-and-uwp-apps"></a>A cultura de interface do usuário atual e os aplicativos UWP  
 
Em aplicativos da plataforma Universal do Windows (UWP), o <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriedade é leitura / gravação, assim ele está em aplicativos do .NET Framework e .NET Core; você pode usá-lo para obter e definir a cultura atual. No entanto, os aplicativos UWP não fazem distinção entre a cultura atual e a cultura de interface do usuário atual. O <xref:System.Globalization.CultureInfo.CurrentCulture%2A> e <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> mapa de propriedades para o primeiro valor a [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) coleção.

Em aplicativos do .NET Framework e .NET Core, a cultura de interface do usuário atual é uma configuração por thread e o <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriedade reflete a cultura de interface do usuário do thread atual. Em aplicativos UWP, a cultura atual é mapeado para o [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) propriedade, que é uma configuração global. Definindo o <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriedade altera a cultura do aplicativo inteiro; a cultura não pode ser definida em uma base por thread.    
  
## Examples  
 O exemplo de código a seguir demonstra como alterar o <xref:System.Globalization.CultureInfo.CurrentCulture%2A> e <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> do thread atual.  
  
 [!code-cpp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CPP/currentculture.cpp#11)]
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CS/currentculture.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/VB/currentculture.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">A propriedade é definida como <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">A propriedade é definida como um nome de cultura não pode ser usado para localizar um arquivo de recurso. Nomes de arquivos de recursos podem incluir somente letras, números, hifens ou sublinhados.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para definir a cultura de interface do usuário atual. Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></permission>
        <altmember cref="T:System.Resources.ResourceManager" />
        <altmember cref="P:System.Threading.Thread.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      </Docs>
    </Member>
    <Member MemberName="DateTimeFormat">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.DateTimeFormatInfo DateTimeFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.DateTimeFormatInfo DateTimeFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DateTimeFormat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DateTimeFormat As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::DateTimeFormatInfo ^ DateTimeFormat { System::Globalization::DateTimeFormatInfo ^ get(); void set(System::Globalization::DateTimeFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DateTimeFormat : System.Globalization.DateTimeFormatInfo with get, set" Usage="System.Globalization.CultureInfo.DateTimeFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um <see cref="T:System.Globalization.DateTimeFormatInfo" /> que define o formato culturalmente apropriado de exibição de datas e horas.</summary>
        <value>Um <see cref="T:System.Globalization.DateTimeFormatInfo" /> que define o formato culturalmente apropriado de exibição de datas e horas.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overrides"></a>Substituições  
 O usuário pode optar por substituir alguns dos valores associados com a cultura atual do Windows por meio de parte de opções regionais e de idioma do painel de controle. Por exemplo, o usuário pode escolher para exibir a data em um formato diferente ou usar uma moeda diferente do padrão para a cultura.  
  
 Se <xref:System.Globalization.CultureInfo.UseUserOverride%2A> está `true` e a cultura especificada corresponde a cultura atual do Windows, o <xref:System.Globalization.CultureInfo> usa essas substituições, incluindo as configurações de usuário para as propriedades do <xref:System.Globalization.DateTimeFormatInfo> instância retornada pela <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriedade, e as propriedades do <xref:System.Globalization.NumberFormatInfo> instância retornada pela <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade. Se as configurações do usuário são incompatíveis com a cultura associada com o <xref:System.Globalization.CultureInfo>, por exemplo, se o calendário selecionado não é um do <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, os resultados dos métodos e os valores das propriedades são indefinidos.  
  
 O valor da <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriedade e o <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade não será calculada até seu aplicativo acessa a propriedade. Se o usuário pode alterar a cultura atual para uma nova cultura, enquanto o aplicativo está em execução e, em seguida, o aplicativo acessa o <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> ou <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade, o aplicativo recupera os valores padrão para a nova cultura em vez das substituições para o cultura original. Para preservar as substituições para a cultura atual original, o aplicativo deve acessar o <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> e <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedades antes de alterar a cultura atual.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra CultureInfo.Clone também clona o <xref:System.Globalization.DateTimeFormatInfo> e <xref:System.Globalization.NumberFormatInfo> instâncias associadas a <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">A propriedade é definida como nula.</exception>
        <exception cref="T:System.InvalidOperationException">A propriedade <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> ou uma das propriedades <see cref="T:System.Globalization.DateTimeFormatInfo" /> é definida e o <see cref="T:System.Globalization.CultureInfo" /> é somente leitura.</exception>
        <block subset="none" type="usage">
          <para>Se <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> é o <see cref="T:System.Globalization.TaiwanCalendar" /> , mas o <see cref="P:System.Threading.Thread.CurrentCulture" /> não está definido como chinês (Taiwan), denominado zh-TW, então <see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />, <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />, e <see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" /> retornar uma cadeia de caracteres vazia ("").</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadCurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo DefaultThreadCurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo DefaultThreadCurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultThreadCurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ DefaultThreadCurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultThreadCurrentCulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a cultura padrão para threads no domínio de aplicativo atual.</summary>
        <value>A cultura padrão para threads no domínio de aplicativo atual, ou <see langword="null" />, se a cultura do sistema atual for a cultura do thread padrão no domínio do aplicativo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] e versões anteriores, por padrão, a cultura de todos os threads é definida como a cultura do sistema Windows. Para aplicativos cuja cultura atual difere da cultura padrão do sistema, esse comportamento geralmente é indesejável. No [!INCLUDE[net_v45](~/includes/net-v45-md.md)], o <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> propriedade permite que um aplicativo definir a cultura padrão de todos os threads em um domínio do aplicativo.  
  
> [!IMPORTANT]
>  Se você não definir explicitamente a cultura de todos os existentes threads em execução em um domínio de aplicativo, definindo o <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> propriedade também altera a cultura desses threads. No entanto, se esses threads são executados em outro domínio de aplicativo, sua cultura é definida pelo <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> propriedade nesse domínio do aplicativo ou, se nenhum valor padrão é definido pela cultura do sistema padrão. Por isso, é recomendável que você sempre explicitamente definir a cultura do thread de seu aplicativo principal e não depende do <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> propriedade para definir a cultura do thread principal do aplicativo.  
  
 A menos que ele é definido explicitamente, o valor da <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> é de propriedade `null`, e a cultura de threads em um domínio de aplicativo que não tenha sido atribuída uma cultura explícita é definida pela cultura do sistema do Windows padrão.  
  
 Para obter mais informações sobre culturas, threads e domínios de aplicativo, consulte "cultura e threads" e "cultura e domínios de aplicativo" seções no <xref:System.Globalization.CultureInfo> página de referência.  
  
   
  
## Examples  
 O exemplo a seguir ilustra o comportamento padrão do .NET Framework ao definir a cultura atual de um novo thread. Na inicialização, o exemplo define a cultura atual e a cultura de interface do usuário atual para francês (França) em todos os sistemas, exceto aqueles em que a cultura padrão do sistema já está francês (França). Se a cultura padrão do sistema já estiver francês (França), o código define a cultura atual e a cultura de interface do usuário atual para o inglês (Estados Unidos). Em seguida, ele chama o `DisplayRandomNumbers` rotina, que gera três números aleatórios e os exibe como valores de moeda. Em seguida, ele cria um novo thread, que também executa o `DisplayRandomNumbers` rotina.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/cs/defaultculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/vb/defaultculture1.vb#1)]  
  
 Como mostra a saída do exemplo, quando o exemplo é executado em um computador cuja cultura do sistema seja inglês (Estados Unidos), o thread principal exibe seus valores de moeda usando as convenções de formatação da cultura Francês (França). No entanto, como a cultura do thread de trabalho é derivada da cultura atual do sistema Windows em vez da cultura atual do aplicativo, o thread de trabalho exibe seus valores de moeda usando as convenções de formatação da cultura inglês (Estados Unidos).  
  
 O exemplo a seguir usa o <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> e <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedades para definir a cultura atual e a cultura de interface do usuário atual de um novo thread de aplicativo. Na inicialização, o exemplo define a cultura atual e a cultura de interface do usuário atual para francês (França) em todos os sistemas, exceto aqueles em que a cultura padrão do sistema já está francês (França). Se a cultura padrão do sistema já estiver francês (França), ele define a cultura atual e a cultura de interface do usuário atual para inglês (Estados Unidos). Em seguida, ele chama o `DisplayRandomNumbers` rotina, que gera três números aleatórios e os exibe como valores de moeda. Em seguida, ele cria um novo thread, que também executa o `DisplayRandomNumbers` rotina.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/cs/defaultculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/vb/defaultculture2.vb#2)]  
  
 Como mostra a saída do exemplo, quando o exemplo é executado em um computador cuja cultura do sistema seja inglês (Estados Unidos), o thread principal e o thread de trabalho exibem seus valores de moeda usando as convenções de formatação da cultura Francês (França).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadCurrentUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo DefaultThreadCurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo DefaultThreadCurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultThreadCurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ DefaultThreadCurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultThreadCurrentUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a cultura padrão interface do usuário para threads no domínio do aplicativo atual.</summary>
        <value>A cultura padrão da interface do usuário para threads no domínio do aplicativo atual ou <see langword="null" /> se a cultura da interface do usuário do sistema atual for a cultura padrão para threads da interface do usuário no domínio do aplicativo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] e versões anteriores, por padrão, a cultura de interface do usuário de todos os threads é definida como a cultura do sistema Windows. Para aplicativos cuja cultura de interface do usuário atual difere da cultura padrão do sistema, esse comportamento geralmente é indesejável. No [!INCLUDE[net_v45](~/includes/net-v45-md.md)], o <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedade permite definir a cultura de interface do usuário padrão de todos os threads em um domínio do aplicativo.  
  
> [!IMPORTANT]
>  Se você não definir explicitamente a cultura de interface do usuário de qualquer existente threads em execução em um domínio de aplicativo, definindo o <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedade também altera a cultura desses threads. No entanto, se esses threads são executados em outro domínio de aplicativo, sua cultura é definida pelo <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedade nesse domínio do aplicativo ou, se nenhum valor padrão é definido pela cultura do sistema padrão. Por isso, é recomendável que você sempre explicitamente definir a cultura do thread de seu aplicativo principal e não depende de <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedade para definir a cultura do thread principal do aplicativo.  
  
 A menos que ele é definido explicitamente, o valor da <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> é de propriedade `null`, e a cultura atual de todos os threads em um domínio de aplicativo que não tenha sido atribuída uma cultura explícita é definida pela cultura do sistema do Windows padrão.  
  
 Para obter mais informações sobre culturas, threads e domínios de aplicativo, consulte "cultura e threads" e "cultura e domínios de aplicativo" seções no <xref:System.Globalization.CultureInfo> página de referência.  
  
   
  
## Examples  
 O exemplo a seguir ilustra o comportamento padrão do .NET Framework ao definir a cultura atual de um novo thread. Ele usa recursos de idioma inglês e russo. O seguinte arquivo de texto chamado GreetingStrings.txt contém os recursos de idioma inglês:  
  
```  
greeting =Hello again!  
newGreeting=Hello!  
```  
  
 Ele é compilado em um arquivo. Resources binário chamado GreetingStrings.resources usando o [gerador de arquivo](~/docs/framework/tools/resgen-exe-resource-file-generator.md) com o comando a seguir.  
  
```console  
resgen greetingstrings.txt  
```  
  
 O seguinte arquivo de texto chamado GreetingStrings.ru-RU. txt contém os recursos de idioma russo:  
  
```  
greeting=Еще раз привет!  
newGreeting=Привет!  
```  
  
 Ele é compilado em um arquivo. Resources binário chamado GreetingStrings.ru RU.resources usando o [gerador de arquivo](~/docs/framework/tools/resgen-exe-resource-file-generator.md) com o comando a seguir.  
  
```console  
resgen greetingstrings.ru-RU.txt  
```  
  
 O código de aplicativo, que é mostrado abaixo, reside em um arquivo chamado Example1.cs ou Example1.vb. Ele é compilado em um executável usando o seguinte comando para o compilador do Visual Basic:  
  
```console  
vbc Example1.vb /resource:GreetingStrings.resources  
```  
  
 Para o compilador do c#, o comando é semelhante:  
  
```console  
csc /resource:GreetingStrings.resources Example1.cs  
```  
  
 Isso cria um assembly que inclui de código executável de exemplo, juntamente com os recursos para sua cultura de fallback. Você também pode usar o [Assembly Linker](~/docs/framework/tools/al-exe-assembly-linker.md) para criar o arquivo de recurso para a cultura russo (Rússia) com o seguinte comando:  
  
```console  
>al /embed:greetingstrings.ru-RU.resources /c:ru-RU /template:example1.exe /out:ru-RU\Example1.resources.dll  
```  
  
 Na inicialização, o exemplo define a cultura atual e a cultura de interface do usuário atual em russo (Rússia) em todos os sistemas, exceto aqueles em que a cultura padrão do sistema já é russa (Rússia). Se a cultura padrão do sistema já estiver russo (Rússia), o código define a cultura atual e a interface do usuário atual de cultura para inglês (Estados Unidos). Em seguida, ele chama o `ShowGreeting` rotina, que exibe uma cadeia de caracteres simple na primeira vez que ele é chamado e uma cadeia de caracteres ligeiramente diferente em chamadas de método subsequentes. Em seguida, ele cria um novo thread, que também executa o `ShowGreeting` rotina.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/cs/example1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/vb/example1.vb#1)]  
  
 Como mostra a saída do exemplo, quando o exemplo é executado em um computador cuja cultura do sistema seja inglês (Estados Unidos), o thread principal exibe sua cadeia de caracteres inicial em russo. No entanto, como a cultura do thread de trabalho é derivada da cultura atual do sistema Windows em vez da cultura atual do aplicativo, o thread de trabalho exibe sua cadeia de caracteres em inglês.  
  
 O exemplo a seguir usa o <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> e <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriedades para definir a cultura atual e a cultura de interface do usuário atual de um novo thread de aplicativo.  
  
 O exemplo usa os mesmos arquivos de recursos, como no exemplo anterior. Os comandos para compilar e inserir os recursos de idioma russo localizado em um assembly satélite também são idênticos, exceto que o nome do assembly executável é alterado.  
  
 Na inicialização, o exemplo define a cultura atual e a cultura de interface do usuário atual em russo (Rússia) em todos os sistemas, exceto aqueles em que a cultura padrão do sistema já é russa (Rússia). Se a cultura padrão do sistema já estiver russa (Rússia), ele define a cultura atual e a cultura de interface do usuário atual como inglês (Estados Unidos). Em seguida, ele chama o `ShowGreeting` rotina, que exibe uma cadeia de caracteres simple na primeira vez que ele é chamado e uma cadeia de caracteres ligeiramente diferente em chamadas de método subsequentes. Em seguida, ele cria um novo thread, que também executa o `ShowGreeting` rotina.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/cs/example2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/vb/example2.vb#2)]  
  
 Como mostra a saída do exemplo, quando o exemplo é executado em um computador cuja cultura do sistema seja inglês (Estados Unidos), o thread principal e o thread de trabalho exibam suas cadeias de caracteres no idioma russo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Em uma operação de conjuntos, o valor da propriedade <see cref="P:System.Globalization.CultureInfo.Name" /> é inválido.</exception>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public virtual string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.Globalization.CultureInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o nome da cultura totalmente localizado.</summary>
        <value>O nome de cultura totalmente localizado no formato *languagefull* [*country/regionfull*], em que *languagefull* é o nome completo do idioma e *country/regionfull* é o nome completo do país/região.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propriedade representa o nome localizado do <xref:System.Globalization.CultureInfo> objeto.  
  
 Nomes de cultura podem variar devido às convenções de formatação ou script. Você deve usar o nome retornado para exibição e não tentar analisá-lo.  
  
 Se uma cultura personalizada é criada por meio das <xref:System.Globalization.CultureAndRegionInfoBuilder> classe, o <xref:System.Globalization.CultureInfo.DisplayName%2A> propriedade é inicializada para o valor da <xref:System.Globalization.CultureInfo.NativeName%2A> propriedade.  
  
   
  
## Examples  
 O exemplo de código a seguir exibe várias propriedades das culturas neutras.  
  
> [!NOTE]
>  O exemplo exibe as culturas zh-CHS e zh-CHT com os identificadores de cultura 0x0004 e 0x7C04, respectivamente. No entanto, os aplicativos do Windows Vista devem usar o nome de zh-Hans em vez de zh-CHS e o nome de zh-Hant em vez de zh-CHT. O zh-Hans e zh-Hant nomes representam o padrão atual e deve ser usados, a menos que você tenha um motivo para usar os nomes antigos.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="EnglishName">
      <MemberSignature Language="C#" Value="public virtual string EnglishName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.EnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EnglishName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnglishName : string" Usage="System.Globalization.CultureInfo.EnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o nome da cultura no formato *languagefull* [*country/regionfull*] em inglês.</summary>
        <value>O nome da cultura no formato *languagefull* [*country/regionfull*] em inglês, em que *languagefull* é o nome completo do idioma e *country/regionfull* é o nome completo do país/região.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por exemplo, o <xref:System.Globalization.CultureInfo.EnglishName%2A> para a cultura específica nome en-US é "Inglês (Estados Unidos)".  
  
 O valor dessa propriedade é o mesmo, independentemente da versão do idioma do .NET Framework.  
  
   
  
## Examples  
 O exemplo de código a seguir exibe várias propriedades das culturas neutras.  
  
> [!NOTE]
>  O exemplo exibe os nomes de cultura de zh-CHT com os identificadores de cultura 0x0004 e 0x7C04 e zh-CHS mais antigos, respectivamente. No entanto, os aplicativos do Windows Vista devem usar o nome de zh-Hans em vez de zh-CHS e o nome de zh-Hant em vez de zh-CHT. O zh-Hans e zh-Hant nomes representam o padrão atual e deve ser usados, a menos que você tenha um motivo para usar os nomes antigos.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="cultureInfo.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">O objeto a ser comparado com o <see cref="T:System.Globalization.CultureInfo" /> atual.</param>
        <summary>Determina se o objeto especificado é a mesma cultura que a <see cref="T:System.Globalization.CultureInfo" /> atual.</summary>
        <returns>
          <see langword="true" /> se <paramref name="value" /> for a mesma cultura que a <see cref="T:System.Globalization.CultureInfo" /> atual, caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método substitui <xref:System.Object.Equals%2A?displayProperty=nameWithType>.  
  
 Duas <xref:System.Globalization.CultureInfo> objetos são considerados iguais se suas <xref:System.Globalization.CultureInfo.Name%2A> e <xref:System.Globalization.CultureInfo.CompareInfo%2A> propriedades são iguais.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetConsoleFallbackUICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetConsoleFallbackUICulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetConsoleFallbackUICulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetConsoleFallbackUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConsoleFallbackUICulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetConsoleFallbackUICulture();" />
      <MemberSignature Language="F#" Value="member this.GetConsoleFallbackUICulture : unit -&gt; System.Globalization.CultureInfo" Usage="cultureInfo.GetConsoleFallbackUICulture " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtém uma cultura de interface do usuário alternativa adequada para aplicativos de console quando a cultura padrão da interface gráfica do usuário é inadequada.</summary>
        <returns>Uma cultura alternativa usada para ler e exibir texto no console.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Idiomas como árabe, hebraico, Urdu e siríaco são baseados em texto bidirecional. Aplicativos do Windows, que têm uma interface gráfica do usuário, suportam a idiomas bidirecionais. No entanto, aplicativos de console, que empregam a interface do usuário do texto do console do sistema operacional, não fornecem suporte bidirecional. Portanto, se você localizar um aplicativo de console para árabe ou hebraico, seu aplicativo exibe texto ilegível na tela do console.  
  
 A cultura de interface do usuário Especifica os recursos de um aplicativo precisa para dar suporte à entrada do usuário e a saída e, por padrão é o mesmo que a cultura do sistema operacional. Por exemplo, o <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propriedade retorna uma cultura árabe para um sistema operacional árabe. Use o <xref:System.Globalization.CultureInfo.GetConsoleFallbackUICulture%2A> método para recuperar uma cultura adequada para uma interface de usuário do aplicativo de console. Depois que seu aplicativo recupera a cultura de interface do usuário de fallback, ele deve atribuir a cultura para a cultura de interface do usuário atual do thread atual. Para obter mais informações, consulte a seção "Explicitamente configuração a interface do usuário cultura atual" o <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriedade.  
  
 A seguir estão as culturas predefinidas que têm um nome de cultura de interface de usuário de fallback diferente do nome de cultura predefinidos.  
  
|Cultura predefinidos|Nome da cultura|Nome de cultura de interface do usuário de fallback|  
|------------------------|------------------|------------------------------------------|  
|Amárico|Estou|en-US|  
|Amárico (Etiópia)|AM-ET|en-US|  
|(árabe neutro)|ar|en-US|  
|Árabe (EAU)|ar AE|en-US|  
|Árabe (Bahrein)|ar BH|en-US|  
|Árabe (Argélia)|ar DZ|fr-FR|  
|Árabe (Egito)|ar-EG|en-US|  
|Árabe (Iraque)|ar IQ|en-US|  
|Árabe (Jordânia)|ar-JO|en-US|  
|Árabe (Kuwait)|ar-KW|en-US|  
|Árabe (Líbano)|ar-LB|en-US|  
|Árabe (Líbia)|ar LY|en-US|  
|Árabe (Marrocos)|ar-MA|fr-FR|  
|Árabe (Omã)|ar-OM|en-US|  
|Árabe (Catar)|controle de qualidade de ar|en-US|  
|Árabe (Arábia Saudita)|ar-SA|en-US|  
|Árabe (Síria)|ar-SY|en-US|  
|Árabe (Tunísia)|ar-TN|fr-FR|  
|Árabe (Iêmen)|ar-YE|en-US|  
|Assamês|as|en-US|  
|Assamês (Índia)|as-IN|en-US|  
|Bengali|bn|en-US|  
|Bengali (Bangladesh)|BD de bn|en-US|  
|Bangla (Índia)|bn-IN|en-US|  
|Tibetano|bO|en-US|  
|Tibetano (República Popular da China)|CN de bO|en-US|  
|Divehi|dv|en-US|  
|Divehi (Índia)|dv-MV|en-US|  
|Persa|FA|en-US|  
|Persa (Irã)|FA-IR|en-US|  
|Guzerate|gu|en-US|  
|Gujarati (Índia)|Gu IN|en-US|  
|Hebraico|he|en-US|  
|Hebraico (Israel)|he-IL|en-US|  
|Hindi|Oi|en-US|  
|Híndi (Índia)|hi-IN|en-US|  
|Yi|ii|en-US|  
|Yi (República Popular da China)|ii-CN|en-US|  
|Inuktitut silábico|IU latas|en-US|  
|Silábico Inuktitut (Canadá)|iu-Cans-CA|en-US|  
|Khmer|km|en-US|  
|Khmer (Camboja)|km-KH|en-US|  
|canarim|Kn|en-US|  
|Kannada (Índia)|KN-IN|en-US|  
|Konkani|kok|en-US|  
|Concani (Índia)|kok-IN|en-US|  
|Lao|baixo|en-US|  
|Lao (Lao P.D.R.)|baixo-LA|en-US|  
|Malaiala|ml|en-US|  
|Malaiala (Índia)|IN ml|en-US|  
|Mohawk|MOH|en-US|  
|Mohawk (Canadá)|moh-CA|en-US|  
|Marata|Mr|en-US|  
|Marati (Índia)|SR-IN|en-US|  
|Nepalês|ne|en-US|  
|Nepalês (Nepal)|NP ne|en-US|  
|Norueguês|no|nb-NO|  
|Oriá|ou|en-US|  
|Oriá (Índia)|ou IN|en-US|  
|Punjabi|PA|en-US|  
|Punjabi (Índia)|PA-IN|en-US|  
|Dari|solicitações de pull|en-US|  
|Dari (Afeganistão)|solicitações de pull AF|en-US|  
|Pachto|PS|en-US|  
|Pachto (Afeganistão)|ps-AF|en-US|  
|Sânscrito|SA|en-US|  
|Sânscrito (Índia)|SA-IN|en-US|  
|Sinhala|si|en-US|  
|Sinhala (Sri Lanka)|si-LK|en-US|  
|Siríaco|SYR|en-US|  
|Siríaco (Síria)|SY SYR|en-US|  
|Tâmil|TA|en-US|  
|Tâmil (Índia)|TA IN|en-US|  
|Telugu|te|en-US|  
|Télugo (Índia)|te-IN|en-US|  
|Tailandês|th|en-US|  
|Tailandês (Tailândia)|th-Th|en-US|  
|Uigur|ug|en-US|  
|Uigur (República Popular da China)|ug-CN|en-US|  
|Urdu|seu|en-US|  
|Urdu (Paquistão)|o PK|en-US|  
|Vietnamita|vi|en-US|  
|Vietnamita (Vietnã)|vi-VN|en-US|  
  
 Seu aplicativo pode usar <xref:System.Globalization.CultureAndRegionInfoBuilder> para criar uma substituição para uma cultura e cultura podem ter uma cultura de fallback de console de sua escolha.  
  
   
  
## Examples  
 O exemplo de código a seguir exibe a cultura de interface do usuário de fallback associada a um objeto de cultura.  
  
 [!code-cpp[sys.glob.ci.getCFUIC#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.ci.getCFUIC/cpp/cfuic.cpp#1)]
 [!code-csharp[sys.glob.ci.getCFUIC#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.ci.getCFUIC/CS/cfuic.cs#1)]
 [!code-vb[sys.glob.ci.getCFUIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.ci.getCFUIC/VB/cfuic.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCultureInfo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Recupera uma instância em cache, somente leitura de uma cultura.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (culture As Integer) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(int culture);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : int -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="culture">Um LCID (ID de localidade).</param>
        <summary>Recupera uma instância somente leitura armazenada em cache de uma cultura usando o identificador de cultura especificado.</summary>
        <returns>Um objeto somente leitura de <see cref="T:System.Globalization.CultureInfo" /> .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 É recomendável que você use a sobrecarga de cadeia de caracteres desse método (<xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29>), porque os nomes de localidade devem ser usados em vez de LCIDs. Para localidades personalizadas, é necessário o nome da localidade.  
  
 Se `culture` é o identificador de localidade da cultura atual, retornado <xref:System.Globalization.CultureInfo> objeto não reflete qualquer substituições do usuário.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="culture" /> é menor que zero.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="culture" /> especifica uma cultura que não tem suporte. Para obter mais informações, consulte a seção Observações para chamadores.</exception>
        <block subset="none" type="usage">
          <para>O [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] e versões anteriores geram uma <see cref="T:System.ArgumentException" /> se <paramref name="culture" /> não é um identificador de cultura válido. Começando com o [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], esse método lança um <see cref="T:System.Globalization.CultureNotFoundException" />. Começando com os aplicativos que são executados sob o [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] ou posterior no Windows 7 ou posterior, o método tenta recuperar um <see cref="T:System.Globalization.CultureInfo" /> objeto cujo identificador é <paramref name="culture" /> do sistema operacional; se o sistema operacional não der suporte a essa cultura, o método lança um <see cref="T:System.Globalization.CultureNotFoundException" />.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">O nome de uma cultura. <c>name</c> não diferencia maiúsculas de minúsculas.</param>
        <summary>Recupera uma instância armazenada em cache somente leitura de uma cultura usando o nome da cultura especificada.</summary>
        <returns>Um objeto somente leitura de <see cref="T:System.Globalization.CultureInfo" /> .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter uma lista de nomes de cultura predefinidos, consulte a [suporte ao idioma nacional (NLS) API de referência](https://go.microsoft.com/fwlink/?LinkId=200048) no Go Global Developer Center. Além disso, começando com o Windows 10, `name` pode ser qualquer marca de idioma BCP-47 válida.  
  
 O <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> método recupera um cache somente leitura <xref:System.Globalization.CultureInfo> objeto. Ele oferece desempenho melhor do que uma chamada correspondente para o <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29?displayProperty=nameWithType> construtor.  
  
 Se `name` é o nome da cultura atual, retornado <xref:System.Globalization.CultureInfo> objeto não reflete qualquer substituições do usuário. Isso torna o método adequado para aplicativos de servidor ou ferramentas que não têm uma conta de usuário reais no sistema e que precisam carregar várias culturas com eficiência.  
  
 Se `name` é <xref:System.String.Empty?displayProperty=nameWithType>, o método retorna a cultura invariável. Isso é equivalente a recuperar o valor da <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriedade.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> é nulo.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> especifica uma cultura que não tem suporte. Para obter mais informações, consulte a seção Observações para chamadores.</exception>
        <block subset="none" type="usage">
          <para>O [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] e versões anteriores geram uma <see cref="T:System.ArgumentException" /> se <paramref name="name" /> não é um nome de cultura válido. Começando com o [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], esse método lança um <see cref="T:System.Globalization.CultureNotFoundException" />. Começando com os aplicativos que são executados sob o [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] ou posterior no Windows 7 ou posterior, o método tenta recuperar um <see cref="T:System.Globalization.CultureInfo" /> objeto cujo identificador é <paramref name="name" /> do sistema operacional; se o sistema operacional não oferece suporte a essa cultura e se <paramref name="name" /> não é o nome de uma cultura suplementar ou de substituição, o método lança um <see cref="T:System.Globalization.CultureNotFoundException" />.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name, string altName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name, string altName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (name As String, altName As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(System::String ^ name, System::String ^ altName);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : string * string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo (name, altName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="altName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">O nome de uma cultura. <c>name</c> não diferencia maiúsculas de minúsculas.</param>
        <param name="altName">O nome de uma cultura que fornece os objetos <see cref="T:System.Globalization.TextInfo" /> e <see cref="T:System.Globalization.CompareInfo" /> usados para inicializar <c>name</c>. <c>altName</c> não diferencia maiúsculas de minúsculas.</param>
        <summary>Recupera uma instância em cache, somente leitura de uma cultura. Os parâmetros especificam uma cultura que é inicializada com os objetos <see cref="T:System.Globalization.TextInfo" /> e <see cref="T:System.Globalization.CompareInfo" /> especificados por outra cultura.</summary>
        <returns>Um objeto somente leitura de <see cref="T:System.Globalization.CultureInfo" /> .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter uma lista de nomes de cultura predefinidos, consulte a [suporte ao idioma nacional (NLS) API de referência](https://go.microsoft.com/fwlink/?LinkId=200048) no Go Global Developer Center. Além disso, começando com o Windows 10, `name` pode ser qualquer marca de idioma BCP-47 válida.  
  
 O <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> método obtém um cache somente leitura <xref:System.Globalization.CultureInfo> objeto. Ele oferece desempenho melhor do que uma chamada correspondente para um <xref:System.Globalization.CultureInfo.%23ctor%2A> construtor. O método é usado para criar uma cultura semelhante àquela especificada pelo `name` parâmetro, mas com diferentes classificar e alojar regras.  
  
 Se `name` ou `altName` é o nome da cultura atual, os objetos retornados não refletir quaisquer substituições do usuário. Se `name` é <xref:System.String.Empty?displayProperty=nameWithType>, o método retorna a cultura invariável. Isso é equivalente a recuperar o valor da <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriedade. Se `altName` é <xref:System.String.Empty?displayProperty=nameWithType>, o método usa o sistema de escrita e comparação regras especificadas pela cultura invariável.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ou <paramref name="altName" /> é nulo.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> ou <paramref name="altName" /> especifica uma cultura que não tem suporte. Para obter mais informações, consulte a seção Observações para chamadores.</exception>
        <block subset="none" type="usage">
          <para>O [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] e versões anteriores geram uma <see cref="T:System.ArgumentException" /> se <paramref name="name" /> ou <paramref name="altName" /> não é um nome de cultura válido. Começando com o [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], esse método lança um <see cref="T:System.Globalization.CultureNotFoundException" />. Começando com os aplicativos que são executados sob o [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] ou posterior no Windows 7 ou posterior, o método tenta recuperar um <see cref="T:System.Globalization.CultureInfo" /> objeto cujo identificador é <paramref name="name" /> do sistema operacional; se o sistema operacional não oferece suporte a essa cultura e se <paramref name="name" /> não é o nome de uma cultura suplementar ou de substituição, o método lança um <see cref="T:System.Globalization.CultureNotFoundException" /> exceção. Começando com os aplicativos que são executados sob o [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] ou posterior no Windows 7 ou posterior, o método tenta recuperar um <see cref="T:System.Globalization.CultureInfo" /> objeto cujo identificador é <paramref name="name" /> do sistema operacional; se o sistema operacional não oferece suporte a essa cultura e se <paramref name="name" /> não é o nome de uma cultura suplementar ou de substituição, o método lança um <see cref="T:System.Globalization.CultureNotFoundException" /> exceção.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfoByIetfLanguageTag">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfoByIetfLanguageTag (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfoByIetfLanguageTag(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfoByIetfLanguageTag : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">O nome de uma linguagem conforme especificado pelo padrão RFC 4646.</param>
        <summary>Preterido. Recupera um objeto <see cref="T:System.Globalization.CultureInfo" /> somente leitura tendo características linguísticas que são identificadas pela marca de idioma RFC 4646 especificada.</summary>
        <returns>Um objeto somente leitura de <see cref="T:System.Globalization.CultureInfo" /> .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Esse método e o <xref:System.Globalization.CultureInfo.IetfLanguageTag%2A> propriedade foram preteridos. Em vez de usar esses elementos, o aplicativo deve usar um novo <xref:System.Globalization.CultureInfo> objeto e chamadas para o <xref:System.Globalization.CultureInfo.Name%2A> propriedade. IETF marcas e os nomes são idênticos.  
  
 O padrão de RFC 4646 que é mantido pelo Task Force IETF (Internet Engineering) define uma marca de idioma da IETF, que fornece um meio uniforme de identificação de um idioma. O formato de uma marca de idioma da IETF é o mesmo que o nome de cultura retornado pelo <xref:System.Globalization.CultureInfo.Name%2A> propriedade, mas não identifica exclusivamente uma cultura. Diferentes culturas compartilham a mesma marca de idioma da IETF se essas culturas têm características linguísticas idênticas. As características linguísticas de uma cultura que estão contidas na <xref:System.Globalization.TextInfo> objeto associado a um <xref:System.Globalization.CultureInfo> objeto.  
  
 Uma marca de idioma da IETF consiste em um identificador de idioma obrigatório, um identificador de script opcional e um identificador de região opcional.  
  
 Seus aplicativos devem usar a cultura recuperada para controlar tarefas de idioma específico, como gerenciar um verificador ortográfico ou gramatical. Aplicativos não devem usar a cultura recuperada para controlar tarefas específicas de cultura, como classificação de texto ou formatação de horas e datas.  
  
 Para obter mais informações, consulte RFC 4646, "Marcas de idiomas de identificação de" e mais recente de rascunho padrão, Draft-phillips-langtags-05.txt, em [ http://go.microsoft.com/fwlink/?LinkId=100231 ](https://go.microsoft.com/fwlink/?LinkId=100231).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> é nulo.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> não corresponde a uma cultura com suporte.</exception>
        <block subset="none" type="usage">
          <para>O [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] e versões anteriores geram uma <see cref="T:System.ArgumentException" /> se <paramref name="name" /> não corresponde ao nome de uma cultura com suporte. Começando com o [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], esse método lança um <see cref="T:System.Globalization.CultureNotFoundException" />.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.TextInfo" />
        <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultures">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo[] GetCultures (System.Globalization.CultureTypes types);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo[] GetCultures(valuetype System.Globalization.CultureTypes types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultures (types As CultureTypes) As CultureInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Globalization::CultureInfo ^&gt; ^ GetCultures(System::Globalization::CultureTypes types);" />
      <MemberSignature Language="F#" Value="static member GetCultures : System.Globalization.CultureTypes -&gt; System.Globalization.CultureInfo[]" Usage="System.Globalization.CultureInfo.GetCultures types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Globalization.CultureTypes" />
      </Parameters>
      <Docs>
        <param name="types">Uma combinação bit a bit dos valores de enumeração que filtram as culturas a serem recuperadas.</param>
        <summary>Obtém a lista de culturas com suporte filtradas por parâmetro <see cref="T:System.Globalization.CultureTypes" /> especificado.</summary>
        <returns>Uma matriz que contém as culturas especificadas pelo parâmetro <paramref name="types" />. A matriz de culturas não está classificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Globalization.CultureInfo.GetCultures%2A> é mais comumente chamado de método com o `types` parâmetro definido para os seguintes valores:  
  
-   <xref:System.Globalization.CultureTypes.SpecificCultures>, que retorna todas as culturas específicas.  
  
-   <xref:System.Globalization.CultureTypes.NeutralCultures>, que retorna todas as culturas neutras e a cultura invariável.  
  
-   <xref:System.Globalization.CultureTypes.AllCultures>, que retorna todas as culturas neutras e específicas, culturas instaladas no sistema Windows e culturas personalizadas criadas pelo usuário.  
  
-   <xref:System.Globalization.CultureTypes.UserCustomCulture>, que retorna todas as culturas personalizadas, como aquelas registradas pelo <xref:System.Globalization.CultureAndRegionInfoBuilder> classe. Nas versões do Windows anteriores ao Windows 10, o <xref:System.Globalization.CultureTypes.UserCustomCulture> valor se aplica a todas as culturas personalizadas definidas pelo usuário. Começando com o Windows 10, ela se aplica a culturas de sistema que não têm dados culturais completa e que não têm um identificador local exclusivo, conforme indicado pelo <xref:System.Globalization.CultureInfo.LCID%2A> valor da propriedade. Como resultado, o código como o seguinte retornará resultados diferentes quando executado no Windows 10 e em uma versão anterior do Windows.  
  
     [!code-csharp[System.Globalization.CultureInfo.GetCultures#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures3.cs#2)]
     [!code-vb[System.Globalization.CultureInfo.GetCultures#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures3.vb#2)]  
  
   
  
## Examples  
 O exemplo de código a seguir exibe várias propriedades das culturas neutras.  
  
> [!NOTE]
>  O exemplo exibe as culturas zh-CHS e zh-CHT com os identificadores de cultura 0x0004 e 0x7C04, respectivamente. No entanto, os aplicativos do Windows Vista devem usar o nome de zh-Hans em vez de zh-CHS e o nome de zh-Hant em vez de zh-CHT. O zh-Hans e zh-Hant nomes representam o padrão atual e deve ser usados, a menos que você tenha um motivo para usar os nomes antigos.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O <paramref name="types" /> especifica uma combinação inválida de valores <see cref="T:System.Globalization.CultureTypes" />.</exception>
        <altmember cref="T:System.Globalization.CultureTypes" />
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public virtual object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj&#xA;override this.GetFormat : Type -&gt; obj" Usage="cultureInfo.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormatProvider.GetFormat(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">O <see cref="T:System.Type" /> para o qual obter um objeto de formatação. Este método só tem suporte para os tipos <see cref="T:System.Globalization.NumberFormatInfo" /> e <see cref="T:System.Globalization.DateTimeFormatInfo" />.</param>
        <summary>Obtém um objeto que define como formatar o tipo especificado.</summary>
        <returns>O valor da <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> propriedade, que é uma <see cref="T:System.Globalization.NumberFormatInfo" /> que contém as informações de formato numéricas padrão atual <see cref="T:System.Globalization.CultureInfo" />, se <paramref name="formatType" /> é o objeto de <see cref="T:System.Type" /> para a <see cref="T:System.Globalization.NumberFormatInfo" /> classe.  
  
- ou - 
O valor da <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> propriedade, que é uma <see cref="T:System.Globalization.DateTimeFormatInfo" /> que contém as informações de formato de data e hora padrão para atual <see cref="T:System.Globalization.CultureInfo" />, se <paramref name="formatType" /> é o objeto de <see cref="T:System.Type" /> para a <see cref="T:System.Globalization.DateTimeFormatInfo" /> classe.  
  
- ou - 
nulo, se <paramref name="formatType" /> for qualquer outro objeto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.GetFormat%2A> implementa <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>.  
  
 `NumberFormatInfo` fornece o formato numérico de específicas da cultura usado em conjunto com os métodos de formato em tipos de dados base. `DateTimeFormatInfo` Controla como os valores de data e hora são formatados para uma cultura específica.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="cultureInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Funciona como uma função de hash para o <see cref="T:System.Globalization.CultureInfo" /> atual, adequada para algoritmos de hash e estruturas de dados, como uma tabela de hash.</summary>
        <returns>Um código hash do <see cref="T:System.Globalization.CultureInfo" /> atual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método substitui <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.  
  
 Este método gera o mesmo código hash para dois objetos são iguais de acordo com o <xref:System.Globalization.CultureInfo.Equals%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.CultureInfo.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IetfLanguageTag : string" Usage="System.Globalization.CultureInfo.IetfLanguageTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Preterido. Obtém a identificação de RFC 4646 padrão de um idioma.</summary>
        <value>Uma cadeia de caracteres que é a identificação de RFC 4646 padrão de um idioma.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Essa propriedade e o <xref:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag%2A> método foram preteridos. Em vez disso, você deve usar um o <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> propriedade. IETF marcas e os nomes são idênticos.  
  
 O padrão de RFC 4646 que é mantido pelo Task Force IETF (Internet Engineering) define uma marca de idioma da IETF, que fornece um meio uniforme de identificação de um idioma. O formato de uma marca de idioma da IETF é semelhante para o nome de cultura retornado pelo <xref:System.Globalization.CultureInfo.Name%2A> propriedade, mas não identifica exclusivamente uma cultura. Ou seja, diferentes culturas compartilham a mesma marca de idioma da IETF se essas culturas têm características linguísticas idênticas. As características linguísticas de uma cultura que estão contidas na <xref:System.Globalization.TextInfo> objeto associado a um <xref:System.Globalization.CultureInfo> objeto.  
  
 Uma marca de idioma da IETF consiste em um identificador de idioma obrigatório, um identificador de script opcional e um identificador de região opcional.  
  
 Para obter mais informações, consulte [RFC 5646, "marcas para identificar idiomas](https://go.microsoft.com/fwlink/?LinkId=230876). Para obter uma lista de submarcas, consulte [o registro de submarca de idioma IANA](https://go.microsoft.com/fwlink/?LinkId=230877).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.TextInfo" />
        <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
      </Docs>
    </Member>
    <Member MemberName="InstalledUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo InstalledUICulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo InstalledUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.InstalledUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InstalledUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ InstalledUICulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InstalledUICulture : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.InstalledUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o <see cref="T:System.Globalization.CultureInfo" /> que representa a cultura instalada com o sistema operacional.</summary>
        <value>O <see cref="T:System.Globalization.CultureInfo" /> que representa a cultura instalada com o sistema operacional.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Em um sistema operacional localizado, como uma edição em japonês do Windows, essa propriedade retorna a cultura do sistema operacional. Essa propriedade é o equivalente de `GetSystemDefaultUILanguage` na API do Windows.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Resources.ResourceManager" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
      </Docs>
    </Member>
    <Member MemberName="InvariantCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo InvariantCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo InvariantCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.InvariantCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ InvariantCulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantCulture : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.InvariantCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o objeto <see cref="T:System.Globalization.CultureInfo" /> que é independente de cultura (invariável).</summary>
        <value>O objeto que é independente de cultura (invariável).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cultura invariável não faz diferenciação de cultura; ele está associado com o idioma inglês, mas não com qualquer país/região. Especificar a cultura invariável por nome usando uma cadeia de caracteres vazia ("") na chamada para um <xref:System.Globalization.CultureInfo> método de instanciação. <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> também recupera uma instância da cultura invariável. Ele pode ser usado em quase qualquer método no <xref:System.Globalization> namespace que requer uma cultura. Os objetos retornados pelas propriedades como <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, e <xref:System.Globalization.CultureInfo.NumberFormat%2A> também refletem a comparação de cadeia de caracteres e as convenções da cultura invariável de formatação.  
  
 Ao contrário dos dados sensíveis à cultura, que está sujeita a alterações pela personalização de usuário ou pelas atualizações para o .NET Framework ou o sistema operacional, dados de cultura invariável é estáveis ao longo do tempo e entre culturas instaladas e não podem ser personalizados pelos usuários. Isso torna a cultura invariável particularmente útil para operações que exigem que os resultados de independente de cultura, como formatação e análise de operações que persistem formatado dados, ou de classificação e ordenação de operações que exigem que dados exibidos em um ordem fixa independentemente da cultura.  
  
## <a name="string-operations"></a>Operações da cadeia de caracteres  
 Você pode usar a cultura invariável para operações de cadeia de caracteres sensíveis à cultura que não são afetados pelas convenções da cultura do thread atual e que são consistentes entre culturas. Por exemplo, convém dados classificados para aparecer em uma ordem fixa ou aplicar um conjunto padrão de convenções de maiusculas e minúsculas em cadeias de caracteres, independentemente da cultura do thread atual. Para fazer isso, você passa o <xref:System.Globalization.CultureInfo.InvariantCulture%2A> objeto para um método que tem um <xref:System.Globalization.CultureInfo> parâmetro, como <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Boolean%2CSystem.Globalization.CultureInfo%29> e <xref:System.String.ToUpper%28System.Globalization.CultureInfo%29>.  
  
## <a name="persisting-data"></a>Mantendo dados  
 O <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriedade pode ser usada para manter os dados em um formato independente de cultura. Isso fornece um formato conhecido que não é alterado e que pode ser usado para serializar e desserializar dados entre culturas. Depois que os dados são desserializados, podem ser formatado adequadamente com base nas convenções culturais do usuário atual.  
  
 Por exemplo, se você optar por manter os dados de data e hora no formato de cadeia de caracteres, você pode passar o <xref:System.Globalization.CultureInfo.InvariantCulture%2A> do objeto para o <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> ou <xref:System.DateTimeOffset.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> método para criar a cadeia de caracteres e você pode passar o <xref:System.Globalization.CultureInfo.InvariantCulture%2A> do objeto para o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> ou <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método para converter a cadeia de caracteres de volta para um valor de data e hora. Essa técnica garante que a data subjacente e valores de hora não são alterados quando os dados são lidos ou gravados por usuários de diferentes culturas.  
  
 O exemplo a seguir usa a cultura invariável para persistir um <xref:System.DateTime> valor como uma cadeia de caracteres. Em seguida, ele analisa a cadeia de caracteres e exibe seu valor, usando as convenções de formatação das culturas alemão (Alemanha) e francês (França).  
  
 [!code-csharp[System.Globalization.CultureInfo.InvariantCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.invariantculture/cs/persist1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.InvariantCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.invariantculture/vb/persist1.vb#1)]  
  
## <a name="security-decisions"></a>Decisões de segurança  
 Se você estiver fazendo uma decisão de segurança (por exemplo, se deseja permitir o acesso a um recurso do sistema) com base no resultado de uma comparação de cadeia de caracteres ou uma alteração, você não deve usar a cultura invariável. Em vez disso, você deve executar uma comparação ordinal diferencia maiusculas de minúsculas ou maiusculas de minúsculas, chamando um método que inclui um <xref:System.StringComparison> parâmetro e fornecendo o <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> ou <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> como um argumento. Código que executa operações de cadeia de caracteres sensíveis à cultura pode causar vulnerabilidades de segurança, se a cultura atual é alterada ou se a cultura no computador que está executando o código é diferente da cultura que é usada para testar o código. Em contraste, uma comparação ordinal depende exclusivamente o valor binário dos caracteres comparados.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
        <altmember cref="P:System.Globalization.CultureInfo.IsNeutralCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsNeutralCulture">
      <MemberSignature Language="C#" Value="public virtual bool IsNeutralCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNeutralCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IsNeutralCulture" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsNeutralCulture As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsNeutralCulture { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNeutralCulture : bool" Usage="System.Globalization.CultureInfo.IsNeutralCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se o <see cref="T:System.Globalization.CultureInfo" /> atual representa uma cultura neutra.</summary>
        <value>
          <see langword="true" /> se a <see cref="T:System.Globalization.CultureInfo" /> atual representar uma cultura neutra, caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma cultura neutra é uma cultura que está associada com uma linguagem mas não com um país ou região. Ele é diferente de uma cultura específica, que é uma cultura que está associada com tanto uma linguagem e um país ou região. Por exemplo, fr é o nome para a cultura Francês neutra, enquanto fr-FR é o nome para a cultura Francês na França.  
  
 Se essa propriedade retornará `false`, a cultura for uma cultura específica ou a cultura invariável.  
  
   
  
## Examples  
 O exemplo de código a seguir determina quais culturas usando o idioma chinês são culturas neutras.  
  
> [!NOTE]
>  O exemplo exibe os nomes de cultura de zh-CHT com os identificadores de cultura 0x0004 e 0x7C04 e zh-CHS mais antigos, respectivamente. No entanto, os aplicativos do Windows Vista devem usar o nome de zh-Hans em vez de zh-CHS e o nome de zh-Hant em vez de zh-CHT. O zh-Hans e zh-Hant nomes representam o padrão atual e deve ser usados, a menos que você tenha um motivo para usar os nomes antigos.  
  
 [!code-cpp[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/CPP/neutralculture.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/CS/neutralculture.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/VB/neutralculture.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Globalization.CultureInfo.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se o objeto <see cref="T:System.Globalization.CultureInfo" /> é somente leitura.</summary>
        <value>
          <see langword="true" /> Se o atual <see cref="T:System.Globalization.CultureInfo" /> é somente leitura; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o <xref:System.Globalization.CultureInfo> é somente leitura, o <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> e <xref:System.Globalization.CultureInfo.NumberFormat%2A> instâncias também são somente leitura.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra que <xref:System.Globalization.CultureInfo.IsReadOnly%2A> também ajuda a proteger os <xref:System.Globalization.DateTimeFormatInfo> e <xref:System.Globalization.NumberFormatInfo> instâncias associadas a <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CPP/yslin_cultureinfo_readonly.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CS/yslin_cultureinfo_readonly.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/VB/yslin_cultureinfo_readonly.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="KeyboardLayoutId">
      <MemberSignature Language="C#" Value="public virtual int KeyboardLayoutId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyboardLayoutId" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.KeyboardLayoutId" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property KeyboardLayoutId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int KeyboardLayoutId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyboardLayoutId : int" Usage="System.Globalization.CultureInfo.KeyboardLayoutId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o identificador de localidade de entrada ativo.</summary>
        <value>Um número com sinal de 32 bits que especifica um identificador de localidade de entrada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O identificador de localidade de entrada foi denominado o layout do teclado. Um identificador de localidade de entrada é um conceito mais amplo de um layout de teclado, pois isso também pode indicar um conversor de fala em texto, um Editor de método de entrada (IME) ou qualquer outro formulário de entrada.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public virtual int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.LCID" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int LCID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LCID : int" Usage="System.Globalization.CultureInfo.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o identificador de cultura para o <see cref="T:System.Globalization.CultureInfo" /> atual.</summary>
        <value>O identificador de cultura para o <see cref="T:System.Globalization.CultureInfo" /> atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na maioria dos casos, o identificador de cultura é mapeado para o identificador de localidade NLS correspondente.  
  
 Nas versões do Windows antes do Windows 10, o identificador de localidade `LOCALE_CUSTOM_UNSPECIFIED` (0x1000 ou 4096) é atribuído a culturas personalizadas criadas pelo usuário. Começando com o Windows 10, ele é atribuído a qualquer cultura que não tem um identificador de localidade exclusiva e não tem total dos dados fornecidos pelo sistema. Como resultado, o código que itera culturas e recupera aquelas com uma <xref:System.Globalization.CultureInfo.LCID%2A> valor de `LOCALE_CUSTOM_UNSPECIFIED` retorna um subconjunto maior de <xref:System.Globalization.CultureInfo> objetos se executado em Windows 10.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como criar uma <xref:System.Globalization.CultureInfo> para Espanhol (Espanha) com a ordem de classificação internacional e outra <xref:System.Globalization.CultureInfo> com a ordem de classificação tradicional.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Globalization.CultureInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o nome de cultura no formato *languagecode2*-*country/regioncode2*.</summary>
        <value>O nome da cultura no formato *languagecode2*-*país/código_de_região2*. *languagecode2* é um código de duas letras minúsculas derivado do ISO 639-1. *country/regioncode2* é derivado do ISO 3166 e geralmente consiste em duas letras maiúsculas ou uma marca de idioma BCP-47.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter uma lista de identificadores e nomes de cultura predefinidos que o <xref:System.Globalization.CultureInfo.Name%2A> pode retornar a propriedade, consulte a [suporte ao idioma nacional (NLS) API de referência](https://go.microsoft.com/fwlink/?LinkId=200048) no Go Global Developer Center. Além disso, começando com o Windows 10, `name` pode ser qualquer marca de idioma BCP-47 válida. Observe que os nomes de cultura estão sujeitos a alterações e que eles também podem refletir os nomes de culturas personalizadas.  
  
 O <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> propriedade segue os padrões de nomenclatura fornecidos no <xref:System.Globalization.CultureInfo> tópico da classe. Ele retorna a forma abreviada do nome de cultura que exclui qualquer indicação de uma ordem de classificação alternativa. Por exemplo, se você criar uma instância de um <xref:System.Globalization.CultureInfo> objeto usando a cadeia de caracteres "de-DE_phoneb" para refletir uma ordem de classificação alternativa, o <xref:System.Globalization.CultureInfo.Name%2A> propriedade retorna "de-DE".  
  
 Para obter o nome completo da cultura, você deve usar o <xref:System.Globalization.CultureInfo.DisplayName%2A>, <xref:System.Globalization.CultureInfo.EnglishName%2A>, ou <xref:System.Globalization.CultureInfo.NativeName%2A> propriedade.  
  
   
  
## Examples  
 O exemplo de código a seguir exibe várias propriedades das culturas neutras.  
  
> [!NOTE]
>  O exemplo exibe os nomes de cultura de zh-CHT com os identificadores de cultura 0x0004 e 0x7C04 e zh-CHS mais antigos, respectivamente. No entanto, os aplicativos do Windows Vista devem usar o nome de zh-Hans em vez de zh-CHS e o nome de zh-Hant em vez de zh-CHT. O zh-Hans e zh-Hant nomes representam o padrão atual e deve ser usados, a menos que você tenha um motivo para usar os nomes antigos.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="NativeName">
      <MemberSignature Language="C#" Value="public virtual string NativeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.NativeName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NativeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NativeName : string" Usage="System.Globalization.CultureInfo.NativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o nome de cultura, composto pelo idioma, o país/região e o script opcional, que a cultura está configurada para exibir.</summary>
        <value>O nome da cultura. composto pelo nome completo do idioma, o nome completo do país/região e o script opcional. O formato é discutido na descrição da classe <see cref="T:System.Globalization.CultureInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor dessa propriedade é o mesmo, independentemente da versão do idioma do .NET Framework.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="NumberFormat">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.NumberFormatInfo NumberFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.NumberFormatInfo NumberFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.NumberFormat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property NumberFormat As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::NumberFormatInfo ^ NumberFormat { System::Globalization::NumberFormatInfo ^ get(); void set(System::Globalization::NumberFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberFormat : System.Globalization.NumberFormatInfo with get, set" Usage="System.Globalization.CultureInfo.NumberFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um <see cref="T:System.Globalization.NumberFormatInfo" /> que define o formato culturalmente apropriado de exibição de números, moeda e percentual.</summary>
        <value>Um <see cref="T:System.Globalization.NumberFormatInfo" /> que define o formato culturalmente apropriado de exibição de números, moeda e percentual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overrides"></a>Substituições  
 O usuário pode optar por substituir alguns dos valores associados com a cultura atual do Windows por meio de parte de opções regionais e de idioma do painel de controle. Por exemplo, o usuário pode escolher para exibir a data em um formato diferente ou usar uma moeda diferente do padrão para a cultura.  
  
 Se <xref:System.Globalization.CultureInfo.UseUserOverride%2A> está `true` e a cultura especificada corresponde a cultura atual do Windows, o <xref:System.Globalization.CultureInfo> usa essas substituições, incluindo as configurações de usuário para as propriedades do <xref:System.Globalization.DateTimeFormatInfo> instância retornada pela <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriedade, e as propriedades do <xref:System.Globalization.NumberFormatInfo> instância retornada pela <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade. Se as configurações do usuário são incompatíveis com a cultura associada com o <xref:System.Globalization.CultureInfo>, por exemplo, se o calendário selecionado não é um do <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, os resultados dos métodos e os valores das propriedades são indefinidos.  
  
 Os valores de <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriedade e o <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade não são calculadas até que o usuário acessa a propriedade. Se o usuário usa o painel de controle para alterar a cultura atual para uma nova cultura, enquanto o aplicativo está em execução e, em seguida, acessa o <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> ou <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade, o aplicativo recupera os valores padrão para a nova cultura. não as substituições para a cultura original. Para preservar as substituições para a cultura atual original, o aplicativo deve acessar o <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> e <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedades antes de alterar a cultura atual.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra CultureInfo.Clone também clona o <xref:System.Globalization.DateTimeFormatInfo> e <xref:System.Globalization.NumberFormatInfo> instâncias associadas a <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">A propriedade é definida como nula.</exception>
        <exception cref="T:System.InvalidOperationException">A propriedade <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> ou uma das propriedades <see cref="T:System.Globalization.NumberFormatInfo" /> é definida e o <see cref="T:System.Globalization.CultureInfo" /> é somente leitura.</exception>
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="OptionalCalendars">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.Calendar[] OptionalCalendars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar[] OptionalCalendars" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.OptionalCalendars" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OptionalCalendars As Calendar()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::Globalization::Calendar ^&gt; ^ OptionalCalendars { cli::array &lt;System::Globalization::Calendar ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OptionalCalendars : System.Globalization.Calendar[]" Usage="System.Globalization.CultureInfo.OptionalCalendars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a lista de calendários que pode ser usada pela cultura.</summary>
        <value>Uma matriz do tipo <see cref="T:System.Globalization.Calendar" /> que representa os calendários que podem ser usados pela cultura representada pelo <see cref="T:System.Globalization.CultureInfo" /> atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Seu aplicativo altera o calendário usado por atual <xref:System.Globalization.CultureInfo> definindo o <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> propriedade de <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, que é uma instância da <xref:System.Globalization.DateTimeFormatInfo> classe. O novo calendário deve ser um dos calendários listados no <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> também inclui outras propriedades que personalizar a formatação de data e hora associados a esse <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como determinar o <xref:System.Globalization.GregorianCalendar> versões com suporte pela cultura.  
  
 [!code-cpp[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/CPP/gregoriancalendartypes.cpp#1)]
 [!code-csharp[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/CS/gregoriancalendartypes.cs#1)]
 [!code-vb[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/VB/gregoriancalendartypes.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.CultureInfo Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Parent" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Parent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Parent As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CultureInfo ^ Parent { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o <see cref="T:System.Globalization.CultureInfo" /> que representa a cultura pai do <see cref="T:System.Globalization.CultureInfo" /> atual.</summary>
        <value>O <see cref="T:System.Globalization.CultureInfo" /> que representa a cultura pai do <see cref="T:System.Globalization.CultureInfo" /> atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As culturas têm uma hierarquia na qual o pai de uma cultura específica é uma cultura neutra, o pai de uma cultura neutra é o <xref:System.Globalization.CultureInfo.InvariantCulture%2A>e o pai do <xref:System.Globalization.CultureInfo.InvariantCulture%2A> é a cultura invariável em si. A cultura pai abrange apenas o conjunto de informações que são comuns entre os seus filhos.  
  
 Se os recursos para a cultura específica não estão disponíveis no sistema, os recursos para a cultura neutra são usados. Se os recursos para a cultura neutra não estiverem disponíveis, os recursos incorporados no assembly principal são usados. Para obter mais informações sobre o processo de fallback de recurso, consulte [Empacotando e implantando recursos](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md).  
  
   
  
## Examples  
 O exemplo de código a seguir determina a cultura pai de cada cultura específica usando o idioma chinês.  
  
> [!NOTE]
>  O exemplo exibe os nomes de cultura de zh-CHT com os identificadores de cultura 0x0004 e 0x7C04 e zh-CHS mais antigos, respectivamente. No entanto, os aplicativos do Windows Vista devem usar o nome de zh-Hans em vez de zh-CHS e o nome de zh-Hant em vez de zh-CHT. O zh-Hans e zh-Hant nomes representam o padrão atual e deve ser usados, a menos que você tenha um motivo para usar os nomes antigos.  
  
 [!code-cpp[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/CPP/parentculture.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/CS/parentculture.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/VB/parentculture.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Globalization.CultureInfo.#ctor" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo ReadOnly (System.Globalization.CultureInfo ci);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo ReadOnly(class System.Globalization.CultureInfo ci) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadOnly (ci As CultureInfo) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ ReadOnly(System::Globalization::CultureInfo ^ ci);" />
      <MemberSignature Language="F#" Value="static member ReadOnly : System.Globalization.CultureInfo -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.ReadOnly ci" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ci" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="ci">O objeto <see cref="T:System.Globalization.CultureInfo" /> a ser encapsulado.</param>
        <summary>Retorna um wrapper somente leitura em torno do objeto <see cref="T:System.Globalization.CultureInfo" /> especificado.</summary>
        <returns>Um wrapper <see cref="T:System.Globalization.CultureInfo" /> de somente leitura encapsula <paramref name="ci" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse wrapper impede que todas as modificações `ci`, ou os objetos retornados pelo `ci`.<xref:System.Globalization.CultureInfo.DateTimeFormat%2A> e `ci`.<xref:System.Globalization.CultureInfo.NumberFormat%2A> Propriedades.  
  
   
  
## Examples  
 O exemplo a seguir mostra que o <xref:System.Globalization.CultureInfo.ReadOnly%2A> método ajuda a proteger os <xref:System.Globalization.DateTimeFormatInfo> e <xref:System.Globalization.NumberFormatInfo> instâncias associadas a <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CPP/yslin_cultureinfo_readonly.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CS/yslin_cultureinfo_readonly.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/VB/yslin_cultureinfo_readonly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ci" /> é nulo.</exception>
        <altmember cref="P:System.Globalization.CultureInfo.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="TextInfo">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.TextInfo TextInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.TextInfo TextInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.TextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TextInfo As TextInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::TextInfo ^ TextInfo { System::Globalization::TextInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TextInfo : System.Globalization.TextInfo" Usage="System.Globalization.CultureInfo.TextInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.TextInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o <see cref="T:System.Globalization.TextInfo" /> que define o sistema de escrita associado à cultura.</summary>
        <value>O <see cref="T:System.Globalization.TextInfo" /> que define o sistema de escrita associado à cultura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Globalization.CultureInfo.TextInfo%2A> propriedade fornece informações de uso de maiusculas específicas da cultura para cadeias de caracteres. Para executar o uso de maiusculas e minúsculas insensíveis à cultura, o aplicativo deve usar o <xref:System.Globalization.CultureInfo.TextInfo%2A> propriedade de <xref:System.Globalization.CultureInfo.InvariantCulture%2A>.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como criar uma <xref:System.Globalization.CultureInfo> para Espanhol (Espanha) com a ordem de classificação internacional e outra <xref:System.Globalization.CultureInfo> com a ordem de classificação tradicional.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.TextInfo" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public virtual string ThreeLetterISOLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ThreeLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ThreeLetterISOLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterISOLanguageName : string" Usage="System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o código de três letras ISO 639-2 para o idioma do <see cref="T:System.Globalization.CultureInfo" /> atual.</summary>
        <value>O código de três letras ISO 639-2 para o idioma do <see cref="T:System.Globalization.CultureInfo" /> atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por exemplo, a abreviação de três letras para o inglês é "eng".  
  
> [!NOTE]
>  Quando a comunicação entre processos ou persistir dados geralmente é melhor para usar toda a <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>. Usar apenas o idioma pode perder o contexto e os dados.  
  
   
  
## Examples  
 O exemplo de código a seguir exibe várias propriedades das culturas neutras.  
  
> [!NOTE]
>  O exemplo exibe os nomes de cultura de zh-CHT com os identificadores de cultura 0x0004 e 0x7C04 e zh-CHS mais antigos, respectivamente. No entanto, os aplicativos do Windows Vista devem usar o nome de zh-Hans em vez de zh-CHS e o nome de zh-Hant em vez de zh-CHT. O zh-Hans e zh-Hant nomes representam o padrão atual e deve ser usados, a menos que você tenha um motivo para usar os nomes antigos.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterWindowsLanguageName">
      <MemberSignature Language="C#" Value="public virtual string ThreeLetterWindowsLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ThreeLetterWindowsLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ThreeLetterWindowsLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterWindowsLanguageName : string" Usage="System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o código de três letras do idioma, conforme definido na API do Windows.</summary>
        <value>O código de três letras do idioma, conforme definido na API do Windows.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade retorna o mesmo valor que o método da API do Windows `GetLocaleInfo` com o valor LOCALE_SABBREVLANGNAME. Por exemplo, o código de três letras para inglês (EUA) conforme definido na API do Windows é "enu".  
  
> [!NOTE]
>  Quando a comunicação entre processos ou persistir dados geralmente é melhor para usar toda a <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>. Usar apenas o idioma pode perder o contexto e os dados.  
  
   
  
## Examples  
 O exemplo de código a seguir exibe várias propriedades das culturas neutras.  
  
> [!NOTE]
>  O exemplo exibe os nomes de cultura de zh-CHT com os identificadores de cultura 0x0004 e 0x7C04 e zh-CHS mais antigos, respectivamente. No entanto, os aplicativos do Windows Vista devem usar o nome de zh-Hans em vez de zh-CHS e o nome de zh-Hant em vez de zh-CHT. O zh-Hans e zh-Hant nomes representam o padrão atual e deve ser usados, a menos que você tenha um motivo para usar os nomes antigos.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="cultureInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna uma cadeia de caracteres que contém o nome do <see cref="T:System.Globalization.CultureInfo" /> atual no formato *languagecode2*-*country/regioncode2*.</summary>
        <returns>Uma cadeia de caracteres que contém o nome do <see cref="T:System.Globalization.CultureInfo" /> atual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método substitui <xref:System.Object.ToString%2A?displayProperty=nameWithType>. Ele retorna uma versão normalizada do nome de cultura que é passado para o <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> ou <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> construtor ou o <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> ou <xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29> método. Ele normaliza a cadeia de caracteres de resultado pela conversão de caracteres de *languagecode2* para caracteres minúsculos e converter em *país/código_de_região2* em maiuscula, se necessário.  
  
 Nomes de cultura predefinidos são listados na [suporte ao idioma nacional (NLS) API de referência](https://go.microsoft.com/fwlink/?LinkId=200048) página em que o Go Global Developer Center.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
      </Docs>
    </Member>
    <Member MemberName="TwoLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public virtual string TwoLetterISOLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TwoLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TwoLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ TwoLetterISOLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TwoLetterISOLanguageName : string" Usage="System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o código de duas letras ISO 639-1 para o idioma do <see cref="T:System.Globalization.CultureInfo" /> atual.</summary>
        <value>O código de duas letras ISO 639-1 para o idioma do <see cref="T:System.Globalization.CultureInfo" /> atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por exemplo, a abreviação de duas letras para o inglês é "en". O <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> valor da propriedade para a cultura invariável é "iv".  
  
> [!NOTE]
>  Quando a comunicação entre processos ou persistir dados geralmente é melhor para usar toda a <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>. Usar apenas o idioma pode perder o contexto e os dados.  
  
 Se o ISO 639-1 não define um código de idioma de duas letras para uma determinada cultura, o <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> propriedade retorna uma cadeia de caracteres que consiste em três ou mais letras. Para obter mais informações, consulte o exemplo.  
  
   
  
## Examples  
 O exemplo a seguir lista as culturas cujos <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> propriedade não consiste em um código de idioma de duas letras.  
  
 [!code-csharp[System.Globalization.CultureInfo.TwoLetterISOLanguageName#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.twoletterisolanguagename/cs/twoletterisolanguagename1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.TwoLetterISOLanguageName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.twoletterisolanguagename/vb/twoletterisolanguagename1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="UseUserOverride">
      <MemberSignature Language="C#" Value="public bool UseUserOverride { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseUserOverride" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.UseUserOverride" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UseUserOverride As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseUserOverride { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UseUserOverride : bool" Usage="System.Globalization.CultureInfo.UseUserOverride" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se o objeto <see cref="T:System.Globalization.CultureInfo" /> atual usa as configurações de cultura selecionadas pelo usuário.</summary>
        <value>
          <see langword="true" /> se o <see cref="T:System.Globalization.CultureInfo" /> atual usa as configurações de cultura selecionadas pelo usuário, caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O usuário pode optar por substituir alguns dos valores associados com a cultura atual do Windows por meio de parte de opções regionais e de idioma do painel de controle. Por exemplo, o usuário pode escolher para exibir a data em um formato diferente ou usar uma moeda diferente do padrão para a cultura.  
  
 Se <xref:System.Globalization.CultureInfo.UseUserOverride%2A> está `true` e a cultura especificada corresponde a cultura atual do Windows, o <xref:System.Globalization.CultureInfo> usa essas substituições, incluindo as configurações de usuário para as propriedades do <xref:System.Globalization.DateTimeFormatInfo> instância retornada pela <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriedade, e as propriedades do <xref:System.Globalization.NumberFormatInfo> instância retornada pela <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriedade. Se as configurações do usuário são incompatíveis com a cultura associada com o <xref:System.Globalization.CultureInfo>, por exemplo, se o calendário selecionado não é um do <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, os resultados dos métodos e os valores das propriedades são indefinidos.  
  
 Essa propriedade é definida quando o <xref:System.Globalization.CultureInfo> é criado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>