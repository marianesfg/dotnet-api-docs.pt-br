<Type Name="ExpressionEditorSheet" FullName="System.Web.UI.Design.ExpressionEditorSheet">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a88ee7d30ddcfee7e41a91a055b01c9d43e498b2" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48598559" /></Metadata><TypeSignature Language="C#" Value="public abstract class ExpressionEditorSheet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionEditorSheet extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.Design.ExpressionEditorSheet" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionEditorSheet" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionEditorSheet abstract" />
  <TypeSignature Language="F#" Value="type ExpressionEditorSheet = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa uma folha de editor de tempo de design para uma expressão personalizada. Essa classe deve ser herdada.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma folha de editor de expressão personalizada permite que um desenvolvedor definir propriedades em uma expressão personalizada em tempo de design. Os valores de propriedade de controle podem ser definidos usando cadeias de caracteres de expressão; as cadeias de caracteres de expressão são avaliadas em tempo de execução por um construtor de expressões e em tempo de design, um editor de expressão.  
  
 Quando você procura o <xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A> propriedade para um controle na grade de propriedades de tempo de design, o visual designer exibe uma caixa de diálogo para definir as expressões que fornecem o valor para uma propriedade de controle. Você pode selecionar o tipo da expressão com base em uma lista de prefixos de expressão. Quando você seleciona um prefixo de expressão da lista, o designer visual usa associado <xref:System.Web.UI.Design.ExpressionEditor> e <xref:System.Web.UI.Design.ExpressionEditorSheet> objetos para avaliar e converter a cadeia de caracteres de expressão baseiam na sintaxe para esse tipo de expressão. O designer visual usa propriedades de folha de editor de expressão para solicitar um ou mais cadeias de caracteres que combinam na cadeia de caracteres de expressão personalizada.  
  
 Normalmente, para fornecer um novo tipo de expressão em tempo de design, você define um prefixo de expressão exclusivo e forneçam personalizado <xref:System.Web.Compilation.ExpressionBuilder> e <xref:System.Web.UI.Design.ExpressionEditor> implementações. Opcionalmente, você pode fornecer um personalizado <xref:System.Web.UI.Design.ExpressionEditorSheet> implementação que define as propriedades que são usadas para formar a expressão. Para associar um prefixo de expressão com um construtor de expressão e um editor de expressão, se aplicam a <xref:System.Web.Compilation.ExpressionEditorAttribute> atributo e um <xref:System.Web.Compilation.ExpressionPrefixAttribute> atributo personalizadas <xref:System.Web.Configuration.ExpressionBuilder> de classe e, em seguida, configure o prefixo de expressão para um construtor de expressões o `expressionBuilders` elemento no arquivo de configuração da Web.  
  
 A implementação padrão da <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> método retorna uma folha de editor básico, que usa uma única cadeia de caracteres de entrada para formar a expressão. Editores de expressão personalizado que são derivados do <xref:System.Web.UI.Design.ExpressionEditor> pode substituir o <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> método para retornar a implementação de folha de um editor personalizado. Normalmente, uma folha de editor personalizado contém várias propriedades que são usadas para construir a cadeia de caracteres de expressão. O <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> método retorna a cadeia de caracteres de expressão resultante com base nas propriedades de expressão atual.  
  
 Por exemplo, o <xref:System.Web.UI.Design.ResourceExpressionEditor> classe deriva o <xref:System.Web.UI.Design.ExpressionEditor> de classe e fornece uma implementação para avaliar e associar uma referência de cadeia de caracteres de recurso com uma propriedade de controle em tempo de design. O <xref:System.Web.Compilation.ResourceExpressionBuilder> classe está associado com o prefixo de expressão `Resources` e o <xref:System.Web.UI.Design.ResourceExpressionEditor> implementação. O <xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A> método retorna um <xref:System.Web.UI.Design.ResourceExpressionEditorSheet>, que define as propriedades individuais que formam uma expressão de referência de recurso.  
  
 Quando você herda o <xref:System.Web.UI.Design.ExpressionEditorSheet> classe, você deve substituir os seguintes membros:  
  
-   O <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> método para retornar a implementação de folha de um editor personalizado.  
  
-   O <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> construtor implementar ações de inicialização personalizada para sua implementação de folha de editor de expressão.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Derivar de uma folha de editor de expressão personalizada de <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> classe, se você estiver definindo um novo tipo de expressão para valores de propriedade de controle e você deseja criar a cadeia de caracteres de expressão com base em vários valores de propriedade de expressão. Uma implementação de classe derivada deve conter o seguinte: 
-Uma propriedade pública para cada valor distinto na cadeia de expressão que pode ser definida em tempo de design.  
  
-Uma implementação do <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> método que a cadeia de caracteres de expressão personalizada de valores de propriedade de folha de editor de formulários.  
  
-Opcionalmente, uma implementação de construtor que define os valores iniciais do editor de folha de propriedades.  
  
A classe do editor de expressão personalizada associada cria uma instância de folha de editor derivada no <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> método, inicializa essa instância com a cadeia de caracteres de expressão atual definido para a propriedade de controle e retorna a instância para o designer visual. O visual designer permite que você defina a expressão da folha de propriedades e, em seguida, chama o <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> método para formar a cadeia de caracteres de expressão de valores de propriedade de folha de expressão de entrada.</para></block>
    <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
    <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
    <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionEditorSheet (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (serviceProvider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionEditorSheet(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.Design.ExpressionEditorSheet : IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet" Usage="new System.Web.UI.Design.ExpressionEditorSheet serviceProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">Uma implementação do provedor de serviço fornecida pelo host do designer, usada para obter serviços de tempo de design adicionais.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Porque o <xref:System.Web.UI.Design.ExpressionEditorSheet> classe é abstrata, você não pode criar uma instância de um <xref:System.Web.UI.Design.ExpressionEditorSheet> diretamente usando o <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> construtor.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Ao derivar do <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> classe, substitua o <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" /> construtor implementar ações de inicialização personalizada para sua implementação de folha de editor de expressão.  
  
Por exemplo, uma classe de folha de editor de expressão personalizada que implementa propriedades adicionais da expressão pode definir os valores padrão para as propriedades de expressão no <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" /> construtor. Uma classe de folha de editor de expressão personalizado pode definir sobrecargas de construtor público adicionais que usam valores de parâmetro de entrada para definir os valores iniciais para as propriedades de expressão.</para></block>
        <altmember cref="Overload:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor" />
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="GetExpression">
      <MemberSignature Language="C#" Value="public abstract string GetExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetExpression () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ GetExpression();" />
      <MemberSignature Language="F#" Value="abstract member GetExpression : unit -&gt; string" Usage="expressionEditorSheet.GetExpression " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando substituído em uma classe derivada, retorna a cadeia de caracteres de expressão que é formada pelos valores de propriedade de folha de editor de expressão.</summary>
        <returns>A cadeia de caracteres da expressão personalizada para os valores de propriedade atuais.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma folha de editor de expressão personalizada contém configurações de tempo de design para várias propriedades de expressão, que são combinadas para formar uma cadeia de caracteres de expressão. Os valores de propriedade de controle podem ser definidos usando cadeias de caracteres de expressão; as cadeias de caracteres de expressão são avaliadas em tempo de execução por um construtor de expressões.  
  
 O <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> método retorna uma cadeia de caracteres de expressão que é criada das propriedades de expressão atual. O visual designer permite que você defina a expressão da folha de propriedades e, em seguida, chama o <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> método para obter a cadeia de caracteres de expressão e definir o valor da propriedade de controle.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Derivar de uma folha de editor de expressão personalizada de <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> classe, se você estiver definindo um novo tipo de expressão para valores de propriedade de controle e você deseja criar a cadeia de caracteres de expressão com base em vários valores de propriedade de expressão. Uma implementação de classe derivada deve conter o seguinte: 
-Uma propriedade pública para cada valor distinto na cadeia de expressão que pode ser definida em tempo de design.  
  
-Uma implementação do <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> método que a cadeia de caracteres de expressão personalizada de valores de propriedade de folha de editor de formulários.  
  
-Opcionalmente, uma implementação de construtor que define os valores iniciais do editor de folha de propriedades.  
  
A classe do editor de expressão personalizada associada cria uma instância de folha de editor derivada no <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> método, inicializa essa instância com a cadeia de caracteres de expressão atual definido para a propriedade de controle e, em seguida, retorna a instância para o visual Designer. O visual designer permite que você defina a expressão da folha de propriedades e, em seguida, chama o <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> método para formar a cadeia de caracteres de expressão de valores de propriedade de folha de expressão de entrada.</para></block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public virtual bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditorSheet.IsValid" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValid : bool" Usage="System.Web.UI.Design.ExpressionEditorSheet.IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se a cadeia de caracteres da expressão é válida.</summary>
        <value><see langword="true" />, se a cadeia de caracteres de expressão é válida. Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa implementação base sempre retorna `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="ServiceProvider">
      <MemberSignature Language="C#" Value="public IServiceProvider ServiceProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IServiceProvider ServiceProvider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServiceProvider As IServiceProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IServiceProvider ^ ServiceProvider { IServiceProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ServiceProvider : IServiceProvider" Usage="System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IServiceProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a implementação do provedor de serviço usada pela folha do editor de expressão.</summary>
        <value>Um <see cref="T:System.IServiceProvider" />, geralmente fornecido pelo host de design, que pode ser usado para obter os serviços de tempo de design adicionais.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> construtor para definir o <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> implementação para uma folha de editor de expressão personalizada.  
  
 O <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> propriedade pode ser usada para acessar os serviços que são fornecidos pelo host de designer. Por exemplo, chamar o <xref:System.IServiceProvider.GetService%2A> método com o <xref:System.Web.UI.Design.IWebApplication> interface para acessar itens do projeto, documentos ou detalhes do arquivo de configuração que são fornecidos por meio do designer visual.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />
      </Docs>
    </Member>
  </Members>
</Type>