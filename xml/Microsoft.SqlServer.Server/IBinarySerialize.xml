<Type Name="IBinarySerialize" FullName="Microsoft.SqlServer.Server.IBinarySerialize">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cc0de35fff36a636e335a171d1b43b734cc9184b" /><Meta Name="ms.sourcegitcommit" Value="d40b35262cbc997b79bf76da3a39ccf59b738efc" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="12/05/2018" /><Meta Name="ms.locfileid" Value="52907860" /></Metadata><TypeSignature Language="C#" Value="public interface IBinarySerialize" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBinarySerialize" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.IBinarySerialize" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBinarySerialize" />
  <TypeSignature Language="C++ CLI" Value="public interface class IBinarySerialize" />
  <TypeSignature Language="F#" Value="type IBinarySerialize = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.4.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="7e0bf-101">Fornece uma implementação personalizada para o UDT (tipo definido pelo usuário) e a serialização e desserialização de agregação definidas pelo usuário.</span><span class="sxs-lookup"><span data-stu-id="7e0bf-101">Provides custom implementation for user-defined type (UDT) and user-defined aggregate serialization and deserialization.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0bf-102">Tipos definidos pelo usuário (UDTs) e agregações definidas pelo usuário são necessárias para definir um formato de armazenamento, que pode ser uma <xref:Microsoft.SqlServer.Server.Format>.`Native`</span><span class="sxs-lookup"><span data-stu-id="7e0bf-102">User-defined types (UDTs) and user-defined aggregates are required to define a storage format, which can be either <xref:Microsoft.SqlServer.Server.Format>.`Native`</span></span> <span data-ttu-id="7e0bf-103">ou <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`.</span><span class="sxs-lookup"><span data-stu-id="7e0bf-103">or <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`.</span></span>  
  
 <span data-ttu-id="7e0bf-104"><xref:Microsoft.SqlServer.Server.Format>.`Native`</span><span class="sxs-lookup"><span data-stu-id="7e0bf-104"><xref:Microsoft.SqlServer.Server.Format>.`Native`</span></span> <span data-ttu-id="7e0bf-105">permite ao SQL Server lidar com a serialização e desserialização automaticamente, mas o formato tem restrições no tipo de tipos pode manipular.</span><span class="sxs-lookup"><span data-stu-id="7e0bf-105">allows SQL Server to handle serialization and deserialization automatically, but the format has restrictions on the kind of types it can handle.</span></span> <span data-ttu-id="7e0bf-106"><xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span><span class="sxs-lookup"><span data-stu-id="7e0bf-106"><xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span></span> <span data-ttu-id="7e0bf-107">permite que os tipos definidos pelo usuário e agregações lidar com sua própria serialização.</span><span class="sxs-lookup"><span data-stu-id="7e0bf-107">allows user-defined types and aggregates to handle their own serialization.</span></span> <span data-ttu-id="7e0bf-108">Tipos definidos pelo usuário e agregações devem ser marcadas com <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span><span class="sxs-lookup"><span data-stu-id="7e0bf-108">User-defined types and aggregates must be marked with <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span></span> <span data-ttu-id="7e0bf-109">no `SqlUserDefinedType` ou `SqlUserDefinedAggregate` do atributo e deve implementar o <xref:Microsoft.SqlServer.Server.IBinarySerialize> interface.</span><span class="sxs-lookup"><span data-stu-id="7e0bf-109">in the `SqlUserDefinedType` or `SqlUserDefinedAggregate` attribute, and must implement the <xref:Microsoft.SqlServer.Server.IBinarySerialize> interface.</span></span>  
  
 <span data-ttu-id="7e0bf-110">Observe que, mesmo com a serialização personalizada, o tamanho total de cada instância deve ser sob o limite máximo permitido, no momento de 8000 bytes.</span><span class="sxs-lookup"><span data-stu-id="7e0bf-110">Note that even with custom serialization, the total size of each instance must be under the maximum allowed limit, currently 8000 bytes.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public void Read (System.IO.BinaryReader r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Read(class System.IO.BinaryReader r) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Read (r As BinaryReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Read(System::IO::BinaryReader ^ r);" />
      <MemberSignature Language="F#" Value="abstract member Read : System.IO.BinaryReader -&gt; unit" Usage="iBinarySerialize.Read r" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.IO.BinaryReader" />
      </Parameters>
      <Docs>
        <param name="r"><span data-ttu-id="7e0bf-111">O fluxo do <see cref="T:System.IO.BinaryReader" /> do qual o objeto é desserializado.</span><span class="sxs-lookup"><span data-stu-id="7e0bf-111">The <see cref="T:System.IO.BinaryReader" /> stream from which the object is deserialized.</span></span></param>
        <summary><span data-ttu-id="7e0bf-112">Gera um UDT (tipo definido pelo usuário) ou a agregação definida pelo usuário de seu formato binário.</span><span class="sxs-lookup"><span data-stu-id="7e0bf-112">Generates a user-defined type (UDT) or user-defined aggregate from its binary form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0bf-113">O <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> método deve reconstituir o objeto usando as informações gravadas pelo <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> método.</span><span class="sxs-lookup"><span data-stu-id="7e0bf-113">The <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method must reconstitute your object using the information written by the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e0bf-114">O exemplo a seguir mostra a implementação do <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> método de um UDT, que usa um <xref:System.IO.BinaryReader> desserializar um UDT previamente persistido.</span><span class="sxs-lookup"><span data-stu-id="7e0bf-114">The following example shows the implementation of the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method of a UDT, which uses a <xref:System.IO.BinaryReader> to de-serialize a previously persisted UDT.</span></span> <span data-ttu-id="7e0bf-115">Este exemplo supõe que o UDT tem duas propriedades de dados: `StringValue` e `DoubleValue`.</span><span class="sxs-lookup"><span data-stu-id="7e0bf-115">This example assumes that the UDT has two data properties: `StringValue` and `DoubleValue`.</span></span>  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#1)]
 [!code-vb[DataWorks IBinarySerialize Samples#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.IO.BinaryWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.IO.BinaryWriter w) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (w As BinaryWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::IO::BinaryWriter ^ w);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.IO.BinaryWriter -&gt; unit" Usage="iBinarySerialize.Write w" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.IO.BinaryWriter" />
      </Parameters>
      <Docs>
        <param name="w"><span data-ttu-id="7e0bf-116">O fluxo <see cref="T:System.IO.BinaryWriter" /> para o qual a agregação definida pelo usuário ou UDT é serializada.</span><span class="sxs-lookup"><span data-stu-id="7e0bf-116">The <see cref="T:System.IO.BinaryWriter" /> stream to which the UDT or user-defined aggregate is serialized.</span></span></param>
        <summary><span data-ttu-id="7e0bf-117">Converte um UDT (tipo definido pelo usuário) ou uma agregação definida pelo usuário em seu formato binário para que possa ser persistente.</span><span class="sxs-lookup"><span data-stu-id="7e0bf-117">Converts a user-defined type (UDT) or user-defined aggregate into its binary format so that it may be persisted.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0bf-118">Gravar informações suficientes para o fluxo binário para permitir que o <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> método para reconstituir seu UDT ou agregação definida pelo usuário.</span><span class="sxs-lookup"><span data-stu-id="7e0bf-118">Write sufficient information to the binary stream to allow the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method to reconstitute your UDT or user-defined aggregate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e0bf-119">O exemplo a seguir mostra a implementação do <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> método de um UDT, que usa um <xref:System.IO.BinaryWriter> para serializar a UDT no formato binário definido pelo usuário.</span><span class="sxs-lookup"><span data-stu-id="7e0bf-119">The following example shows the implementation of the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> method of a UDT, which uses a <xref:System.IO.BinaryWriter> to serialize the UDT in the user-defined binary format.</span></span> <span data-ttu-id="7e0bf-120">O propósito do preenchimento nulo de caractere é garantir que o valor de cadeia de caracteres seja totalmente separado do valor double, para que uma UDT seja comparada para outro no código Transact-SQL, bytes de cadeia de caracteres são comparados aos bytes de cadeia de caracteres e dois bytes são comparados em duplo bytes.</span><span class="sxs-lookup"><span data-stu-id="7e0bf-120">The purpose of the null character padding is to ensure that the string value is completely separated from the double value, so that one UDT is compared to another in Transact-SQL code, string bytes are compared to string bytes and double bytes are compared to double bytes.</span></span>  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#2](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#2)]
 [!code-vb[DataWorks IBinarySerialize Samples#2](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>