<Type Name="ReflectionPermission" FullName="System.Security.Permissions.ReflectionPermission">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c08008bdf563f164cd7c74825158f8369aa4b728" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30500290" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ReflectionPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ReflectionPermission extends System.Security.CodeAccessPermission implements class System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="DocId" Value="T:System.Security.Permissions.ReflectionPermission" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ReflectionPermission&#xA;Inherits CodeAccessPermission&#xA;Implements IUnrestrictedPermission" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReflectionPermission sealed : System::Security::CodeAccessPermission, System::Security::Permissions::IUnrestrictedPermission" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.CodeAccessPermission</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.Permissions.IUnrestrictedPermission</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Controla o acesso a membros e tipos não públicos por meio das APIs <see cref="N:System.Reflection" />. Controla alguns recursos das APIs <see cref="N:System.Reflection.Emit" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sem <xref:System.Security.Permissions.ReflectionPermission>, código pode usar reflexão para acessar somente os membros públicos de objetos. Com o código <xref:System.Security.Permissions.ReflectionPermission> e apropriada <xref:System.Security.Permissions.ReflectionPermissionFlag> sinalizadores podem acessar o `protected` e `private` membros dos objetos.  
  
> [!CAUTION]
>  Porque <xref:System.Security.Permissions.ReflectionPermission> pode fornecer acesso e membros de tipos não públicos, é recomendável que você não conceda <xref:System.Security.Permissions.ReflectionPermission> para o código de Internet, exceto o <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> sinalizador. <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> permite acesso a membros não-públicos, com a restrição de que o conjunto de concessão de membros não-públicos deve ser igual a ou um subconjunto do conjunto de concessão de código que acessa os membros não públicos.  
  
 Determinados recursos de reflexão emitir como emitem símbolos de depuração, exigem <xref:System.Security.Permissions.ReflectionPermission> com o <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> sinalizador.  
  
 Para obter mais informações, consulte a enumeração <xref:System.Security.Permissions.ReflectionPermissionFlag>.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.Permissions.ReflectionPermissionFlag" />
    <altmember cref="T:System.Security.Permissions.ReflectionPermissionAttribute" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Permissions.ReflectionPermission" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReflectionPermission (System.Security.Permissions.PermissionState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Permissions.PermissionState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.PermissionState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (state As PermissionState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReflectionPermission(System::Security::Permissions::PermissionState state);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="state" Type="System.Security.Permissions.PermissionState" />
      </Parameters>
      <Docs>
        <param name="state">Um dos valores de <see cref="T:System.Security.Permissions.PermissionState" />.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Permissions.ReflectionPermission" /> com permissão irrestrita ou totalmente restrita, conforme especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cria um totalmente restrito (`None`) ou `Unrestricted` acesso aos metadados.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra o uso do <xref:System.Security.Permissions.ReflectionPermission.%23ctor%28System.Security.Permissions.PermissionState%29?displayProperty=nameWithType> construtor. Este exemplo é parte de um exemplo maior fornecido para a <xref:System.Security.Permissions.ReflectionPermission> classe.  
  
 [!code-csharp[System.Security.Permissions.ReflectionPermission#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.ReflectionPermission/CS/reflectionpermission.cs#7)]
 [!code-vb[System.Security.Permissions.ReflectionPermission#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.ReflectionPermission/VB/reflectionpermission.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O parâmetro <paramref name="state" /> não é um valor válido de <see cref="T:System.Security.Permissions.PermissionState" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReflectionPermission (System.Security.Permissions.ReflectionPermissionFlag flag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Permissions.ReflectionPermissionFlag flag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.ReflectionPermissionFlag)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (flag As ReflectionPermissionFlag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReflectionPermission(System::Security::Permissions::ReflectionPermissionFlag flag);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="flag" Type="System.Security.Permissions.ReflectionPermissionFlag" />
      </Parameters>
      <Docs>
        <param name="flag">Um dos valores de <see cref="T:System.Security.Permissions.ReflectionPermissionFlag" />.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Permissions.ReflectionPermission" /> com o acesso especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir mostra o uso do <xref:System.Security.Permissions.ReflectionPermission.%23ctor%28System.Security.Permissions.ReflectionPermissionFlag%29?displayProperty=nameWithType> construtor. Este exemplo é parte de um exemplo maior fornecido para a <xref:System.Security.Permissions.ReflectionPermission> classe.  
  
 [!code-csharp[System.Security.Permissions.ReflectionPermission#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.ReflectionPermission/CS/reflectionpermission.cs#8)]
 [!code-vb[System.Security.Permissions.ReflectionPermission#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.ReflectionPermission/VB/reflectionpermission.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O parâmetro <paramref name="flag" /> não é um valor válido de <see cref="T:System.Security.Permissions.ReflectionPermissionFlag" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.ReflectionPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::IPermission ^ Copy();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cria e retorna uma cópia idêntica da permissão atual.</summary>
        <returns>Uma cópia da permissão atual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma cópia de uma permissão representa o mesmo acesso a recursos como a permissão original.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra o comportamento do <xref:System.Security.Permissions.ReflectionPermission.Copy%2A> método. Este exemplo é parte de um exemplo maior fornecido para a <xref:System.Security.Permissions.ReflectionPermission> classe.  
  
> [!NOTE]
>  O exemplo de código destina-se para mostrar o comportamento do método, não para demonstrar o seu uso. Em geral, os métodos das classes de permissão são usados pela infraestrutura de segurança; eles não são normalmente usados em aplicativos.  
  
 [!code-csharp[System.Security.Permissions.ReflectionPermission#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.ReflectionPermission/CS/reflectionpermission.cs#5)]
 [!code-vb[System.Security.Permissions.ReflectionPermission#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.ReflectionPermission/VB/reflectionpermission.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flags">
      <MemberSignature Language="C#" Value="public System.Security.Permissions.ReflectionPermissionFlag Flags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Permissions.ReflectionPermissionFlag Flags" />
      <MemberSignature Language="DocId" Value="P:System.Security.Permissions.ReflectionPermission.Flags" />
      <MemberSignature Language="VB.NET" Value="Public Property Flags As ReflectionPermissionFlag" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Permissions::ReflectionPermissionFlag Flags { System::Security::Permissions::ReflectionPermissionFlag get(); void set(System::Security::Permissions::ReflectionPermissionFlag value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.ReflectionPermissionFlag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o tipo de reflexão permitido para a permissão atual.</summary>
        <value>Os sinalizadores de conjunto para a permissão atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir mostra o uso do <xref:System.Security.Permissions.ReflectionPermission.Flags%2A> propriedade. Este exemplo é parte de um exemplo maior fornecido para a <xref:System.Security.Permissions.ReflectionPermission> classe.  
  
 [!code-csharp[System.Security.Permissions.ReflectionPermission#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.ReflectionPermission/CS/reflectionpermission.cs#2)]
 [!code-vb[System.Security.Permissions.ReflectionPermission#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.ReflectionPermission/VB/reflectionpermission.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">É feita uma tentativa de definir essa propriedade como um valor inválido. Veja <see cref="T:System.Security.Permissions.ReflectionPermissionFlag" /> para obter os valores válidos.</exception>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public override void FromXml (System.Security.SecurityElement esd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void FromXml(class System.Security.SecurityElement esd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.ReflectionPermission.FromXml(System.Security.SecurityElement)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub FromXml (esd As SecurityElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void FromXml(System::Security::SecurityElement ^ esd);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="esd" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="esd">A codificação de XML a usar para reconstruir a permissão.</param>
        <summary>Reconstrói um a permissão com um estado especificado de uma codificação XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir mostra o comportamento do <xref:System.Security.Permissions.ReflectionPermission.FromXml%2A> método. Este exemplo é parte de um exemplo maior fornecido para a <xref:System.Security.Permissions.ReflectionPermission> classe.  
  
> [!NOTE]
>  O exemplo de código destina-se para mostrar o comportamento do método, não para demonstrar o seu uso. Em geral, os métodos das classes de permissão são usados pela infraestrutura de segurança; eles não são normalmente usados em aplicativos.  
  
 [!code-csharp[System.Security.Permissions.ReflectionPermission#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.ReflectionPermission/CS/reflectionpermission.cs#6)]
 [!code-vb[System.Security.Permissions.ReflectionPermission#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.ReflectionPermission/VB/reflectionpermission.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="esd" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">O parâmetro <paramref name="esd" /> não é um elemento de permissão válido.  
  
 - ou -  
  
 O número de versão do parâmetro <paramref name="esd" /> não é válido.</exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.ReflectionPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Uma permissão para ter interseção com a permissão atual. Ele deve ser do mesmo tipo da permissão atual.</param>
        <summary>Cria e retorna uma permissão que é a interseção de permissão atual e da permissão especificada.</summary>
        <returns>Uma nova permissão que representa a interseção da permissão atual e da permissão especificada. Essa nova permissão é <see langword="null" /> se a interseção estiver vazia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A interseção de duas permissões é uma permissão que descreve o conjunto de operações que ambas descrevem em comum. Somente uma demanda que passa as permissões originais passará a interseção.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra o comportamento do <xref:System.Security.Permissions.ReflectionPermission.Intersect%2A> método. Este exemplo é parte de um exemplo maior fornecido para a <xref:System.Security.Permissions.ReflectionPermission> classe.  
  
> [!NOTE]
>  O exemplo de código destina-se para mostrar o comportamento do método, não para demonstrar o seu uso. Em geral, os métodos das classes de permissão são usados pela infraestrutura de segurança; eles não são normalmente usados em aplicativos.  
  
 [!code-csharp[System.Security.Permissions.ReflectionPermission#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.ReflectionPermission/CS/reflectionpermission.cs#4)]
 [!code-vb[System.Security.Permissions.ReflectionPermission#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.ReflectionPermission/VB/reflectionpermission.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O parâmetro <paramref name="target" /> não é <see langword="null" /> e não é do mesmo tipo que a permissão atual.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public override bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.ReflectionPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Uma permissão que deve ser testada quanto à relação de subconjunto. Essa permissão deve ser do mesmo tipo da permissão atual.</param>
        <summary>Determina se a permissão atual é um subconjunto da permissão especificada.</summary>
        <returns>
          <see langword="true" /> se a permissão atual for um subconjunto da permissão especificada; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A permissão atual é um subconjunto de permissão especificada se a permissão atual especifica um conjunto de operações é totalmente contido pelo conjunto de permissões especificado. Por exemplo, uma permissão que representa acesso à C:\example.txt é um subconjunto de uma permissão que representa acesso na unidade c:\\. Se esse método retornar `true`, a permissão atual não representa nenhum mais acesso ao recurso protegido que a permissão especificada.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra o comportamento do <xref:System.Security.Permissions.ReflectionPermission.IsSubsetOf%2A> método. Este exemplo é parte de um exemplo maior fornecido para a <xref:System.Security.Permissions.ReflectionPermission> classe.  
  
> [!NOTE]
>  O exemplo de código destina-se para mostrar o comportamento do método, não para demonstrar o seu uso. Em geral, os métodos das classes de permissão são usados pela infraestrutura de segurança; eles não são normalmente usados em aplicativos.  
  
 [!code-csharp[System.Security.Permissions.ReflectionPermission#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.ReflectionPermission/CS/reflectionpermission.cs#2)]
 [!code-vb[System.Security.Permissions.ReflectionPermission#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.ReflectionPermission/VB/reflectionpermission.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O parâmetro <paramref name="target" /> não é <see langword="null" /> e não é do mesmo tipo que a permissão atual.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsUnrestricted">
      <MemberSignature Language="C#" Value="public bool IsUnrestricted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUnrestricted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.ReflectionPermission.IsUnrestricted" />
      <MemberSignature Language="VB.NET" Value="Public Function IsUnrestricted () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsUnrestricted();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.Permissions.IUnrestrictedPermission.IsUnrestricted</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna um valor que indica se a permissão atual é irrestrita.</summary>
        <returns>
          <see langword="true" /> se a permissão for irrestrita; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma permissão irrestrita representa acesso a todos os recursos protegidos pela permissão.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public override System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.ReflectionPermission.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToXml () As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::SecurityElement ^ ToXml();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cria uma codificação XML da permissão e de seu estado atual.</summary>
        <returns>Uma codificação XML da permissão, incluindo quaisquer informações de estado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir mostra o comportamento do <xref:System.Security.Permissions.ReflectionPermission.ToXml%2A> método. Este exemplo é parte de um exemplo maior fornecido para a <xref:System.Security.Permissions.ReflectionPermission> classe.  
  
> [!NOTE]
>  O exemplo de código destina-se para mostrar o comportamento do método, não para demonstrar o seu uso. Em geral, os métodos das classes de permissão são usados pela infraestrutura de segurança; eles não são normalmente usados em aplicativos.  
  
 [!code-csharp[System.Security.Permissions.ReflectionPermission#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.ReflectionPermission/CS/reflectionpermission.cs#6)]
 [!code-vb[System.Security.Permissions.ReflectionPermission#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.ReflectionPermission/VB/reflectionpermission.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Union (System.Security.IPermission other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Union(class System.Security.IPermission other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.ReflectionPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Union (other As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::IPermission ^ Union(System::Security::IPermission ^ other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="other">Uma permissão a ser combinada com a permissão atual. Ele deve ser do mesmo tipo da permissão atual.</param>
        <summary>Cria uma permissão que é a união entre a permissão atual e a permissão especificada.</summary>
        <returns>Uma nova permissão que representa a união da permissão atual e da permissão especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O resultado de uma chamada para <xref:System.Security.Permissions.ReflectionPermission.Union%2A> é uma permissão que representa todas as operações representadas pela permissão atual e a permissão especificada. Qualquer solicitação que passa a ter a permissão passa seu union.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra o comportamento do <xref:System.Security.Permissions.ReflectionPermission.Union%2A> método. Este exemplo é parte de um exemplo maior fornecido para a <xref:System.Security.Permissions.ReflectionPermission> classe.  
  
> [!NOTE]
>  O exemplo de código destina-se para mostrar o comportamento do método, não para demonstrar o seu uso. Em geral, os métodos das classes de permissão são usados pela infraestrutura de segurança; eles não são normalmente usados em aplicativos.  
  
 [!code-csharp[System.Security.Permissions.ReflectionPermission#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.ReflectionPermission/CS/reflectionpermission.cs#3)]
 [!code-vb[System.Security.Permissions.ReflectionPermission#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.ReflectionPermission/VB/reflectionpermission.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O parâmetro <paramref name="other" /> não é <see langword="null" /> e não é do mesmo tipo que a permissão atual.</exception>
      </Docs>
    </Member>
  </Members>
</Type>