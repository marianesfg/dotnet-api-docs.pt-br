<Type Name="RequestValidator" FullName="System.Web.Util.RequestValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e9af6ca1efee30c522e150ec0ff7b42684ff91ce" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36574989" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RequestValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RequestValidator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.RequestValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class RequestValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class RequestValidator" />
  <TypeSignature Language="F#" Value="type RequestValidator = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Define métodos base para a validação de solicitação personalizada.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por padrão, ASP.NET não valida solicitações até que o código solicita explicitamente um valor da solicitação. Por exemplo, ASP.NET não valida valores de cadeia de caracteres de consulta até que o código acessa o <xref:System.Web.HttpRequest.QueryString%2A> coleção. Por padrão, ASP.NET também não validar alguns tipos de dados de solicitação, como valores de formulário, cookies, os nomes dos arquivos que foram carregados usando HTTP e o valor de <xref:System.Web.HttpRequest.RawUrl%2A> propriedade.  
  
 O <xref:System.Web.Util.RequestValidator> classe é uma classe base que você pode implementar para fornecer a validação de solicitação personalizado. Ao implementar essa classe, você pode determinar quando ocorre a validação e o tipo de dados de solicitação para executar a validação.  
  
 Por padrão, o ASP.NET oferece verificações de script entre sites (XSS). No entanto, você pode suplementar ou substituir a lógica de validação de solicitação que é fornecida no ASP.NET, criando uma implementação personalizada do XSS. Por exemplo, você pode escrever uma implementação de validação de solicitação personalizado que as verificações de ataques de injeção de SQL além de verificar para ataques XSS.  
  
 Para criar a validação de solicitação personalizado, você escreve uma classe personalizada que deriva de <xref:System.Web.Util.RequestValidator> classe base. Você, em seguida, configurar o ASP.NET para usar o validador de solicitação personalizado no arquivo Web. config de nível de aplicativo. Você pode colocar a classe personalizada na pasta App_Code, em uma biblioteca de classe compilados na pasta Bin, ou em uma biblioteca de classe compilados no GAC.  
  
> [!NOTE]
>  Apenas um tipo de validação de solicitação personalizado pode ser configurado para um aplicativo. Não é possível configurar um tipo de validação de solicitação diferentes para caminhos virtuais individuais ou páginas.  
  
   
  
## Examples  
 O exemplo a seguir mostra como criar um validador de solicitação personalizado que permite apenas uma cadeia de caracteres específica a ser usado para valores de cadeia de caracteres de consulta.  
  
 [!code-csharp[System.Web.Util.RequestValidator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.util.requestvalidator/cs/requestvalidator.cs#1)]
 [!code-vb[System.Web.Util.RequestValidator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.util.requestvalidator/vb/requestvalidator.vb#1)]  
  
 O exemplo a seguir mostra como configurar o ASP.NET para usar o validador personalizado no arquivo Web. config para um aplicativo.  
  
```  
<system.web>  
  <httpRuntime requestValidationType="CustomRequestValidation" />  
</system.web>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Util.RequestValidationSource" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RequestValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RequestValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Web.Util.RequestValidator" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Util.RequestValidator> classe tem um construtor padrão. Quando uma nova instância da classe é inicializada, um método interno recupera os detalhes de validação personalizada de informações de configuração do aplicativo. Os detalhes de configuração estão contidos no <xref:System.Web.Configuration.HttpRuntimeSection> seção. Para obter mais informações, consulte [httpRuntime Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369) e <xref:System.Web.Configuration.HttpRuntimeSection.RequestValidationType%2A> atributo.  
  
 Durante a inicialização, uma única instância de <xref:System.Web.Util.RequestValidator> classe é criada, e uma referência para a instância é mantida no <xref:System.Web.Util.RequestValidator.Current%2A> propriedade. ASP.NET não cria uma nova instância de validador de solicitação por solicitação. Portanto, implementações personalizadas de <xref:System.Web.Util.RequestValidator> classe deve ser thread-safe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.RequestValidator Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.RequestValidator Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.RequestValidator.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As RequestValidator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::RequestValidator ^ Current { System::Web::Util::RequestValidator ^ get(); void set(System::Web::Util::RequestValidator ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Web.Util.RequestValidator with get, set" Usage="System.Web.Util.RequestValidator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define uma referência à instância de <see cref="T:System.Web.Util.RequestValidator" /> atual que será usada em um aplicativo.</summary>
        <value>Uma instância da classe <see cref="T:System.Web.Util.RequestValidator" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Util.RequestValidator.Current%2A> propriedade mantém uma referência para a instância única permitida do <xref:System.Web.Util.RequestValidator> classe. Se nenhuma instância existir, um novo será criado. Se já existir uma instância, a instância atual é retornada.  
  
 Durante a inicialização, uma única instância do <xref:System.Web.Util.RequestValidator> classe é criada e uma referência para a instância é disponibilizada no <xref:System.Web.Util.RequestValidator.Current%2A> propriedade. ASP.NET não cria uma nova instância de validador de solicitação por solicitação. Portanto, implementações personalizadas de <xref:System.Web.Util.RequestValidator> classe deve ser thread-safe.  
  
> [!NOTE]
>  O <xref:System.Web.Util.RequestValidator.Current%2A> propriedade não é thread-safe, enquanto a propriedade é definir uma referência ao atual <xref:System.Web.Util.RequestValidator> classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">A propriedade é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeIsValidRequestString">
      <MemberSignature Language="C#" Value="public bool InvokeIsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InvokeIsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool InvokeIsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberSignature Language="F#" Value="member this.InvokeIsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool" Usage="requestValidator.InvokeIsValidRequestString (context, value, requestValidationSource, collectionKey, validationFailureIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" />
        <Parameter Name="collectionKey" Type="System.String" />
        <Parameter Name="validationFailureIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">O contexto HTTP da solicitação.</param>
        <param name="value">Os dados da solicitação HTTP a serem validados.</param>
        <param name="requestValidationSource">Uma enumeração que representa a origem dos dados de solicitação sendo validados. A seguir estão os valores possíveis para a enumeração: <see langword="QueryString" />  
  
-   <see langword="Form" />  
  
-   <see langword="Cookies" />  
  
-   <see langword="Files" />  
  
-   <see langword="Path" />  
  
-   <see langword="PathInfo" />  
  
-   <see langword="Headers" /></param>
        <param name="collectionKey">(Opcional) A chave na coleção de solicitações do item a ser validado. Esse parâmetro será usado se os dados a serem validados forem obtidos de uma coleção. Se os dados a serem validados não forem de uma coleção, esse parâmetro poderá ser <see langword="null" />.</param>
        <param name="validationFailureIndex">Quando este método retorna, indica o ponto de partida com base em zero do texto inválido ou problemático na coleção de solicitações. Este parâmetro é passado não inicializado.</param>
        <summary>Fornece um método público que chama o método <see cref="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" /> protegido para validar dados de solicitação HTTP.</summary>
        <returns>
          <see langword="true" /> se a cadeia de caracteres a ser validada não contém caracteres sem codificação que poderiam ser usados em um ataque de script mal-intencionado; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Util.RequestValidator.InvokeIsValidRequestString%2A> método fornece acesso público ao protegido <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> método. Isso permite que você crie uma classe wrapper personalizado para o <xref:System.Web.Util.RequestValidator> classe e chamar o <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> método sem ter que herdam o <xref:System.Web.Util.RequestValidator> classe.  
  
 Para obter informações sobre a validação de solicitação, consulte <xref:System.Web.UnvalidatedRequestValues>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidRequestString">
      <MemberSignature Language="C#" Value="protected internal virtual bool IsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool IsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool IsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberSignature Language="F#" Value="abstract member IsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool&#xA;override this.IsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool" Usage="requestValidator.IsValidRequestString (context, value, requestValidationSource, collectionKey, validationFailureIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" />
        <Parameter Name="collectionKey" Type="System.String" />
        <Parameter Name="validationFailureIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">O contexto da solicitação atual.</param>
        <param name="value">Os dados da solicitação HTTP a serem validados.</param>
        <param name="requestValidationSource">Uma enumeração que representa a origem dos dados de solicitação sendo validados. A seguir, valores possíveis para a enumeração: <see langword="QueryString" />
- <see langword="Form " />
- <see langword="Cookies" />
- <see langword="Files" />
- <see langword="RawUrl" />
- <see langword="Path" />
- <see langword="PathInfo" />
- <see langword="Headers" /></param>
        <param name="collectionKey">A chave na coleção de solicitações do item a ser validado. Esse parâmetro é opcional. Esse parâmetro será usado se os dados a serem validados forem obtidos de uma coleção. Se os dados a serem validados não forem de uma coleção, <c>collectionKey</c> poderá ser <see langword="null" />.</param>
        <param name="validationFailureIndex">Quando este método retorna, indica o ponto de partida com base em zero do texto inválido ou problemático na coleção de solicitações. Este parâmetro é passado não inicializado.</param>
        <summary>Valida uma cadeia de caracteres que contém dados de solicitação HTTP.</summary>
        <returns>
          <see langword="true" /> se a cadeia de caracteres a ser validada for válida, caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementar esse método para executar a validação personalizada dos dados de solicitação. O comportamento básico do <xref:System.Web.Util.RequestValidator.IsValidRequestString%28System.Web.HttpContext%2CSystem.String%2CSystem.Web.Util.RequestValidationSource%2CSystem.String%2CSystem.Int32%40%29> método é como o comportamento que o ASP.NET implementa internamente para verificar se há cadeias de caracteres perigosas na validação de scripts entre sites. Para obter mais informações, consulte [como: evitar o scripts intersites no ASP.NET](http://go.microsoft.com/fwlink/?LinkID=178708).  
  
 Se a lógica de validação personalizada detecta um erro, esse método deve retornar `false` e forneça um valor em `validationFailureIndex` para indicar o ponto de partida do texto que causou o erro. O valor em `validationFailureIndex` deve ser 0 ou um número inteiro positivo.  
  
 A lógica em uma verificação de validação de solicitação procede da seguinte maneira:  
  
-   O <xref:System.Web.HttpRequest> classe executa uma verificação de remoção de caractere nulo nos dados de entrada.  
  
-   O <xref:System.Web.HttpRequest> classe chama o o <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> método (a implementação padrão do método base) ou chama uma versão derivada do método.  
  
-   Se <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> método `false` para indicar uma falha de validação, o ASP.NET constrói uma cadeia de caracteres de erro (se necessário) e gera um <xref:System.Web.HttpRequestValidationException> exceção.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>