<Type Name="EventListener" FullName="System.Diagnostics.Tracing.EventListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c34942c86fb97a516c2d071023deb4a1a215b96f" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52608477" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class EventListener : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EventListener extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Tracing.EventListener" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EventListener&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventListener abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type EventListener = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Tracing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="d4c43-101">Fornece métodos para habilitar e desabilitar eventos de fontes de eventos.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d4c43-101">Provides methods for enabling and disabling events from event sources.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4c43-102">Um ouvinte de evento representa o destino para todos os eventos gerados pela origem do evento (<xref:System.Diagnostics.Tracing.EventSource> objeto) implementações no domínio do aplicativo atual.</span><span class="sxs-lookup"><span data-stu-id="d4c43-102">An event listener represents the target for all events generated by event source (<xref:System.Diagnostics.Tracing.EventSource> object) implementations in the current application domain.</span></span> <span data-ttu-id="d4c43-103">Quando um novo ouvinte de evento é criado, ele é logicamente anexado a todas as fontes de evento no domínio de aplicativo.</span><span class="sxs-lookup"><span data-stu-id="d4c43-103">When a new event listener is created, it is logically attached to all event sources in that application domain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d4c43-104">Esse tipo implementa o <xref:System.IDisposable> interface.</span><span class="sxs-lookup"><span data-stu-id="d4c43-104">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="d4c43-105">Quando você terminar de usar o tipo, é necessário descartar dele, direta ou indiretamente.</span><span class="sxs-lookup"><span data-stu-id="d4c43-105">When you have finished using the type, you must dispose of it either directly or indirectly.</span></span> <span data-ttu-id="d4c43-106">Para descartar o tipo diretamente, chame seu <xref:System.IDisposable.Dispose%2A> método em um `try` / `catch` bloco.</span><span class="sxs-lookup"><span data-stu-id="d4c43-106">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="d4c43-107">Para descartá-los indiretamente, usar uma construção de linguagem, como `using` (em c#) ou `Using` (no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="d4c43-107">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="d4c43-108">Para obter mais informações, consulte a seção "Usando um objeto que implementa IDisposable" o <xref:System.IDisposable> tópico da interface.</span><span class="sxs-lookup"><span data-stu-id="d4c43-108">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="d4c43-109">Um ouvinte de eventos pode habilitar ou desabilitar em uma base de código-fonte do evento-atual usando níveis de evento (<xref:System.Diagnostics.Tracing.EventLevel>) e palavras-chave do evento (<xref:System.Diagnostics.Tracing.EventKeywords>) para restringir ainda mais o conjunto de eventos a serem enviados para o ouvinte.</span><span class="sxs-lookup"><span data-stu-id="d4c43-109">An event listener can enable or disable on a per-current event source basis by using event levels (<xref:System.Diagnostics.Tracing.EventLevel>) and event keywords (<xref:System.Diagnostics.Tracing.EventKeywords>) to further restrict the set of events to be sent to the listener.</span></span> <span data-ttu-id="d4c43-110">O ouvinte também pode enviar comandos arbitrários para uma origem do evento atual específico usando o <xref:System.Diagnostics.Tracing.EventSource.SendCommand%2A> método.</span><span class="sxs-lookup"><span data-stu-id="d4c43-110">The listener can also send arbitrary commands to a specific current event source by using the <xref:System.Diagnostics.Tracing.EventSource.SendCommand%2A> method.</span></span> <span data-ttu-id="d4c43-111">Os significados dos comandos são específicos à implementação da origem do evento.</span><span class="sxs-lookup"><span data-stu-id="d4c43-111">The meanings of the commands are specific to the implementation of the event source.</span></span>  
  
 <span data-ttu-id="d4c43-112">Se o <xref:System.Diagnostics.Tracing.EventSource.Guid%2A> propriedade no <xref:System.Diagnostics.Tracing.EventSource> é o objeto que é usado para habilitar ou desabilitar eventos <xref:System.Guid.Empty>, todas as fontes de evento no domínio do aplicativo são afetadas.</span><span class="sxs-lookup"><span data-stu-id="d4c43-112">If the <xref:System.Diagnostics.Tracing.EventSource.Guid%2A> property in the <xref:System.Diagnostics.Tracing.EventSource> object that is used to enable or disable events is <xref:System.Guid.Empty>, all event sources in the application domain are affected.</span></span>  
  
 <span data-ttu-id="d4c43-113">Vários ouvintes de eventos podem ser definidos em um único domínio de aplicativo.</span><span class="sxs-lookup"><span data-stu-id="d4c43-113">Multiple event listeners can be defined in a single application domain.</span></span> <span data-ttu-id="d4c43-114">Cada ouvinte é logicamente independente dos outros ouvintes para que os eventos que são habilitados ou desabilitados por um ouvinte afetam somente esse ouvinte.</span><span class="sxs-lookup"><span data-stu-id="d4c43-114">Each listener is logically independent of the other listeners so that events that are enabled or disabled by one listener affect only that listener.</span></span> <span data-ttu-id="d4c43-115">É possível que comandos enviados com o <xref:System.Diagnostics.Tracing.EventSource.SendCommand%2A> método para fazer com que uma operação de semântica (como uma coleta de lixo ou liberar dados) que afeta os outros ouvintes, mas isso é a exceção em vez da regra.</span><span class="sxs-lookup"><span data-stu-id="d4c43-115">It is possible for commands sent with the <xref:System.Diagnostics.Tracing.EventSource.SendCommand%2A> method to do a semantic operation (such as a garbage collection or flushing data) that affects the other listeners, but this is the exception rather than the rule.</span></span>  
  
 <span data-ttu-id="d4c43-116">Cada origem do evento mantém uma lista de ouvintes de eventos que ele envia eventos para.</span><span class="sxs-lookup"><span data-stu-id="d4c43-116">Each event source   keeps a list of event listeners that it sends events to.</span></span> <span data-ttu-id="d4c43-117">Um conjunto de critérios de filtragem está associado a cada par de ouvinte de origem do evento.</span><span class="sxs-lookup"><span data-stu-id="d4c43-117">A set of filtering criteria is associated with each event source-listener pair.</span></span> <span data-ttu-id="d4c43-118">Esses critérios determinam os eventos receberá esse ouvinte para a origem do evento atual.</span><span class="sxs-lookup"><span data-stu-id="d4c43-118">These criteria determine the events that listener will receive for the current event source.</span></span> <span data-ttu-id="d4c43-119">Ouvintes de recebem os eventos em seus <xref:System.Diagnostics.Tracing.EventListener.OnEventWritten%2A> método.</span><span class="sxs-lookup"><span data-stu-id="d4c43-119">Listeners receive the events on their <xref:System.Diagnostics.Tracing.EventListener.OnEventWritten%2A> method.</span></span> <span data-ttu-id="d4c43-120">Portanto, as subclasses de <xref:System.Diagnostics.Tracing.EventListener> deve substituir esse método para fazer algo útil com os dados.</span><span class="sxs-lookup"><span data-stu-id="d4c43-120">Therefore, subclasses of <xref:System.Diagnostics.Tracing.EventListener> must override this method to do something useful with the data.</span></span>  
  
 <span data-ttu-id="d4c43-121">Quando uma nova origem do evento é criada, o <xref:System.Diagnostics.Tracing.EventListener.OnEventSourceCreated%2A> método é chamado.</span><span class="sxs-lookup"><span data-stu-id="d4c43-121">When a new event source is created, the <xref:System.Diagnostics.Tracing.EventListener.OnEventSourceCreated%2A> method is called.</span></span> <span data-ttu-id="d4c43-122">Cada ouvinte de evento atual obtém exatamente um <xref:System.Diagnostics.Tracing.EventListener.OnEventSourceCreated%2A> chamar para cada origem do evento atual que pode enviá-lo as mensagens de log.</span><span class="sxs-lookup"><span data-stu-id="d4c43-122">Every current event listener gets exactly one <xref:System.Diagnostics.Tracing.EventListener.OnEventSourceCreated%2A> call for every current event source that can send it log messages.</span></span> <span data-ttu-id="d4c43-123">Quando um ouvinte de eventos é criado, uma série de <xref:System.Diagnostics.Tracing.EventListener.OnEventSourceCreated%2A> chamadas são feitas para notificar o novo ouvinte de todas as origens de evento que existiam antes que o ouvinte foi criado.</span><span class="sxs-lookup"><span data-stu-id="d4c43-123">When an event listener is created, a series of <xref:System.Diagnostics.Tracing.EventListener.OnEventSourceCreated%2A> calls are made to notify the new listener of all the event sources that existed before the listener was created.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EventListener ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Tracing.EventListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; EventListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Tracing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d4c43-124">Cria uma nova instância da classe <see cref="T:System.Diagnostics.Tracing.EventListener" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4c43-124">Creates a new instance of the <see cref="T:System.Diagnostics.Tracing.EventListener" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4c43-125">Todos os eventos são desabilitados quando uma nova instância é criada.</span><span class="sxs-lookup"><span data-stu-id="d4c43-125">All events are disabled when a new instance is created.</span></span> <span data-ttu-id="d4c43-126">Use o <xref:System.Diagnostics.Tracing.EventListener.EnableEvents%2A> métodos para habilitar eventos.</span><span class="sxs-lookup"><span data-stu-id="d4c43-126">Use the <xref:System.Diagnostics.Tracing.EventListener.EnableEvents%2A> methods to enable events.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableEvents">
      <MemberSignature Language="C#" Value="public void DisableEvents (System.Diagnostics.Tracing.EventSource eventSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DisableEvents(class System.Diagnostics.Tracing.EventSource eventSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Tracing.EventListener.DisableEvents(System.Diagnostics.Tracing.EventSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DisableEvents(System::Diagnostics::Tracing::EventSource ^ eventSource);" />
      <MemberSignature Language="F#" Value="member this.DisableEvents : System.Diagnostics.Tracing.EventSource -&gt; unit" Usage="eventListener.DisableEvents eventSource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Tracing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSource" Type="System.Diagnostics.Tracing.EventSource" />
      </Parameters>
      <Docs>
        <param name="eventSource">
          <span data-ttu-id="d4c43-127">A origem do evento para a qual os eventos serão desabilitados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4c43-127">The event source to disable events for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4c43-128">Desabilita todos os eventos para a origem do evento especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4c43-128">Disables all events for the specified event source.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4c43-129">Se o <xref:System.Diagnostics.Tracing.EventSource.Guid%2A> propriedade para `eventSource` é <xref:System.Guid.Empty>, os eventos para todas as fontes de evento no domínio do aplicativo são desabilitados para este ouvinte de evento.</span><span class="sxs-lookup"><span data-stu-id="d4c43-129">If the <xref:System.Diagnostics.Tracing.EventSource.Guid%2A> property for `eventSource` is <xref:System.Guid.Empty>, events for all event sources in the application domain are disabled for this event listener.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public virtual void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Tracing.EventListener.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="eventListener.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Tracing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d4c43-130">Libera os recursos usados pela instância atual da classe <see cref="T:System.Diagnostics.Tracing.EventListener" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4c43-130">Releases the resources used by the current instance of the <see cref="T:System.Diagnostics.Tracing.EventListener" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4c43-131">Chame `Dispose` quando tiver terminado de usar o <xref:System.Diagnostics.Tracing.EventListener>.</span><span class="sxs-lookup"><span data-stu-id="d4c43-131">Call `Dispose` when you are finished using the <xref:System.Diagnostics.Tracing.EventListener>.</span></span> <span data-ttu-id="d4c43-132">O `Dispose` método deixa o <xref:System.Diagnostics.Tracing.EventListener> em um estado inutilizável.</span><span class="sxs-lookup"><span data-stu-id="d4c43-132">The `Dispose` method leaves the <xref:System.Diagnostics.Tracing.EventListener> in an unusable state.</span></span> <span data-ttu-id="d4c43-133">Depois de chamar `Dispose`, você deve liberar todas as referências para o <xref:System.Diagnostics.Tracing.EventListener> para que o coletor de lixo possa recuperar a memória que o <xref:System.Diagnostics.Tracing.EventListener> estava ocupando.</span><span class="sxs-lookup"><span data-stu-id="d4c43-133">After calling `Dispose`, you must release all references to the <xref:System.Diagnostics.Tracing.EventListener> so the garbage collector can reclaim the memory that the <xref:System.Diagnostics.Tracing.EventListener> was occupying.</span></span>  
  
 <span data-ttu-id="d4c43-134">Para obter mais informações, consulte [limpeza de recursos não gerenciados](~/docs/standard/garbage-collection/unmanaged.md) e [implementando um método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="d4c43-134">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnableEvents">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Tracing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d4c43-135">Habilita eventos para a origem do evento especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4c43-135">Enables events for the specified event source.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnableEvents">
      <MemberSignature Language="C#" Value="public void EnableEvents (System.Diagnostics.Tracing.EventSource eventSource, System.Diagnostics.Tracing.EventLevel level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnableEvents(class System.Diagnostics.Tracing.EventSource eventSource, valuetype System.Diagnostics.Tracing.EventLevel level) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnableEvents(System::Diagnostics::Tracing::EventSource ^ eventSource, System::Diagnostics::Tracing::EventLevel level);" />
      <MemberSignature Language="F#" Value="member this.EnableEvents : System.Diagnostics.Tracing.EventSource * System.Diagnostics.Tracing.EventLevel -&gt; unit" Usage="eventListener.EnableEvents (eventSource, level)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Tracing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSource" Type="System.Diagnostics.Tracing.EventSource" />
        <Parameter Name="level" Type="System.Diagnostics.Tracing.EventLevel" />
      </Parameters>
      <Docs>
        <param name="eventSource">
          <span data-ttu-id="d4c43-136">A origem do evento para a qual os eventos serão habilitados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4c43-136">The event source to enable events for.</span>
          </span>
        </param>
        <param name="level">
          <span data-ttu-id="d4c43-137">O nível de eventos a ser habilitado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4c43-137">The level of events to enable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4c43-138">Habilita eventos para a origem do evento especificado que têm o nível de detalhes especificado ou inferior.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4c43-138">Enables events for the specified event source that has the specified verbosity level or lower.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4c43-139">Se o <xref:System.Diagnostics.Tracing.EventSource.Guid%2A> propriedade especificado na `eventSource` é <xref:System.Guid.Empty>, todas as fontes de evento no domínio do aplicativo são afetadas.</span><span class="sxs-lookup"><span data-stu-id="d4c43-139">If the <xref:System.Diagnostics.Tracing.EventSource.Guid%2A> property in the specified `eventSource` is <xref:System.Guid.Empty>, all event sources in the application domain are affected.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableEvents">
      <MemberSignature Language="C#" Value="public void EnableEvents (System.Diagnostics.Tracing.EventSource eventSource, System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords matchAnyKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnableEvents(class System.Diagnostics.Tracing.EventSource eventSource, valuetype System.Diagnostics.Tracing.EventLevel level, valuetype System.Diagnostics.Tracing.EventKeywords matchAnyKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnableEvents(System::Diagnostics::Tracing::EventSource ^ eventSource, System::Diagnostics::Tracing::EventLevel level, System::Diagnostics::Tracing::EventKeywords matchAnyKeyword);" />
      <MemberSignature Language="F#" Value="member this.EnableEvents : System.Diagnostics.Tracing.EventSource * System.Diagnostics.Tracing.EventLevel * System.Diagnostics.Tracing.EventKeywords -&gt; unit" Usage="eventListener.EnableEvents (eventSource, level, matchAnyKeyword)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Tracing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSource" Type="System.Diagnostics.Tracing.EventSource" />
        <Parameter Name="level" Type="System.Diagnostics.Tracing.EventLevel" />
        <Parameter Name="matchAnyKeyword" Type="System.Diagnostics.Tracing.EventKeywords" />
      </Parameters>
      <Docs>
        <param name="eventSource">
          <span data-ttu-id="d4c43-140">A origem do evento para a qual os eventos serão habilitados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4c43-140">The event source to enable events for.</span>
          </span>
        </param>
        <param name="level">
          <span data-ttu-id="d4c43-141">O nível de eventos a ser habilitado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4c43-141">The level of events to enable.</span>
          </span>
        </param>
        <param name="matchAnyKeyword">
          <span data-ttu-id="d4c43-142">Os sinalizadores de palavra-chave necessários para habilitar os eventos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4c43-142">The keyword flags necessary to enable the events.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4c43-143">Habilita eventos para a origem do evento especificado que têm o nível de detalhes especificado ou inferior e os sinalizadores de palavra-chave de correspondência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4c43-143">Enables events for the specified event source that has the specified verbosity level or lower, and matching keyword flags.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4c43-144">Se o <xref:System.Diagnostics.Tracing.EventSource.Guid%2A> propriedade especificado na `eventSource` é <xref:System.Guid.Empty>, todas as fontes de evento no domínio do aplicativo são afetadas.</span><span class="sxs-lookup"><span data-stu-id="d4c43-144">If the <xref:System.Diagnostics.Tracing.EventSource.Guid%2A> property in the specified `eventSource` is <xref:System.Guid.Empty>, all event sources in the application domain are affected.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableEvents">
      <MemberSignature Language="C#" Value="public void EnableEvents (System.Diagnostics.Tracing.EventSource eventSource, System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords matchAnyKeyword, System.Collections.Generic.IDictionary&lt;string,string&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnableEvents(class System.Diagnostics.Tracing.EventSource eventSource, valuetype System.Diagnostics.Tracing.EventLevel level, valuetype System.Diagnostics.Tracing.EventKeywords matchAnyKeyword, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnableEvents(System::Diagnostics::Tracing::EventSource ^ eventSource, System::Diagnostics::Tracing::EventLevel level, System::Diagnostics::Tracing::EventKeywords matchAnyKeyword, System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="member this.EnableEvents : System.Diagnostics.Tracing.EventSource * System.Diagnostics.Tracing.EventLevel * System.Diagnostics.Tracing.EventKeywords * System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; unit" Usage="eventListener.EnableEvents (eventSource, level, matchAnyKeyword, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Tracing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSource" Type="System.Diagnostics.Tracing.EventSource" />
        <Parameter Name="level" Type="System.Diagnostics.Tracing.EventLevel" />
        <Parameter Name="matchAnyKeyword" Type="System.Diagnostics.Tracing.EventKeywords" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="eventSource">
          <span data-ttu-id="d4c43-145">A origem do evento para a qual os eventos serão habilitados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4c43-145">The event source to enable events for.</span>
          </span>
        </param>
        <param name="level">
          <span data-ttu-id="d4c43-146">O nível de eventos a ser habilitado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4c43-146">The level of events to enable.</span>
          </span>
        </param>
        <param name="matchAnyKeyword">
          <span data-ttu-id="d4c43-147">Os sinalizadores de palavra-chave necessários para habilitar os eventos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4c43-147">The keyword flags necessary to enable the events.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="d4c43-148">Os argumentos a serem correspondidos para habilitar os eventos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4c43-148">The arguments to be matched to enable the events.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4c43-149">Habilita eventos para a origem do evento especificada que têm o nível de detalhes especificado ou inferior e os sinalizadores de palavra-chave e argumentos correspondentes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4c43-149">Enables events for the specified event source that has the specified verbosity level or lower, matching event keyword flag, and matching arguments.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4c43-150">Se o <xref:System.Diagnostics.Tracing.EventSource.Guid%2A> propriedade especificado na `eventSource` é <xref:System.Guid.Empty>, todas as fontes de evento no domínio do aplicativo são afetadas.</span><span class="sxs-lookup"><span data-stu-id="d4c43-150">If the <xref:System.Diagnostics.Tracing.EventSource.Guid%2A> property in the specified `eventSource` is <xref:System.Guid.Empty>, all event sources in the application domain are affected.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EventSourceCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Diagnostics.Tracing.EventSourceCreatedEventArgs&gt; EventSourceCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Diagnostics.Tracing.EventSourceCreatedEventArgs&gt; EventSourceCreated" />
      <MemberSignature Language="DocId" Value="E:System.Diagnostics.Tracing.EventListener.EventSourceCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event EventSourceCreated As EventHandler(Of EventSourceCreatedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Diagnostics::Tracing::EventSourceCreatedEventArgs ^&gt; ^ EventSourceCreated;" />
      <MemberSignature Language="F#" Value="member this.EventSourceCreated : EventHandler&lt;System.Diagnostics.Tracing.EventSourceCreatedEventArgs&gt; " Usage="member this.EventSourceCreated : System.EventHandler&lt;System.Diagnostics.Tracing.EventSourceCreatedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Tracing</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Diagnostics.Tracing.EventSourceCreatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d4c43-151">Ocorre quando uma fonte do evento (objeto <see cref="T:System.Diagnostics.Tracing.EventSource" />) está anexado ao dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4c43-151">Occurs when an event source (<see cref="T:System.Diagnostics.Tracing.EventSource" /> object) is attached to the dispatcher.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4c43-152">O <xref:System.Diagnostics.Tracing.EventListener.EventSourceCreated> ocorre para todas as fontes de evento existentes quando o ouvinte de eventos é criado, bem como para qualquer fonte de evento que é criado após a criação do ouvinte de evento.</span><span class="sxs-lookup"><span data-stu-id="d4c43-152">The <xref:System.Diagnostics.Tracing.EventListener.EventSourceCreated> occurs for all existing event sources when the event listener is created, as well as for any event sources that are created after the event listener's creation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EventSourceIndex">
      <MemberSignature Language="C#" Value="public static int EventSourceIndex (System.Diagnostics.Tracing.EventSource eventSource);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 EventSourceIndex(class System.Diagnostics.Tracing.EventSource eventSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Tracing.EventListener.EventSourceIndex(System.Diagnostics.Tracing.EventSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int EventSourceIndex(System::Diagnostics::Tracing::EventSource ^ eventSource);" />
      <MemberSignature Language="F#" Value="static member EventSourceIndex : System.Diagnostics.Tracing.EventSource -&gt; int" Usage="System.Diagnostics.Tracing.EventListener.EventSourceIndex eventSource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Tracing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSource" Type="System.Diagnostics.Tracing.EventSource" />
      </Parameters>
      <Docs>
        <param name="eventSource">
          <span data-ttu-id="d4c43-153">A origem do evento para a qual o índice será localizado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4c43-153">The event source to find the index for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4c43-154">Obtém um pequeno número não negativo que representa a origem do evento especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4c43-154">Gets a small non-negative number that represents the specified event source.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4c43-155">Um pequeno número não negativo que representa a origem do evento especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4c43-155">A small non-negative number that represents the specified event source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4c43-156">O valor retornado por <xref:System.Diagnostics.Tracing.EventListener.EventSourceIndex%2A> identifica uma fonte de evento que é adequada para indexação de uma matriz.</span><span class="sxs-lookup"><span data-stu-id="d4c43-156">The value returned by <xref:System.Diagnostics.Tracing.EventListener.EventSourceIndex%2A> identifies an event source that is suitable for indexing an array.</span></span> <span data-ttu-id="d4c43-157">Esse número inteiro é exclusivo dentro do domínio de aplicativo.</span><span class="sxs-lookup"><span data-stu-id="d4c43-157">This integer is unique within the application domain.</span></span> <span data-ttu-id="d4c43-158">Um ouvinte de eventos pode ser útil para armazenar informações adicionais sobre cada origem do evento que está conectada a ele.</span><span class="sxs-lookup"><span data-stu-id="d4c43-158">An event listener might find it useful to store additional information about each event source that is connected to it.</span></span> <span data-ttu-id="d4c43-159">O valor retornado por <xref:System.Diagnostics.Tracing.EventListener.EventSourceIndex%2A> permite que essas informações extra a ser armazenado com eficiência em uma matriz de expansível como `List<T>`.</span><span class="sxs-lookup"><span data-stu-id="d4c43-159">The value returned by <xref:System.Diagnostics.Tracing.EventListener.EventSourceIndex%2A> allows this extra information to be efficiently stored in a  expandable array such as `List<T>`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EventWritten">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Diagnostics.Tracing.EventWrittenEventArgs&gt; EventWritten;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Diagnostics.Tracing.EventWrittenEventArgs&gt; EventWritten" />
      <MemberSignature Language="DocId" Value="E:System.Diagnostics.Tracing.EventListener.EventWritten" />
      <MemberSignature Language="VB.NET" Value="Public Event EventWritten As EventHandler(Of EventWrittenEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Diagnostics::Tracing::EventWrittenEventArgs ^&gt; ^ EventWritten;" />
      <MemberSignature Language="F#" Value="member this.EventWritten : EventHandler&lt;System.Diagnostics.Tracing.EventWrittenEventArgs&gt; " Usage="member this.EventWritten : System.EventHandler&lt;System.Diagnostics.Tracing.EventWrittenEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Tracing</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Diagnostics.Tracing.EventWrittenEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d4c43-160">Ocorre quando um evento foi gravado por uma origem do evento (objeto <see cref="T:System.Diagnostics.Tracing.EventSource" />) para a qual o ouvinte de eventos habilitou eventos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4c43-160">Occurs when an event has been written by an event source (<see cref="T:System.Diagnostics.Tracing.EventSource" /> object) for which the event listener has enabled events.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEventSourceCreated">
      <MemberSignature Language="C#" Value="protected internal virtual void OnEventSourceCreated (System.Diagnostics.Tracing.EventSource eventSource);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnEventSourceCreated(class System.Diagnostics.Tracing.EventSource eventSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Tracing.EventListener.OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnEventSourceCreated(System::Diagnostics::Tracing::EventSource ^ eventSource);" />
      <MemberSignature Language="F#" Value="abstract member OnEventSourceCreated : System.Diagnostics.Tracing.EventSource -&gt; unit&#xA;override this.OnEventSourceCreated : System.Diagnostics.Tracing.EventSource -&gt; unit" Usage="eventListener.OnEventSourceCreated eventSource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Tracing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSource" Type="System.Diagnostics.Tracing.EventSource" />
      </Parameters>
      <Docs>
        <param name="eventSource">
          <span data-ttu-id="d4c43-161">A fonte do evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4c43-161">The event source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4c43-162">Chamado para todas as origens do evento existentes quando o ouvinte do evento é criado e quando uma nova origem do evento é anexada ao ouvinte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4c43-162">Called for all existing event sources when the event listener is created and when a new event source is attached to the listener.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4c43-163">Implementações de origem do evento devem estar cientes de que esses retornos de chamada são emitidos para fontes de evento existentes quando o ouvinte de eventos é instanciado.</span><span class="sxs-lookup"><span data-stu-id="d4c43-163">Event source implementations should be aware that these callbacks are issued for existing event sources when the event listener is instantiated.</span></span>  
  
 <span data-ttu-id="d4c43-164">Em um ambiente multithreaded, é possível <xref:System.Diagnostics.Tracing.EventListener.OnEventWritten%2A> retornos de chamada antes do <xref:System.Diagnostics.Tracing.EventListener.OnEventSourceCreated%2A> retorno de chamada.</span><span class="sxs-lookup"><span data-stu-id="d4c43-164">In a multithreaded environment, it is possible for <xref:System.Diagnostics.Tracing.EventListener.OnEventWritten%2A> callbacks  to occur before the <xref:System.Diagnostics.Tracing.EventListener.OnEventSourceCreated%2A> callback.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEventWritten">
      <MemberSignature Language="C#" Value="protected internal abstract void OnEventWritten (System.Diagnostics.Tracing.EventWrittenEventArgs eventData);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnEventWritten(class System.Diagnostics.Tracing.EventWrittenEventArgs eventData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Sub OnEventWritten (eventData As EventWrittenEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void OnEventWritten(System::Diagnostics::Tracing::EventWrittenEventArgs ^ eventData);" />
      <MemberSignature Language="F#" Value="abstract member OnEventWritten : System.Diagnostics.Tracing.EventWrittenEventArgs -&gt; unit" Usage="eventListener.OnEventWritten eventData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Tracing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventData" Type="System.Diagnostics.Tracing.EventWrittenEventArgs" />
      </Parameters>
      <Docs>
        <param name="eventData">
          <span data-ttu-id="d4c43-165">Os argumentos de evento que descrevem o evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4c43-165">The event arguments that describe the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4c43-166">Chamado sempre que um evento tiver sido gravado por uma origem do evento para a qual o ouvinte de eventos tiver habilitado eventos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4c43-166">Called whenever an event has been written by an event source for which the event listener has enabled events.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>